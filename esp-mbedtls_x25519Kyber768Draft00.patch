From 1fc6744442b42b59b92ba7aa377b01dfb612c5b1 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Tue, 15 Oct 2024 11:21:27 +0100
Subject: [PATCH 01/10] added the X25519KYBER768Draft00 feature

---
 include/mbedtls/ssl.h       |     2 +
 library/CMakeLists.txt      |     2 +
 library/Makefile            |     2 +
 library/fips202.c           |   943 ++
 library/fips202.h           |   166 +
 library/fips203ipd.c        | 25767 ++++++++++++++++++++++++++++++++++
 library/fips203ipd.h        |   397 +
 library/hex.h               |    15 +
 library/rand-bytes.h        |    21 +
 library/ssl_client.c        |     6 +-
 library/ssl_misc.h          |     7 +
 library/ssl_tls.c           |     3 +
 library/ssl_tls13_client.c  |    52 +-
 library/ssl_tls13_generic.c |    94 +
 library/ssl_tls13_keys.c    |    49 +-
 15 files changed, 27521 insertions(+), 5 deletions(-)
 create mode 100644 library/fips202.c
 create mode 100644 library/fips202.h
 create mode 100644 library/fips203ipd.c
 create mode 100644 library/fips203ipd.h
 create mode 100644 library/hex.h
 create mode 100644 library/rand-bytes.h

diff --git a/include/mbedtls/ssl.h b/include/mbedtls/ssl.h
index 42fffbf860b2..b0e9456abf3f 100644
--- a/include/mbedtls/ssl.h
+++ b/include/mbedtls/ssl.h
@@ -216,6 +216,8 @@
 #define MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE4096     0x0102
 #define MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE6144     0x0103
 #define MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE8192     0x0104
+/*X25519KYBER768draft00 Group*/
+#define MBEDTLS_SSL_TLS_GROUP_X25519KYBER768	 0x6399
 
 /*
  * TLS 1.3 Key Exchange Modes
diff --git a/library/CMakeLists.txt b/library/CMakeLists.txt
index e4d8f0d026a1..21c37a03f193 100644
--- a/library/CMakeLists.txt
+++ b/library/CMakeLists.txt
@@ -108,6 +108,8 @@ set(src_x509
 
 set(src_tls
     debug.c
+	fips202.c
+	fips203ipd.c
     mps_reader.c
     mps_trace.c
     net_sockets.c
diff --git a/library/Makefile b/library/Makefile
index a5e023e1782c..4818779ef38e 100644
--- a/library/Makefile
+++ b/library/Makefile
@@ -204,6 +204,8 @@ OBJS_X509= \
 
 OBJS_TLS= \
 	  debug.o \
+	  fips202.o \
+	  fips203ipd.o \
 	  mps_reader.o \
 	  mps_trace.o \
 	  net_sockets.o \
diff --git a/library/fips202.c b/library/fips202.c
new file mode 100644
index 000000000000..d6486359db21
--- /dev/null
+++ b/library/fips202.c
@@ -0,0 +1,943 @@
+/* Based on the public domain implementation in
+ * crypto_hash/keccakc512/simple/ from http://bench.cr.yp.to/supercop.html
+ * by Ronny Van Keer
+ * and the public domain "TweetFips202" implementation
+ * from https://twitter.com/tweetfips202
+ * by Gilles Van Assche, Daniel J. Bernstein, and Peter Schwabe */
+
+#include <stddef.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "fips202.h"
+
+#define NROUNDS 24
+#define ROL(a, offset) (((a) << (offset)) ^ ((a) >> (64 - (offset))))
+
+/*************************************************
+ * Name:        load64
+ *
+ * Description: Load 8 bytes into uint64_t in little-endian order
+ *
+ * Arguments:   - const uint8_t *x: pointer to input byte array
+ *
+ * Returns the loaded 64-bit unsigned integer
+ **************************************************/
+static uint64_t load64(const uint8_t *x) {
+    uint64_t r = 0;
+    for (size_t i = 0; i < 8; ++i) {
+        r |= (uint64_t)x[i] << 8 * i;
+    }
+
+    return r;
+}
+
+/*************************************************
+ * Name:        store64
+ *
+ * Description: Store a 64-bit integer to a byte array in little-endian order
+ *
+ * Arguments:   - uint8_t *x: pointer to the output byte array
+ *              - uint64_t u: input 64-bit unsigned integer
+ **************************************************/
+static void store64(uint8_t *x, uint64_t u) {
+    for (size_t i = 0; i < 8; ++i) {
+        x[i] = (uint8_t) (u >> 8 * i);
+    }
+}
+
+/* Keccak round constants */
+static const uint64_t KeccakF_RoundConstants[NROUNDS] = {
+    0x0000000000000001ULL, 0x0000000000008082ULL,
+    0x800000000000808aULL, 0x8000000080008000ULL,
+    0x000000000000808bULL, 0x0000000080000001ULL,
+    0x8000000080008081ULL, 0x8000000000008009ULL,
+    0x000000000000008aULL, 0x0000000000000088ULL,
+    0x0000000080008009ULL, 0x000000008000000aULL,
+    0x000000008000808bULL, 0x800000000000008bULL,
+    0x8000000000008089ULL, 0x8000000000008003ULL,
+    0x8000000000008002ULL, 0x8000000000000080ULL,
+    0x000000000000800aULL, 0x800000008000000aULL,
+    0x8000000080008081ULL, 0x8000000000008080ULL,
+    0x0000000080000001ULL, 0x8000000080008008ULL
+};
+
+/*************************************************
+ * Name:        KeccakF1600_StatePermute
+ *
+ * Description: The Keccak F1600 Permutation
+ *
+ * Arguments:   - uint64_t *state: pointer to input/output Keccak state
+ **************************************************/
+static void KeccakF1600_StatePermute(uint64_t *state) {
+    int round;
+
+    uint64_t Aba, Abe, Abi, Abo, Abu;
+    uint64_t Aga, Age, Agi, Ago, Agu;
+    uint64_t Aka, Ake, Aki, Ako, Aku;
+    uint64_t Ama, Ame, Ami, Amo, Amu;
+    uint64_t Asa, Ase, Asi, Aso, Asu;
+    uint64_t BCa, BCe, BCi, BCo, BCu;
+    uint64_t Da, De, Di, Do, Du;
+    uint64_t Eba, Ebe, Ebi, Ebo, Ebu;
+    uint64_t Ega, Ege, Egi, Ego, Egu;
+    uint64_t Eka, Eke, Eki, Eko, Eku;
+    uint64_t Ema, Eme, Emi, Emo, Emu;
+    uint64_t Esa, Ese, Esi, Eso, Esu;
+
+    // copyFromState(A, state)
+    Aba = state[0];
+    Abe = state[1];
+    Abi = state[2];
+    Abo = state[3];
+    Abu = state[4];
+    Aga = state[5];
+    Age = state[6];
+    Agi = state[7];
+    Ago = state[8];
+    Agu = state[9];
+    Aka = state[10];
+    Ake = state[11];
+    Aki = state[12];
+    Ako = state[13];
+    Aku = state[14];
+    Ama = state[15];
+    Ame = state[16];
+    Ami = state[17];
+    Amo = state[18];
+    Amu = state[19];
+    Asa = state[20];
+    Ase = state[21];
+    Asi = state[22];
+    Aso = state[23];
+    Asu = state[24];
+
+    for (round = 0; round < NROUNDS; round += 2) {
+        //    prepareTheta
+        BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
+        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
+        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
+        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
+        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
+
+        // thetaRhoPiChiIotaPrepareTheta(round  , A, E)
+        Da = BCu ^ ROL(BCe, 1);
+        De = BCa ^ ROL(BCi, 1);
+        Di = BCe ^ ROL(BCo, 1);
+        Do = BCi ^ ROL(BCu, 1);
+        Du = BCo ^ ROL(BCa, 1);
+
+        Aba ^= Da;
+        BCa = Aba;
+        Age ^= De;
+        BCe = ROL(Age, 44);
+        Aki ^= Di;
+        BCi = ROL(Aki, 43);
+        Amo ^= Do;
+        BCo = ROL(Amo, 21);
+        Asu ^= Du;
+        BCu = ROL(Asu, 14);
+        Eba = BCa ^ ((~BCe) & BCi);
+        Eba ^= KeccakF_RoundConstants[round];
+        Ebe = BCe ^ ((~BCi) & BCo);
+        Ebi = BCi ^ ((~BCo) & BCu);
+        Ebo = BCo ^ ((~BCu) & BCa);
+        Ebu = BCu ^ ((~BCa) & BCe);
+
+        Abo ^= Do;
+        BCa = ROL(Abo, 28);
+        Agu ^= Du;
+        BCe = ROL(Agu, 20);
+        Aka ^= Da;
+        BCi = ROL(Aka, 3);
+        Ame ^= De;
+        BCo = ROL(Ame, 45);
+        Asi ^= Di;
+        BCu = ROL(Asi, 61);
+        Ega = BCa ^ ((~BCe) & BCi);
+        Ege = BCe ^ ((~BCi) & BCo);
+        Egi = BCi ^ ((~BCo) & BCu);
+        Ego = BCo ^ ((~BCu) & BCa);
+        Egu = BCu ^ ((~BCa) & BCe);
+
+        Abe ^= De;
+        BCa = ROL(Abe, 1);
+        Agi ^= Di;
+        BCe = ROL(Agi, 6);
+        Ako ^= Do;
+        BCi = ROL(Ako, 25);
+        Amu ^= Du;
+        BCo = ROL(Amu, 8);
+        Asa ^= Da;
+        BCu = ROL(Asa, 18);
+        Eka = BCa ^ ((~BCe) & BCi);
+        Eke = BCe ^ ((~BCi) & BCo);
+        Eki = BCi ^ ((~BCo) & BCu);
+        Eko = BCo ^ ((~BCu) & BCa);
+        Eku = BCu ^ ((~BCa) & BCe);
+
+        Abu ^= Du;
+        BCa = ROL(Abu, 27);
+        Aga ^= Da;
+        BCe = ROL(Aga, 36);
+        Ake ^= De;
+        BCi = ROL(Ake, 10);
+        Ami ^= Di;
+        BCo = ROL(Ami, 15);
+        Aso ^= Do;
+        BCu = ROL(Aso, 56);
+        Ema = BCa ^ ((~BCe) & BCi);
+        Eme = BCe ^ ((~BCi) & BCo);
+        Emi = BCi ^ ((~BCo) & BCu);
+        Emo = BCo ^ ((~BCu) & BCa);
+        Emu = BCu ^ ((~BCa) & BCe);
+
+        Abi ^= Di;
+        BCa = ROL(Abi, 62);
+        Ago ^= Do;
+        BCe = ROL(Ago, 55);
+        Aku ^= Du;
+        BCi = ROL(Aku, 39);
+        Ama ^= Da;
+        BCo = ROL(Ama, 41);
+        Ase ^= De;
+        BCu = ROL(Ase, 2);
+        Esa = BCa ^ ((~BCe) & BCi);
+        Ese = BCe ^ ((~BCi) & BCo);
+        Esi = BCi ^ ((~BCo) & BCu);
+        Eso = BCo ^ ((~BCu) & BCa);
+        Esu = BCu ^ ((~BCa) & BCe);
+
+        //    prepareTheta
+        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
+        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
+        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
+        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
+        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
+
+        // thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
+        Da = BCu ^ ROL(BCe, 1);
+        De = BCa ^ ROL(BCi, 1);
+        Di = BCe ^ ROL(BCo, 1);
+        Do = BCi ^ ROL(BCu, 1);
+        Du = BCo ^ ROL(BCa, 1);
+
+        Eba ^= Da;
+        BCa = Eba;
+        Ege ^= De;
+        BCe = ROL(Ege, 44);
+        Eki ^= Di;
+        BCi = ROL(Eki, 43);
+        Emo ^= Do;
+        BCo = ROL(Emo, 21);
+        Esu ^= Du;
+        BCu = ROL(Esu, 14);
+        Aba = BCa ^ ((~BCe) & BCi);
+        Aba ^= KeccakF_RoundConstants[round + 1];
+        Abe = BCe ^ ((~BCi) & BCo);
+        Abi = BCi ^ ((~BCo) & BCu);
+        Abo = BCo ^ ((~BCu) & BCa);
+        Abu = BCu ^ ((~BCa) & BCe);
+
+        Ebo ^= Do;
+        BCa = ROL(Ebo, 28);
+        Egu ^= Du;
+        BCe = ROL(Egu, 20);
+        Eka ^= Da;
+        BCi = ROL(Eka, 3);
+        Eme ^= De;
+        BCo = ROL(Eme, 45);
+        Esi ^= Di;
+        BCu = ROL(Esi, 61);
+        Aga = BCa ^ ((~BCe) & BCi);
+        Age = BCe ^ ((~BCi) & BCo);
+        Agi = BCi ^ ((~BCo) & BCu);
+        Ago = BCo ^ ((~BCu) & BCa);
+        Agu = BCu ^ ((~BCa) & BCe);
+
+        Ebe ^= De;
+        BCa = ROL(Ebe, 1);
+        Egi ^= Di;
+        BCe = ROL(Egi, 6);
+        Eko ^= Do;
+        BCi = ROL(Eko, 25);
+        Emu ^= Du;
+        BCo = ROL(Emu, 8);
+        Esa ^= Da;
+        BCu = ROL(Esa, 18);
+        Aka = BCa ^ ((~BCe) & BCi);
+        Ake = BCe ^ ((~BCi) & BCo);
+        Aki = BCi ^ ((~BCo) & BCu);
+        Ako = BCo ^ ((~BCu) & BCa);
+        Aku = BCu ^ ((~BCa) & BCe);
+
+        Ebu ^= Du;
+        BCa = ROL(Ebu, 27);
+        Ega ^= Da;
+        BCe = ROL(Ega, 36);
+        Eke ^= De;
+        BCi = ROL(Eke, 10);
+        Emi ^= Di;
+        BCo = ROL(Emi, 15);
+        Eso ^= Do;
+        BCu = ROL(Eso, 56);
+        Ama = BCa ^ ((~BCe) & BCi);
+        Ame = BCe ^ ((~BCi) & BCo);
+        Ami = BCi ^ ((~BCo) & BCu);
+        Amo = BCo ^ ((~BCu) & BCa);
+        Amu = BCu ^ ((~BCa) & BCe);
+
+        Ebi ^= Di;
+        BCa = ROL(Ebi, 62);
+        Ego ^= Do;
+        BCe = ROL(Ego, 55);
+        Eku ^= Du;
+        BCi = ROL(Eku, 39);
+        Ema ^= Da;
+        BCo = ROL(Ema, 41);
+        Ese ^= De;
+        BCu = ROL(Ese, 2);
+        Asa = BCa ^ ((~BCe) & BCi);
+        Ase = BCe ^ ((~BCi) & BCo);
+        Asi = BCi ^ ((~BCo) & BCu);
+        Aso = BCo ^ ((~BCu) & BCa);
+        Asu = BCu ^ ((~BCa) & BCe);
+    }
+
+    // copyToState(state, A)
+    state[0] = Aba;
+    state[1] = Abe;
+    state[2] = Abi;
+    state[3] = Abo;
+    state[4] = Abu;
+    state[5] = Aga;
+    state[6] = Age;
+    state[7] = Agi;
+    state[8] = Ago;
+    state[9] = Agu;
+    state[10] = Aka;
+    state[11] = Ake;
+    state[12] = Aki;
+    state[13] = Ako;
+    state[14] = Aku;
+    state[15] = Ama;
+    state[16] = Ame;
+    state[17] = Ami;
+    state[18] = Amo;
+    state[19] = Amu;
+    state[20] = Asa;
+    state[21] = Ase;
+    state[22] = Asi;
+    state[23] = Aso;
+    state[24] = Asu;
+}
+
+/*************************************************
+ * Name:        keccak_absorb
+ *
+ * Description: Absorb step of Keccak;
+ *              non-incremental, starts by zeroeing the state.
+ *
+ * Arguments:   - uint64_t *s: pointer to (uninitialized) output Keccak state
+ *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
+ *              - const uint8_t *m: pointer to input to be absorbed into s
+ *              - size_t mlen: length of input in bytes
+ *              - uint8_t p: domain-separation byte for different
+ *                                 Keccak-derived functions
+ **************************************************/
+static void keccak_absorb(uint64_t *s, uint32_t r, const uint8_t *m,
+                          size_t mlen, uint8_t p) {
+    size_t i;
+    uint8_t t[200];
+
+    /* Zero state */
+    for (i = 0; i < 25; ++i) {
+        s[i] = 0;
+    }
+
+    while (mlen >= r) {
+        for (i = 0; i < r / 8; ++i) {
+            s[i] ^= load64(m + 8 * i);
+        }
+
+        KeccakF1600_StatePermute(s);
+        mlen -= r;
+        m += r;
+    }
+
+    for (i = 0; i < r; ++i) {
+        t[i] = 0;
+    }
+    for (i = 0; i < mlen; ++i) {
+        t[i] = m[i];
+    }
+    t[i] = p;
+    t[r - 1] |= 128;
+    for (i = 0; i < r / 8; ++i) {
+        s[i] ^= load64(t + 8 * i);
+    }
+}
+
+/*************************************************
+ * Name:        keccak_squeezeblocks
+ *
+ * Description: Squeeze step of Keccak. Squeezes full blocks of r bytes each.
+ *              Modifies the state. Can be called multiple times to keep
+ *              squeezing, i.e., is incremental.
+ *
+ * Arguments:   - uint8_t *h: pointer to output blocks
+ *              - size_t nblocks: number of blocks to be
+ *                                                squeezed (written to h)
+ *              - uint64_t *s: pointer to input/output Keccak state
+ *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
+ **************************************************/
+static void keccak_squeezeblocks(uint8_t *h, size_t nblocks,
+                                 uint64_t *s, uint32_t r) {
+    while (nblocks > 0) {
+        KeccakF1600_StatePermute(s);
+        for (size_t i = 0; i < (r >> 3); i++) {
+            store64(h + 8 * i, s[i]);
+        }
+        h += r;
+        nblocks--;
+    }
+}
+
+/*************************************************
+ * Name:        keccak_inc_init
+ *
+ * Description: Initializes the incremental Keccak state to zero.
+ *
+ * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
+ *                First 25 values represent Keccak state.
+ *                26th value represents either the number of absorbed bytes
+ *                that have not been permuted, or not-yet-squeezed bytes.
+ **************************************************/
+static void keccak_inc_init(uint64_t *s_inc) {
+    size_t i;
+
+    for (i = 0; i < 25; ++i) {
+        s_inc[i] = 0;
+    }
+    s_inc[25] = 0;
+}
+
+/*************************************************
+ * Name:        keccak_inc_absorb
+ *
+ * Description: Incremental keccak absorb
+ *              Preceded by keccak_inc_init, succeeded by keccak_inc_finalize
+ *
+ * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
+ *                First 25 values represent Keccak state.
+ *                26th value represents either the number of absorbed bytes
+ *                that have not been permuted, or not-yet-squeezed bytes.
+ *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
+ *              - const uint8_t *m: pointer to input to be absorbed into s
+ *              - size_t mlen: length of input in bytes
+ **************************************************/
+static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
+                              size_t mlen) {
+    size_t i;
+
+    /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
+    while (mlen + s_inc[25] >= r) {
+        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
+            /* Take the i'th byte from message
+               xor with the s_inc[25] + i'th byte of the state; little-endian */
+            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
+        }
+        mlen -= (size_t)(r - s_inc[25]);
+        m += r - s_inc[25];
+        s_inc[25] = 0;
+
+        KeccakF1600_StatePermute(s_inc);
+    }
+
+    for (i = 0; i < mlen; i++) {
+        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
+    }
+    s_inc[25] += mlen;
+}
+
+/*************************************************
+ * Name:        keccak_inc_finalize
+ *
+ * Description: Finalizes Keccak absorb phase, prepares for squeezing
+ *
+ * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
+ *                First 25 values represent Keccak state.
+ *                26th value represents either the number of absorbed bytes
+ *                that have not been permuted, or not-yet-squeezed bytes.
+ *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
+ *              - uint8_t p: domain-separation byte for different
+ *                                 Keccak-derived functions
+ **************************************************/
+static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
+    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
+       so we can always use one more byte for p in the current state. */
+    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
+    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
+    s_inc[25] = 0;
+}
+
+/*************************************************
+ * Name:        keccak_inc_squeeze
+ *
+ * Description: Incremental Keccak squeeze; can be called on byte-level
+ *
+ * Arguments:   - uint8_t *h: pointer to output bytes
+ *              - size_t outlen: number of bytes to be squeezed
+ *              - uint64_t *s_inc: pointer to input/output incremental state
+ *                First 25 values represent Keccak state.
+ *                26th value represents either the number of absorbed bytes
+ *                that have not been permuted, or not-yet-squeezed bytes.
+ *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
+ **************************************************/
+static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
+                               uint64_t *s_inc, uint32_t r) {
+    size_t i;
+
+    /* First consume any bytes we still have sitting around */
+    for (i = 0; i < outlen && i < s_inc[25]; i++) {
+        /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
+           available byte. We consume from there, i.e., up to r. */
+        h[i] = (uint8_t)(s_inc[(r - s_inc[25] + i) >> 3] >> (8 * ((r - s_inc[25] + i) & 0x07)));
+    }
+    h += i;
+    outlen -= i;
+    s_inc[25] -= i;
+
+    /* Then squeeze the remaining necessary blocks */
+    while (outlen > 0) {
+        KeccakF1600_StatePermute(s_inc);
+
+        for (i = 0; i < outlen && i < r; i++) {
+            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
+        }
+        h += i;
+        outlen -= i;
+        s_inc[25] = r - i;
+    }
+}
+
+size_t memory_usage;
+
+void shake128_inc_init(shake128incctx *state) {
+    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (state->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    keccak_inc_init(state->ctx);
+}
+
+void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
+    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
+}
+
+void shake128_inc_finalize(shake128incctx *state) {
+    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
+}
+
+void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
+    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
+}
+
+void shake128_inc_ctx_clone(shake128incctx *dest, const shake128incctx *src) {
+    dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (dest->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
+}
+
+void shake128_inc_ctx_release(shake128incctx *state) {
+    free(state->ctx);
+}
+
+void shake256_inc_init(shake256incctx *state) {
+    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (state->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    keccak_inc_init(state->ctx);
+}
+
+void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
+    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
+}
+
+void shake256_inc_finalize(shake256incctx *state) {
+    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
+}
+
+void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
+    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
+}
+
+void shake256_inc_ctx_clone(shake256incctx *dest, const shake256incctx *src) {
+    dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (dest->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
+}
+
+void shake256_inc_ctx_release(shake256incctx *state) {
+    free(state->ctx);
+}
+
+/*************************************************
+ * Name:        shake128_absorb
+ *
+ * Description: Absorb step of the SHAKE128 XOF.
+ *              non-incremental, starts by zeroeing the state.
+ *
+ * Arguments:   - uint64_t *s: pointer to (uninitialized) output Keccak state
+ *              - const uint8_t *input: pointer to input to be absorbed
+ *                                            into s
+ *              - size_t inlen: length of input in bytes
+ **************************************************/
+void shake128_absorb(shake128ctx *state, const uint8_t *input, size_t inlen) {
+    state->ctx = malloc(PQC_SHAKECTX_BYTES);
+    if (state->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKECTX_BYTES;
+    keccak_absorb(state->ctx, SHAKE128_RATE, input, inlen, 0x1F);
+}
+
+/*************************************************
+ * Name:        shake128_squeezeblocks
+ *
+ * Description: Squeeze step of SHAKE128 XOF. Squeezes full blocks of
+ *              SHAKE128_RATE bytes each. Modifies the state. Can be called
+ *              multiple times to keep squeezing, i.e., is incremental.
+ *
+ * Arguments:   - uint8_t *output: pointer to output blocks
+ *              - size_t nblocks: number of blocks to be squeezed
+ *                                            (written to output)
+ *              - shake128ctx *state: pointer to input/output Keccak state
+ **************************************************/
+void shake128_squeezeblocks(uint8_t *output, size_t nblocks, shake128ctx *state) {
+    keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE128_RATE);
+}
+
+void shake128_ctx_clone(shake128ctx *dest, const shake128ctx *src) {
+    dest->ctx = malloc(PQC_SHAKECTX_BYTES);
+    if (dest->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKECTX_BYTES;
+    memcpy(dest->ctx, src->ctx, PQC_SHAKECTX_BYTES);
+}
+
+/** Release the allocated state. Call only once. */
+void shake128_ctx_release(shake128ctx *state) {
+    free(state->ctx);
+}
+
+/*************************************************
+ * Name:        shake256_absorb
+ *
+ * Description: Absorb step of the SHAKE256 XOF.
+ *              non-incremental, starts by zeroeing the state.
+ *
+ * Arguments:   - shake256ctx *state: pointer to (uninitialized) output Keccak state
+ *              - const uint8_t *input: pointer to input to be absorbed
+ *                                            into s
+ *              - size_t inlen: length of input in bytes
+ **************************************************/
+void shake256_absorb(shake256ctx *state, const uint8_t *input, size_t inlen) {
+    state->ctx = malloc(PQC_SHAKECTX_BYTES);
+    if (state->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKECTX_BYTES;
+    keccak_absorb(state->ctx, SHAKE256_RATE, input, inlen, 0x1F);
+}
+
+/*************************************************
+ * Name:        shake256_squeezeblocks
+ *
+ * Description: Squeeze step of SHAKE256 XOF. Squeezes full blocks of
+ *              SHAKE256_RATE bytes each. Modifies the state. Can be called
+ *              multiple times to keep squeezing, i.e., is incremental.
+ *
+ * Arguments:   - uint8_t *output: pointer to output blocks
+ *              - size_t nblocks: number of blocks to be squeezed
+ *                                (written to output)
+ *              - shake256ctx *state: pointer to input/output Keccak state
+ **************************************************/
+void shake256_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state) {
+    keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE256_RATE);
+}
+
+void shake256_ctx_clone(shake256ctx *dest, const shake256ctx *src) {
+    dest->ctx = malloc(PQC_SHAKECTX_BYTES);
+    if (dest->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKECTX_BYTES;
+    memcpy(dest->ctx, src->ctx, PQC_SHAKECTX_BYTES);
+}
+
+/** Release the allocated state. Call only once. */
+void shake256_ctx_release(shake256ctx *state) {
+    free(state->ctx);
+}
+
+/*************************************************
+ * Name:        shake128
+ *
+ * Description: SHAKE128 XOF with non-incremental API
+ *
+ * Arguments:   - uint8_t *output: pointer to output
+ *              - size_t outlen: requested output length in bytes
+ *              - const uint8_t *input: pointer to input
+ *              - size_t inlen: length of input in bytes
+ **************************************************/
+void shake128(uint8_t *output, size_t outlen,
+              const uint8_t *input, size_t inlen) {
+    size_t nblocks = outlen / SHAKE128_RATE;
+    uint8_t t[SHAKE128_RATE];
+    shake128ctx s;
+
+    shake128_absorb(&s, input, inlen);
+    shake128_squeezeblocks(output, nblocks, &s);
+
+    output += nblocks * SHAKE128_RATE;
+    outlen -= nblocks * SHAKE128_RATE;
+
+    if (outlen) {
+        shake128_squeezeblocks(t, 1, &s);
+        for (size_t i = 0; i < outlen; ++i) {
+            output[i] = t[i];
+        }
+    }
+    shake128_ctx_release(&s);
+}
+
+/*************************************************
+ * Name:        shake256
+ *
+ * Description: SHAKE256 XOF with non-incremental API
+ *
+ * Arguments:   - uint8_t *output: pointer to output
+ *              - size_t outlen: requested output length in bytes
+ *              - const uint8_t *input: pointer to input
+ *              - size_t inlen: length of input in bytes
+ **************************************************/
+void shake256(uint8_t *output, size_t outlen,
+              const uint8_t *input, size_t inlen) {
+    size_t nblocks = outlen / SHAKE256_RATE;
+    uint8_t t[SHAKE256_RATE];
+    shake256ctx s;
+
+    shake256_absorb(&s, input, inlen);
+    shake256_squeezeblocks(output, nblocks, &s);
+
+    output += nblocks * SHAKE256_RATE;
+    outlen -= nblocks * SHAKE256_RATE;
+
+    if (outlen) {
+        shake256_squeezeblocks(t, 1, &s);
+        for (size_t i = 0; i < outlen; ++i) {
+            output[i] = t[i];
+        }
+    }
+    shake256_ctx_release(&s);
+}
+
+void sha3_256_inc_init(sha3_256incctx *state) {
+    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (state->ctx == NULL) {
+        exit(111);
+    }
+    keccak_inc_init(state->ctx);
+}
+
+void sha3_256_inc_ctx_clone(sha3_256incctx *dest, const sha3_256incctx *src) {
+    dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (dest->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
+}
+
+void sha3_256_inc_ctx_release(sha3_256incctx *state) {
+    free(state->ctx);
+}
+
+void sha3_256_inc_absorb(sha3_256incctx *state, const uint8_t *input, size_t inlen) {
+    keccak_inc_absorb(state->ctx, SHA3_256_RATE, input, inlen);
+}
+
+void sha3_256_inc_finalize(uint8_t *output, sha3_256incctx *state) {
+    uint8_t t[SHA3_256_RATE];
+    keccak_inc_finalize(state->ctx, SHA3_256_RATE, 0x06);
+
+    keccak_squeezeblocks(t, 1, state->ctx, SHA3_256_RATE);
+
+    sha3_256_inc_ctx_release(state);
+
+    for (size_t i = 0; i < 32; i++) {
+        output[i] = t[i];
+    }
+}
+
+/*************************************************
+ * Name:        sha3_256
+ *
+ * Description: SHA3-256 with non-incremental API
+ *
+ * Arguments:   - uint8_t *output:      pointer to output
+ *              - const uint8_t *input: pointer to input
+ *              - size_t inlen:   length of input in bytes
+ **************************************************/
+void sha3_256(uint8_t *output, const uint8_t *input, size_t inlen) {
+    uint64_t s[25];
+    uint8_t t[SHA3_256_RATE];
+
+    /* Absorb input */
+    keccak_absorb(s, SHA3_256_RATE, input, inlen, 0x06);
+
+    /* Squeeze output */
+    keccak_squeezeblocks(t, 1, s, SHA3_256_RATE);
+
+    for (size_t i = 0; i < 32; i++) {
+        output[i] = t[i];
+    }
+}
+
+void sha3_384_inc_init(sha3_384incctx *state) {
+    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (state->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    keccak_inc_init(state->ctx);
+}
+
+void sha3_384_inc_ctx_clone(sha3_384incctx *dest, const sha3_384incctx *src) {
+    dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (dest->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
+}
+
+void sha3_384_inc_absorb(sha3_384incctx *state, const uint8_t *input, size_t inlen) {
+    keccak_inc_absorb(state->ctx, SHA3_384_RATE, input, inlen);
+}
+
+void sha3_384_inc_ctx_release(sha3_384incctx *state) {
+    free(state->ctx);
+}
+
+void sha3_384_inc_finalize(uint8_t *output, sha3_384incctx *state) {
+    uint8_t t[SHA3_384_RATE];
+    keccak_inc_finalize(state->ctx, SHA3_384_RATE, 0x06);
+
+    keccak_squeezeblocks(t, 1, state->ctx, SHA3_384_RATE);
+
+    sha3_384_inc_ctx_release(state);
+
+    for (size_t i = 0; i < 48; i++) {
+        output[i] = t[i];
+    }
+}
+
+/*************************************************
+ * Name:        sha3_384
+ *
+ * Description: SHA3-256 with non-incremental API
+ *
+ * Arguments:   - uint8_t *output:      pointer to output
+ *              - const uint8_t *input: pointer to input
+ *              - size_t inlen:   length of input in bytes
+ **************************************************/
+void sha3_384(uint8_t *output, const uint8_t *input, size_t inlen) {
+    uint64_t s[25];
+    uint8_t t[SHA3_384_RATE];
+
+    /* Absorb input */
+    keccak_absorb(s, SHA3_384_RATE, input, inlen, 0x06);
+
+    /* Squeeze output */
+    keccak_squeezeblocks(t, 1, s, SHA3_384_RATE);
+
+    for (size_t i = 0; i < 48; i++) {
+        output[i] = t[i];
+    }
+}
+
+void sha3_512_inc_init(sha3_512incctx *state) {
+    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (state->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    keccak_inc_init(state->ctx);
+}
+
+void sha3_512_inc_ctx_clone(sha3_512incctx *dest, const sha3_512incctx *src) {
+    dest->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
+    if (dest->ctx == NULL) {
+        exit(111);
+    }
+    memory_usage += PQC_SHAKEINCCTX_BYTES;
+    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
+}
+
+void sha3_512_inc_absorb(sha3_512incctx *state, const uint8_t *input, size_t inlen) {
+    keccak_inc_absorb(state->ctx, SHA3_512_RATE, input, inlen);
+}
+
+void sha3_512_inc_ctx_release(sha3_512incctx *state) {
+    free(state->ctx);
+}
+
+void sha3_512_inc_finalize(uint8_t *output, sha3_512incctx *state) {
+    uint8_t t[SHA3_512_RATE];
+    keccak_inc_finalize(state->ctx, SHA3_512_RATE, 0x06);
+
+    keccak_squeezeblocks(t, 1, state->ctx, SHA3_512_RATE);
+
+    sha3_512_inc_ctx_release(state);
+
+    for (size_t i = 0; i < 64; i++) {
+        output[i] = t[i];
+    }
+}
+
+/*************************************************
+ * Name:        sha3_512
+ *
+ * Description: SHA3-512 with non-incremental API
+ *
+ * Arguments:   - uint8_t *output:      pointer to output
+ *              - const uint8_t *input: pointer to input
+ *              - size_t inlen:   length of input in bytes
+ **************************************************/
+void sha3_512(uint8_t *output, const uint8_t *input, size_t inlen) {
+    uint64_t s[25];
+    uint8_t t[SHA3_512_RATE];
+
+    /* Absorb input */
+    keccak_absorb(s, SHA3_512_RATE, input, inlen, 0x06);
+
+    /* Squeeze output */
+    keccak_squeezeblocks(t, 1, s, SHA3_512_RATE);
+
+    for (size_t i = 0; i < 64; i++) {
+        output[i] = t[i];
+    }
+}
diff --git a/library/fips202.h b/library/fips202.h
new file mode 100644
index 000000000000..0dd0ff2e030a
--- /dev/null
+++ b/library/fips202.h
@@ -0,0 +1,166 @@
+#ifndef FIPS202_H
+#define FIPS202_H
+
+#include <stddef.h>
+#include <stdint.h>
+
+#define SHAKE128_RATE 168
+#define SHAKE256_RATE 136
+#define SHA3_256_RATE 136
+#define SHA3_384_RATE 104
+#define SHA3_512_RATE 72
+
+#define PQC_SHAKEINCCTX_BYTES (sizeof(uint64_t)*26)
+#define PQC_SHAKECTX_BYTES (sizeof(uint64_t)*25)
+
+// Context for incremental API
+typedef struct {
+    uint64_t *ctx;
+} shake128incctx;
+
+// Context for non-incremental API
+typedef struct {
+    uint64_t *ctx;
+} shake128ctx;
+
+// Context for incremental API
+typedef struct {
+    uint64_t *ctx;
+} shake256incctx;
+
+// Context for non-incremental API
+typedef struct {
+    uint64_t *ctx;
+} shake256ctx;
+
+// Context for incremental API
+typedef struct {
+    uint64_t *ctx;
+} sha3_256incctx;
+
+// Context for incremental API
+typedef struct {
+    uint64_t *ctx;
+} sha3_384incctx;
+
+// Context for incremental API
+typedef struct {
+    uint64_t *ctx;
+} sha3_512incctx;
+
+/* Initialize the state and absorb the provided input.
+ *
+ * This function does not support being called multiple times
+ * with the same state.
+ */
+void shake128_absorb(shake128ctx *state, const uint8_t *input, size_t inlen);
+/* Squeeze output out of the sponge.
+ *
+ * Supports being called multiple times
+ */
+void shake128_squeezeblocks(uint8_t *output, size_t nblocks, shake128ctx *state);
+/* Free the state */
+void shake128_ctx_release(shake128ctx *state);
+/* Copy the state. */
+void shake128_ctx_clone(shake128ctx *dest, const shake128ctx *src);
+
+/* Initialize incremental hashing API */
+void shake128_inc_init(shake128incctx *state);
+/* Absorb more information into the XOF.
+ *
+ * Can be called multiple times.
+ */
+void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen);
+/* Finalize the XOF for squeezing */
+void shake128_inc_finalize(shake128incctx *state);
+/* Squeeze output out of the sponge.
+ *
+ * Supports being called multiple times
+ */
+void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state);
+/* Copy the context of the SHAKE128 XOF */
+void shake128_inc_ctx_clone(shake128incctx *dest, const shake128incctx *src);
+/* Free the context of the SHAKE128 XOF */
+void shake128_inc_ctx_release(shake128incctx *state);
+
+/* Initialize the state and absorb the provided input.
+ *
+ * This function does not support being called multiple times
+ * with the same state.
+ */
+void shake256_absorb(shake256ctx *state, const uint8_t *input, size_t inlen);
+/* Squeeze output out of the sponge.
+ *
+ * Supports being called multiple times
+ */
+void shake256_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state);
+/* Free the context held by this XOF */
+void shake256_ctx_release(shake256ctx *state);
+/* Copy the context held by this XOF */
+void shake256_ctx_clone(shake256ctx *dest, const shake256ctx *src);
+
+/* Initialize incremental hashing API */
+void shake256_inc_init(shake256incctx *state);
+void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen);
+/* Prepares for squeeze phase */
+void shake256_inc_finalize(shake256incctx *state);
+/* Squeeze output out of the sponge.
+ *
+ * Supports being called multiple times
+ */
+void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state);
+/* Copy the state */
+void shake256_inc_ctx_clone(shake256incctx *dest, const shake256incctx *src);
+/* Free the state */
+void shake256_inc_ctx_release(shake256incctx *state);
+
+/* One-stop SHAKE128 call */
+void shake128(uint8_t *output, size_t outlen,
+              const uint8_t *input, size_t inlen);
+
+/* One-stop SHAKE256 call */
+void shake256(uint8_t *output, size_t outlen,
+              const uint8_t *input, size_t inlen);
+
+/* Initialize the incremental hashing state */
+void sha3_256_inc_init(sha3_256incctx *state);
+/* Absorb blocks into SHA3 */
+void sha3_256_inc_absorb(sha3_256incctx *state, const uint8_t *input, size_t inlen);
+/* Obtain the output of the function and free `state` */
+void sha3_256_inc_finalize(uint8_t *output, sha3_256incctx *state);
+/* Copy the context */
+void sha3_256_inc_ctx_clone(sha3_256incctx *dest, const sha3_256incctx *src);
+/* Release the state, don't use if `_finalize` has been used */
+void sha3_256_inc_ctx_release(sha3_256incctx *state);
+
+void sha3_256(uint8_t *output, const uint8_t *input, size_t inlen);
+
+/* Initialize the incremental hashing state */
+void sha3_384_inc_init(sha3_384incctx *state);
+/* Absorb blocks into SHA3 */
+void sha3_384_inc_absorb(sha3_384incctx *state, const uint8_t *input, size_t inlen);
+/* Obtain the output of the function and free `state` */
+void sha3_384_inc_finalize(uint8_t *output, sha3_384incctx *state);
+/* Copy the context */
+void sha3_384_inc_ctx_clone(sha3_384incctx *dest, const sha3_384incctx *src);
+/* Release the state, don't use if `_finalize` has been used */
+void sha3_384_inc_ctx_release(sha3_384incctx *state);
+
+/* One-stop SHA3-384 shop */
+void sha3_384(uint8_t *output, const uint8_t *input, size_t inlen);
+
+/* Initialize the incremental hashing state */
+void sha3_512_inc_init(sha3_512incctx *state);
+/* Absorb blocks into SHA3 */
+void sha3_512_inc_absorb(sha3_512incctx *state, const uint8_t *input, size_t inlen);
+/* Obtain the output of the function and free `state` */
+void sha3_512_inc_finalize(uint8_t *output, sha3_512incctx *state);
+/* Copy the context */
+void sha3_512_inc_ctx_clone(sha3_512incctx *dest, const sha3_512incctx *src);
+/* Release the state, don't use if `_finalize` has been used */
+void sha3_512_inc_ctx_release(sha3_512incctx *state);
+
+/* One-stop SHA3-512 shop */
+void sha3_512(uint8_t *output, const uint8_t *input, size_t inlen);
+
+#endif
diff --git a/library/fips203ipd.c b/library/fips203ipd.c
new file mode 100644
index 000000000000..9a9ae99cbba9
--- /dev/null
+++ b/library/fips203ipd.c
@@ -0,0 +1,25767 @@
+//
+// Copyright (c) 2023-2024 Paul Duncan
+// SPDX-License-Identifier: MIT-0
+//
+// C11 implementation of the KEM512, KEM768, and KEM1024 parameter sets
+// from the FIPS 203 initial public draft (IPD).
+//
+// This file is organized as follows:
+//
+// 1. Internal SHA3 and SHAKE structures (copied from `sha3.h`).
+// 2. Internal Keccak permutation functions (copied from `sha3.c`
+//    with minor changes, see notes below for details).
+// 3. Internal hash and XOF functions (copied from `sha3.c` with minor
+//    changes).
+// 4. SHA3-256, SHA3-512, SHAKE128, and SHAKE256 definitions (copied
+//    from `sha3.c` with minor changes).
+// 5. PKE512, PKE768, and PKE1024 parameter definitions.
+// 6. Internal NTT and polynomial multiplication lookup tables.
+// 7. Internal utility functions.  In particular, the constant-time
+//    Barrett reduction function `ct_mod_q()` is here.
+// 8. Internal polynomial functions.  Many of these functions have
+//    scalar and AVX-512 implementations.
+// 9. Matrix functions.
+// 10. Internal PKE512 keygen, encrypt, and decrypt functions.
+// 11. Public KEM512 keygen, encapsulation, and decapsulation functions.
+// 12. Internal PKE768 keygen, encrypt, and decrypt functions.
+// 13. Public KEM768 keygen, encapsulation, and decapsulation functions.
+// 14. Internal PKE1024 keygen, encrypt, and decrypt functions.
+// 15. Public KEM1024 keygen, encapsulation, and decapsulation functions.
+// 16. Internal testing utility functions and tests.  This section is
+//     only compiled if `TEST_FIPS203IPD` is defined).
+//
+// The source for `sha3.h` and `sha3.c` is my FIPS 202, SP 800-185,
+// TurboSHAKE and KangarooTwelve implementation, which is available at
+// the following URL:
+//
+//   https://github.com/pablotron/sha3
+
+/** @cond INTERNAL */
+
+#include <stdbool.h> // bool
+#include <stddef.h> // size_t
+#include <stdint.h> // uint8_t
+#include <string.h> // memcpy()
+#include "fips203ipd.h" // fips203ipd_*()
+
+// available backends
+#define BACKEND_AUTO 0        // auto-detect (default)
+#define BACKEND_SCALAR 1      // scalar backend
+#define BACKEND_AVX512 2      // AVX-512 backend
+#define BACKEND_NEON 3        // Neon backend
+
+// if BACKEND is defined and set to 0 (the default), then
+// unset it and auto-detect the appropriate backend
+#if defined(BACKEND) && BACKEND == BACKEND_AUTO
+#undef BACKEND
+#endif /* defined(BACKEND) && BACKEND == 0 */
+
+// detect backend
+#ifndef BACKEND
+#if defined(__AVX512F__)
+#define BACKEND BACKEND_AVX512
+#elif defined(__ARM_ARCH_ISA_A64) && defined(__ARM_NEON)
+#define BACKEND BACKEND_NEON
+#else
+// no optimized backend detected, fall back to scalar
+#define BACKEND BACKEND_SCALAR
+#endif
+#endif /* !BACKEND */
+
+// begin sha3.h
+// note: typedefs copied from sha3.h
+
+/**
+ * @brief Internal [SHA-3][] state (all members are private).
+ * @ingroup sha3
+ *
+ * [SHA-3]: https://en.wikipedia.org/wiki/SHA-3
+ *   "Secure Hash Algorithm 3"
+ */
+typedef union {
+  uint8_t u8[200]; /**< 8-bit unsigned integers. */
+  uint64_t u64[25]; /**< 64-bit unsigned integers. */
+} sha3_state_t;
+
+/**
+ * @brief Iterative [XOF][] context (all members are private).
+ * @ingroup shake
+ *
+ * [xof]: https://en.wikipedia.org/wiki/Extendable-output_function
+ *   "Extendable-Output Function (XOF)"
+ */
+typedef struct {
+  size_t num_bytes; /**< number of bytes absorbed */
+  sha3_state_t a; /**< internal state */
+  _Bool squeezing; /**< mode (absorbing or squeezing) */
+} sha3_xof_t;
+
+// end sha3.h
+
+// begin sha3.c
+// note: copied from `sha3.c` with the following changes:
+//
+// 1. sha3-224 and sha3-384 removed (unused by fips203).
+// 2. iterative hash functions removed (unused by fips203).
+// 3. one-shot shake128 removed (unused by fips203).
+// 4. iterative shake256 functions removed (unused by fips203).
+// 5. visibility for hash and xof functions set to `static inline`.
+// 6. removed "defined(SHA3_TEST)" (unused by fips203).
+// 7. add ALIGN() macro (backport to sha3.c).
+// 8. moved RCS to static global (backport to sha3.c).
+// 9. only build xof_absorb(), xof_squeeze(), and shake128 context
+//    functions if __AVX512F__ is not defined or TEST_FIPS203IPD is
+//    defined.
+// 10. lots of changes to avx512 permute() based on output
+//     of `bench` and `perf`.
+// 11. num_rounds removed from permute() and calls to it.
+// 12. rename avx512 permute() to permute_avx512() and scalar permute()
+//     to permute_scalar().
+
+// 64-bit rotate left
+#define ROL(v, n) (((v) << (n)) | ((v) >> (64-(n))))
+
+// minimum of two values
+#define MIN(a, b) (((a) < (b)) ? (a) : (b))
+
+// number of rounds for permute()
+#define SHA3_NUM_ROUNDS 24
+
+// align memory to N bytes
+#define ALIGN(N) __attribute__((aligned(N)))
+
+// iota step round constants
+static const uint64_t RCS[] ALIGN(64) = {
+  0x0000000000000001ULL, 0x0000000000008082ULL, 0x800000000000808aULL, 0x8000000080008000ULL,
+  0x000000000000808bULL, 0x0000000080000001ULL, 0x8000000080008081ULL, 0x8000000000008009ULL,
+  0x000000000000008aULL, 0x0000000000000088ULL, 0x0000000080008009ULL, 0x000000008000000aULL,
+  0x000000008000808bULL, 0x800000000000008bULL, 0x8000000000008089ULL, 0x8000000000008003ULL,
+  0x8000000000008002ULL, 0x8000000000000080ULL, 0x000000000000800aULL, 0x800000008000000aULL,
+  0x8000000080008081ULL, 0x8000000000008080ULL, 0x0000000080000001ULL, 0x8000000080008008ULL,
+};
+
+#if BACKEND == BACKEND_SCALAR || BACKEND == BACKEND_NEON
+// Note: Only compile the scalar Keccak step functions if the scalar or
+// neon backends are active.
+
+// theta step of keccak permutation (scalar implementation)
+static inline void theta(uint64_t a[static 25]) {
+  const uint64_t c[5] = {
+    a[0] ^ a[5] ^ a[10] ^ a[15] ^ a[20],
+    a[1] ^ a[6] ^ a[11] ^ a[16] ^ a[21],
+    a[2] ^ a[7] ^ a[12] ^ a[17] ^ a[22],
+    a[3] ^ a[8] ^ a[13] ^ a[18] ^ a[23],
+    a[4] ^ a[9] ^ a[14] ^ a[19] ^ a[24],
+  };
+
+  const uint64_t d[5] = {
+    c[4] ^ ROL(c[1], 1),
+    c[0] ^ ROL(c[2], 1),
+    c[1] ^ ROL(c[3], 1),
+    c[2] ^ ROL(c[4], 1),
+    c[3] ^ ROL(c[0], 1),
+  };
+
+  a[ 0] ^= d[0]; a[ 1] ^= d[1]; a[ 2] ^= d[2]; a[ 3] ^= d[3]; a[ 4] ^= d[4];
+  a[ 5] ^= d[0]; a[ 6] ^= d[1]; a[ 7] ^= d[2]; a[ 8] ^= d[3]; a[ 9] ^= d[4];
+  a[10] ^= d[0]; a[11] ^= d[1]; a[12] ^= d[2]; a[13] ^= d[3]; a[14] ^= d[4];
+  a[15] ^= d[0]; a[16] ^= d[1]; a[17] ^= d[2]; a[18] ^= d[3]; a[19] ^= d[4];
+  a[20] ^= d[0]; a[21] ^= d[1]; a[22] ^= d[2]; a[23] ^= d[3]; a[24] ^= d[4];
+}
+
+// rho step of keccak permutation (scalar implementation)
+static inline void rho(uint64_t a[static 25]) {
+  a[1] = ROL(a[1], 1); // 1 % 64 = 1
+  a[2] = ROL(a[2], 62); // 190 % 64 = 62
+  a[3] = ROL(a[3], 28); // 28 % 64 = 28
+  a[4] = ROL(a[4], 27); // 91 % 64 = 27
+  a[5] = ROL(a[5], 36); // 36 % 64 = 36
+  a[6] = ROL(a[6], 44); // 300 % 64 = 44
+  a[7] = ROL(a[7], 6); // 6 % 64 = 6
+  a[8] = ROL(a[8], 55); // 55 % 64 = 55
+  a[9] = ROL(a[9], 20); // 276 % 64 = 20
+  a[10] = ROL(a[10], 3); // 3 % 64 = 3
+  a[11] = ROL(a[11], 10); // 10 % 64 = 10
+  a[12] = ROL(a[12], 43); // 171 % 64 = 43
+  a[13] = ROL(a[13], 25); // 153 % 64 = 25
+  a[14] = ROL(a[14], 39); // 231 % 64 = 39
+  a[15] = ROL(a[15], 41); // 105 % 64 = 41
+  a[16] = ROL(a[16], 45); // 45 % 64 = 45
+  a[17] = ROL(a[17], 15); // 15 % 64 = 15
+  a[18] = ROL(a[18], 21); // 21 % 64 = 21
+  a[19] = ROL(a[19], 8); // 136 % 64 = 8
+  a[20] = ROL(a[20], 18); // 210 % 64 = 18
+  a[21] = ROL(a[21], 2); // 66 % 64 = 2
+  a[22] = ROL(a[22], 61); // 253 % 64 = 61
+  a[23] = ROL(a[23], 56); // 120 % 64 = 56
+  a[24] = ROL(a[24], 14); // 78 % 64 = 14
+}
+
+// pi step of keccak permutation (scalar implementation)
+static inline void pi(uint64_t dst[static 25], const uint64_t src[static 25]) {
+  dst[0] = src[0];
+  dst[1] = src[6];
+  dst[2] = src[12];
+  dst[3] = src[18];
+  dst[4] = src[24];
+  dst[5] = src[3];
+  dst[6] = src[9];
+  dst[7] = src[10];
+  dst[8] = src[16];
+  dst[9] = src[22];
+  dst[10] = src[1];
+  dst[11] = src[7];
+  dst[12] = src[13];
+  dst[13] = src[19];
+  dst[14] = src[20];
+  dst[15] = src[4];
+  dst[16] = src[5];
+  dst[17] = src[11];
+  dst[18] = src[17];
+  dst[19] = src[23];
+  dst[20] = src[2];
+  dst[21] = src[8];
+  dst[22] = src[14];
+  dst[23] = src[15];
+  dst[24] = src[21];
+}
+
+// chi step of keccak permutation (scalar implementation)
+static inline void chi(uint64_t dst[static 25], const uint64_t src[static 25]) {
+  dst[0] = src[0] ^ (~src[1] & src[2]);
+  dst[1] = src[1] ^ (~src[2] & src[3]);
+  dst[2] = src[2] ^ (~src[3] & src[4]);
+  dst[3] = src[3] ^ (~src[4] & src[0]);
+  dst[4] = src[4] ^ (~src[0] & src[1]);
+  dst[5] = src[5] ^ (~src[6] & src[7]);
+  dst[6] = src[6] ^ (~src[7] & src[8]);
+  dst[7] = src[7] ^ (~src[8] & src[9]);
+  dst[8] = src[8] ^ (~src[9] & src[5]);
+  dst[9] = src[9] ^ (~src[5] & src[6]);
+  dst[10] = src[10] ^ (~src[11] & src[12]);
+  dst[11] = src[11] ^ (~src[12] & src[13]);
+  dst[12] = src[12] ^ (~src[13] & src[14]);
+  dst[13] = src[13] ^ (~src[14] & src[10]);
+  dst[14] = src[14] ^ (~src[10] & src[11]);
+  dst[15] = src[15] ^ (~src[16] & src[17]);
+  dst[16] = src[16] ^ (~src[17] & src[18]);
+  dst[17] = src[17] ^ (~src[18] & src[19]);
+  dst[18] = src[18] ^ (~src[19] & src[15]);
+  dst[19] = src[19] ^ (~src[15] & src[16]);
+  dst[20] = src[20] ^ (~src[21] & src[22]);
+  dst[21] = src[21] ^ (~src[22] & src[23]);
+  dst[22] = src[22] ^ (~src[23] & src[24]);
+  dst[23] = src[23] ^ (~src[24] & src[20]);
+  dst[24] = src[24] ^ (~src[20] & src[21]);
+}
+
+// iota step of keccak permutation (scalar implementation)
+static inline void iota(uint64_t a[static 25], const int i) {
+  a[0] ^= RCS[i];
+}
+
+// keccak permutation (scalar implementation)
+static inline void permute_scalar(uint64_t a[static 25]) {
+  uint64_t tmp[25] = { 0 };
+
+  for (int i = 0; i < SHA3_NUM_ROUNDS; i++) {
+    theta(a);
+    rho(a);
+    pi(tmp, a);
+    chi(a, tmp);
+    iota(a, i);
+  }
+}
+#endif /* BACKEND == BACKEND_SCALAR || BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_AVX512
+#include <immintrin.h>
+
+// keccak permutation (avx512 implementation).
+//
+// copied from `permute_avx512_fast()` in `tests/permute/permute.c`. all
+// steps are inlined as blocks. ~3x faster than scalar implementation,
+// but could be sped up more.
+//
+// how it operates (roughly):
+//
+// 1. load rows from state `s` into the first 5 64-bit lanes of AVX-512
+// registers r0-r4, like so:
+//
+//   -----------------------------------------------------------------
+//   |     |                         Lanes                           |
+//   |-----|---------------------------------------------------------|
+//   | Reg |   0   |   1   |   2   |   3   |   4   |  5  |  6  |  7  |
+//   |-----|-------|-------|-------|-------|-------|-----|-----|-----|
+//   | r0  | s[ 0] | s[ 1] | s[ 2] | s[ 3] | s[ 4] | n/a | n/a | n/a |
+//   | r0  | s[ 0] | s[ 1] | s[ 2] | s[ 3] | s[ 4] | n/a | n/a | n/a |
+//   | r1  | s[ 5] | s[ 6] | s[ 7] | s[ 8] | s[ 9] | n/a | n/a | n/a |
+//   | r2  | s[10] | s[11] | s[12] | s[13] | s[14] | n/a | n/a | n/a |
+//   | r3  | s[15] | s[16] | s[17] | s[18] | s[19] | n/a | n/a | n/a |
+//   | r4  | s[20] | s[21] | s[22] | s[23] | s[24] | n/a | n/a | n/a |
+//   -----------------------------------------------------------------
+//
+// 2. For each round of 24 rounds:
+//   a. Perform theta, rho, pi, and chi steps.  pi, in particular, has
+//      a large number of permutation registers (so it may spill).
+//   b. Load round constant for current round and perform iota step.
+//
+// 3. store the rows first 5 64-bit lanes of registers r0-r4 back to the
+// state `s`.
+//
+static inline void permute_avx512(uint64_t s[static 25]) {
+  // load rows (r0-r4)
+  __m512i r0 = _mm512_maskz_loadu_epi64(0x1f, s +  0), // row 0
+          r1 = _mm512_maskz_loadu_epi64(0x1f, s +  5), // row 1
+          r2 = _mm512_maskz_loadu_epi64(0x1f, s + 10), // row 2
+          r3 = _mm512_maskz_loadu_epi64(0x1f, s + 15), // row 3
+          r4 = _mm512_maskz_loadu_epi64(0x1f, s + 20); // row 4
+
+  // 24 rounds
+  for (size_t i = 0; i < SHA3_NUM_ROUNDS; i++) {
+    // theta
+    {
+      // permute ids
+      static const __m512i I0 = { 4, 0, 1, 2, 3 },
+                           I1 = { 1, 2, 3, 4, 0 };
+
+      // c = xor(r0, r1, r2, r3, r4)
+      const __m512i r01 = _mm512_maskz_xor_epi64(0x1f, r0, r1),
+                    r23 = _mm512_maskz_xor_epi64(0x1f, r2, r3),
+                    c = _mm512_maskz_ternarylogic_epi64(0x1f, r01, r23, r4, 0x96);
+
+      // d = xor(permute(i0, c), permute(i1, rol(c, 1)))
+      const __m512i d0 = _mm512_permutexvar_epi64(I0, c),
+                    d1 = _mm512_permutexvar_epi64(I1, _mm512_rol_epi64(c, 1)),
+                    d = _mm512_xor_epi64(d0, d1);
+
+      // row = xor(row, d)
+      r0 = _mm512_xor_epi64(r0, d);
+      r1 = _mm512_xor_epi64(r1, d);
+      r2 = _mm512_xor_epi64(r2, d);
+      r3 = _mm512_xor_epi64(r3, d);
+      r4 = _mm512_xor_epi64(r4, d);
+    }
+
+    // rho
+    {
+      // rotate values
+      //
+      // note: switching from maskz_load_epi64()s to static const
+      // __m512i incurs a 500 cycle penalty; leaving them for now
+      static const uint64_t V0_VALS[5] ALIGN(64) = { 0, 1, 62, 28, 27 },
+                            V1_VALS[5] ALIGN(64) = { 36, 44, 6, 55, 20 },
+                            V2_VALS[5] ALIGN(64) = { 3, 10, 43, 25, 39 },
+                            V3_VALS[5] ALIGN(64) = { 41, 45, 15, 21, 8 },
+                            V4_VALS[5] ALIGN(64) = { 18, 2, 61, 56, 14 };
+
+      // rotate rows
+      r0 = _mm512_rolv_epi64(r0, _mm512_maskz_load_epi64(0x1f, V0_VALS));
+      r1 = _mm512_rolv_epi64(r1, _mm512_maskz_load_epi64(0x1f, V1_VALS));
+      r2 = _mm512_rolv_epi64(r2, _mm512_maskz_load_epi64(0x1f, V2_VALS));
+      r3 = _mm512_rolv_epi64(r3, _mm512_maskz_load_epi64(0x1f, V3_VALS));
+      r4 = _mm512_rolv_epi64(r4, _mm512_maskz_load_epi64(0x1f, V4_VALS));
+    }
+
+    // pi
+    //
+    // The cells are permuted across all rows of the state array.  each
+    // output row is the combination of three permutations:
+    //
+    // - e0: row 0 and row 1
+    // - e2: row 2 and row 3
+    // - e4: row 4 and row 0
+    //
+    // the IDs for each permutation are merged into a single array
+    // (T*_IDS) to reduce register pressure, and the permute operations
+    // are masked so that each permutation only uses the relevant IDs.
+    //
+    // afterwards, the permutations are combined to form a temporary
+    // row:
+    //
+    //   t0 = t0e0 | t0e2 | t0e4
+    //
+    // once the permutations for all rows are complete, the temporary
+    // rows are saved to the actual row registers:
+    //
+    //   r0 = t0
+    //
+    {
+      // permute ids
+      static const __m512i T0_IDS = { 0, 8 + 1, 2, 8 + 3, 4 },
+                           T1_IDS = { 3, 8 + 4, 0, 8 + 1, 2 },
+                           T2_IDS = { 1, 8 + 2, 3, 8 + 4, 0 },
+                           T3_IDS = { 4, 8 + 0, 1, 8 + 2, 3 },
+                           T4_IDS = { 2, 8 + 3, 4, 8 + 0, 1 };
+
+      __m512i t0, t1, t2, t3, t4;
+      {
+        // permute r0
+        const __m512i t0e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T0_IDS, r1),
+                      t0e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T0_IDS, r3),
+                      t0e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T0_IDS, r0);
+
+        // permute r1
+        const __m512i t1e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T1_IDS, r1),
+                      t1e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T1_IDS, r3),
+                      t1e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T1_IDS, r0);
+
+        // permute r2
+        const __m512i t2e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T2_IDS, r1),
+                      t2e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T2_IDS, r3),
+                      t2e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T2_IDS, r0);
+
+        // permute r3
+        const __m512i t3e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T3_IDS, r1),
+                      t3e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T3_IDS, r3),
+                      t3e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T3_IDS, r0);
+
+        // permute r4
+        const __m512i t4e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T4_IDS, r1),
+                      t4e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T4_IDS, r3),
+                      t4e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T4_IDS, r0);
+
+        // combine permutes: tN = e0 | e2 | e4
+        t0 = _mm512_maskz_ternarylogic_epi64(0x1f, t0e0, t0e2, t0e4, 0xfe);
+        t1 = _mm512_maskz_ternarylogic_epi64(0x1f, t1e0, t1e2, t1e4, 0xfe);
+        t2 = _mm512_maskz_ternarylogic_epi64(0x1f, t2e0, t2e2, t2e4, 0xfe);
+        t3 = _mm512_maskz_ternarylogic_epi64(0x1f, t3e0, t3e2, t3e4, 0xfe);
+        t4 = _mm512_maskz_ternarylogic_epi64(0x1f, t4e0, t4e2, t4e4, 0xfe);
+      }
+
+      // store rows
+      r0 = t0;
+      r1 = t1;
+      r2 = t2;
+      r3 = t3;
+      r4 = t4;
+    }
+
+    // chi
+    {
+      // permute ids
+      static const __m512i P0 = { 1, 2, 3, 4, 0 },
+                           P1 = { 2, 3, 4, 0, 1 };
+
+      {
+        // r0 ^= ~e0 & e1
+        const __m512i t0_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r0),
+                      t0_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r0);
+        r0 = _mm512_maskz_ternarylogic_epi64(0x1f, r0, t0_e0, t0_e1, 0xd2);
+      }
+
+      {
+        // r1 ^= ~e0 & e1
+        const __m512i t1_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r1),
+                      t1_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r1);
+        r1 = _mm512_maskz_ternarylogic_epi64(0x1f, r1, t1_e0, t1_e1, 0xd2);
+      }
+
+      {
+        // r2 ^= ~e0 & e1
+        const __m512i t2_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r2),
+                      t2_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r2);
+        r2 = _mm512_maskz_ternarylogic_epi64(0x1f, r2, t2_e0, t2_e1, 0xd2);
+      }
+
+      {
+        // r3 ^= ~e0 & e1
+        const __m512i t3_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r3),
+                      t3_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r3);
+        r3 = _mm512_maskz_ternarylogic_epi64(0x1f, r3, t3_e0, t3_e1, 0xd2);
+      }
+
+      {
+        // r4 ^= ~e0 & e1
+        const __m512i t4_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r4),
+                      t4_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r4);
+        r4 = _mm512_maskz_ternarylogic_epi64(0x1f, r4, t4_e0, t4_e1, 0xd2);
+      }
+    }
+
+    // iota
+    {
+      // xor round constant to first cell
+      r0 = _mm512_mask_xor_epi64(r0, 1, r0, _mm512_maskz_loadu_epi64(1, RCS + i));
+    }
+  }
+
+  // store rows
+  _mm512_mask_storeu_epi64(s + 5 * 0, 0x1f, r0);
+  _mm512_mask_storeu_epi64(s + 5 * 1, 0x1f, r1);
+  _mm512_mask_storeu_epi64(s + 5 * 2, 0x1f, r2);
+  _mm512_mask_storeu_epi64(s + 5 * 3, 0x1f, r3);
+  _mm512_mask_storeu_epi64(s + 5 * 4, 0x1f, r4);
+}
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_AVX512
+#define permute permute_avx512
+#elif BACKEND == BACKEND_SCALAR
+#define permute permute_scalar
+#elif BACKEND == BACKEND_NEON
+// use scalar permute() for neon
+#define permute permute_scalar
+#else
+#error "unknown backend"
+#endif /* BACKEND */
+
+// absorb message into state, return updated byte count
+// used by `hash_absorb()`, `hash_once()`, and `xof_absorb_raw()`
+static inline size_t absorb(sha3_state_t * const a, size_t num_bytes, const size_t rate, const uint8_t *m, size_t m_len) {
+  // absorb aligned chunks
+  if ((num_bytes & 7) == 0 && (((uintptr_t) m) & 7) == 0) {
+    // absorb 32 byte chunks (4 x uint64)
+    while (m_len >= 32 && num_bytes <= rate - 32) {
+      // xor chunk into state
+      // (FIXME: does not vectorize for some reason, even when unrolled)
+      for (size_t i = 0; i < 4; i++) {
+        a->u64[num_bytes/8 + i] ^= ((uint64_t*) m)[i];
+      }
+
+      // update counters
+      num_bytes += 32;
+      m += 32;
+      m_len -= 32;
+
+      if (num_bytes == rate) {
+        // permute state
+        permute(a->u64);
+        num_bytes = 0;
+      }
+    }
+
+    // absorb 8 byte chunks (1 x uint64)
+    while (m_len >= 8 && num_bytes <= rate - 8) {
+      // xor chunk into state
+      a->u64[num_bytes/8] ^= *((uint64_t*) m);
+
+      // update counters
+      num_bytes += 8;
+      m += 8;
+      m_len -= 8;
+
+      if (num_bytes == rate) {
+        // permute state
+        permute(a->u64);
+        num_bytes = 0;
+      }
+    }
+  }
+
+  // absorb remaining bytes
+  for (size_t i = 0; i < m_len; i++) {
+    // xor byte into state
+    a->u8[num_bytes++] ^= m[i];
+
+    if (num_bytes == rate) {
+      // permute state
+      permute(a->u64);
+      num_bytes = 0;
+    }
+  }
+
+  // return byte count
+  return num_bytes;
+}
+
+// Get rate (number of bytes that can be absorbed before the internal
+// state is permuted).
+//
+// For hash functions, the capacity is always 2 times the output length
+// of the hash, and the rate is the total state size (200 bytes) minus
+// the capacity (FIPS 202, Section 5.2).
+//
+// XOFs do not have fixed-length output, but the capacity is 2 times the
+// named strength, and the rate is the total state size (200 bytes)
+// minus the capacity.
+//
+// The table below shows the output size, capacity, and rate for each
+// FIPS 202 function.  All values are in bytes.
+//
+//   ---------------------------------------
+//   | Function | Output | Capacity | Rate |
+//   |----------|--------|----------|------|
+//   | SHA3-224 |     28 |       56 |  144 |
+//   | SHA3-256 |     32 |       64 |  136 |
+//   | SHA3-384 |     48 |       96 |  104 |
+//   | SHA3-512 |     64 |      128 |   72 |
+//   | SHAKE128 |    n/a |       32 |  168 |
+//   | SHAKE256 |    n/a |       64 |  136 |
+//   ---------------------------------------
+//
+#define RATE(len) (200 - 2 * (len))
+
+// one-shot sha3 hash.
+static inline void hash_once(const uint8_t *m, size_t m_len, uint8_t * const dst, const size_t dst_len) {
+  // init state
+  sha3_state_t a = { .u64 = { 0 } };
+
+  // absorb message, get new internal length
+  const size_t len = absorb(&a, 0, RATE(dst_len), m, m_len);
+
+  // append suffix and padding
+  // (note: suffix and padding are ambiguous in spec)
+  a.u8[len] ^= 0x06;
+  a.u8[RATE(dst_len)-1] ^= 0x80;
+
+  // final permutation
+  permute(a.u64);
+
+  // copy to destination
+  memcpy(dst, a.u8, dst_len);
+}
+
+// define hash one-shot hash functions
+#define DEF_HASH(BITS, OUT_LEN) \
+  /* one-shot hash */ \
+  static inline void sha3_ ## BITS(const uint8_t *m, size_t m_len, uint8_t dst[static OUT_LEN]) { \
+    hash_once(m, m_len, dst, OUT_LEN); \
+  }
+
+// declare hash functions
+DEF_HASH(256, 32) // sha3-256
+DEF_HASH(512, 64) // sha3-512
+
+// initialize xof context
+static inline void xof_init(sha3_xof_t * const xof) {
+  memset(xof, 0, sizeof(sha3_xof_t));
+}
+
+// Absorb data into XOF context without checking to see if the
+// context has already been squeezed.
+//
+// Called by `xof_absorb()` and `xof_once()`.
+static inline void xof_absorb_raw(sha3_xof_t * const xof, const size_t rate, const uint8_t *m, size_t m_len) {
+  xof->num_bytes = absorb(&(xof->a), xof->num_bytes, rate, m, m_len);
+}
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+// Absorb data into XOF context.
+//
+// Returns `false` if this context has already been squeezed.
+static inline _Bool xof_absorb(sha3_xof_t * const xof, const size_t rate, const uint8_t * const m, size_t m_len) {
+  // check context state
+  if (xof->squeezing) {
+    // xof has already been squeezed, return error
+    return false;
+  }
+
+  // absorb, return success
+  xof_absorb_raw(xof, rate, m, m_len);
+  return true;
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+// Finalize absorb, switch mode of XOF context to squeezing.
+static inline void xof_absorb_done(sha3_xof_t * const xof, const size_t rate, const uint8_t pad) {
+  // append suffix (s6.2) and padding
+  // (note: suffix and padding are ambiguous in spec)
+  xof->a.u8[xof->num_bytes] ^= pad;
+  xof->a.u8[rate - 1] ^= 0x80;
+
+  // permute
+  permute(xof->a.u64);
+
+  // switch to squeeze mode
+  xof->num_bytes = 0;
+  xof->squeezing = true;
+}
+
+// Squeeze data without checking mode (used by `xof_once()`).
+static inline void xof_squeeze_raw(sha3_xof_t * const xof, const size_t rate, uint8_t *dst, size_t dst_len) {
+  if (!xof->num_bytes) {
+    // num_bytes is zero, so we are reading from the start of the
+    // internal state buffer.  while `dst_len` is greater than rate,
+    // copy `rate` sized chunks directly from the internal state buffer
+    // to the destination, then permute the internal state.  squeeze
+    // rate-sized chunks to destination
+    while (dst_len >= rate) {
+      memcpy(dst, xof->a.u8, rate); // copy rate-sized chunk
+      permute(xof->a.u64); // permute state
+
+      // update destination pointer and length
+      dst += rate;
+      dst_len -= rate;
+    }
+
+    if (dst_len > 0) {
+      // the remaining destination length is less than `rate`, so copy a
+      // `dst_len`-sized chunk from the internal state to the
+      // destination buffer, then update the read byte count.
+
+      // squeeze dst_len-sized block to destination
+      memcpy(dst, xof->a.u8, dst_len); // copy dst_len-sized chunk
+      xof->num_bytes = dst_len; // update read byte count
+    }
+  } else {
+    // fall back to squeezing one byte at a time
+
+    // squeeze bytes to destination
+    for (size_t i = 0; i < dst_len; i++) {
+      dst[i] = xof->a.u8[xof->num_bytes++]; // squeeze byte to destination
+
+      if (xof->num_bytes == rate) {
+        permute(xof->a.u64); // permute state
+        xof->num_bytes = 0; // clear read bytes count
+      }
+    }
+  }
+}
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+// squeeze data from xof
+static inline void xof_squeeze(sha3_xof_t * const xof, const size_t rate, const uint8_t pad, uint8_t * const dst, const size_t dst_len) {
+  // check state
+  if (!xof->squeezing) {
+    // finalize absorb
+    xof_absorb_done(xof, rate, pad);
+  }
+
+  xof_squeeze_raw(xof, rate, dst, dst_len);
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+// one-shot xof absorb and squeeze
+static inline void xof_once(const size_t rate, const uint8_t pad, const uint8_t * const src, const size_t src_len, uint8_t * const dst, const size_t dst_len) {
+  // init
+  sha3_xof_t xof;
+  xof_init(&xof);
+
+  // absorb
+  xof_absorb_raw(&xof, rate, src, src_len);
+  xof_absorb_done(&xof, rate, pad);
+
+  // squeeze
+  xof_squeeze_raw(&xof, rate, dst, dst_len);
+}
+
+// define shake iterative context and one-shot functions
+#define DEF_SHAKE_CONTEXT(BITS) \
+  /* init shake context */ \
+  static inline void shake ## BITS ## _init(sha3_xof_t * const xof) { \
+    xof_init(xof); \
+  } \
+  \
+  /* absorb bytes into shake context */ \
+  static inline _Bool shake ## BITS ## _absorb(sha3_xof_t * const xof, const uint8_t * const m, const size_t len) { \
+    return xof_absorb(xof, SHAKE ## BITS ## _RATE, m, len); \
+  } \
+  \
+  /* squeeze bytes from shake context */ \
+  static inline void shake ## BITS ## _squeeze(sha3_xof_t * const xof, uint8_t * const dst, const size_t dst_len) { \
+    xof_squeeze(xof, SHAKE ## BITS ## _RATE, SHAKE_PAD, dst, dst_len); \
+  } \
+
+#define DEF_SHAKE_ONCE(BITS) \
+  /* one-shot shake absorb and squeeze */ \
+  static inline void shake ## BITS(const uint8_t * const src, const size_t src_len, uint8_t * const dst, const size_t dst_len) { \
+    xof_once(SHAKE ## BITS ## _RATE, SHAKE_PAD, src, src_len, dst, dst_len); \
+  }
+
+// shake padding byte and rates
+#define SHAKE_PAD 0x1f
+#define SHAKE128_RATE RATE(16) // shake128 input rate, in bytes
+#define SHAKE256_RATE RATE(32) // shake256 input rate, in bytes
+
+// declare shake functions
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+// SHAKE128 context functions.  Only built if one of the following
+// conditions is true:
+//
+// 1. The scalar backend is active.
+// 2. We are building the test suite.
+//
+// These functions are not needed when AVX-512 is enabled because the
+// AVX-512 backend has it's own implementation which keeps several
+// SHAKE128 and SHAKE256 contexts in AVX-512 registers and operates on
+// them in parallel.
+//
+// See pke{512,768,1024}_{keygen,encrypt}_sample_avx512()
+DEF_SHAKE_CONTEXT(128) // shake128_{init,absorb,squeeze}()
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+DEF_SHAKE_ONCE(256) // shake256()
+// end sha3.c
+
+#define Q 3329 // modulus (13*2^8 + 1)
+
+// PKE512 parameters
+#define PKE512_K 2
+#define PKE512_ETA1 3
+#define PKE512_ETA2 2
+#define PKE512_DU 10
+#define PKE512_DV 4
+#define PKE512_EK_SIZE (384 * PKE512_K + 32)
+#define PKE512_DK_SIZE (384 * PKE512_K)
+#define PKE512_CT_SIZE (32 * (PKE512_DU * PKE512_K + PKE512_DV))
+
+// PKE768 parameters
+#define PKE768_K 3
+#define PKE768_ETA1 2
+#define PKE768_ETA2 2
+#define PKE768_DU 10
+#define PKE768_DV 4
+#define PKE768_EK_SIZE (384 * PKE768_K + 32)
+#define PKE768_DK_SIZE (384 * PKE768_K)
+#define PKE768_CT_SIZE (32 * (PKE768_DU * PKE768_K + PKE768_DV))
+
+// PKE1024 parameters
+#define PKE1024_K 4
+#define PKE1024_ETA1 2
+#define PKE1024_ETA2 2
+#define PKE1024_DU 11
+#define PKE1024_DV 5
+#define PKE1024_EK_SIZE (384 * PKE1024_K + 32)
+#define PKE1024_DK_SIZE (384 * PKE1024_K)
+#define PKE1024_CT_SIZE (32 * (PKE1024_DU * PKE1024_K + PKE1024_DV))
+
+// Returns 1 if `x` is between `lo` and `hi` (inclusive).
+// (used by poly_encode_*() and poly_decode_*() functions)
+//
+// note: use bitwise AND instead of logical AND to encourage
+// constant-time logic by compiler.
+#define IN_RANGE(x, lo, hi) (((x) >= (lo)) & ((x) <= (hi)))
+
+// number-theoretic transform (NTT) lookup table
+// (used by poly_ntt() and poly_inv_ntt())
+static const uint16_t NTT_LUT[] = {
+  1, // n = 0, bitrev(0) = 0, (17**0)%3329 = 1
+  1729, // n = 1, bitrev(1) = 64, (17**64)%3329 = 1729
+  2580, // n = 2, bitrev(2) = 32, (17**32)%3329 = 2580
+  3289, // n = 3, bitrev(3) = 96, (17**96)%3329 = 3289
+  2642, // n = 4, bitrev(4) = 16, (17**16)%3329 = 2642
+  630, // n = 5, bitrev(5) = 80, (17**80)%3329 = 630
+  1897, // n = 6, bitrev(6) = 48, (17**48)%3329 = 1897
+  848, // n = 7, bitrev(7) = 112, (17**112)%3329 = 848
+  1062, // n = 8, bitrev(8) = 8, (17**8)%3329 = 1062
+  1919, // n = 9, bitrev(9) = 72, (17**72)%3329 = 1919
+  193, // n = 10, bitrev(10) = 40, (17**40)%3329 = 193
+  797, // n = 11, bitrev(11) = 104, (17**104)%3329 = 797
+  2786, // n = 12, bitrev(12) = 24, (17**24)%3329 = 2786
+  3260, // n = 13, bitrev(13) = 88, (17**88)%3329 = 3260
+  569, // n = 14, bitrev(14) = 56, (17**56)%3329 = 569
+  1746, // n = 15, bitrev(15) = 120, (17**120)%3329 = 1746
+  296, // n = 16, bitrev(16) = 4, (17**4)%3329 = 296
+  2447, // n = 17, bitrev(17) = 68, (17**68)%3329 = 2447
+  1339, // n = 18, bitrev(18) = 36, (17**36)%3329 = 1339
+  1476, // n = 19, bitrev(19) = 100, (17**100)%3329 = 1476
+  3046, // n = 20, bitrev(20) = 20, (17**20)%3329 = 3046
+  56, // n = 21, bitrev(21) = 84, (17**84)%3329 = 56
+  2240, // n = 22, bitrev(22) = 52, (17**52)%3329 = 2240
+  1333, // n = 23, bitrev(23) = 116, (17**116)%3329 = 1333
+  1426, // n = 24, bitrev(24) = 12, (17**12)%3329 = 1426
+  2094, // n = 25, bitrev(25) = 76, (17**76)%3329 = 2094
+  535, // n = 26, bitrev(26) = 44, (17**44)%3329 = 535
+  2882, // n = 27, bitrev(27) = 108, (17**108)%3329 = 2882
+  2393, // n = 28, bitrev(28) = 28, (17**28)%3329 = 2393
+  2879, // n = 29, bitrev(29) = 92, (17**92)%3329 = 2879
+  1974, // n = 30, bitrev(30) = 60, (17**60)%3329 = 1974
+  821, // n = 31, bitrev(31) = 124, (17**124)%3329 = 821
+  289, // n = 32, bitrev(32) = 2, (17**2)%3329 = 289
+  331, // n = 33, bitrev(33) = 66, (17**66)%3329 = 331
+  3253, // n = 34, bitrev(34) = 34, (17**34)%3329 = 3253
+  1756, // n = 35, bitrev(35) = 98, (17**98)%3329 = 1756
+  1197, // n = 36, bitrev(36) = 18, (17**18)%3329 = 1197
+  2304, // n = 37, bitrev(37) = 82, (17**82)%3329 = 2304
+  2277, // n = 38, bitrev(38) = 50, (17**50)%3329 = 2277
+  2055, // n = 39, bitrev(39) = 114, (17**114)%3329 = 2055
+  650, // n = 40, bitrev(40) = 10, (17**10)%3329 = 650
+  1977, // n = 41, bitrev(41) = 74, (17**74)%3329 = 1977
+  2513, // n = 42, bitrev(42) = 42, (17**42)%3329 = 2513
+  632, // n = 43, bitrev(43) = 106, (17**106)%3329 = 632
+  2865, // n = 44, bitrev(44) = 26, (17**26)%3329 = 2865
+  33, // n = 45, bitrev(45) = 90, (17**90)%3329 = 33
+  1320, // n = 46, bitrev(46) = 58, (17**58)%3329 = 1320
+  1915, // n = 47, bitrev(47) = 122, (17**122)%3329 = 1915
+  2319, // n = 48, bitrev(48) = 6, (17**6)%3329 = 2319
+  1435, // n = 49, bitrev(49) = 70, (17**70)%3329 = 1435
+  807, // n = 50, bitrev(50) = 38, (17**38)%3329 = 807
+  452, // n = 51, bitrev(51) = 102, (17**102)%3329 = 452
+  1438, // n = 52, bitrev(52) = 22, (17**22)%3329 = 1438
+  2868, // n = 53, bitrev(53) = 86, (17**86)%3329 = 2868
+  1534, // n = 54, bitrev(54) = 54, (17**54)%3329 = 1534
+  2402, // n = 55, bitrev(55) = 118, (17**118)%3329 = 2402
+  2647, // n = 56, bitrev(56) = 14, (17**14)%3329 = 2647
+  2617, // n = 57, bitrev(57) = 78, (17**78)%3329 = 2617
+  1481, // n = 58, bitrev(58) = 46, (17**46)%3329 = 1481
+  648, // n = 59, bitrev(59) = 110, (17**110)%3329 = 648
+  2474, // n = 60, bitrev(60) = 30, (17**30)%3329 = 2474
+  3110, // n = 61, bitrev(61) = 94, (17**94)%3329 = 3110
+  1227, // n = 62, bitrev(62) = 62, (17**62)%3329 = 1227
+  910, // n = 63, bitrev(63) = 126, (17**126)%3329 = 910
+  17, // n = 64, bitrev(64) = 1, (17**1)%3329 = 17
+  2761, // n = 65, bitrev(65) = 65, (17**65)%3329 = 2761
+  583, // n = 66, bitrev(66) = 33, (17**33)%3329 = 583
+  2649, // n = 67, bitrev(67) = 97, (17**97)%3329 = 2649
+  1637, // n = 68, bitrev(68) = 17, (17**17)%3329 = 1637
+  723, // n = 69, bitrev(69) = 81, (17**81)%3329 = 723
+  2288, // n = 70, bitrev(70) = 49, (17**49)%3329 = 2288
+  1100, // n = 71, bitrev(71) = 113, (17**113)%3329 = 1100
+  1409, // n = 72, bitrev(72) = 9, (17**9)%3329 = 1409
+  2662, // n = 73, bitrev(73) = 73, (17**73)%3329 = 2662
+  3281, // n = 74, bitrev(74) = 41, (17**41)%3329 = 3281
+  233, // n = 75, bitrev(75) = 105, (17**105)%3329 = 233
+  756, // n = 76, bitrev(76) = 25, (17**25)%3329 = 756
+  2156, // n = 77, bitrev(77) = 89, (17**89)%3329 = 2156
+  3015, // n = 78, bitrev(78) = 57, (17**57)%3329 = 3015
+  3050, // n = 79, bitrev(79) = 121, (17**121)%3329 = 3050
+  1703, // n = 80, bitrev(80) = 5, (17**5)%3329 = 1703
+  1651, // n = 81, bitrev(81) = 69, (17**69)%3329 = 1651
+  2789, // n = 82, bitrev(82) = 37, (17**37)%3329 = 2789
+  1789, // n = 83, bitrev(83) = 101, (17**101)%3329 = 1789
+  1847, // n = 84, bitrev(84) = 21, (17**21)%3329 = 1847
+  952, // n = 85, bitrev(85) = 85, (17**85)%3329 = 952
+  1461, // n = 86, bitrev(86) = 53, (17**53)%3329 = 1461
+  2687, // n = 87, bitrev(87) = 117, (17**117)%3329 = 2687
+  939, // n = 88, bitrev(88) = 13, (17**13)%3329 = 939
+  2308, // n = 89, bitrev(89) = 77, (17**77)%3329 = 2308
+  2437, // n = 90, bitrev(90) = 45, (17**45)%3329 = 2437
+  2388, // n = 91, bitrev(91) = 109, (17**109)%3329 = 2388
+  733, // n = 92, bitrev(92) = 29, (17**29)%3329 = 733
+  2337, // n = 93, bitrev(93) = 93, (17**93)%3329 = 2337
+  268, // n = 94, bitrev(94) = 61, (17**61)%3329 = 268
+  641, // n = 95, bitrev(95) = 125, (17**125)%3329 = 641
+  1584, // n = 96, bitrev(96) = 3, (17**3)%3329 = 1584
+  2298, // n = 97, bitrev(97) = 67, (17**67)%3329 = 2298
+  2037, // n = 98, bitrev(98) = 35, (17**35)%3329 = 2037
+  3220, // n = 99, bitrev(99) = 99, (17**99)%3329 = 3220
+  375, // n = 100, bitrev(100) = 19, (17**19)%3329 = 375
+  2549, // n = 101, bitrev(101) = 83, (17**83)%3329 = 2549
+  2090, // n = 102, bitrev(102) = 51, (17**51)%3329 = 2090
+  1645, // n = 103, bitrev(103) = 115, (17**115)%3329 = 1645
+  1063, // n = 104, bitrev(104) = 11, (17**11)%3329 = 1063
+  319, // n = 105, bitrev(105) = 75, (17**75)%3329 = 319
+  2773, // n = 106, bitrev(106) = 43, (17**43)%3329 = 2773
+  757, // n = 107, bitrev(107) = 107, (17**107)%3329 = 757
+  2099, // n = 108, bitrev(108) = 27, (17**27)%3329 = 2099
+  561, // n = 109, bitrev(109) = 91, (17**91)%3329 = 561
+  2466, // n = 110, bitrev(110) = 59, (17**59)%3329 = 2466
+  2594, // n = 111, bitrev(111) = 123, (17**123)%3329 = 2594
+  2804, // n = 112, bitrev(112) = 7, (17**7)%3329 = 2804
+  1092, // n = 113, bitrev(113) = 71, (17**71)%3329 = 1092
+  403, // n = 114, bitrev(114) = 39, (17**39)%3329 = 403
+  1026, // n = 115, bitrev(115) = 103, (17**103)%3329 = 1026
+  1143, // n = 116, bitrev(116) = 23, (17**23)%3329 = 1143
+  2150, // n = 117, bitrev(117) = 87, (17**87)%3329 = 2150
+  2775, // n = 118, bitrev(118) = 55, (17**55)%3329 = 2775
+  886, // n = 119, bitrev(119) = 119, (17**119)%3329 = 886
+  1722, // n = 120, bitrev(120) = 15, (17**15)%3329 = 1722
+  1212, // n = 121, bitrev(121) = 79, (17**79)%3329 = 1212
+  1874, // n = 122, bitrev(122) = 47, (17**47)%3329 = 1874
+  1029, // n = 123, bitrev(123) = 111, (17**111)%3329 = 1029
+  2110, // n = 124, bitrev(124) = 31, (17**31)%3329 = 2110
+  2935, // n = 125, bitrev(125) = 95, (17**95)%3329 = 2935
+  885, // n = 126, bitrev(126) = 63, (17**63)%3329 = 885
+  2154, // n = 127, bitrev(127) = 127, (17**127)%3329 = 2154
+};
+
+// polynomial base case multiply lookup table
+// (used by poly_mul())
+static const uint16_t MUL_LUT[] = {
+  17, // n = 0, 2*bitrev(0)+1 = 1, (17**1)%3329) = 17
+  3312, // n = 1, 2*bitrev(1)+1 = 129, (17**129)%3329) = 3312
+  2761, // n = 2, 2*bitrev(2)+1 = 65, (17**65)%3329) = 2761
+  568, // n = 3, 2*bitrev(3)+1 = 193, (17**193)%3329) = 568
+  583, // n = 4, 2*bitrev(4)+1 = 33, (17**33)%3329) = 583
+  2746, // n = 5, 2*bitrev(5)+1 = 161, (17**161)%3329) = 2746
+  2649, // n = 6, 2*bitrev(6)+1 = 97, (17**97)%3329) = 2649
+  680, // n = 7, 2*bitrev(7)+1 = 225, (17**225)%3329) = 680
+  1637, // n = 8, 2*bitrev(8)+1 = 17, (17**17)%3329) = 1637
+  1692, // n = 9, 2*bitrev(9)+1 = 145, (17**145)%3329) = 1692
+  723, // n = 10, 2*bitrev(10)+1 = 81, (17**81)%3329) = 723
+  2606, // n = 11, 2*bitrev(11)+1 = 209, (17**209)%3329) = 2606
+  2288, // n = 12, 2*bitrev(12)+1 = 49, (17**49)%3329) = 2288
+  1041, // n = 13, 2*bitrev(13)+1 = 177, (17**177)%3329) = 1041
+  1100, // n = 14, 2*bitrev(14)+1 = 113, (17**113)%3329) = 1100
+  2229, // n = 15, 2*bitrev(15)+1 = 241, (17**241)%3329) = 2229
+  1409, // n = 16, 2*bitrev(16)+1 = 9, (17**9)%3329) = 1409
+  1920, // n = 17, 2*bitrev(17)+1 = 137, (17**137)%3329) = 1920
+  2662, // n = 18, 2*bitrev(18)+1 = 73, (17**73)%3329) = 2662
+  667, // n = 19, 2*bitrev(19)+1 = 201, (17**201)%3329) = 667
+  3281, // n = 20, 2*bitrev(20)+1 = 41, (17**41)%3329) = 3281
+  48, // n = 21, 2*bitrev(21)+1 = 169, (17**169)%3329) = 48
+  233, // n = 22, 2*bitrev(22)+1 = 105, (17**105)%3329) = 233
+  3096, // n = 23, 2*bitrev(23)+1 = 233, (17**233)%3329) = 3096
+  756, // n = 24, 2*bitrev(24)+1 = 25, (17**25)%3329) = 756
+  2573, // n = 25, 2*bitrev(25)+1 = 153, (17**153)%3329) = 2573
+  2156, // n = 26, 2*bitrev(26)+1 = 89, (17**89)%3329) = 2156
+  1173, // n = 27, 2*bitrev(27)+1 = 217, (17**217)%3329) = 1173
+  3015, // n = 28, 2*bitrev(28)+1 = 57, (17**57)%3329) = 3015
+  314, // n = 29, 2*bitrev(29)+1 = 185, (17**185)%3329) = 314
+  3050, // n = 30, 2*bitrev(30)+1 = 121, (17**121)%3329) = 3050
+  279, // n = 31, 2*bitrev(31)+1 = 249, (17**249)%3329) = 279
+  1703, // n = 32, 2*bitrev(32)+1 = 5, (17**5)%3329) = 1703
+  1626, // n = 33, 2*bitrev(33)+1 = 133, (17**133)%3329) = 1626
+  1651, // n = 34, 2*bitrev(34)+1 = 69, (17**69)%3329) = 1651
+  1678, // n = 35, 2*bitrev(35)+1 = 197, (17**197)%3329) = 1678
+  2789, // n = 36, 2*bitrev(36)+1 = 37, (17**37)%3329) = 2789
+  540, // n = 37, 2*bitrev(37)+1 = 165, (17**165)%3329) = 540
+  1789, // n = 38, 2*bitrev(38)+1 = 101, (17**101)%3329) = 1789
+  1540, // n = 39, 2*bitrev(39)+1 = 229, (17**229)%3329) = 1540
+  1847, // n = 40, 2*bitrev(40)+1 = 21, (17**21)%3329) = 1847
+  1482, // n = 41, 2*bitrev(41)+1 = 149, (17**149)%3329) = 1482
+  952, // n = 42, 2*bitrev(42)+1 = 85, (17**85)%3329) = 952
+  2377, // n = 43, 2*bitrev(43)+1 = 213, (17**213)%3329) = 2377
+  1461, // n = 44, 2*bitrev(44)+1 = 53, (17**53)%3329) = 1461
+  1868, // n = 45, 2*bitrev(45)+1 = 181, (17**181)%3329) = 1868
+  2687, // n = 46, 2*bitrev(46)+1 = 117, (17**117)%3329) = 2687
+  642, // n = 47, 2*bitrev(47)+1 = 245, (17**245)%3329) = 642
+  939, // n = 48, 2*bitrev(48)+1 = 13, (17**13)%3329) = 939
+  2390, // n = 49, 2*bitrev(49)+1 = 141, (17**141)%3329) = 2390
+  2308, // n = 50, 2*bitrev(50)+1 = 77, (17**77)%3329) = 2308
+  1021, // n = 51, 2*bitrev(51)+1 = 205, (17**205)%3329) = 1021
+  2437, // n = 52, 2*bitrev(52)+1 = 45, (17**45)%3329) = 2437
+  892, // n = 53, 2*bitrev(53)+1 = 173, (17**173)%3329) = 892
+  2388, // n = 54, 2*bitrev(54)+1 = 109, (17**109)%3329) = 2388
+  941, // n = 55, 2*bitrev(55)+1 = 237, (17**237)%3329) = 941
+  733, // n = 56, 2*bitrev(56)+1 = 29, (17**29)%3329) = 733
+  2596, // n = 57, 2*bitrev(57)+1 = 157, (17**157)%3329) = 2596
+  2337, // n = 58, 2*bitrev(58)+1 = 93, (17**93)%3329) = 2337
+  992, // n = 59, 2*bitrev(59)+1 = 221, (17**221)%3329) = 992
+  268, // n = 60, 2*bitrev(60)+1 = 61, (17**61)%3329) = 268
+  3061, // n = 61, 2*bitrev(61)+1 = 189, (17**189)%3329) = 3061
+  641, // n = 62, 2*bitrev(62)+1 = 125, (17**125)%3329) = 641
+  2688, // n = 63, 2*bitrev(63)+1 = 253, (17**253)%3329) = 2688
+  1584, // n = 64, 2*bitrev(64)+1 = 3, (17**3)%3329) = 1584
+  1745, // n = 65, 2*bitrev(65)+1 = 131, (17**131)%3329) = 1745
+  2298, // n = 66, 2*bitrev(66)+1 = 67, (17**67)%3329) = 2298
+  1031, // n = 67, 2*bitrev(67)+1 = 195, (17**195)%3329) = 1031
+  2037, // n = 68, 2*bitrev(68)+1 = 35, (17**35)%3329) = 2037
+  1292, // n = 69, 2*bitrev(69)+1 = 163, (17**163)%3329) = 1292
+  3220, // n = 70, 2*bitrev(70)+1 = 99, (17**99)%3329) = 3220
+  109, // n = 71, 2*bitrev(71)+1 = 227, (17**227)%3329) = 109
+  375, // n = 72, 2*bitrev(72)+1 = 19, (17**19)%3329) = 375
+  2954, // n = 73, 2*bitrev(73)+1 = 147, (17**147)%3329) = 2954
+  2549, // n = 74, 2*bitrev(74)+1 = 83, (17**83)%3329) = 2549
+  780, // n = 75, 2*bitrev(75)+1 = 211, (17**211)%3329) = 780
+  2090, // n = 76, 2*bitrev(76)+1 = 51, (17**51)%3329) = 2090
+  1239, // n = 77, 2*bitrev(77)+1 = 179, (17**179)%3329) = 1239
+  1645, // n = 78, 2*bitrev(78)+1 = 115, (17**115)%3329) = 1645
+  1684, // n = 79, 2*bitrev(79)+1 = 243, (17**243)%3329) = 1684
+  1063, // n = 80, 2*bitrev(80)+1 = 11, (17**11)%3329) = 1063
+  2266, // n = 81, 2*bitrev(81)+1 = 139, (17**139)%3329) = 2266
+  319, // n = 82, 2*bitrev(82)+1 = 75, (17**75)%3329) = 319
+  3010, // n = 83, 2*bitrev(83)+1 = 203, (17**203)%3329) = 3010
+  2773, // n = 84, 2*bitrev(84)+1 = 43, (17**43)%3329) = 2773
+  556, // n = 85, 2*bitrev(85)+1 = 171, (17**171)%3329) = 556
+  757, // n = 86, 2*bitrev(86)+1 = 107, (17**107)%3329) = 757
+  2572, // n = 87, 2*bitrev(87)+1 = 235, (17**235)%3329) = 2572
+  2099, // n = 88, 2*bitrev(88)+1 = 27, (17**27)%3329) = 2099
+  1230, // n = 89, 2*bitrev(89)+1 = 155, (17**155)%3329) = 1230
+  561, // n = 90, 2*bitrev(90)+1 = 91, (17**91)%3329) = 561
+  2768, // n = 91, 2*bitrev(91)+1 = 219, (17**219)%3329) = 2768
+  2466, // n = 92, 2*bitrev(92)+1 = 59, (17**59)%3329) = 2466
+  863, // n = 93, 2*bitrev(93)+1 = 187, (17**187)%3329) = 863
+  2594, // n = 94, 2*bitrev(94)+1 = 123, (17**123)%3329) = 2594
+  735, // n = 95, 2*bitrev(95)+1 = 251, (17**251)%3329) = 735
+  2804, // n = 96, 2*bitrev(96)+1 = 7, (17**7)%3329) = 2804
+  525, // n = 97, 2*bitrev(97)+1 = 135, (17**135)%3329) = 525
+  1092, // n = 98, 2*bitrev(98)+1 = 71, (17**71)%3329) = 1092
+  2237, // n = 99, 2*bitrev(99)+1 = 199, (17**199)%3329) = 2237
+  403, // n = 100, 2*bitrev(100)+1 = 39, (17**39)%3329) = 403
+  2926, // n = 101, 2*bitrev(101)+1 = 167, (17**167)%3329) = 2926
+  1026, // n = 102, 2*bitrev(102)+1 = 103, (17**103)%3329) = 1026
+  2303, // n = 103, 2*bitrev(103)+1 = 231, (17**231)%3329) = 2303
+  1143, // n = 104, 2*bitrev(104)+1 = 23, (17**23)%3329) = 1143
+  2186, // n = 105, 2*bitrev(105)+1 = 151, (17**151)%3329) = 2186
+  2150, // n = 106, 2*bitrev(106)+1 = 87, (17**87)%3329) = 2150
+  1179, // n = 107, 2*bitrev(107)+1 = 215, (17**215)%3329) = 1179
+  2775, // n = 108, 2*bitrev(108)+1 = 55, (17**55)%3329) = 2775
+  554, // n = 109, 2*bitrev(109)+1 = 183, (17**183)%3329) = 554
+  886, // n = 110, 2*bitrev(110)+1 = 119, (17**119)%3329) = 886
+  2443, // n = 111, 2*bitrev(111)+1 = 247, (17**247)%3329) = 2443
+  1722, // n = 112, 2*bitrev(112)+1 = 15, (17**15)%3329) = 1722
+  1607, // n = 113, 2*bitrev(113)+1 = 143, (17**143)%3329) = 1607
+  1212, // n = 114, 2*bitrev(114)+1 = 79, (17**79)%3329) = 1212
+  2117, // n = 115, 2*bitrev(115)+1 = 207, (17**207)%3329) = 2117
+  1874, // n = 116, 2*bitrev(116)+1 = 47, (17**47)%3329) = 1874
+  1455, // n = 117, 2*bitrev(117)+1 = 175, (17**175)%3329) = 1455
+  1029, // n = 118, 2*bitrev(118)+1 = 111, (17**111)%3329) = 1029
+  2300, // n = 119, 2*bitrev(119)+1 = 239, (17**239)%3329) = 2300
+  2110, // n = 120, 2*bitrev(120)+1 = 31, (17**31)%3329) = 2110
+  1219, // n = 121, 2*bitrev(121)+1 = 159, (17**159)%3329) = 1219
+  2935, // n = 122, 2*bitrev(122)+1 = 95, (17**95)%3329) = 2935
+  394, // n = 123, 2*bitrev(123)+1 = 223, (17**223)%3329) = 394
+  885, // n = 124, 2*bitrev(124)+1 = 63, (17**63)%3329) = 885
+  2444, // n = 125, 2*bitrev(125)+1 = 191, (17**191)%3329) = 2444
+  2154, // n = 126, 2*bitrev(126)+1 = 127, (17**127)%3329) = 2154
+  1175, // n = 127, 2*bitrev(127)+1 = 255, (17**255)%3329) = 1175
+};
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Initialize SHAKE256 XOF as a pseudo-random function (PRF) by
+ * absorbing 32-byte `seed` and byte `b`, then read `len` bytes of data
+ * from the PRF into the buffer pointed to by `out`.
+ *
+ * Used by `poly_sample_cbdN()` functions to sample polynomial
+ * coefficients.
+ *
+ * @param[in] seed 32 bytes.
+ * @param[in] b 1 byte.
+ * @param[out] out Output buffer of length `len`.
+ * @param[in] len Output buffer length.
+ */
+static inline void prf(const uint8_t seed[static 32], const uint8_t b, uint8_t * const out, const size_t len) {
+  // populate `buf` with `seed` and byte `b`
+  uint8_t buf[33] = { 0 };
+  memcpy(buf, seed, 32);
+  buf[32] = b;
+
+  // absorb `buf` into SHAKE256 XOF, write `len` bytes to `out`
+  shake256(buf, sizeof(buf), out, len);
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+/**
+ * Constant-time difference.  Returns true if `a` and `b` differ and
+ * false they are the identical.
+ *
+ * Used by `fips203ipd_kem512_decaps()`.
+ *
+ * @param[in] a Input value of length `len`.
+ * @param[in] b Input value of length `len`.
+ * @param[in] len Length of input values, in bytes.
+ *
+ * @return true if `a` and `b differ, and false if they are identical.
+ */
+static inline bool ct_diff(const uint8_t * const restrict a, const uint8_t * const restrict b, const size_t len) {
+  uint8_t r = 0;
+  for (size_t i = 0; i < len; i++) {
+    r |= (a[i] ^ b[i]);
+  }
+
+  return r == 0;
+}
+
+/**
+ * Constant-time copy. Copy `a` to `c` if `sel is `false` or copy `b` to
+ * `c` if `sel` is `true`.
+ *
+ * Used by `fips203ipd_kem512_decaps()`.
+ *
+ * @param[out] c 32-byte output buffer.
+ * @param[in] sel Selection condition.
+ * @param[in] a 32-byte input value.
+ * @param[in] b 32-byte input value.
+ */
+static inline void ct_copy(uint8_t c[static 32], const bool sel, const uint8_t a[static 32], const uint8_t b[static 32]) {
+  const uint8_t mask = sel ? 0xff : 0x00;
+  for (size_t i = 0; i < 32; i++) {
+    c[i] = (a[i] & mask) ^ (b[i] & ~mask);
+  }
+}
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Constant-time mod Q (Barrett reduction).
+ *
+ * @param[in] v Input value.
+ * @return Value reduced modulo Q.
+ */
+static inline uint16_t ct_mod_q(const uint32_t v) {
+  // notes:
+  // - the exponent is set to 32 to encourage compilers to elide the
+  //   right shift in the reduction step by using a mulhi
+  // - the type of the multiplier is uint64_t, because one of `v` or
+  //   `M` must be 64-bit in the reduction step or compilers will
+  //   complain about overflow
+  // - the return value of reduce is uint16_t, because after the
+  //   reduction the maximum value is 2*Q, so it will fit in 16 bits.
+  static const uint8_t E = 32; // exponent
+  static const uint64_t M = 1290167; // multiplier: (1<<E)/Q
+  const uint16_t r = v - ((v * M) >> E) * Q; // reduce
+  const uint16_t mask = (r < Q) ? 0 : 0xFFFF; // adjustment mask
+  return r - (Q & mask); // adjust (constant-time)
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+// Polynomial with 256 12-bit coefficients.
+typedef struct {
+  uint16_t cs[256]; // coefficients
+} poly_t;
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Initialize polynomial `a` by sampling coefficients in the NTT domain
+ * from SHAKE128 extendable output function (XOF) seeded by 32-byte
+ * value `rho`, byte `i`, and byte `j`.
+ *
+ * @note Only used by scalar functions; the AVX-512 functions sample
+ * coefficients for multiple NTT polynomials inline in parallel.
+ *
+ * @param[out] a Output polynomial with coefficients in the NTT domain.
+ * @param[in] rho 32-byte input value used as XOF seed.
+ * @param[in] i One byte input value used as XOF seed.
+ * @param[in] j One byte input value used as XOF seed.
+ */
+static inline void poly_sample_ntt(poly_t * const a, const uint8_t rho[static 32], const uint8_t i, const uint8_t j) {
+  // init shake128 xof by absorbing rho, i, and j
+  sha3_xof_t xof = { 0 };
+  {
+    const uint8_t ij[2] = { i, j }; // combine i and j
+    shake128_init(&xof); // init shake128 xof
+    shake128_absorb(&xof, rho, 32); // absorb rho
+    shake128_absorb(&xof, ij, 2); // absorb i and j
+  }
+
+  for (size_t x = 0; x < 256;) {
+    // read 3 bytes from xof
+    uint8_t ds[3] = { 0 };
+    shake128_squeeze(&xof, ds, 3);
+
+    // split 3 bytes into two 12-bit samples
+    const uint16_t d1 = ((uint16_t) ds[0]) | (((uint16_t) (ds[1] & 0xF)) << 8),
+                   d2 = ((uint16_t) ds[1] >> 4) | (((uint16_t) ds[2]) << 4);
+
+    // sample d1
+    if (d1 < Q) {
+      a->cs[x++] = d1;
+    }
+
+    // sample d2
+    if (d2 < Q && x < 256) {
+      a->cs[x++] = d2;
+    }
+  }
+}
+
+/**
+ * Define function which reads `64 * ETA` bytes from a pseudo-random
+ * function (PRF) seeded by 32-byte value `seed` and one byte value `b`,
+ * then samples values from the PRF output using the centered binomial
+ * distribution (CBD) with error `ETA` and writes the values as the
+ * coefficients of output polynomial `p`.
+ *
+ * @note Only used by scalar functions; the AVX-512 functions sample
+ * coefficients for multiple CBD polynomials inline in parallel.
+ *
+ * @param[out] p Output polynomial with CBD(ETA) distributed coefficients.
+ * @param[in] seed 32-byte input value used as PRF seed.
+ * @param[in] b 1 byte input value used as PRF seed.
+ */
+#define DEF_POLY_SAMPLE_CBD(ETA) \
+  static inline void poly_sample_cbd ## ETA (poly_t * const p, const uint8_t seed[static 32], const uint8_t b) { \
+    /* read 64 * eta bytes of data from prf */ \
+    uint8_t buf[64 * ETA] = { 0 }; \
+    prf(seed, b, buf, sizeof(buf)); \
+    \
+    for (size_t i = 0; i < 256; i++) { \
+      uint16_t x = 0; \
+      for (size_t j = 0; j < ETA; j++) { \
+        const size_t ofs = 2 * i * ETA + j; \
+        x += (buf[ofs / 8] >> (ofs % 8)) & 0x01; \
+      } \
+      \
+      uint16_t y = 0; \
+      for (size_t j = 0; j < ETA; j++) { \
+        const size_t ofs = 2 * i * ETA + ETA + j; \
+        y += (buf[ofs / 8] >> (ofs % 8)) & 0x01; \
+      } \
+      \
+      const uint16_t t = x + (Q - y), /* t = x - y */ \
+                     m = (t >= Q) ? 0xfff : 0; \
+      p->cs[i] = t - (Q & m); /* cs[i] = t % Q */ \
+    } \
+  }
+
+// define poly_sample_cbd3() (PKE512_ETA1)
+DEF_POLY_SAMPLE_CBD(3)
+
+// define poly_sample_cbd2() (PKE512_ETA2, PKE768_ETA{1,2}, // PKE1024_ETA{1,2})
+DEF_POLY_SAMPLE_CBD(2)
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+// AVX512 polynomial functions
+
+// permute IDs (last 6 lanes are masked to zero)
+//
+// zero-extended into 64-bit values in a 512-bit register and used by
+// NTT_MUL() macro in poly_ntt_avx512() and poly_inv_ntt_avx512() to
+// extract 32 12-bit values stored in the 16-bit lanes of 1 512-bit
+// register and store them in the 64-bit lanes of 4 512-bit registers.
+static const __m512i NTT_MUL_T1_IDS = { 2, 3, 0, 0 },
+                     NTT_MUL_T2_IDS = { 4, 5, 0, 0 },
+                     NTT_MUL_T3_IDS = { 6, 7, 0, 0 };
+
+// Q in 8 64-bit lanes
+static const __m512i Q64 = { Q, Q, Q, Q, Q, Q, Q, Q };
+
+// Q in 16 32-bit lanes
+static const __m512i Q32 = {
+  0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL,
+  0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL,
+};
+
+// Q in 32 16-bit lanes
+static const __m512i Q16 = {
+  0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL,
+  0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL,
+};
+
+// NTT_MUL() multiplier: floor((1<<39)/Q)
+static const __m512i NTT_MM = {
+  165141428ULL, 165141428ULL, 165141428ULL, 165141428ULL,
+  165141428ULL, 165141428ULL, 165141428ULL, 165141428ULL,
+};
+
+// t_lo/t_hi join ids
+// permute IDs used to combine 32 12-bit values stored in 64-bit lanes
+// of four 512-bit registers into 32 16-bit lanes of a single 512-bit
+// register.
+//
+// the same set of permute IDs are used for both the low and the high
+// half of the join; for the low half (t_lo) the upper 16 lanes are
+// masked to zero (e.g., mask = 0x0000ffff), and for the high half
+// (t_hi) the lower 16 lanes are masked to zero (mask = 0xffff0000).
+//
+// here are the unencoded values:
+//
+//   static const uint8_t NTT_MUL_T_JOIN_ID_VALS[32] ALIGN(32) = {
+//      0,  4,  8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, // t_lo ids
+//      0,  4,  8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, // t_hi ids
+//   };
+//
+static const __m512i NTT_T_JOIN_IDS = {
+  0x000C000800040000ULL, 0x001C001800140010ULL, 0x002c002800240020ULL, 0x003c003800340030ULL,
+  0x000C000800040000ULL, 0x001C001800140010ULL, 0x002c002800240020ULL, 0x003c003800340030ULL,
+};
+
+// low coef permute ids (len = 16)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L16_LO_ID_VALS[32] ALIGN(32) = {
+//      0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
+//     32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
+//   };
+static const __m512i NTT_L16_LO_IDS = {
+  0x0003000200010000ULL, 0x0007000600050004ULL, 0x000B000A00090008ULL, 0x000F000E000D000CULL,
+  0x0023002200210020ULL, 0x0027002600250024ULL, 0x002B002A00290028ULL, 0x002F002E002D002CULL,
+};
+
+// high coef permute ids (len = 16)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L16_HI_ID_VALS[32] ALIGN(32) = {
+//     16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
+//     48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
+//   };
+static const __m512i NTT_L16_HI_IDS = {
+  0x0013001200110010ULL, 0x0017001600150014ULL, 0x001B001A00190018ULL, 0x001F001E001D001CULL,
+  0x0033003200310030ULL, 0x0037003600350034ULL, 0x003B003A00390038ULL, 0x003F003E003D003CULL,
+};
+
+// low coef load permute ids (len = 8)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L08_LO_LOAD_ID_VALS[32] ALIGN(32) = {
+//      0,  1,  2,  3,  4,  5,  6,  7, 16, 17, 18, 19, 20, 21, 22, 23,
+//     32, 33, 34, 35, 36, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55,
+//   };
+static const __m512i NTT_L08_LO_LOAD_IDS = {
+  0x0003000200010000ULL, 0x0007000600050004ULL, 0x0013001200110010ULL, 0x0017001600150014ULL,
+  0x0023002200210020ULL, 0x0027002600250024ULL, 0x0033003200310030ULL, 0x0037003600350034ULL,
+};
+
+// high coef load permute ids (len = 8)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L08_HI_LOAD_ID_VALS[32] ALIGN(32) = {
+//      8,  9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 30, 31,
+//     40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63,
+//   };
+static const __m512i NTT_L08_HI_LOAD_IDS = {
+  0x000B000A00090008ULL, 0x000F000E000D000CULL, 0x001B001A00190018ULL, 0x001F001E001D001CULL,
+  0x002B002A00290028ULL, 0x002F002E002D002CULL, 0x003B003A00390038ULL, 0x003F003E003D003CULL,
+};
+
+// low coef store permute ids (len = 8)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L08_LO_STORE_ID_VALS[32] ALIGN(32) = {
+//      0,  1,  2,  3,  4,  5,  6,  7, 32, 33, 34, 35, 36, 37, 38, 39,
+//      8,  9, 10, 11, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 46, 47,
+//   };
+static const __m512i NTT_L08_LO_STORE_IDS = {
+  0x0003000200010000ULL, 0x0007000600050004ULL, 0x0023002200210020ULL, 0x0027002600250024ULL,
+  0x000B000A00090008ULL, 0x000F000E000D000CULL, 0x002B002A00290028ULL, 0x002F002E002D002CULL,
+};
+
+// high coef store permute ids (len = 8)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L08_HI_STORE_ID_VALS[32] ALIGN(32) = {
+//     16, 17, 18, 19, 20, 21, 22, 23, 48, 49, 50, 51, 52, 53, 54, 55,
+//     24, 25, 26, 27, 28, 29, 30, 31, 56, 57, 58, 59, 60, 61, 62, 63,
+//   };
+static const __m512i NTT_L08_HI_STORE_IDS = {
+  0x0013001200110010ULL, 0x0017001600150014ULL, 0x0033003200310030ULL, 0x0037003600350034ULL,
+  0x001B001A00190018ULL, 0x001F001E001D001CULL, 0x003B003A00390038ULL, 0x003F003E003D003CULL,
+};
+
+// low coef load permute ids (len = 4)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L04_LO_LOAD_ID_VALS[32] ALIGN(32) = {
+//      0,  1,  2,  3,  8,  9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27,
+//     32, 33, 34, 35, 40, 41, 42, 43, 48, 49, 50, 51, 56, 57, 58, 59,
+//   };
+static const __m512i NTT_L04_LO_LOAD_IDS = {
+  0x0003000200010000ULL, 0x000B000A00090008ULL, 0x0013001200110010ULL, 0x001B001A00190018ULL,
+  0x0023002200210020ULL, 0x002B002A00290028ULL, 0x0033003200310030ULL, 0x003B003A00390038ULL,
+};
+
+// high coef load permute ids (len = 4)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L04_HI_LOAD_ID_VALS[32] ALIGN(32) = {
+//      4,  5,  6,  7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31,
+//     36, 37, 38, 39, 44, 45, 46, 47, 52, 53, 54, 55, 60, 61, 62, 63,
+//   };
+static const __m512i NTT_L04_HI_LOAD_IDS = {
+  0x0007000600050004ULL, 0x000F000E000D000CULL, 0x0017001600150014ULL, 0x001F001E001D001CULL,
+  0x0027002600250024ULL, 0x002F002E002D002CULL, 0x0037003600350034ULL, 0x003F003E003D003CULL,
+};
+
+// low coef store permute ids (len = 4)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L04_LO_STORE_ID_VALS[32] ALIGN(32) = {
+//      0,  1,  2,  3, 32, 33, 34, 35,  4,  5,  6,  7, 36, 37, 38, 39,
+//      8,  9, 10, 11, 40, 41, 42, 43, 12, 13, 14, 15, 44, 45, 46, 47,
+//   };
+static const __m512i NTT_L04_LO_STORE_IDS = {
+  0x0003000200010000ULL, 0x0023002200210020ULL, 0x0007000600050004ULL, 0x0027002600250024ULL,
+  0x000B000A00090008ULL, 0x002B002A00290028ULL, 0x000F000E000D000CULL, 0x002F002E002D002CULL,
+};
+
+// high coef store permute ids (len = 4)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L04_HI_STORE_ID_VALS[32] ALIGN(32) = {
+//     16, 17, 18, 19, 48, 49, 50, 51, 20, 21, 22, 23, 52, 53, 54, 55,
+//     24, 25, 26, 27, 56, 57, 58, 59, 28, 29, 30, 31, 60, 61, 62, 63,
+//   };
+static const __m512i NTT_L04_HI_STORE_IDS = {
+  0x0013001200110010ULL, 0x0033003200310030ULL, 0x0017001600150014ULL, 0x0037003600350034ULL,
+  0x001B001A00190018ULL, 0x003B003A00390038ULL, 0x001F001E001D001CULL, 0x003F003E003D003CULL,
+};
+
+// low coef load permute ids (len = 2)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L02_LO_LOAD_ID_VALS[32] ALIGN(32) = {
+//      0,  1,  4,  5,  8,  9, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29,
+//     32, 33, 36, 37, 40, 41, 44, 45, 48, 49, 52, 53, 56, 57, 60, 61,
+//   };
+static const __m512i NTT_L02_LO_LOAD_IDS = {
+  0x0005000400010000ULL, 0x000D000C00090008ULL, 0x0015001400110010ULL, 0x001D001C00190018ULL,
+  0x0025002400210020ULL, 0x002D002C00290028ULL, 0x0035003400310030ULL, 0x003D003C00390038ULL,
+};
+
+// high coef load permute ids (len = 2)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L02_HI_LOAD_ID_VALS[32] ALIGN(32) = {
+//      2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31,
+//     34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 54, 55, 58, 59, 62, 63,
+//   };
+static const __m512i NTT_L02_HI_LOAD_IDS = {
+  0x0007000600030002ULL, 0x000F000E000B000AULL, 0x0017001600130012ULL, 0x001F001E001B001AULL,
+  0x0027002600230022ULL, 0x002F002E002B002AULL, 0x0037003600330032ULL, 0x003F003E003B003AULL,
+};
+
+// low coef store permute ids (len = 2)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L02_LO_STORE_ID_VALS[32] ALIGN(32) = {
+//      0,  1, 32, 33,  2,  3, 34, 35,  4,  5, 36, 37,  6,  7, 38, 39,
+//      8,  9, 40, 41, 10, 11, 42, 43, 12, 13, 44, 45, 14, 15, 46, 47,
+//   };
+static const __m512i NTT_L02_LO_STORE_IDS = {
+  0x0021002000010000ULL, 0x0023002200030002ULL, 0x0025002400050004ULL, 0x0027002600070006ULL,
+  0x0029002800090008ULL, 0x002B002A000B000AULL, 0x002D002C000D000CULL, 0x002F002E000F000EULL,
+};
+
+// high coef store permute ids (len = 2)
+//
+// original values (which were zero-extended to u16s):
+//   static const uint8_t NTT_L02_HI_STORE_ID_VALS[32] ALIGN(32) = {
+//     16, 17, 48, 49, 18, 19, 50, 51, 20, 21, 52, 53, 22, 23, 54, 55,
+//     24, 25, 56, 57, 26, 27, 58, 59, 28, 29, 60, 61, 30, 31, 62, 63,
+//   };
+static const __m512i NTT_L02_HI_STORE_IDS = {
+  0x0031003000110010ULL, 0x0033003200130012ULL, 0x0035003400150014ULL, 0x0037003600170016ULL,
+  0x0039003800190018ULL, 0x003B003A001B001AULL, 0x003D003C001D001CULL, 0x003F003E001F001EULL,
+};
+
+// multiply 32 12-bit values in 16-bit lanes of 512-bit register `in` by
+// 32 12-bit values stored in 64-bit lanes of 512-bit registers Z0-Z3,
+// partially reduce the products (to the range [0, 2Q]), merge the
+// products into a single 512-bit register, finish the reduction mod Q,
+// and store the result in the output register `T`.
+#define NTT_MUL(t, in, z0, z1, z2, z3) do { \
+  /* convert 32 12-bit values in register `hi` into 4 registers of eight u64s */ \
+  /* multiply each by zetas in z0-z3, then store the product in t0-t3 */ \
+  __m512i t0 = _mm512_mul_epu32(z0, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(in))), \
+          t1 = _mm512_mul_epu32(z1, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(_mm512_maskz_permutexvar_epi64(3, NTT_MUL_T1_IDS, in)))), \
+          t2 = _mm512_mul_epu32(z2, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(_mm512_maskz_permutexvar_epi64(3, NTT_MUL_T2_IDS, in)))), \
+          t3 = _mm512_mul_epu32(z3, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(_mm512_maskz_permutexvar_epi64(3, NTT_MUL_T3_IDS, in)))); \
+  \
+  /* t %= 2Q: partial barrett reduction into range [0, 2Q] */ \
+  t0 = _mm512_sub_epi64(t0, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t0, NTT_MM), 39))); \
+  t1 = _mm512_sub_epi64(t1, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t1, NTT_MM), 39))); \
+  t2 = _mm512_sub_epi64(t2, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t2, NTT_MM), 39))); \
+  t3 = _mm512_sub_epi64(t3, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t3, NTT_MM), 39))); \
+  \
+  /* permute 32 partially-reduced 13-bit values stored in 64-bit lanes of */ \
+  /* registers `t0-t3` into 32 16-bit lanes of register `t` */ \
+  const __m512i t_lo = _mm512_maskz_permutex2var_epi16(0x0000ffff, t0, NTT_T_JOIN_IDS, t1), \
+                t_hi = _mm512_maskz_permutex2var_epi16(0xffff0000, t2, NTT_T_JOIN_IDS, t3); \
+  t = _mm512_or_si512(t_lo, t_hi); /* t = t_lo | t_hi */ \
+  \
+  /* t %= Q: final reduction */ \
+  t = _mm512_mask_sub_epi16(t, _mm512_cmpge_epu16_mask(t, Q16), t, Q16); \
+} while (0)
+
+/**
+ * Compute in-place number-theoretic transform (NTT) of polynomial `p`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[in,out] p Polynomial.
+ */
+static inline void poly_ntt_avx512(poly_t * const p) {
+  // load poly coefs (8 registers, 32 coefs apiece)
+  __m512i cs[8] = {
+    _mm512_loadu_epi16(p->cs),
+    _mm512_loadu_epi16(p->cs + 32),
+    _mm512_loadu_epi16(p->cs + 64),
+    _mm512_loadu_epi16(p->cs + 96),
+    _mm512_loadu_epi16(p->cs + 128),
+    _mm512_loadu_epi16(p->cs + 160),
+    _mm512_loadu_epi16(p->cs + 192),
+    _mm512_loadu_epi16(p->cs + 224),
+  };
+
+  // len = 128
+  {
+    // load zeta
+    const __m512i z = _mm512_set1_epi64(NTT_LUT[1]);
+
+    // adjust coefs in groups of 64 (32 high, 32 low)
+    for (size_t j = 0; j < 4; j++) {
+      // calculate register offsets
+      const size_t hi_id = j + 4,
+                   lo_id = j + 0;
+
+      // load hi/lo coefs
+      __m512i hi = cs[hi_id],
+              lo = cs[lo_id];
+
+      // t = (hi * z) % Q
+      __m512i t = _mm512_setzero_si512();
+      NTT_MUL(t, hi, z, z, z, z);
+
+      // adjust coefs (note: order matters; adjust `hi` first)
+      hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
+      lo = _mm512_add_epi16(lo, t); // lo += t
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
+      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
+
+      // store coefs
+      cs[hi_id] = hi;
+      cs[lo_id] = lo;
+    }
+  }
+
+  // len = 64
+  for (size_t i = 0; i < 2; i++) {
+    // load zeta
+    const __m512i z = _mm512_set1_epi64(NTT_LUT[2 + i]);
+
+    // adjust coefs in groups of 64 (32 high, 32 low)
+    for (size_t j = 0; j < 2; j++) {
+      // calculate register offsets
+      const size_t hi_id = 4*i + j + 2,
+                   lo_id = 4*i + j + 0;
+
+      // load hi/lo coefs
+      __m512i hi = cs[hi_id],
+              lo = cs[lo_id];
+
+      // t = (hi * z) % Q
+      __m512i t = _mm512_setzero_si512();
+      NTT_MUL(t, hi, z, z, z, z);
+
+      // adjust coefs (note: order matters; adjust `hi` first)
+      hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
+      lo = _mm512_add_epi16(lo, t); // lo += t
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
+      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
+
+      // store coefs
+      cs[hi_id] = hi;
+      cs[lo_id] = lo;
+    }
+  }
+
+  // len = 32
+  for (size_t i = 0; i < 4; i++) {
+    // load zeta
+    const __m512i z = _mm512_set1_epi64(NTT_LUT[4 + i]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i hi = cs[hi_id],
+            lo = cs[lo_id];
+
+    // t = (hi * z) % Q
+    __m512i t = _mm512_setzero_si512();
+    NTT_MUL(t, hi, z, z, z, z);
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
+    lo = _mm512_add_epi16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
+
+    // store coefs
+    cs[hi_id] = hi;
+    cs[lo_id] = lo;
+  }
+
+  // len = 16
+  for (size_t i = 0; i < 4; i++) {
+    // load zetas
+    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[8 + 2*i]),
+                  z1 = _mm512_set1_epi64(NTT_LUT[8 + 2*i + 1]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_LO_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_HI_IDS, cs[hi_id]);
+
+    // t = (hi * z) % Q
+    __m512i t = _mm512_setzero_si512();
+    NTT_MUL(t, hi, z0, z0, z1, z1);
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
+    lo = _mm512_add_epi16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L16_HI_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L16_LO_IDS, hi);
+  }
+
+  // len = 8
+  for (size_t i = 0; i < 4; i++) {
+    // load zetas
+    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 0]),
+                  z1 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 1]),
+                  z2 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 2]),
+                  z3 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 3]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_LO_LOAD_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_HI_LOAD_IDS, cs[hi_id]);
+
+    // t = (hi * z) % Q
+    __m512i t = _mm512_setzero_si512();
+    NTT_MUL(t, hi, z0, z1, z2, z3);
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
+    lo = _mm512_add_epi16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L08_HI_STORE_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L08_LO_STORE_IDS, hi);
+  }
+
+  // len = 4
+  for (size_t i = 0; i < 4; i++) {
+    // get pointer to next 8 zetas
+    const uint16_t *zs = NTT_LUT + 32 + 8*i;
+
+    // load zetas into 64-bit lanes of 4 512-bit registers
+    const __m512i z0 = _mm512_setr_epi64(zs[0], zs[0], zs[0], zs[0], zs[1], zs[1], zs[1], zs[1]),
+                  z1 = _mm512_setr_epi64(zs[2], zs[2], zs[2], zs[2], zs[3], zs[3], zs[3], zs[3]),
+                  z2 = _mm512_setr_epi64(zs[4], zs[4], zs[4], zs[4], zs[5], zs[5], zs[5], zs[5]),
+                  z3 = _mm512_setr_epi64(zs[6], zs[6], zs[6], zs[6], zs[7], zs[7], zs[7], zs[7]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_LO_LOAD_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_HI_LOAD_IDS, cs[hi_id]);
+
+    // t = (hi * z) % Q
+    __m512i t = _mm512_setzero_si512();
+    NTT_MUL(t, hi, z0, z1, z2, z3);
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
+    lo = _mm512_add_epi16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L04_HI_STORE_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L04_LO_STORE_IDS, hi);
+  }
+
+  // len = 2
+  for (size_t i = 0; i < 4; i++) {
+    // get pointer to next 16 zetas
+    const uint16_t *zs = NTT_LUT + 64 + 16*i;
+
+    // load zetas into 64-bit lanes of 4 512-bit registers
+    const __m512i z0 = _mm512_setr_epi64(zs[0], zs[0], zs[1], zs[1], zs[2], zs[2], zs[3], zs[3]),
+                  z1 = _mm512_setr_epi64(zs[4], zs[4], zs[5], zs[5], zs[6], zs[6], zs[7], zs[7]),
+                  z2 = _mm512_setr_epi64(zs[8], zs[8], zs[9], zs[9], zs[10], zs[10], zs[11], zs[11]),
+                  z3 = _mm512_setr_epi64(zs[12], zs[12], zs[13], zs[13], zs[14], zs[14], zs[15], zs[15]);
+
+    // calculate register offsets
+    const size_t lo_id = 2*i + 0,
+                 hi_id = 2*i + 1;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_LO_LOAD_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_HI_LOAD_IDS, cs[hi_id]);
+
+    // t = (hi * z) % Q
+    __m512i t = _mm512_setzero_si512();
+    NTT_MUL(t, hi, z0, z1, z2, z3);
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
+    lo = _mm512_add_epi16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L02_HI_STORE_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L02_LO_STORE_IDS, hi);
+  }
+
+  // store coefs to poly
+  for (size_t i = 0; i < 8; i++) {
+    _mm512_storeu_epi16(p->cs + 32*i, cs[i]);
+  }
+}
+
+/**
+ * Compute in-place inverse number-theoretic transform (NTT) of
+ * polynomial `p`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[in,out] p Polynomial.
+ */
+static inline void poly_inv_ntt_avx512(poly_t * const p) {
+  // inverse of q in 8 64-bit lanes
+  static const __m512i Q_INV = { 3303, 3303, 3303, 3303, 3303, 3303, 3303, 3303 };
+
+  // load poly coefs (8 registers, 32 coefs apiece)
+  __m512i cs[8] = {
+    _mm512_loadu_epi16(p->cs),
+    _mm512_loadu_epi16(p->cs + 32),
+    _mm512_loadu_epi16(p->cs + 64),
+    _mm512_loadu_epi16(p->cs + 96),
+    _mm512_loadu_epi16(p->cs + 128),
+    _mm512_loadu_epi16(p->cs + 160),
+    _mm512_loadu_epi16(p->cs + 192),
+    _mm512_loadu_epi16(p->cs + 224),
+  };
+
+  // len = 2
+  for (size_t i = 0; i < 4; i++) {
+    const uint16_t *zs = NTT_LUT + 128 - 16*(i + 1);
+
+    // load zetas
+    const __m512i z0 = _mm512_setr_epi64(zs[15], zs[15], zs[14], zs[14], zs[13], zs[13], zs[12], zs[12]),
+                  z1 = _mm512_setr_epi64(zs[11], zs[11], zs[10], zs[10], zs[9], zs[9], zs[8], zs[8]),
+                  z2 = _mm512_setr_epi64(zs[7], zs[7], zs[6], zs[6], zs[5], zs[5], zs[4], zs[4]),
+                  z3 = _mm512_setr_epi64(zs[3], zs[3], zs[2], zs[2], zs[1], zs[1], zs[0], zs[0]);
+
+    // calculate register offsets
+    const size_t lo_id = 2*i + 0,
+                 hi_id = 2*i + 1;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_LO_LOAD_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_HI_LOAD_IDS, cs[hi_id]),
+            t = lo;
+
+    // adjust coefs
+    lo = _mm512_add_epi16(t, hi); // lo = t + hi
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
+    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
+    NTT_MUL(hi, hi, z0, z1, z2, z3); // hi = (zeta * hi) % Q
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L02_HI_STORE_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L02_LO_STORE_IDS, hi);
+  }
+
+  // len = 4
+  for (size_t i = 0; i < 4; i++) {
+    const uint16_t *zs = NTT_LUT + 64 - 8*(i + 1);
+
+    // load zetas
+    const __m512i z0 = _mm512_setr_epi64(zs[7], zs[7], zs[7], zs[7], zs[6], zs[6], zs[6], zs[6]),
+                  z1 = _mm512_setr_epi64(zs[5], zs[5], zs[5], zs[5], zs[4], zs[4], zs[4], zs[4]),
+                  z2 = _mm512_setr_epi64(zs[3], zs[3], zs[3], zs[3], zs[2], zs[2], zs[2], zs[2]),
+                  z3 = _mm512_setr_epi64(zs[1], zs[1], zs[1], zs[1], zs[0], zs[0], zs[0], zs[0]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_LO_LOAD_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_HI_LOAD_IDS, cs[hi_id]),
+            t = lo;
+
+    // adjust coefs
+    lo = _mm512_add_epi16(t, hi); // lo = t + hi
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
+    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
+    NTT_MUL(hi, hi, z0, z1, z2, z3); // hi = (zeta * hi) % Q
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L04_HI_STORE_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L04_LO_STORE_IDS, hi);
+  }
+
+  // len = 8
+  for (size_t i = 0; i < 4; i++) {
+    // load zetas
+    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 3]),
+                  z1 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 2]),
+                  z2 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 1]),
+                  z3 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 0]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_LO_LOAD_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_HI_LOAD_IDS, cs[hi_id]),
+            t = lo;
+
+    // adjust coefs
+    lo = _mm512_add_epi16(t, hi); // lo = t + hi
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
+    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
+    NTT_MUL(hi, hi, z0, z1, z2, z3); // hi = (zeta * hi) % Q
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L08_HI_STORE_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L08_LO_STORE_IDS, hi);
+  }
+
+  // len = 16
+  for (size_t i = 0; i < 4; i++) {
+    // load zetas
+    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[16 - 2*(i + 1) + 1]),
+                  z1 = _mm512_set1_epi64(NTT_LUT[16 - 2*(i + 1) + 0]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_LO_IDS, cs[hi_id]),
+            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_HI_IDS, cs[hi_id]),
+            t = lo;
+
+    // adjust coefs
+    lo = _mm512_add_epi16(t, hi); // lo = t + hi
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
+    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
+    NTT_MUL(hi, hi, z0, z0, z1, z1); // hi = (zeta * hi) % Q
+
+    // store coefs
+    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L16_HI_IDS, hi);
+    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L16_LO_IDS, hi);
+  }
+
+  // len = 32
+  for (size_t i = 0; i < 4; i++) {
+    // load zeta
+    const __m512i z = _mm512_set1_epi64(NTT_LUT[8 - (i + 1)]);
+
+    // calculate register offsets
+    const size_t hi_id = 2*i + 1,
+                 lo_id = 2*i + 0;
+
+    // load hi/lo coefs
+    __m512i lo = cs[lo_id],
+            hi = cs[hi_id],
+            t = lo;
+
+    // adjust coefs
+    lo = _mm512_add_epi16(t, hi); // lo = t + hi
+    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
+    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
+    NTT_MUL(hi, hi, z, z, z, z); // hi = (zeta * hi) % Q
+
+    // store coefs
+    cs[hi_id] = hi;
+    cs[lo_id] = lo;
+  }
+
+  // len = 64
+  for (size_t i = 0; i < 2; i++) {
+    // load zeta
+    const __m512i z = _mm512_set1_epi64(NTT_LUT[4 - (i + 1)]);
+
+    // adjust coefs in groups of 64 (32 high, 32 low)
+    for (size_t j = 0; j < 2; j++) {
+      // calculate register offsets
+      const size_t hi_id = 4*i + j + 2,
+                   lo_id = 4*i + j + 0;
+
+      // load hi/lo coefs
+      __m512i lo = cs[lo_id],
+              hi = cs[hi_id],
+              t = lo;
+
+      // adjust coefs
+      lo = _mm512_add_epi16(t, hi); // lo = t + hi
+      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
+      hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
+      NTT_MUL(hi, hi, z, z, z, z); // hi = (zeta * hi) % Q
+
+      // store coefs
+      cs[hi_id] = hi;
+      cs[lo_id] = lo;
+    }
+  }
+
+  // len = 128
+  {
+    // load zeta
+    const __m512i z = _mm512_set1_epi64(NTT_LUT[1]);
+
+    // adjust coefs in groups of 64 (32 high, 32 low)
+    for (size_t j = 0; j < 4; j++) {
+      // calculate register offsets
+      const size_t hi_id = j + 4,
+                   lo_id = j + 0;
+
+      // load hi/lo coefs
+      __m512i lo = cs[lo_id],
+              hi = cs[hi_id],
+              t = lo;
+
+      // adjust coefs
+      lo = _mm512_add_epi16(t, hi); // lo = t + hi
+      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
+      hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
+      NTT_MUL(hi, hi, z, z, z, z); // hi = (zeta * hi) % Q
+
+      // store coefs
+      cs[hi_id] = hi;
+      cs[lo_id] = lo;
+    }
+  }
+
+  // multiply coefs by inverse of Q
+  for (size_t i = 0; i < 8; i++) {
+    NTT_MUL(cs[i], cs[i], Q_INV, Q_INV, Q_INV, Q_INV);
+  }
+
+  // store coefs to poly
+  for (size_t i = 0; i < 8; i++) {
+    _mm512_storeu_epi16(p->cs + 32*i, cs[i]);
+  }
+}
+
+/**
+ * Add polynomial `a` to polynomial `b` component-wise, and store the
+ * sum in `a`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ */
+static inline void poly_add_avx512(poly_t * const restrict a, const poly_t * const restrict b) {
+  for (size_t i = 0; i < 8; i++) {
+    // load operands
+    const __m512i bb = _mm512_loadu_epi16(b->cs + 32*i);
+    __m512i aa = _mm512_loadu_epi16(a->cs + 32*i);
+
+    aa = _mm512_add_epi16(aa, bb); // a += b
+
+    // a -= (a >= Q) ? Q : 0
+    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
+
+    // store
+    _mm512_storeu_epi16(a->cs + 32*i, aa);
+  }
+}
+
+/**
+ * Add polynomial `a` to polynomials `b` and `c` component-wise, and
+ * store the sum in `a`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ * @param[in] c Polynomial.
+ */
+static inline void poly_add2_avx512(poly_t * const restrict a, const poly_t * const restrict b, const poly_t * const restrict c) {
+  // load operands
+  for (size_t i = 0; i < 8; i++) {
+    const __m512i bb = _mm512_loadu_epi16(b->cs + 32*i),
+                  cc = _mm512_loadu_epi16(c->cs + 32*i);
+
+    // a += b
+    __m512i aa = _mm512_add_epi16(_mm512_loadu_epi16(a->cs + 32*i), bb);
+
+    // a -= (a >= Q) ? Q : 0
+    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
+
+    // a += c
+    aa = _mm512_add_epi16(aa, cc);
+
+    // a -= (a >= Q) ? Q : 0
+    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
+
+    // store
+    _mm512_storeu_epi16(a->cs + 32*i, aa);
+  }
+}
+
+/**
+ * Subtract polynomial `b` from polynomial `a` component-wise, and store the
+ * result in `a`.
+ *
+ * @note AVX-512 implementation.
+ *
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ */
+static inline void poly_sub_avx512(poly_t * const restrict a, const poly_t * const restrict b) {
+  for (size_t i = 0; i < 8; i++) {
+    // load operands
+    __m512i aa = _mm512_loadu_epi16(a->cs + 32*i),
+            bb = _mm512_loadu_epi16(b->cs + 32*i);
+
+    // a += (Q - b)
+    aa = _mm512_add_epi16(aa, _mm512_sub_epi16(Q16, bb));
+
+    // a -= (a >= Q) ? Q : 0
+    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
+
+    // store
+    _mm512_storeu_epi16((void*) (a->cs + 32*i), aa);
+  }
+}
+
+/**
+ * Multiply `a` and `b` and store the product in `c`.
+ *
+ * @note `a` and `b` are assumed to be in the NTT domain.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] c Product polynomial, in the NTT domain.
+ * @param[in] a Input polynomial, in the NTT domain.
+ * @param[in] b Input polynomial, in the NTT domain.
+ */
+static inline void poly_mul_avx512(poly_t * const restrict c, const poly_t * const restrict a, const poly_t * const restrict b) {
+  // Q in 16 u16 lanes
+  static const __m256i Q16 = {
+    0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL,
+  };
+
+  // permute ids
+  // - EVEN_IDS: low/high u64x8 registers -> even lanes register
+  // - ODD_IDS: low/high u64x8 registers -> odd lanes register
+  static const __m512i EVEN_IDS = { 0, 2, 4, 6, 8, 10, 12, 14 }, // even lanes
+                       ODD_IDS = { 1, 3, 5, 7, 9, 11, 13, 15 }; // odd lanes
+
+  // permute even/odd u64x8 registers into combined output register
+  //
+  // original values:
+  //   static const uint16_t C_ID_VALS[32] ALIGN(64) = {
+  //      0, 32,  4, 36,  8, 40, 12, 44, 16, 48, 20, 52, 24, 56, 28, 60,
+  //      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
+  //   };
+  static const __m512i C_IDS = {
+    0x0024000400200000ULL, 0x002C000C00280008ULL, 0x0034001400300010ULL, 0x003C001C00380018ULL,
+    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // Loop over coefficients of `a` and `b`, multiply them in groups of
+  // 16, then write the results to output polynomial `c`
+  //
+  // In each iteration, we load:
+  //
+  // - 8 zeta values of zeta from the `MUL_LUT` lookup table into a zetas
+  //   register `z`.
+  // - 8 coefficients of `a` into a "low" register `a0`.
+  // - the next 8 coefficients of `a` into a "high" register `a1`.
+  // - 8 coefficients of `b` into a "low" register `b0`.
+  // - the next 8 coefficients of `b` into a "high" register `b1`.
+  //
+  // Next we convert the loaded values of zeta and the coefficients of
+  // `a` and `b` from 16-bit to 64-bit.
+  //
+  // Then we use the permutation indices in the `EVEN_IDS` and `ODD_IDS`
+  // registers to permute from the "low" and "high" registers above into
+  // the following "even" and "odd" registers:
+  //
+  // - ae: even lanes from a0 and a1
+  // - ao: odd lanes from a0 and a1
+  // - be: even lanes from b0 and b1
+  // - bo: odd lanes from b0 and b1
+  //
+  // Graphically the permutation looks like this:
+  //
+  //   // low/high registers of `a`
+  //   a0 = [v0, v1, v2, v3, v4, v5, v6, v7]
+  //   a1 = [v8, v9, v10, v11, v12, v13, v14, v15]
+  //
+  //   // even/odd registers of `a`
+  //   ae = [v0, v2, v4, v6, v8, v10, v12, v14]
+  //   ao = [v1, v3, v5, v7, v9, v11, v13, v15]
+  //
+  // Next we calculate the even and odd results, reduced mod Q, like so:
+  //
+  //   ce = ((ae * be) + (ao * bo * z)) % Q
+  //   co = ((ae * bo) + (ao * be)) % Q
+  //
+  // Note: the reduction mod Q is done using constant-time Barrett
+  // reduction.  The numerator for the Barrett reduction multiplier is
+  // 1<<39 because we are using signed 64-bit multiplications; anything
+  // less than 1<<37 is too small, and anything greater than 1<<39 will
+  // overflow into the sign bit.
+  //
+  // Finally, we permute the even and odd results back into "low" and
+  // "high" groups, convert the values from 64-bit to 16-bit (after
+  // reduction the values are all 12-bit, so this conversion is safe),
+  // and write the coefficients to the output polynomial `c`.
+  for (size_t i = 0; i < 16; i++) {
+    // load 8 zetas, convert from u16 to i64
+    const __m512i z = _mm512_cvtepu16_epi64(_mm_load_epi32(MUL_LUT + (8 * i)));
+
+    // load low a (a0) and high a (a1), low b (b0) and high b (b1),
+    // convert from u16x8 to u64x8, then permute lanes into the
+    // following registers:
+    // - ae: even lanes from a0 and a1
+    // - ao: odd lanes from a0 and a1
+    // - be: even lanes from b0 and b1
+    // - bo: odd lanes from b0 and b1
+    const __m512i a0 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(a->cs + (16 * i))),
+                  a1 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(a->cs + (16 * i + 8))),
+                  b0 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(b->cs + (16 * i))),
+                  b1 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(b->cs + (16 * i + 8))),
+                  ae = _mm512_permutex2var_epi64(a0, EVEN_IDS, a1),
+                  ao = _mm512_permutex2var_epi64(a0, ODD_IDS, a1),
+                  be = _mm512_permutex2var_epi64(b0, EVEN_IDS, b1),
+                  bo = _mm512_permutex2var_epi64(b0, ODD_IDS, b1);
+
+    // even results: ce = ((ae * be) + (ao * bo * z)) % 2Q (partial reduction)
+    __m512i ce = _mm512_add_epi64(_mm512_mul_epu32(ae, be), _mm512_mul_epu32(ao, _mm512_mul_epu32(bo, z)));
+    ce = _mm512_sub_epi64(ce, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(ce, NTT_MM), 39)));
+
+    // odd results: co = ((ae * bo) + (ao * be)) % 2Q (partial reduction)
+    __m512i co = _mm512_add_epi64(_mm512_mul_epu32(ae, bo), _mm512_mul_epu32(ao, be));
+    co = _mm512_sub_epi64(co, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(co, NTT_MM), 39)));
+
+    // combine, reduce, store
+    __m256i cs = _mm512_castsi512_si256(_mm512_maskz_permutex2var_epi16(0xffff, ce, C_IDS, co));
+    cs = _mm256_mask_sub_epi16(cs, _mm256_cmpge_epu16_mask(cs, Q16), cs, Q16); // cs %= Q
+    _mm256_storeu_epi16(c->cs + (16 * i), cs); // store
+  }
+}
+
+/**
+ * Pack 12-bit coefficients of polynomial `p` and serialize them into
+ * 384 bytes of the output buffer `out`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out Output buffer (384 bytes).
+ * @param[in] Input polynomial.
+ */
+static inline void poly_encode_avx512(uint8_t out[static 384], const poly_t * const a) {
+  // low value indices
+  //
+  // original values:
+  //   static const uint16_t LO_ID_VALS[32] ALIGN(64) = {
+  //      0,  1,  2,  4,  5,  6,  8,  9, 10, 12, 13, 14, 16, 17, 18, 20,
+  //     21, 22, 24, 25, 26, 28, 29, 30,  0,  0,  0,  0,  0,  0,  0,  0,
+  //   };
+  static const __m512i LO_IDS = {
+    0x0004000200010000ULL, 0x0009000800060005ULL, 0x000E000D000C000AULL, 0x0014001200110010ULL,
+    0x0019001800160015ULL, 0x001E001D001C001AULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // low value right shift value
+  //
+  // original values:
+  //   static const uint16_t LO_SHIFT_VALS[32] ALIGN(64) = {
+  //      0,  4,  8,  0,  4,  8,  0,  4,  8,  0,  4,  8,  0,  4,  8,  0,
+  //      4,  8,  0,  4,  8,  0,  4,  8,  0,  0,  0,  0,  0,  0,  0,  0,
+  //   };
+  static const __m512i LO_SHIFTS = {
+    0x0000000800040000ULL, 0x0004000000080004ULL, 0x0008000400000008ULL, 0x0000000800040000ULL,
+    0x0004000000080004ULL, 0x0008000400000008ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // high value indices
+  //
+  // original values:
+  //   static const uint16_t HI_ID_VALS[32] ALIGN(64) = {
+  //      1,  2,  3,  5,  6,  7,  9, 10, 11, 13, 14, 15, 17, 18, 19, 21,
+  //     22, 23, 25, 26, 27, 29, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,
+  //   };
+  static const __m512i HI_IDS = {
+    0x0005000300020001ULL, 0x000A000900070006ULL, 0x000F000E000D000BULL, 0x0015001300120011ULL,
+    0x001A001900170016ULL, 0x001F001E001D001BULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // high value left shift value
+  //
+  // original values:
+  //   static const uint16_t HI_SHIFT_VALS[32] ALIGN(64) = {
+  //     12,  8,  4, 12,  8,  4, 12,  8,  4, 12,  8,  4, 12,  8,  4, 12,
+  //      8,  4, 12,  8,  4, 12,  8,  4,  0,  0,  0,  0,  0,  0,  0,  0,
+  //   };
+  static const __m512i HI_SHIFTS = {
+    0x000C00040008000CULL, 0x0008000C00040008ULL, 0x00040008000C0004ULL, 0x000C00040008000CULL,
+    0x0008000C00040008ULL, 0x00040008000C0004ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  for (size_t i = 0; i < 8; i++) {
+    // load 32 values
+    const __m512i cs = _mm512_loadu_epi16(a->cs + 32*i);
+
+    // permute into lo/hi
+    const __m512i lo = _mm512_srlv_epi16(_mm512_permutexvar_epi16(LO_IDS, cs), LO_SHIFTS),
+                  hi = _mm512_sllv_epi16(_mm512_permutexvar_epi16(HI_IDS, cs), HI_SHIFTS);
+
+    // pack as 48 bytes and store
+    _mm512_mask_compressstoreu_epi16(out + 48*i, 0xffffff, _mm512_or_si512(lo, hi));
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 11 bits and then serialize
+ * them as 352 bytes in output buffer `out`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out Output buffer (352 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_11bit_avx512(uint8_t out[static 352], const poly_t * const p) {
+  // low permute ids
+  // orig: lo_id_vals[16] ALIGN(32) = { 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 0, 0, 0, 0, 0 },
+  static const __m256i LO_IDS = {
+    0x0002000100000000ULL, 0x0005000400030002ULL, 0x0000000700060005ULL, 0x0000000000000000ULL,
+  };
+
+  // low right shift amounts
+  // orig: lo_shift_vals[16] ALIGN(32) = { 0, 8, 5, 2, 10, 7, 4, 1, 9, 6, 3, 0, 0, 0, 0, 0 },
+  static const __m256i LO_SHIFTS = {
+    0x0002000500080000ULL, 0x000100040007000AULL, 0x0000000300060009ULL, 0x0000000000000000ULL,
+  };
+
+  // low masks
+  // orig: lo_mask_vals[16] ALIGN(32) = { 0xff, 7, 0x3f, 0xff, 1, 0xf, 0x7f, 0xff, 3, 0x1f, 0xff, 0, 0, 0, 0, 0 },
+  static const __m256i LO_MASKS = {
+    0x00FF003F000700FFULL, 0x00FF007F000F0001ULL, 0x000000FF001F0003ULL, 0x0000000000000000ULL,
+  };
+
+  // high permute ids
+  // orig: hi_id_vals[16] ALIGN(32) = { 0, 1, 2, 0, 3, 4, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0 },
+  static const __m256i HI_IDS = {
+    0x0000000200010000ULL, 0x0000000500040003ULL, 0x0000000000070006ULL, 0x0000000000000000ULL,
+  };
+
+  // high masks
+  // orig: hi_mask_vals[16] ALIGN(32) = { 0, 0x1f, 3, 0, 0x7f, 0xf, 1, 0, 0x3f, 7, 0, 0, 0, 0, 0, 0 },
+  static const __m256i HI_MASKS = {
+    0x00000003001F0000ULL, 0x00000001000F007FULL, 0x000000000007003FULL, 0x0000000000000000ULL,
+  };
+
+  // high left shift amounts
+  // orig: hi_shift_vals[16] ALIGN(32) = { 0, 3, 6, 0, 1, 4, 7, 0, 2, 5, 0, 0, 0, 0, 0, 0 };
+  static const __m256i HI_SHIFTS = {
+    0x0000000600030000ULL, 0x0000000700040001ULL, 0x0000000000050002ULL, 0x0000000000000000ULL,
+  };
+
+  // 16 ones in u16 lanes of 256-bit register
+  static const __m256i ONES = {
+    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
+  };
+
+  // multiplier: (1<<44)/Q in 64-bit lanes of 512-bit register
+  static const __m512i M = {
+    5284525696, 5284525696, 5284525696, 5284525696,
+    5284525696, 5284525696, 5284525696, 5284525696,
+  };
+
+  // process batches of 8 coefficients:
+  // 1. convert to u64
+  // 2. convert to 12-bit values by multiplying by multiplier and shifting right
+  // 3. round to 11-bit values
+  // 4. convert to 8 u16s in 256-bit register
+  // 5. permute, shift, and mask into 11 16-bit low part
+  // 6. permute, mask, and shift into 11 16-bit high part
+  // 7. combine low and high parts, convert to 11 8-bit bytes
+  // 8. write to output buffer
+  for (size_t i = 0; i < 32; i++) {
+    const __m256i vs = _mm256_castsi128_si256(_mm512_cvtepi64_epi16(_mm512_srli_epi64(_mm512_mullo_epi64(_mm512_cvtepi16_epi64(_mm_loadu_epi16(p->cs + 8*i)), M), 32))),
+                  rs = _mm256_add_epi16(_mm256_srli_epi16(vs, 1), _mm256_and_si256(vs, ONES)),
+                  lo = _mm256_and_si256(_mm256_srlv_epi16(_mm256_permutexvar_epi16(LO_IDS, rs), LO_SHIFTS), LO_MASKS),
+                  hi = _mm256_sllv_epi16(_mm256_and_si256(_mm256_permutexvar_epi16(HI_IDS, rs), HI_MASKS), HI_SHIFTS);
+    _mm_mask_storeu_epi8(out + 11 * i, 0x7ff, _mm256_cvtepi16_epi8(_mm256_or_si256(lo, hi)));
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 10 bits and then serialize
+ * them as 320 bytes in output buffer `out`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out Output buffer (320 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_10bit_avx512(uint8_t out[static 320], const poly_t * const p) {
+  // vs low and high join indices
+  // (lo/hi ids combined into single set to save a register)
+  //
+  // - lo: extract first 16 bits of high 32 bits of multiply;
+  //   combined shift, truncate, and join
+  // - hi: extract first 16 bits of high 32 bits of multiply;
+  //   combined shift, truncate, and join
+  //
+  // original value:
+  //   static const uint16_t vs_join_id_vals[32] ALIGN(64) = {
+  //      2,  6, 10, 14, 18, 22, 26, 30,
+  //     34, 38, 42, 46, 50, 54, 58, 62,
+  //      2,  6, 10, 14, 18, 22, 26, 30,
+  //     34, 38, 42, 46, 50, 54, 58, 62,
+  //   };
+  static const __m512i VS_JOIN_IDS = {
+    0x000E000A00060002ULL, 0x001E001A00160012ULL, 0x002E002A00260022ULL, 0x003E003A00360032ULL,
+    0x000E000A00060002ULL, 0x001E001A00160012ULL, 0x002E002A00260022ULL, 0x003E003A00360032ULL,
+  };
+
+  // u16 lane index for low part of byte
+  //
+  // original value:
+  //   static const uint16_t lo_id_vals[32] ALIGN(64) = {
+  //      0 + 0,  0 + 0,  0 + 1,  0 + 2,  0 + 3,
+  //      4 + 0,  4 + 0,  4 + 1,  4 + 2,  4 + 3,
+  //      8 + 0,  8 + 0,  8 + 1,  8 + 2,  8 + 3,
+  //     12 + 0, 12 + 0, 12 + 1, 12 + 2, 12 + 3,
+  //     16 + 0, 16 + 0, 16 + 1, 16 + 2, 16 + 3,
+  //     20 + 0, 20 + 0, 20 + 1, 20 + 2, 20 + 3,
+  //     0, 0,
+  //   };
+  static const __m512i LO_IDS = {
+    0x0002000100000000ULL, 0x0005000400040003ULL, 0x0008000800070006ULL, 0x000C000B000A0009ULL,
+    0x000F000E000D000CULL, 0x0012001100100010ULL, 0x0015001400140013ULL, 0x0000000000170016ULL,
+  };
+
+  // right shift amount for low part of byte
+  //
+  // original value:
+  //   static const uint16_t lo_shift_vals[32] ALIGN(64) = {
+  //     0, 8, 6, 4, 2,
+  //     0, 8, 6, 4, 2,
+  //     0, 8, 6, 4, 2,
+  //     0, 8, 6, 4, 2,
+  //     0, 8, 6, 4, 2,
+  //     0, 8, 6, 4, 2,
+  //     0, 0,
+  //   };
+  static const __m512i LO_SHIFTS = {
+    0x0004000600080000ULL, 0x0006000800000002ULL, 0x0008000000020004ULL, 0x0000000200040006ULL,
+    0x0002000400060008ULL, 0x0004000600080000ULL, 0x0006000800000002ULL, 0x0000000000020004ULL,
+  };
+
+  // mask for low part of byte
+  //
+  // original value:
+  //   static const uint16_t lo_mask_vals[32] ALIGN(64) = {
+  //     0xff, 3, 0xf, 0x3f, 0xff,
+  //     0xff, 3, 0xf, 0x3f, 0xff,
+  //     0xff, 3, 0xf, 0x3f, 0xff,
+  //     0xff, 3, 0xf, 0x3f, 0xff,
+  //     0xff, 3, 0xf, 0x3f, 0xff,
+  //     0xff, 3, 0xf, 0x3f, 0xff,
+  //     0, 0,
+  //   };
+  static const __m512i LO_MASKS = {
+    0x003F000F000300FFULL, 0x000F000300FF00FFULL, 0x000300FF00FF003FULL, 0x00FF00FF003F000FULL,
+    0x00FF003F000F0003ULL, 0x003F000F000300FFULL, 0x000F000300FF00FFULL, 0x0000000000FF003FULL,
+  };
+
+  // u16 lane index for high part of byte
+  //
+  // original value:
+  //   static const uint16_t hi_id_vals[32] ALIGN(64) = {
+  //     0,  0 + 1,  0 + 2,  0 + 3, 0,
+  //     0,  4 + 1,  4 + 2,  4 + 3, 0,
+  //     0,  8 + 1,  8 + 2,  8 + 3, 0,
+  //     0, 12 + 1, 12 + 2, 12 + 3, 0,
+  //     0, 16 + 1, 16 + 2, 16 + 3, 0,
+  //     0, 20 + 1, 20 + 2, 20 + 3, 0,
+  //     0, 0,
+  //   };
+  static const __m512i HI_IDS = {
+    0x0003000200010000ULL, 0x0006000500000000ULL, 0x0009000000000007ULL, 0x00000000000B000AULL,
+    0x0000000F000E000DULL, 0x0013001200110000ULL, 0x0016001500000000ULL, 0x0000000000000017ULL,
+  };
+
+  // mask for high part of byte
+  //
+  // original value:
+  //   static const uint16_t hi_mask_vals[32] ALIGN(64) = {
+  //     0, 0x3f, 0xf, 3, 0,
+  //     0, 0x3f, 0xf, 3, 0,
+  //     0, 0x3f, 0xf, 3, 0,
+  //     0, 0x3f, 0xf, 3, 0,
+  //     0, 0x3f, 0xf, 3, 0,
+  //     0, 0x3f, 0xf, 3, 0,
+  //     0, 0,
+  //   };
+  static const __m512i HI_MASKS = {
+    0x0003000F003F0000ULL, 0x000F003F00000000ULL, 0x003F000000000003ULL, 0x000000000003000FULL,
+    0x00000003000F003FULL, 0x0003000F003F0000ULL, 0x000F003F00000000ULL, 0x0000000000000003ULL,
+  };
+
+  // left shift amount for high part of byte
+  //
+  // original value:
+  //   static const uint16_t hi_shift_vals[32] ALIGN(64) = {
+  //     0, 2, 4, 6, 0,
+  //     0, 2, 4, 6, 0,
+  //     0, 2, 4, 6, 0,
+  //     0, 2, 4, 6, 0,
+  //     0, 2, 4, 6, 0,
+  //     0, 2, 4, 6, 0,
+  //     0, 0,
+  //   };
+  static const __m512i HI_SHIFTS = {
+    0x0006000400020000ULL, 0x0004000200000000ULL, 0x0002000000000006ULL, 0x0000000000060004ULL,
+    0x0000000600040002ULL, 0x0006000400020000ULL, 0x0004000200000000ULL, 0x0000000000000006ULL,
+  };
+
+  // permutation indices for `t1` to shift the last 8 coefficients to
+  // the lower 8 lanes.  represented as u64 lane indices for brevity.
+  static const __m512i T1_IDS = { 6, 7, 0, 0, 0, 0, 0, 0 };
+
+  // u8 permutation indices to combine two registers that contain output
+  // bytes in 16-bit lanes by storing the low half of the first 30 u16
+  // lanes from the first register in the first 30 u8 lanes of the
+  // output register and storing the low half of the first 10 u16 lanes
+  // from the second register in u8 lanes 31-40 of the output register
+  //
+  // original value:
+  //   static const uint8_t join_id_vals[64] ALIGN(64) = {
+  //     0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
+  //     32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 64, 66,
+  //     68, 70, 72, 74, 76, 78, 80, 82, 0, 0, 0, 0, 0, 0, 0, 0,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i JOIN_IDS = {
+    0x0E0C0A0806040200ULL, 0x1E1C1A1816141210ULL, 0x2E2C2A2826242220ULL, 0x42403A3836343230ULL,
+    0x52504E4C4A484644ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // multipler notes:
+  //
+  // the multiplier (1<<27)/Q = 40317 fails for 29 values:
+  //
+  //   >> def real_round(n); (n*1024.0/Q).round; end
+  //   => :real_round
+  //   >> def fake_round(n); v = (n*40317) >> 16; (v >> 1) + (v & 1); end
+  //   => :fake_round
+  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
+  //   => "395, 408, 1185, 1198, 1211, 1224, 1237, 1975, 1988, 2001, 2014, 2027, 2040, 2053, 2066, 2079, 2752, 2765, 2778, 2791, 2804, 2817, 2830, 2843, 2856, 2869, 2882, 2895, 2908"
+  //
+  // i also tried (1<<27)/Q+1 = 40318, but it still fails for 12 values:
+  //
+  //   >> def fake_round(n); v = (n*40318) >> 16; (v >> 1) + (v & 1); end
+  //   => :fake_round
+  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
+  //   => "421, 1250, 1263, 1276, 2092, 2105, 2118, 2921, 2934, 2947, 2960, 2973"
+  //
+  // other nearby multipliers have even larger failure rates.  the
+  // closest i've gotten is (1<<29)/Q+1 = 161271, which has one failure:
+  //
+  //   >> (1<<29)/Q+1
+  //   => 161271
+  //   >> def fake_round(n); v = (n*161271) >> 18; (v >> 1) + (v & 1); end
+  //   => :fake_round
+  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
+  //   => "1250"
+  //
+  // i finally settled on the following:
+  //
+  // 1. convert 4 batches of 8 u16s to u64s
+  // 2. multiply by (1<<43)/Q (the multiplier from encode_10bit_scalar())
+  // 3. use permutex2var to extract the low 16 bits from the high half
+  //    of the result (e.g., a combined right shift, truncate, and
+  //    merge).
+  // 4. continue as before.
+  //
+  // multiplier: (1<<43)/Q
+  static const __m512i MM = {
+    2642262848, 2642262848, 2642262848, 2642262848,
+    2642262848, 2642262848, 2642262848, 2642262848,
+  };
+
+  // 32 ones in u16 lanes
+  static const __m512i ONES = {
+    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
+    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
+  };
+
+  // 32 clamp values (0x3ff) in u16 lanes
+  static const __m512i MASK = {
+    0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL,
+    0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL,
+  };
+
+  // read batches of 32 coefficients, write 40 byte chunks
+  for (size_t i = 0; i < 8; i++) {
+    // load 32 16-bit coefficients, then multiply them by the multiplier
+    // ((1<<27)/Q) and get the high 16 bits (equivalent to a right shift
+    // by 16).  this leaves 32 11-bit values for the rounding step.
+    const __m512i v0 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 0)), MM),
+                  v1 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 8)), MM),
+                  v2 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 16)), MM),
+                  v3 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 24)), MM),
+                  vs_lo = _mm512_maskz_permutex2var_epi16(0x0000ffff, v0, VS_JOIN_IDS, v1),
+                  vs_hi = _mm512_maskz_permutex2var_epi16(0xffff0000, v2, VS_JOIN_IDS, v3),
+                  vs = _mm512_or_si512(vs_lo, vs_hi);
+
+    // round all 32 values by calculating `v = (v >> 1) + (v & 1)`
+    // this leaves 32 10-bit values in 16-bit lanes
+    const __m512i t0 = _mm512_and_si512(_mm512_add_epi16(_mm512_srli_epi16(vs, 1), _mm512_and_si512(vs, ONES)), MASK);
+
+    // permute the last 8 rounded 16-bit values stored in the last 8
+    // 16-bit lanes (e.g., the last 2 64-bit lanes) into the low 8
+    // 16-bit lanes (e.g., the first 2 64-bit lanes) of a separate
+    // register.
+    const __m512i t1 = _mm512_maskz_permutexvar_epi64(3, T1_IDS, t0);
+
+    // permute, shift, and mask to get the low and high parts of the
+    // first 30-byte output chunk (24 10-bit values = 240/8 = 30 bytes).
+    const __m512i c0_lo = _mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi16(LO_IDS, t0), LO_SHIFTS), LO_MASKS),
+                  c0_hi = _mm512_sllv_epi16(_mm512_and_si512(_mm512_permutexvar_epi16(HI_IDS, t0), HI_MASKS), HI_SHIFTS);
+
+    // permute, shift, and mask to get the low and high parts of the
+    // second 10-byte output chunk (8 10-bit values = 80/8 = 10 bytes).
+    const __m512i c1_lo = _mm512_and_si512(_mm512_srlv_epi16(_mm512_maskz_permutexvar_epi16(0x3ff, LO_IDS, t1), LO_SHIFTS), LO_MASKS),
+                  c1_hi = _mm512_sllv_epi16(_mm512_and_si512(_mm512_maskz_permutexvar_epi16(0x3ff, HI_IDS, t1), HI_MASKS), HI_SHIFTS);
+
+    // merge the low and high parts of the first chunk into the first 30
+    // bytes (stored in the low half of 16-bit lanes), then merge the
+    // low and high parts of the second chunk into the final 10 bytes
+    // (stored in the low half of 16-bit lanes), then permute across
+    // both registers to merge both chunks into a single register
+    // containing 40 output bytes.
+    const __m512i bs = _mm512_maskz_permutex2var_epi8(0xffffffffff, _mm512_or_si512(c0_lo, c0_hi), JOIN_IDS, _mm512_or_si512(c1_lo, c1_hi));
+
+    // write 40 bytes to output
+    _mm512_mask_storeu_epi8(out + 40*i, 0xffffffffff, bs);
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 5 bits and then serialize
+ * them as 160 bytes in output buffer `out`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] Output buffer (160 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_5bit_avx512(uint8_t out[static 160], const poly_t * const p) {
+  // u16 lane index for low part of byte
+  //
+  // original value:
+  //   static const uint16_t lo_id_vals[32] ALIGN(64) = {
+  //      0 + 0,  0 + 1,  0 + 3,  0 + 4,  0 + 6,
+  //      8 + 0,  8 + 1,  8 + 3,  8 + 4,  8 + 6,
+  //     16 + 0, 16 + 1, 16 + 3, 16 + 4, 16 + 6,
+  //     24 + 0, 24 + 1, 24 + 3, 24 + 4, 24 + 6,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i LO_IDS = {
+    0x0004000300010000ULL, 0x000B000900080006ULL, 0x00110010000E000CULL, 0x0018001600140013ULL,
+    0x001E001C001B0019ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // right shift amount for low part of byte
+  //
+  // original value:
+  //   static const uint16_t lo_shift_vals[32] ALIGN(64) = {
+  //     0, 3, 1, 4, 2,
+  //     0, 3, 1, 4, 2,
+  //     0, 3, 1, 4, 2,
+  //     0, 3, 1, 4, 2,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i LO_SHIFTS = {
+    0x0004000100030000ULL, 0x0001000300000002ULL, 0x0003000000020004ULL, 0x0000000200040001ULL,
+    0x0002000400010003ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // u16 lane index for middle part of byte
+  //
+  // original value:
+  //   static const uint16_t md_id_vals[32] ALIGN(64) = {
+  //      0 + 1,  0 + 2,  0 + 4,  0 + 5,  0 + 7,
+  //      8 + 1,  8 + 2,  8 + 4,  8 + 5,  8 + 7,
+  //     16 + 1, 16 + 2, 16 + 4, 16 + 5, 16 + 7,
+  //     24 + 1, 24 + 2, 24 + 4, 24 + 5, 24 + 7,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i MD_IDS = {
+    0x0005000400020001ULL, 0x000C000A00090007ULL, 0x00120011000F000DULL, 0x0019001700150014ULL,
+    0x001F001D001C001AULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // mask for middle part of byte
+  //
+  // original value:
+  //   static const uint16_t md_mask_vals[32] ALIGN(64) = {
+  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
+  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
+  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
+  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i MD_MASKS = {
+    0xFFFF000FFFFF0007ULL, 0x000FFFFF0007FFFFULL, 0xFFFF0007FFFFFFFFULL, 0x0007FFFFFFFF000FULL,
+    0xFFFFFFFF000FFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // left shift amount for middle part of byte
+  //
+  // original value:
+  //   static const uint16_t md_shift_vals[32] ALIGN(64) = {
+  //     5, 2, 4, 1, 3,
+  //     5, 2, 4, 1, 3,
+  //     5, 2, 4, 1, 3,
+  //     5, 2, 4, 1, 3,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i MD_SHIFTS = {
+    0x0001000400020005ULL, 0x0004000200050003ULL, 0x0002000500030001ULL, 0x0005000300010004ULL,
+    0x0003000100040002ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // u16 lane index for high part of byte
+  //
+  // original value:
+  //   static const uint16_t hi_id_vals[32] ALIGN(64) = {
+  //     0,  0 + 3, 0,  0 + 6, 0,
+  //     0,  8 + 3, 0,  8 + 6, 0,
+  //     0, 16 + 3, 0, 16 + 6, 0,
+  //     0, 24 + 3, 0, 24 + 6, 0,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i HI_IDS = {
+    0x0006000000030000ULL, 0x0000000B00000000ULL, 0x001300000000000EULL, 0x0000000000160000ULL,
+    0x0000001E0000001BULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // mask for high part of byte
+  //
+  // original value:
+  //   static const uint16_t hi_mask_vals[32] ALIGN(64) = {
+  //     0, 1, 0, 3, 0,
+  //     0, 1, 0, 3, 0,
+  //     0, 1, 0, 3, 0,
+  //     0, 1, 0, 3, 0,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i HI_MASKS = {
+    0x0003000000010000ULL, 0x0000000100000000ULL, 0x0001000000000003ULL, 0x0000000000030000ULL,
+    0x0000000300000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // left shift amount for high part of byte
+  //
+  // original value:
+  //   static const uint16_t hi_shift_vals[32] ALIGN(64) = {
+  //     0, 7, 0, 6, 0,
+  //     0, 7, 0, 6, 0,
+  //     0, 7, 0, 6, 0,
+  //     0, 7, 0, 6, 0,
+  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  //   };
+  static const __m512i HI_SHIFTS = {
+    0x0006000000070000ULL, 0x0000000700000000ULL, 0x0007000000000006ULL, 0x0000000000060000ULL,
+    0x0000000600000007ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // multiplier determined emperically:
+  //   >> def real_round(n); (n*32.0/Q).round; end
+  //   => :real_round
+  //   >> def fake_round(n); v = (n*((1<<22)/Q+1)) >> 16; (v >> 1) + (v & 1); end
+  //   => :fake_round
+  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
+  //   => ""
+  //
+  // multiplier: (1 << 22)/Q+1 (1260 in 32 u16 lanes)
+  static const __m512i MM = {
+    0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL,
+    0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL,
+  };
+
+  // 32 ones in 16-bit lanes
+  static const __m512i ONES = {
+    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
+    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
+  };
+
+  // 32 0x1f in 16-bit lanes
+  static const __m512i MASK = {
+    0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL,
+    0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL,
+  };
+
+  for (size_t i = 0; i < 8; i++) {
+    // load, multiply, round, and mask 32 coefficients
+    const __m512i cs = _mm512_mulhi_epu16(_mm512_loadu_epi16(p->cs + 32 * i), MM),
+                  vs = _mm512_and_si512(_mm512_add_epi16(_mm512_srli_epi16(cs, 1), _mm512_and_si512(cs, ONES)), MASK);
+
+    // permute into low, middle, and high parts of output byte
+    const __m512i lo = _mm512_srlv_epi16(_mm512_maskz_permutexvar_epi16(0xfffff, LO_IDS, vs), LO_SHIFTS),
+                  md = _mm512_sllv_epi16(_mm512_and_si512(_mm512_maskz_permutexvar_epi16(0xfffff, MD_IDS, vs), MD_MASKS), MD_SHIFTS),
+                  hi = _mm512_sllv_epi16(_mm512_and_si512(_mm512_maskz_permutexvar_epi16(0xfffff, HI_IDS, vs), HI_MASKS), HI_SHIFTS);
+
+    // combine low, middle, and high parts into 20 output bytes in u16 lanes
+    // then convert u16 to u8 and store to result
+    const __m512i bs = _mm512_or_si512(_mm512_or_si512(lo, md), hi);
+    _mm512_mask_cvtepi16_storeu_epi8(out + 20*i, 0xfffff, bs);
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 4 bits and then serialize
+ * them as 128 bytes in output buffer `out`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] Output buffer (128 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_4bit_avx512(uint8_t out[static 128], const poly_t * const p) {
+  // even/odd permute ids, ones in 16-bit lanes, nibbles in 16-bit lanes
+  //
+  // original values:
+  //   static const uint16_t even_vals[8] ALIGN(16) = { 0, 2, 4, 6, 8, 10, 12, 14 },
+  //                         odd_vals[8] ALIGN(16) = { 1, 3, 5, 7, 9, 11, 13, 15 };
+  //   const __m128i ones = _mm_set1_epi16(1),
+  //                 nibbles = _mm_set1_epi16(0xf),
+  static const __m128i EVENS = { 0x0006000400020000ULL, 0x000E000C000A0008ULL },
+                       ODDS =  { 0x0007000500030001ULL, 0x000F000D000B0009ULL },
+                       ONES = { 0x0001000100010001ULL, 0x0001000100010001ULL },
+                       NIBBLES = { 0x000F000F000F000FULL, 0x000F000F000F000FULL };
+
+  // multiplier (1<<37)/Q
+  static const __m512i M = { 41285357, 41285357, 41285357, 41285357, 41285357, 41285357, 41285357, 41285357 };
+
+  for (size_t i = 0; i < 16; i++) {
+    // load two sets of 8 16-bit coefficients, convert both to 64-bit
+    const __m512i c0 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 16*i + 0)),
+                  c1 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 16*i + 8));
+
+    // multiply/shift/mask, convert to 16-bit, and write to temp vars
+    const __m128i t0 = _mm512_cvtepi64_epi16(_mm512_srli_epi64(_mm512_mullo_epi64(c0, M), 32)),
+                  t1 = _mm512_cvtepi64_epi16(_mm512_srli_epi64(_mm512_mullo_epi64(c1, M), 32));
+
+    // permute to evens and odds
+    const __m128i es = _mm_permutex2var_epi16(t0, EVENS, t1),
+                  os = _mm_permutex2var_epi16(t0, ODDS, t1);
+
+    // round values
+    const __m128i res = _mm_and_si128(_mm_add_epi16(_mm_srli_epi16(es, 1), _mm_and_si128(es, ONES)), NIBBLES),
+                  ros = _mm_and_si128(_mm_add_epi16(_mm_srli_epi16(os, 1), _mm_and_si128(os, ONES)), NIBBLES);
+
+    // merge into combined 8-bit values in 16-bit lanes
+    const __m128i vs = _mm_or_si128(res, _mm_slli_epi16(ros, 4));
+
+    // convert to 8-bit values, write to output
+    _mm_mask_cvtepi16_storeu_epi8(out + 8*i, 0xff, vs);
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 1 bit and then serialize
+ * them as 32 bytes in output buffer `out`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] Output buffer (32 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_1bit_avx512(uint8_t out[static 32], const poly_t * const p) {
+  // range lower bound (inclusive): 833 in 32 16-bit lanes of 512-bit register
+  static const __m512i LO = {
+    0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL,
+    0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL,
+  };
+
+  // range upper bound (inclusive): 2496 in 32 16-bit lanes of 512-bit register
+  static const __m512i HI = {
+    0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL,
+    0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL,
+  };
+
+  // process batches of 32 coefficients
+  //
+  // note: if we don't write to `masks` and then memcpy(), gcc generates
+  // incorrect code.  clang works fine though.
+  uint32_t masks[8];
+  for (size_t i = 0; i < 8; i++) {
+    const __m512i v = _mm512_loadu_epi16(p->cs + 32*i); // load 32 coefficients
+    const uint32_t lo = _mm512_cmpge_epu16_mask(v, LO), // v >= lo
+                   hi = _mm512_cmple_epu16_mask(v, HI); // v <= hi
+    masks[i] = lo & hi; // store mask of ((v >= lo) & (v <= hi))
+  }
+
+  // copy masks to output
+  // (if we write to `out` in the loop, gcc blows up)
+  memcpy(out, masks, sizeof(masks));
+}
+
+/**
+ * Read 384 bytes from input buffer `b`, parse bytes as 256 packed
+ * 12-bit integers, and then save the integers as coefficients of output
+ * polynomial `p`.
+ *
+ * @note Input integers are reduced modulo 3329.  The draft standard
+ * says values in the range [3329, 4095] should be rejected as an
+ * error, but doing so introduces an ambiguous error state not present
+ * in Kyber.  According to a discussion on the pqc-forum mailing list,
+ * implicit reduction modulo 3329 is a better option.  See the
+ * discussion here:
+ *
+ * https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (384 bytes).
+ */
+static inline void poly_decode_avx512(poly_t * const p, const uint8_t b[static 384]) {
+  // permute ids
+  //
+  // original values:
+  //   static const uint8_t id_vals[64] ALIGN(64) = {
+  //      0,  1,  1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10, 10, 11,
+  //     12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23,
+  //     24, 25, 25, 26, 27, 28, 28, 29, 30, 31, 31, 32, 33, 34, 34, 35,
+  //     36, 37, 37, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 46, 47,
+  //   };
+  static const __m512i IDS = {
+    0x0504040302010100ULL, 0x0B0A0A0908070706ULL, 0x1110100F0E0D0D0CULL, 0x1716161514131312ULL,
+    0x1D1C1C1B1A191918ULL, 0x23222221201F1F1EULL, 0x2928282726252524ULL, 0x2F2E2E2D2C2B2B2AULL,
+  };
+
+  // right shift amounts
+  static const __m512i SHIFTS = {
+    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
+    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
+  };
+
+  // 12-bit mask in 32 16-bit lanes
+  static const __m512i MASKS = {
+    0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
+    0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
+  };
+
+  for (size_t i = 0; i < 8; i++) {
+    // load and permute chunks of 48-byte containing 32 values
+    const __m512i v = _mm512_permutexvar_epi8(IDS, _mm512_maskz_loadu_epi64(0x3f, b + 48*i));
+
+    // shift and mask to get unreduced coefficient value
+    const __m512i r = _mm512_and_si512(_mm512_srlv_epi16(v, SHIFTS), MASKS);
+
+    // reduce/store 32 coefficients
+    _mm512_storeu_epi16(p->cs + 32*i, _mm512_mask_sub_epi16(r, _mm512_cmpge_epi16_mask(r, Q16), r, Q16));
+  }
+}
+
+/**
+ * Decode packed 11-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (352 bytes).
+ */
+static inline void poly_decode_11bit_avx512(poly_t * const p, const uint8_t b[static 352]) {
+
+  // low permute ids
+  // orig: uint32_t lo_id_vals[16] ALIGN(64) = { 0, 1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20 },
+  static const __m512i LO_IDS = {
+    0x0000000100000000ULL, 0x0000000400000002ULL, 0x0000000600000005ULL, 0x0000000900000008ULL,
+    0x0000000C0000000BULL, 0x0000000F0000000DULL, 0x0000001100000010ULL, 0x0000001400000013ULL,
+  };
+
+  // low right shift amounts
+  // orig: uint32_t lo_shift_vals[16] ALIGN(64) = { 0, 3, 6, 1, 4, 7, 2, 5, 0, 3, 6, 1, 4, 7, 2, 5 },
+  static const __m512i LO_SHIFTS = {
+    0x0000000300000000ULL, 0x0000000100000006ULL, 0x0000000700000004ULL, 0x0000000500000002ULL,
+    0x0000000300000000ULL, 0x0000000100000006ULL, 0x0000000700000004ULL, 0x0000000500000002ULL,
+  };
+
+  // medium permute ids
+  // orig: uint32_t md_id_vals[16] ALIGN(64) = { 1, 2, 3, 5, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21 },
+  static const __m512i MD_IDS = {
+    0x0000000200000001ULL, 0x0000000500000003ULL, 0x0000000700000006ULL, 0x0000000A00000009ULL,
+    0x0000000D0000000CULL, 0x000000100000000EULL, 0x0000001200000011ULL, 0x0000001500000014ULL,
+  };
+
+  // medium masks
+  // orig: uint32_t md_mask_vals[16] ALIGN(64) = { 7, 0x3f, 0xff, 0xf, 0x7f, 0xff, 0x1f, 0xff, 7, 0x3f, 0xff, 0xf, 0x7f, 0xff, 0x1f, 0xff },
+  static const __m512i MD_MASKS = {
+    0x0000003F00000007ULL, 0x0000000F000000FFULL, 0x000000FF0000007FULL, 0x000000FF0000001FULL,
+    0x0000003F00000007ULL, 0x0000000F000000FFULL, 0x000000FF0000007FULL, 0x000000FF0000001FULL,
+  };
+
+  // medium left shift amounts
+  // orig: uint32_t md_shift_vals[16] ALIGN(64) = { 8, 5, 2, 7, 4, 1, 6, 3, 8, 5, 2, 7, 4, 1, 6, 3 },
+  static const __m512i MD_SHIFTS = {
+    0x0000000500000008ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
+    0x0000000500000008ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
+  };
+
+  // high permute ids
+  // orig: uint32_t hi_id_vals[16] ALIGN(64) = { 0, 0, 4, 0, 0, 8, 0, 0, 0, 0, 15, 0, 0, 19, 0, 0 },
+  static const __m512i HI_IDS = {
+    0x0000000000000000ULL, 0x0000000000000004ULL, 0x0000000800000000ULL, 0x0000000000000000ULL,
+    0x0000000000000000ULL, 0x000000000000000FULL, 0x0000001300000000ULL, 0x0000000000000000ULL,
+  };
+
+  // high masks
+  // orig: uint32_t hi_mask_vals[16] ALIGN(64) = { 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0 },
+  static const __m512i HI_MASKS = {
+    0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000300000000ULL, 0x0000000000000000ULL,
+    0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000300000000ULL, 0x0000000000000000ULL,
+  };
+
+  // high left shift amounts
+  // orig: uint32_t hi_shift_vals[16] ALIGN(64) = { 0, 0, 10, 0, 0, 9, 0, 0, 0, 0, 10, 0, 0, 9, 0, 0 };
+  static const __m512i HI_SHIFTS = {
+    0x0000000000000000ULL, 0x000000000000000AULL, 0x0000000900000000ULL, 0x0000000000000000ULL,
+    0x0000000000000000ULL, 0x000000000000000AULL, 0x0000000900000000ULL, 0x0000000000000000ULL,
+  };
+
+  // mask: 16 0xfff in u32 lanes
+  static const __m512i MASK = {
+    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
+    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
+  };
+
+  // 16 (1<<10) in u32 lanes
+  static const __m512i K1024 = {
+    0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL,
+    0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL,
+  };
+
+  for (size_t i = 0; i < 16; i++) {
+    // load 22 bytes, convert to i32 values.  store the first 16 values
+    // in register b0 and the remaining 6 values in register b1
+    const __m512i b0 = _mm512_cvtepu8_epi32(_mm_loadu_epi8(b + 22 * i)),
+                  b1 = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x3f, b + 22 * i + 16));
+
+    // permute b0 and b1 into low, medium, and high parts, then shift
+    // and mask each part
+    const __m512i lo = _mm512_srlv_epi32(_mm512_permutex2var_epi32(b0, LO_IDS, b1), LO_SHIFTS),
+                  md = _mm512_sllv_epi32(_mm512_and_si512(_mm512_permutex2var_epi32(b0, MD_IDS, b1), MD_MASKS), MD_SHIFTS),
+                  hi = _mm512_sllv_epi32(_mm512_and_si512(_mm512_permutex2var_epi32(b0, HI_IDS, b1), HI_MASKS), HI_SHIFTS);
+
+    // combine parts into 16 11-bit values, then convert values to
+    // coefficients by multiplying by Q, adding 1<<10, shifting right by
+    // 11 (rounding), then masking to the lower 12 bits.
+    const __m512i cs = _mm512_and_si512(_mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(_mm512_or_si512(lo, md), hi), Q32), K1024), 11), MASK);
+
+    // store 16 coefficients to output polynomial
+    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 16 * i, 0xffff, cs);
+  }
+}
+
+/**
+ * Decode packed 10-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (320 bytes).
+ */
+static inline void poly_decode_10bit_avx512(poly_t * const p, const uint8_t b[static 320]) {
+  // low permute ids
+  //
+  // original value:
+  //   static const uint32_t LO_ID_VALS[16] ALIGN(64) = {
+  //     0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 0, 0, 0, 0,
+  //   };
+  static const __m512i LO_IDS = {
+    0x0000000100000000ULL, 0x0000000300000002ULL, 0x0000000600000005ULL, 0x0000000800000007ULL,
+    0x0000000B0000000AULL, 0x0000000D0000000CULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // low right shift amounts
+  //
+  // original value:
+  //   static const uint32_t LO_SHIFT_VALS[16] ALIGN(64) = {
+  //     0, 2, 4, 6, 0, 2, 4, 6, 0, 2, 4, 6, 0, 0, 0, 0,
+  //   },
+  static const __m512i LO_SHIFTS = {
+    0x0000000200000000ULL, 0x0000000600000004ULL, 0x0000000200000000ULL, 0x0000000600000004ULL,
+    0x0000000200000000ULL, 0x0000000600000004ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // high permute ids
+  //
+  // original value:
+  //   static const uint32_t HI_ID_VALS[16] ALIGN(64) = {
+  //     1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 0, 0, 0, 0,
+  //   };
+  static const __m512i HI_IDS = {
+    0x0000000200000001ULL, 0x0000000400000003ULL, 0x0000000700000006ULL, 0x0000000900000008ULL,
+    0x0000000C0000000BULL, 0x0000000E0000000DULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // high masks
+  //
+  // original value:
+  //   static const uint32_t HI_MASK_VALS[16] ALIGN(64) = {
+  //     3, 0xf, 0x3f, 0xff, 3, 0xf, 0x3f, 0xff, 3, 0xf, 0x3f, 0xff, 0, 0, 0, 0,
+  //   };
+  static const __m512i HI_MASKS = {
+    0x0000000F00000003ULL, 0x000000FF0000003FULL, 0x0000000F00000003ULL, 0x000000FF0000003FULL,
+    0x0000000F00000003ULL, 0x000000FF0000003FULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // high left shift amounts
+  //
+  // original value:
+  //   static const uint32_t HI_SHIFT_VALS[16] ALIGN(64) = {
+  //     8, 6, 4, 2, 8, 6, 4, 2, 8, 6, 4, 2, 0, 0, 0, 0,
+  //   };
+  static const __m512i HI_SHIFTS = {
+    0x0000000600000008ULL, 0x0000000200000004ULL, 0x0000000600000008ULL, 0x0000000200000004ULL,
+    0x0000000600000008ULL, 0x0000000200000004ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
+  };
+
+  // mask for lower 12 bits
+  // orig: const __m512i MASK = _mm512_set1_epi32(0xfff);
+  static const __m512i MASK = {
+    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
+    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
+  };
+
+  // rounding adjustment
+  // orig: const __m512i K512 = _mm512_set1_epi32(1ULL<<9);
+  static const __m512i K512 = {
+    0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL,
+    0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL,
+  };
+
+  // loop and convert batches of 15 bytes to 12 coefficients
+  for (size_t i = 0; i < 21; i++) {
+    // load 15 bytes, convert to 15 i32 values
+    const __m512i bs = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x7fff, b + 15 * i));
+
+    // permute into low and high parts, then shift and mask each part
+    const __m512i lo = _mm512_srlv_epi32(_mm512_maskz_permutexvar_epi32(0xfff, LO_IDS, bs), LO_SHIFTS),
+                  hi = _mm512_sllv_epi32(_mm512_and_si512(_mm512_maskz_permutexvar_epi32(0xfff, HI_IDS, bs), HI_MASKS), HI_SHIFTS);
+
+    // combine parts into 12 10-bit values, then convert values to
+    // coefficients by multiplying by Q, adding 1<<9, shifting right by
+    // 10 (rounding), then masking to the lower 12 bits.
+    const __m512i cs = _mm512_and_si512(_mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(lo, hi), Q32), K512), 10), MASK);
+
+    // store 12 coefficients to output polynomial
+    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 12 * i, 0xfff, cs);
+  }
+
+  // convert last 5 bytes to 4 coefficients
+  {
+    // load 5 bytes, convert to 5 i32 values
+    const __m512i bs = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x1f, b + 315));
+
+    // permute into low and high parts, then shift and mask each part
+    const __m512i lo = _mm512_srlv_epi32(_mm512_maskz_permutexvar_epi32(0xf, LO_IDS, bs), LO_SHIFTS),
+                  hi = _mm512_sllv_epi32(_mm512_and_si512(_mm512_maskz_permutexvar_epi32(0xf, HI_IDS, bs), HI_MASKS), HI_SHIFTS);
+
+    // combine parts into 4 10-bit values, then convert values to
+    // coefficients by multiplying by Q, adding 1<<9, shifting right by
+    // 10 (rounding), then masking to the lower 12 bits.
+    const __m512i cs = _mm512_and_si512(_mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(lo, hi), Q32), K512), 10), MASK);
+
+    // store 4 coefficients to output polynomial
+    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 252, 0xf, cs);
+  }
+}
+
+/**
+ * Decode packed 5-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (160 bytes).
+ */
+static inline void poly_decode_5bit_avx512(poly_t * const p, const uint8_t b[static 160]) {
+  // low permute ids
+  // orig: uint32_t lo_id_vals[16] ALIGN(64) = { 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9 },
+  static const __m512i LO_IDS = {
+    0x0000000000000000ULL, 0x0000000100000001ULL, 0x0000000300000002ULL, 0x0000000400000003ULL,
+    0x0000000500000005ULL, 0x0000000600000006ULL, 0x0000000800000007ULL, 0x0000000900000008ULL,
+  };
+
+  // low left shift amounts
+  // orig: uint32_t lo_shift_vals[16] ALIGN(64) = { 0, 5, 2, 7, 4, 1, 6, 3, 0, 5, 2, 7, 4, 1, 6, 3 },
+  static const __m512i LO_SHIFTS = {
+    0x0000000500000000ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
+    0x0000000500000000ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
+  };
+
+  // low masks
+  // orig: lo_mask_vals[16] ALIGN(64) = { 0x1f, 7, 0x1f, 1, 0xf, 0x1f, 3, 0x1f, 0x1f, 7, 0x1f, 1, 0xf, 0x1f, 3, 0x1f },
+  static const __m512i LO_MASKS = {
+    0x000000070000001FULL, 0x000000010000001FULL, 0x0000001F0000000FULL, 0x0000001F00000003ULL,
+    0x000000070000001FULL, 0x000000010000001FULL, 0x0000001F0000000FULL, 0x0000001F00000003ULL,
+  };
+
+  // high permute ids
+  // orig: uint32_t hi_id_vals[16] ALIGN(64) = { 0, 1, 0, 2, 3, 0, 4, 0, 0, 6, 0, 7, 8, 0, 9, 0 },
+  static const __m512i HI_IDS = {
+    0x0000000100000000ULL, 0x0000000200000000ULL, 0x0000000000000003ULL, 0x0000000000000004ULL,
+    0x0000000600000000ULL, 0x0000000700000000ULL, 0x0000000000000008ULL, 0x0000000000000009ULL,
+  };
+
+  // high masks
+  // orig: uint32_t hi_mask_vals[16] ALIGN(64) = { 0, 3, 0, 15, 1, 0, 7, 0, 0, 3, 0, 15, 1, 0, 7, 0 },
+  static const __m512i HI_MASKS = {
+    0x0000000300000000ULL, 0x0000000F00000000ULL, 0x0000000000000001ULL, 0x0000000000000007ULL,
+    0x0000000300000000ULL, 0x0000000F00000000ULL, 0x0000000000000001ULL, 0x0000000000000007ULL,
+  };
+
+  // high left shift amounts
+  // orig: hi_shift_vals[16] ALIGN(64) = { 0, 3, 0, 1, 4, 0, 2, 0, 0, 3, 0, 1, 4, 0, 2, 0 };
+  static const __m512i HI_SHIFTS = {
+    0x0000000300000000ULL, 0x0000000100000000ULL, 0x0000000000000004ULL, 0x0000000000000002ULL,
+    0x0000000300000000ULL, 0x0000000100000000ULL, 0x0000000000000004ULL, 0x0000000000000002ULL,
+  };
+
+  // 16 sixteens in u32 lanes
+  // (used for
+  static const __m512i K16 = {
+    0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL,
+    0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL,
+  };
+
+  for (size_t i = 0; i < 16; i++) {
+    const __m512i bs = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x3ff, b + 10 * i)),
+                  lo_bs = _mm512_permutexvar_epi32(LO_IDS, bs),
+                  hi_bs = _mm512_permutexvar_epi32(HI_IDS, bs),
+                  lo = _mm512_and_si512(_mm512_srlv_epi32(lo_bs, LO_SHIFTS), LO_MASKS),
+                  hi = _mm512_sllv_epi32(_mm512_and_si512(hi_bs, HI_MASKS), HI_SHIFTS),
+                  cs = _mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(lo, hi), Q32), K16), 5);
+    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 16 * i, 0xffff, cs);
+  }
+}
+
+/**
+ * Decode packed 4-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (128 bytes).
+ */
+static inline void poly_decode_4bit_avx512(poly_t * const p, const uint8_t b[static 128]) {
+  // permute ids
+  // orig: { 0, 0x00010001, 0x00020002, 0x00030003, 0x00040004, 0x00050005, 0x00060006, 0x00070007, 0x00080008, 0x00090009, 0x000a000a, 0x000b000b, 0x000c000c, 0x000d000d, 0x000e000e, 0x000f000f }
+  static const __m512i IDS = {
+    0x0001000100000000ULL, 0x0003000300020002ULL, 0x0005000500040004ULL, 0x0007000700060006ULL,
+    0x0009000900080008ULL, 0x000B000B000A000AULL, 0x000D000D000C000CULL, 0x000F000F000E000EULL,
+  };
+
+  // left shift amounts (16 0x00040000 in u32 lanes)
+  // orig: _mm512_set1_epi32(0x00040000)
+  static const __m512i SHIFTS = {
+    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
+    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
+  };
+
+  // masks (32 0xf in u16 lanes)
+  // orig: _mm512_set1_epi32(0x000f000f),
+  static const __m512i MASKS = {
+    0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL,
+    0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL,
+  };
+
+  // masks (32 eights in u16 lanes)
+  // orig: eights = _mm512_set1_epi32(0x00080008);
+  static const __m512i EIGHTS = {
+    0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL,
+    0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL,
+  };
+
+  // 1. load 16 byte chunks
+  // 2. cast, permute, shift, and mask into 32 4-bit values in 16-bit lanes
+  // 3. multiply by Q, add 8 (rounding), and shift by 4 to convert to coefs
+  // 3. store 32 coefs to output poly
+  for (size_t i = 0; i < 8; i++) {
+    _mm512_storeu_epi16(p->cs + 32*i, _mm512_srli_epi16(_mm512_add_epi16(_mm512_mullo_epi16(_mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi8(IDS, _mm512_castsi128_si512(_mm_loadu_epi8(b + 16*i))), SHIFTS), MASKS), Q16), EIGHTS), 4));
+  }
+}
+
+/**
+ * Decode packed 1-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (32 bytes).
+ */
+static inline void poly_decode_1bit_avx512(poly_t * const p, const uint8_t b[static 32]) {
+  // 32 1665 in u16 lanes
+  // orig: _mm512_set1_epi16(1665)
+  static const __m512i VALS = {
+    0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL,
+    0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL,
+  };
+
+  const uint32_t * const masks = (uint32_t*) b;
+  for (size_t i = 0; i < 8; i++) {
+    _mm512_storeu_epi16(p->cs + 32*i, _mm512_maskz_expand_epi16(masks[i], VALS));
+  }
+}
+
+// define avx512 vector operations
+#define DEF_AVX512_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_avx512(poly_t v[static N], const uint8_t b[static 384*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_avx512(v + i, b + 384*i); \
+    } \
+  } \
+  \
+  static inline void vec ## N ## _encode_avx512(uint8_t out[static N*384], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_avx512(out + 384*i, v + i); \
+    } \
+  }
+
+#define DEF_AVX512_10BIT_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_10bit_avx512(poly_t v[static N], const uint8_t b[static 320*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_10bit_avx512(v + i, b + 320*i); \
+    } \
+  } \
+  \
+  static inline void vec ## N ## _encode_10bit_avx512(uint8_t out[static 320*N], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_10bit_avx512(out + 320*i, v + i); \
+    } \
+  }
+
+#define DEF_AVX512_11BIT_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_11bit_avx512(poly_t v[static N], const uint8_t b[static 352*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_11bit_avx512(v + i, b + 352*i); \
+    } \
+  } \
+  static inline void vec ## N ## _encode_11bit_avx512(uint8_t out[static 352*N], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_11bit_avx512(out + 352*i, v + i); \
+    } \
+  }
+
+// declare avx512 vector ops
+DEF_AVX512_VEC_OPS(2)
+DEF_AVX512_VEC_OPS(3)
+DEF_AVX512_VEC_OPS(4)
+
+// declare avx512 10-bit vector ops
+DEF_AVX512_10BIT_VEC_OPS(2)
+DEF_AVX512_10BIT_VEC_OPS(3)
+
+// declare avx512 11-bit vector ops
+DEF_AVX512_11BIT_VEC_OPS(4)
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_NEON
+#include <arm_neon.h>
+
+// Q in 8 16-bit lanes
+static const uint16x8_t Q16 = { Q, Q, Q, Q, Q, Q, Q, Q };
+
+/**
+ * @brief Partially reduce a group of values.
+ * @param[in] a Group of 4 24-bit values.
+ * @return 4 partially reduced values (e.g., mod 2Q).
+ */
+static inline uint32x4_t ntt_mod_2q(const uint32x4_t a) {
+  // barrett reduction multiplier: floor((1<<39)/Q)
+  static const uint32_t M = 165141428;
+
+  // b = (a * M) >> 39 (calculate quotient)
+  //
+  // steps:
+  // 1. split the input value into low and high u32 pairs.
+  // 2. scalar multiply each pair by M.  this produces 2 u64x2 results.
+  // 3. reinterpret each of results as u32x4.
+  // 4. unzip the odd lanes of the results into a combined u32x4.  this
+  //    and the previous step are an implicit 32-bit right shift and
+  //    narrow.
+  // 5. right the combined result by 7.  this plus the implicit right
+  //    shift in the previous step add up to 39 bits.
+  //
+  // (doing things this way saves a few instructions)
+  const uint32x4_t b0 = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(a), M)),
+                   b1 = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(a), M));
+  const uint32x4_t b = vshrq_n_u32(vuzp2q_u32(b0, b1), 7);
+
+  // c = a - Q * b (reduce mod 2Q)
+  const uint32x4_t c = vsubq_u32(a, vmulq_n_u32(b, Q));
+
+  return c;
+}
+
+/**
+ * @brief Multiply two groups of coefficients element-wise and partially
+ * reduce the product.
+ *
+ * @param[in] a 8 12-bit coefficients.
+ * @param[in] b 8 12-bit coefficients.
+ * @return 8 partially reduced (e.g., mod 2Q) element-wise products.
+ */
+static inline uint16x8_t ntt_mul_u16(const uint16x8_t a, const uint16x8_t b) {
+  // c = a * b % 2Q (store as 8 u32x8)
+  const uint32x4_t c0 = ntt_mod_2q(vmull_u16(vget_low_u16(a), vget_low_u16(b))), // low products mod 2Q
+                   c1 = ntt_mod_2q(vmull_u16(vget_high_u16(a), vget_high_u16(b))); // high products mod 2Q
+
+  // narrow/join, return u16x8 (mod 2Q)
+  return vuzp1q_u16(vreinterpretq_u16_u32(c0), vreinterpretq_u16_u32(c1));
+}
+
+/**
+ * Compute in-place number-theoretic transform (NTT) of polynomial `p`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[in,out] p Polynomial.
+ */
+static inline void poly_ntt_neon(poly_t * const p) {
+  // barrett multiplier and pointer type punnion union
+  static const uint32_t M = 165141428; // multiplier: floor((1<<39)/Q)
+  union { uint16_t *u16; uint32_t *u32; uint64_t *u64; } ps = { .u16 = p->cs };
+  // poly_t op = *p; // test copy of original poly
+
+  // len = 128
+  {
+    // load zeta
+    const uint16_t z = NTT_LUT[1];
+
+    // adjust coefs in groups of 16 (8 high, 8 low)
+    for (size_t j = 0; j < 16; j++) {
+      const size_t lo_id = 8 * j,
+                   hi_id = 128 + 8 * j;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi * z) % Q
+      uint16x8_t t;
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
+                   p1 = vmull_n_u16(vget_high_u16(hi), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // t %= Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
+      }
+
+      // adjust coefs (note: order matters; adjust `hi` first)
+      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
+      lo = vaddq_u16(lo, t); // lo += t
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_ntt_neon(p, op, 128);
+
+  // len = 64
+  for (size_t i = 0; i < 2; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[2 + i];
+
+    // adjust coefs in groups of 16 (8 high, 8 low)
+    for (size_t j = 0; j < 8; j++) {
+      const size_t lo_id = 128*i + 8*j + 0,
+                   hi_id = 128*i + 8*j + 64;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi * z) % Q
+      uint16x8_t t;
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
+                   p1 = vmull_n_u16(vget_high_u16(hi), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // t %= Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
+      }
+
+      // adjust coefs (note: order matters; adjust `hi` first)
+      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
+      lo = vaddq_u16(lo, t); // lo += t
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_ntt_neon(p, op, 64);
+
+  // len = 32
+  for (size_t i = 0; i < 4; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[4 + i];
+
+    for (size_t j = 0; j < 4; j++) {
+      const size_t lo_id = 64*i + 8*j + 0,
+                   hi_id = 64*i + 8*j + 32;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi * z) % Q
+      uint16x8_t t;
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
+                   p1 = vmull_n_u16(vget_high_u16(hi), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // t %= Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
+      }
+
+      // adjust coefs (note: order matters; adjust `hi` first)
+      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
+      lo = vaddq_u16(lo, t); // lo += t
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_ntt_neon(p, op, 32);
+
+  // len = 16
+  for (size_t i = 0; i < 8; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[8 + i];
+
+    for (size_t j = 0; j < 2; j++) {
+      const size_t lo_id = 32*i + 8*j + 0,
+                   hi_id = 32*i + 8*j + 16;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi * z) % Q
+      uint16x8_t t;
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
+                   p1 = vmull_n_u16(vget_high_u16(hi), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // t %= Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
+      }
+
+      // adjust coefs (note: order matters; adjust `hi` first)
+      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
+      lo = vaddq_u16(lo, t); // lo += t
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_ntt_neon(p, op, 16);
+
+  // len = 8
+  for (size_t i = 0; i < 16; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[16 + i];
+
+    // calculate offsets
+    const size_t lo_id = 16*i + 0,
+                 hi_id = 16*i + 8;
+
+    // load coefs
+    uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+               hi = vld1q_u16(p->cs + hi_id);
+
+    // t = (hi * z) % Q
+    uint16x8_t t;
+    {
+      // p * hi * z
+      uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
+                 p1 = vmull_n_u16(vget_high_u16(hi), z);
+
+      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+      // t %= Q (merge, reduce)
+      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+      t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
+    }
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
+    lo = vaddq_u16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+    // store coefs
+    vst1q_u16(p->cs + lo_id, lo);
+    vst1q_u16(p->cs + hi_id, hi);
+  }
+
+  // check_poly_ntt_neon(p, op, 8);
+
+  // len = 4
+  for (size_t i = 0; i < 16; i++) {
+    // load next two zetas into z0 and z1
+    const uint16_t z0 = NTT_LUT[32 + 2*i + 0],
+                   z1 = NTT_LUT[32 + 2*i + 1];
+
+    // load coefs
+    // l0 l0 l0 l0 h0 h0 h0 h0 l1 l1 l1 l1 h1 h1 h1 h1
+    const uint64x2x2_t cs = vld2q_u64(ps.u64 + 4*i);
+    uint16x8_t lo = vreinterpretq_u16_u64(cs.val[0]),
+               hi = vreinterpretq_u16_u64(cs.val[1]);
+
+    // t = (hi * z) % Q
+    uint16x8_t t;
+    {
+      // p * hi * z
+      uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z0),
+                 p1 = vmull_n_u16(vget_high_u16(hi), z1);
+
+      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+      // t %= Q (merge, reduce)
+      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+      t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
+    }
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
+    lo = vaddq_u16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+    // store coefs
+    // reinterpret each register as a pair of u64s, then store the
+    // values interleaved so they are permuted into the correct position
+    uint64x2x2_t s = { .val = { vreinterpretq_u64_u16(lo), vreinterpretq_u64_u16(hi) } };
+    vst2q_u64(ps.u64 + 4*i, s);
+  }
+
+  // check_poly_ntt_neon(p, op, 4);
+
+  // len = 2
+  for (size_t i = 0; i < 16; i++) {
+    // load next four zetas into z0, z1, z2, z3
+    // FIXME: find faster way to do this
+    const uint16_t z0 = NTT_LUT[64 + 4*i + 0],
+                   z1 = NTT_LUT[64 + 4*i + 1],
+                   z2 = NTT_LUT[64 + 4*i + 2],
+                   z3 = NTT_LUT[64 + 4*i + 3];
+    const uint16x8_t z = { z0, z0, z1, z1, z2, z2, z3, z3 };
+
+    // load coefs
+    // l0 l0 h0 h0 l1 l1 h1 h1 l2 l2 h2 h2 l3 l3 h3 h3
+    const uint32x4x2_t cs = vld2q_u32(ps.u32 + 8*i);
+    uint16x8_t lo = vreinterpretq_u16_u32(cs.val[0]),
+               hi = vreinterpretq_u16_u32(cs.val[1]);
+
+    // t = (hi * z) % Q
+    uint16x8_t t;
+    {
+      // p * hi * z
+      uint32x4_t p0 = vmull_u16(vget_low_u16(hi), vget_low_u16(z)),
+                 p1 = vmull_u16(vget_high_u16(hi), vget_high_u16(z));
+
+      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+      // t %= Q (merge, reduce)
+      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+      t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
+    }
+
+    // adjust coefs (note: order matters; adjust `hi` first)
+    hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
+    lo = vaddq_u16(lo, t); // lo += t
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+    // store coefs
+    // reinterpret each register as a u32x4, then store the values
+    // interleaved so they are permuted into the correct position
+    uint32x4x2_t s = { .val = { vreinterpretq_u32_u16(lo), vreinterpretq_u32_u16(hi) } };
+    vst2q_u32(ps.u32 + 8*i, s);
+  }
+
+  // check_poly_ntt_neon(p, op, 2);
+}
+
+/**
+ * Compute in-place inverse number-theoretic transform (NTT) of
+ * polynomial `p`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[in,out] p Polynomial.
+ */
+static inline void poly_inv_ntt_neon(poly_t * const p) {
+  // barrett multiplier and pointer type punnion union
+  static const uint32_t M = 165141428; // multiplier: floor((1<<39)/Q)
+  union { uint16_t *u16; uint32_t *u32; uint64_t *u64; } ps = { .u16 = p->cs };
+  // poly_t op = *p; // test copy of original poly
+
+  // len = 2
+  for (size_t i = 0; i < 16; i++) {
+    // load next four zetas into z0, z1, z2, z3
+    // FIXME: find faster way to do this
+    const uint16_t z0 = NTT_LUT[128 - 4*(i + 1) + 3],
+                   z1 = NTT_LUT[128 - 4*(i + 1) + 2],
+                   z2 = NTT_LUT[128 - 4*(i + 1) + 1],
+                   z3 = NTT_LUT[128 - 4*(i + 1) + 0];
+    const uint16x8_t z = { z0, z0, z1, z1, z2, z2, z3, z3 };
+
+    // load coefs
+    // l0 l0 h0 h0 l1 l1 h1 h1 l2 l2 h2 h2 l3 l3 h3 h3
+    const uint32x4x2_t cs = vld2q_u32(ps.u32 + 8*i);
+    uint16x8_t lo = vreinterpretq_u16_u32(cs.val[0]),
+               hi = vreinterpretq_u16_u32(cs.val[1]);
+
+    // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
+    uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
+    lo = vaddq_u16(hi, lo);
+
+    // hi = (t * z) % Q (adjust hi)
+    {
+      // p * hi * z
+      uint32x4_t p0 = vmull_u16(vget_low_u16(t), vget_low_u16(z)),
+                 p1 = vmull_u16(vget_high_u16(t), vget_high_u16(z));
+
+      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+      // hi = t % Q (merge, reduce)
+      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+      hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
+    }
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+    // store coefs
+    // reinterpret each register as a u32x4, then store the values
+    // interleaved so they are permuted into the correct position
+    uint32x4x2_t s = { .val = { vreinterpretq_u32_u16(lo), vreinterpretq_u32_u16(hi) } };
+    vst2q_u32(ps.u32 + 8*i, s);
+  }
+
+  // check_poly_inv_ntt_neon(p, op, 2);
+
+  // len = 4
+  for (size_t i = 0; i < 16; i++) {
+    // load next two zetas into z0 and z1
+    const uint16_t z0 = NTT_LUT[64 - 2*(i + 1) + 1],
+                   z1 = NTT_LUT[64 - 2*(i + 1) + 0];
+
+    // load coefs
+    // l0 l0 l0 l0 h0 h0 h0 h0 l1 l1 l1 l1 h1 h1 h1 h1
+    const uint64x2x2_t cs = vld2q_u64(ps.u64 + 4*i);
+    uint16x8_t lo = vreinterpretq_u16_u64(cs.val[0]),
+               hi = vreinterpretq_u16_u64(cs.val[1]);
+
+    // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
+    uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
+    lo = vaddq_u16(hi, lo);
+
+    // hi = (t * z) % Q (adjust hi)
+    {
+      // p * hi * z
+      uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z0),
+                 p1 = vmull_n_u16(vget_high_u16(t), z1);
+
+      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+      // hi = t % Q (merge, reduce)
+      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+      hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
+    }
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+    // store coefs
+    // reinterpret each register as a pair of u64s, then store the
+    // values interleaved so they are permuted into the correct position
+    uint64x2x2_t s = { .val = { vreinterpretq_u64_u16(lo), vreinterpretq_u64_u16(hi) } };
+    vst2q_u64(ps.u64 + 4*i, s);
+  }
+
+  // check_poly_inv_ntt_neon(p, op, 4);
+
+  // len = 8
+  for (size_t i = 0; i < 16; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[32 - (i + 1)];
+
+    // calculate offsets
+    const size_t lo_id = 16*i + 0,
+                 hi_id = 16*i + 8;
+
+    // load coefs
+    uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+               hi = vld1q_u16(p->cs + hi_id);
+
+    // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
+    uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
+    lo = vaddq_u16(hi, lo);
+
+    // hi = (t * z) % Q (adjust hi)
+    {
+      // p * hi * z
+      uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
+                 p1 = vmull_n_u16(vget_high_u16(t), z);
+
+      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+      // hi = t % Q (merge, reduce)
+      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+      hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
+    }
+
+    // reduce coefs (hi %= Q, lo %= Q)
+    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+    // store coefs
+    vst1q_u16(p->cs + lo_id, lo);
+    vst1q_u16(p->cs + hi_id, hi);
+  }
+
+  // check_poly_inv_ntt_neon(p, op, 8);
+
+  // len = 16
+  for (size_t i = 0; i < 8; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[16 - (i + 1)];
+
+    for (size_t j = 0; j < 2; j++) {
+      const size_t lo_id = 32*i + 8*j + 0,
+                   hi_id = 32*i + 8*j + 16;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
+      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
+      lo = vaddq_u16(hi, lo);
+
+      // hi = (t * z) % Q (adjust hi)
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
+                   p1 = vmull_n_u16(vget_high_u16(t), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // hi = t % Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
+      }
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_inv_ntt_neon(p, op, 16);
+
+  // len = 32
+  for (size_t i = 0; i < 4; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[8 - (i + 1)];
+
+    for (size_t j = 0; j < 4; j++) {
+      const size_t lo_id = 64*i + 8*j + 0,
+                   hi_id = 64*i + 8*j + 32;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
+      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
+      lo = vaddq_u16(hi, lo);
+
+      // hi = (t * z) % Q (adjust hi)
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
+                   p1 = vmull_n_u16(vget_high_u16(t), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // hi = t % Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
+      }
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_inv_ntt_neon(p, op, 32);
+
+  // len = 64
+  for (size_t i = 0; i < 2; i++) {
+    // load zeta
+    const uint16_t z = NTT_LUT[4 - (i + 1)];
+
+    // adjust coefs in groups of 16 (8 high, 8 low)
+    for (size_t j = 0; j < 8; j++) {
+      const size_t lo_id = 128*i + 8*j + 0,
+                   hi_id = 128*i + 8*j + 64;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
+      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
+      lo = vaddq_u16(hi, lo);
+
+      // hi = (t * z) % Q (adjust hi)
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
+                   p1 = vmull_n_u16(vget_high_u16(t), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // hi = t % Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
+      }
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_inv_ntt_neon(p, op, 64);
+
+  // len = 128
+  {
+    // load zeta
+    const uint16_t z = NTT_LUT[1];
+
+    // adjust coefs in groups of 16 (8 high, 8 low)
+    for (size_t j = 0; j < 16; j++) {
+      const size_t lo_id = 8 * j,
+                   hi_id = 128 + 8 * j;
+
+      // load coefs
+      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
+                 hi = vld1q_u16(p->cs + hi_id);
+
+      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
+      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
+      lo = vaddq_u16(hi, lo);
+
+      // hi = (t * z) % Q (adjust hi)
+      {
+        // p * hi * z
+        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
+                   p1 = vmull_n_u16(vget_high_u16(t), z);
+
+        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
+        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
+                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
+                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
+                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
+                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
+                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
+
+        // hi = t % Q (merge, reduce)
+        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
+        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
+      }
+
+      // reduce coefs (hi %= Q, lo %= Q)
+      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
+      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
+
+      // store coefs
+      vst1q_u16(p->cs + lo_id, lo);
+      vst1q_u16(p->cs + hi_id, hi);
+    }
+  }
+
+  // check_poly_inv_ntt_neon(p, op, 128);
+
+  // inverse of Q as u16x8
+  static const uint16x8_t Q_INV = { 3303, 3303, 3303, 3303, 3303, 3303, 3303, 3303 };
+
+  // multiply all coefficients by 3309
+  for (size_t i = 0; i < 32; i++) {
+    // load coefficients
+    uint16x8_t cs = vld1q_u16(p->cs + (8 * i));
+
+    // cs = (cs * Q_INV) % Q (multiply, reduce)
+    cs = ntt_mul_u16(cs, Q_INV); // multiply, partial reduction
+    cs = vsubq_u16(cs, vandq_u16(vcgeq_u16(cs, Q16), Q16)); // reduce
+
+    // store coefficients
+    vst1q_u16(p->cs + (8 * i), cs);
+  }
+}
+
+/**
+ * Add polynomial `a` to polynomial `b` component-wise, and store the
+ * sum in `a`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ */
+static inline void poly_add_neon(poly_t * const restrict a, const poly_t * const restrict b) {
+  for (size_t i = 0; i < 32; i++) {
+    // load operands
+    const uint16x8_t bb = vld1q_u16(b->cs + 8*i);
+    uint16x8_t aa = vld1q_u16(a->cs + 8*i);
+
+    aa = vaddq_u16(aa, bb); // a += b
+
+    // a -= (a >= Q) ? Q : 0
+    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16));
+
+    // store
+    vst1q_u16(a->cs + 8*i, aa);
+  }
+}
+
+/**
+ * Add polynomial `a` to polynomials `b` and `c` component-wise, and
+ * store the sum in `a`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ * @param[in] c Polynomial.
+ */
+static inline void poly_add2_neon(poly_t * const restrict a, const poly_t * const restrict b, const poly_t * const restrict c) {
+  for (size_t i = 0; i < 32; i++) {
+    // load operands
+    const uint16x8_t bb = vld1q_u16(b->cs + 8*i),
+                     cc = vld1q_u16(c->cs + 8*i);
+
+    uint16x8_t aa = vaddq_u16(vld1q_u16(a->cs + 8*i), bb);  // a += b
+    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16)); // a %= Q
+    aa = vaddq_u16(aa, cc);                                 // a += c
+    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16)); // a %= Q
+
+    // store
+    vst1q_u16(a->cs + 8*i, aa);
+  }
+}
+
+/**
+ * Subtract polynomial `b` from polynomial `a` component-wise, and store the
+ * result in `a`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ */
+static inline void poly_sub_neon(poly_t * const restrict a, const poly_t * const restrict b) {
+  for (size_t i = 0; i < 32; i++) {
+    // load operands
+    uint16x8_t aa = vld1q_u16(a->cs + 8*i),
+               bb = vld1q_u16(b->cs + 8*i);
+
+    aa = vaddq_u16(aa, vsubq_u16(Q16, bb)); // a -= b
+    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16)); // a %= Q
+
+    // store
+    vst1q_u16(a->cs + 8*i, aa);
+  }
+}
+
+/**
+ * Multiply `a` and `b` and store the product in `c`.
+ *
+ * @note `a` and `b` are assumed to be in the NTT domain.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] c Product polynomial, in the NTT domain.
+ * @param[in] a Input polynomial, in the NTT domain.
+ * @param[in] b Input polynomial, in the NTT domain.
+ */
+static inline void poly_mul_neon(poly_t * const restrict c, const poly_t * const restrict a, const poly_t * const restrict b) {
+  // loop and process coefficients in groups of 16
+  for (size_t i = 0; i < 16; i++) {
+    // load 8 zetas from MUL_LUT
+    const uint16x8_t z = vld1q_u16(MUL_LUT + (8 * i));
+
+    // load 16 interleaved coefficients from polynomial `a` and 16
+    // interleaved coefficients from polynomial `b`.
+    const uint16x8x2_t aa = vld2q_u16(a->cs + 16*i),
+                       bb = vld2q_u16(b->cs + 16*i);
+
+    // deinterleave coefficients into a sets of even coefficients (`ae`
+    // and `be`) and sets of odd coefficients (`ao` and `bo`)
+    const uint16x8_t ae = aa.val[0], ao = aa.val[1],
+                     be = bb.val[0], bo = bb.val[1];
+
+    // bo_z = (bo * z) % 2Q (partial reduction)
+    const uint16x8_t bo_z = ntt_mul_u16(bo, z);
+
+    // split sets into low and high sets of u16x4
+    const uint16x4_t ae_lo = vget_low_u16(ae), ae_hi = vget_high_u16(ae),
+                     ao_lo = vget_low_u16(ao), ao_hi = vget_high_u16(ao),
+                     be_lo = vget_low_u16(be), be_hi = vget_high_u16(be),
+                     bo_lo = vget_low_u16(bo), bo_hi = vget_high_u16(bo),
+                     bo_z_lo = vget_low_u16(bo_z), bo_z_hi = vget_high_u16(bo_z);
+
+    // even results: ce = ((ae * be) + (ao * bo * z)) % 2Q (partial reduction)
+    const uint32x4_t ce0 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_lo, be_lo), vmull_u16(ao_lo, bo_z_lo))),
+                     ce1 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_hi, be_hi), vmull_u16(ao_hi, bo_z_hi)));
+
+    // ce %= Q (final reduction)
+    uint16x8_t ce = vuzp1q_u16(vreinterpretq_u16_u32(ce0), vreinterpretq_u16_u32(ce1));
+    ce = vsubq_u16(ce, vandq_u16(vcgeq_u16(ce, Q16), Q16));
+
+    // odd results: co = ((ae * bo) + (ao * be)) % 2Q (partial reduction)
+    const uint32x4_t co0 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_lo, bo_lo), vmull_u16(ao_lo, be_lo))),
+                     co1 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_hi, bo_hi), vmull_u16(ao_hi, be_hi)));
+
+    // co %= Q (final reduction)
+    uint16x8_t co = vuzp1q_u16(vreinterpretq_u16_u32(co0), vreinterpretq_u16_u32(co1));
+    co = vsubq_u16(co, vandq_u16(vcgeq_u16(co, Q16), Q16));
+
+    // interleave and store coefficients
+    const uint16x8x2_t cc = { .val = { ce, co } };
+    vst2q_u16(c->cs + (16*i), cc);
+  }
+}
+
+/**
+ * Pack 12-bit coefficients of polynomial `p` and serialize them into
+ * 384 bytes of the output buffer `out`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out Output buffer (384 bytes).
+ * @param[in] Input polynomial.
+ */
+static inline void poly_encode_neon(uint8_t out[static 384], const poly_t * const a) {
+  // TODO: scalar implementation
+
+  for (size_t i = 0; i < 128; i++) {
+    const uint16_t a0 = a->cs[2 * i],
+                   a1 = a->cs[2 * i + 1];
+    out[3 * i] = a0 & 0x0ff;
+    out[3 * i + 1] = ((a0 & 0xf00) >> 8) | ((a1 & 0x0f) << 4);
+    out[3 * i + 2] = (a1 & 0xff0) >> 4;
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 11 bits and then serialize
+ * them as 352 bytes in output buffer `out`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out Output buffer (352 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_11bit_neon(uint8_t out[static 352], const poly_t * const p) {
+  // TODO: scalar implementation
+
+  static const uint64_t M = 5284525696; // (1<<44)/Q
+
+  for (size_t i = 0; i < 32; i++) {
+    uint16_t y[8] = { 0 };
+    for (size_t j = 0; j < 8; j++) {
+      const uint32_t x = (p->cs[8 * i + j] * M) >> 32; // 44 - 12
+      y[j] = 0x7ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^11/Q)))
+    }
+
+    // 00000000 11111000 22111111 22222222
+    // 33333332 44443333 54444444 55555555
+    // 66666655 77766666 77777777
+    out[11 * i + 0] = y[0] & 0xff;
+    out[11 * i + 1] = ((y[0] >> 8) & 7) | ((y[1] & 0x1f) << 3);
+    out[11 * i + 2] = ((y[1] >> 5) & 0x3f) | ((y[2] & 3) << 6);
+    out[11 * i + 3] = (y[2] >> 2) & 0xff;
+    out[11 * i + 4] = ((y[2] >> 10) & 1) | ((y[3] & 0x7f) << 1);
+    out[11 * i + 5] = ((y[3] >> 7) & 0xf) | ((y[4] & 0xf) << 4);
+    out[11 * i + 6] = ((y[4] >> 4) & 0x7f) | ((y[5] & 1) << 7);
+    out[11 * i + 7] = (y[5] >> 1) & 0xff;
+    out[11 * i + 8] = ((y[5] >> 9) & 3) | ((y[6] & 0x3f) << 2);
+    out[11 * i + 9] = ((y[6] >> 6) & 0x1f) | ((y[7] & 7) << 5);
+    out[11 * i + 10] = (y[7] >> 3) & 0xff;
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 10 bits and then serialize
+ * them as 320 bytes in output buffer `out`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out Output buffer (320 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_10bit_neon(uint8_t out[static 320], const poly_t * const p) {
+  // TODO: scalar implementation
+
+  static const uint64_t M = 2642262848; // (1<<43)/Q
+
+  for (size_t i = 0; i < 64; i++) {
+    uint16_t y[4] = { 0 };
+    for (size_t j = 0; j < 4; j++) {
+      const uint32_t x = (p->cs[4 * i + j] * M) >> 32; // 43 - 11
+      y[j] ^= 0x3ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^10/Q)))
+    }
+
+    out[5 * i + 0] = y[0] & 0xff;
+    out[5 * i + 1] = ((y[0] >> 8) & 0x03) | ((y[1] & 0x3f) << 2);
+    out[5 * i + 2] = ((y[1] >> 6) & 0xf) | ((y[2] & 0xf) << 4);
+    out[5 * i + 3] = ((y[2] >> 4) & 0x3f) | ((y[3] & 0x3) << 6);
+    out[5 * i + 4] = (y[3] >> 2) & 0xff;
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 5 bits and then serialize
+ * them as 160 bytes in output buffer `out`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] Output buffer (160 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_5bit_neon(uint8_t out[static 160], const poly_t * const p) {
+  // TODO: scalar implementation
+
+  // multiplier determined emperically:
+  //   >> def real_round(n); (n*32.0/Q).round; end
+  //   => :real_round
+  //   >> def fake_round(n); v = (n*((1<<22)/Q+1)) >> 16; (v >> 1) + (v & 1); end
+  //   => :fake_round
+  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
+  //   => ""
+  static const uint16_t M = 1260; // multiplier: (1 << 22)/Q+1
+
+  for (size_t i = 0; i < 32; i++) {
+    uint16_t y[8] = { 0 };
+
+    for (size_t j = 0; j < 8; j++) {
+      const uint16_t x = (p->cs[8 * i + j] * M) >> 16; // x = c*(1<<6)/Q
+      y[j] = 0x1f & ((x >> 1) + (x & 1)); // round
+    }
+
+    out[5 * i + 0] = y[0] | ((y[1] & 0x07) << 5);                   // 11100000
+    out[5 * i + 1] = (y[1] >> 3) | (y[2] << 2) | ((y[3] & 1) << 7); // 32222211
+    out[5 * i + 2] = (y[3] >> 1) | ((y[4] & 0xf) << 4);             // 44443333
+    out[5 * i + 3] = (y[4] >> 4) | (y[5] << 1) | ((y[6] & 3) << 6); // 66555554
+    out[5 * i + 4] = (y[6] >> 2) | (y[7] << 3);                     // 77777666
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 4 bits and then serialize
+ * them as 128 bytes in output buffer `out`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] Output buffer (128 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_4bit_neon(uint8_t out[static 128], const poly_t * const p) {
+  // TODO: scalar implementation
+
+  static const uint64_t M = 41285357; // (1 << 37)/Q
+
+  for (size_t i = 0; i < 128; i++) {
+    uint16_t y[2] = { 0 };
+
+    for (size_t j = 0; j < 2; j++) {
+      const uint16_t x = (p->cs[2 * i + j] * M) >> 32; // 37 - 5
+      y[j] = 0xf & ((x >> 1) + (x & 1)); // mask(round(x*(2^4/Q)))
+    }
+
+    out[i] = y[0] | (y[1] << 4);
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 1 bit and then serialize
+ * them as 32 bytes in output buffer `out`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] Output buffer (32 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_1bit_neon(uint8_t out[static 32], const poly_t * const p) {
+  for (size_t i = 0; i < 32; i++) {
+    out[i] = (IN_RANGE(p->cs[8 * i + 0], 833, 2496)) |
+             (IN_RANGE(p->cs[8 * i + 1], 833, 2496) << 1) |
+             (IN_RANGE(p->cs[8 * i + 2], 833, 2496) << 2) |
+             (IN_RANGE(p->cs[8 * i + 3], 833, 2496) << 3) |
+             (IN_RANGE(p->cs[8 * i + 4], 833, 2496) << 4) |
+             (IN_RANGE(p->cs[8 * i + 5], 833, 2496) << 5) |
+             (IN_RANGE(p->cs[8 * i + 6], 833, 2496) << 6) |
+             (IN_RANGE(p->cs[8 * i + 7], 833, 2496) << 7);
+  }
+}
+
+/**
+ * Read 384 bytes from input buffer `b`, parse bytes as 256 packed
+ * 12-bit integers, and then save the integers as coefficients of output
+ * polynomial `p`.
+ *
+ * @note Input integers are reduced modulo 3329.  The draft standard
+ * says values in the range [3329, 4095] should be rejected as an
+ * error, but doing so introduces an ambiguous error state not present
+ * in Kyber.  According to a discussion on the pqc-forum mailing list,
+ * implicit reduction modulo 3329 is a better option.  See the
+ * discussion here:
+ *
+ * https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (384 bytes).
+ */
+static inline void poly_decode_neon(poly_t * const p, const uint8_t b[static 384]) {
+  static const uint8x16_t
+    C0_IDS = {  0,  1,  1,  2,   3,  4,  4,  5,   6,  7,  7,  8,   9, 10, 10, 11 },
+    C1_IDS = { 12, 13, 13, 14,  15, 16, 16, 17,  18, 19, 19, 20,  21, 22, 22, 23 },
+    C2_IDS = { 24, 25, 25, 26,  27, 28, 28, 29,  30, 31, 31, 32,  33, 34, 34, 35 },
+    C3_IDS = { 36, 37, 37, 38,  39, 40, 40, 41,  42, 43, 43, 44,  45, 46, 46, 47 };
+  static const uint16x8_t SHIFTS = { 0, 4, 0, 4, 0, 4, 0, 4 },
+                          MASK = { 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff };
+
+  // load batches of 48 bytes (32 coefficients)
+  for (size_t i = 0; i < 8; i++) {
+    // load 48 bytes
+    const uint8x16x3_t c = vld1q_u8_x3(b + 48*i);
+
+    // decode 32 values
+    uint16x8_t c0 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C0_IDS)) >> SHIFTS) & MASK,
+               c1 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C1_IDS)) >> SHIFTS) & MASK,
+               c2 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C2_IDS)) >> SHIFTS) & MASK,
+               c3 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C3_IDS)) >> SHIFTS) & MASK;
+
+    // reduce values
+    c0 = vsubq_u16(c0, vandq_u16(vcgeq_u16(c0, Q16), Q16)); // c0 %= Q
+    c1 = vsubq_u16(c1, vandq_u16(vcgeq_u16(c1, Q16), Q16)); // c1 %= Q
+    c2 = vsubq_u16(c2, vandq_u16(vcgeq_u16(c3, Q16), Q16)); // c2 %= Q
+    c3 = vsubq_u16(c3, vandq_u16(vcgeq_u16(c3, Q16), Q16)); // c3 %= Q
+
+    // store values
+    vst1q_u16_x4(p->cs + 32*i, ((uint16x8x4_t) { .val = { c0, c1, c2, c3 } }));
+  }
+}
+
+/**
+ * Decode packed 11-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (352 bytes).
+ */
+static inline void poly_decode_11bit_neon(poly_t * const p, const uint8_t b[static 352]) {
+  // TODO: scalar implementation
+
+  for (size_t i = 0; i < 32; i++) {
+    const uint16_t b0 = b[11 * i + 0],
+                   b1 = b[11 * i + 1],
+                   b2 = b[11 * i + 2],
+                   b3 = b[11 * i + 3],
+                   b4 = b[11 * i + 4],
+                   b5 = b[11 * i + 5],
+                   b6 = b[11 * i + 6],
+                   b7 = b[11 * i + 7],
+                   b8 = b[11 * i + 8],
+                   b9 = b[11 * i + 9],
+                   b10 = b[11 * i + 10];
+
+    // 00000000 11111000 22111111 22222222
+    // 33333332 44443333 54444444 55555555
+    // 66666655 77766666 77777777
+    const uint16_t x[8] = {
+      b0 | ((b1 & 7) << 8),
+      (b1 >> 3) | ((b2 & 0x3f) << 5),
+      (b2 >> 6) | (b3 << 2) | ((b4 & 1) << 10),
+      (b4 >> 1) | ((b5 & 0xf) << 7),
+      (b5 >> 4) | ((b6 & 0x7f) << 4),
+      (b6 >> 7) | (b7 << 1) | ((b8 & 3) << 9),
+      (b8 >> 2) | ((b9 & 0x1f) << 6),
+      (b9 >> 5) | (b10 << 3),
+    };
+
+    // decode, round, write to result
+    for (size_t j = 0; j < 8; j++) {
+      p->cs[8 * i + j] = (x[j] * Q + (1 << 10)) >> 11;
+    }
+  }
+}
+
+/**
+ * Decode packed 10-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (320 bytes).
+ */
+static inline void poly_decode_10bit_neon(poly_t * const p, const uint8_t b[static 320]) {
+  // TODO: scalar implementation
+
+  for (size_t i = 0; i < 64; i++) {
+    const uint8_t b0 = b[5 * i + 0],
+                  b1 = b[5 * i + 1],
+                  b2 = b[5 * i + 2],
+                  b3 = b[5 * i + 3],
+                  b4 = b[5 * i + 4];
+    const uint16_t x[4] = {
+      b0 | ((b1 & 3) << 8),
+      (b1 >> 2) | ((b2 & 0xf) << 6),
+      (b2 >> 4) | ((b3 & 0x3f) << 4),
+      (b3 >> 6) | (b4 << 2),
+    };
+
+    // decode, round, write to result
+    for (size_t j = 0; j < 4; j++) {
+      p->cs[4 * i + j] = (x[j] * Q + (1 << 9)) >> 10;
+    }
+  }
+}
+
+/**
+ * Decode packed 5-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (160 bytes).
+ */
+static inline void poly_decode_5bit_neon(poly_t * const p, const uint8_t b[static 160]) {
+  // TODO: scalar implementation
+
+  for (size_t i = 0; i < 32; i++) {
+    const uint16_t b0 = b[5 * i + 0],
+                   b1 = b[5 * i + 1],
+                   b2 = b[5 * i + 2],
+                   b3 = b[5 * i + 3],
+                   b4 = b[5 * i + 4];
+
+    // 11100000 32222211 44443333 66555554 77777666
+    const uint16_t x[8] = {
+      b0 & 0x1f,
+      (b0 >> 5) | ((b1 & 3) << 3),
+      (b1 >> 2) & 0x1f,
+      (b1 >> 7) | ((b2 & 0xf) << 1),
+      (b2 >> 4) | ((b3 & 1) << 4),
+      (b3 >> 1) & 0x1f,
+      (b3 >> 6) | ((b4 & 7) << 2),
+      (b4 >> 3),
+    };
+
+    // decode, round, write to result
+    for (size_t j = 0; j < 8; j++) {
+      p->cs[8 * i + j] = (x[j] * Q + (1 << 4)) >> 5;
+    }
+  }
+}
+
+/**
+ * Decode packed 4-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (128 bytes).
+ */
+static inline void poly_decode_4bit_neon(poly_t * const p, const uint8_t b[static 128]) {
+  static const uint8x8_t LO_MASK = { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf };
+  static const uint16x8_t EIGHTS = { 8, 8, 8, 8, 8, 8, 8, 8};
+
+  // 1. load 16 byte chunks
+  // 2. shift and mask into 32 4-bit values in 16-bit lanes
+  // 3. multiply by Q, add 8 (rounding), and shift by 4 to convert to coefs
+  // 3. store 32 coefs to output poly
+  for (size_t i = 0; i < 8; i++) {
+    const uint8x16_t t = vld1q_u8(b + 16*i);
+    const uint8x8_t lo = vget_low_u8(t),
+                    hi = vget_high_u8(t);
+    const uint16x8_t t0 = (vmovl_u8(lo & LO_MASK) * Q16 + EIGHTS) >> 4,
+                     t1 = (vmovl_u8(lo >> 4) * Q16 + EIGHTS) >> 4,
+                     t2 = (vmovl_u8(hi & LO_MASK) * Q16 + EIGHTS) >> 4,
+                     t3 = (vmovl_u8(hi >> 4) * Q16 + EIGHTS) >> 4;
+    vst2q_u16(p->cs + (32 * i), ((uint16x8x2_t) { .val = { t0, t1 } }));
+    vst2q_u16(p->cs + (32 * i + 16), ((uint16x8x2_t) { .val = { t2, t3 } }));
+  }
+}
+
+/**
+ * Decode packed 1-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (32 bytes).
+ */
+static inline void poly_decode_1bit_neon(poly_t * const p, const uint8_t b[static 32]) {
+  // TODO: scalar implementation
+
+  for (size_t i = 0; i < 32; i++) {
+    p->cs[8 * i + 0] = ((b[i] & 0x01) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 1] = ((b[i] & 0x02) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 2] = ((b[i] & 0x04) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 3] = ((b[i] & 0x08) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 4] = ((b[i] & 0x10) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 5] = ((b[i] & 0x20) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 6] = ((b[i] & 0x40) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 7] = ((b[i] & 0x80) ? 0xfff : 0) & 1665;
+  }
+}
+
+// define neon vector operations
+#define DEF_NEON_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_neon(poly_t v[static N], const uint8_t b[static 384*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_neon(v + i, b + (384 * i)); \
+    } \
+  } \
+  \
+  static inline void vec ## N ## _encode_neon(uint8_t out[static N*384], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_neon(out + 384*i, v + i); \
+    } \
+  }
+
+// define neon 10-bit vector operations
+#define DEF_NEON_10BIT_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_10bit_neon(poly_t v[static N], const uint8_t b[static 320*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_10bit_neon(v + i, b + 320*i); \
+    } \
+  } \
+  \
+  static inline void vec ## N ## _encode_10bit_neon(uint8_t out[static 320*N], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_10bit_neon(out + 320*i, v + i); \
+    } \
+  }
+
+#define DEF_NEON_11BIT_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_11bit_neon(poly_t v[static N], const uint8_t b[static 352*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_11bit_neon(v + i, b + 352*i); \
+    } \
+  } \
+  static inline void vec ## N ## _encode_11bit_neon(uint8_t out[static 352*N], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_11bit_neon(out + 352*i, v + i); \
+    } \
+  }
+
+// declare neon vector ops
+DEF_NEON_VEC_OPS(2)
+DEF_NEON_VEC_OPS(3)
+DEF_NEON_VEC_OPS(4)
+
+// declare neon 10-bit vector ops
+DEF_NEON_10BIT_VEC_OPS(2)
+DEF_NEON_10BIT_VEC_OPS(3)
+
+// declare neon 11-bit vector ops
+DEF_NEON_11BIT_VEC_OPS(4)
+#endif /* BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+// Scalar polynomial functions; only built if one of the following
+// conditions is met:
+//
+// 1. AVX-512 is not supported
+// 2. We are building the test suite
+
+/**
+ * Compute in-place number-theoretic transform (NTT) of polynomial `p`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[in,out] p Polynomial.
+ */
+static inline void poly_ntt_scalar(poly_t * const p) {
+  uint8_t k = 1;
+  for (uint16_t len = 128; len >= 2; len /= 2) {
+    for (uint16_t start = 0; start < 256; start += 2 * len) {
+      const uint16_t zeta = NTT_LUT[k++];
+
+      for (uint16_t j = start; j < start + len; j++) {
+        const uint16_t t = ct_mod_q(zeta * p->cs[j + len]),
+                       hi = p->cs[j] + (Q - t), // p[j] - t
+                       hi_mask = (hi >= Q) ? 0xfff : 0,
+                       lo = p->cs[j] + t, // p[j] + t
+                       lo_mask = (lo >= Q) ? 0xfff : 0;
+        p->cs[j + len] = hi - (Q & hi_mask); // hi % Q
+        p->cs[j] = lo - (Q & lo_mask); // lo % Q
+      }
+    }
+  }
+}
+
+/**
+ * Compute in-place inverse number-theoretic transform (NTT) of
+ * polynomial `p`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[in,out] p Polynomial.
+ */
+static inline void poly_inv_ntt_scalar(poly_t * const p) {
+  uint8_t k = 127;
+  for (uint16_t len = 2; len <= 128; len *= 2) {
+    for (uint16_t start = 0; start < 256; start += 2 * len) {
+      const uint16_t zeta = NTT_LUT[k--];
+
+      for (uint16_t j = start; j < start + len; j++) {
+        const uint16_t t = p->cs[j],
+              lo = p->cs[j + len] + t, // p[j + len] + t
+              lo_mask = (lo >= Q) ? 0xfff : 0;
+        p->cs[j] = lo - (Q & lo_mask); // lo % Q
+        p->cs[j + len] = ct_mod_q(zeta * ((p->cs[j + len] + (Q - t))));
+      }
+    }
+  }
+
+  for (size_t i = 0; i < 256; i++) {
+    p->cs[i] = ct_mod_q((uint32_t) p->cs[i] * 3303);
+  }
+}
+
+/**
+ * Add polynomial `a` to polynomial `b` component-wise, and store the
+ * sum in `a`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ */
+static inline void poly_add_scalar(poly_t * const restrict a, const poly_t * const restrict b) {
+  for (size_t i = 0; i < 256; i++) {
+    const uint16_t t = a->cs[i] + b->cs[i],
+                   m = (t >= Q) ? 0xffff : 0;
+    a->cs[i] = t - (Q & m);
+  }
+}
+
+/**
+ * Add polynomial `a` to polynomials `b` and `c` component-wise, and
+ * store the sum in `a`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ * @param[in] c Polynomial.
+ */
+static inline void poly_add2_scalar(poly_t * const restrict a, const poly_t * const restrict b, const poly_t * const restrict c) {
+  for (size_t i = 0; i < 256; i++) {
+    const uint16_t t0 = a->cs[i] + b->cs[i],
+                   m0 = (t0 >= Q) ? 0xffff : 0,
+                   t1 = t0 - (Q & m0) + c->cs[i],
+                   m1 = (t1 >= Q) ? 0xffff : 0;
+    a->cs[i] = t1 - (Q & m1);
+  }
+}
+
+/**
+ * Subtract polynomial `b` from polynomial `a` component-wise, and store the
+ * result in `a`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[in,out] a Polynomial.
+ * @param[in] b Polynomial.
+ */
+static inline void poly_sub_scalar(poly_t * const restrict a, const poly_t * const restrict b) {
+  for (size_t i = 0; i < 256; i++) {
+    const uint16_t t = a->cs[i] + (Q - b->cs[i]),
+                   m = (t >= Q) ? 0xfff : 0;
+    a->cs[i] = t - (m & Q);
+  }
+}
+
+/**
+ * Multiply `a` and `b` and store the product in `c`.
+ *
+ * @note `a` and `b` are assumed to be in the NTT domain.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] c Product polynomial, in the NTT domain.
+ * @param[in] a Input polynomial, in the NTT domain.
+ * @param[in] b Input polynomial, in the NTT domain.
+ */
+static inline void poly_mul_scalar(poly_t * const restrict c, const poly_t * const restrict a, const poly_t * const restrict b) {
+  for (size_t i = 0; i < 128; i++) {
+    const uint32_t a0 = a->cs[2 * i],
+                   a1 = a->cs[2 * i + 1],
+                   b0 = b->cs[2 * i],
+                   b1 = b->cs[2 * i + 1],
+                   b1z = ct_mod_q(b1 * MUL_LUT[i]);
+    c->cs[2 * i] = ct_mod_q(a0 * b0 + a1 * b1z);
+    c->cs[2 * i + 1] = ct_mod_q(a0 * b1 + a1 * b0);
+  }
+}
+
+/**
+ * Pack 12-bit coefficients of polynomial `p` and serialize them into
+ * 384 bytes of the output buffer `out`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] out Output buffer (384 bytes).
+ * @param[in] Input polynomial.
+ */
+static inline void poly_encode_scalar(uint8_t out[static 384], const poly_t * const a) {
+  for (size_t i = 0; i < 128; i++) {
+    const uint16_t a0 = a->cs[2 * i],
+                   a1 = a->cs[2 * i + 1];
+    out[3 * i] = a0 & 0x0ff;
+    out[3 * i + 1] = ((a0 & 0xf00) >> 8) | ((a1 & 0x0f) << 4);
+    out[3 * i + 2] = (a1 & 0xff0) >> 4;
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 11 bits and then serialize
+ * them as 352 bytes in output buffer `out`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] out Output buffer (352 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_11bit_scalar(uint8_t out[static 352], const poly_t * const p) {
+  static const uint64_t M = 5284525696; // (1<<44)/Q
+
+  for (size_t i = 0; i < 32; i++) {
+    uint16_t y[8] = { 0 };
+    for (size_t j = 0; j < 8; j++) {
+      const uint32_t x = (p->cs[8 * i + j] * M) >> 32; // 44 - 12
+      y[j] = 0x7ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^11/Q)))
+    }
+
+    // 00000000 11111000 22111111 22222222
+    // 33333332 44443333 54444444 55555555
+    // 66666655 77766666 77777777
+    out[11 * i + 0] = y[0] & 0xff;
+    out[11 * i + 1] = ((y[0] >> 8) & 7) | ((y[1] & 0x1f) << 3);
+    out[11 * i + 2] = ((y[1] >> 5) & 0x3f) | ((y[2] & 3) << 6);
+    out[11 * i + 3] = (y[2] >> 2) & 0xff;
+    out[11 * i + 4] = ((y[2] >> 10) & 1) | ((y[3] & 0x7f) << 1);
+    out[11 * i + 5] = ((y[3] >> 7) & 0xf) | ((y[4] & 0xf) << 4);
+    out[11 * i + 6] = ((y[4] >> 4) & 0x7f) | ((y[5] & 1) << 7);
+    out[11 * i + 7] = (y[5] >> 1) & 0xff;
+    out[11 * i + 8] = ((y[5] >> 9) & 3) | ((y[6] & 0x3f) << 2);
+    out[11 * i + 9] = ((y[6] >> 6) & 0x1f) | ((y[7] & 7) << 5);
+    out[11 * i + 10] = (y[7] >> 3) & 0xff;
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 10 bits and then serialize
+ * them as 320 bytes in output buffer `out`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] out Output buffer (320 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_10bit_scalar(uint8_t out[static 320], const poly_t * const p) {
+  static const uint64_t M = 2642262848; // (1<<43)/Q
+
+  for (size_t i = 0; i < 64; i++) {
+    uint16_t y[4] = { 0 };
+    for (size_t j = 0; j < 4; j++) {
+      const uint32_t x = (p->cs[4 * i + j] * M) >> 32; // 43 - 11
+      y[j] ^= 0x3ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^10/Q)))
+    }
+
+    out[5 * i + 0] = y[0] & 0xff;
+    out[5 * i + 1] = ((y[0] >> 8) & 0x03) | ((y[1] & 0x3f) << 2);
+    out[5 * i + 2] = ((y[1] >> 6) & 0xf) | ((y[2] & 0xf) << 4);
+    out[5 * i + 3] = ((y[2] >> 4) & 0x3f) | ((y[3] & 0x3) << 6);
+    out[5 * i + 4] = (y[3] >> 2) & 0xff;
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 5 bits and then serialize
+ * them as 160 bytes in output buffer `out`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] Output buffer (160 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_5bit_scalar(uint8_t out[static 160], const poly_t * const p) {
+  // multiplier determined emperically:
+  //   >> def real_round(n); (n*32.0/Q).round; end
+  //   => :real_round
+  //   >> def fake_round(n); v = (n*((1<<22)/Q+1)) >> 16; (v >> 1) + (v & 1); end
+  //   => :fake_round
+  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
+  //   => ""
+  static const uint16_t M = 1260; // multiplier: (1 << 22)/Q+1
+
+  for (size_t i = 0; i < 32; i++) {
+    uint16_t y[8] = { 0 };
+
+    for (size_t j = 0; j < 8; j++) {
+      const uint16_t x = (p->cs[8 * i + j] * M) >> 16; // x = c*(1<<6)/Q
+      y[j] = 0x1f & ((x >> 1) + (x & 1)); // round
+    }
+
+    out[5 * i + 0] = y[0] | ((y[1] & 0x07) << 5);                   // 11100000
+    out[5 * i + 1] = (y[1] >> 3) | (y[2] << 2) | ((y[3] & 1) << 7); // 32222211
+    out[5 * i + 2] = (y[3] >> 1) | ((y[4] & 0xf) << 4);             // 44443333
+    out[5 * i + 3] = (y[4] >> 4) | (y[5] << 1) | ((y[6] & 3) << 6); // 66555554
+    out[5 * i + 4] = (y[6] >> 2) | (y[7] << 3);                     // 77777666
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 4 bits and then serialize
+ * them as 128 bytes in output buffer `out`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] Output buffer (128 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_4bit_scalar(uint8_t out[static 128], const poly_t * const p) {
+  static const uint64_t M = 41285357; // (1 << 37)/Q
+
+  for (size_t i = 0; i < 128; i++) {
+    uint16_t y[2] = { 0 };
+
+    for (size_t j = 0; j < 2; j++) {
+      const uint16_t x = (p->cs[2 * i + j] * M) >> 32; // 37 - 5
+      y[j] = 0xf & ((x >> 1) + (x & 1)); // mask(round(x*(2^4/Q)))
+    }
+
+    out[i] = y[0] | (y[1] << 4);
+  }
+}
+
+/**
+ * Compress coefficients of polynomial `p` to 1 bit and then serialize
+ * them as 32 bytes in output buffer `out`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] Output buffer (32 bytes).
+ * @param[in] p Input polynomial.
+ */
+static inline void poly_encode_1bit_scalar(uint8_t out[static 32], const poly_t * const p) {
+  for (size_t i = 0; i < 32; i++) {
+    out[i] = (IN_RANGE(p->cs[8 * i + 0], 833, 2496)) |
+             (IN_RANGE(p->cs[8 * i + 1], 833, 2496) << 1) |
+             (IN_RANGE(p->cs[8 * i + 2], 833, 2496) << 2) |
+             (IN_RANGE(p->cs[8 * i + 3], 833, 2496) << 3) |
+             (IN_RANGE(p->cs[8 * i + 4], 833, 2496) << 4) |
+             (IN_RANGE(p->cs[8 * i + 5], 833, 2496) << 5) |
+             (IN_RANGE(p->cs[8 * i + 6], 833, 2496) << 6) |
+             (IN_RANGE(p->cs[8 * i + 7], 833, 2496) << 7);
+  }
+}
+
+/**
+ * Read 384 bytes from input buffer `b`, parse bytes as 256 packed
+ * 12-bit integers, and then save the integers as coefficients of output
+ * polynomial `p`.
+ *
+ * @note Input integers are reduced modulo 3329.  The draft standard
+ * says values in the range [3329, 4095] should be rejected as an
+ * error, but doing so introduces an ambiguous error state not present
+ * in Kyber.  According to a discussion on the pqc-forum mailing list,
+ * implicit reduction modulo 3329 is a better option.  See the
+ * discussion here:
+ *
+ * https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (384 bytes).
+ */
+static inline void poly_decode_scalar(poly_t * const p, const uint8_t b[static 384]) {
+  for (size_t i = 0; i < 128; i++) {
+    const uint8_t b0 = b[3 * i],
+                  b1 = b[3 * i + 1],
+                  b2 = b[3 * i + 2];
+
+    // decode raw lo and hi, calculate adjustments
+    const uint16_t lo = ((uint16_t) b0) | ((((uint16_t) b1) & 0xf) << 8),
+                   hi = (((uint16_t) b1 & 0xf0) >> 4) | (((uint16_t) b2) << 4),
+                   lo_adj = (lo >= Q) ? Q : 0, // lo adjustment
+                   hi_adj = (hi >= Q) ? Q : 0; // hi adjustment
+
+    // store adjusted coefficients
+    p->cs[2 * i] = lo - lo_adj;
+    p->cs[2 * i + 1] = hi - hi_adj;
+  }
+}
+
+/**
+ * Decode packed 11-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (352 bytes).
+ */
+static inline void poly_decode_11bit_scalar(poly_t * const p, const uint8_t b[static 352]) {
+  for (size_t i = 0; i < 32; i++) {
+    const uint16_t b0 = b[11 * i + 0],
+                   b1 = b[11 * i + 1],
+                   b2 = b[11 * i + 2],
+                   b3 = b[11 * i + 3],
+                   b4 = b[11 * i + 4],
+                   b5 = b[11 * i + 5],
+                   b6 = b[11 * i + 6],
+                   b7 = b[11 * i + 7],
+                   b8 = b[11 * i + 8],
+                   b9 = b[11 * i + 9],
+                   b10 = b[11 * i + 10];
+
+    // 00000000 11111000 22111111 22222222
+    // 33333332 44443333 54444444 55555555
+    // 66666655 77766666 77777777
+    const uint16_t x[8] = {
+      b0 | ((b1 & 7) << 8),
+      (b1 >> 3) | ((b2 & 0x3f) << 5),
+      (b2 >> 6) | (b3 << 2) | ((b4 & 1) << 10),
+      (b4 >> 1) | ((b5 & 0xf) << 7),
+      (b5 >> 4) | ((b6 & 0x7f) << 4),
+      (b6 >> 7) | (b7 << 1) | ((b8 & 3) << 9),
+      (b8 >> 2) | ((b9 & 0x1f) << 6),
+      (b9 >> 5) | (b10 << 3),
+    };
+
+    // decode, round, write to result
+    for (size_t j = 0; j < 8; j++) {
+      p->cs[8 * i + j] = (x[j] * Q + (1 << 10)) >> 11;
+    }
+  }
+}
+
+/**
+ * Decode packed 10-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (320 bytes).
+ */
+static inline void poly_decode_10bit_scalar(poly_t * const p, const uint8_t b[static 320]) {
+  for (size_t i = 0; i < 64; i++) {
+    const uint8_t b0 = b[5 * i + 0],
+                  b1 = b[5 * i + 1],
+                  b2 = b[5 * i + 2],
+                  b3 = b[5 * i + 3],
+                  b4 = b[5 * i + 4];
+    const uint16_t x[4] = {
+      b0 | ((b1 & 3) << 8),
+      (b1 >> 2) | ((b2 & 0xf) << 6),
+      (b2 >> 4) | ((b3 & 0x3f) << 4),
+      (b3 >> 6) | (b4 << 2),
+    };
+
+    // decode, round, write to result
+    for (size_t j = 0; j < 4; j++) {
+      p->cs[4 * i + j] = (x[j] * Q + (1 << 9)) >> 10;
+    }
+  }
+}
+
+/**
+ * Decode packed 5-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (160 bytes).
+ */
+static inline void poly_decode_5bit_scalar(poly_t * const p, const uint8_t b[static 160]) {
+  for (size_t i = 0; i < 32; i++) {
+    const uint16_t b0 = b[5 * i + 0],
+                   b1 = b[5 * i + 1],
+                   b2 = b[5 * i + 2],
+                   b3 = b[5 * i + 3],
+                   b4 = b[5 * i + 4];
+
+    // 11100000 32222211 44443333 66555554 77777666
+    const uint16_t x[8] = {
+      b0 & 0x1f,
+      (b0 >> 5) | ((b1 & 3) << 3),
+      (b1 >> 2) & 0x1f,
+      (b1 >> 7) | ((b2 & 0xf) << 1),
+      (b2 >> 4) | ((b3 & 1) << 4),
+      (b3 >> 1) & 0x1f,
+      (b3 >> 6) | ((b4 & 7) << 2),
+      (b4 >> 3),
+    };
+
+    // decode, round, write to result
+    for (size_t j = 0; j < 8; j++) {
+      p->cs[8 * i + j] = (x[j] * Q + (1 << 4)) >> 5;
+    }
+  }
+}
+
+/**
+ * Decode packed 4-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (128 bytes).
+ */
+static inline void poly_decode_4bit_scalar(poly_t * const p, const uint8_t b[static 128]) {
+  for (size_t i = 0; i < 128; i++) {
+    p->cs[2 * i + 0] = ((b[i] & 15) * Q + (1 << 3)) >> 4;
+    p->cs[2 * i + 1] = ((b[i] >> 4) * Q + (1 << 3)) >> 4;
+  }
+}
+
+/**
+ * Decode packed 1-bit coefficients from input buffer `b` into output
+ * polynomial `p`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] p Output polynomial.
+ * @param[in] b Input buffer (32 bytes).
+ */
+static inline void poly_decode_1bit_scalar(poly_t * const p, const uint8_t b[static 32]) {
+  for (size_t i = 0; i < 32; i++) {
+    p->cs[8 * i + 0] = ((b[i] & 0x01) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 1] = ((b[i] & 0x02) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 2] = ((b[i] & 0x04) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 3] = ((b[i] & 0x08) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 4] = ((b[i] & 0x10) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 5] = ((b[i] & 0x20) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 6] = ((b[i] & 0x40) ? 0xfff : 0) & 1665;
+    p->cs[8 * i + 7] = ((b[i] & 0x80) ? 0xfff : 0) & 1665;
+  }
+}
+
+/**
+ * Read 768 bytes from input buffer `b`, parse bytes as 2 packed
+ * polynomials with 12-bit coefficients, and then save the decoded
+ * polynomials to output vector `v`.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] v Output vector.
+ * @param[in] b Input buffer (768 bytes).
+ */
+
+// define scalar vector operations
+#define DEF_SCALAR_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_scalar(poly_t v[static N], const uint8_t b[static 384*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_scalar(v + i, b + (384 * i)); \
+    } \
+  } \
+  \
+  static inline void vec ## N ## _encode_scalar(uint8_t out[static N*384], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_scalar(out + 384*i, v + i); \
+    } \
+  }
+
+// define scalar 10-bit vector operations
+#define DEF_SCALAR_10BIT_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_10bit_scalar(poly_t v[static N], const uint8_t b[static 320*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_10bit_scalar(v + i, b + 320*i); \
+    } \
+  } \
+  \
+  static inline void vec ## N ## _encode_10bit_scalar(uint8_t out[static 320*N], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_10bit_scalar(out + 320*i, v + i); \
+    } \
+  }
+
+#define DEF_SCALAR_11BIT_VEC_OPS(N) \
+  static inline void vec ## N ## _decode_11bit_scalar(poly_t v[static N], const uint8_t b[static 352*N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_decode_11bit_scalar(v + i, b + 352*i); \
+    } \
+  } \
+  static inline void vec ## N ## _encode_11bit_scalar(uint8_t out[static 352*N], const poly_t v[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_encode_11bit_scalar(out + 352*i, v + i); \
+    } \
+  }
+
+// declare scalar vector ops
+DEF_SCALAR_VEC_OPS(2)
+DEF_SCALAR_VEC_OPS(3)
+DEF_SCALAR_VEC_OPS(4)
+
+// declare scalar 10-bit vector ops
+DEF_SCALAR_10BIT_VEC_OPS(2)
+DEF_SCALAR_10BIT_VEC_OPS(3)
+
+// declare scalar 11-bit vector ops
+DEF_SCALAR_11BIT_VEC_OPS(4)
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+// use avx512 backend
+#define poly_ntt poly_ntt_avx512
+#define poly_inv_ntt poly_inv_ntt_avx512
+#define poly_add poly_add_avx512
+#define poly_add2 poly_add2_avx512
+#define poly_sub poly_sub_avx512
+#define poly_mul poly_mul_avx512
+#define poly_encode poly_encode_avx512
+#define poly_encode_11bit poly_encode_11bit_avx512
+#define poly_encode_10bit poly_encode_10bit_avx512
+#define poly_encode_5bit poly_encode_5bit_avx512
+#define poly_encode_4bit poly_encode_4bit_avx512
+#define poly_encode_1bit poly_encode_1bit_avx512
+#define poly_decode poly_decode_avx512
+#define poly_decode_11bit poly_decode_11bit_avx512
+#define poly_decode_10bit poly_decode_10bit_avx512
+#define poly_decode_5bit poly_decode_5bit_avx512
+#define poly_decode_4bit poly_decode_4bit_avx512
+#define poly_decode_1bit poly_decode_1bit_avx512
+#define vec2_decode vec2_decode_avx512
+#define vec3_decode vec3_decode_avx512
+#define vec4_decode vec4_decode_avx512
+#define vec2_encode vec2_encode_avx512
+#define vec3_encode vec3_encode_avx512
+#define vec4_encode vec4_encode_avx512
+#define vec2_decode_10bit vec2_decode_10bit_avx512
+#define vec3_decode_10bit vec3_decode_10bit_avx512
+#define vec2_encode_10bit vec2_encode_10bit_avx512
+#define vec3_encode_10bit vec3_encode_10bit_avx512
+#define vec4_decode_11bit vec4_decode_11bit_avx512
+#define vec4_encode_11bit vec4_encode_11bit_avx512
+#elif BACKEND == BACKEND_NEON
+// use neon backend
+#define poly_ntt poly_ntt_neon
+#define poly_inv_ntt poly_inv_ntt_neon
+#define poly_add poly_add_neon
+#define poly_add2 poly_add2_neon
+#define poly_sub poly_sub_neon
+#define poly_mul poly_mul_neon
+#define poly_encode poly_encode_neon
+#define poly_encode_11bit poly_encode_11bit_neon
+#define poly_encode_10bit poly_encode_10bit_neon
+#define poly_encode_5bit poly_encode_5bit_neon
+#define poly_encode_4bit poly_encode_4bit_neon
+#define poly_encode_1bit poly_encode_1bit_neon
+#define poly_decode poly_decode_neon
+#define poly_decode_11bit poly_decode_11bit_neon
+#define poly_decode_10bit poly_decode_10bit_neon
+#define poly_decode_5bit poly_decode_5bit_neon
+#define poly_decode_4bit poly_decode_4bit_neon
+#define poly_decode_1bit poly_decode_1bit_neon
+#define vec2_decode vec2_decode_neon
+#define vec3_decode vec3_decode_neon
+#define vec4_decode vec4_decode_neon
+#define vec2_encode vec2_encode_neon
+#define vec3_encode vec3_encode_neon
+#define vec4_encode vec4_encode_neon
+#define vec2_decode_10bit vec2_decode_10bit_neon
+#define vec3_decode_10bit vec3_decode_10bit_neon
+#define vec2_encode_10bit vec2_encode_10bit_neon
+#define vec3_encode_10bit vec3_encode_10bit_neon
+#define vec4_decode_11bit vec4_decode_11bit_neon
+#define vec4_encode_11bit vec4_encode_11bit_neon
+#elif BACKEND == BACKEND_SCALAR
+// use scalar backend
+#define poly_ntt poly_ntt_scalar
+#define poly_inv_ntt poly_inv_ntt_scalar
+#define poly_add poly_add_scalar
+#define poly_add2 poly_add2_scalar
+#define poly_sub poly_sub_scalar
+#define poly_mul poly_mul_scalar
+#define poly_encode poly_encode_scalar
+#define poly_encode_11bit poly_encode_11bit_scalar
+#define poly_encode_10bit poly_encode_10bit_scalar
+#define poly_encode_5bit poly_encode_5bit_scalar
+#define poly_encode_4bit poly_encode_4bit_scalar
+#define poly_encode_1bit poly_encode_1bit_scalar
+#define poly_decode poly_decode_scalar
+#define poly_decode_11bit poly_decode_11bit_scalar
+#define poly_decode_10bit poly_decode_10bit_scalar
+#define poly_decode_5bit poly_decode_5bit_scalar
+#define poly_decode_4bit poly_decode_4bit_scalar
+#define poly_decode_1bit poly_decode_1bit_scalar
+#define vec2_decode vec2_decode_scalar
+#define vec3_decode vec3_decode_scalar
+#define vec4_decode vec4_decode_scalar
+#define vec2_encode vec2_encode_scalar
+#define vec3_encode vec3_encode_scalar
+#define vec4_encode vec4_encode_scalar
+#define vec2_decode_10bit vec2_decode_10bit_scalar
+#define vec3_decode_10bit vec3_decode_10bit_scalar
+#define vec2_encode_10bit vec2_encode_10bit_scalar
+#define vec3_encode_10bit vec3_encode_10bit_scalar
+#define vec4_decode_11bit vec4_decode_11bit_scalar
+#define vec4_encode_11bit vec4_encode_11bit_scalar
+#else
+#error "unknown backend"
+#endif /* BACKEND */
+
+// define operations for NxN matrices and N-dim vectors.
+#define DEF_MAT_VEC_OPS(N) \
+  /* multiply NxN matrix of polynomials in `mat` by vector of */ \
+  /* polynomials in `vec` and store the product in vector `out`. */ \
+  static inline void mat ## N ## _mul(poly_t out[static N], const poly_t mat[static N*N], const poly_t vec[static N]) { \
+    /* clear result */ \
+    memset(out, 0, N * sizeof(poly_t)); \
+    for (size_t y = 0; y < N; y++) { \
+      for (size_t x = 0; x < N; x++) { \
+        poly_t prod = { 0 }; \
+        poly_mul(&prod, mat + (N * y + x), vec + x); \
+        poly_add(out + y, &prod); \
+      } \
+    } \
+  } \
+  \
+  /* add coefficients in vectors `a` and `b` and store the results in `a`. */ \
+  static inline void vec ## N ## _add(poly_t a[static N], const poly_t b[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_add(a + i, b + i); \
+    } \
+  } \
+  \
+  /* Calculate dot product of vectors `a` and `b` and store result in polynomial `c`. */ \
+  static inline void vec ## N ## _dot(poly_t * const restrict c, const poly_t a[static N], const poly_t b[static N]) { \
+    /* clear result */ \
+    memset(c, 0, sizeof(poly_t)); \
+    for (size_t i = 0; i < N; i++) { \
+      poly_t prod = { 0 }; \
+      poly_mul(&prod, a + i, b + i); \
+      poly_add(c, &prod); \
+    } \
+  } \
+  \
+  /* apply NTT to vector */ \
+  static inline void vec ## N ## _ntt(poly_t vec[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_ntt(vec + i); \
+    } \
+  } \
+  \
+  /* apply inverse NTT to vector */ \
+  static inline void vec ## N ## _inv_ntt(poly_t vec[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      poly_inv_ntt(vec + i); \
+    } \
+  }
+
+// define mat2 and vec2 functions
+DEF_MAT_VEC_OPS(2)
+
+// define mat3 and vec3 functions
+DEF_MAT_VEC_OPS(3)
+
+// define mat4 and vec4 functions
+DEF_MAT_VEC_OPS(4)
+
+#if BACKEND == BACKEND_AVX512
+// clang does not support _bit_scan_reverse(), so emulate it with
+// _lzcnt_u32() (slower)
+#ifndef _bit_scan_reverse
+#define _bit_scan_reverse(x) (31 - _lzcnt_u32(x))
+#endif /* _bit_scan_reverse */
+
+// permute 8 keccak states stored in avx512 registers a0-a24
+#define PERMUTE_STATES_AVX512() do { \
+  /* 24 keccak rounds */ \
+  for (size_t j = 0; j < 24; j++) { \
+    /* theta */ \
+    { \
+      /* c0 = a0 ^ a1 ^ a2 ^ a3 ^ a4 */ \
+      const __m512i c0 = _mm512_ternarylogic_epi64(a0, a5, _mm512_ternarylogic_epi64(a10, a15, a20, 0x96), 0x96), \
+                    c1 = _mm512_ternarylogic_epi64(a1, a6, _mm512_ternarylogic_epi64(a11, a16, a21, 0x96), 0x96), \
+                    c2 = _mm512_ternarylogic_epi64(a2, a7, _mm512_ternarylogic_epi64(a12, a17, a22, 0x96), 0x96), \
+                    c3 = _mm512_ternarylogic_epi64(a3, a8, _mm512_ternarylogic_epi64(a13, a18, a23, 0x96), 0x96), \
+                    c4 = _mm512_ternarylogic_epi64(a4, a9, _mm512_ternarylogic_epi64(a14, a19, a24, 0x96), 0x96), \
+                    d0 = _mm512_xor_epi64(c4, _mm512_rol_epi64(c1, 1)), \
+                    d1 = _mm512_xor_epi64(c0, _mm512_rol_epi64(c2, 1)), \
+                    d2 = _mm512_xor_epi64(c1, _mm512_rol_epi64(c3, 1)), \
+                    d3 = _mm512_xor_epi64(c2, _mm512_rol_epi64(c4, 1)), \
+                    d4 = _mm512_xor_epi64(c3, _mm512_rol_epi64(c0, 1)); \
+      \
+      a0 = _mm512_xor_epi64(a0, d0); \
+      a1 = _mm512_xor_epi64(a1, d1); \
+      a2 = _mm512_xor_epi64(a2, d2); \
+      a3 = _mm512_xor_epi64(a3, d3); \
+      a4 = _mm512_xor_epi64(a4, d4); \
+      \
+      a5 = _mm512_xor_epi64(a5, d0); \
+      a6 = _mm512_xor_epi64(a6, d1); \
+      a7 = _mm512_xor_epi64(a7, d2); \
+      a8 = _mm512_xor_epi64(a8, d3); \
+      a9 = _mm512_xor_epi64(a9, d4); \
+      \
+      a10 = _mm512_xor_epi64(a10, d0); \
+      a11 = _mm512_xor_epi64(a11, d1); \
+      a12 = _mm512_xor_epi64(a12, d2); \
+      a13 = _mm512_xor_epi64(a13, d3); \
+      a14 = _mm512_xor_epi64(a14, d4); \
+      \
+      a15 = _mm512_xor_epi64(a15, d0); \
+      a16 = _mm512_xor_epi64(a16, d1); \
+      a17 = _mm512_xor_epi64(a17, d2); \
+      a18 = _mm512_xor_epi64(a18, d3); \
+      a19 = _mm512_xor_epi64(a19, d4); \
+      \
+      a20 = _mm512_xor_epi64(a20, d0); \
+      a21 = _mm512_xor_epi64(a21, d1); \
+      a22 = _mm512_xor_epi64(a22, d2); \
+      a23 = _mm512_xor_epi64(a23, d3); \
+      a24 = _mm512_xor_epi64(a24, d4); \
+    } \
+    \
+    /* rho (TODO: combine with theta and/or pi) */ \
+    a1 = _mm512_rol_epi64(a1, 1); /* 1 % 64 = 1 */ \
+    a2 = _mm512_rol_epi64(a2, 62); /* 190 % 64 = 62 */ \
+    a3 = _mm512_rol_epi64(a3, 28); /* 28 % 64 = 28 */ \
+    a4 = _mm512_rol_epi64(a4, 27); /* 91 % 64 = 27 */ \
+    a5 = _mm512_rol_epi64(a5, 36); /* 36 % 64 = 36 */ \
+    a6 = _mm512_rol_epi64(a6, 44); /* 300 % 64 = 44 */ \
+    a7 = _mm512_rol_epi64(a7, 6); /* 6 % 64 = 6 */ \
+    a8 = _mm512_rol_epi64(a8, 55); /* 55 % 64 = 55 */ \
+    a9 = _mm512_rol_epi64(a9, 20); /* 276 % 64 = 20 */ \
+    a10 = _mm512_rol_epi64(a10, 3); /* 3 % 64 = 3 */ \
+    a11 = _mm512_rol_epi64(a11, 10); /* 10 % 64 = 10 */ \
+    a12 = _mm512_rol_epi64(a12, 43); /* 171 % 64 = 43 */ \
+    a13 = _mm512_rol_epi64(a13, 25); /* 153 % 64 = 25 */ \
+    a14 = _mm512_rol_epi64(a14, 39); /* 231 % 64 = 39 */ \
+    a15 = _mm512_rol_epi64(a15, 41); /* 105 % 64 = 41 */ \
+    a16 = _mm512_rol_epi64(a16, 45); /* 45 % 64 = 45 */ \
+    a17 = _mm512_rol_epi64(a17, 15); /* 15 % 64 = 15 */ \
+    a18 = _mm512_rol_epi64(a18, 21); /* 21 % 64 = 21 */ \
+    a19 = _mm512_rol_epi64(a19, 8); /* 136 % 64 = 8 */ \
+    a20 = _mm512_rol_epi64(a20, 18); /* 210 % 64 = 18 */ \
+    a21 = _mm512_rol_epi64(a21, 2); /* 66 % 64 = 2 */ \
+    a22 = _mm512_rol_epi64(a22, 61); /* 253 % 64 = 61 */ \
+    a23 = _mm512_rol_epi64(a23, 56); /* 120 % 64 = 56 */ \
+    a24 = _mm512_rol_epi64(a24, 14); /* 78 % 64 = 14 */ \
+    \
+    /* pi */ \
+    /* use two temporary registers to temporarily cache intermediate */ \
+    /* values, then do the assignments in an odd sequence in order to */ \
+    /* prevent register spill */ \
+    { \
+      __m512i t0, t1; \
+      t0 = a1; a1 = a6; /* a1 = a6 */ \
+      t1 = a10; a10 = t0; /* a10 = a1 */ \
+      t0 = a7; a7 = t1; /* a7 = a10 */ \
+      t1 = a11; a11 = t0; /* a11 = a7 */ \
+      t0 = a17; a17 = t1; /* a17 = a11 */ \
+      t1 = a18; a18 = t0; /* a18 = a17 */ \
+      t0 = a3; a3 = t1; /* a3 = a18 */ \
+      t1 = a5; a5 = t0; /* a5 = a3 */ \
+      t0 = a16; a16 = t1; /* a16 = a5 */ \
+      t1 = a8; a8 = t0; /* a8 = a16 */ \
+      t0 = a21; a21 = t1; /* a21 = a8 */ \
+      t1 = a24; a24 = t0; /* a24 = a21 */ \
+      t0 = a4; a4 = t1; /* a4 = a24 */ \
+      t1 = a15; a15 = t0; /* a15 = a4 */ \
+      t0 = a23; a23 = t1; /* a23 = a15 */ \
+      t1 = a19; a19 = t0; /* a19 = a23 */ \
+      t0 = a13; a13 = t1; /* a13 = a19 */ \
+      t1 = a12; a12 = t0; /* a12 = a13 */ \
+      t0 = a2; a2 = t1; /* a2 = a12 */ \
+      t1 = a20; a20 = t0; /* a20 = a2 */ \
+      t0 = a14; a14 = t1; /* a14 = a20 */ \
+      t1 = a22; a22 = t0; /* a22 = a14 */ \
+      t0 = a9; a9 = t1; /* a9 = a22 */ \
+      t1 = a6; a6 = t0; /* a6 = a9 */ \
+    } \
+    \
+    /* chi */ \
+    /* use two temporary registers to cache first two keccak columns of */ \
+    /* each row, then use the cached values for the calculations of the */ \
+    /* last two columns of each row.  done this way to prevent register */ \
+    /* spill */ \
+    { \
+      __m512i t0 = a0, t1 = a1; \
+      a0 = _mm512_ternarylogic_epi64(a0, a1, a2, 0xd2); /* a0 ^= (~a1 & a2) */ \
+      a1 = _mm512_ternarylogic_epi64(a1, a2, a3, 0xd2); /* a1 ^= (~a2 & a3) */ \
+      a2 = _mm512_ternarylogic_epi64(a2, a3, a4, 0xd2); /* a2 ^= (~a3 & a4) */ \
+      a3 = _mm512_ternarylogic_epi64(a3, a4, t0, 0xd2); /* a3 ^= (~a4 & t0) */ \
+      a4 = _mm512_ternarylogic_epi64(a4, t0, t1, 0xd2); /* a4 ^= (~t0 & t1) */ \
+      t0 = a5; t1 = a6; \
+      a5 = _mm512_ternarylogic_epi64(a5, a6, a7, 0xd2); /* a5 ^= (~a6 & a7) */ \
+      a6 = _mm512_ternarylogic_epi64(a6, a7, a8, 0xd2); /* a6 ^= (~a7 & a8) */ \
+      a7 = _mm512_ternarylogic_epi64(a7, a8, a9, 0xd2); /* a7 ^= (~a8 & a9) */ \
+      a8 = _mm512_ternarylogic_epi64(a8, a9, t0, 0xd2); /* a8 ^= (~a9 & t0) */ \
+      a9 = _mm512_ternarylogic_epi64(a9, t0, t1, 0xd2); /* a9 ^= (~t0 & t1) */ \
+      t0 = a10; t1 = a11; \
+      a10 = _mm512_ternarylogic_epi64(a10, a11, a12, 0xd2); /* a10 ^= (~a11 & a12) */ \
+      a11 = _mm512_ternarylogic_epi64(a11, a12, a13, 0xd2); /* a11 ^= (~a12 & a13) */ \
+      a12 = _mm512_ternarylogic_epi64(a12, a13, a14, 0xd2); /* a12 ^= (~a13 & a14) */ \
+      a13 = _mm512_ternarylogic_epi64(a13, a14, t0, 0xd2); /* a13 ^= (~a14 & t0) */ \
+      a14 = _mm512_ternarylogic_epi64(a14, t0, t1, 0xd2); /* a14 ^= (~t0 & t1) */ \
+      t0 = a15; t1 = a16; \
+      a15 = _mm512_ternarylogic_epi64(a15, a16, a17, 0xd2); /* a15 ^= (~a16 & a17) */ \
+      a16 = _mm512_ternarylogic_epi64(a16, a17, a18, 0xd2); /* a16 ^= (~a17 & a18) */ \
+      a17 = _mm512_ternarylogic_epi64(a17, a18, a19, 0xd2); /* a17 ^= (~a18 & a19) */ \
+      a18 = _mm512_ternarylogic_epi64(a18, a19, t0, 0xd2); /* a18 ^= (~a19 & t0) */ \
+      a19 = _mm512_ternarylogic_epi64(a19, t0, t1, 0xd2); /* a19 ^= (~t0 & t1) */ \
+      t0 = a20; t1 = a21; \
+      a20 = _mm512_ternarylogic_epi64(a20, a21, a22, 0xd2); /* a20 ^= (~a21 & a22) */ \
+      a21 = _mm512_ternarylogic_epi64(a21, a22, a23, 0xd2); /* a21 ^= (~a22 & a23) */ \
+      a22 = _mm512_ternarylogic_epi64(a22, a23, a24, 0xd2); /* a22 ^= (~a23 & a24) */ \
+      a23 = _mm512_ternarylogic_epi64(a23, a24, t0, 0xd2); /* a23 ^= (~a24 & t0) */ \
+      a24 = _mm512_ternarylogic_epi64(a24, t0, t1, 0xd2); /* a24 ^= (~t0 & t1) */ \
+    } \
+    \
+    /* iota */ \
+    a0 = _mm512_xor_epi64(a0, _mm512_set1_epi64(RCS[j])); \
+  } \
+} while (0)
+
+// original value:
+//   static const uint8_t u8_id_vals[64] ALIGN(64) = {
+//     0,   1,  1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10, 10, 11,
+//     12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23,
+//     24, 25, 25, 26, 27, 28, 28, 29, 30, 31, 31, 32, 33, 34, 34, 35,
+//     36, 37, 37, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 46, 47,
+//   };
+static const __m512i SAMPLE_32_IDS = {
+  0x0504040302010100ULL, 0x0B0A0A0908070706ULL, 0x1110100F0E0D0D0CULL, 0x1716161514131312ULL,
+  0x1D1C1C1B1A191918ULL, 0x23222221201F1F1EULL, 0x2928282726252524ULL, 0x2F2E2E2D2C2B2B2AULL,
+};
+
+// orig: _mm512_set1_epi32(0x40000)
+static const __m512i SAMPLE_32_SHIFTS = {
+  0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
+  0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
+};
+
+// orig: _mm512_set1_epi16(0xfff)
+static const __m512i SAMPLE_32_MASKS = {
+  0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
+  0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
+};
+
+// sample up to 32 12-bit polynomial coefficients
+#define SAMPLE_32_COEFS(REG, OFS) do { \
+  if (lens[OFS] < 256) { \
+    /* expand 32 packed u12s into 32 u16s */ \
+    const __m512i u16s = _mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi8(SAMPLE_32_IDS, REG), SAMPLE_32_SHIFTS), SAMPLE_32_MASKS); \
+    \
+    /* build rejection sampling mask, then clamp to valid range */ \
+    __mmask32 mask = _mm512_cmplt_epi16_mask(u16s, Q16); \
+    while (_mm_popcnt_u32(mask) > 0 && (lens[OFS] + _mm_popcnt_u32(mask)) > 256) { \
+      mask ^= 1UL << _bit_scan_reverse(mask); \
+    } \
+    \
+    /* store coefficients, add to coefficient count */ \
+    _mm512_mask_compressstoreu_epi16(out[OFS].cs + lens[OFS], mask, u16s); \
+    lens[OFS] += _mm_popcnt_u32(mask); \
+  } \
+} while (0)
+
+// sample up to 16 12-bit polynomial coefficients
+#define SAMPLE_16_COEFS(REG, OFS) do { \
+  if (lens[OFS] < 256) { \
+    /* expand 16 packed u12s into 16 u16s */ \
+    const __m512i u16s = _mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi8(SAMPLE_32_IDS, REG), SAMPLE_32_SHIFTS), SAMPLE_32_MASKS); \
+    \
+    /* build rejection sampling mask, then clamp to valid range */ \
+    __mmask32 mask = _mm512_cmplt_epi16_mask(u16s, Q16) & 0xffff; \
+    while (_mm_popcnt_u32(mask) > 0 && (lens[OFS] + _mm_popcnt_u32(mask)) > 256) { \
+      mask ^= 1UL << _bit_scan_reverse(mask); \
+    } \
+    \
+    /* store coefficients, add to coefficient count */ \
+    _mm512_mask_compressstoreu_epi16(out[OFS].cs + lens[OFS], mask, u16s); \
+    lens[OFS] += _mm_popcnt_u32(mask); \
+  } \
+} while (0)
+
+// transpose permute ids
+static const __m512i TRANSPOSE_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
+                     TRANSPOSE_S0_B_IDS = { 12, 13, 14, 15, 4, 5, 6, 7 },
+                     TRANSPOSE_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
+                     TRANSPOSE_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
+                     TRANSPOSE_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
+                     TRANSPOSE_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
+
+// Transpose 8 input registers R0-R7 into 8 output registers t0-t7.
+//
+// Input:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | R0  | v00 | v01 | v02 | v03 | v04 | v05 | v06 | v07 |
+//   | R1  | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 |
+//   | R2  | v20 | v21 | v22 | v23 | v24 | v25 | v26 | v27 |
+//   | R3  | v30 | v31 | v32 | v33 | v34 | v35 | v36 | v37 |
+//   | R4  | v40 | v41 | v42 | v43 | v44 | v45 | v46 | v47 |
+//   | R5  | v50 | v51 | v52 | v53 | v54 | v55 | v56 | v57 |
+//   | R6  | v60 | v61 | v62 | v63 | v64 | v65 | v66 | v67 |
+//   | R7  | v70 | v71 | v72 | v73 | v74 | v75 | v76 | v77 |
+//   -------------------------------------------------------
+//
+// Output:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
+//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
+//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
+//   | t3  | v03 | v13 | v23 | v33 | v43 | v53 | v63 | v73 |
+//   | t4  | v04 | v14 | v24 | v34 | v44 | v54 | v64 | v74 |
+//   | t5  | v05 | v15 | v25 | v35 | v45 | v55 | v65 | v75 |
+//   | t6  | v06 | v16 | v26 | v36 | v46 | v56 | v66 | v76 |
+//   | t7  | v70 | v17 | v27 | v37 | v47 | v57 | v67 | v77 |
+//   -------------------------------------------------------
+//
+#define TRANSPOSE_8(R0, R1, R2, R3, R4, R5, R6, R7) \
+  const __m512i \
+    /* step 0 */ \
+    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_S0_A_IDS, R4), \
+    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_S0_A_IDS, R5), \
+    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_S0_A_IDS, R6), \
+    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_S0_A_IDS, R7), \
+    s0_t4 = _mm512_permutex2var_epi64(R4, TRANSPOSE_S0_B_IDS, R0), \
+    s0_t5 = _mm512_permutex2var_epi64(R5, TRANSPOSE_S0_B_IDS, R1), \
+    s0_t6 = _mm512_permutex2var_epi64(R6, TRANSPOSE_S0_B_IDS, R2), \
+    s0_t7 = _mm512_permutex2var_epi64(R7, TRANSPOSE_S0_B_IDS, R3), \
+    \
+    /* step 1 */ \
+    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2), \
+    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3), \
+    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0), \
+    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1), \
+    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6), \
+    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7), \
+    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4), \
+    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5), \
+    \
+    /* step 2 */ \
+    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1), \
+    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0), \
+    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3), \
+    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2), \
+    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5), \
+    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4), \
+    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7), \
+    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6)
+
+// transpose 8 to 7 permutation ids
+static const __m512i TRANSPOSE_8_TO_7_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
+                     TRANSPOSE_8_TO_7_S0_B_IDS = { 12, 13, 14, 15, 4, 5, 6, 7 },
+                     TRANSPOSE_8_TO_7_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
+                     TRANSPOSE_8_TO_7_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
+                     TRANSPOSE_8_TO_7_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
+                     TRANSPOSE_8_TO_7_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
+
+// Transpose 8 input registers R0-R7 into 7 output registers t0-t6.
+//
+// Input:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | R0  | v00 | v01 | v02 | v03 | v04 | v05 | v06 | n/a |
+//   | R1  | v10 | v11 | v12 | v13 | v14 | v15 | v16 | n/a |
+//   | R2  | v20 | v21 | v22 | v23 | v24 | v25 | v26 | n/a |
+//   | R3  | v30 | v31 | v32 | v33 | v34 | v35 | v36 | n/a |
+//   | R4  | v40 | v41 | v42 | v43 | v44 | v45 | v46 | n/a |
+//   | R5  | v50 | v51 | v52 | v53 | v54 | v55 | v56 | n/a |
+//   | R6  | v60 | v61 | v62 | v63 | v64 | v65 | v66 | n/a |
+//   | R7  | v70 | v71 | v72 | v73 | v74 | v75 | v76 | n/a |
+//   -------------------------------------------------------
+//
+// Output:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
+//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
+//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
+//   | t3  | v03 | v13 | v23 | v33 | v43 | v53 | v63 | v73 |
+//   | t4  | v04 | v14 | v24 | v34 | v44 | v54 | v64 | v74 |
+//   | t5  | v05 | v15 | v25 | v35 | v45 | v55 | v65 | v75 |
+//   | t6  | v06 | v16 | v26 | v36 | v46 | v56 | v66 | v76 |
+//   -------------------------------------------------------
+//
+#define TRANSPOSE_8_TO_7(R0, R1, R2, R3, R4, R5, R6, R7) \
+  const __m512i \
+    /* step 0 */ \
+    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_7_S0_A_IDS, R4), \
+    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_7_S0_A_IDS, R5), \
+    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_7_S0_A_IDS, R6), \
+    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_7_S0_A_IDS, R7), \
+    s0_t4 = _mm512_permutex2var_epi64(R4, TRANSPOSE_8_TO_7_S0_B_IDS, R0), \
+    s0_t5 = _mm512_permutex2var_epi64(R5, TRANSPOSE_8_TO_7_S0_B_IDS, R1), \
+    s0_t6 = _mm512_permutex2var_epi64(R6, TRANSPOSE_8_TO_7_S0_B_IDS, R2), \
+    s0_t7 = _mm512_permutex2var_epi64(R7, TRANSPOSE_8_TO_7_S0_B_IDS, R3), \
+    \
+    /* step 1 */ \
+    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t2), \
+    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t3), \
+    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t0), \
+    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t1), \
+    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t6), \
+    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t7), \
+    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t4), \
+    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t5), \
+    \
+    /* step 2 */ \
+    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t1), \
+    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_8_TO_7_S2_B_IDS, s1_t0), \
+    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t3), \
+    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_8_TO_7_S2_B_IDS, s1_t2), \
+    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t5), \
+    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_8_TO_7_S2_B_IDS, s1_t4), \
+    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t7)
+
+// transpose 8 to 6 permute ids
+static const __m512i TRANSPOSE_8_TO_6_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
+                     TRANSPOSE_8_TO_6_S0_B_IDS = { 12, 13, 14, 15, 4, 5, 6, 7 },
+                     TRANSPOSE_8_TO_6_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
+                     TRANSPOSE_8_TO_6_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
+                     TRANSPOSE_8_TO_6_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
+                     TRANSPOSE_8_TO_6_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
+
+// Transpose 8 input registers (R0-R7) into 6 output registers (t0-t5).
+//
+// Input:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | R0  | v00 | v01 | v02 | v03 | v04 | v05 | n/a | n/a |
+//   | R1  | v10 | v11 | v12 | v13 | v14 | v15 | n/a | n/a |
+//   | R2  | v20 | v21 | v22 | v23 | v24 | v25 | n/a | n/a |
+//   | R3  | v30 | v31 | v32 | v33 | v34 | v35 | n/a | n/a |
+//   | R4  | v40 | v41 | v42 | v43 | v44 | v45 | n/a | n/a |
+//   | R5  | v50 | v51 | v52 | v53 | v54 | v55 | n/a | n/a |
+//   | R6  | v60 | v61 | v62 | v63 | v64 | v65 | n/a | n/a |
+//   | R7  | v70 | v71 | v72 | v73 | v74 | v75 | n/a | n/a |
+//   -------------------------------------------------------
+//
+// Output:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
+//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
+//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
+//   | t3  | v03 | v13 | v23 | v33 | v43 | v53 | v63 | v73 |
+//   | t4  | v04 | v14 | v24 | v34 | v44 | v54 | v64 | v74 |
+//   | t5  | v05 | v15 | v25 | v35 | v45 | v55 | v65 | v75 |
+//   -------------------------------------------------------
+//
+#define TRANSPOSE_8_TO_6(R0, R1, R2, R3, R4, R5, R6, R7) \
+  const __m512i \
+    /* step 0 */ \
+    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_6_S0_A_IDS, R4), \
+    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_6_S0_A_IDS, R5), \
+    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_6_S0_A_IDS, R6), \
+    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_6_S0_A_IDS, R7), \
+    s0_t4 = _mm512_permutex2var_epi64(R4, TRANSPOSE_8_TO_6_S0_B_IDS, R0), \
+    s0_t5 = _mm512_permutex2var_epi64(R5, TRANSPOSE_8_TO_6_S0_B_IDS, R1), \
+    s0_t6 = _mm512_permutex2var_epi64(R6, TRANSPOSE_8_TO_6_S0_B_IDS, R2), \
+    s0_t7 = _mm512_permutex2var_epi64(R7, TRANSPOSE_8_TO_6_S0_B_IDS, R3), \
+    \
+    /* step 1 */ \
+    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t2), \
+    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t3), \
+    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_6_S1_B_IDS, s0_t0), \
+    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_6_S1_B_IDS, s0_t1), \
+    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t6), \
+    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t7), \
+    \
+    /* step 2 */ \
+    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_6_S2_A_IDS, s1_t1), \
+    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_8_TO_6_S2_B_IDS, s1_t0), \
+    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_8_TO_6_S2_A_IDS, s1_t3), \
+    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_8_TO_6_S2_B_IDS, s1_t2), \
+    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_8_TO_6_S2_A_IDS, s1_t5), \
+    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_8_TO_6_S2_B_IDS, s1_t4)
+
+// transpose ids
+static const __m512i TRANSPOSE_8_TO_3_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
+                     TRANSPOSE_8_TO_3_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
+                     TRANSPOSE_8_TO_3_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
+                     TRANSPOSE_8_TO_3_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
+                     TRANSPOSE_8_TO_3_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
+
+// Transpose 8 input registers R0-R7 into 3 output registers t0-t2.
+//
+// Input:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | R0  | v00 | v01 | v02 | n/a | n/a | n/a | n/a | n/a |
+//   | R1  | v10 | v11 | v12 | n/a | n/a | n/a | n/a | n/a |
+//   | R2  | v20 | v21 | v22 | n/a | n/a | n/a | n/a | n/a |
+//   | R3  | v30 | v31 | v32 | n/a | n/a | n/a | n/a | n/a |
+//   | R4  | v40 | v41 | v42 | n/a | n/a | n/a | n/a | n/a |
+//   | R5  | v50 | v51 | v52 | n/a | n/a | n/a | n/a | n/a |
+//   | R6  | v60 | v61 | v62 | n/a | n/a | n/a | n/a | n/a |
+//   | R7  | v70 | v71 | v72 | n/a | n/a | n/a | n/a | n/a |
+//   -------------------------------------------------------
+//
+// Output:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
+//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
+//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
+//   -------------------------------------------------------
+//
+#define TRANSPOSE_8_TO_3(R0, R1, R2, R3, R4, R5, R6, R7) \
+  const __m512i \
+    /* step 0 */ \
+    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_3_S0_A_IDS, R4), \
+    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_3_S0_A_IDS, R5), \
+    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_3_S0_A_IDS, R6), \
+    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_3_S0_A_IDS, R7), \
+    \
+    /* step 1 */ \
+    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_3_S1_A_IDS, s0_t2), \
+    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_3_S1_A_IDS, s0_t3), \
+    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_3_S1_B_IDS, s0_t0), \
+    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_3_S1_B_IDS, s0_t1), \
+    \
+    /* step 2 */ \
+    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_3_S2_A_IDS, s1_t1), \
+    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_8_TO_3_S2_B_IDS, s1_t0), \
+    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_8_TO_3_S2_A_IDS, s1_t3)
+
+// transpose 8 to 1 permute ids
+static const __m512i TRANSPOSE_8_TO_1_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
+                     TRANSPOSE_8_TO_1_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
+                     TRANSPOSE_8_TO_1_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 };
+
+// Transpose 8 input registers R0-R7 into 1 output register t0.
+//
+// Input:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | R0  | v00 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   | R1  | v10 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   | R2  | v20 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   | R3  | v30 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   | R4  | v40 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   | R5  | v50 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   | R6  | v60 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   | R7  | v70 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
+//   -------------------------------------------------------
+//
+// Output:
+//   -------------------------------------------------------
+//   |     |                     Lanes                     |
+//   |-----|-----------------------------------------------|
+//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
+//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
+//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
+//   -------------------------------------------------------
+//
+#define TRANSPOSE_8_TO_1(R0, R1, R2, R3, R4, R5, R6, R7) \
+  const __m512i \
+    /* step 0 */ \
+    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_1_S0_A_IDS, R4), \
+    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_1_S0_A_IDS, R5), \
+    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_1_S0_A_IDS, R6), \
+    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_1_S0_A_IDS, R7), \
+    \
+    /* step 1 */ \
+    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_1_S1_A_IDS, s0_t2), \
+    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_1_S1_A_IDS, s0_t3), \
+    \
+    /* step 2 */ \
+    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_1_S2_A_IDS, s1_t1)
+
+// cbd3 low permute ids
+//
+// bit offsets:
+//   i%4 = 0: i%3 = 1  i%3 = 2
+//   xxxyyyxx xyyyxxxy yyxxxyyy
+//
+// original value:
+//   static const uint8_t cbd3_lo_id_vals[64] ALIGN(64) = {
+//      0,    0,    0,    1,    1,    1,    2,    2,
+//      3,    3,    3,    4,    4,    4,    5,    5,
+//      6,    6,    6,    7,    7,    7,    8,    8,
+//      9,    9,    9,   10,   10,   10,   11,   11,
+//     12,   12,   12,   13,   13,   13,   14,   14,
+//     15,   15,   15,   16,   16,   16,   17,   17,
+//     18,   18,   18,   19,   19,   19,   20,   20,
+//     21,   21,   21,   22,   22,   22,   23,   23,
+//   };
+static const __m512i CBD3_LO_IDS = {
+  0x0202010101000000ULL, 0x0505040404030303ULL, 0x0808070707060606ULL, 0x0B0B0A0A0A090909ULL,
+  0x0E0E0D0D0D0C0C0CULL, 0x11111010100F0F0FULL, 0x1414131313121212ULL, 0x1717161616151515ULL,
+};
+
+// cbd3 low masks
+//
+// >> [7, 7<<3, 3<<6, 7<<1, 7<<4, 1<<7, 7<<2, 7<<5].reverse.map { '%02x' % [_1] }.join
+// => "e01c80700ec03807"
+static const __m512i CBD3_LO_MASKS = {
+  0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL,
+  0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL,
+};
+
+// cbd3 high permute ids
+//
+// original value:
+//   static const uint8_t cbd3_hi_id_vals[64] ALIGN(64) = {
+//      0,    0,    1,    1,    1,    2,    2,    2,
+//      3,    3,    4,    4,    4,    5,    5,    5,
+//      6,    6,    7,    7,    7,    8,    8,    8,
+//      9,    9,   10,   10,   10,   11,   11,   11,
+//     12,   12,   13,   13,   13,   14,   14,   14,
+//     15,   15,   16,   16,   16,   17,   17,   17,
+//     18,   18,   19,   19,   19,   20,   20,   20,
+//     21,   21,   22,   22,   22,   23,   23,   23,
+//   };
+static const __m512i CBD3_HI_IDS = {
+  0x0202020101010000ULL, 0x0505050404040303ULL, 0x0808080707070606ULL, 0x0B0B0B0A0A0A0909ULL,
+  0x0E0E0E0D0D0D0C0CULL, 0x1111111010100F0FULL, 0x1414141313131212ULL, 0x1717171616161515ULL,
+};
+
+// cbd3 high masks
+//
+// >> [0, 0, 1, 0, 0, 3, 0, 0].reverse.map { '%02x' % [_1] }.join
+// => "0000030000010000"
+static const __m512i CBD3_HI_MASKS = {
+  0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL,
+  0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL,
+};
+
+// orig: _mm512_set1_epi16(0xff);
+static const __m512i CBD3_X_MASK = {
+  0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL,
+  0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL,
+};
+
+// sample bytes for cbd3 polynomial
+//
+// used in:
+// - pke512 keygen for elements of s and e
+// - pke512 encrypt for elements of r
+//
+// (note: OFS is specific to pke512 because of `192 * (OFS - 4)`)
+#define SAMPLE_CBD3_BYTES(REG, OFS, LIMIT) do {\
+  if (lens[OFS] < 192) { \
+    /* build/clamp mask (up to 48 bytes) */ \
+    const __mmask64 mask = (1ULL << MIN(192 - lens[OFS], LIMIT)) - 1; \
+    \
+    /* store bytes, increment length */ \
+    _mm512_mask_storeu_epi8(cbd3_buf + 192 * (OFS - 4) + lens[OFS], mask, REG); \
+    lens[OFS] += _mm_popcnt_u64(mask); \
+  } \
+} while (0)
+
+// cbd2 x expand mask (orig: _mm512_set1_epi32(0x00300003UL))
+static const __m512i CBD2_X_MASKS = {
+  0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL,
+  0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL,
+};
+
+// cbd2 y expand mask (orig: _mm512_set1_epi32(0x00c0000cUL))
+static const __m512i CBD2_Y_MASKS = {
+  0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL,
+  0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL,
+};
+
+// cbd2 permute byte ids
+//
+// original value:
+//   static const uint8_t u8_id_vals[64] ALIGN(64) = {
+//      0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
+//      4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,
+//      8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,
+//     12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,
+//   };
+static const __m512i CBD2_ID_VALS = {
+  0x0101010100000000ULL, 0x0303030302020202ULL, 0x0505050504040404ULL, 0x0707070706060606ULL,
+  0x0909090908080808ULL, 0x0B0B0B0B0A0A0A0AULL, 0x0D0D0D0D0C0C0C0CULL, 0x0F0F0F0F0E0E0E0EULL,
+};
+
+// cbd2 increment (orig: _mm512_set1_epi8(16))
+static const __m512i CBD2_STEP = {
+  0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL,
+  0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL,
+};
+
+// Sample 32 CBD2 coefficients
+//
+// params:
+// - REG: input register
+// - POLY_OFS: output polynomial offset
+// - COEF_POS: coefficient position within polynomial
+#define SAMPLE_32_CBD2_COEFS(REG, POLY_OFS, COEF_POS) do { \
+  /* cbd2: expand 32 nibbles into into 32 unsigned 16-bit integers */ \
+  const __m512i b = _mm512_permutexvar_epi8(cbd2_ids, REG), \
+                x = _mm512_popcnt_epi16(_mm512_and_si512(b, CBD2_X_MASKS)), \
+                y = _mm512_popcnt_epi16(_mm512_and_si512(b, CBD2_Y_MASKS)); \
+  \
+  /* cs = (x + (Q - y)) % Q */ \
+  __m512i cs = _mm512_add_epi16(x, _mm512_sub_epi16(Q16, y)); /* cs = x + (Q - y) */ \
+  cs = _mm512_mask_sub_epi16(cs, _mm512_cmpge_epi16_mask(cs, Q16), cs, Q16); /* cs %= Q */ \
+  \
+  /* store */ \
+  _mm512_storeu_epi16(out[POLY_OFS].cs + (COEF_POS), cs); \
+} while (0)
+
+// Sample 32 CBD2 coefficients if the output polynomial does not
+// already have 256 coefficients (used by PKE768).
+//
+// params:
+// - REG: input register
+// - POLY_OFS: output polynomial offset
+// - COEF_POS: coefficient position within polynomial
+#define MAYBE_SAMPLE_32_CBD2_COEFS(REG, POLY_OFS, COEF_POS) do { \
+  if (lens[POLY_OFS] < 256) { \
+    /* sample coefficients */ \
+    SAMPLE_32_CBD2_COEFS(REG, POLY_OFS, COEF_POS); \
+    \
+    /* increment length */ \
+    lens[POLY_OFS] += 32; \
+  } \
+} while (0)
+
+// Permute ids to move lanes 4-7 to lanes 0-3.  We don't care about the
+// high lane values (they are masked to zero in the permute).
+static const __m512i HI_SWAP_IDS = { 4, 5, 6, 7, 0, 0, 0, 0 };
+
+// 256 in 4 32-bit lanes of 128-bit register
+static const __m128i K256x4 = { 0x0000010000000100ULL, 0x0000010000000100ULL };
+
+// 256 in 8 32-bit lanes of 256-bit register
+static const __m256i K256x8 = { 0x0000010000000100ULL, 0x0000010000000100ULL, 0x0000010000000100ULL, 0x0000010000000100ULL };
+
+/**
+ * Sample polynomials for pke512_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[1,0], A[1,1], s[0],
+ * s[1], e[0], and e[1].
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out 8 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke512_keygen_sample_avx512(poly_t out[static 8], const uint8_t seed[static 64]) {
+  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
+
+  // lens:
+  // - indices 0-3: number of coefficients for Ahat entries
+  // - indices 4-7: number of bytes squeezed for s and e entries (192
+  //   bytes each)
+  uint32_t lens[8] ALIGN(64) = { 0 }; // polynomial lengths
+
+  // bytes used for CBD3 calculation for elements of s and e
+  // (48 * 4 = 192 bytes per polynomial)
+  uint8_t cbd3_buf[192*4] = { 0 };
+
+  // keccak state:
+  //   -------------------------------------
+  //   | Row |          Registers          |
+  //   |-----|-----------------------------|
+  //   |  2  | a13 | a14 | a10 | a11 | a12 |
+  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
+  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
+  //   |  4  | a23 | a24 | a20 | a21 | a22 |
+  //   |  3  | a18 | a19 | a15 | a16 | a17 |
+  //   -------------------------------------
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-3: rho for a
+  // - lanes 4-7: rho for s and e
+  __m512i a0 = _mm512_setr_epi64(ap[0], ap[0], ap[0], ap[0], sp[0], sp[0], sp[0], sp[0]),
+          a1 = _mm512_setr_epi64(ap[1], ap[1], ap[1], ap[1], sp[1], sp[1], sp[1], sp[1]),
+          a2 = _mm512_setr_epi64(ap[2], ap[2], ap[2], ap[2], sp[2], sp[2], sp[2], sp[2]),
+          a3 = _mm512_setr_epi64(ap[3], ap[3], ap[3], ap[3], sp[3], sp[3], sp[3], sp[3]);
+
+  // keccak state, row 0, column 4
+  // lanes 0-3: A matrix element coordinates (j, i) and shake padding (0x1f)
+  // lanes 4-7: s, e vector element index and shake padding (0x1f)
+  //
+  // NOTE: the A element coordinates are transposed here versus
+  // pke512_encrypt() and pke512_decrypt(), because this code is
+  // sampling A and pke512_encrypt() and pke512_decrypt() are sampling
+  // the transpose of A.
+  static const __m512i a4_vals = { 0x1f0000, 0x1f0001, 0x1f0100, 0x1f0101, 0x1f00, 0x1f01, 0x1f02, 0x1f03 };
+  __m512i a4 = a4_vals;
+
+  // keccak state, rows 1-2 (all zero)
+  __m512i a5 = _mm512_setzero_si512(),
+          a6 = _mm512_setzero_si512(),
+          a7 = _mm512_setzero_si512(),
+          a8 = _mm512_setzero_si512(),
+          a9 = _mm512_setzero_si512(),
+          a10 = _mm512_setzero_si512(),
+          a11 = _mm512_setzero_si512(),
+          a12 = _mm512_setzero_si512(),
+          a13 = _mm512_setzero_si512(),
+          a14 = _mm512_setzero_si512();
+
+  // keccak state, row 3
+  // a16 (column 1), lanes 4-7: set high bit in last byte of shake256 rate
+  // all other cells: all zero
+  __m512i a15 = _mm512_setzero_si512(),
+          a16 = _mm512_maskz_set1_epi64(0xf0, 0x8000000000000000ULL),
+          a17 = _mm512_setzero_si512(),
+          a18 = _mm512_setzero_si512(),
+          a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // a20 (column 0), lanes 0-3: set high bit in last byte of shake128 rate
+  // all other cells: all zero
+  __m512i a20 = _mm512_maskz_set1_epi64(0x0f, 0x8000000000000000ULL),
+          a21 = _mm512_setzero_si512(),
+          a22 = _mm512_setzero_si512(),
+          a23 = _mm512_setzero_si512(),
+          a24 = _mm512_setzero_si512();
+
+  // loop until all Ahat polynomials have 256 coefficients
+  // (e.g., len[0..3] == 256)
+  //
+  // note: once this happens then 192 bytes will also have been squeezed
+  // for all s/e polynomials (e.g. len[4..7] == 192)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-3: permuted shake128 state for 4 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    // - lanes 4-8: permuted shake256 state for 2 s vector elements and
+    //   2 e vector coefficients (have 17*8 = 136 bytes, need 64*eta1 =
+    //   64*3 = 192 bytes per poly, or 2 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t4: 64 bytes of SHAKE256 output for s[0]
+    //    - t5: 64 bytes of SHAKE256 output for s[1]
+    //    - t6: 64 bytes of SHAKE256 output for e[0]
+    //    - t7: 64 bytes of SHAKE256 output for s[1]
+    //
+    // 2. For t0-t3, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. For t4-t7, we do the following:
+    //    a. Append up to 48 bytes into the XOF byte stream buffer
+    //       (`cbd3_buf`).
+    //    b. Increment the buffer length.
+    //
+    // 4. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t3 as per step #2, and registers
+    //    t4-t7 as per step #3.
+    //
+    // 5. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t3 as per step #2.  Registers t4-t7
+    //    are processed as per step #3, *except* that only up to 40
+    //    bytes are sampled instead of 48 (the last 8 bytes are part of
+    //    the SHAKE256 rate).
+    //
+    // 6. Transpose the 4x4 matrix in registers a18-a21.  This organizes
+    //    the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[1, 1]
+    //
+    // 7. For t0-t3, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
+
+      // sample bytes
+      SAMPLE_CBD3_BYTES(t4, 4, 48); // s[0]
+      SAMPLE_CBD3_BYTES(t5, 5, 48); // s[1]
+      SAMPLE_CBD3_BYTES(t6, 6, 48); // e[0]
+      SAMPLE_CBD3_BYTES(t7, 7, 48); // e[1]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
+
+      // sample bytes
+      SAMPLE_CBD3_BYTES(t4, 4, 48); // s[0]
+      SAMPLE_CBD3_BYTES(t5, 5, 48); // s[1]
+      SAMPLE_CBD3_BYTES(t6, 6, 48); // e[0]
+      SAMPLE_CBD3_BYTES(t7, 7, 48); // e[1]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
+
+      // sample bytes (40)
+      SAMPLE_CBD3_BYTES(t4, 4, 40); // s[0]
+      SAMPLE_CBD3_BYTES(t5, 5, 40); // s[1]
+      SAMPLE_CBD3_BYTES(t6, 6, 40); // e[0]
+      SAMPLE_CBD3_BYTES(t7, 7, 40); // e[1]
+    }
+
+    // a18-a21 transpose
+    {
+      // note: 4x transpose step 0 and step 1 are 8x transpose step 1
+      // and step 2, respectively
+
+      // transpose step 0
+      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_S1_A_IDS, a20),
+                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_S1_A_IDS, a21),
+                    s0_t2 = _mm512_permutex2var_epi64(a20, TRANSPOSE_S1_B_IDS, a18),
+                    s0_t3 = _mm512_permutex2var_epi64(a21, TRANSPOSE_S1_B_IDS, a19);
+
+      // transpose step 1
+      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S2_A_IDS, s0_t1),
+                    t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S2_B_IDS, s0_t0),
+                    t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S2_A_IDS, s0_t3),
+                    t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S2_B_IDS, s0_t2);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_16_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_16_COEFS(t2, 2); // Ahat[1, 0]
+      SAMPLE_16_COEFS(t3, 3); // Ahat[1, 1]
+    }
+  } while (_mm_cmpneq_epi32_mask(_mm_load_epi32(lens), K256x4));
+
+  // at this point cbd3_buf has 192 bytes for each element of s and e.
+  // sample 24 bytes at a time, expand to 32 coefficients, and write
+  // coefficients to output polynomials
+
+  // loop 4 times (2 elements in `s` + 2 elements in `e` = 4)
+  for (size_t i = 0; i < 4; i++) {
+    for (size_t j = 0; j < 8; j++) {
+      const __m512i b = _mm512_maskz_loadu_epi8(0xffffff, cbd3_buf + 192 * i + 24 * j),
+                    // count low bits
+                    lo_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_LO_IDS, b), CBD3_LO_MASKS)),
+                    // count high bits
+                    hi_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_HI_IDS, b), CBD3_HI_MASKS)),
+                    sums = _mm512_add_epi8(lo_sums, hi_sums),
+                    x = _mm512_and_si512(sums, CBD3_X_MASK),
+                    y = _mm512_srli_epi16(sums, 8);
+
+      // vals = (x + (Q - y)) % Q
+      __m512i vals = _mm512_add_epi16(x, _mm512_sub_epi16(Q16, y));
+      vals = _mm512_mask_sub_epi16(vals, _mm512_cmpge_epu16_mask(vals, Q16), vals, Q16);
+
+      // store coefficients
+      _mm512_storeu_epi16(out[4 + i].cs + 32 * j, vals);
+    }
+  }
+}
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_NEON
+
+// zeros and shake hi bits
+// used to initialize shake contexts
+static const uint64x2_t ZZ = { 0, 0 },
+                        II = { 0x8000000000000000ULL, 0x8000000000000000ULL };
+
+// rotate elements in uint64x2_t left by N bits
+// note: want vrax1q_u64(), but it's not supported on systems w/o sha3
+// extension (lemon, pizza, etc)
+#define VROLQ(A, N) vsriq_n_u64(vshlq_n_u64((A), (N)), (A), 64-(N))
+
+// permute 2 keccak states stored in neon registers a0-a24
+//
+// keccak state layout (1 context per u64 lane):
+//   -------------------------------------
+//   | Row |          Registers          |
+//   |-----|-----------------------------|
+//   |  2  | a13 | a14 | a10 | a11 | a12 |
+//   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
+//   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
+//   |  4  | a23 | a24 | a20 | a21 | a22 |
+//   |  3  | a18 | a19 | a15 | a16 | a17 |
+//   -------------------------------------
+#define PERMUTE_STATES_NEON() do { \
+  /* 24 keccak rounds */ \
+  for (size_t j = 0; j < 24; j++) { \
+    /* theta */ \
+    { \
+      /* c0 = a0 ^ a1 ^ a2 ^ a3 ^ a4 */ \
+      const uint64x2_t c0 = a0 ^ a5 ^ a10 ^ a15 ^ a20, \
+                       c1 = a1 ^ a6 ^ a11 ^ a16 ^ a21, \
+                       c2 = a2 ^ a7 ^ a12 ^ a17 ^ a22, \
+                       c3 = a3 ^ a8 ^ a13 ^ a18 ^ a23, \
+                       c4 = a4 ^ a9 ^ a14 ^ a19 ^ a24; \
+      const uint64x2_t d0 = c4 ^ VROLQ(c1, 1), \
+                       d1 = c0 ^ VROLQ(c2, 1), \
+                       d2 = c1 ^ VROLQ(c3, 1), \
+                       d3 = c2 ^ VROLQ(c4, 1), \
+                       d4 = c3 ^ VROLQ(c0, 1); \
+      \
+      a0 ^= d0; a1 ^= d1; a2 ^= d2; a3 ^= d3; a4 ^= d4;\
+      a5 ^= d0; a6 ^= d1; a7 ^= d2; a8 ^= d3; a9 ^= d4; \
+      a10 ^= d0; a11 ^= d1; a12 ^= d2; a13 ^= d3; a14 ^= d4; \
+      a15 ^= d0; a16 ^= d1; a17 ^= d2; a18 ^= d3; a19 ^= d4; \
+      a20 ^= d0; a21 ^= d1; a22 ^= d2; a23 ^= d3; a24 ^= d4; \
+    } \
+    \
+    /* rho (TODO: combine with theta and/or pi) */ \
+    a1 = VROLQ(a1, 1); /* 1 % 64 = 1 */ \
+    a2 = VROLQ(a2, 62); /* 190 % 64 = 62 */ \
+    a3 = VROLQ(a3, 28); /* 28 % 64 = 28 */ \
+    a4 = VROLQ(a4, 27); /* 91 % 64 = 27 */ \
+    a5 = VROLQ(a5, 36); /* 36 % 64 = 36 */ \
+    a6 = VROLQ(a6, 44); /* 300 % 64 = 44 */ \
+    a7 = VROLQ(a7, 6); /* 6 % 64 = 6 */ \
+    a8 = VROLQ(a8, 55); /* 55 % 64 = 55 */ \
+    a9 = VROLQ(a9, 20); /* 276 % 64 = 20 */ \
+    a10 = VROLQ(a10, 3); /* 3 % 64 = 3 */ \
+    a11 = VROLQ(a11, 10); /* 10 % 64 = 10 */ \
+    a12 = VROLQ(a12, 43); /* 171 % 64 = 43 */ \
+    a13 = VROLQ(a13, 25); /* 153 % 64 = 25 */ \
+    a14 = VROLQ(a14, 39); /* 231 % 64 = 39 */ \
+    a15 = VROLQ(a15, 41); /* 105 % 64 = 41 */ \
+    a16 = VROLQ(a16, 45); /* 45 % 64 = 45 */ \
+    a17 = VROLQ(a17, 15); /* 15 % 64 = 15 */ \
+    a18 = VROLQ(a18, 21); /* 21 % 64 = 21 */ \
+    a19 = VROLQ(a19, 8); /* 136 % 64 = 8 */ \
+    a20 = VROLQ(a20, 18); /* 210 % 64 = 18 */ \
+    a21 = VROLQ(a21, 2); /* 66 % 64 = 2 */ \
+    a22 = VROLQ(a22, 61); /* 253 % 64 = 61 */ \
+    a23 = VROLQ(a23, 56); /* 120 % 64 = 56 */ \
+    a24 = VROLQ(a24, 14); /* 78 % 64 = 14 */ \
+    \
+    /* pi */ \
+    /* use two temporary registers to temporarily cache intermediate */ \
+    /* values, then do the assignments in an odd sequence in order to */ \
+    /* prevent register spill */ \
+    { \
+      uint64x2_t t0, t1; \
+      t0 = a1; a1 = a6; /* a1 = a6 */ \
+      t1 = a10; a10 = t0; /* a10 = a1 */ \
+      t0 = a7; a7 = t1; /* a7 = a10 */ \
+      t1 = a11; a11 = t0; /* a11 = a7 */ \
+      t0 = a17; a17 = t1; /* a17 = a11 */ \
+      t1 = a18; a18 = t0; /* a18 = a17 */ \
+      t0 = a3; a3 = t1; /* a3 = a18 */ \
+      t1 = a5; a5 = t0; /* a5 = a3 */ \
+      t0 = a16; a16 = t1; /* a16 = a5 */ \
+      t1 = a8; a8 = t0; /* a8 = a16 */ \
+      t0 = a21; a21 = t1; /* a21 = a8 */ \
+      t1 = a24; a24 = t0; /* a24 = a21 */ \
+      t0 = a4; a4 = t1; /* a4 = a24 */ \
+      t1 = a15; a15 = t0; /* a15 = a4 */ \
+      t0 = a23; a23 = t1; /* a23 = a15 */ \
+      t1 = a19; a19 = t0; /* a19 = a23 */ \
+      t0 = a13; a13 = t1; /* a13 = a19 */ \
+      t1 = a12; a12 = t0; /* a12 = a13 */ \
+      t0 = a2; a2 = t1; /* a2 = a12 */ \
+      t1 = a20; a20 = t0; /* a20 = a2 */ \
+      t0 = a14; a14 = t1; /* a14 = a20 */ \
+      t1 = a22; a22 = t0; /* a22 = a14 */ \
+      t0 = a9; a9 = t1; /* a9 = a22 */ \
+      t1 = a6; a6 = t0; /* a6 = a9 */ \
+    } \
+    \
+    /* chi */ \
+    /* notes: */ \
+    /* - use two temporary registers to cache first two keccak columns of */ \
+    /*   each row, then use the cached values for the calculations of the */ \
+    /*   last two columns of each row.  done this way to prevent spill */ \
+    /* - represent (~a & b) as vbicq_u64(b, a) (e.g. b & ~a) */ \
+    { \
+      uint64x2_t t0 = a0, t1 = a1; \
+      a0 ^= vbicq_u64(a2, a1); /* a0 ^= (~a1 & a2) */ \
+      a1 ^= vbicq_u64(a3, a2); /* a1 ^= (~a2 & a3) */ \
+      a2 ^= vbicq_u64(a4, a3); /* a2 ^= (~a3 & a4) */ \
+      a3 ^= vbicq_u64(t0, a4); /* a3 ^= (~a4 & t0) */ \
+      a4 ^= vbicq_u64(t1, t0); /* a4 ^= (~t0 & t1) */ \
+      t0 = a5; t1 = a6; \
+      a5 ^= vbicq_u64(a7, a6); /* a5 ^= (~a6 & a7) */ \
+      a6 ^= vbicq_u64(a8, a7); /* a6 ^= (~a7 & a8) */ \
+      a7 ^= vbicq_u64(a9, a8); /* a7 ^= (~a8 & a9) */ \
+      a8 ^= vbicq_u64(t0, a9); /* a8 ^= (~a9 & t0) */ \
+      a9 ^= vbicq_u64(t1, t0); /* a9 ^= (~t0 & t1) */ \
+      t0 = a10; t1 = a11; \
+      a10 ^= vbicq_u64(a12, a11); /* a10 ^= (~a11 & a12) */ \
+      a11 ^= vbicq_u64(a13, a12); /* a11 ^= (~a12 & a13) */ \
+      a12 ^= vbicq_u64(a14, a13); /* a12 ^= (~a13 & a14) */ \
+      a13 ^= vbicq_u64(t0, a14); /* a13 ^= (~a14 & t0) */ \
+      a14 ^= vbicq_u64(t1, t0); /* a14 ^= (~t0 & t1) */ \
+      t0 = a15; t1 = a16; \
+      a15 ^= vbicq_u64(a17, a16); /* a15 ^= (~a16 & a17) */ \
+      a16 ^= vbicq_u64(a18, a17); /* a16 ^= (~a17 & a18) */ \
+      a17 ^= vbicq_u64(a19, a18); /* a17 ^= (~a18 & a19) */ \
+      a18 ^= vbicq_u64(t0, a19); /* a18 ^= (~a19 & t0) */ \
+      a19 ^= vbicq_u64(t1, t0); /* a19 ^= (~t0 & t1) */ \
+      t0 = a20; t1 = a21; \
+      a20 ^= vbicq_u64(a22, a21); /* a20 ^= (~a21 & a22) */ \
+      a21 ^= vbicq_u64(a23, a22); /* a21 ^= (~a22 & a23) */ \
+      a22 ^= vbicq_u64(a24, a23); /* a22 ^= (~a23 & a24) */ \
+      a23 ^= vbicq_u64(t0, a24); /* a23 ^= (~a24 & t0) */ \
+      a24 ^= vbicq_u64(t1, t0); /* a24 ^= (~t0 & t1) */ \
+    } \
+    \
+    /* iota */ \
+    a0 ^= vld1q_dup_u64(RCS + j); \
+  } \
+} while (0)
+
+// squeeze bytes from two shake128 contexts in registers a0-a24 and
+// store them in buffer as interleaved u64s
+#define SQUEEZE_AHATS_NEON(BUF) do { \
+  vst1q_u64_x4((BUF) +  0, ((uint64x2x4_t) { .val = {  a0,  a1,  a2,  a3 } })); \
+  vst1q_u64_x4((BUF) +  8, ((uint64x2x4_t) { .val = {  a4,  a5,  a6,  a7 } })); \
+  vst1q_u64_x4((BUF) + 16, ((uint64x2x4_t) { .val = {  a8,  a9, a10, a11 } })); \
+  vst1q_u64_x4((BUF) + 24, ((uint64x2x4_t) { .val = { a12, a13, a14, a15 } })); \
+  vst1q_u64_x4((BUF) + 32, ((uint64x2x4_t) { .val = { a16, a17, a18, a19 } })); \
+  vst1q_u64((BUF) + 40, a20); \
+} while (0)
+
+// squeeze bytes from two shake256 contexts in registers a0-a24
+// and store them to buffer as interleaved u64s
+#define SQUEEZE_CBD2S_NEON(BUF) do { \
+  vst1q_u64_x4((BUF) +  0, ((uint64x2x4_t) { .val = {  a0,  a1,  a2,  a3 } })); \
+  vst1q_u64_x4((BUF) +  8, ((uint64x2x4_t) { .val = {  a4,  a5,  a6,  a7 } })); \
+  vst1q_u64_x4((BUF) + 16, ((uint64x2x4_t) { .val = {  a8,  a9, a10, a11 } })); \
+  vst1q_u64_x4((BUF) + 24, ((uint64x2x4_t) { .val = { a12, a13, a14, a15 } })); \
+  vst1q_u64((BUF) + 32, a16); \
+} while (0)
+
+/**
+ * @brief Sample 16 12-bit values from 24 bytes, then append valid
+ * values (<Q) to the output polynomial.
+ *
+ * @param[out] out Output polynomial.
+ * @param[in] out Polynomial coefficient count.
+ * @param[in] d0 First input chunk (8 bytes).
+ * @param[in] d1 Second input chunk (8 bytes).
+ * @param[in] d2 Third input chunk (8 bytes).
+ *
+ * @return Updated polynomial coefficient count.
+ */
+static inline uint32_t neon_ahat_coefs(poly_t * const out, uint32_t len, const uint64_t d0, const uint64_t d1, const uint64_t d2) {
+  static const uint8x8_t C0_LO_IDS = { 0, 1, 3, 4, 6, 7, 9, 10 },
+                         C0_HI_IDS = { 1, 2, 4, 5, 7, 8, 10, 11 },
+                         C1_LO_IDS = { 12, 13, 15, 16, 18, 19, 21, 22 },
+                         C1_HI_IDS = { 13, 14, 16, 17, 19, 20, 22, 23 },
+                         LO_MASK = { 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0 },
+                         HI_MASK = { 0x0f, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0x0f, 0xff };
+  static const uint16x8_t LO_SHIFT = { 0, 4, 0, 4, 0, 4, 0, 4 },
+                          HI_SHIFT = { 8, 4, 8, 4, 8, 4, 8, 4 };
+
+  if (len >= 256) {
+    return len;
+  }
+
+  // get next 16 raw values
+  uint16_t raw[16] = { 0 };
+  {
+    // convert u64s to u8x8,
+    const uint8x8x3_t d = { .val = { vreinterpret_u8_u64(vcreate_u64(d0)), vreinterpret_u8_u64(vcreate_u64(d1)), vreinterpret_u8_u64(vcreate_u64(d2)) } };
+
+    // decode u12s values
+    uint16x8x2_t s;
+    s.val[0] = (vmovl_u8(vtbl3_u8(d, C0_LO_IDS) & LO_MASK) >> LO_SHIFT) | (vmovl_u8(vtbl3_u8(d, C0_HI_IDS) & HI_MASK) << HI_SHIFT);
+    s.val[1] = (vmovl_u8(vtbl3_u8(d, C1_LO_IDS) & LO_MASK) >> LO_SHIFT) | (vmovl_u8(vtbl3_u8(d, C1_HI_IDS) & HI_MASK) << HI_SHIFT);
+
+    // store decoded values
+    vst1q_u16_x2(raw, s);
+  }
+
+  // rejection sample, count valid values
+  //
+  // the body of this for loop looks weird (copying on every iteration,
+  // but only conditionally incrementing num_valid); writing it this way
+  // saves thousands of median cycles on a76
+  //
+  //   set,function,before,after
+  //   kem512,keygen,58161,53711
+  //   kem512,encaps,64703,61321
+  //   kem512,decaps,74760,73648
+  //   kem768,keygen,102172,92516
+  //   kem768,encaps,111784,104887
+  //   kem768,decaps,124956,121530
+  //   kem1024,keygen,156951,140309
+  //   kem1024,encaps,169322,155216
+  //   kem1024,decaps,184719,176220
+  //
+  uint16_t valid[16];
+  size_t num_valid = 0;
+  for (size_t i = 0; i < 16; i++) {
+    valid[num_valid] = raw[i];
+    num_valid += (__builtin_expect(raw[i] < Q, 1)) ? 1 : 0;
+  }
+
+  // store coefficients, return updated length
+  const size_t num = MIN(256 - len, num_valid);
+  memcpy(out->cs + len, valid, num * sizeof(uint16_t));
+  return len + num;
+}
+
+/**
+ * @brief Sample poly from buffer containing 41 interleaved u64s.
+ *
+ * @param[out] out Output polynomial.
+ * @param[in] buf 41 interleaved u64s (21 u64s x 2 polys - 1.  Only even
+ * u64s are used.
+ * @return Updated polynomial coefficient count.
+ */
+static inline uint32_t neon_sample_ahat_poly(poly_t * const out, uint32_t len, const uint64_t buf[static 41]) {
+  // loop over chunks and sample coefficients
+  for (size_t ci = 0; (len < 256) && ci < 21; ci += 3) {
+    len = neon_ahat_coefs(out, len, buf[2*ci + 0],buf[2*ci + 2], buf[2*ci + 4]);
+  }
+
+  // return updated length
+  return len;
+}
+
+/**
+ * @brief Sample 2 polys from buffer containing 42 interleaved u64s.
+ *
+ * @param[out] out Pointer to 2 output polynomials.
+ * @param[in,out] lens Number of coefficients for output polynomials.
+ * @param[in] buf 42 interleaved u64s (21 u64s per polynomial x 2 polynomials)
+ */
+static inline void neon_sample_ahat_polys(poly_t out[static 2], uint32_t lens[static 2], const uint64_t buf[static 42]) {
+  // loop over polys
+  for (size_t pi = 0; pi < 2; pi++) {
+    lens[pi] = neon_sample_ahat_poly(out + pi, lens[pi], buf + pi);
+  }
+}
+
+/**
+ * @brief Sample coefs for two CBD3 polys from buffer containing interleaved u64s.
+ *
+ * @param[out] out Output polynomials.
+ * @param[in,out] lens Number of coefficients for output polynomials.
+ * @param[in] buf 48 interleaved u64s (24 u64s per polynomial x 2 polynomials)
+ */
+static inline void neon_sample_cbd3_polys(poly_t out[static 2], const uint64_t u64s[static 48]) {
+  static const uint8x8_t X0_IDS = { 0, 0, 1, 2, 3, 3, 4, 5 },
+                         X1_IDS = { 0, 1, 1, 2, 3, 4, 4, 5 },
+                         Y0_IDS = { 0, 1, 1, 2, 3, 4, 4, 5 },
+                         Y1_IDS = { 0, 1, 2, 2, 3, 4, 5, 5 },
+                         X0_MASK = { 7<<0, 3<<6, 7<<4, 7<<2, 7<<0, 3<<6, 7<<4, 7<<2 },
+                         X1_MASK = { 0, 1, 0, 0, 0, 1, 0, 0 },
+                         Y0_MASK = { 7<<3, 7<<1, 1<<7, 7<<5, 7<<3, 7<<1, 1<<7, 7<<5 },
+                         Y1_MASK = { 0, 0, 3<<0, 0, 0, 0, 3<<0, 0 },
+                         STEP = { 6, 6, 6, 6, 6, 6, 6, 6 };
+
+  // process 8 chunks of 6 u64s (3 u64s per poly)
+  for (size_t bi = 0; bi < 8; bi++) {
+    // load 6 u64s (6*8 = 48 bytes, 24 bytes per poly)
+    const uint64x2x3_t b = vld1q_u64_x3(u64s + (6*bi));
+    const uint64x2_t b0 = b.val[0],
+                     b1 = b.val[1],
+                     b2 = b.val[2];
+
+    // poly 0 data (low lanes)
+    const uint8x8x3_t d0 = { .val =  { vreinterpret_u8_u64(vget_low_u64(b0)), vreinterpret_u8_u64(vget_low_u64(b1)), vreinterpret_u8_u64(vget_low_u64(b2)) } };
+
+    // poly 1 data (high lanes)
+    uint8x8x3_t d1 = { .val = { vreinterpret_u8_u64(vget_high_u64(b0)), vreinterpret_u8_u64(vget_high_u64(b1)), vreinterpret_u8_u64(vget_high_u64(b2)) } };
+
+    // loop over 4 chunks of 6 bytes
+    uint8x8_t x0 = X0_IDS, x1 = X1_IDS, y0 = Y0_IDS, y1 = Y1_IDS;
+    for (size_t ci = 0; ci < 4; ci++) {
+      // sample 8 poly 0 coefs
+      {
+        const uint16x8_t xs = vmovl_u8(vcnt_u8(vtbl3_u8(d0, x0) & X0_MASK) + vcnt_u8(vtbl3_u8(d0, x1) & X1_MASK)),
+                         ys = vmovl_u8(vcnt_u8(vtbl3_u8(d0, y0) & Y0_MASK) + vcnt_u8(vtbl3_u8(d0, y1) & Y1_MASK));
+        uint16x8_t cs = xs + Q16 - ys; // get coefs
+        cs = vsubq_u16(cs, vandq_u16(vcgeq_u16(cs, Q16), Q16)); // cs %= Q
+        vst1q_u16(out[0].cs + 32*bi + 8*ci, cs); // store
+      }
+
+      // sample 8 poly 1 coefs
+      {
+        const uint16x8_t xs = vmovl_u8(vcnt_u8(vtbl3_u8(d1, x0) & X0_MASK) + vcnt_u8(vtbl3_u8(d1, x1) & X1_MASK)),
+                         ys = vmovl_u8(vcnt_u8(vtbl3_u8(d1, y0) & Y0_MASK) + vcnt_u8(vtbl3_u8(d1, y1) & Y1_MASK));
+        uint16x8_t cs = xs + Q16 - ys; // get coefs
+        cs = vsubq_u16(cs, vandq_u16(vcgeq_u16(cs, Q16), Q16)); // cs %= Q
+        vst1q_u16(out[1].cs + 32*bi + 8*ci, cs); // store
+      }
+
+      // increment byte ids
+      x0 += STEP; x1 += STEP; y0 += STEP; y1 += STEP;
+    }
+  }
+}
+
+/**
+ * @brief Sample 1 CBD2 poly from buffer containing interleaved u64s.
+ *
+ * @param[out] out Output polynomial.
+ * @param[in] buf 32 interleaved u64s (16 u64s per polynomial).  Only
+ * the even u64s are sampled by this function.
+ */
+static inline void neon_sample_cbd2_poly(poly_t * const out, const uint64_t buf[static 31]) {
+  static const uint8x8_t X_EVENS = { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 },
+                         Y_EVENS = { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c },
+                         X_ODDS = { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 },
+                         Y_ODDS = { 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0 };
+
+  for (size_t ci = 0; ci < 16; ci++) {
+    const uint8x8_t b = vreinterpret_u8_u64(vld1_u64(buf + (2*ci)));
+    uint16x8_t es = (vmovl_u8(vcnt_u8(b & X_EVENS)) + Q16) - vmovl_u8(vcnt_u8(b & Y_EVENS)),
+               os = (vmovl_u8(vcnt_u8(b & X_ODDS)) + Q16) - vmovl_u8(vcnt_u8(b & Y_ODDS));
+    es = vsubq_u16(es, vandq_u16(vcgeq_u16(es, Q16), Q16)); // es %= Q
+    os = vsubq_u16(os, vandq_u16(vcgeq_u16(os, Q16), Q16)); // os %= Q
+
+    const uint16x8x2_t s = { .val = { es, os } };
+    vst2q_u16(out->cs + (16*ci + 0), s); // store
+  }
+}
+
+/**
+ * @brief Sample coefs for 2 CBD2 polys from buffer of interleaved u64s.
+ *
+ * @param[out] out Output polynomials.
+ * @param[in] buf 32 interleaved u64s (16 u64s per polynomial)
+ */
+static inline void neon_sample_cbd2_polys(poly_t out[static 2], const uint64_t buf[static 32]) {
+  for (size_t pi = 0; pi < 2; pi++) {
+    neon_sample_cbd2_poly(out + pi, buf + pi);
+  }
+}
+
+/**
+ * @brief Generate coefficients for a pair of A elements.
+ *
+ * @param[out] out Output polynomials.
+ * @param[in] ap 32 byte seed, represented as 4 u64s.
+ * @param[in] c0 Coordinates of first element.
+ * @param[in] c1 Coordinates of second element.
+ */
+static inline void neon_ahat_polys(poly_t out[static 2], const uint64_t ap[static 4], const uint64_t c0, const uint64_t c1) {
+  // keccak state, row 0:
+  // - a0-a3 (cols 0-3): rho for A (both lanes)
+  // - a4 (col 4): A element coords and shake pad (0x1f)
+  uint64x2_t a0 = { ap[0], ap[0] },
+             a1 = { ap[1], ap[1] },
+             a2 = { ap[2], ap[2] },
+             a3 = { ap[3], ap[3] },
+             a4 = { 0x1f0000 | c0, 0x1f0000 | c1 };
+
+  // keccak state, rows 1-4:
+  // - a20 (row 4, col 0): set high bit of shake128 rate
+  // - all other cells: zero
+  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
+             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
+             a15 = ZZ, a16 = ZZ, a17 = ZZ, a18 = ZZ, a19 = ZZ,
+             a20 = II, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
+
+  // squeeze 63 u64s (21 u64 * 3 rounds) from each shake128 context and
+  // write them interleaved to buffer.
+  uint64_t buf[21 * 2 * 3]; // squeeze buffer
+  for (size_t i = 0; i < 3; i++) {
+    PERMUTE_STATES_NEON(); // permute states
+    SQUEEZE_AHATS_NEON(buf + (42 * i)); // squeeze to buf
+  }
+
+  // sample polys
+  uint32_t lens[2] = { 0 }; // poly coef counts
+  for (size_t i = 0; i < 3; i++) {
+    neon_sample_ahat_polys(out, lens, buf + (42 * i));
+  }
+
+  // loop until both polys have 256 coefficients
+  // (note: most of the time this loop won't be necessary)
+  while (__builtin_expect(lens[0] < 256 || lens[1] < 256, 0)) {
+    PERMUTE_STATES_NEON(); // permute states
+    SQUEEZE_AHATS_NEON(buf); // squeeze to buf
+    neon_sample_ahat_polys(out, lens, buf); // sample polys
+  }
+}
+
+/**
+ * @brief Generate coefficients for a single element of A.
+ *
+ * @param[out] out Output polynomials.
+ * @param[in] ap 32 byte seed, represented as 4 u64s.
+ * @param[in] c0 Element coordinates.
+ */
+static inline void neon_ahat_poly(poly_t * const out, const uint64_t ap[static 4], const uint64_t c0) {
+  // keccak state, row 0:
+  // - a0-a3 (cols 0-3): rho for a (both lanes)
+  // - a4 (col 4): A element coords and shake pad (0x1f)
+  uint64x2_t a0 = { ap[0], ap[0] },
+             a1 = { ap[1], ap[1] },
+             a2 = { ap[2], ap[2] },
+             a3 = { ap[3], ap[3] },
+             a4 = { 0x1f0000 | c0, 0 };
+
+  // keccak state, rows 1-4:
+  // - a20 (row 4, col 0): set shake128 rate high bit
+  // - all other cells: zero
+  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
+             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
+             a15 = ZZ, a16 = ZZ, a17 = ZZ, a18 = ZZ, a19 = ZZ,
+             a20 = II, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
+
+  // squeeze 63 u64s (21 u64s * 3 rounds) from each shake128 context and
+  // write them interleaved to buffer.
+  uint64_t buf[21 * 2 * 3]; // squeeze buffer
+  for (size_t i = 0; i < 3; i++) {
+    PERMUTE_STATES_NEON(); // permute states
+    SQUEEZE_AHATS_NEON(buf + (42 * i)); // squeeze to buf
+  }
+
+  // sample poly
+  uint32_t len = 0; // poly coefficient count
+  for (size_t i = 0; i < 3; i++) {
+    len = neon_sample_ahat_poly(out, len, buf + (42 * i));
+  }
+
+  // loop until poly has 256 coefficients
+  // (note: most of the time this loop won't be necessary)
+  while (__builtin_expect(len < 256, 0)) {
+    PERMUTE_STATES_NEON(); // permute states
+    SQUEEZE_AHATS_NEON(buf); // squeeze to buf
+    len = neon_sample_ahat_poly(out, len, buf); // sample poly
+  }
+}
+
+/**
+ * @brief Generate coefficients for two elements of a CBD3 vector.
+ *
+ * @param[out] out Output polynomials.
+ * @param[in] sp 32 byte seed, represented as 4 u64s.
+ * @param[in] c0 Index of first element.
+ * @param[in] c1 Index of second element.
+ */
+static inline void neon_cbd3_polys(poly_t out[static 2], const uint64_t sp[static 4], const uint64_t c0, const uint64_t c1) {
+  // keccak state, row 0:
+  // - a0-a3 (cols 0-3): rho for s (both lanes)
+  // - a4 (col 4): s element coords and shake pad (0x1f)
+  uint64x2_t a0 = { sp[0], sp[0] },
+             a1 = { sp[1], sp[1] },
+             a2 = { sp[2], sp[2] },
+             a3 = { sp[3], sp[3] },
+             a4 = { 0x1f00 | c0, 0x1f00 | c1 };
+
+  // keccak state, rows 1-4:
+  // - a16 (row 3, col 1): set shake256 rate high bit
+  // - all other cells: zero
+  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
+             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
+             a15 = ZZ, a16 = II, a17 = ZZ, a18 = ZZ, a19 = ZZ,
+             a20 = ZZ, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
+
+  // squeeze 34 (2x17) u64s from each shake256 context and write them
+  // interleaved to buffer (note: only need 192 bytes).
+  uint64_t buf[68]; // squeeze buffer
+  for (size_t i = 0; i < 2; i++) {
+    PERMUTE_STATES_NEON();
+
+    const uint64x2x4_t s0 = { .val = {  a0,  a1,  a2,  a3 } },
+                       s1 = { .val = {  a4,  a5,  a6,  a7 } },
+                       s2 = { .val = {  a8,  a9, a10, a11 } },
+                       s3 = { .val = { a12, a13, a14, a15 } };
+
+    // store to buffer
+    vst1q_u64_x4(buf + (34 * i +  0), s0);
+    vst1q_u64_x4(buf + (34 * i +  8), s1);
+    vst1q_u64_x4(buf + (34 * i + 16), s2);
+    vst1q_u64_x4(buf + (34 * i + 24), s3);
+    vst1q_u64(buf + (34 * i + 32), a16);
+  }
+
+  // sample polys from buffer
+  neon_sample_cbd3_polys(out, buf);
+}
+
+/**
+ * @brief Generate coefficients for two elements of a CBD2 vector.
+ *
+ * @param[out] out Output polynomials.
+ * @param[in] sp 32 byte seed, represented as 4 u64s.
+ * @param[in] c0 Index of first element.
+ * @param[in] c1 Index of second element.
+ */
+static inline void neon_cbd2_polys(poly_t out[static 2], const uint64_t sp[static 4], const uint64_t c0, const uint64_t c1) {
+  // keccak state, row 0:
+  // - a0-a3 (cols 0-3): rho (both lanes)
+  // - a4 (col 4): element coords and shake pad (0x1f)
+  uint64x2_t a0 = { sp[0], sp[0] },
+             a1 = { sp[1], sp[1] },
+             a2 = { sp[2], sp[2] },
+             a3 = { sp[3], sp[3] },
+             a4 = { 0x1f00 | c0, 0x1f00 | c1 };
+
+  // keccak state, rows 1-4:
+  // - a16 (row 3, col 1): set shake256 rate high bit
+  // - all other cells: zero
+  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
+             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
+             a15 = ZZ, a16 = II, a17 = ZZ, a18 = ZZ, a19 = ZZ,
+             a20 = ZZ, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
+
+  // permute keccak states, then squeeze 17 u64s from each shake256
+  // context and write them interleaved to buffer (note: only need 128
+  // bytes for cbd2).
+  uint64_t buf[34]; // squeeze buffer
+  PERMUTE_STATES_NEON(); // permute states
+  SQUEEZE_CBD2S_NEON(buf); // squeeze to buffer
+  neon_sample_cbd2_polys(out, buf); // sample polys
+}
+
+/**
+ * @brief Generate coefficients for element of a CBD2 vector.
+ *
+ * @param[out] out Output polynomial.
+ * @param[in] sp 32 byte seed, represented as 4 u64s.
+ * @param[in] c0 Element index.
+ */
+static inline void neon_cbd2_poly(poly_t * const out, const uint64_t sp[static 4], const uint64_t c0) {
+  // keccak state, row 0:
+  // - a0-a3 (cols 0-3): rho (both lanes)
+  // - a4 (col 4): element coords and shake pad (0x1f)
+  uint64x2_t a0 = { sp[0], 0 },
+             a1 = { sp[1], 0 },
+             a2 = { sp[2], 0 },
+             a3 = { sp[3], 0 },
+             a4 = { 0x1f00 | c0, 0x0000 };
+
+  // keccak state, rows 1-4:
+  // - a16 (row 3, col 1): set shake256 rate high bit
+  // - all other cells: zero
+  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
+             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
+             a15 = ZZ, a16 = II, a17 = ZZ, a18 = ZZ, a19 = ZZ,
+             a20 = ZZ, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
+
+  // permute keccak states, then squeeze 17 u64s from each shake256
+  // context and write them interleaved to buffer (note: only need 128
+  // bytes for cbd2).
+  //
+  // FIXME: this would be faster if we only squeezed a single lane
+  uint64_t buf[34]; // squeeze buffer
+  PERMUTE_STATES_NEON(); // permute states
+  SQUEEZE_CBD2S_NEON(buf); // squeeze to buffer
+  neon_sample_cbd2_poly(out, buf); // sample poly
+}
+
+/**
+ * Sample polynomials for pke512_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[1,0], A[1,1], s[0],
+ * s[1], e[0], and e[1].
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out 8 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke512_keygen_sample_neon(poly_t out[static 8], const uint8_t seed[static 64]) {
+  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
+
+  neon_ahat_polys(out + 0, ap, 0x0000, 0x0001); // A[0,0], A[0,1]
+  neon_ahat_polys(out + 2, ap, 0x0100, 0x0101); // A[1,0], A[1,1]
+  neon_cbd3_polys(out + 4, sp, 0x00, 0x01); // s[0], s[1]
+  neon_cbd3_polys(out + 6, sp, 0x02, 0x03); // e[0], e[1]
+}
+#endif /* BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Sample polynomials for pke512_keygen().
+ *
+ * @note Scalar implementation.
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[1,0], A[1,1], s[0],
+ * s[1], e[0], and e[1].
+ *
+ * @param[out] out 8 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke512_keygen_sample_scalar(poly_t out[static 8], const uint8_t seed[static 64]) {
+  const uint8_t * const sigma = seed + 32; // sigma
+
+  // sample A hat matrix polynomial coefficients from T_q (NTT)
+  for (size_t i = 0; i < PKE512_K; i++) {
+    for (size_t j = 0; j < PKE512_K; j++) {
+      poly_sample_ntt(out + (PKE512_K * i + j), seed, j, i);
+    }
+  }
+
+  // sample poly coefs for vectors s and e from CBD(3) (PKE512_ETA1)
+  // (note: sampling is done in R_q, not in NTT domain)
+  for (size_t i = 0; i < 2 * PKE512_K; i++) {
+    poly_sample_cbd3(out + 2 * PKE512_K + i, sigma, i);
+  }
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+/**
+ * Sample polynomials for pke512_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[0,1], A[1,1], r[0],
+ * r[1], e1[0], e1[1], and e2.
+ *
+ * @note AVX-512 implementation
+ *
+ * @param[out] out 9 output polynomials.
+ * @param[in] a_seed Seed for A (32 bytes).
+ * @param[in] s_seed Seed for r, e1, and e2 (32 bytes).
+ */
+static inline void pke512_encrypt_sample_avx512(poly_t out[static 9], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
+  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, e2 seed
+
+  // lens:
+  // - indices 0-3: number of coefficients for Ahat entries
+  // - indices 4-5: number of bytes squeezed for elements of r (192
+  //   bytes each)
+  uint32_t lens[6] ALIGN(32) = { 0 }; // polynomial and cbd3 sample lengths
+
+  // bytes used for CBD3 calculation for elements of r (48 * 4 = 192
+  // bytes per polynomial)
+  uint8_t cbd3_buf[192*2] = { 0 };
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-3: rho for A
+  // - lanes 4-5: rho for r
+  __m512i a0 = _mm512_setr_epi64(ap[0], ap[0], ap[0], ap[0], sp[0], sp[0], 0, 0),
+          a1 = _mm512_setr_epi64(ap[1], ap[1], ap[1], ap[1], sp[1], sp[1], 0, 0),
+          a2 = _mm512_setr_epi64(ap[2], ap[2], ap[2], ap[2], sp[2], sp[2], 0, 0),
+          a3 = _mm512_setr_epi64(ap[3], ap[3], ap[3], ap[3], sp[3], sp[3], 0, 0);
+
+  // keccak state, row 0, column 4
+  // - lanes 0-3: A matrix element coordinates (i, j) and shake padding (0x1f)
+  // - lanes 4-5: r vector element index and shake padding (0x1f)
+  // - other lanes: unused
+  //
+  // NOTE: the A element coordinates are swapped here versus
+  // pke512_keygen(), because this code is sampling the transpose of A
+  // and pke512_keygen() is sampling A.
+  static const __m512i a4_vals = { 0x1f0000, 0x1f0100, 0x1f0001, 0x1f0101, 0x1f00, 0x1f01, 0, 0 };
+  __m512i a4 = a4_vals;
+
+  // keccak state, rows 1-2 (all zero)
+  __m512i a5 = _mm512_setzero_si512(),
+          a6 = _mm512_setzero_si512(),
+          a7 = _mm512_setzero_si512(),
+          a8 = _mm512_setzero_si512(),
+          a9 = _mm512_setzero_si512(),
+          a10 = _mm512_setzero_si512(),
+          a11 = _mm512_setzero_si512(),
+          a12 = _mm512_setzero_si512(),
+          a13 = _mm512_setzero_si512(),
+          a14 = _mm512_setzero_si512();
+
+  // keccak state, row 3
+  // - a16 (column 1), lanes 4-5: set high bit in last byte of shake256 rate
+  // - a16 (column 1), other lanes: all zero
+  // - other columns: all zero
+  __m512i a15 = _mm512_setzero_si512(),
+          a16 = _mm512_maskz_set1_epi64(0x30, 0x8000000000000000ULL),
+          a17 = _mm512_setzero_si512(),
+          a18 = _mm512_setzero_si512(),
+          a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - a20 (column 0), lanes 0-3: set high bit in last byte of shake128 rate
+  // - a20 (column 0), other lanes: all zero
+  // - other columns: all zero
+  __m512i a20 = _mm512_maskz_set1_epi64(0x0f, 0x8000000000000000ULL),
+          a21 = _mm512_setzero_si512(),
+          a22 = _mm512_setzero_si512(),
+          a23 = _mm512_setzero_si512(),
+          a24 = _mm512_setzero_si512();
+
+  // loop until all Ahat polynomials have 256 coefficients (lens[0..3] == 256)
+  // (we don't need to check lens[4..5] because they will both be full
+  // before lens[0..3])
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-3: permuted shake128 state for 4 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    // - lanes 4-5: permuted shake256 state for 2 r vector elements
+    //   (have 17*8 = 136 bytes, need 64*eta1 = 64*3 = 192 bytes per
+    //   poly, or 2 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t4: 64 bytes of SHAKE256 output for r[0]
+    //    - t5: 64 bytes of SHAKE256 output for r[1]
+    //
+    // 2. For t0-t3, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. For t4-t5, we do the following:
+    //    a. Append up to 48 bytes into the XOF byte stream buffer
+    //       (`cbd3_buf`).
+    //    b. Increment the buffer length.
+    //
+    // 4. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t3 as per step #2, and registers
+    //    t4-t5 as per step #3.
+    //
+    // 5. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t3 as per step #2.  Registers t4-t5
+    //    are processed as per step #3, *except* that only up to 40
+    //    bytes are sampled instead of 48 (the last 8 bytes are part of
+    //    the SHAKE256 rate).
+    //
+    // 6. Transpose the 4x4 matrix in registers a18-a21.  This organizes
+    //    the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[1, 1]
+    //
+    // 7. For t0-t3, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8_TO_6(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
+
+      // sample r bytes
+      SAMPLE_CBD3_BYTES(t4, 4, 48); // r[0]
+      SAMPLE_CBD3_BYTES(t5, 5, 48); // r[1]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8_TO_6(a6, a7, a8, a9, a10, a11, a13, a13);
+
+      // sample Ahat coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
+
+      // sample r bytes
+      SAMPLE_CBD3_BYTES(t4, 4, 48); // r[0]
+      SAMPLE_CBD3_BYTES(t5, 5, 48); // r[1]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8_TO_6(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample Ahat coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
+
+      // sample r bytes
+      SAMPLE_CBD3_BYTES(t4, 4, 40); // r[0]
+      SAMPLE_CBD3_BYTES(t5, 5, 40); // r[1]
+    }
+
+    // a18-a21 transpose
+    {
+      // note: 4x transpose step 0 and step 1 are 8x transpose step 1
+      // and step 2, respectively
+
+      // transpose step 0
+      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_8_TO_6_S1_A_IDS, a20),
+                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_8_TO_6_S1_A_IDS, a21),
+                    s0_t2 = _mm512_permutex2var_epi64(a20, TRANSPOSE_8_TO_6_S1_B_IDS, a18),
+                    s0_t3 = _mm512_permutex2var_epi64(a21, TRANSPOSE_8_TO_6_S1_B_IDS, a19);
+
+      // transpose step 1
+      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_6_S2_A_IDS, s0_t1),
+                    t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_6_S2_B_IDS, s0_t0),
+                    t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_6_S2_A_IDS, s0_t3),
+                    t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_6_S2_B_IDS, s0_t2);
+
+      // sample Ahat coefficients
+      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_16_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_16_COEFS(t2, 2); // Ahat[0, 1]
+      SAMPLE_16_COEFS(t3, 3); // Ahat[1, 1]
+    }
+  } while (_mm_cmpneq_epi32_mask(_mm_load_epi32(lens), K256x4));
+
+  // at this point cbd3_buf has 192 bytes for each element of r.
+  // sample 24 bytes at a time, expand to 32 coefficients, and write
+  // coefficients to output polynomials
+
+  // loop over 2 elements in vector `r`
+  for (size_t i = 0; i < 2; i++) {
+    for (size_t j = 0; j < 8; j++) {
+      const __m512i b = _mm512_maskz_loadu_epi8(0xffffff, cbd3_buf + 192 * i + 24 * j),
+                    // count low bits
+                    lo_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_LO_IDS, b), CBD3_LO_MASKS)),
+                    // count high bits
+                    hi_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_HI_IDS, b), CBD3_HI_MASKS)),
+                    sums = _mm512_add_epi8(lo_sums, hi_sums),
+                    x = _mm512_and_si512(sums, CBD3_X_MASK),
+                    y = _mm512_srli_epi16(sums, 8);
+
+      // vals = (x + (Q - y)) % Q
+      __m512i vals = _mm512_add_epi16(x, _mm512_sub_epi16(Q16, y));
+      vals = _mm512_mask_sub_epi16(vals, _mm512_cmpge_epu16_mask(vals, Q16), vals, Q16);
+
+      // store coefficients
+      _mm512_storeu_epi16(out[4 + i].cs + 32 * j, vals);
+    }
+  }
+
+  // at this point we have the coefficients for A and r, but we still
+  // need them for e1 and e2. so we init the keccak state for 3 shake256
+  // prf instances, do a single keccak permutation, then squeeze 128
+  // bytes and sample them using CBD2 to generate the coefficients for
+  // e1[0], e1[1], and e2
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-2: rho for e1 and e2
+  // - other lanes: unused
+  a0 = _mm512_setr_epi64(sp[0], sp[0], sp[0], 0, 0, 0, 0, 0);
+  a1 = _mm512_setr_epi64(sp[1], sp[1], sp[1], 0, 0, 0, 0, 0);
+  a2 = _mm512_setr_epi64(sp[2], sp[2], sp[2], 0, 0, 0, 0, 0);
+  a3 = _mm512_setr_epi64(sp[3], sp[3], sp[3], 0, 0, 0, 0, 0);
+
+  // keccak state, row 0, column 4
+  // - lanes 0-2: e1/e2 element index and shake padding (0x1f)
+  // - other lanes: unused
+  static const __m512i e_a4_vals = { 0x1f02, 0x1f03, 0x1f04, 0, 0, 0, 0, 0 };
+  a4 = e_a4_vals;
+
+  // keccak state, rows 1-2: all zero
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+
+  // keccak state, row 3
+  // - a16 (column 1), lanes 0-2: set high bit in last byte of shake256 rate
+  // - a16 (column 1), other lanes: unused
+  // - other columns: all zero
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_maskz_set1_epi64(0x07, 0x8000000000000000ULL);
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4: all zero
+  a20 = _mm512_setzero_si512();
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  PERMUTE_STATES_AVX512();
+
+  // At this point the keccak permutation is finished and we have the
+  // permuted shake256 state for the polynomials e1[0], e1[1], and e2 in
+  // lanes 0-2 of 25 avx512 registers (a0-a24).
+  //
+  // We proceed as follows:
+  //
+  // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+  //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+  //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+  //
+  //    This organizes the registers as follows:
+  //    - t0: 64 bytes of SHAKE256 output for e1[0]
+  //    - t1: 64 bytes of SHAKE256 output for e1[1]
+  //    - t2: 64 bytes of SHAKE256 output for e2
+  //
+  // 2. Expand the first 16 bytes in t0-t2 into 32 16-bit unsigned
+  //    integers representing coefficients for e1[0], e1[1], and e2 by
+  //    dividing each byte into a pair of nibbles and then sampling each
+  //    nibble with CBD2.
+  //
+  // 3. Expand the second 16 bytes in t0-t2 into 32 polynomial
+  //    coefficients as per step #2.
+  //
+  // 3. Expand the third 16 bytes in t0-t2 into 32 polynomial
+  //    coefficients as per step #2.
+  //
+  // 4. Expand the last 16 bytes in t0-t2 into 32 polynomial
+  //    coefficients as per step #2.
+  //
+  // 5. Transpose the 8x8 matrix in registers a8-a15 as per step #1,
+  //    then process registers t0-t2 as per steps #2-#4.
+  //
+  // At this point we have 256 coefficients for e1[0], e1[1], and e2, so
+  // we are done.
+
+  {
+    // a0-a7 transpose
+    TRANSPOSE_8_TO_3(a0, a1, a2, a3, a4, a5, a6, a7);
+
+    // loop over 4 16-byte chunks in t0-t2 and expand into 32 coefficients
+    // of e1[0], e1[1], and e2 polynomials
+    __m512i cbd2_ids = CBD2_ID_VALS;
+    for (size_t i = 0; i < 4; i++) {
+      // sample coefficients
+      SAMPLE_32_CBD2_COEFS(t0, 6, 32 * i); // e1[0]
+      SAMPLE_32_CBD2_COEFS(t1, 7, 32 * i); // e1[1]
+      SAMPLE_32_CBD2_COEFS(t2, 8, 32 * i); // e2
+
+      // increment byte ids
+      cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+    }
+  }
+
+  {
+    // a8-a15 transpose
+    TRANSPOSE_8_TO_3(a8, a9, a10, a11, a12, a13, a14, a15);
+
+    // loop over 4 16-byte chunks in t0-t2 and expand into 32 coefficients
+    // of e1[0], e1[1], and e2 polynomials
+    __m512i cbd2_ids = CBD2_ID_VALS;
+    for (size_t i = 0; i < 4; i++) {
+      // sample coefficients
+      SAMPLE_32_CBD2_COEFS(t0, 6, 128 + 32 * i); // e1[0]
+      SAMPLE_32_CBD2_COEFS(t1, 7, 128 + 32 * i); // e1[1]
+      SAMPLE_32_CBD2_COEFS(t2, 8, 128 + 32 * i); // e2
+
+      // increment byte ids
+      cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+    }
+  }
+}
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_NEON
+/**
+ * Sample polynomials for pke512_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[0,1], A[1,1], r[0],
+ * r[1], e1[0], e1[1], and e2.
+ *
+ * @note Neon implementation
+ *
+ * @param[out] out 9 output polynomials.
+ * @param[in] a_seed Seed for A (32 bytes).
+ * @param[in] s_seed Seed for r, e1, and e2 (32 bytes).
+ */
+static inline void pke512_encrypt_sample_neon(poly_t out[static 9], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
+  const uint64_t * const ap = (uint64_t*) a_seed; // A hat seed
+  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, e2 seed
+
+  neon_ahat_polys(out + 0, ap, 0x0000, 0x0100); // A[0,0], A[1,0]
+  neon_ahat_polys(out + 2, ap, 0x0001, 0x0101); // A[0,1], A[1,1]
+  neon_cbd3_polys(out + 4, sp, 0x00, 0x01); // r[0], r[1]
+  neon_cbd2_polys(out + 6, sp, 0x02, 0x03); // e1[0], e1[1]
+  neon_cbd2_poly(out + 8, sp, 0x04); // e2
+}
+#endif /* BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Sample polynomials for pke512_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[0,1], A[1,1], r[0],
+ * r[1], e1[0], e1[1], and e2.
+ *
+ * @note Scalar implementation
+ *
+ * @param[out] out 9 output polynomials.
+ * @param[in] a_seed Seed for A (32 bytes).
+ * @param[in] s_seed Seed for r, e1, and e2 (32 bytes).
+ */
+static inline void pke512_encrypt_sample_scalar(poly_t out[static 9], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
+  // sample A hat transposed matrix polynomial coefficients from T_q (NTT)
+  // (note: i and j are positions are swapped vs `pke512_keygen()`)
+  for (size_t i = 0; i < PKE512_K; i++) {
+    for (size_t j = 0; j < PKE512_K; j++) {
+      poly_sample_ntt(out + (PKE512_K * i + j), a_seed, i, j);
+    }
+  }
+
+  // sample r vector from CBD(3) (PKE512_ETA1)
+  for (size_t i = 0; i < PKE512_K; i++) {
+    poly_sample_cbd3(out + 4 + i, s_seed, i);
+  }
+
+  // sample e1 vector from CBD(2) (PKE512_ETA2)
+  for (size_t i = 0; i < PKE512_K; i++) {
+    poly_sample_cbd2(out + 6 + i, s_seed, PKE512_K + i);
+  }
+
+  // sample e2 polynomial from CBD(2) (PKE512_ETA2)
+  poly_sample_cbd2(out + 8, s_seed, 2 * PKE512_K);
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+#define pke512_keygen_sample pke512_keygen_sample_avx512
+#define pke512_encrypt_sample pke512_encrypt_sample_avx512
+#elif BACKEND == BACKEND_NEON
+#define pke512_keygen_sample pke512_keygen_sample_neon
+#define pke512_encrypt_sample pke512_encrypt_sample_neon
+#elif BACKEND == BACKEND_SCALAR
+#define pke512_keygen_sample pke512_keygen_sample_scalar
+#define pke512_encrypt_sample pke512_encrypt_sample_scalar
+#else
+#error "unkown backend"
+#endif /* BACKEND */
+
+/**
+ * Generate PKE512 encryption and decryption key from given 32-byte
+ * seed.
+ *
+ * @param[out] ek PKE512 encryption key (800 bytes).
+ * @param[out] dk PKE512 decryption key (768 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ */
+static inline void pke512_keygen(uint8_t ek[static PKE512_EK_SIZE], uint8_t dk[static PKE512_DK_SIZE], const uint8_t seed[static 32]) {
+  // get sha3-512 hash of seed, get rho and sigma (each 32 bytes)
+  uint8_t rs[64] = { 0 }; // rho = rs[0,31], sigma = rs[32,63]
+  sha3_512(seed, 32, rs); // rho, sigma = sha3-512(seed)
+
+  // sample A, s, and e polynomials
+  poly_t ps[PKE512_K * PKE512_K + 2 * PKE512_K] = { 0 }; // A, s, e
+  pke512_keygen_sample(ps, rs); // sample
+  poly_t *a = ps, *se = ps + PKE512_K * PKE512_K;
+
+  // apply NTT to polynomial coefficients (R_q -> T_q)
+  vec2_ntt(se);
+  vec2_ntt(se + PKE512_K);
+
+  // t = As + e (NTT)
+  poly_t t[PKE512_K] = { 0 }, *s = se, *e = se + PKE512_K;
+  mat2_mul(t, a, s); // t = As
+  vec2_add(t, e); // t += e
+
+  // encode t (NTT)
+  vec2_encode(ek, t);
+
+  // ek <- t || rho
+  memcpy(ek + (PKE512_K * 384), rs, 32);
+
+  // dk <- s (NTT)
+  vec2_encode(dk, se);
+}
+
+/**
+ * Encrypt 32-byte message `m` using PKE512 encryption key `ek` and
+ * randomness `enc_rand` and store the PKE512 ciphertext in output
+ * buffer `ct`.
+ *
+ * @param[out] ct Output PKE512 ciphertext buffer (768 bytes).
+ * @param[in] ek PKE512 encryption key (800 bytes).
+ * @param[in] m Plaintext message (32 bytes).
+ * @param[in] enc_rand Randomness seed (32 bytes).
+ */
+static inline void pke512_encrypt(uint8_t ct[static PKE512_CT_SIZE], const uint8_t ek[static PKE512_EK_SIZE], const uint8_t m[static 32], const uint8_t enc_rand[static 32]) {
+  // decode t from first 768 bytes of ek
+  poly_t t[PKE512_K] = { 0 };
+  vec2_decode(t, ek);
+
+  // read rho from ek (32 bytes)
+  const uint8_t * const rho = ek + 384 * PKE512_K;
+
+  // sample A, r, e1, and e2
+  poly_t ps[9] = { 0 };
+  pke512_encrypt_sample(ps, rho, enc_rand);
+  poly_t *a = ps, *r = ps + 4, *e1 = ps + 6, *e2 = ps + 8;
+
+  vec2_ntt(r); // r = NTT(r)
+
+  poly_t u[PKE512_K] = { 0 };
+  mat2_mul(u, a, r);  // u = (A*r)
+  vec2_inv_ntt(u);    // u = InvNTT(u)
+  vec2_add(u, e1);    // u += e1
+
+  // encode u, append to ct
+  vec2_encode_10bit(ct, u);
+
+  // decode message `m` into polynomial `mu`
+  //
+  // each bit of message `m` set to 1 is decoded as a coefficient of
+  // value 1665 in polynomial `mu`, and each bit set to 0 is decoded as
+  // a coefficient of value 0 in polynomial `mu`.
+  poly_t mu = { 0 };
+  poly_decode_1bit(&mu, m);
+
+  poly_t v = { 0 };
+  vec2_dot(&v, t, r);     // v = t * r
+  poly_inv_ntt(&v);       // v = InvNTT(v)
+  poly_add2(&v, e2, &mu); // v += e2 + mu
+
+  // encode v, append to ct
+  poly_encode_4bit(ct + 32 * PKE512_DU * PKE512_K, &v);
+}
+
+/**
+ * Decrypt 32-byte plaintext message from PKE512 ciphertext `ct` using
+ * PKE512 decryption key `dk` and store the result in output buffer `m`.
+ *
+ * @param[out] m Output plaintext message (32 bytes).
+ * @param[in] dk PKE512 decryption key (768 bytes).
+ * @param[in] ct Input ciphertext buffer (768 bytes).
+ */
+static inline void pke512_decrypt(uint8_t m[static 32], const uint8_t dk[static PKE512_DK_SIZE], const uint8_t ct[PKE512_CT_SIZE]) {
+  // decode u
+  poly_t u[PKE512_K] = { 0 };
+  vec2_decode_10bit(u, ct);
+
+  // decode v
+  poly_t v = { 0 };
+  poly_decode_4bit(&v, ct + 32 * PKE512_DU * PKE512_K);
+
+  // decode ŝ
+  poly_t s[PKE512_K] = { 0 };
+  vec2_decode(s, dk);
+
+  poly_t su = { 0 }; // su = s * u
+  vec2_ntt(u); // u = NTT(u)
+  vec2_dot(&su, s, u); // su = s * u
+  poly_inv_ntt(&su); // su = InvNTT(su)
+
+  poly_t w = v;
+  poly_sub(&w, &su); // w -= su
+
+  // encode w coefficients as 1-bit, write to output
+  poly_encode_1bit(m, &w);
+}
+
+/**
+ * @brief Generate KEM512 encapsulation key `ek` and decapsulation key
+ * `dk` from 64 byte random seed `seed`.
+ * @ingroup kem512
+ *
+ * @warning `seed` **must** be 64 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 128 bits of strength.
+ *
+ * @param[out] ek KEM512 encapsulation key (800 bytes).
+ * @param[out] dk KEM512 decapsulation key (1632 bytes).
+ * @param[in] seed Random seed (64 bytes).
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem512_keygen(uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]) {
+  const uint8_t * const z = seed; // random implicit rejection seed (32 bytes)
+  const uint8_t * const d = seed + 32; // pke512_keygen() random seed (32 bytes)
+
+  // generate ek and dk
+  pke512_keygen(ek, dk, d);
+
+  // KEM: append ek, sha3-256(ek), and z to dk
+  memcpy(dk + PKE512_DK_SIZE, ek, PKE512_EK_SIZE);
+  sha3_256(ek, PKE512_EK_SIZE, dk + PKE512_DK_SIZE + PKE512_EK_SIZE);
+  memcpy(dk + PKE512_DK_SIZE + PKE512_EK_SIZE + 32, z, 32);
+}
+
+/**
+ * @brief Generate KEM512 shared key `key` and ciphertext `ct` from given
+ * encapsulation key `ek` and randomness `seed`.
+ * @ingroup kem512
+ *
+ * @warning `seed` **must** be 32 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 128 bits of strength.
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (768 bytes).
+ * @param[in] ek KEM512 encapsulation key (800 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem512_encaps(uint8_t k[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]) {
+  uint8_t data[64] = { 0 };
+  memcpy(data, seed, 32); // append seed
+  sha3_256(ek, PKE512_EK_SIZE, data + 32); // append sha3-256(ek)
+
+  uint8_t kr[64] = { 0 };
+  sha3_512(data, 64, kr); // (K, r) <- sha3-512(data)
+  const uint8_t * const r = kr + 32; // get r
+
+  memcpy(k, kr, 32); // copy shared key to output
+  pke512_encrypt(ct, ek, seed, r); // ct <- pke.encrypt(ek, seed, r)
+}
+
+/**
+ * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM512
+ * decapsulation key `dk` with implicit rejection.
+ * @ingroup kem512
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (768 bytes).
+ * @param[in] dk KEM512 decapsulation key (1632 bytes).
+ */
+void fips203ipd_kem512_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE]) {
+  const uint8_t * const dk_pke = dk;
+  const uint8_t * const ek_pke = dk + 384 * PKE512_K;
+  const uint8_t * const h = dk + (2 * 384 * PKE512_K + 32);
+  const uint8_t * const z = dk + (2 * 384 * PKE512_K + 64);
+
+  uint8_t mh[64] = { 0 };
+  pke512_decrypt(mh, dk_pke, ct); // decrypt ct into mh
+  memcpy(mh + 32, h, 32); // copy hash
+
+  uint8_t kr[64] = { 0 };
+  sha3_512(mh, 64, kr); // (K', r') <- sha3-512(m || r)
+
+  // zc = z || ct
+  uint8_t zc[32 + PKE512_CT_SIZE] = { 0 };
+  memcpy(zc, z, 32);
+  memcpy(zc + 32, ct, PKE512_CT_SIZE);
+
+  // rk: generate implicit rejection key from z and ciphertext
+  uint8_t k_rej[32] = { 0 };
+  shake256(zc, sizeof(zc), k_rej, sizeof(k_rej)); // K_rej = J(z||c)
+
+  // re-encrypt `k` with PKE512 key `ek_pke`
+  // (ct2 is used for implicit rejection check below)
+  uint8_t ct2[PKE512_CT_SIZE] = { 0 };
+  pke512_encrypt(ct2, ek_pke, mh, kr + 32); // ct2 <- pke.encrypt(ek, m', r')
+
+  // compare ct and ct2 using constant-time comparison.  if they match,
+  // then copy decapsulated key to output buffer `key`.  if `ct` and `ct2`
+  // don't match, then copy the implicit rejection key `k_rej` to the
+  // output buffer `key`.
+  ct_copy(key, ct_diff(ct, ct2, PKE512_CT_SIZE), kr, k_rej);
+}
+
+#if BACKEND == BACKEND_AVX512
+/**
+ * Sample polynomials for pke768_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[0,2], A[1,0], A[1,1],
+ * A[1,2], A[2,0], A[2,1], A[2,2], s[0], s[1], s[2], e[0], e[1], and
+ * e[2].
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out 15 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke768_keygen_sample_avx512(poly_t out[static 15], const uint8_t seed[static 64]) {
+  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
+
+  // lens:
+  // - indices 0-8: number of coefficients for Ahat elements
+  // - indices 9-14: number of bytes squeezed for s and e elements (192
+  //   bytes per entry)
+  uint32_t lens[15] ALIGN(32) = { 0 }; // polynomial lengths
+
+  // keccak state:
+  //   -------------------------------------
+  //   | Row |          Registers          |
+  //   |-----|-----------------------------|
+  //   |  2  | a13 | a14 | a10 | a11 | a12 |
+  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
+  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
+  //   |  4  | a23 | a24 | a20 | a21 | a22 |
+  //   |  3  | a18 | a19 | a15 | a16 | a17 |
+  //   -------------------------------------
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for a
+  __m512i a0 = _mm512_set1_epi64(ap[0]),
+          a1 = _mm512_set1_epi64(ap[1]),
+          a2 = _mm512_set1_epi64(ap[2]),
+          a3 = _mm512_set1_epi64(ap[3]);
+
+  // keccak state, row 0, column 4
+  // lanes 0-7: A matrix element coordinates (j, i) and shake padding (0x1f)
+  //
+  // NOTE: the A element coordinates are swapped here versus
+  // pke768_{encrypt,decrypt}(), because this code is sampling A and
+  // pke768_{encrypt,decrypt}() are sampling the transpose of A.
+  __m512i a4 = { 0x1f0000, 0x1f0001, 0x1f0002, 0x1f0100, 0x1f0101, 0x1f0102, 0x1f0200, 0x1f0201 };
+
+  // keccak state, rows 1-3 (all zero)
+  __m512i a5 = _mm512_setzero_si512(),
+          a6 = _mm512_setzero_si512(),
+          a7 = _mm512_setzero_si512(),
+          a8 = _mm512_setzero_si512(),
+          a9 = _mm512_setzero_si512(),
+          a10 = _mm512_setzero_si512(),
+          a11 = _mm512_setzero_si512(),
+          a12 = _mm512_setzero_si512(),
+          a13 = _mm512_setzero_si512(),
+          a14 = _mm512_setzero_si512(),
+          a15 = _mm512_setzero_si512(),
+          a16 = _mm512_setzero_si512(),
+          a17 = _mm512_setzero_si512(),
+          a18 = _mm512_setzero_si512(),
+          a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - a20 (column 0): set high bit in last byte of shake128 rate
+  // - all other columns: all zero
+  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
+          a21 = _mm512_setzero_si512(),
+          a22 = _mm512_setzero_si512(),
+          a23 = _mm512_setzero_si512(),
+          a24 = _mm512_setzero_si512();
+
+  // loop until the first 8 Ahat polynomials have 256 coefficients
+  // (e.g., lens[0..7] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t4: 64 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 2]
+    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t7: 64 bytes of SHAKE128 output for Ahat[2, 1]
+    //
+    // 2. For t0-t7, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 5. (FIXME: explain this better) Transpose the 4x8 matrix in
+    //    registers a18-a21.  This organizes the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t4: 24 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 2]
+    //    - t6: 24 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t7: 24 bytes of SHAKE128 output for Ahat[2, 1]
+    //
+    // 6. For t0-t7, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[2, 1]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[2, 1]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[2, 1]
+    }
+
+    // a18-a21 transpose
+    {
+      // before:
+      //   a0 = a00.0, a01.0, a02.0, a10.0, a11.0, a12.0, a20.0, a21.0
+      //   a1 = a00.1, a01.1, a02.1, a10.1, a11.1, a12.1, a20.1, a21.1
+      //   a2 = a00.2, a01.2, a02.2, a10.2, a11.2, a12.2, a20.2, a21.2
+      //   a3 = a00.3, a01.3, a02.3, a10.3, a11.3, a12.3, a20.3, a21.3
+      //
+      // after:
+      //   t0 = a00.0, a00.1, a00.2, a00.3
+      //   t1 = a01.0, a01.1, a01.2, a01.3
+      //   t2 = a02.0, a02.1, a02.2, a02.3
+      //   t3 = a10.0, a10.1, a10.2, a10.3
+      //   t4 = a11.0, a11.1, a11.2, a11.3
+      //   t5 = a12.0, a12.1, a12.2, a12.3
+      //   t6 = a20.0, a20.1, a20.2, a20.3
+      //   t7 = a21.0, a21.1, a21.2, a21.3
+
+      // transpose step 0
+      const __m512i s0_t0 = a18,
+                    s0_t1 = a19,
+                    s0_t2 = a20,
+                    s0_t3 = a21,
+                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
+                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
+                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
+                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
+
+      // transpose step 1
+      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
+                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
+                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
+                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
+                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
+                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
+                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
+                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
+
+      // transpose step 2
+      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
+                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
+                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
+                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
+                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
+                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
+                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
+                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
+
+      // sample/store polynomial coefficients
+      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_16_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_16_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_16_COEFS(t3, 3); // Ahat[1, 0]
+      SAMPLE_16_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_16_COEFS(t5, 5); // Ahat[1, 2]
+      SAMPLE_16_COEFS(t6, 6); // Ahat[2, 0]
+      SAMPLE_16_COEFS(t7, 7); // Ahat[2, 1]
+    }
+  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
+
+  // set up another keccak permutation for the following items:
+  // - lane 0: A[2, 2]
+  // - lanes 1-3: s[0]-s[2] (cbd2)
+  // - lanes 4-6: e[0]-e[2] (cbd2)
+  // - lane 7: unused
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for a
+  a0 = _mm512_setr_epi64(ap[0], sp[0], sp[0], sp[0], sp[0], sp[0], sp[0], 0);
+  a1 = _mm512_setr_epi64(ap[1], sp[1], sp[1], sp[1], sp[1], sp[1], sp[1], 0);
+  a2 = _mm512_setr_epi64(ap[2], sp[2], sp[2], sp[2], sp[2], sp[2], sp[2], 0);
+  a3 = _mm512_setr_epi64(ap[3], sp[3], sp[3], sp[3], sp[3], sp[3], sp[3], 0);
+
+  // keccak state, row 0, column 4
+  // - lane 0: A[2, 2] element coordinates (j, i) and shake padding (0x1f)
+  // - lanes 1-3: s[0]-s[2] element index and shake padding (0x1f)
+  // - lanes 4-6: e[0]-e[2] element index and shake padding (0x1f)
+  // - lane 7: unused
+  static const __m512i ase_a4_vals = { 0x1f0202, 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0 };
+  a4 = ase_a4_vals;
+
+  // keccak state, rows 1-2 (all zero)
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+
+  // keccak state, rows 3:
+  // - column 1 (a16), lane 0: all zero
+  // - column 1 (a16), lanes 1-6: set high bit of last byte of shake256 rate
+  // - column 1 (a16), lane 7: unused (zero)
+  // - other columns: all zero
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_maskz_set1_epi64(0x7e, 0x8000000000000000ULL);
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - column 0 (a20), lane 0: set high bit in last byte of shake128 rate
+  // - column 0 (a20), lanes 1-7: all zero
+  // - all other columns: all zero
+  a20 = _mm512_maskz_set1_epi64(1, 0x8000000000000000ULL);
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  // loop until final Ahat polynomial has 256 coefficients
+  // (e.g., lens[8] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a24):
+    //
+    // - lane 0: permuted shake128 state for A[2, 2] elements.
+    // - lanes 1-3: permuted shake256 state for s[0]-s[2].
+    // - lanes 4-6: permuted shake256 state for e[0]-e[2].
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8_TO_7(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
+
+      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
+      // of s[0], s[1], s[2], e[0], e[1], and e[2] polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 3; i++) {
+        // sample coefficients
+        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 32 * i); // s[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 32 * i); // s[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 32 * i); // s[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 32 * i); // e[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 32 * i); // e[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 32 * i); // e[2]
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8_TO_7(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
+
+      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
+      // of s[0], s[1], s[2], e[0], e[1], and e[2] polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 3; i++) {
+        // sample coefficients
+        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 96 + 32 * i); // s[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 96 + 32 * i); // s[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 96 + 32 * i); // s[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 96 + 32 * i); // e[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 96 + 32 * i); // e[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 96 + 32 * i); // e[2]
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8_TO_7(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
+
+      // loop over 2 16-byte chunks in t1-t6 and expand into 32 coefficients
+      // of s[0], s[1], s[2], e[0], e[1], and e[2] polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 2; i++) {
+        // sample coefficients
+        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 192 + 32 * i); // s[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 192 + 32 * i); // s[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 192 + 32 * i); // s[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 192 + 32 * i); // e[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 192 + 32 * i); // e[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 192 + 32 * i); // e[2]
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    // a18-a21 transpose
+    {
+      // transpose step 0
+      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_8_TO_7_S1_A_IDS, a20),
+                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_8_TO_7_S1_A_IDS, a21);
+
+      // transpose step 1
+      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_7_S2_A_IDS, s0_t1);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_16_COEFS(t0, 8); // Ahat[2, 2]
+    }
+  } while (lens[8] != 256);
+}
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_NEON
+/**
+ * Sample polynomials for pke768_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[0,2], A[1,0], A[1,1],
+ * A[1,2], A[2,0], A[2,1], A[2,2], s[0], s[1], s[2], e[0], e[1], and
+ * e[2].
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out 15 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke768_keygen_sample_neon(poly_t out[static 15], const uint8_t seed[static 64]) {
+  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
+
+  neon_ahat_polys(out + 0, ap, 0x0000, 0x0001); // A[0,0], A[0,1]
+  neon_ahat_polys(out + 2, ap, 0x0002, 0x0100); // A[0,2], A[1,0]
+  neon_ahat_polys(out + 4, ap, 0x0101, 0x0102); // A[1,1], A[1,2]
+  neon_ahat_polys(out + 6, ap, 0x0200, 0x0201); // A[2,0], A[2,1]
+  neon_ahat_poly(out + 8, ap, 0x0202); // A[2,2]
+  neon_cbd2_polys(out + 9, sp, 0x00, 0x01); // s[0], s[1]
+  neon_cbd2_polys(out + 11, sp, 0x02, 0x03); // s[2], e[0]
+  neon_cbd2_polys(out + 13, sp, 0x04, 0x05); // e[1], e[2]
+}
+#endif /* BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Sample polynomials for pke768_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[0,2], A[1,0], A[1,1],
+ * A[1,2], A[2,0], A[2,1], A[2,2], s[0], s[1], s[2], e[0], e[1], and
+ * e[2].
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] out 15 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke768_keygen_sample_scalar(poly_t out[static 15], const uint8_t seed[static 64]) {
+  const uint8_t * const sigma = seed + 32; // sigma
+
+  for (size_t i = 0; i < PKE768_K; i++) {
+    for (size_t j = 0; j < PKE768_K; j++) {
+      poly_sample_ntt(out + (PKE768_K * i + j), seed, j, i);
+    }
+  }
+
+  // sample poly coefs for vectors s and e from CBD(2) (PKE768_ETA1)
+  // (note: sampling is done in R_q, not in NTT domain)
+  for (size_t i = 0; i < 2 * PKE768_K; i++) {
+    poly_sample_cbd2(out + 9 + i, sigma, i);
+  }
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+/**
+ * Sample polynomials for pke768_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[2,0], A[0,1], A[1,1],
+ * A[2,1], A[0,2], A[1,2], A[2,2], r[0], r[1], r[2], e1[0], e1[1],
+ * e1[2], and e2.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out 16 output polynomials.
+ * @param[in] a_seed A seed (32 bytes).
+ * @param[in] s_seed r, e1, and e2 seed (32 bytes).
+ */
+static inline void pke768_encrypt_sample_avx512(poly_t out[static 16], const uint8_t a_seed[32], const uint8_t s_seed[static 32]) {
+  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, and e1 seed
+
+  // lens:
+  // - indices 0-8: number of coefficients for Ahat elements
+  // - indices 9-16: number of coefficients for r, e1, and e2
+  uint32_t lens[16] ALIGN(32) = { 0 }; // polynomial lengths
+
+  // keccak state:
+  //   -------------------------------------
+  //   | Row |          Registers          |
+  //   |-----|-----------------------------|
+  //   |  2  | a13 | a14 | a10 | a11 | a12 |
+  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
+  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
+  //   |  4  | a23 | a24 | a20 | a21 | a22 |
+  //   |  3  | a18 | a19 | a15 | a16 | a17 |
+  //   -------------------------------------
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for a
+  __m512i a0 = _mm512_set1_epi64(ap[0]),
+          a1 = _mm512_set1_epi64(ap[1]),
+          a2 = _mm512_set1_epi64(ap[2]),
+          a3 = _mm512_set1_epi64(ap[3]);
+
+  // keccak state, row 0, column 4
+  // lanes 0-7: A matrix element coordinates (j, i) and shake padding (0x1f)
+  //
+  // NOTE: the A element coordinates are swapped because this code is
+  // sampling the transpose of A.
+  __m512i a4 = { 0x1f0000, 0x1f0100, 0x1f0200, 0x1f0001, 0x1f0101, 0x1f0201, 0x1f0002, 0x1f0102 };
+
+  // keccak state, rows 1-3 (all zero)
+  __m512i a5 = _mm512_setzero_si512(),
+          a6 = _mm512_setzero_si512(),
+          a7 = _mm512_setzero_si512(),
+          a8 = _mm512_setzero_si512(),
+          a9 = _mm512_setzero_si512(),
+          a10 = _mm512_setzero_si512(),
+          a11 = _mm512_setzero_si512(),
+          a12 = _mm512_setzero_si512(),
+          a13 = _mm512_setzero_si512(),
+          a14 = _mm512_setzero_si512(),
+          a15 = _mm512_setzero_si512(),
+          a16 = _mm512_setzero_si512(),
+          a17 = _mm512_setzero_si512(),
+          a18 = _mm512_setzero_si512(),
+          a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - a20 (column 0): set high bit in last byte of shake128 rate
+  // - all other columns: all zero
+  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
+          a21 = _mm512_setzero_si512(),
+          a22 = _mm512_setzero_si512(),
+          a23 = _mm512_setzero_si512(),
+          a24 = _mm512_setzero_si512();
+
+  // loop until the first 8 Ahat polynomials have 256 coefficients
+  // (e.g., lens[0..7] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t4: 64 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 2]
+    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t7: 64 bytes of SHAKE128 output for Ahat[2, 1]
+    //
+    // 2. For t0-t7, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
+    //    registers a18-a21.  This organizes the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t4: 24 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t5: 24 bytes of SHAKE128 output for Ahat[2, 1]
+    //    - t6: 24 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t7: 24 bytes of SHAKE128 output for Ahat[1, 2]
+    //
+    // 6. For t0-t7, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 2]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 2]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 2]
+    }
+
+    // a18-a21 transpose
+    {
+      // transpose step 0
+      const __m512i s0_t0 = a18,
+                    s0_t1 = a19,
+                    s0_t2 = a20,
+                    s0_t3 = a21,
+                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
+                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
+                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
+                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
+
+      // transpose step 1
+      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
+                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
+                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
+                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
+                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
+                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
+                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
+                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
+
+      // transpose step 2
+      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
+                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
+                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
+                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
+                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
+                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
+                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
+                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
+
+      // sample/store polynomial coefficients
+      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_16_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_16_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_16_COEFS(t3, 3); // Ahat[0, 1]
+      SAMPLE_16_COEFS(t4, 4); // Ahat[1, 1]
+      SAMPLE_16_COEFS(t5, 5); // Ahat[2, 1]
+      SAMPLE_16_COEFS(t6, 6); // Ahat[0, 2]
+      SAMPLE_16_COEFS(t7, 7); // Ahat[1, 2]
+    }
+  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
+
+  // set up another keccak permutation for the following items:
+  // - lane 0: A[2, 2]
+  // - lanes 1-3: r[0]-r[2] (cbd2)
+  // - lanes 4-6: e1[0]-e1[2] (cbd2)
+  // - lane 7: e2 (cbd2)
+
+  // keccak state, row 0, columns 0-3
+  // - lane 0: rho for Ahat[2, 2]
+  // - lanes 1-7: rho for r, e1, and e2
+  a0 = _mm512_setr_epi64(ap[0], sp[0], sp[0], sp[0], sp[0], sp[0], sp[0], sp[0]);
+  a1 = _mm512_setr_epi64(ap[1], sp[1], sp[1], sp[1], sp[1], sp[1], sp[1], sp[1]);
+  a2 = _mm512_setr_epi64(ap[2], sp[2], sp[2], sp[2], sp[2], sp[2], sp[2], sp[2]);
+  a3 = _mm512_setr_epi64(ap[3], sp[3], sp[3], sp[3], sp[3], sp[3], sp[3], sp[3]);
+
+  // keccak state, row 0, column 4
+  // - lane 0: A[2, 2] element coordinates and shake padding (0x1f)
+  // - lanes 1-3: r[0]-r[2] element index and shake padding (0x1f)
+  // - lanes 4-6: e1[0]-e1[2] element index and shake padding (0x1f)
+  // - lane 7: e2 element index and shake padding (0x1f)
+  static const __m512i are_a4_vals = { 0x1f0202, 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0x1f06 };
+  a4 = are_a4_vals;
+
+  // keccak state, rows 1-2 (all zero)
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+
+  // keccak state, rows 3:
+  // - column 1 (a16), lane 0: all zero
+  // - column 1 (a16), lanes 1-7: set high bit of last byte of shake256 rate
+  // - other columns: all zero
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_maskz_set1_epi64(0xfe, 0x8000000000000000ULL);
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - column 0 (a20), lane 0: set high bit in last byte of shake128 rate
+  // - column 0 (a20), lanes 1-7: all zero
+  // - all other columns: all zero
+  a20 = _mm512_maskz_set1_epi64(1, 0x8000000000000000ULL);
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  // loop until final Ahat polynomial has 256 coefficients
+  // (e.g., lens[8] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a24):
+    //
+    // - lane 0: permuted shake128 state for A[2, 2] elements.
+    // - lanes 1-3: permuted shake256 state for r[0]-r[2].
+    // - lanes 4-6: permuted shake256 state for e1[0]-e1[2].
+    // - lane 7: permuted shake256 state for e2.
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample Ahat[2, 2] polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
+
+      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
+      // of r, e1, and e2 polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS; // load byte ids
+      for (size_t i = 0; i < 3; i++) {
+        // sample coefficients
+        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 32 * i); // r[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 32 * i); // r[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 32 * i); // r[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 32 * i); // e1[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 32 * i); // e1[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 32 * i); // e1[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t7, 15, 32 * i); // e2
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample Ahat[2, 2] polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
+
+      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
+      // of r, e1, and e2
+      __m512i cbd2_ids = CBD2_ID_VALS; // load byte ids
+      for (size_t i = 0; i < 3; i++) {
+        // sample coefficients
+        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 96 + 32 * i); // r[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 96 + 32 * i); // r[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 96 + 32 * i); // r[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 96 + 32 * i); // e1[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 96 + 32 * i); // e1[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 96 + 32 * i); // e1[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t7, 15, 96 + 32 * i); // e2
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample Ahat polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
+
+      // loop over 2 16-byte chunks in t1-t6 and expand into 32 coefficients
+      // of r, e1, and e2
+      __m512i cbd2_ids = CBD2_ID_VALS; // load byte ids
+      for (size_t i = 0; i < 2; i++) {
+        // sample coefficients
+        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 192 + 32 * i); // r[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 192 + 32 * i); // r[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 192 + 32 * i); // r[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 192 + 32 * i); // e1[0]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 192 + 32 * i); // e1[1]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 192 + 32 * i); // e1[2]
+        MAYBE_SAMPLE_32_CBD2_COEFS(t7, 15, 192 + 32 * i); // e2
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    // a18-a21 transpose
+    {
+      // transpose step 0
+      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_S1_A_IDS, a20),
+                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_S1_A_IDS, a21);
+
+      // transpose step 1
+      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S2_A_IDS, s0_t1);
+
+      // sample Ahat[2, 2] polynomial coefficients
+      SAMPLE_16_COEFS(t0, 8); // Ahat[2, 2]
+    }
+  } while (lens[8] != 256);
+}
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_NEON
+/**
+ * Sample polynomials for pke768_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[2,0], A[0,1], A[1,1],
+ * A[2,1], A[0,2], A[1,2], A[2,2], r[0], r[1], r[2], e1[0], e1[1],
+ * e1[2], and e2.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out 16 output polynomials.
+ * @param[in] a_seed A seed (32 bytes).
+ * @param[in] s_seed r, e1, and e2 seed (32 bytes).
+ */
+static inline void pke768_encrypt_sample_neon(poly_t out[static 16], const uint8_t a_seed[32], const uint8_t s_seed[static 32]) {
+  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, and e1 seed
+
+  neon_ahat_polys(out + 0, ap, 0x0000, 0x0100); // A[0,0], A[1,0]
+  neon_ahat_polys(out + 2, ap, 0x0200, 0x0001); // A[2,0], A[0,1]
+  neon_ahat_polys(out + 4, ap, 0x0101, 0x0201); // A[1,1], A[2,1]
+  neon_ahat_polys(out + 6, ap, 0x0002, 0x0102); // A[0,2], A[1,2]
+  neon_ahat_poly(out + 8, ap, 0x0202); // A[2,2]
+  neon_cbd2_polys(out + 9, sp, 0x00, 0x01); // r[0], r[1]
+  neon_cbd2_polys(out + 11, sp, 0x02, 0x03); // r[2], e1[0]
+  neon_cbd2_polys(out + 13, sp, 0x04, 0x05); // e1[1], e1[2]
+  neon_cbd2_poly(out + 15, sp, 0x06); // e2
+}
+#endif /* BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Sample polynomials for pke768_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[2,0], A[0,1], A[1,1],
+ * A[2,1], A[0,2], A[1,2], A[2,2], r[0], r[1], r[2], e1[0], e1[1],
+ * e1[2], and e2.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] out 16 output polynomials.
+ * @param[in] a_seed A seed (32 bytes).
+ * @param[in] s_seed r, e1, and e2 seed (32 bytes).
+ */
+static inline void pke768_encrypt_sample_scalar(poly_t out[static 16], const uint8_t a_seed[32], const uint8_t s_seed[static 32]) {
+  for (size_t i = 0; i < PKE768_K; i++) {
+    for (size_t j = 0; j < PKE768_K; j++) {
+      poly_sample_ntt(out + (PKE768_K * i + j), a_seed, i, j);
+    }
+  }
+
+  // sample r vector from CBD(2) (PKE768_ETA1)
+  for (size_t i = 0; i < PKE768_K; i++) {
+    poly_sample_cbd2(out + 9 + i, s_seed, i);
+  }
+
+  // sample e1 vector from CBD(2) (PKE768_ETA2)
+  for (size_t i = 0; i < PKE768_K; i++) {
+    poly_sample_cbd2(out + 12 + i, s_seed, PKE768_K + i);
+  }
+
+  // sample e2 polynomial from CBD(2) (PKE768_ETA2)
+  poly_sample_cbd2(out + 15, s_seed, 2 * PKE768_K);
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+#define pke768_keygen_sample pke768_keygen_sample_avx512
+#define pke768_encrypt_sample pke768_encrypt_sample_avx512
+#elif BACKEND == BACKEND_NEON
+#define pke768_keygen_sample pke768_keygen_sample_neon
+#define pke768_encrypt_sample pke768_encrypt_sample_neon
+#elif BACKEND == BACKEND_SCALAR
+#define pke768_keygen_sample pke768_keygen_sample_scalar
+#define pke768_encrypt_sample pke768_encrypt_sample_scalar
+#else
+#error "unknown backend"
+#endif /* BACKEND */
+
+/**
+ * Generate PKE768 encryption and decryption key from given 32-byte
+ * seed.
+ *
+ * @param[out] ek PKE768 encryption key (1184 bytes).
+ * @param[out] dk PKE768 decryption key (1152 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ */
+static inline void pke768_keygen(uint8_t ek[static PKE768_EK_SIZE], uint8_t dk[static PKE768_DK_SIZE], const uint8_t seed[static 32]) {
+  // get sha3-512 hash of seed, get rho and sigma (each 32 bytes)
+  uint8_t rs[64] = { 0 }; // rho = rs[0,31], sigma = rs[32,63]
+  sha3_512(seed, 32, rs); // rho, sigma = sha3-512(seed)
+
+  // sample A, s, and e polynomial coefficients
+  poly_t ps[PKE768_K * PKE768_K + 2 * PKE768_K] = { 0 };
+  pke768_keygen_sample(ps, rs);
+  poly_t *a = ps, *s = ps + 9, *e = ps + 12;
+
+  // s = NTT(s), e = NTT(e) (R_q -> T_q)
+  vec3_ntt(s);
+  vec3_ntt(e);
+
+  // t = As + e (NTT)
+  poly_t t[PKE768_K] = { 0 };
+  mat3_mul(t, a, s); // t = As
+  vec3_add(t, e); // t += e
+
+  // ek <- t (NTT)
+  vec3_encode(ek, t);
+
+  // ek <- t || rho
+  memcpy(ek + (PKE768_K * 384), rs, 32);
+
+  // dk <- s (NTT)
+  vec3_encode(dk, s);
+}
+
+/**
+ * Encrypt 32-byte message `m` using PKE768 encryption key `ek` and
+ * randomness `enc_rand` and store the PKE768 ciphertext in output
+ * buffer `ct`.
+ *
+ * @param[out] ct Output PKE768 ciphertext buffer (1088 bytes).
+ * @param[in] ek PKE768 encryption key (1184 bytes).
+ * @param[in] m Plaintext message (32 bytes).
+ * @param[in] enc_rand Randomness seed (32 bytes).
+ */
+static inline void pke768_encrypt(uint8_t ct[static PKE768_CT_SIZE], const uint8_t ek[static PKE768_EK_SIZE], const uint8_t m[static 32], const uint8_t enc_rand[static 32]) {
+  // decode t from first 768 bytes of ek
+  poly_t t[PKE768_K] = { 0 };
+  vec3_decode(t, ek);
+
+  // read rho from ek (32 bytes)
+  const uint8_t * const rho = ek + 384 * PKE768_K;
+
+  // sample A, r, e1, and e2 polynomial coefficients
+  poly_t ps[16] = { 0 };
+  pke768_encrypt_sample(ps, rho, enc_rand);
+  poly_t *a = ps, *r = ps + 9, *e1 = ps + 12, *e2 = ps + 15;
+
+  vec3_ntt(r); // r = NTT(r)
+
+  poly_t u[PKE768_K] = { 0 };
+  mat3_mul(u, a, r);  // u = (A*r)
+  vec3_inv_ntt(u);    // u = InvNTT(u)
+  vec3_add(u, e1);    // u += e1
+
+  // encode u, append to ct
+  vec3_encode_10bit(ct, u);
+
+  // decode message `m` into polynomial `mu`
+  //
+  // each bit of message `m` set to 1 is decoded as a coefficient of
+  // value 1665 in polynomial `mu`, and each bit set to 0 is decoded as
+  // a coefficient of value 0 in polynomial `mu`.
+  poly_t mu = { 0 };
+  poly_decode_1bit(&mu, m);
+
+  poly_t v = { 0 };
+  vec3_dot(&v, t, r);     // v = t * r
+  poly_inv_ntt(&v);       // v = InvNTT(v)
+  poly_add2(&v, e2, &mu); // v += e2 + mu
+
+  // encode v, append to ct
+  poly_encode_4bit(ct + 32 * PKE768_DU * PKE768_K, &v);
+}
+
+/**
+ * Decrypt 32-byte plaintext message from PKE768 ciphertext `ct` using
+ * PKE768 decryption key `dk` and store the result in output buffer `m`.
+ *
+ * @param[out] m Output plaintext message (32 bytes).
+ * @param[in] dk PKE768 decryption key (1152 bytes).
+ * @param[in] ct Input ciphertext buffer (1088 bytes).
+ */
+static inline void pke768_decrypt(uint8_t m[static FIPS203IPD_KEY_SIZE], const uint8_t dk[static PKE768_DK_SIZE], const uint8_t ct[PKE768_CT_SIZE]) {
+  // decode u
+  poly_t u[PKE768_K] = { 0 };
+  vec3_decode_10bit(u, ct);
+
+  // decode v
+  poly_t v = { 0 };
+  poly_decode_4bit(&v, ct + 32 * PKE768_DU * PKE768_K);
+
+  // decode ŝ
+  poly_t s[PKE768_K] = { 0 };
+  vec3_decode(s, dk);
+
+  poly_t su = { 0 }; // su = s * u
+  vec3_ntt(u); // u = NTT(u)
+  vec3_dot(&su, s, u); // su = s * u
+  poly_inv_ntt(&su); // su = InvNTT(su)
+
+  poly_t w = v;
+  poly_sub(&w, &su); // w -= su
+
+  // encode w coefficients as 1-bit, write to output
+  poly_encode_1bit(m, &w);
+}
+
+/**
+ * @brief Generate KEM768 encapsulation key `ek` and decapsulation key
+ * `dk` from 64 byte random seed `seed`.
+ * @ingroup kem768
+ *
+ * @warning `seed` **must** be 64 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 192 bits of strength.
+ *
+ * @param[out] ek KEM768 encapsulation key (1184 bytes).
+ * @param[out] dk KEM768 decapsulation key (2400 bytes).
+ * @param[in] seed Random seed (64 bytes).
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem768_keygen(uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]) {
+  const uint8_t * const z = seed; // random implicit rejection seed (32 bytes)
+  const uint8_t * const d = seed + 32; // pke768_keygen() random seed (32 bytes)
+
+  // generate ek and dk
+  pke768_keygen(ek, dk, d);
+
+  // KEM: append ek, sha3-256(ek), and z to dk
+  memcpy(dk + PKE768_DK_SIZE, ek, PKE768_EK_SIZE);
+  sha3_256(ek, PKE768_EK_SIZE, dk + PKE768_DK_SIZE + PKE768_EK_SIZE);
+  memcpy(dk + PKE768_DK_SIZE + PKE768_EK_SIZE + 32, z, 32);
+}
+
+/**
+ * @brief Generate KEM768 shared key `key` and ciphertext `ct` from given
+ * encapsulation key `ek` and randomness `seed`.
+ * @ingroup kem768
+ *
+ * @warning `seed` **must** be 32 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 192 bits of strength.
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1088 bytes).
+ * @param[in] ek KEM768 encapsulation key (1184 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem768_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]) {
+  uint8_t data[64] = { 0 };
+  memcpy(data, seed, 32); // append seed
+  sha3_256(ek, PKE768_EK_SIZE, data + 32); // append sha3-256(ek)
+
+  uint8_t kr[64] = { 0 };
+  sha3_512(data, 64, kr); // (K, r) <- sha3-512(data)
+  const uint8_t * const r = kr + 32; // get r
+
+  memcpy(key, kr, 32); // copy shared key to output
+  pke768_encrypt(ct, ek, seed, r); // ct <- pke.encrypt(ek, seed, r)
+}
+
+/**
+ * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM768
+ * decapsulation key `dk` with implicit rejection.
+ * @ingroup kem768
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1088 bytes).
+ * @param[in] dk KEM768 decapsulation key (2400 bytes).
+ */
+void fips203ipd_kem768_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE]) {
+  const uint8_t * const dk_pke = dk;
+  const uint8_t * const ek_pke = dk + 384 * PKE768_K;
+  const uint8_t * const h = dk + (2 * 384 * PKE768_K + 32);
+  const uint8_t * const z = dk + (2 * 384 * PKE768_K + 64);
+
+  uint8_t mh[64] = { 0 };
+  pke768_decrypt(mh, dk_pke, ct); // decrypt ct into mh
+  memcpy(mh + 32, h, 32); // copy hash
+
+  uint8_t kr[64] = { 0 };
+  sha3_512(mh, 64, kr); // (K', r') <- sha3-512(m || r)
+
+  // zc = z || ct
+  uint8_t zc[32 + PKE768_CT_SIZE] = { 0 };
+  memcpy(zc, z, 32);
+  memcpy(zc + 32, ct, PKE768_CT_SIZE);
+
+  // rk: generate implicit rejection key from z and ciphertext
+  uint8_t k_rej[32] = { 0 };
+  shake256(zc, sizeof(zc), k_rej, sizeof(k_rej)); // K_rej = J(z||c)
+
+  // re-encrypt `k` with PKE768 key `ek_pke`
+  // (ct2 is used for implicit rejection check below)
+  uint8_t ct2[PKE768_CT_SIZE] = { 0 };
+  pke768_encrypt(ct2, ek_pke, mh, kr + 32); // ct2 <- pke.encrypt(ek, m', r')
+
+  // compare ct and ct2 using constant-time comparison.  if they match,
+  // then copy decapsulated key to output buffer `key`.  if `ct` and `ct2`
+  // don't match, then copy the implicit rejection key `k_rej` to the
+  // output buffer `key`.
+  ct_copy(key, ct_diff(ct, ct2, PKE768_CT_SIZE), kr, k_rej);
+}
+
+#if BACKEND == BACKEND_AVX512
+/**
+ * Sample polynomials for pke1024_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[0,2], A[0,3], A[1,0],
+ * A[1,1], A[1,2], A[1,3], A[2,0], A[2,1], A[2,2], A[2,3], A[3,0],
+ * A[3,1], A[3,2], A[3,3], s[0], s[1], s[2], s[3], e[0], e[1], e[2], and
+ * e[3].
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out 24 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke1024_keygen_sample_avx512(poly_t out[static 24], const uint8_t seed[static 64]) {
+  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
+
+  // lens:
+  // - indices 0-15: number of coefficients for Ahat elements
+  uint32_t lens[16] ALIGN(64) = { 0 }; // polynomial lengths
+
+  // keccak state:
+  //   -------------------------------------
+  //   | Row |          Registers          |
+  //   |-----|-----------------------------|
+  //   |  2  | a13 | a14 | a10 | a11 | a12 |
+  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
+  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
+  //   |  4  | a23 | a24 | a20 | a21 | a22 |
+  //   |  3  | a18 | a19 | a15 | a16 | a17 |
+  //   -------------------------------------
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for a
+  __m512i a0 = _mm512_set1_epi64(ap[0]),
+          a1 = _mm512_set1_epi64(ap[1]),
+          a2 = _mm512_set1_epi64(ap[2]),
+          a3 = _mm512_set1_epi64(ap[3]);
+
+  // keccak state, row 0, column 4
+  // lanes 0-7: A element coordinates (j, i) and shake padding (0x1f)
+  //
+  // NOTE: the A element coordinates are swapped here versus
+  // encrypt/decrypt, because this code samples A and encrypt/decrypt
+  // sample the transpose of A.
+  __m512i a4 = { 0x1f0000, 0x1f0001, 0x1f0002, 0x1f0003, 0x1f0100, 0x1f0101, 0x1f0102, 0x1f0103 };
+
+  // keccak state, rows 1-3 (all zero)
+  __m512i a5 = _mm512_setzero_si512(),
+          a6 = _mm512_setzero_si512(),
+          a7 = _mm512_setzero_si512(),
+          a8 = _mm512_setzero_si512(),
+          a9 = _mm512_setzero_si512(),
+          a10 = _mm512_setzero_si512(),
+          a11 = _mm512_setzero_si512(),
+          a12 = _mm512_setzero_si512(),
+          a13 = _mm512_setzero_si512(),
+          a14 = _mm512_setzero_si512(),
+          a15 = _mm512_setzero_si512(),
+          a16 = _mm512_setzero_si512(),
+          a17 = _mm512_setzero_si512(),
+          a18 = _mm512_setzero_si512(),
+          a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - a20 (column 0): set high bit in last byte of shake128 rate
+  // - all other columns: all zero
+  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
+          a21 = _mm512_setzero_si512(),
+          a22 = _mm512_setzero_si512(),
+          a23 = _mm512_setzero_si512(),
+          a24 = _mm512_setzero_si512();
+
+  // loop until the first 8 Ahat polynomials have 256 coefficients
+  // (e.g., lens[0..7] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[0, 3]
+    //    - t4: 64 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t6: 64 bytes of SHAKE128 output for Ahat[1, 2]
+    //    - t7: 64 bytes of SHAKE128 output for Ahat[1, 3]
+    //
+    // 2. For t0-t7, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
+    //    registers a18-a21.  This organizes the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[0, 3]
+    //    - t4: 24 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t6: 24 bytes of SHAKE128 output for Ahat[1, 2]
+    //    - t7: 24 bytes of SHAKE128 output for Ahat[1, 3]
+    //
+    // 6. For t0-t7, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 3]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 3]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 3]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 3]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 3]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 3]
+    }
+
+    // a18-a21 transpose
+    {
+      // transpose step 0
+      const __m512i s0_t0 = a18,
+                    s0_t1 = a19,
+                    s0_t2 = a20,
+                    s0_t3 = a21,
+                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
+                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
+                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
+                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
+
+      // transpose step 1
+      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
+                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
+                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
+                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
+                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
+                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
+                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
+                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
+
+      // transpose step 2
+      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
+                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
+                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
+                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
+                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
+                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
+                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
+                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
+
+      // sample/store polynomial coefficients
+      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_16_COEFS(t1, 1); // Ahat[0, 1]
+      SAMPLE_16_COEFS(t2, 2); // Ahat[0, 2]
+      SAMPLE_16_COEFS(t3, 3); // Ahat[0, 3]
+      SAMPLE_16_COEFS(t4, 4); // Ahat[1, 0]
+      SAMPLE_16_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_16_COEFS(t6, 6); // Ahat[1, 2]
+      SAMPLE_16_COEFS(t7, 7); // Ahat[1, 3]
+    }
+  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
+
+  // init keccak state for the following items:
+  // - lanes 0-7: A[2,0]-A[3,3]
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for a
+  a0 = _mm512_set1_epi64(ap[0]);
+  a1 = _mm512_set1_epi64(ap[1]);
+  a2 = _mm512_set1_epi64(ap[2]);
+  a3 = _mm512_set1_epi64(ap[3]);
+
+  // keccak state, row 0, column 4
+  // lanes 0-7: A element coordinates (j, i) and shake padding (0x1f)
+  //
+  // NOTE: the A element coordinates are swapped here versus
+  // encrypt/decrypt, because this code samples A and encrypt/decrypt
+  // sample the transpose of A.
+  static const __m512i a_tail_a4_vals = { 0x1f0200, 0x1f0201, 0x1f0202, 0x1f0203, 0x1f0300, 0x1f0301, 0x1f0302, 0x1f0303 };
+  a4 = a_tail_a4_vals;
+
+  // keccak state, rows 1-3 (all zero)
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_setzero_si512();
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - a20 (column 0): set high bit in last byte of shake128 rate
+  // - all other columns: all zero
+  a20 = _mm512_set1_epi64(0x8000000000000000ULL);
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  // loop until the second 8 Ahat polynomials have 256 coefficients
+  // (e.g., lens[8..15] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[2, 1]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[2, 2]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[2, 3]
+    //    - t4: 64 bytes of SHAKE128 output for Ahat[3, 0]
+    //    - t5: 64 bytes of SHAKE128 output for Ahat[3, 1]
+    //    - t6: 64 bytes of SHAKE128 output for Ahat[3, 2]
+    //    - t7: 64 bytes of SHAKE128 output for Ahat[3, 3]
+    //
+    // 2. For t0-t7, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
+    //    registers a18-a21.  This organizes the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[2, 1]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 2]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[2, 3]
+    //    - t4: 24 bytes of SHAKE128 output for Ahat[3, 0]
+    //    - t5: 24 bytes of SHAKE128 output for Ahat[3, 1]
+    //    - t6: 24 bytes of SHAKE128 output for Ahat[3, 2]
+    //    - t7: 24 bytes of SHAKE128 output for Ahat[3, 3]
+    //
+    // 6. For t0-t7, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t1, 9); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_32_COEFS(t3, 11); // Ahat[2, 3]
+      SAMPLE_32_COEFS(t4, 12); // Ahat[3, 0]
+      SAMPLE_32_COEFS(t5, 13); // Ahat[3, 1]
+      SAMPLE_32_COEFS(t6, 14); // Ahat[3, 2]
+      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t1, 9); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_32_COEFS(t3, 11); // Ahat[2, 3]
+      SAMPLE_32_COEFS(t4, 12); // Ahat[3, 0]
+      SAMPLE_32_COEFS(t5, 13); // Ahat[3, 1]
+      SAMPLE_32_COEFS(t6, 14); // Ahat[3, 2]
+      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t1, 9); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_32_COEFS(t3, 11); // Ahat[2, 3]
+      SAMPLE_32_COEFS(t4, 12); // Ahat[3, 0]
+      SAMPLE_32_COEFS(t5, 13); // Ahat[3, 1]
+      SAMPLE_32_COEFS(t6, 14); // Ahat[3, 2]
+      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
+    }
+
+    // a18-a21 transpose
+    {
+      // transpose step 0
+      const __m512i s0_t0 = a18,
+                    s0_t1 = a19,
+                    s0_t2 = a20,
+                    s0_t3 = a21,
+                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
+                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
+                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
+                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
+
+      // transpose step 1
+      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
+                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
+                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
+                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
+                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
+                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
+                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
+                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
+
+      // transpose step 2
+      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
+                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
+                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
+                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
+                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
+                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
+                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
+                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
+
+      // sample/store polynomial coefficients
+      SAMPLE_16_COEFS(t0, 8); // Ahat[2, 0]
+      SAMPLE_16_COEFS(t1, 9); // Ahat[2, 1]
+      SAMPLE_16_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_16_COEFS(t3, 11); // Ahat[2, 3]
+      SAMPLE_16_COEFS(t4, 12); // Ahat[3, 0]
+      SAMPLE_16_COEFS(t5, 13); // Ahat[3, 1]
+      SAMPLE_16_COEFS(t6, 14); // Ahat[3, 2]
+      SAMPLE_16_COEFS(t7, 15); // Ahat[3, 3]
+    }
+  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens + 8), K256x8));
+
+  // set up another keccak permutation for the following items:
+  // - lane 0-3: s[0]-s[3] (cbd2)
+  // - lanes 4-7: e[0]-e[3] (cbd2)
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for s, e
+  a0 = _mm512_set1_epi64(sp[0]);
+  a1 = _mm512_set1_epi64(sp[1]);
+  a2 = _mm512_set1_epi64(sp[2]);
+  a3 = _mm512_set1_epi64(sp[3]);
+
+  // keccak state, row 0, column 4
+  // - lane 0: A[2, 2] element coordinates (j, i) and shake padding (0x1f)
+  // - lanes 0-3: s[0]-s[3] element index and shake padding (0x1f)
+  // - lanes 4-7: e[0]-e[3] element index and shake padding (0x1f)
+  static const __m512i ase_a4_vals = { 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0x1f06, 0x1f07 };
+  a4 = ase_a4_vals;
+
+  // keccak state, rows 1-2 (all zero)
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+
+  // keccak state, rows 3:
+  // - column 1 (a16), lanes 0-7: set high bit of last byte of shake256 rate
+  // - other columns: all zero
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_set1_epi64(0x8000000000000000ULL);
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4 (all zero)
+  a20 = _mm512_setzero_si512();
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a24):
+    //
+    // - lanes 0-3: permuted shake256 state for s[0]-s[3].
+    // - lanes 4-7: permuted shake256 state for e[0]-e[3].
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
+      // of s[0..3] and e[0..3] polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 4; i++) {
+        // sample coefficients
+        SAMPLE_32_CBD2_COEFS(t0, 16, 32 * i); // s[0]
+        SAMPLE_32_CBD2_COEFS(t1, 17, 32 * i); // s[1]
+        SAMPLE_32_CBD2_COEFS(t2, 18, 32 * i); // s[2]
+        SAMPLE_32_CBD2_COEFS(t3, 19, 32 * i); // s[3]
+        SAMPLE_32_CBD2_COEFS(t4, 20, 32 * i); // e[0]
+        SAMPLE_32_CBD2_COEFS(t5, 21, 32 * i); // e[1]
+        SAMPLE_32_CBD2_COEFS(t6, 22, 32 * i); // e[2]
+        SAMPLE_32_CBD2_COEFS(t7, 23, 32 * i); // e[3]
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    {
+      // a8-a15 transpose
+      TRANSPOSE_8(a8, a9, a10, a11, a12, a13, a14, a15);
+
+      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
+      // of s[0..3] and e[0..3] polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 4; i++) {
+        // sample coefficients
+        SAMPLE_32_CBD2_COEFS(t0, 16, 128 + 32 * i); // s[0]
+        SAMPLE_32_CBD2_COEFS(t1, 17, 128 + 32 * i); // s[1]
+        SAMPLE_32_CBD2_COEFS(t2, 18, 128 + 32 * i); // s[2]
+        SAMPLE_32_CBD2_COEFS(t3, 19, 128 + 32 * i); // s[3]
+        SAMPLE_32_CBD2_COEFS(t4, 20, 128 + 32 * i); // e[0]
+        SAMPLE_32_CBD2_COEFS(t5, 21, 128 + 32 * i); // e[1]
+        SAMPLE_32_CBD2_COEFS(t6, 22, 128 + 32 * i); // e[2]
+        SAMPLE_32_CBD2_COEFS(t7, 23, 128 + 32 * i); // e[3]
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+  }
+}
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_NEON
+/**
+ * Sample polynomials for pke1024_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[0,2], A[0,3], A[1,0],
+ * A[1,1], A[1,2], A[1,3], A[2,0], A[2,1], A[2,2], A[2,3], A[3,0],
+ * A[3,1], A[3,2], A[3,3], s[0], s[1], s[2], s[3], e[0], e[1], e[2], and
+ * e[3].
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out 24 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke1024_keygen_sample_neon(poly_t out[static 24], const uint8_t seed[static 64]) {
+  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
+
+  neon_ahat_polys(out +  0, ap, 0x0000, 0x0001); // A[0,0], A[0,1]
+  neon_ahat_polys(out +  2, ap, 0x0002, 0x0003); // A[0,2], A[0,3]
+  neon_ahat_polys(out +  4, ap, 0x0100, 0x0101); // A[1,0], A[1,1]
+  neon_ahat_polys(out +  6, ap, 0x0102, 0x0103); // A[1,2], A[1,3]
+  neon_ahat_polys(out +  8, ap, 0x0200, 0x0201); // A[2,0], A[2,1]
+  neon_ahat_polys(out + 10, ap, 0x0202, 0x0203); // A[2,2], A[2,3]
+  neon_ahat_polys(out + 12, ap, 0x0300, 0x0301); // A[3,0], A[3,1]
+  neon_ahat_polys(out + 14, ap, 0x0302, 0x0303); // A[3,2], A[3,3]
+  neon_cbd2_polys(out + 16, sp, 0x00, 0x01); // s[0], s[1]
+  neon_cbd2_polys(out + 18, sp, 0x02, 0x03); // s[2], s[3]
+  neon_cbd2_polys(out + 20, sp, 0x04, 0x05); // e[0], e[1]
+  neon_cbd2_polys(out + 22, sp, 0x06, 0x07); // e[2], e[3]
+}
+#endif /* BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Sample polynomials for pke1024_keygen().
+ *
+ * The output polynomials are: A[0,0], A[0,1], A[0,2], A[0,3], A[1,0],
+ * A[1,1], A[1,2], A[1,3], A[2,0], A[2,1], A[2,2], A[2,3], A[3,0],
+ * A[3,1], A[3,2], A[3,3], s[0], s[1], s[2], s[3], e[0], e[1], e[2], and
+ * e[3].
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] out 24 output polynomials.
+ * @param[in] seed Random seed (64 bytes).
+ */
+static inline void pke1024_keygen_sample_scalar(poly_t out[static 24], const uint8_t seed[static 64]) {
+  const uint8_t * const sigma = seed + 32; // sigma
+
+  // sample A hat matrix polynomial coefficients from T_q (NTT)
+  for (size_t i = 0; i < PKE1024_K; i++) {
+    for (size_t j = 0; j < PKE1024_K; j++) {
+      poly_sample_ntt(out + (PKE1024_K * i + j), seed, j, i);
+    }
+  }
+
+  // sample poly coefs for vectors s and e from CBD(2) (PKE1024_ETA1)
+  // (note: sampling is done in R_q, not in NTT domain)
+  for (size_t i = 0; i < 2 * PKE1024_K; i++) {
+    poly_sample_cbd2(out + 16 + i, sigma, i);
+  }
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+/**
+ * Sample polynomials for pke1024_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[2,0], A[3,0], A[0,1],
+ * A[1,1], A[2,1], A[3,1], A[0,2], A[1,2], A[2,2], A[3,2], A[0,3],
+ * A[1,3], A[2,3], A[3,3], r[0], r[1], r[2], r[3], e1[0], e1[1], e1[2],
+ * e1[3], and e2.
+ *
+ * @note AVX-512 implementation.
+ *
+ * @param[out] out 25 output polynomials.
+ * @param[in] a_seed A seed (32 bytes).
+ * @param[in] s_seed r, e1, and e2 seed (32 bytes).
+ */
+static inline void pke1024_encrypt_sample_avx512(poly_t out[static 25], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
+  const uint64_t * const ap = (uint64_t*) a_seed; // A seed
+  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, e2 seed
+
+  // lens:
+  // - indices 0-15: number of coefficients for Ahat elements
+  uint32_t lens[16] ALIGN(32) = { 0 }; // polynomial lengths
+
+  // keccak state:
+  //   -------------------------------------
+  //   | Row |          Registers          |
+  //   |-----|-----------------------------|
+  //   |  2  | a13 | a14 | a10 | a11 | a12 |
+  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
+  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
+  //   |  4  | a23 | a24 | a20 | a21 | a22 |
+  //   |  3  | a18 | a19 | a15 | a16 | a17 |
+  //   -------------------------------------
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for a
+  __m512i a0 = _mm512_set1_epi64(ap[0]),
+          a1 = _mm512_set1_epi64(ap[1]),
+          a2 = _mm512_set1_epi64(ap[2]),
+          a3 = _mm512_set1_epi64(ap[3]);
+
+  // keccak state, row 0, column 4
+  // lanes 0-7: A element coordinates and shake padding (0x1f)
+  //
+  // NOTE: the A element coordinates are swapped here versus keygen,
+  // because this samples the transpose of A and keygen samples A.
+  __m512i a4 = { 0x1f0000, 0x1f0100, 0x1f0200, 0x1f0300, 0x1f0001, 0x1f0101, 0x1f0201, 0x1f0301 };
+
+  // keccak state, rows 1-3 (all zero)
+  __m512i a5 = _mm512_setzero_si512(),
+          a6 = _mm512_setzero_si512(),
+          a7 = _mm512_setzero_si512(),
+          a8 = _mm512_setzero_si512(),
+          a9 = _mm512_setzero_si512(),
+          a10 = _mm512_setzero_si512(),
+          a11 = _mm512_setzero_si512(),
+          a12 = _mm512_setzero_si512(),
+          a13 = _mm512_setzero_si512(),
+          a14 = _mm512_setzero_si512(),
+          a15 = _mm512_setzero_si512(),
+          a16 = _mm512_setzero_si512(),
+          a17 = _mm512_setzero_si512(),
+          a18 = _mm512_setzero_si512(),
+          a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - a20 (column 0): set high bit in last byte of shake128 rate
+  // - all other columns: all zero
+  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
+          a21 = _mm512_setzero_si512(),
+          a22 = _mm512_setzero_si512(),
+          a23 = _mm512_setzero_si512(),
+          a24 = _mm512_setzero_si512();
+
+  // loop until the first 8 Ahat polynomials have 256 coefficients
+  // (e.g., lens[0..7] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[3, 0]
+    //    - t4: 64 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 1]
+    //    - t7: 64 bytes of SHAKE128 output for Ahat[3, 1]
+    //
+    // 2. For t0-t7, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
+    //    registers a18-a21.  This organizes the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 0]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 0]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[3, 0]
+    //    - t4: 24 bytes of SHAKE128 output for Ahat[0, 1]
+    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 1]
+    //    - t6: 24 bytes of SHAKE128 output for Ahat[2, 1]
+    //    - t7: 24 bytes of SHAKE128 output for Ahat[3, 1]
+    //
+    // 6. For t0-t7, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[3, 0]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[3, 1]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[3, 0]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[3, 1]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_32_COEFS(t3, 3); // Ahat[3, 0]
+      SAMPLE_32_COEFS(t4, 4); // Ahat[0, 1]
+      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 1]
+      SAMPLE_32_COEFS(t7, 7); // Ahat[3, 1]
+    }
+
+    // a18-a21 transpose
+    {
+      // transpose step 0
+      const __m512i s0_t0 = a18,
+                    s0_t1 = a19,
+                    s0_t2 = a20,
+                    s0_t3 = a21,
+                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
+                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
+                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
+                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
+
+      // transpose step 1
+      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
+                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
+                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
+                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
+                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
+                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
+                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
+                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
+
+      // transpose step 2
+      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
+                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
+                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
+                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
+                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
+                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
+                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
+                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
+
+      // sample/store polynomial coefficients
+      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
+      SAMPLE_16_COEFS(t1, 1); // Ahat[1, 0]
+      SAMPLE_16_COEFS(t2, 2); // Ahat[2, 0]
+      SAMPLE_16_COEFS(t3, 3); // Ahat[3, 0]
+      SAMPLE_16_COEFS(t4, 4); // Ahat[0, 1]
+      SAMPLE_16_COEFS(t5, 5); // Ahat[1, 1]
+      SAMPLE_16_COEFS(t6, 6); // Ahat[2, 1]
+      SAMPLE_16_COEFS(t7, 7); // Ahat[3, 1]
+    }
+  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
+
+  // init keccak state for the following items:
+  // - lanes 0-7: A[0,2]-A[3,3]
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for a
+  a0 = _mm512_set1_epi64(ap[0]);
+  a1 = _mm512_set1_epi64(ap[1]);
+  a2 = _mm512_set1_epi64(ap[2]);
+  a3 = _mm512_set1_epi64(ap[3]);
+
+  // keccak state, row 0, column 4
+  // lanes 0-7: A element coordinates and shake padding (0x1f)
+  //
+  // NOTE: the A element coordinates are swapped here versus keygen,
+  // because this samples the transpose of A and keygen samples A.
+  static const __m512i a_tail_a4_vals = { 0x1f0002, 0x1f0102, 0x1f0202, 0x1f0302, 0x1f0003, 0x1f0103, 0x1f0203, 0x1f0303 };
+  a4 = a_tail_a4_vals;
+
+  // keccak state, rows 1-3 (all zero)
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_setzero_si512();
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4
+  // - a20 (column 0): set high bit in last byte of shake128 rate
+  // - all other columns: all zero
+  a20 = _mm512_set1_epi64(0x8000000000000000ULL);
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  // loop until the second 8 Ahat polynomials have 256 coefficients
+  // (e.g., lens[8..15] == 256)
+  do {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a25):
+    //
+    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
+    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
+    //
+    // We proceed as follows:
+    //
+    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
+    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
+    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
+    //
+    //    This organizes the registers as follows:
+    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t1: 64 bytes of SHAKE128 output for Ahat[1, 2]
+    //    - t2: 64 bytes of SHAKE128 output for Ahat[2, 2]
+    //    - t3: 64 bytes of SHAKE128 output for Ahat[3, 2]
+    //    - t4: 64 bytes of SHAKE128 output for Ahat[0, 3]
+    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 3]
+    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 3]
+    //    - t7: 64 bytes of SHAKE128 output for Ahat[3, 3]
+    //
+    // 2. For t0-t7, we do the following:
+    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
+    //       32 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+    //
+    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
+    //    then process registers t0-t7 as per step #2.
+    //
+    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
+    //    registers a18-a21.  This organizes the registers as follows:
+    //
+    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 2]
+    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 2]
+    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 2]
+    //    - t3: 24 bytes of SHAKE128 output for Ahat[3, 2]
+    //    - t4: 24 bytes of SHAKE128 output for Ahat[0, 3]
+    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 3]
+    //    - t6: 24 bytes of SHAKE128 output for Ahat[2, 3]
+    //    - t7: 24 bytes of SHAKE128 output for Ahat[3, 3]
+    //
+    // 6. For t0-t7, do the following:
+    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
+    //       16 16-bit unsigned integers.
+    //    b. Build a rejection sampling mask to exclude integers >= Q.
+    //    c. Use the mask to store coefficients and increment the
+    //       polynomial's coefficient count.
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t1, 9); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_32_COEFS(t3, 11); // Ahat[3, 2]
+      SAMPLE_32_COEFS(t4, 12); // Ahat[0, 3]
+      SAMPLE_32_COEFS(t5, 13); // Ahat[1, 3]
+      SAMPLE_32_COEFS(t6, 14); // Ahat[2, 3]
+      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
+    }
+
+    {
+      // a6-a13 transpose
+      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t1, 9); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_32_COEFS(t3, 11); // Ahat[3, 2]
+      SAMPLE_32_COEFS(t4, 12); // Ahat[0, 3]
+      SAMPLE_32_COEFS(t5, 13); // Ahat[1, 3]
+      SAMPLE_32_COEFS(t6, 14); // Ahat[2, 3]
+      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
+    }
+
+    {
+      // a12-a19 transpose
+      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
+
+      // sample polynomial coefficients
+      SAMPLE_32_COEFS(t0, 8); // Ahat[0, 2]
+      SAMPLE_32_COEFS(t1, 9); // Ahat[1, 2]
+      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_32_COEFS(t3, 11); // Ahat[3, 2]
+      SAMPLE_32_COEFS(t4, 12); // Ahat[0, 3]
+      SAMPLE_32_COEFS(t5, 13); // Ahat[1, 3]
+      SAMPLE_32_COEFS(t6, 14); // Ahat[2, 3]
+      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
+    }
+
+    // a18-a21 transpose
+    {
+      // transpose step 0
+      const __m512i s0_t0 = a18,
+                    s0_t1 = a19,
+                    s0_t2 = a20,
+                    s0_t3 = a21,
+                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
+                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
+                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
+                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
+
+      // transpose step 1
+      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
+                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
+                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
+                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
+                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
+                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
+                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
+                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
+
+      // transpose step 2
+      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
+                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
+                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
+                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
+                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
+                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
+                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
+                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
+
+      // sample/store polynomial coefficients
+      SAMPLE_16_COEFS(t0, 8); // Ahat[0, 2]
+      SAMPLE_16_COEFS(t1, 9); // Ahat[1, 2]
+      SAMPLE_16_COEFS(t2, 10); // Ahat[2, 2]
+      SAMPLE_16_COEFS(t3, 11); // Ahat[3, 2]
+      SAMPLE_16_COEFS(t4, 12); // Ahat[0, 2]
+      SAMPLE_16_COEFS(t5, 13); // Ahat[1, 2]
+      SAMPLE_16_COEFS(t6, 14); // Ahat[2, 2]
+      SAMPLE_16_COEFS(t7, 15); // Ahat[3, 2]
+    }
+  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens + 8), K256x8));
+
+  // set up another keccak permutation for the following items:
+  // - lane 0-3: r[0]-r[3] (cbd2)
+  // - lanes 4-7: e1[0]-e1[3] (cbd2)
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0-7: rho for r, e1
+  a0 = _mm512_set1_epi64(sp[0]);
+  a1 = _mm512_set1_epi64(sp[1]);
+  a2 = _mm512_set1_epi64(sp[2]);
+  a3 = _mm512_set1_epi64(sp[3]);
+
+  // keccak state, row 0, column 4
+  // - lanes 0-3: r[0]-r[3] element index and shake padding (0x1f)
+  // - lanes 4-7: e1[0]-e1[3] element index and shake padding (0x1f)
+  static const __m512i re_a4_vals = { 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0x1f06, 0x1f07 };
+  a4 = re_a4_vals;
+
+  // keccak state, rows 1-2 (all zero)
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+
+  // keccak state, rows 3:
+  // - column 1 (a16), lanes 0-7: set high bit of last byte of shake256 rate
+  // - other columns: all zero
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_set1_epi64(0x8000000000000000ULL);
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4 (all zero)
+  a20 = _mm512_setzero_si512();
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a24):
+    //
+    // - lanes 0-3: permuted shake256 state for r[0]-r[3].
+    // - lanes 4-7: permuted shake256 state for e1[0]-e2[3].
+
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
+      // of s[0..3] and e[0..3] polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 4; i++) {
+        // sample coefficients
+        SAMPLE_32_CBD2_COEFS(t0, 16, 32 * i); // r[0]
+        SAMPLE_32_CBD2_COEFS(t1, 17, 32 * i); // r[1]
+        SAMPLE_32_CBD2_COEFS(t2, 18, 32 * i); // r[2]
+        SAMPLE_32_CBD2_COEFS(t3, 19, 32 * i); // r[3]
+        SAMPLE_32_CBD2_COEFS(t4, 20, 32 * i); // e1[0]
+        SAMPLE_32_CBD2_COEFS(t5, 21, 32 * i); // e1[1]
+        SAMPLE_32_CBD2_COEFS(t6, 22, 32 * i); // e1[2]
+        SAMPLE_32_CBD2_COEFS(t7, 23, 32 * i); // e1[3]
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    {
+      // a8-a15 transpose
+      TRANSPOSE_8(a8, a9, a10, a11, a12, a13, a14, a15);
+
+      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
+      // of s[0..3] and e[0..3] polynomials
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 4; i++) {
+        // sample coefficients
+        SAMPLE_32_CBD2_COEFS(t0, 16, 128 + 32 * i); // r[0]
+        SAMPLE_32_CBD2_COEFS(t1, 17, 128 + 32 * i); // r[1]
+        SAMPLE_32_CBD2_COEFS(t2, 18, 128 + 32 * i); // r[2]
+        SAMPLE_32_CBD2_COEFS(t3, 19, 128 + 32 * i); // r[3]
+        SAMPLE_32_CBD2_COEFS(t4, 20, 128 + 32 * i); // e1[0]
+        SAMPLE_32_CBD2_COEFS(t5, 21, 128 + 32 * i); // e1[1]
+        SAMPLE_32_CBD2_COEFS(t6, 22, 128 + 32 * i); // e1[2]
+        SAMPLE_32_CBD2_COEFS(t7, 23, 128 + 32 * i); // e1[3]
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+  }
+
+  // set up final keccak permutation for the following items:
+  // - lane 0: e2 (cbd2)
+
+  // keccak state, row 0, columns 0-3
+  // - lanes 0: rho for e2
+  // - other lanes: unused
+  a0 = _mm512_maskz_set1_epi64(1, sp[0]);
+  a1 = _mm512_maskz_set1_epi64(1, sp[1]);
+  a2 = _mm512_maskz_set1_epi64(1, sp[2]);
+  a3 = _mm512_maskz_set1_epi64(1, sp[3]);
+
+  // keccak state, row 0, column 4
+  // - lanes 0: e2 element index and shake padding (0x1f)
+  // - other lanes: unused
+  a4 = _mm512_maskz_set1_epi64(1, 0x1f08);
+
+  // keccak state, rows 1-2 (all zero)
+  a5 = _mm512_setzero_si512();
+  a6 = _mm512_setzero_si512();
+  a7 = _mm512_setzero_si512();
+  a8 = _mm512_setzero_si512();
+  a9 = _mm512_setzero_si512();
+  a10 = _mm512_setzero_si512();
+  a11 = _mm512_setzero_si512();
+  a12 = _mm512_setzero_si512();
+  a13 = _mm512_setzero_si512();
+  a14 = _mm512_setzero_si512();
+
+  // keccak state, rows 3:
+  // - column 1 (a16), lane 0: set high bit of last byte of shake256 rate
+  // - column 1 (a16), other lanes: unused (all zero)
+  // - other columns: all zero
+  a15 = _mm512_setzero_si512();
+  a16 = _mm512_maskz_set1_epi64(1, 0x8000000000000000ULL);
+  a17 = _mm512_setzero_si512();
+  a18 = _mm512_setzero_si512();
+  a19 = _mm512_setzero_si512();
+
+  // keccak state, row 4 (all zero)
+  a20 = _mm512_setzero_si512();
+  a21 = _mm512_setzero_si512();
+  a22 = _mm512_setzero_si512();
+  a23 = _mm512_setzero_si512();
+  a24 = _mm512_setzero_si512();
+
+  {
+    PERMUTE_STATES_AVX512();
+
+    // At this point the keccak permutation is finished and we have the
+    // following in 25 avx512 registers (a0-a24):
+    //
+    // - lanes 0: permuted shake256 state for e2
+    {
+      // a0-a7 transpose
+      TRANSPOSE_8_TO_1(a0, a1, a2, a3, a4, a5, a6, a7);
+
+      // loop over 16-byte chunks in t0 and expand into 32 e2 coefficients
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 4; i++) {
+        // sample coefficients
+        SAMPLE_32_CBD2_COEFS(t0, 24, 32 * i); // e2
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+
+    {
+      // a8-a15 transpose
+      TRANSPOSE_8_TO_1(a8, a9, a10, a11, a12, a13, a14, a15);
+
+      // loop over 16-byte chunks in t0 and expand into 32 e2 coefficients
+      __m512i cbd2_ids = CBD2_ID_VALS;
+      for (size_t i = 0; i < 4; i++) {
+        // sample coefficients
+        SAMPLE_32_CBD2_COEFS(t0, 24, 128 + 32 * i); // e2
+
+        // increment byte ids
+        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
+      }
+    }
+  }
+}
+#endif /* BACKEND == BACKEND_AVX512 */
+
+#if BACKEND == BACKEND_NEON
+/**
+ * Sample polynomials for pke1024_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[2,0], A[3,0], A[0,1],
+ * A[1,1], A[2,1], A[3,1], A[0,2], A[1,2], A[2,2], A[3,2], A[0,3],
+ * A[1,3], A[2,3], A[3,3], r[0], r[1], r[2], r[3], e1[0], e1[1], e1[2],
+ * e1[3], and e2.
+ *
+ * @note Neon implementation.
+ *
+ * @param[out] out 25 output polynomials.
+ * @param[in] a_seed A seed (32 bytes).
+ * @param[in] s_seed r, e1, and e2 seed (32 bytes).
+ */
+static inline void pke1024_encrypt_sample_neon(poly_t out[static 25], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
+  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
+  const uint64_t * const sp = (uint64_t*) s_seed; // s and e vector seed
+
+  neon_ahat_polys(out +  0, ap, 0x0000, 0x0100); // A[0,0], A[1,0]
+  neon_ahat_polys(out +  2, ap, 0x0200, 0x0300); // A[2,0], A[3,0]
+  neon_ahat_polys(out +  4, ap, 0x0001, 0x0101); // A[0,1], A[1,1]
+  neon_ahat_polys(out +  6, ap, 0x0201, 0x0301); // A[2,1], A[3,1]
+  neon_ahat_polys(out +  8, ap, 0x0002, 0x0102); // A[0,2], A[1,2]
+  neon_ahat_polys(out + 10, ap, 0x0202, 0x0302); // A[2,2], A[3,2]
+  neon_ahat_polys(out + 12, ap, 0x0003, 0x0103); // A[0,3], A[1,3]
+  neon_ahat_polys(out + 14, ap, 0x0203, 0x0303); // A[2,3], A[3,3]
+  neon_cbd2_polys(out + 16, sp, 0x00, 0x01); // r[0], r[1]
+  neon_cbd2_polys(out + 18, sp, 0x02, 0x03); // r[2], r[3]
+  neon_cbd2_polys(out + 20, sp, 0x04, 0x05); // e1[0], e1[1]
+  neon_cbd2_polys(out + 22, sp, 0x06, 0x07); // e1[2], e1[3]
+  neon_cbd2_poly(out + 24, sp, 0x08); // e2
+}
+#endif /* BACKEND == BACKEND_NEON */
+
+#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
+/**
+ * Sample polynomials for pke1024_encrypt().
+ *
+ * The output polynomials are: A[0,0], A[1,0], A[2,0], A[3,0], A[0,1],
+ * A[1,1], A[2,1], A[3,1], A[0,2], A[1,2], A[2,2], A[3,2], A[0,3],
+ * A[1,3], A[2,3], A[3,3], r[0], r[1], r[2], r[3], e1[0], e1[1], e1[2],
+ * e1[3], and e2.
+ *
+ * @note Scalar implementation.
+ *
+ * @param[out] out 25 output polynomials.
+ * @param[in] a_seed A seed (32 bytes).
+ * @param[in] s_seed r, e1, and e2 seed (32 bytes).
+ */
+static inline void pke1024_encrypt_sample_scalar(poly_t out[static 25], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
+  // sample A hat transposed matrix polynomial coefficients from T_q (NTT)
+  // (note: i and j are positions are swapped vs `pke1024_keygen()`)
+  for (size_t i = 0; i < PKE1024_K; i++) {
+    for (size_t j = 0; j < PKE1024_K; j++) {
+      poly_sample_ntt(out + (PKE1024_K * i + j), a_seed, i, j);
+    }
+  }
+
+  // sample r vector from CBD(2) (PKE1024_ETA1)
+  for (size_t i = 0; i < PKE1024_K; i++) {
+    poly_sample_cbd2(out + 16 + i, s_seed, i);
+  }
+
+  // sample e1 vector from CBD(2) (PKE1024_ETA2)
+  for (size_t i = 0; i < PKE1024_K; i++) {
+    poly_sample_cbd2(out + 20 + i, s_seed, PKE1024_K + i);
+  }
+
+  // sample e2 polynomial from CBD(2) (PKE1024_ETA2)
+  poly_sample_cbd2(out + 24, s_seed, 2 * PKE1024_K);
+}
+#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
+
+#if BACKEND == BACKEND_AVX512
+#define pke1024_keygen_sample pke1024_keygen_sample_avx512
+#define pke1024_encrypt_sample pke1024_encrypt_sample_avx512
+#elif BACKEND == BACKEND_NEON
+#define pke1024_keygen_sample pke1024_keygen_sample_neon
+#define pke1024_encrypt_sample pke1024_encrypt_sample_neon
+#elif BACKEND == BACKEND_SCALAR
+#define pke1024_keygen_sample pke1024_keygen_sample_scalar
+#define pke1024_encrypt_sample pke1024_encrypt_sample_scalar
+#else
+#error "unknown backend"
+#endif /* BACKEND */
+
+/**
+ * Generate PKE1024 encryption and decryption key from given 32-byte
+ * seed.
+ *
+ * @param[out] ek PKE1024 encryption key (1184 bytes).
+ * @param[out] dk PKE1024 decryption key (1152 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ */
+static inline void pke1024_keygen(uint8_t ek[static PKE1024_EK_SIZE], uint8_t dk[static PKE1024_DK_SIZE], const uint8_t seed[static 32]) {
+  // get sha3-512 hash of seed, get rho and sigma (each 32 bytes)
+  uint8_t rs[64] = { 0 }; // rho = rs[0,31], sigma = rs[32,63]
+  sha3_512(seed, 32, rs); // rho, sigma = sha3-512(seed)
+
+  // sample A, s, and e polynomial coefficients
+  poly_t ps[24] = { 0 };
+  pke1024_keygen_sample(ps, rs);
+  poly_t *a = ps, *s = ps + 16, *e = ps + 20;
+
+  // apply NTT to polynomial coefficients (R_q -> T_q)
+  vec4_ntt(s);
+  vec4_ntt(e);
+
+  // t = As + e (NTT)
+  poly_t t[PKE1024_K] = { 0 };
+  mat4_mul(t, a, s); // t = As
+  vec4_add(t, e); // t += e
+
+  // ek <- t
+  vec4_encode(ek, t);
+
+  // ek <- t || rho
+  memcpy(ek + (PKE1024_K * 384), rs, 32);
+
+  // dk <- s (NTT)
+  vec4_encode(dk, s);
+}
+
+/**
+ * Encrypt 32-byte message `m` using PKE1024 encryption key `ek` and
+ * randomness `enc_rand` and store the PKE1024 ciphertext in output
+ * buffer `ct`.
+ *
+ * @param[out] ct Output PKE1024 ciphertext buffer (1568 bytes).
+ * @param[in] ek PKE1024 encryption key (1568 bytes).
+ * @param[in] m Plaintext message (32 bytes).
+ * @param[in] enc_rand Randomness seed (32 bytes).
+ */
+static inline void pke1024_encrypt(uint8_t ct[static PKE1024_CT_SIZE], const uint8_t ek[static PKE1024_EK_SIZE], const uint8_t m[static 32], const uint8_t enc_rand[static 32]) {
+  // decode t from first 1536 bytes of ek
+  poly_t t[PKE1024_K] = { 0 };
+  vec4_decode(t, ek);
+
+  // read rho from ek (32 bytes)
+  const uint8_t * const rho = ek + 384 * PKE1024_K;
+
+  // sample A, r, e1, and e2 polynomial coefficients
+  poly_t ps[25] = { 0 };
+  pke1024_encrypt_sample(ps, rho, enc_rand);
+  poly_t *a = ps, *r = ps + 16, *e1 = ps + 20, *e2 = ps + 24;
+
+  vec4_ntt(r); // r = NTT(r)
+
+  // u = Ar + e1
+  poly_t u[PKE1024_K] = { 0 };
+  mat4_mul(u, a, r);  // u = (A*r)
+  vec4_inv_ntt(u);    // u = InvNTT(u)
+  vec4_add(u, e1);    // u += e1
+
+  // encode u, append to ct
+  vec4_encode_11bit(ct, u);
+
+  // decode message `m` into polynomial `mu`
+  //
+  // each bit of message `m` set to 1 is decoded as a coefficient of
+  // value 1665 in polynomial `mu`, and each bit set to 0 is decoded as
+  // a coefficient of value 0 in polynomial `mu`.
+  poly_t mu = { 0 };
+  poly_decode_1bit(&mu, m);
+
+  // v = tr + e2 + mu
+  poly_t v = { 0 };
+  vec4_dot(&v, t, r);     // v = t * r
+  poly_inv_ntt(&v);       // v = InvNTT(v)
+  poly_add2(&v, e2, &mu); // v += e2 + mu
+
+  // encode v, append to ct
+  poly_encode_5bit(ct + 32 * PKE1024_DU * PKE1024_K, &v);
+}
+
+/**
+ * Decrypt 32-byte plaintext message from PKE1024 ciphertext `ct` using
+ * PKE1024 decryption key `dk` and store the result in output buffer `m`.
+ *
+ * @param[out] m Output plaintext message (32 bytes).
+ * @param[in] dk PKE1024 decryption key (1536 bytes).
+ * @param[in] ct Input ciphertext buffer (1568 bytes).
+ */
+static inline void pke1024_decrypt(uint8_t m[static 32], const uint8_t dk[static PKE1024_DK_SIZE], const uint8_t ct[PKE1024_CT_SIZE]) {
+  // decode u
+  poly_t u[PKE1024_K] = { 0 };
+  vec4_decode_11bit(u, ct);
+
+  // decode v
+  poly_t v = { 0 };
+  poly_decode_5bit(&v, ct + 32 * PKE1024_DU * PKE1024_K);
+
+  // decode ŝ
+  poly_t s[PKE1024_K] = { 0 };
+  vec4_decode(s, dk);
+
+  poly_t su = { 0 }; // su = s * u
+  vec4_ntt(u); // u = NTT(u)
+  vec4_dot(&su, s, u); // su = s * u
+  poly_inv_ntt(&su); // su = InvNTT(su)
+
+  poly_t w = v;
+  poly_sub(&w, &su); // w -= su
+
+  // encode w coefficients as 1-bit, write to output
+  poly_encode_1bit(m, &w);
+}
+
+/**
+ * @brief Generate KEM1024 encapsulation key `ek` and decapsulation key
+ * `dk` from 64 byte random seed `seed`.
+ * @ingroup kem1024
+ *
+ * @warning `seed` **must** be 64 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 256 bits of strength.
+ *
+ * @param[out] ek KEM1024 encapsulation key (1568 bytes).
+ * @param[out] dk KEM1024 decapsulation key (3168 bytes).
+ * @param[in] seed Random seed (64 bytes).
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem1024_keygen(uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]) {
+  const uint8_t * const z = seed; // random implicit rejection seed (32 bytes)
+  const uint8_t * const d = seed + 32; // pke1024_keygen() random seed (32 bytes)
+
+  // generate ek and dk
+  pke1024_keygen(ek, dk, d);
+
+  // KEM: append ek, sha3-256(ek), and z to dk
+  memcpy(dk + PKE1024_DK_SIZE, ek, PKE1024_EK_SIZE);
+  sha3_256(ek, PKE1024_EK_SIZE, dk + PKE1024_DK_SIZE + PKE1024_EK_SIZE);
+  memcpy(dk + PKE1024_DK_SIZE + PKE1024_EK_SIZE + 32, z, 32);
+}
+
+/**
+ * @brief Generate KEM1024 shared key `key` and ciphertext `ct` from given
+ * encapsulation key `ek` and randomness `seed`.
+ * @ingroup kem1024
+ *
+ * @warning `seed` **must** be 32 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 256 bits of strength.
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1568 bytes).
+ * @param[in] ek KEM1024 encapsulation key (1568 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem1024_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]) {
+  uint8_t data[64] = { 0 };
+  memcpy(data, seed, 32); // append seed
+  sha3_256(ek, PKE1024_EK_SIZE, data + 32); // append sha3-256(ek)
+
+  uint8_t kr[64] = { 0 };
+  sha3_512(data, 64, kr); // (K, r) <- sha3-512(data)
+  const uint8_t * const r = kr + 32; // get r
+
+  memcpy(key, kr, 32); // copy shared key to output
+  pke1024_encrypt(ct, ek, seed, r); // ct <- pke.encrypt(ek, seed, r)
+}
+
+/**
+ * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM1024
+ * decapsulation key `dk` with implicit rejection.
+ * @ingroup kem1024
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1568 bytes).
+ * @param[in] dk KEM1024 decapsulation key (3168 bytes).
+ */
+void fips203ipd_kem1024_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE]) {
+  const uint8_t * const dk_pke = dk;
+  const uint8_t * const ek_pke = dk + 384 * PKE1024_K;
+  const uint8_t * const h = dk + (2 * 384 * PKE1024_K + 32);
+  const uint8_t * const z = dk + (2 * 384 * PKE1024_K + 64);
+
+  uint8_t mh[64] = { 0 };
+  pke1024_decrypt(mh, dk_pke, ct); // decrypt ct into mh
+  memcpy(mh + 32, h, 32); // copy hash
+
+  uint8_t kr[64] = { 0 };
+  sha3_512(mh, 64, kr); // (K', r') <- sha3-512(m || r)
+
+  // zc = z || ct
+  uint8_t zc[32 + PKE1024_CT_SIZE] = { 0 };
+  memcpy(zc, z, 32);
+  memcpy(zc + 32, ct, PKE1024_CT_SIZE);
+
+  // rk: generate implicit rejection key from z and ciphertext
+  uint8_t k_rej[32] = { 0 };
+  shake256(zc, sizeof(zc), k_rej, sizeof(k_rej)); // K_rej = J(z||c)
+
+  // re-encrypt `k` with PKE768 key `ek_pke`
+  // (ct2 is used for implicit rejection check below)
+  uint8_t ct2[PKE1024_CT_SIZE] = { 0 };
+  pke1024_encrypt(ct2, ek_pke, mh, kr + 32); // ct2 <- pke.encrypt(ek, m', r')
+
+  // compare ct and ct2 using constant-time comparison.  if they match,
+  // then copy decapsulated key to output buffer `key`.  if `ct` and `ct2`
+  // don't match, then copy the implicit rejection key `k_rej` to the
+  // output buffer `key`.
+  ct_copy(key, ct_diff(ct, ct2, PKE1024_CT_SIZE), kr, k_rej);
+}
+
+/**
+ * @brief Get name of backend.
+ * @ingroup misc
+ *
+ * @note Returns a read-only string which must not be freed by the
+ * caller.
+ */
+const char *fips203ipd_backend(void) {
+#if BACKEND == BACKEND_AVX512
+  return "avx512";
+#elif BACKEND == BACKEND_NEON
+  return "neon";
+#elif BACKEND == BACKEND_SCALAR
+  return "scalar";
+#else
+#error "unknown backend"
+#endif /* BACKEND */
+}
+
+#ifdef TEST_FIPS203IPD
+#include <stdlib.h> // exit()
+#include <stdio.h> // fprintf()
+#include <stddef.h> // size_t
+#include "rand-bytes.h" // rand_bytes()
+#include "hex.h" // hex_write()
+
+// number of iterations in `test_fips203ipd_*_roundtrip()` tests
+// (keep this relatively low so test suite doesn't take forever)
+#define NUM_ROUNDTRIP_TIMES 10
+
+// Print test function name, test name, and hex-encoded got and expected
+// buffers to standard error.
+static void fail_test(const char * const func, const char * const name, const uint8_t * const got, const size_t got_len, const uint8_t * const exp, const size_t exp_len) {
+  fprintf(stderr, "%s(\"%s\") failed, got:\n", func, name);
+  hex_write(stderr, got, got_len);
+  fputs("\nexp:\n", stderr);
+  hex_write(stderr, exp, exp_len);
+  fputs("\n", stderr);
+}
+
+// Verify that shared keys `k0` and `k1` are equal.
+//
+// Prints an error message and exits with an error code if the keys are
+// not equal.
+//
+// Used by `test_fips203ipd_kem{512,768,1024}_roundtrip()` functions.
+static void compare_keys(const char *func, const uint8_t k0[static 32], const uint8_t k1[static 32], const uint8_t keygen_seed[static 64], const uint8_t encaps_seed[static 32]) {
+  // compare keys
+  if (memcmp(k0, k1, 32)) {
+    fprintf(stderr, "%s: k0 != k1:\nk0 = ", func);
+    hex_write(stderr, k0, 32);
+    fputs("\nk1 = ", stderr);
+    hex_write(stderr, k1, 32);
+    fputs("\nkeygen_seed = ", stderr);
+    hex_write(stderr, keygen_seed, 64);
+    fputs("\nencaps_seed = ", stderr);
+    hex_write(stderr, encaps_seed, 32);
+    fputs("\n", stderr);
+    exit(-1);
+  }
+}
+
+// Write polynomial coefficients to given file handle
+static void poly_write(FILE *fh, const poly_t * const p) {
+  // find index of maximum non-zero coefficient
+  size_t max = 0;
+  for (size_t i = 255; i > max; i--) {
+    if (p->cs[i]) {
+      max = i;
+    }
+  }
+
+  // only truncate output if threshold is met
+  max = (max && max < 250) ? max : 256;
+
+  for (size_t i = 0; i < max; i++) {
+    fprintf(fh, "%s%d", (i ? ", " : ""), p->cs[i]);
+  }
+
+  if (max && max < 250) {
+    fputs(", ...", fh);
+  }
+}
+
+// Print test function name, test name, and got polynomial and expected
+// polynomial to standard error.
+static void fail_poly_test(const char * const func, const char * const name, const poly_t * const got, const poly_t * const exp) {
+  fprintf(stderr, "%s(\"%s\") failed, got:\n", func, name);
+  poly_write(stderr, got);
+  fputs("\nexp:\n", stderr);
+  poly_write(stderr, exp);
+  fputs("\n", stderr);
+
+  // print differences
+  size_t num = 0;
+  for (size_t i = 0; i < 256; i++) {
+    if (got->cs[i] != exp->cs[i]) {
+      const char *p = (num == 0) ? "diffs:" : ",";
+      fprintf(stderr, "%s %zu (got %d exp %d)", p, i, got->cs[i], exp->cs[i]);
+      num++;
+    }
+  }
+  fputs("\n", stderr);
+}
+
+// define fail_vecN_test() and test_vecN_{encode,decode}()
+// TODO: macro should be handle all vector test fns, so each
+// vector is just a series of constant arrays followed by
+// DEF_TEST_VEC_FNS(N)
+#define DEF_TEST_VEC_FNS(N) \
+  static void fail_vec ## N ## _test(const char * const func, const char * const name, const poly_t got[static N], const poly_t exp[static N]) { \
+    fprintf(stderr, "%s(\"%s\") failed:\n", func, name); \
+  \
+    for (size_t i = 0; i < 2; i++) { \
+      fprintf(stderr, "got[%zu] = ", i); \
+      poly_write(stderr, got); \
+      fprintf(stderr, "\nexp[%zu] = ", i); \
+      poly_write(stderr, exp); \
+      fputs("\n", stderr); \
+  \
+      size_t num = 0; \
+      for (size_t j = 0; j < 256; j++) { \
+        if (got[i].cs[j] != exp[i].cs[j]) { \
+          const char *p = (num == 0) ? "diffs:" : ","; \
+          fprintf(stderr, "%s %zu (got %d exp %d)", p, j, got[i].cs[j], exp[i].cs[j]); \
+          num++; \
+        } \
+      } \
+      fputs("\n", stderr); \
+    } \
+  } \
+  \
+  static void test_vec ## N ## _encode(void) { \
+    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
+      /* encode vector */ \
+      uint8_t buf[N*384]; \
+      vec ## N ## _encode(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
+   \
+      /* decode buffer */ \
+      poly_t got[N]; \
+      vec ## N ## _decode_scalar(got, buf); \
+       \
+      /* check for expected value */ \
+      if (memcmp(&got, &(VEC ## N ## _ENCODE_TESTS[i].val), sizeof(got))) { \
+        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, VEC ## N ## _ENCODE_TESTS[i].val); \
+      } \
+    } \
+  } \
+   \
+  static void test_vec ## N ## _decode(void) { \
+    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
+      /* encode vector */ \
+      uint8_t buf[N*384]; \
+      vec ## N ## _encode_scalar(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
+   \
+      /* decode buffer */ \
+      poly_t got[N]; \
+      vec ## N ## _decode(got, buf); \
+       \
+      /* check for expected value */ \
+      if (memcmp(&got, &(VEC ## N ## _ENCODE_TESTS[i].val), sizeof(got))) { \
+        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, VEC ## N ## _ENCODE_TESTS[i].val); \
+      } \
+    } \
+  }
+
+// define test functions for encoding/decoding N-element vectors with
+// B-bit coefficients
+#define DEF_TEST_VEC_BIT_FNS(N, B) \
+  static void test_vec ## N ## _encode_ ## B ## bit(void) { \
+    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
+      /* get expected result */ \
+      poly_t exp[N]; \
+      { \
+        uint8_t exp_buf[N*32*B]; \
+        vec ## N ## _encode_ ## B ## bit_scalar(exp_buf, VEC ## N ## _ENCODE_TESTS[i].val); \
+        vec ## N ## _decode_ ## B ## bit_scalar(exp, exp_buf); \
+      } \
+      \
+      /* encode vector */ \
+      uint8_t buf[N*32*B]; \
+      vec ## N ## _encode_ ## B ## bit(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
+      \
+      /* decode buffer */ \
+      poly_t got[N]; \
+      vec ## N ## _decode_ ## B ## bit_scalar(got, buf); \
+       \
+      /* check for expected value */ \
+      if (memcmp(got, exp, sizeof(got))) { \
+        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, exp); \
+      } \
+    } \
+  } \
+   \
+  static void test_vec ## N ## _decode_ ## B ## bit(void) { \
+    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
+      /* encode vector */ \
+      uint8_t buf[N*32*B]; \
+      vec ## N ## _encode_ ## B ## bit_scalar(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
+   \
+      /* get expected result */ \
+      poly_t exp[N]; \
+      vec ## N ## _decode_ ## B ## bit_scalar(exp, buf); \
+   \
+      /* decode buffer */ \
+      poly_t got[N]; \
+      vec ## N ## _decode_ ## B ## bit(got, buf); \
+       \
+      /* check for expected value */ \
+      if (memcmp(got, exp, sizeof(got))) { \
+        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, exp); \
+      } \
+    } \
+  }
+
+static void test_sha3_256(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t msg[256]; // test message
+    const size_t len; // test message length
+    const uint8_t exp[32]; // expected hash
+  } tests[] = {{
+    .name = "empty",
+    .msg = "",
+    .len = 0,
+    .exp = {
+      0xa7, 0xff, 0xc6, 0xf8, 0xbf, 0x1e, 0xd7, 0x66,
+      0x51, 0xc1, 0x47, 0x56, 0xa0, 0x61, 0xd6, 0x62,
+      0xf5, 0x80, 0xff, 0x4d, 0xe4, 0x3b, 0x49, 0xfa,
+      0x82, 0xd8, 0x0a, 0x4b, 0x80, 0xf8, 0x43, 0x4a,
+    },
+  }, {
+    .name = "asdf",
+    .msg = "asdf",
+    .len = 4,
+    .exp = {
+      0xdd, 0x27, 0x81, 0xf4, 0xc5, 0x1b, 0xcc, 0xdb,
+      0xe2, 0x3e, 0x4d, 0x39, 0x8b, 0x8a, 0x82, 0x26,
+      0x1f, 0x58, 0x5c, 0x27, 0x8d, 0xbb, 0x4b, 0x84,
+      0x98, 0x9f, 0xea, 0x70, 0xe7, 0x67, 0x23, 0xa9,
+    },
+  }, {
+    .name = "a-134",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 134,
+    .exp = {
+      0x58, 0xb9, 0x70, 0xc3, 0x7a, 0xc2, 0xd6, 0x5b,
+      0x59, 0x9b, 0x69, 0x18, 0x68, 0xa6, 0x14, 0x01,
+      0xa5, 0x01, 0xc4, 0x0f, 0x23, 0x5d, 0x55, 0xf0,
+      0x59, 0xd3, 0x9a, 0x94, 0x2f, 0x41, 0xdc, 0xee,
+    },
+  }, {
+    .name = "a-135",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 135,
+    .exp = {
+      0x80, 0x94, 0xbb, 0x53, 0xc4, 0x4c, 0xfb, 0x1e,
+      0x67, 0xb7, 0xc3, 0x04, 0x47, 0xf9, 0xa1, 0xc3,
+      0x36, 0x96, 0xd2, 0x46, 0x3e, 0xcc, 0x1d, 0x9c,
+      0x92, 0x53, 0x89, 0x13, 0x39, 0x28, 0x43, 0xc9,
+    },
+  }, {
+    .name = "a-136",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 136,
+    .exp = {
+      0x3f, 0xc5, 0x55, 0x9f, 0x14, 0xdb, 0x8e, 0x45,
+      0x3a, 0x0a, 0x30, 0x91, 0xed, 0xbd, 0x2b, 0xc2,
+      0x5e, 0x11, 0x52, 0x8d, 0x81, 0xc6, 0x6f, 0xa5,
+      0x70, 0xa4, 0xef, 0xdc, 0xc2, 0x69, 0x5e, 0xe1,
+    },
+  }, {
+    .name = "ff-256",
+    .msg = {
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    },
+    .len = 256,
+    .exp = {
+      0xea, 0xa5, 0x7c, 0x69, 0x9a, 0x7a, 0x61, 0x4f,
+      0x9d, 0x96, 0x1e, 0x42, 0xd8, 0xb1, 0x2a, 0x93,
+      0x54, 0x6e, 0x8e, 0x80, 0xd3, 0x1f, 0x5c, 0xfc,
+      0xc4, 0x3f, 0x95, 0x39, 0xed, 0x06, 0x30, 0x7a,
+    },
+  }, {
+    .name = "a-210",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 210,
+    .exp = {
+      0xb4, 0x12, 0xbd, 0x70, 0xce, 0x67, 0xeb, 0x59,
+      0x0b, 0xb2, 0x25, 0x09, 0xef, 0x4e, 0x68, 0x7e,
+      0x02, 0xb4, 0x8e, 0x07, 0xd2, 0xbb, 0xd7, 0xbb,
+      0x9a, 0xfb, 0x58, 0x70, 0xfd, 0x14, 0xc1, 0x13,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
+    uint8_t got[32] = { 0 };
+    sha3_256(tests[i].msg, tests[i].len, got);
+    if (memcmp(got, tests[i].exp, sizeof(got))) {
+      fail_test(__func__, tests[i].name, got, 32, tests[i].exp, 32);
+    }
+  }
+}
+
+static void test_sha3_512(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t msg[256]; // test message
+    const size_t len; // test message length
+    const uint8_t exp[64]; // expected hash
+  } tests[] = {{
+    .name = "empty",
+    .msg = "",
+    .len = 0,
+    .exp = {
+      0xa6, 0x9f, 0x73, 0xcc, 0xa2, 0x3a, 0x9a, 0xc5,
+      0xc8, 0xb5, 0x67, 0xdc, 0x18, 0x5a, 0x75, 0x6e,
+      0x97, 0xc9, 0x82, 0x16, 0x4f, 0xe2, 0x58, 0x59,
+      0xe0, 0xd1, 0xdc, 0xc1, 0x47, 0x5c, 0x80, 0xa6,
+      0x15, 0xb2, 0x12, 0x3a, 0xf1, 0xf5, 0xf9, 0x4c,
+      0x11, 0xe3, 0xe9, 0x40, 0x2c, 0x3a, 0xc5, 0x58,
+      0xf5, 0x00, 0x19, 0x9d, 0x95, 0xb6, 0xd3, 0xe3,
+      0x01, 0x75, 0x85, 0x86, 0x28, 0x1d, 0xcd, 0x26,
+    },
+  }, {
+    .name = "asdf",
+    .msg = "asdf",
+    .len = 4,
+    .exp = {
+      0x8d, 0x88, 0xcf, 0x5b, 0x20, 0xf5, 0x3a, 0xcd,
+      0x7a, 0xe1, 0x47, 0x9b, 0x5b, 0x36, 0xdc, 0x20,
+      0x21, 0x75, 0x3b, 0x04, 0x99, 0x02, 0xc7, 0x72,
+      0x47, 0xbb, 0x27, 0xb1, 0x31, 0xb3, 0x00, 0xbd,
+      0x3c, 0xa8, 0xbe, 0xef, 0x28, 0x75, 0x6d, 0xce,
+      0x27, 0xb8, 0x99, 0x08, 0x67, 0xc4, 0x57, 0x7a,
+      0x25, 0x35, 0xe7, 0xe3, 0xb7, 0x51, 0x41, 0x39,
+      0x9c, 0xa1, 0xa9, 0x4c, 0xc8, 0x4b, 0x0e, 0xb9,
+    },
+  }, {
+    .name = "a-134",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 134,
+    .exp = {
+      0x4e, 0x72, 0xa4, 0xf6, 0x55, 0x99, 0xa2, 0x47,
+      0x2a, 0x66, 0xf8, 0xa8, 0xd6, 0xcf, 0xb3, 0x84,
+      0xb7, 0xd3, 0x4f, 0x52, 0xec, 0xaa, 0x00, 0xe9,
+      0xf0, 0x66, 0x82, 0x0b, 0x0e, 0xdc, 0x1f, 0xcc,
+      0x9c, 0xf3, 0x12, 0x0b, 0x81, 0x46, 0x89, 0xbc,
+      0x62, 0xb7, 0x72, 0x0f, 0x4e, 0x4c, 0x99, 0x3d,
+      0xa0, 0x84, 0x08, 0x27, 0xf6, 0x95, 0x03, 0x8a,
+      0x82, 0x18, 0x69, 0xe8, 0xa6, 0x27, 0x60, 0xe8,
+    },
+  }, {
+    .name = "a-135",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 135,
+    .exp = {
+      0x4b, 0xe1, 0xe7, 0x02, 0x76, 0xf9, 0x12, 0x2f,
+      0x47, 0x0a, 0x54, 0xc2, 0x72, 0x40, 0xc7, 0xd0,
+      0x70, 0x9d, 0xab, 0x74, 0x69, 0x95, 0x8b, 0x48,
+      0xa9, 0x50, 0xd6, 0x9d, 0xa6, 0xdd, 0x07, 0xca,
+      0x13, 0x58, 0x26, 0xd9, 0xd2, 0x3e, 0x97, 0x5c,
+      0xb9, 0x28, 0x3e, 0x7d, 0x23, 0x6e, 0xf9, 0x8a,
+      0x80, 0x45, 0x1d, 0xca, 0x8e, 0x31, 0x1f, 0x52,
+      0x09, 0x63, 0x08, 0xb2, 0xc8, 0xd7, 0x0c, 0xc7,
+    },
+  }, {
+    .name = "a-136",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 136,
+    .exp = {
+      0xe5, 0x03, 0x92, 0xc9, 0x1e, 0xd9, 0x57, 0x68,
+      0xc8, 0xdc, 0xf5, 0x2a, 0x12, 0xe5, 0xdb, 0x1e,
+      0xcd, 0x03, 0x47, 0xfb, 0x99, 0x5f, 0x7f, 0xf4,
+      0xea, 0x06, 0x99, 0x46, 0x49, 0xbb, 0xd1, 0xa0,
+      0xde, 0x7a, 0xe3, 0x6a, 0x62, 0xaa, 0xdc, 0x00,
+      0xa7, 0x04, 0xd7, 0x30, 0xb5, 0x2b, 0xda, 0x19,
+      0x1b, 0x72, 0x95, 0x1e, 0x2a, 0xfc, 0x9b, 0x6f,
+      0xb6, 0x82, 0x47, 0x87, 0xb2, 0x08, 0x62, 0x57,
+    },
+  }, {
+    .name = "ff-256",
+    .msg = {
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    },
+    .len = 256,
+    .exp = {
+      0x02, 0x3a, 0x91, 0x27, 0xcf, 0x29, 0x6d, 0x01,
+      0x12, 0x0e, 0x3d, 0xaa, 0x92, 0x76, 0x15, 0x23,
+      0x8e, 0x97, 0xdd, 0xb6, 0x33, 0x26, 0xe2, 0x89,
+      0xb3, 0x31, 0xe2, 0x25, 0xbe, 0x41, 0xea, 0xd5,
+      0x90, 0xf1, 0xdd, 0x5c, 0x80, 0x1d, 0x91, 0x03,
+      0xfe, 0x65, 0x7d, 0x23, 0x63, 0xbd, 0xb2, 0x66,
+      0xe7, 0x90, 0xb1, 0x89, 0x0b, 0x3d, 0xd5, 0x79,
+      0xdc, 0xa7, 0xf9, 0x1f, 0x5f, 0x4d, 0x98, 0x49,
+    },
+  }, {
+    .name = "a-210",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 210,
+    .exp = {
+      0x47, 0xfa, 0xd7, 0x8d, 0x72, 0x35, 0xe5, 0xcd,
+      0xb9, 0xd7, 0x23, 0x6c, 0xfc, 0xf2, 0x79, 0xdb,
+      0x0f, 0x8a, 0xcd, 0x5b, 0xf1, 0x7b, 0xdc, 0x74,
+      0x18, 0xe4, 0x29, 0xb7, 0x1a, 0x0a, 0x21, 0xb7,
+      0xed, 0xe8, 0x54, 0x64, 0xcf, 0x69, 0x44, 0x63,
+      0xff, 0x0e, 0x56, 0xf2, 0x8f, 0x04, 0xbf, 0x85,
+      0xc0, 0x85, 0xe1, 0x17, 0x6a, 0x47, 0xd7, 0x3b,
+      0xf2, 0x8b, 0xdb, 0xa0, 0x4f, 0x4a, 0xe7, 0x61,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
+    uint8_t got[64] = { 0 };
+    sha3_512(tests[i].msg, tests[i].len, got);
+    if (memcmp(got, tests[i].exp, sizeof(got))) {
+      fail_test(__func__, tests[i].name, got, 64, tests[i].exp, 64);
+    }
+  }
+}
+
+static void test_shake128_ctx(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t msg[256]; // test message
+    const size_t len; // test message length
+    const uint8_t exp[16]; // expected hash
+  } tests[] = {{
+    .name = "empty",
+    .msg = "",
+    .len = 0,
+    .exp = {
+      0x7f, 0x9c, 0x2b, 0xa4, 0xe8, 0x8f, 0x82, 0x7d,
+      0x61, 0x60, 0x45, 0x50, 0x76, 0x05, 0x85, 0x3e,
+    },
+  }, {
+    .name = "asdf",
+    .msg = "asdf",
+    .len = 4,
+    .exp = {
+      0xef, 0x02, 0x2c, 0xc5, 0x3c, 0x74, 0xb3, 0x28,
+      0x43, 0xf9, 0xc1, 0xf1, 0x14, 0x13, 0xd5, 0x9c,
+    },
+  }, {
+    .name = "a-134",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 134,
+    .exp = {
+      0xc8, 0x73, 0x5e, 0x5f, 0x6f, 0x15, 0xaf, 0xe5,
+      0x1a, 0x8c, 0x3b, 0x07, 0xc4, 0xc6, 0x8d, 0x86,
+    },
+  }, {
+    .name = "a-135",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 135,
+    .exp = {
+      0xa5, 0xe2, 0xb2, 0x27, 0x8d, 0x1b, 0x75, 0x86,
+      0x6c, 0x78, 0x77, 0xa0, 0xff, 0xa2, 0x47, 0x37,
+    },
+  }, {
+    .name = "a-136",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 136,
+    .exp = {
+      0x0d, 0x01, 0x58, 0xd4, 0x46, 0x78, 0x3a, 0x9b,
+      0x18, 0xa6, 0x90, 0x8c, 0x08, 0xbb, 0x5d, 0xe6,
+    },
+  }, {
+    .name = "ff-256",
+    .msg = {
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    },
+    .len = 256,
+    .exp = {
+      0xf3, 0x06, 0x93, 0x04, 0x16, 0x5c, 0x0e, 0xad,
+      0x13, 0x25, 0xb5, 0x26, 0x76, 0x05, 0x95, 0xed,
+    },
+  }, {
+    .name = "a-210",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 210,
+    .exp = {
+      0xb1, 0xb4, 0xf3, 0xad, 0x3a, 0x1f, 0x67, 0x60,
+      0xe3, 0x08, 0x67, 0xdd, 0x71, 0xb3, 0x49, 0xfa,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
+    for (size_t len = 1; len < tests[i].len; len++) {
+      // init xof
+      sha3_xof_t xof;
+      shake128_init(&xof);
+
+      // absorb
+      for (size_t ofs = 0; ofs < tests[i].len; ofs += len) {
+        const size_t absorb_len = MIN(tests[i].len - ofs, len);
+        if (!shake128_absorb(&xof, tests[i].msg + ofs, absorb_len)) {
+          fprintf(stderr, "%s(\"%s\", %zu) failed: shake128_absorb()\n", __func__, tests[i].name, len);
+          return;
+        }
+      }
+
+      // squeeze
+      uint8_t got[16] = { 0 };
+      shake128_squeeze(&xof, got, sizeof(got));
+
+      // check
+      if (memcmp(got, tests[i].exp, sizeof(got))) {
+        // build test name
+        char name[64];
+        snprintf(name, sizeof(name), "%s (%zu)", tests[i].name, len);
+
+        // fail test
+        fail_test(__func__, name, got, 16, tests[i].exp, 16);
+      }
+    }
+  }
+}
+
+static void test_shake256(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t msg[256]; // test message
+    const size_t len; // test message length
+    const uint8_t exp[32]; // expected hash
+  } tests[] = {{
+    .name = "empty",
+    .msg = "",
+    .len = 0,
+    .exp = {
+      0x46, 0xb9, 0xdd, 0x2b, 0x0b, 0xa8, 0x8d, 0x13,
+      0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb, 0x24,
+      0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82,
+      0xb5, 0x0c, 0x27, 0x64, 0x6e, 0xd5, 0x76, 0x2f,
+    },
+  }, {
+    .name = "asdf",
+    .msg = "asdf",
+    .len = 4,
+    .exp = {
+      0xf0, 0x0c, 0x15, 0x64, 0x33, 0x96, 0x61, 0x6a,
+      0x89, 0xa0, 0xcb, 0x79, 0x03, 0x9f, 0x74, 0x05,
+      0x75, 0xde, 0xfe, 0x9d, 0xbe, 0x30, 0x7c, 0xcc,
+      0xda, 0xf8, 0xae, 0x21, 0x0e, 0x1c, 0x9c, 0xc6,
+    },
+  }, {
+    .name = "a-134",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 134,
+    .exp = {
+      0xf1, 0xe0, 0x3f, 0x37, 0x8e, 0xb7, 0x79, 0x04,
+      0xba, 0x15, 0xbb, 0x64, 0x2a, 0x84, 0xb9, 0x0d,
+      0xe5, 0x2e, 0x29, 0x3e, 0xaf, 0xc2, 0x7c, 0xef,
+      0x05, 0x88, 0x3b, 0x16, 0x56, 0xae, 0xc3, 0x41,
+    },
+  }, {
+    .name = "a-135",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 135,
+    .exp = {
+      0x55, 0xb9, 0x91, 0xec, 0xe1, 0xe5, 0x67, 0xb6,
+      0xe7, 0xc2, 0xc7, 0x14, 0x44, 0x4d, 0xd2, 0x01,
+      0xcd, 0x51, 0xf4, 0xf3, 0x83, 0x2d, 0x08, 0xe1,
+      0xd2, 0x6b, 0xeb, 0xc6, 0x3e, 0x07, 0xa3, 0xd7,
+    },
+  }, {
+    .name = "a-136",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 136,
+    .exp = {
+      0x8f, 0xcc, 0x5a, 0x08, 0xf0, 0xa1, 0xf6, 0x82,
+      0x7c, 0x9c, 0xf6, 0x4e, 0xe8, 0xd1, 0x6e, 0x04,
+      0x43, 0x10, 0x63, 0x59, 0xca, 0x6c, 0x8e, 0xfd,
+      0x23, 0x07, 0x59, 0x25, 0x6f, 0x44, 0x99, 0x6a,
+    },
+  }, {
+    .name = "ff-256",
+    .msg = {
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    },
+    .len = 256,
+    .exp = {
+      0x3f, 0x25, 0xdf, 0x0e, 0x37, 0x17, 0x14, 0xdf,
+      0xb0, 0xcc, 0x3d, 0x96, 0x17, 0xe1, 0xa0, 0x71,
+      0x75, 0xa0, 0xf0, 0x84, 0xc7, 0x00, 0x29, 0x23,
+      0x5c, 0x72, 0x7c, 0x5a, 0x68, 0x5e, 0xf0, 0x14,
+    },
+  }, {
+    .name = "a-210",
+    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
+    .len = 210,
+    .exp = {
+      0xc9, 0xe2, 0xd9, 0x58, 0xf2, 0xdd, 0x3d, 0x97,
+      0x53, 0x8a, 0x1b, 0xac, 0x1b, 0x4e, 0xb3, 0x2e,
+      0x28, 0x23, 0x6b, 0x5d, 0xfc, 0xe0, 0x29, 0xfc,
+      0xc8, 0x73, 0xc0, 0xf2, 0x70, 0xe1, 0x3e, 0x9f,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
+    for (size_t len = 1; len < tests[i].len; len++) {
+      // run shake256
+      uint8_t got[32];
+      shake256(tests[i].msg, tests[i].len, got, sizeof(got));
+
+      // check
+      if (memcmp(got, tests[i].exp, sizeof(got))) {
+        // build test name
+        char name[64];
+        snprintf(name, sizeof(name), "%s (%zu)", tests[i].name, len);
+
+        // fail test
+        fail_test(__func__, name, got, 16, tests[i].exp, 16);
+      }
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t poly; // test polynomial
+} POLY_NTT_TESTS[] = {{
+  .name = "0-255",
+  .poly = {
+    .cs = {
+      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
+    },
+  },
+}, {
+  .name = "256-511",
+  .poly = {
+    .cs = {
+      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
+    },
+  },
+}, {
+  .name = "512-767",
+  .poly = {
+    .cs = {
+      512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
+    },
+  },
+}, {
+  .name = "3000-3255",
+  .poly = {
+    .cs = {
+      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,
+    },
+  },
+}, {
+  .name = "3073-3328",
+  .poly = {
+    .cs = {
+      3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328,
+    },
+  },
+}};
+
+static void test_poly_ntt_scalar_roundtrip(void) {
+  for (size_t i = 0; i < sizeof(POLY_NTT_TESTS)/sizeof(POLY_NTT_TESTS[0]); i++) {
+    // copy poly
+    poly_t got = POLY_NTT_TESTS[i].poly;
+
+    // calculate InvNTT(NTT(poly))
+    poly_ntt_scalar(&got);
+    poly_inv_ntt_scalar(&got);
+
+    // check for expected value
+    if (memcmp(&got, &POLY_NTT_TESTS[i].poly, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_NTT_TESTS[i].name, &got, &(POLY_NTT_TESTS[i].poly));
+    }
+  }
+}
+
+static void test_poly_ntt_avx512_roundtrip(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_NTT_TESTS)/sizeof(POLY_NTT_TESTS[0]); i++) {
+    // copy poly
+    poly_t got = POLY_NTT_TESTS[i].poly;
+
+    // calculate InvNTT(NTT(poly))
+    poly_ntt_avx512(&got);
+    poly_inv_ntt_avx512(&got);
+
+    // check for expected value
+    if (memcmp(&got, &POLY_NTT_TESTS[i].poly, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_NTT_TESTS[i].name, &got, &(POLY_NTT_TESTS[i].poly));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_ntt_neon_roundtrip(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_NTT_TESTS)/sizeof(POLY_NTT_TESTS[0]); i++) {
+    // copy poly
+    poly_t got = POLY_NTT_TESTS[i].poly;
+
+    // calculate InvNTT(NTT(poly))
+    poly_ntt_neon(&got);
+    poly_inv_ntt_neon(&got);
+
+    // check for expected value
+    if (memcmp(&got, &POLY_NTT_TESTS[i].poly, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_NTT_TESTS[i].name, &got, &(POLY_NTT_TESTS[i].poly));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static void test_poly_sample_ntt(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t x, y; // coordinates
+    const poly_t exp; // expected polynomial
+  } TESTS[] = {{
+    .name = "0, 0",
+    .x = 0,
+    .y = 0,
+    .exp = {
+      .cs = {
+        // expected coefficients, seed = { 0 }, x = 0, y = 0
+        0xb80, 0xbc9, 0x154, 0x4a0, 0xcab, 0x6ac, 0x99a, 0x8ed, 0xad4, 0x957, 0x19d, 0x102, 0x729, 0x601, 0x89b, 0xa78, 0xc62, 0x6d5, 0xaa9, 0x10a, 0x42e, 0x2e3, 0x4d5, 0x419, 0x556, 0x8b8, 0xb9c, 0x5bc, 0x5f7, 0x799, 0x59f, 0xa16, 0xa97, 0x8a1, 0x0bc, 0xc7c, 0xc9e, 0x529, 0x98b, 0x466, 0x056, 0x11e, 0x06b, 0x376, 0x075, 0xa95, 0xb2a, 0x541, 0x652, 0x182, 0xc5a, 0x6c6, 0x2c8, 0x9f4, 0x2c5, 0xb10, 0xc85, 0x825, 0xb55, 0x245, 0x9a4, 0x893, 0x95b, 0x82d, 0x747, 0xbd4, 0x617, 0xc6c, 0x7f3, 0x924, 0x90d, 0x4a5, 0x508, 0x505, 0x899, 0x17c, 0x9b5, 0x92c, 0xb7c, 0x916, 0x2d4, 0x4be, 0x1db, 0xc50, 0x48d, 0xc20, 0x015, 0x7e2, 0x643, 0x348, 0xa50, 0x1fb, 0x0a9, 0x4c1, 0x3ea, 0xb5d, 0x07f, 0x309, 0x73d, 0x138, 0x8ac, 0x51f, 0x643, 0x9ba, 0x574, 0xcdc, 0x2d5, 0x1a1, 0x84c, 0x363, 0x597, 0xc01, 0x29d, 0x536, 0x0c8, 0x52c, 0xa23, 0x72f, 0x6ae, 0x2ad, 0xc82, 0x105, 0x572, 0x1af, 0xb8f, 0x5a8, 0x112, 0x9b6, 0x176, 0x690, 0x42c, 0x007, 0x37a, 0xbb4, 0x7d9, 0x594, 0x0bc, 0x141, 0x25c, 0x7bf, 0x970, 0x168, 0x295, 0x4ce, 0xb07, 0x180, 0x13d, 0x94e, 0xbaa, 0xa54, 0x2fd, 0x7b1, 0xb07, 0x50a, 0x903, 0x244, 0x14b, 0xa15, 0xbb0, 0xb9f, 0x961, 0xc13, 0x885, 0xbdf, 0x71c, 0xcbb, 0x398, 0x666, 0x712, 0x21a, 0x6c9, 0xbc7, 0x834, 0x929, 0x6aa, 0xa2c, 0xac0, 0x480, 0x1f3, 0x3dd, 0x229, 0xc54, 0x13a, 0x979, 0x9d4, 0x7ef, 0x0c7, 0x7f5, 0xb6a, 0x233, 0xa8e, 0x09f, 0x973, 0xb0d, 0x91b, 0xc55, 0x3c7, 0x8a3, 0x958, 0x0fd, 0x786, 0x57e, 0x5e9, 0xac1, 0x5ec, 0x866, 0x0bc, 0xa64, 0x543, 0x808, 0x18f, 0xa6e, 0x755, 0x93a, 0x481, 0x4f2, 0x012, 0x53f, 0xb4a, 0xb03, 0x826, 0x54c, 0x101, 0x968, 0x3f2, 0xa87, 0x188, 0x8e2, 0x625, 0x8ce, 0x9de, 0xcda, 0x040, 0x60c, 0xb93, 0x078, 0xc7b, 0xb50, 0x53b, 0x9a1, 0x66d, 0xc5e, 0x996, 0x7c7, 0x7b3, 0x71d, 0x347, 0x6b9, 0x702, 0x3df, 0x7aa, 0x7bd, 0xc97, 0xac1, 0x163, 0x813
+      },
+    },
+  }, {
+    .name = "2, 3",
+    .x = 2,
+    .y = 3,
+    .exp = {
+      .cs = {
+        // expected coefficients, seed = { 0 }, x = 2, y = 3
+        0x2ef, 0x75d, 0xbf1, 0x4a4, 0x09b, 0x4bd, 0x58d, 0x1d8, 0x996, 0x82c, 0x0f3, 0x6b7, 0x32a, 0x9ad, 0x4f4, 0xb18, 0xab9, 0x4d3, 0xa96, 0x676, 0x742, 0x4cc, 0x3bb, 0x145, 0x5e3, 0x591, 0xb34, 0x82e, 0x670, 0x84a, 0x76b, 0x273, 0xb0b, 0x0f9, 0x5c2, 0x9bd, 0x7ef, 0xa1c, 0x161, 0xc5a, 0xc22, 0x87b, 0x9a1, 0x9b2, 0x797, 0x6a5, 0xb41, 0x635, 0xa0b, 0x60c, 0x859, 0x833, 0x991, 0xa92, 0xc80, 0x762, 0x826, 0xc75, 0x831, 0xcfe, 0x3b3, 0x435, 0x7eb, 0x3f4, 0x148, 0xa0b, 0x3f4, 0x27a, 0x930, 0x4be, 0x4a1, 0x6ac, 0xa36, 0x45d, 0x751, 0x018, 0x799, 0x785, 0x697, 0xc7e, 0x0aa, 0xcb3, 0xc12, 0x72d, 0x5bf, 0x8bc, 0x8e3, 0x0d1, 0xb60, 0x162, 0x86c, 0xb19, 0x084, 0x4aa, 0xad2, 0x0ef, 0x00c, 0xc08, 0x95c, 0x4df, 0x233, 0x705, 0x573, 0x090, 0x500, 0x7b8, 0xafa, 0x829, 0x0f0, 0xa32, 0x556, 0xcf6, 0x2ab, 0x7a2, 0x5a7, 0x325, 0x39a, 0x265, 0xb9c, 0xa33, 0x218, 0x593, 0x16d, 0x2e2, 0x316, 0x134, 0x1fd, 0x443, 0xc93, 0x1f7, 0x3aa, 0xb65, 0x17d, 0x8f0, 0x12e, 0x624, 0x7f6, 0xc22, 0xca3, 0x21f, 0xbb5, 0x48d, 0x3eb, 0x00a, 0x8e5, 0xb6a, 0x687, 0x745, 0x415, 0x4e7, 0x422, 0x2c8, 0x3e3, 0x1a3, 0x67e, 0x3ce, 0x582, 0x106, 0x79e, 0x1c6, 0x7cb, 0x165, 0x199, 0x959, 0x987, 0xb55, 0x95e, 0x71f, 0xcf6, 0x8c1, 0x98d, 0x966, 0x847, 0x7b0, 0x0ea, 0x3d2, 0x256, 0x195, 0x554, 0xb00, 0x101, 0x2dc, 0xba7, 0x55b, 0x477, 0x575, 0x978, 0xaa1, 0x3df, 0x5ac, 0xc44, 0x8a5, 0xc85, 0x00f, 0x130, 0xa49, 0x9ea, 0x92e, 0x9aa, 0x43d, 0x047, 0x34a, 0x97c, 0x4b8, 0xa62, 0x2c2, 0x926, 0x1ea, 0xa8e, 0xcac, 0xcac, 0x509, 0x222, 0x7ff, 0x545, 0x44a, 0x5f3, 0x8a2, 0x22e, 0x4f1, 0x53a, 0x5ac, 0x9e3, 0x0bf, 0x3b5, 0x943, 0x6cb, 0x3a3, 0xc7e, 0xc27, 0xa2e, 0x79f, 0x7d9, 0x1ac, 0xbfe, 0x84d, 0x67e, 0x5e2, 0x497, 0x5b9, 0x873, 0x21e, 0x7e9, 0xb18, 0x25b, 0x0de, 0x5d6, 0x837, 0x135, 0x88a, 0xc27, 0x017, 0x090, 0x0ed, 0x3e9, 0xc5c
+      },
+    },
+  }};
+
+  const uint8_t SEED[32] = { 0 };
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // sample polynomial from NTT
+    poly_t got = { 0 };
+    poly_sample_ntt(&got, SEED, TESTS[i].x, TESTS[i].y);
+
+    // check for expected value
+    if (memcmp(&got, &TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t a, b, // operands
+               exp; // expected result
+} POLY_ADD_TESTS[] = {{
+  .name = "0-255 + 256-511",
+  .a = {
+    .cs = {
+      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
+    },
+  },
+
+  .b = {
+    .cs = {
+      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
+    },
+  },
+
+  .exp = {
+    .cs = {
+      256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766,
+    },
+  },
+}, {
+  .name = "1000-1255 + 3000-3255 (test modulus)",
+  .a = {
+    .cs = {
+      1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255
+    },
+  },
+
+  .b = {
+    .cs = {
+      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255
+    },
+  },
+
+  .exp = {
+    .cs = {
+      671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181
+    },
+  },
+}};
+
+static void test_poly_add_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_ADD_TESTS)/sizeof(POLY_ADD_TESTS[0]); i++) {
+    // add
+    poly_t got = POLY_ADD_TESTS[i].a;
+    poly_add_scalar(&got, &(POLY_ADD_TESTS[i].b));
+
+    // check for expected value
+    if (memcmp(&got, &POLY_ADD_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ADD_TESTS[i].name, &got, &(POLY_ADD_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_add_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_ADD_TESTS)/sizeof(POLY_ADD_TESTS[0]); i++) {
+    // add
+    poly_t got = POLY_ADD_TESTS[i].a;
+    poly_add_avx512(&got, &(POLY_ADD_TESTS[i].b));
+
+    // check for expected value
+    if (memcmp(&got, &POLY_ADD_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ADD_TESTS[i].name, &got, &(POLY_ADD_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_add_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_ADD_TESTS)/sizeof(POLY_ADD_TESTS[0]); i++) {
+    // add
+    poly_t got = POLY_ADD_TESTS[i].a;
+    poly_add_neon(&got, &(POLY_ADD_TESTS[i].b));
+
+    // check for expected value
+    if (memcmp(&got, &POLY_ADD_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ADD_TESTS[i].name, &got, &(POLY_ADD_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name;     // test name
+  const poly_t a, b, c, // operands
+               exp;     // expected result
+} POLY_ADD2_TESTS[] = {{
+  .name = "nines",
+  .a = { .cs = { 1, 2, 3, 4, 5 } },
+  .b = { .cs = { 5, 4, 3, 2, 1 } },
+  .c = { .cs = { 3, 3, 3, 3, 3 } },
+  .exp = { .cs = { 9, 9, 9, 9, 9 } },
+}};
+
+static void test_poly_add2_scalar(void) {
+  for (size_t i =0 ; i < sizeof(POLY_ADD2_TESTS)/sizeof(POLY_ADD2_TESTS[0]); i++) {
+    // add polys
+    poly_t got = POLY_ADD2_TESTS[i].a;
+    poly_add2_scalar(&got, &POLY_ADD2_TESTS[i].b, &POLY_ADD2_TESTS[i].c);
+
+    // check for expected value
+    if (memcmp(&got, &POLY_ADD2_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ADD2_TESTS[i].name, &got, &(POLY_ADD2_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_add2_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i =0 ; i < sizeof(POLY_ADD2_TESTS)/sizeof(POLY_ADD2_TESTS[0]); i++) {
+    // add polys
+    poly_t got = POLY_ADD2_TESTS[i].a;
+    poly_add2_avx512(&got, &POLY_ADD2_TESTS[i].b, &POLY_ADD2_TESTS[i].c);
+
+    // check for expected value
+    if (memcmp(&got, &POLY_ADD2_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ADD2_TESTS[i].name, &got, &(POLY_ADD2_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_add2_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i =0 ; i < sizeof(POLY_ADD2_TESTS)/sizeof(POLY_ADD2_TESTS[0]); i++) {
+    // add polys
+    poly_t got = POLY_ADD2_TESTS[i].a;
+    poly_add2_neon(&got, &POLY_ADD2_TESTS[i].b, &POLY_ADD2_TESTS[i].c);
+
+    // check for expected value
+    if (memcmp(&got, &POLY_ADD2_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ADD2_TESTS[i].name, &got, &(POLY_ADD2_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t a, b, // operands
+               exp; // expected result
+} POLY_SUB_TESTS[] = {{
+  .name = "256-766 - 256-511 = 0-255",
+  .a = {
+    .cs = {
+      256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766,
+    },
+  },
+
+  .b = {
+    .cs = {
+      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
+    },
+  },
+
+  .exp = {
+    .cs = {
+      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
+    },
+  },
+}, {
+  .name = "Z - 3000-3255 = 1000-1255 (test modulus)",
+  .a = {
+    .cs = {
+      671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181
+    },
+  },
+
+  .b = {
+    .cs = {
+      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255
+    },
+  },
+
+  .exp = {
+    .cs = {
+      1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255
+    },
+  },
+}};
+
+static void test_poly_sub_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_SUB_TESTS)/sizeof(POLY_SUB_TESTS[0]); i++) {
+    // sample polynomial from NTT
+    poly_t got = POLY_SUB_TESTS[i].a;
+    poly_sub_scalar(&got, &(POLY_SUB_TESTS[i].b));
+
+    // check for expected value
+    if (memcmp(&got, &POLY_SUB_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_SUB_TESTS[i].name, &got, &(POLY_SUB_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_sub_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_SUB_TESTS)/sizeof(POLY_SUB_TESTS[0]); i++) {
+    // sample polynomial from NTT
+    poly_t got = POLY_SUB_TESTS[i].a;
+    poly_sub_avx512(&got, &(POLY_SUB_TESTS[i].b));
+
+    // check for expected value
+    if (memcmp(&got, &POLY_SUB_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_SUB_TESTS[i].name, &got, &(POLY_SUB_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_sub_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_SUB_TESTS)/sizeof(POLY_SUB_TESTS[0]); i++) {
+    // sample polynomial from NTT
+    poly_t got = POLY_SUB_TESTS[i].a;
+    poly_sub_neon(&got, &(POLY_SUB_TESTS[i].b));
+
+    // check for expected value
+    if (memcmp(&got, &POLY_SUB_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_SUB_TESTS[i].name, &got, &(POLY_SUB_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t a, b, // operands (not in NTT)
+               exp; // expected result
+} POLY_MUL_TESTS[] = {{
+  .name = "1 * 1 = 1",
+  .a = {
+    .cs = {
+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+
+  .b = {
+    .cs = {
+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+
+  .exp = {
+    .cs = {
+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+}, {
+  .name = "x * x = x^2",
+  .a = {
+    .cs = {
+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+
+  .b = {
+    .cs = {
+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+
+  .exp = {
+    .cs = {
+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+}, {
+  .name = "x^2 * x^3 = x^5",
+  .a = {
+    .cs = {
+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+
+  .b = {
+    .cs = {
+      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+
+  .exp = {
+    .cs = {
+      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+}, {
+  .name = "x^255 * x = 3328 (test poly reduction and coefficient modulus)",
+  .a = {
+    .cs = {
+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
+    },
+  },
+
+  .b = {
+    .cs = {
+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+
+  .exp = {
+    .cs = {
+      3328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    },
+  },
+}, {
+  .name = "x^2 * x^4 = x^6",
+  .a = { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+  .b = { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
+  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } },
+}, {
+  .name = "x^3 * x^5 = x^8",
+  .a = { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+  .b = { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
+  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
+}};
+
+static void test_poly_mul_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_MUL_TESTS)/sizeof(POLY_MUL_TESTS[0]); i++) {
+    poly_t a = POLY_MUL_TESTS[i].a, b = POLY_MUL_TESTS[i].b, got = { 0 };
+
+    poly_ntt(&a); // a = NTT(a)
+    poly_ntt(&b); // b = NTT(b)
+    poly_mul_scalar(&got, &a, &b); // got = a * b
+    poly_inv_ntt(&got); // a = InvNTT(a)
+
+    // check for expected value
+    if (memcmp(&got, &POLY_MUL_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_MUL_TESTS[i].name, &got, &(POLY_MUL_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_mul_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_MUL_TESTS)/sizeof(POLY_MUL_TESTS[0]); i++) {
+    poly_t a = POLY_MUL_TESTS[i].a, b = POLY_MUL_TESTS[i].b, got = { 0 };
+
+    poly_ntt(&a); // a = NTT(a)
+    poly_ntt(&b); // b = NTT(b)
+    poly_mul_avx512(&got, &a, &b); // got = a * b
+    poly_inv_ntt(&got); // a = InvNTT(a)
+
+    // check for expected value
+    if (memcmp(&got, &POLY_MUL_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_MUL_TESTS[i].name, &got, &(POLY_MUL_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_mul_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_MUL_TESTS)/sizeof(POLY_MUL_TESTS[0]); i++) {
+    poly_t a = POLY_MUL_TESTS[i].a, b = POLY_MUL_TESTS[i].b, got = { 0 };
+
+    poly_ntt(&a); // a = NTT(a)
+    poly_ntt(&b); // b = NTT(b)
+    poly_mul_neon(&got, &a, &b); // got = a * b
+    poly_inv_ntt(&got); // a = InvNTT(a)
+
+    // check for expected value
+    if (memcmp(&got, &POLY_MUL_TESTS[i].exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_MUL_TESTS[i].name, &got, &(POLY_MUL_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static void test_prf(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t b; // seed byte
+    const uint8_t exp[16]; // expected bytes
+  } TESTS[] = {
+    { .name = "0", .b = 0, .exp = { 0xc0, 0x3f, 0xcc, 0x81, 0xe7, 0x36, 0x09, 0x87, 0x5b, 0x3b, 0x98, 0xcb, 0x94, 0x1c, 0x78, 0x06 } },
+    { .name = "1", .b = 1, .exp = { 0xd3, 0x59, 0x3e, 0x6f, 0xc4, 0x0e, 0x08, 0xfc, 0x4c, 0xa6, 0xcf, 0x6b, 0x52, 0xa0, 0x9e, 0x57 } },
+    { .name = "2", .b = 2, .exp = { 0x14, 0xe3, 0x2e, 0xd1, 0x28, 0x90, 0xf7, 0x6b, 0x44, 0x73, 0x3e, 0xac, 0xae, 0x8b, 0xf4, 0x24 } },
+    { .name = "3", .b = 3, .exp = { 0x3d, 0xc2, 0x37, 0x5a, 0xf3, 0xaa, 0x2b, 0x4c, 0xa0, 0xe5, 0xf4, 0x7c, 0xf0, 0x01, 0xf0, 0x81 } },
+    { .name = "4", .b = 4, .exp = { 0x82, 0x8c, 0x57, 0x66, 0xbc, 0xac, 0xd5, 0x4e, 0x7d, 0x5b, 0xe1, 0x8c, 0x05, 0xa5, 0x2e, 0x49 } },
+    { .name = "5", .b = 5, .exp = { 0x16, 0xe0, 0x17, 0x73, 0xa8, 0x7b, 0x13, 0x8b, 0xb8, 0x0b, 0x4f, 0x7d, 0xfa, 0xee, 0x53, 0x53 } },
+    { .name = "6", .b = 6, .exp = { 0xcd, 0xe8, 0xb7, 0xb9, 0x85, 0xb6, 0xe7, 0xd1, 0x1a, 0x4a, 0x4a, 0x5d, 0xcf, 0xfd, 0x53, 0xdf } },
+    { .name = "7", .b = 7, .exp = { 0x3c, 0x9a, 0x19, 0x36, 0x84, 0x9f, 0x50, 0xb8, 0x4a, 0xe6, 0x1c, 0x6e, 0x36, 0xd6, 0xf2, 0xfc } },
+    { .name = "8", .b = 8, .exp = { 0x9a, 0xa1, 0x15, 0xa4, 0x8e, 0x91, 0xae, 0xdb, 0x1d, 0xd3, 0x1f, 0xd2, 0x1f, 0x60, 0xf6, 0x8a } },
+    { .name = "9", .b = 9, .exp = { 0x1a, 0xca, 0x42, 0x42, 0x3f, 0x01, 0xc8, 0x7c, 0xb1, 0x90, 0x8c, 0xb4, 0xaa, 0x19, 0x78, 0x8b } },
+    { .name = "10", .b = 10, .exp = { 0x44, 0x34, 0x2b, 0xec, 0x7a, 0xd9, 0xff, 0x47, 0x31, 0x3e, 0xc6, 0xbc, 0x06, 0x30, 0xbd, 0xe8 } },
+    { .name = "11", .b = 11, .exp = { 0xe2, 0xad, 0x17, 0xef, 0xdb, 0xa8, 0x9b, 0x76, 0x41, 0x53, 0xaf, 0x36, 0xa5, 0xcd, 0x82, 0x8e } },
+    { .name = "12", .b = 12, .exp = { 0x1f, 0x1b, 0x87, 0x37, 0xb0, 0x3a, 0x1c, 0xb5, 0x44, 0x38, 0xc5, 0x2a, 0x7c, 0x9d, 0x31, 0xc1 } },
+    { .name = "13", .b = 13, .exp = { 0xc1, 0xc5, 0x63, 0xdf, 0x29, 0x41, 0x9d, 0x40, 0xb8, 0xbf, 0xca, 0x6f, 0xbd, 0xb7, 0x8a, 0x3b } },
+    { .name = "14", .b = 14, .exp = { 0x00, 0xff, 0xc3, 0xe2, 0xf1, 0x88, 0x3d, 0x38, 0xd5, 0x18, 0x1a, 0xa5, 0x0d, 0xfc, 0x7b, 0xcc } },
+    { .name = "15", .b = 15, .exp = { 0x3f, 0xa0, 0x1f, 0x3d, 0x9f, 0x2d, 0x47, 0x1a, 0x46, 0xd4, 0xaa, 0x68, 0x2b, 0x8a, 0x94, 0x96 } },
+    { .name = "16", .b = 16, .exp = { 0x59, 0xb1, 0xde, 0xc0, 0xf0, 0x02, 0xe4, 0x9b, 0xfe, 0xed, 0x95, 0x3f, 0x5e, 0xd9, 0xb1, 0x4e } },
+    { .name = "17", .b = 17, .exp = { 0x43, 0x86, 0xc6, 0x3f, 0x1b, 0x97, 0xcd, 0xff, 0x3e, 0xaa, 0x36, 0xf3, 0xf2, 0x28, 0x66, 0xd2 } },
+    { .name = "18", .b = 18, .exp = { 0x1d, 0x44, 0xf2, 0xdd, 0x47, 0x2b, 0x9f, 0xcc, 0xe5, 0x6c, 0xea, 0x24, 0x7c, 0x7d, 0xcc, 0x2b } },
+    { .name = "19", .b = 19, .exp = { 0x78, 0x51, 0xf9, 0x0b, 0x58, 0x53, 0x3a, 0xd8, 0x3f, 0x8f, 0xe4, 0xa9, 0x5e, 0x8f, 0x64, 0x1b } },
+    { .name = "20", .b = 20, .exp = { 0x0d, 0x53, 0x3e, 0xc1, 0x21, 0xf3, 0xb8, 0x8b, 0xb7, 0x04, 0x4a, 0xfa, 0xce, 0x40, 0xd5, 0xc3 } },
+    { .name = "21", .b = 21, .exp = { 0x82, 0xe2, 0x8a, 0xb1, 0xa1, 0x41, 0xa2, 0x97, 0x18, 0xc7, 0x59, 0xa3, 0xf7, 0x3e, 0x4c, 0xb8 } },
+    { .name = "22", .b = 22, .exp = { 0x82, 0x74, 0xde, 0x61, 0x21, 0x03, 0x67, 0x89, 0x82, 0x07, 0xb5, 0xd9, 0x6e, 0xbf, 0x54, 0x32 } },
+    { .name = "23", .b = 23, .exp = { 0x4b, 0x27, 0x12, 0xd0, 0xec, 0xc4, 0xb5, 0xb9, 0x69, 0xdf, 0x88, 0xdc, 0xb0, 0x14, 0x76, 0x6b } },
+    { .name = "24", .b = 24, .exp = { 0x82, 0x28, 0xdb, 0x36, 0x81, 0x35, 0xa5, 0x89, 0xe9, 0xb7, 0x7f, 0x00, 0xf8, 0x1f, 0xaa, 0xe3 } },
+    { .name = "25", .b = 25, .exp = { 0x93, 0xef, 0xa3, 0x9c, 0xc5, 0x45, 0x85, 0xc6, 0xee, 0x58, 0xad, 0xba, 0x49, 0x5b, 0x90, 0xd7 } },
+    { .name = "26", .b = 26, .exp = { 0x5a, 0x22, 0x8d, 0xf1, 0x28, 0xeb, 0x19, 0xd0, 0x61, 0xfe, 0x6e, 0x9b, 0x1a, 0xd1, 0xcb, 0xd7 } },
+    { .name = "27", .b = 27, .exp = { 0x22, 0x29, 0xda, 0x4a, 0xc2, 0xce, 0x59, 0x29, 0x62, 0x7c, 0xab, 0x0c, 0x6d, 0x81, 0x3b, 0x49 } },
+    { .name = "28", .b = 28, .exp = { 0x70, 0x7c, 0x3f, 0x61, 0x05, 0x62, 0x89, 0x4b, 0xb4, 0x0b, 0x5c, 0x7b, 0x01, 0x0c, 0x30, 0x17 } },
+    { .name = "29", .b = 29, .exp = { 0xdd, 0x79, 0x2a, 0x96, 0xb4, 0xb0, 0x8e, 0x83, 0x8f, 0xa6, 0xba, 0x7f, 0x01, 0x75, 0x20, 0x46 } },
+    { .name = "30", .b = 30, .exp = { 0xd5, 0xcf, 0x68, 0x94, 0x8c, 0x20, 0x61, 0x5d, 0x87, 0x77, 0x62, 0x17, 0xaa, 0x04, 0x85, 0xb7 } },
+    { .name = "31", .b = 31, .exp = { 0xc6, 0xef, 0xb1, 0x54, 0x29, 0x80, 0xbd, 0x33, 0x76, 0x0f, 0x8f, 0x51, 0x36, 0x8d, 0xa6, 0x85 } },
+    { .name = "32", .b = 32, .exp = { 0x19, 0x17, 0xfc, 0x54, 0x17, 0x28, 0x3d, 0xdb, 0x90, 0x57, 0x9c, 0x72, 0x1b, 0x87, 0x2c, 0xc7 } },
+    { .name = "33", .b = 33, .exp = { 0xf6, 0xad, 0xbd, 0x15, 0x4f, 0xa6, 0x73, 0xca, 0x48, 0x32, 0xa1, 0x3b, 0xeb, 0x85, 0x5c, 0x66 } },
+    { .name = "34", .b = 34, .exp = { 0x93, 0x97, 0xaf, 0x0e, 0x5c, 0x02, 0x74, 0x65, 0x96, 0x25, 0x38, 0x78, 0x86, 0x5f, 0xea, 0x0e } },
+    { .name = "35", .b = 35, .exp = { 0x4d, 0xb4, 0x5e, 0x25, 0x19, 0x02, 0x5a, 0xbf, 0xea, 0x9b, 0x35, 0xa5, 0xef, 0xe0, 0x29, 0x00 } },
+    { .name = "36", .b = 36, .exp = { 0x6c, 0xcf, 0x6b, 0xa9, 0x8a, 0x41, 0xcb, 0x37, 0xde, 0x3d, 0x9a, 0x70, 0x34, 0x92, 0x22, 0xca } },
+    { .name = "37", .b = 37, .exp = { 0x51, 0x46, 0x3d, 0x93, 0xf4, 0x73, 0x42, 0x13, 0xd5, 0x1e, 0x22, 0x2e, 0x26, 0x7d, 0x40, 0xa0 } },
+    { .name = "38", .b = 38, .exp = { 0xf0, 0x05, 0x25, 0x23, 0xf1, 0x4f, 0xb1, 0x3e, 0xac, 0xd0, 0x2c, 0x0c, 0xba, 0x18, 0xa1, 0xa5 } },
+    { .name = "39", .b = 39, .exp = { 0x60, 0xa4, 0x46, 0x72, 0x00, 0xe8, 0xc2, 0xa8, 0x46, 0xea, 0x03, 0x2c, 0x56, 0x66, 0xae, 0x24 } },
+    { .name = "40", .b = 40, .exp = { 0x7f, 0x46, 0xff, 0xeb, 0xb5, 0x27, 0x90, 0x32, 0xde, 0x2a, 0x46, 0xcd, 0x46, 0x1e, 0xbe, 0x40 } },
+    { .name = "41", .b = 41, .exp = { 0x75, 0x00, 0xa8, 0x41, 0xe9, 0x6d, 0x91, 0x21, 0xe0, 0xc6, 0x8e, 0x1e, 0x5e, 0xcd, 0x18, 0x75 } },
+    { .name = "42", .b = 42, .exp = { 0x6f, 0x15, 0x54, 0xcb, 0xad, 0x8a, 0xed, 0x51, 0x49, 0x83, 0xb9, 0xcb, 0xa4, 0x33, 0xb7, 0x24 } },
+    { .name = "43", .b = 43, .exp = { 0xcf, 0x6c, 0x09, 0xab, 0x34, 0x45, 0xed, 0x0d, 0xce, 0x45, 0xec, 0xac, 0x54, 0x51, 0xd2, 0x6e } },
+    { .name = "44", .b = 44, .exp = { 0xff, 0xac, 0xd9, 0x88, 0x30, 0xfa, 0x19, 0x67, 0xb4, 0x26, 0xe6, 0x5a, 0x72, 0x90, 0xa3, 0x31 } },
+    { .name = "45", .b = 45, .exp = { 0xc5, 0xef, 0x23, 0xc9, 0x22, 0x9a, 0x10, 0xf8, 0xd7, 0x7a, 0xeb, 0x4e, 0x07, 0x4a, 0xf6, 0x8a } },
+    { .name = "46", .b = 46, .exp = { 0x32, 0x9c, 0xd5, 0xcb, 0x50, 0x3f, 0x96, 0x9e, 0x49, 0xca, 0x2a, 0xd4, 0x8d, 0x88, 0x43, 0x15 } },
+    { .name = "47", .b = 47, .exp = { 0xcf, 0x4c, 0x31, 0x38, 0xf3, 0xbb, 0xcf, 0x95, 0x0d, 0x62, 0xe9, 0xa6, 0xe7, 0x2f, 0xd3, 0x64 } },
+    { .name = "48", .b = 48, .exp = { 0x58, 0x1e, 0xea, 0x5e, 0xb2, 0x53, 0x36, 0xb9, 0xe7, 0xdc, 0xa2, 0xd3, 0x4e, 0x23, 0x37, 0x9e } },
+    { .name = "49", .b = 49, .exp = { 0x2e, 0xec, 0x01, 0xf6, 0x4c, 0xbd, 0xa0, 0x7d, 0xe0, 0x73, 0x00, 0x83, 0x6a, 0x09, 0x59, 0xd6 } },
+    { .name = "50", .b = 50, .exp = { 0x66, 0xd7, 0x1b, 0x0a, 0x54, 0xd3, 0x78, 0xec, 0xf3, 0x91, 0x06, 0xe1, 0xbd, 0x1c, 0x7c, 0x52 } },
+    { .name = "51", .b = 51, .exp = { 0xc3, 0xbf, 0x9e, 0xc9, 0x3f, 0x37, 0xf9, 0x88, 0x4c, 0x4a, 0x71, 0x7e, 0xb1, 0x69, 0x54, 0x06 } },
+    { .name = "52", .b = 52, .exp = { 0xc5, 0x89, 0x30, 0xf0, 0x1e, 0x2b, 0xd1, 0x4d, 0xaf, 0xd4, 0x45, 0x20, 0x3b, 0xa2, 0xd6, 0xe3 } },
+    { .name = "53", .b = 53, .exp = { 0x23, 0x0a, 0xe3, 0xaf, 0xdf, 0xcb, 0x77, 0xea, 0x71, 0x20, 0x8e, 0x31, 0xd1, 0x85, 0x36, 0x9a } },
+    { .name = "54", .b = 54, .exp = { 0x82, 0x50, 0xb4, 0x90, 0xc3, 0x9e, 0xbf, 0x4e, 0x57, 0x37, 0x38, 0x18, 0x07, 0xdb, 0x09, 0xe8 } },
+    { .name = "55", .b = 55, .exp = { 0x7e, 0x89, 0xa8, 0x99, 0x14, 0x01, 0x73, 0x4b, 0x74, 0xad, 0x87, 0x33, 0x12, 0xcd, 0xce, 0xbe } },
+    { .name = "56", .b = 56, .exp = { 0xc1, 0xdb, 0xd7, 0xcd, 0x4e, 0x0f, 0x73, 0x9e, 0x75, 0x95, 0x31, 0xb6, 0x81, 0xe7, 0x4b, 0x8c } },
+    { .name = "57", .b = 57, .exp = { 0xc8, 0x11, 0x20, 0x76, 0x73, 0x13, 0xf1, 0x39, 0xc3, 0x45, 0xfe, 0x91, 0x77, 0x3f, 0x6c, 0x2f } },
+    { .name = "58", .b = 58, .exp = { 0xf7, 0xc8, 0x51, 0x2e, 0x32, 0x77, 0xa8, 0x57, 0x6a, 0xa8, 0x08, 0x39, 0x3d, 0x9f, 0x17, 0x8e } },
+    { .name = "59", .b = 59, .exp = { 0x24, 0xdc, 0xb9, 0x95, 0x5f, 0x39, 0xd6, 0x82, 0x39, 0xf8, 0x93, 0x6c, 0x9c, 0x15, 0xe7, 0xa0 } },
+    { .name = "60", .b = 60, .exp = { 0x16, 0xaa, 0x80, 0x11, 0x8c, 0x5a, 0xfb, 0x5d, 0x3e, 0x81, 0x36, 0x48, 0xb5, 0x07, 0x46, 0xb2 } },
+    { .name = "61", .b = 61, .exp = { 0xbe, 0xd4, 0x72, 0xdd, 0x88, 0xf3, 0x7d, 0x94, 0x66, 0x1a, 0x00, 0x34, 0x9d, 0xaa, 0xc2, 0x66 } },
+    { .name = "62", .b = 62, .exp = { 0x47, 0x2d, 0x77, 0x8d, 0x2f, 0xd9, 0x0b, 0x45, 0x0b, 0xb7, 0x1b, 0x03, 0x13, 0xbf, 0x00, 0xeb } },
+    { .name = "63", .b = 63, .exp = { 0xb4, 0xa2, 0x6d, 0x2b, 0x18, 0xe1, 0x96, 0xd7, 0x02, 0x04, 0x06, 0x29, 0x44, 0x6b, 0x1e, 0x9e } },
+    { .name = "64", .b = 64, .exp = { 0x63, 0x11, 0xb5, 0xe5, 0x8b, 0x88, 0x1b, 0x5d, 0xa4, 0x5c, 0x20, 0x29, 0x46, 0xa7, 0x2b, 0x7e } },
+    { .name = "65", .b = 65, .exp = { 0x64, 0x50, 0x9f, 0x60, 0xe7, 0x26, 0x4d, 0x15, 0x57, 0x20, 0x02, 0x01, 0x20, 0x27, 0x0c, 0x3d } },
+    { .name = "66", .b = 66, .exp = { 0xf2, 0xa7, 0x5e, 0x98, 0x55, 0x10, 0xb0, 0xb9, 0xa7, 0x6d, 0xcb, 0x5c, 0xdd, 0x24, 0x72, 0xb8 } },
+    { .name = "67", .b = 67, .exp = { 0x83, 0x6b, 0x23, 0xd6, 0x38, 0x4c, 0x33, 0x9b, 0xc3, 0x6d, 0x63, 0xbb, 0xb1, 0x25, 0x2e, 0xb1 } },
+    { .name = "68", .b = 68, .exp = { 0x4f, 0x3a, 0x82, 0x3a, 0x0f, 0x7a, 0xd5, 0x8b, 0x60, 0xbc, 0x33, 0x1a, 0x74, 0x15, 0x39, 0x7b } },
+    { .name = "69", .b = 69, .exp = { 0xc2, 0xa7, 0x8d, 0xd2, 0x30, 0x4e, 0x55, 0x0f, 0x23, 0xe0, 0x03, 0x78, 0xec, 0xc4, 0xb8, 0xc1 } },
+    { .name = "70", .b = 70, .exp = { 0x35, 0xe2, 0xb3, 0x48, 0xd2, 0x8e, 0xed, 0x77, 0x05, 0xe8, 0xd3, 0x6d, 0x3e, 0xae, 0x20, 0x38 } },
+    { .name = "71", .b = 71, .exp = { 0x57, 0x27, 0xb8, 0x82, 0x33, 0x0c, 0xe7, 0xc9, 0x59, 0x81, 0x6b, 0xfd, 0x90, 0x10, 0x9e, 0x41 } },
+    { .name = "72", .b = 72, .exp = { 0xdc, 0xe6, 0x36, 0xf4, 0x68, 0xdc, 0x2e, 0xd4, 0xc2, 0xb2, 0x5f, 0xdb, 0xfa, 0xf5, 0x57, 0xdd } },
+    { .name = "73", .b = 73, .exp = { 0x32, 0x78, 0xfa, 0xd3, 0x58, 0x85, 0x07, 0xe3, 0x97, 0xa3, 0xc0, 0x88, 0xe8, 0x2a, 0x2c, 0x9c } },
+    { .name = "74", .b = 74, .exp = { 0xf3, 0x50, 0x40, 0xd5, 0xf2, 0x32, 0xe4, 0x59, 0x21, 0xa1, 0x4e, 0x38, 0xb9, 0x24, 0xe3, 0x88 } },
+    { .name = "75", .b = 75, .exp = { 0x33, 0xa8, 0xfc, 0x54, 0x9e, 0x3b, 0xb4, 0xf1, 0x0a, 0x63, 0x15, 0xd7, 0xab, 0x1b, 0x9d, 0xf3 } },
+    { .name = "76", .b = 76, .exp = { 0x1d, 0x39, 0x98, 0xe3, 0x85, 0xfe, 0x9a, 0xff, 0xdf, 0x93, 0x5c, 0x17, 0xf5, 0x02, 0x21, 0xa7 } },
+    { .name = "77", .b = 77, .exp = { 0xc1, 0x7c, 0xb1, 0xa9, 0xc6, 0xbb, 0x12, 0x9a, 0xf7, 0x8f, 0xa4, 0xe0, 0xe5, 0x22, 0x97, 0x6f } },
+    { .name = "78", .b = 78, .exp = { 0x5f, 0x02, 0x38, 0x35, 0x20, 0x70, 0xde, 0x84, 0xb5, 0xc0, 0x78, 0x3f, 0xaa, 0xee, 0x21, 0x95 } },
+    { .name = "79", .b = 79, .exp = { 0xe1, 0x2e, 0xdd, 0x35, 0xf1, 0xa1, 0x4d, 0x56, 0xf4, 0x91, 0xd7, 0x0b, 0xdb, 0x7e, 0xc0, 0xf3 } },
+    { .name = "80", .b = 80, .exp = { 0x50, 0x48, 0xaa, 0xf5, 0x52, 0x79, 0x8e, 0x86, 0x58, 0x9f, 0x92, 0x2b, 0x2d, 0x71, 0xd2, 0x91 } },
+    { .name = "81", .b = 81, .exp = { 0x51, 0x39, 0x60, 0xa5, 0x51, 0x17, 0x86, 0x98, 0x28, 0x73, 0x47, 0xf9, 0xb0, 0x49, 0x74, 0xcd } },
+    { .name = "82", .b = 82, .exp = { 0xaf, 0x7e, 0xe9, 0xfd, 0x89, 0xf1, 0xbc, 0x84, 0xef, 0xfe, 0xbc, 0xe8, 0xfb, 0x78, 0x02, 0x9b } },
+    { .name = "83", .b = 83, .exp = { 0x2f, 0xeb, 0x87, 0x4e, 0xbc, 0xc9, 0xaf, 0xc3, 0xdc, 0x12, 0x61, 0x1a, 0x61, 0xee, 0x9c, 0xb6 } },
+    { .name = "84", .b = 84, .exp = { 0x2d, 0x25, 0x9a, 0xc0, 0xf6, 0x31, 0x57, 0xb7, 0x6f, 0x6a, 0xde, 0xa8, 0xd7, 0x60, 0x91, 0x8f } },
+    { .name = "85", .b = 85, .exp = { 0x37, 0xd2, 0x6b, 0xa7, 0x85, 0xd5, 0x24, 0x13, 0x35, 0x85, 0xb6, 0xa0, 0x94, 0xff, 0xab, 0xd9 } },
+    { .name = "86", .b = 86, .exp = { 0x2b, 0xc6, 0x7e, 0xf8, 0x7e, 0x4e, 0x0a, 0x88, 0xa5, 0xbc, 0xae, 0x12, 0x6a, 0x0b, 0x3a, 0x98 } },
+    { .name = "87", .b = 87, .exp = { 0x6e, 0x63, 0xf4, 0xcb, 0x01, 0x23, 0xb6, 0xf5, 0x6a, 0x5f, 0x27, 0x9c, 0x13, 0x74, 0x27, 0xfd } },
+    { .name = "88", .b = 88, .exp = { 0x61, 0xc3, 0x22, 0x73, 0x61, 0x8e, 0xb4, 0x7e, 0x12, 0xce, 0xf5, 0x18, 0x34, 0x66, 0xd2, 0xa4 } },
+    { .name = "89", .b = 89, .exp = { 0xe9, 0xde, 0x25, 0x24, 0xac, 0xf8, 0x68, 0x38, 0x4f, 0xc1, 0x7c, 0x42, 0xeb, 0xe0, 0xf7, 0xa9 } },
+    { .name = "90", .b = 90, .exp = { 0x49, 0x9e, 0x84, 0x99, 0xca, 0x98, 0xd0, 0x3b, 0x55, 0xe2, 0xe4, 0x29, 0xbb, 0x7c, 0x50, 0x17 } },
+    { .name = "91", .b = 91, .exp = { 0xd6, 0x0c, 0x16, 0xd0, 0xd9, 0xdd, 0x5b, 0x6b, 0x0d, 0x4a, 0xff, 0x65, 0x5c, 0x74, 0x7f, 0x10 } },
+    { .name = "92", .b = 92, .exp = { 0x99, 0x2d, 0x88, 0x36, 0xf1, 0xc7, 0x37, 0x48, 0xdd, 0x71, 0x49, 0x04, 0x23, 0x14, 0xe7, 0xb4 } },
+    { .name = "93", .b = 93, .exp = { 0xa2, 0x4d, 0x33, 0x79, 0xc8, 0x9c, 0x80, 0x9b, 0x87, 0xf2, 0x0c, 0x01, 0x1d, 0xa9, 0xb9, 0x4b } },
+    { .name = "94", .b = 94, .exp = { 0xdc, 0x47, 0x27, 0x02, 0x25, 0x16, 0xe6, 0xcf, 0x33, 0x9a, 0x4f, 0x2f, 0x0a, 0xdf, 0x65, 0xf7 } },
+    { .name = "95", .b = 95, .exp = { 0xd5, 0xaa, 0x35, 0xc8, 0x9e, 0x92, 0xab, 0xc8, 0x20, 0xc3, 0xdd, 0x5a, 0x97, 0x91, 0xad, 0xe7 } },
+    { .name = "96", .b = 96, .exp = { 0x42, 0xb3, 0x98, 0xdb, 0x67, 0xbe, 0x3f, 0xb8, 0xf7, 0xa0, 0xa5, 0x83, 0x89, 0x84, 0x9a, 0xe9 } },
+    { .name = "97", .b = 97, .exp = { 0xe8, 0x93, 0x10, 0x5a, 0x4c, 0xc1, 0xe5, 0x3c, 0xc8, 0x88, 0xc6, 0xf0, 0xbd, 0x79, 0x37, 0xc4 } },
+    { .name = "98", .b = 98, .exp = { 0x36, 0x42, 0x1a, 0x43, 0xf2, 0x55, 0x1f, 0x3f, 0x85, 0xf8, 0xff, 0x18, 0x51, 0xa8, 0xf9, 0x18 } },
+    { .name = "99", .b = 99, .exp = { 0x9e, 0x30, 0xb5, 0x5f, 0x1a, 0x5c, 0xef, 0x15, 0xc6, 0xd1, 0x1a, 0xe3, 0x45, 0x82, 0x8e, 0xbc } },
+    { .name = "100", .b = 100, .exp = { 0x07, 0x4b, 0x15, 0xf5, 0x9d, 0x4a, 0x3c, 0xc7, 0x02, 0x11, 0x5d, 0x67, 0x3f, 0x7a, 0xab, 0x15 } },
+    { .name = "101", .b = 101, .exp = { 0x4c, 0xe0, 0x74, 0x3e, 0x7e, 0x61, 0xdd, 0xcd, 0x95, 0x11, 0xd4, 0x5d, 0x84, 0x37, 0x8c, 0x42 } },
+    { .name = "102", .b = 102, .exp = { 0x57, 0x98, 0x1e, 0xca, 0x98, 0xb9, 0x8a, 0x11, 0x8d, 0xb0, 0x6d, 0xcc, 0xea, 0x53, 0x09, 0x40 } },
+    { .name = "103", .b = 103, .exp = { 0x21, 0xb2, 0x27, 0x6c, 0xde, 0xee, 0x52, 0x99, 0xb8, 0xc9, 0x5c, 0xe3, 0x0f, 0x13, 0x0f, 0xa8 } },
+    { .name = "104", .b = 104, .exp = { 0x8e, 0xdd, 0x4c, 0xfe, 0xd4, 0xd3, 0x83, 0x8e, 0x5d, 0xce, 0x49, 0x30, 0xa1, 0x7d, 0x9d, 0x34 } },
+    { .name = "105", .b = 105, .exp = { 0x9c, 0x19, 0x71, 0x77, 0x8d, 0xbd, 0x34, 0x7d, 0xc6, 0x7d, 0xac, 0x24, 0xd5, 0x4c, 0x30, 0x1a } },
+    { .name = "106", .b = 106, .exp = { 0xf4, 0x23, 0x2b, 0xb3, 0x46, 0xb5, 0xae, 0xfc, 0x4e, 0xc6, 0x66, 0xb4, 0x91, 0xe1, 0xca, 0x15 } },
+    { .name = "107", .b = 107, .exp = { 0x09, 0x59, 0x55, 0x86, 0x7b, 0x7f, 0xe1, 0xae, 0xfa, 0x55, 0xcd, 0xa2, 0x28, 0x88, 0xb2, 0x7c } },
+    { .name = "108", .b = 108, .exp = { 0xcb, 0x38, 0xf6, 0x7f, 0x58, 0x05, 0x7b, 0xde, 0x83, 0xf0, 0xe4, 0xd0, 0xb1, 0x00, 0x1b, 0xd8 } },
+    { .name = "109", .b = 109, .exp = { 0xc4, 0xd6, 0x37, 0x2d, 0x4c, 0xa9, 0xdb, 0x18, 0xfb, 0x9e, 0x3c, 0xe5, 0xfc, 0x00, 0xe1, 0xb6 } },
+    { .name = "110", .b = 110, .exp = { 0xf8, 0xb9, 0x4c, 0x62, 0x9e, 0x7b, 0x53, 0xbc, 0x6c, 0xad, 0x0a, 0xc9, 0x15, 0x9e, 0xaf, 0x08 } },
+    { .name = "111", .b = 111, .exp = { 0xff, 0xa5, 0x86, 0x66, 0xf4, 0xaf, 0x7f, 0x86, 0xc8, 0x3e, 0x91, 0x76, 0x18, 0x17, 0x51, 0xed } },
+    { .name = "112", .b = 112, .exp = { 0xc7, 0xf4, 0xb0, 0x21, 0x02, 0x82, 0x70, 0xfa, 0x70, 0xb6, 0x16, 0x0a, 0x8f, 0xae, 0x42, 0x64 } },
+    { .name = "113", .b = 113, .exp = { 0xae, 0x59, 0x15, 0xde, 0x34, 0x3a, 0xd5, 0x4d, 0x48, 0xe0, 0xb8, 0x07, 0xcb, 0x1a, 0x82, 0xeb } },
+    { .name = "114", .b = 114, .exp = { 0xd0, 0xe1, 0xc3, 0xf3, 0xde, 0x6e, 0xed, 0xe0, 0xb8, 0x9a, 0x3f, 0xf5, 0x69, 0x15, 0x31, 0x6f } },
+    { .name = "115", .b = 115, .exp = { 0xec, 0xa0, 0xbb, 0x8a, 0xff, 0x1e, 0xa0, 0x7f, 0x77, 0xbd, 0xb3, 0x58, 0x2e, 0x27, 0x14, 0xa1 } },
+    { .name = "116", .b = 116, .exp = { 0x68, 0x31, 0x4a, 0x8a, 0xbb, 0x79, 0x83, 0x5c, 0xce, 0x2a, 0xb9, 0x54, 0x07, 0x9c, 0x92, 0x7a } },
+    { .name = "117", .b = 117, .exp = { 0x70, 0x37, 0x51, 0xef, 0x04, 0x61, 0x26, 0x25, 0xdb, 0x9b, 0x57, 0x38, 0x9f, 0x1b, 0xf6, 0xa2 } },
+    { .name = "118", .b = 118, .exp = { 0x5c, 0xb2, 0xb2, 0x3e, 0x72, 0x77, 0x94, 0x50, 0xad, 0x90, 0x7f, 0x2a, 0xfb, 0xc9, 0x9c, 0x62 } },
+    { .name = "119", .b = 119, .exp = { 0x9f, 0x1e, 0x13, 0x5e, 0xc0, 0x81, 0x6c, 0x3d, 0xeb, 0x7c, 0xf7, 0xee, 0xdf, 0x07, 0xb1, 0xb3 } },
+    { .name = "120", .b = 120, .exp = { 0x6e, 0x78, 0x1d, 0x14, 0xb6, 0xda, 0x86, 0x7b, 0xac, 0x0a, 0x6c, 0x06, 0x2a, 0x98, 0x21, 0x65 } },
+    { .name = "121", .b = 121, .exp = { 0xf5, 0x77, 0x3c, 0x7c, 0xad, 0x2c, 0x4d, 0x94, 0x10, 0xe1, 0xad, 0x10, 0x24, 0x5c, 0xae, 0xc0 } },
+    { .name = "122", .b = 122, .exp = { 0x90, 0x15, 0x76, 0x4c, 0x5c, 0xc4, 0x0c, 0xca, 0x2b, 0xc8, 0xd0, 0xde, 0x2e, 0xfd, 0xc6, 0xf3 } },
+    { .name = "123", .b = 123, .exp = { 0x49, 0x83, 0x07, 0x88, 0x3e, 0x33, 0xde, 0xfe, 0xde, 0xf7, 0x32, 0x91, 0x3f, 0xfc, 0xce, 0x8e } },
+    { .name = "124", .b = 124, .exp = { 0x85, 0x83, 0xcf, 0x7b, 0x98, 0x88, 0x5a, 0x19, 0xc7, 0x24, 0xab, 0xe7, 0xf5, 0xf0, 0x29, 0x30 } },
+    { .name = "125", .b = 125, .exp = { 0xec, 0x22, 0x55, 0x3b, 0x5d, 0x4d, 0x4e, 0x2b, 0x38, 0x38, 0x02, 0xbe, 0xd9, 0xe7, 0x52, 0x6e } },
+    { .name = "126", .b = 126, .exp = { 0x29, 0xb7, 0x6e, 0x6b, 0xf7, 0xe2, 0xe9, 0x64, 0x1a, 0xf1, 0x5f, 0x11, 0x2f, 0x5e, 0x16, 0xd0 } },
+    { .name = "127", .b = 127, .exp = { 0x54, 0x3b, 0x80, 0x91, 0xe4, 0x28, 0xea, 0xdf, 0xbe, 0xeb, 0xff, 0x00, 0xad, 0x37, 0x68, 0xec } },
+    { .name = "128", .b = 128, .exp = { 0xc0, 0x3b, 0x90, 0x24, 0x7f, 0xcb, 0xe0, 0xee, 0x9d, 0xc6, 0x4e, 0xc3, 0x25, 0x72, 0xff, 0x25 } },
+    { .name = "129", .b = 129, .exp = { 0x47, 0xbc, 0x6f, 0x5b, 0xb8, 0xb5, 0x1d, 0xec, 0xb2, 0x69, 0x93, 0x03, 0xe0, 0x16, 0x01, 0xa2 } },
+    { .name = "130", .b = 130, .exp = { 0x97, 0xdd, 0xc5, 0x31, 0x41, 0x84, 0xfe, 0x91, 0x09, 0x6d, 0x0a, 0xd2, 0x86, 0xf5, 0x2c, 0x1e } },
+    { .name = "131", .b = 131, .exp = { 0x5a, 0xe7, 0x2e, 0x53, 0xba, 0x00, 0x03, 0xa6, 0xb3, 0x36, 0xa0, 0x26, 0xb2, 0x38, 0xb8, 0xbb } },
+    { .name = "132", .b = 132, .exp = { 0x66, 0x1c, 0x32, 0x87, 0x81, 0x86, 0x1b, 0xa7, 0xfa, 0xa1, 0x66, 0xb3, 0x54, 0x75, 0xcc, 0x09 } },
+    { .name = "133", .b = 133, .exp = { 0xa4, 0xca, 0x06, 0x38, 0xfe, 0x18, 0xcd, 0xad, 0xe8, 0x37, 0x96, 0x3c, 0x3d, 0xd5, 0xda, 0x24 } },
+    { .name = "134", .b = 134, .exp = { 0xeb, 0x37, 0x49, 0x4f, 0x7f, 0xac, 0xa2, 0x19, 0x8c, 0x52, 0x12, 0x5b, 0x62, 0x44, 0xb1, 0xa1 } },
+    { .name = "135", .b = 135, .exp = { 0x18, 0x74, 0x2e, 0x73, 0x57, 0x68, 0x2b, 0xfe, 0xdc, 0xb5, 0x6a, 0x79, 0x1b, 0xf5, 0x97, 0x80 } },
+    { .name = "136", .b = 136, .exp = { 0x1c, 0xb0, 0xa4, 0xaf, 0x26, 0x49, 0x8c, 0xe7, 0x90, 0xd6, 0x9f, 0xad, 0x96, 0x06, 0x65, 0x90 } },
+    { .name = "137", .b = 137, .exp = { 0x55, 0x93, 0xe8, 0xb1, 0xed, 0x28, 0x13, 0x2b, 0x15, 0x06, 0x6a, 0xce, 0x9e, 0x53, 0xe7, 0xe6 } },
+    { .name = "138", .b = 138, .exp = { 0x4a, 0x40, 0xc5, 0x5f, 0x57, 0x8f, 0xcd, 0xe0, 0x01, 0xac, 0xfb, 0xaa, 0x8f, 0x3c, 0x30, 0x78 } },
+    { .name = "139", .b = 139, .exp = { 0xd0, 0xd6, 0xff, 0xa9, 0x54, 0x75, 0xcd, 0x07, 0xe2, 0xd3, 0x9e, 0x04, 0x94, 0x46, 0xf5, 0xbc } },
+    { .name = "140", .b = 140, .exp = { 0xa2, 0xbe, 0x80, 0xb4, 0x7a, 0xf8, 0x95, 0xa3, 0xbf, 0x46, 0xf8, 0x6b, 0x81, 0xc6, 0xf3, 0x19 } },
+    { .name = "141", .b = 141, .exp = { 0x8d, 0x88, 0x5d, 0xd9, 0xc5, 0xb8, 0xbf, 0x88, 0x15, 0x2f, 0x75, 0x34, 0xd9, 0x49, 0x2a, 0x76 } },
+    { .name = "142", .b = 142, .exp = { 0xbc, 0x6b, 0xa1, 0xe1, 0x87, 0x65, 0x07, 0x77, 0x77, 0xd3, 0xed, 0xcf, 0x89, 0x7f, 0xa6, 0x83 } },
+    { .name = "143", .b = 143, .exp = { 0x5c, 0x1b, 0x26, 0xcf, 0x1f, 0xef, 0xfa, 0x51, 0x51, 0x74, 0xb3, 0x6e, 0x2c, 0x5c, 0x22, 0x37 } },
+    { .name = "144", .b = 144, .exp = { 0xe3, 0xb7, 0x70, 0x5b, 0x33, 0x4d, 0x61, 0xd8, 0x02, 0x2b, 0xf9, 0xb1, 0xa3, 0xaf, 0x70, 0xd1 } },
+    { .name = "145", .b = 145, .exp = { 0xff, 0x0d, 0x4a, 0xa8, 0x2e, 0x04, 0xfa, 0xfc, 0xf0, 0x71, 0x31, 0xdb, 0x1f, 0x96, 0x97, 0x63 } },
+    { .name = "146", .b = 146, .exp = { 0xf1, 0xf2, 0x24, 0xc7, 0x1a, 0x83, 0xa7, 0x16, 0xba, 0x74, 0x75, 0x31, 0x5b, 0xb1, 0x41, 0x1b } },
+    { .name = "147", .b = 147, .exp = { 0xb8, 0x17, 0xa9, 0x88, 0xb4, 0x9a, 0xe4, 0x4e, 0xff, 0xb8, 0xf9, 0x9e, 0xad, 0xf6, 0x22, 0x56 } },
+    { .name = "148", .b = 148, .exp = { 0xb4, 0x90, 0x7b, 0xec, 0xea, 0xfd, 0xc2, 0x41, 0xa7, 0x71, 0x52, 0xc0, 0x80, 0x3e, 0xbf, 0xab } },
+    { .name = "149", .b = 149, .exp = { 0x26, 0x2d, 0xd5, 0xc2, 0x3d, 0x81, 0x13, 0x66, 0x4a, 0xcf, 0x36, 0xc2, 0x3d, 0x9d, 0xfe, 0x97 } },
+    { .name = "150", .b = 150, .exp = { 0x7f, 0x9d, 0x6c, 0xb1, 0x9e, 0xf7, 0x71, 0x1a, 0x87, 0x88, 0x8d, 0x02, 0xb3, 0xd0, 0x6a, 0xce } },
+    { .name = "151", .b = 151, .exp = { 0xb2, 0x1e, 0xa4, 0x87, 0xb1, 0xc7, 0xb4, 0xf0, 0xce, 0x17, 0xfd, 0xef, 0xe8, 0xc1, 0x6e, 0xd4 } },
+    { .name = "152", .b = 152, .exp = { 0xa9, 0x66, 0x71, 0xcc, 0x30, 0xe1, 0x41, 0xb2, 0x29, 0xda, 0x5a, 0x07, 0xd8, 0xa8, 0xcb, 0x9e } },
+    { .name = "153", .b = 153, .exp = { 0x13, 0x2f, 0x3d, 0xf1, 0x60, 0x73, 0x51, 0xae, 0xfd, 0x12, 0x07, 0x82, 0xa2, 0x31, 0xac, 0x46 } },
+    { .name = "154", .b = 154, .exp = { 0x13, 0x95, 0xd7, 0x8d, 0x23, 0x49, 0x08, 0x8b, 0xc1, 0x14, 0x12, 0xf1, 0xef, 0x72, 0xc7, 0x31 } },
+    { .name = "155", .b = 155, .exp = { 0x33, 0xfd, 0x14, 0x4e, 0xda, 0x3c, 0xf1, 0x02, 0xcc, 0x0c, 0x43, 0x63, 0xbf, 0x77, 0x9d, 0x12 } },
+    { .name = "156", .b = 156, .exp = { 0x8c, 0xa6, 0xed, 0x86, 0x01, 0x66, 0xde, 0x17, 0xbf, 0x14, 0x58, 0x06, 0x8e, 0x0f, 0x40, 0xd1 } },
+    { .name = "157", .b = 157, .exp = { 0xf7, 0x54, 0xa9, 0x5b, 0xb3, 0x8a, 0x0e, 0xa9, 0xcb, 0x43, 0xf9, 0x8b, 0xc4, 0x02, 0x6c, 0x10 } },
+    { .name = "158", .b = 158, .exp = { 0xce, 0xa5, 0x21, 0xb1, 0x27, 0xaf, 0x9c, 0x84, 0x2b, 0xd1, 0x23, 0x3b, 0x17, 0x93, 0xbb, 0x18 } },
+    { .name = "159", .b = 159, .exp = { 0x2b, 0x76, 0x9a, 0x4c, 0x56, 0x5c, 0xd7, 0x99, 0xfd, 0x90, 0x78, 0x0d, 0x9b, 0x8b, 0x06, 0xe3 } },
+    { .name = "160", .b = 160, .exp = { 0xeb, 0x02, 0x31, 0x4d, 0xd9, 0x9e, 0x78, 0xc2, 0x06, 0x05, 0xea, 0xcb, 0x13, 0x2a, 0x93, 0x87 } },
+    { .name = "161", .b = 161, .exp = { 0x88, 0x21, 0x46, 0x4f, 0x1f, 0xfe, 0x01, 0x92, 0x1c, 0x81, 0x51, 0x90, 0xfd, 0x2c, 0x7d, 0x3d } },
+    { .name = "162", .b = 162, .exp = { 0xed, 0x7f, 0xcf, 0x2b, 0x5c, 0x3c, 0x2a, 0x31, 0x3d, 0x65, 0x2f, 0xa5, 0x15, 0xf2, 0xa2, 0x19 } },
+    { .name = "163", .b = 163, .exp = { 0xe4, 0x9b, 0x10, 0x58, 0xcb, 0xc1, 0x92, 0x95, 0x50, 0x22, 0xa1, 0x04, 0x12, 0x3f, 0x6f, 0xc0 } },
+    { .name = "164", .b = 164, .exp = { 0x2d, 0xcc, 0x10, 0x97, 0xe7, 0xa3, 0xd4, 0x7a, 0xb7, 0x86, 0x62, 0x8d, 0xbe, 0x7c, 0xe0, 0xb2 } },
+    { .name = "165", .b = 165, .exp = { 0x70, 0x12, 0x1e, 0x56, 0x3d, 0x3a, 0xaa, 0x2d, 0xf3, 0xa2, 0xf5, 0x4a, 0x4b, 0x24, 0x0a, 0xcb } },
+    { .name = "166", .b = 166, .exp = { 0xd4, 0x56, 0xde, 0x38, 0xf0, 0x31, 0x96, 0x88, 0xa3, 0x85, 0xc3, 0x30, 0x71, 0xb0, 0xbc, 0xf5 } },
+    { .name = "167", .b = 167, .exp = { 0x7e, 0x28, 0x2d, 0x6f, 0x11, 0x20, 0x26, 0x87, 0x88, 0x13, 0x8d, 0xbf, 0x96, 0x76, 0x97, 0xe3 } },
+    { .name = "168", .b = 168, .exp = { 0x68, 0x4f, 0xf3, 0xad, 0x48, 0xdc, 0x10, 0xcd, 0x56, 0xec, 0x82, 0xf7, 0xae, 0x93, 0x49, 0xf1 } },
+    { .name = "169", .b = 169, .exp = { 0x7c, 0x95, 0xf6, 0xc1, 0xa1, 0xc6, 0xe3, 0x2b, 0x46, 0x87, 0x58, 0x6e, 0x6f, 0x35, 0x71, 0x4d } },
+    { .name = "170", .b = 170, .exp = { 0x02, 0xde, 0x26, 0xe5, 0xce, 0x79, 0x3b, 0xa6, 0x7b, 0x45, 0x9b, 0xec, 0x77, 0x61, 0xf2, 0xf4 } },
+    { .name = "171", .b = 171, .exp = { 0x55, 0x25, 0xe1, 0xbb, 0xc8, 0x5f, 0x83, 0xe0, 0xe3, 0x63, 0x7e, 0x51, 0xd3, 0xba, 0x0f, 0x01 } },
+    { .name = "172", .b = 172, .exp = { 0x32, 0xfb, 0xe5, 0x43, 0x46, 0xbe, 0x94, 0xb4, 0x7a, 0xed, 0x1d, 0x2b, 0xf6, 0xeb, 0xec, 0x82 } },
+    { .name = "173", .b = 173, .exp = { 0x1d, 0xbc, 0x47, 0xd7, 0x65, 0x33, 0x7d, 0xd2, 0xe9, 0x4a, 0x24, 0x64, 0x99, 0x03, 0x6c, 0x1e } },
+    { .name = "174", .b = 174, .exp = { 0x8d, 0x32, 0x39, 0xbb, 0x47, 0x59, 0x14, 0x90, 0x4d, 0x52, 0xf3, 0x0d, 0x89, 0x90, 0x56, 0x7b } },
+    { .name = "175", .b = 175, .exp = { 0x5d, 0xa8, 0xf1, 0xe1, 0xf0, 0xe7, 0x73, 0x79, 0x87, 0x96, 0x3f, 0x78, 0xde, 0xe6, 0x90, 0xaa } },
+    { .name = "176", .b = 176, .exp = { 0xd3, 0x44, 0x5c, 0xf9, 0x18, 0xd5, 0xbe, 0x10, 0x35, 0x3c, 0xc3, 0x9b, 0xa4, 0xcb, 0xe1, 0xd9 } },
+    { .name = "177", .b = 177, .exp = { 0x74, 0x1e, 0xa0, 0x7f, 0xe1, 0x5e, 0x39, 0x63, 0xb7, 0xf7, 0x1e, 0x22, 0x0c, 0x80, 0x48, 0x7f } },
+    { .name = "178", .b = 178, .exp = { 0x9d, 0xd9, 0x2f, 0xfc, 0x4b, 0x14, 0x89, 0x1a, 0x4c, 0xeb, 0xa6, 0x63, 0xe2, 0xaa, 0x81, 0x10 } },
+    { .name = "179", .b = 179, .exp = { 0x57, 0x04, 0x46, 0x81, 0xd2, 0x60, 0x8b, 0x4b, 0x5c, 0x95, 0x58, 0x1b, 0xae, 0xb0, 0x2c, 0xa8 } },
+    { .name = "180", .b = 180, .exp = { 0x10, 0x8d, 0xbd, 0x53, 0xae, 0x67, 0xed, 0x6d, 0xfd, 0xe4, 0x6d, 0xed, 0xd9, 0xbf, 0x28, 0x46 } },
+    { .name = "181", .b = 181, .exp = { 0x05, 0x3d, 0x9e, 0x85, 0x9f, 0x6d, 0xbf, 0xe5, 0x78, 0x30, 0x0e, 0x06, 0xbf, 0xa2, 0x14, 0xf7 } },
+    { .name = "182", .b = 182, .exp = { 0x3f, 0x54, 0xbf, 0x67, 0x26, 0x22, 0x3a, 0x12, 0xdf, 0xf2, 0x91, 0x89, 0xa1, 0xf2, 0xf5, 0x64 } },
+    { .name = "183", .b = 183, .exp = { 0xa7, 0x30, 0x31, 0xe7, 0xaa, 0x6b, 0x84, 0x45, 0xb4, 0xd1, 0x40, 0x48, 0x56, 0x6d, 0x58, 0x2c } },
+    { .name = "184", .b = 184, .exp = { 0xa5, 0xff, 0x51, 0x50, 0xc7, 0xdd, 0xec, 0xda, 0x43, 0xea, 0x65, 0x90, 0x58, 0x18, 0xac, 0x44 } },
+    { .name = "185", .b = 185, .exp = { 0xbe, 0x0b, 0x3e, 0x45, 0xda, 0x8b, 0x99, 0x81, 0x48, 0xf0, 0x23, 0x95, 0xe6, 0xc5, 0x1f, 0x24 } },
+    { .name = "186", .b = 186, .exp = { 0x09, 0xe1, 0xb1, 0xc9, 0xf2, 0xb8, 0x2b, 0x51, 0x5b, 0x2c, 0x68, 0x90, 0x6d, 0xb7, 0xd8, 0x03 } },
+    { .name = "187", .b = 187, .exp = { 0x1e, 0x1f, 0x9d, 0x00, 0xff, 0xd3, 0xfe, 0x78, 0xa9, 0xf2, 0x41, 0x07, 0x66, 0xae, 0x50, 0x79 } },
+    { .name = "188", .b = 188, .exp = { 0xb8, 0x1b, 0x78, 0x08, 0x99, 0xc5, 0x2d, 0x40, 0xf8, 0x29, 0x1e, 0x21, 0x1e, 0x95, 0x9f, 0x06 } },
+    { .name = "189", .b = 189, .exp = { 0x2b, 0xdf, 0x7d, 0xba, 0x36, 0xf4, 0x41, 0x61, 0xa9, 0xf5, 0xcc, 0x51, 0x9f, 0x2a, 0xd4, 0x14 } },
+    { .name = "190", .b = 190, .exp = { 0x53, 0x19, 0xa2, 0x64, 0x68, 0x36, 0xee, 0x2c, 0x3c, 0xdf, 0x54, 0x3c, 0x2f, 0x6d, 0x72, 0x62 } },
+    { .name = "191", .b = 191, .exp = { 0x61, 0x9f, 0xd1, 0xa6, 0xe3, 0x5a, 0xb2, 0x16, 0x15, 0x78, 0xce, 0xd7, 0x85, 0x3b, 0x85, 0x49 } },
+    { .name = "192", .b = 192, .exp = { 0x32, 0x32, 0x53, 0x3c, 0x06, 0x0c, 0xb3, 0x4a, 0x34, 0x47, 0xd0, 0xdd, 0x9c, 0x0c, 0x39, 0xdc } },
+    { .name = "193", .b = 193, .exp = { 0xe4, 0xe5, 0xc4, 0x6d, 0xcc, 0x9c, 0x18, 0xba, 0x57, 0x97, 0xdb, 0xbc, 0xdc, 0x57, 0xaf, 0x80 } },
+    { .name = "194", .b = 194, .exp = { 0x0f, 0xe2, 0xe6, 0x11, 0xc0, 0x8f, 0x2e, 0x16, 0xf8, 0xd9, 0xa5, 0x04, 0x4d, 0x14, 0x7a, 0x3d } },
+    { .name = "195", .b = 195, .exp = { 0x04, 0x82, 0x55, 0x6f, 0xed, 0x2d, 0xbf, 0x30, 0x5f, 0x82, 0xed, 0xc6, 0x46, 0x48, 0xa3, 0xae } },
+    { .name = "196", .b = 196, .exp = { 0xb0, 0xf0, 0x40, 0x46, 0x57, 0xb9, 0x00, 0x58, 0xcd, 0x37, 0x88, 0xb8, 0x08, 0x21, 0xfe, 0x48 } },
+    { .name = "197", .b = 197, .exp = { 0x7b, 0x69, 0xe8, 0xda, 0xac, 0xf3, 0xe4, 0x5e, 0x31, 0x3c, 0x54, 0x97, 0xd5, 0xcb, 0x02, 0x92 } },
+    { .name = "198", .b = 198, .exp = { 0x2f, 0x75, 0x41, 0xe0, 0x07, 0x60, 0x20, 0x27, 0xdc, 0x18, 0xb6, 0x55, 0xd6, 0x45, 0xc4, 0x87 } },
+    { .name = "199", .b = 199, .exp = { 0x19, 0xd6, 0x4e, 0x6b, 0x4d, 0xb5, 0x0f, 0xfb, 0x1b, 0x81, 0x59, 0x14, 0xc5, 0x7a, 0x5b, 0x13 } },
+    { .name = "200", .b = 200, .exp = { 0x6b, 0x6f, 0x48, 0xca, 0x3a, 0x74, 0xbf, 0x75, 0x97, 0xbf, 0x93, 0x1a, 0x47, 0xa6, 0x6c, 0xa8 } },
+    { .name = "201", .b = 201, .exp = { 0xc4, 0xba, 0xa0, 0xdd, 0xd2, 0x95, 0x3d, 0xc6, 0x50, 0x7b, 0x3f, 0x4a, 0xa4, 0x0a, 0xb9, 0xee } },
+    { .name = "202", .b = 202, .exp = { 0x03, 0x54, 0x7c, 0xc5, 0xda, 0x9d, 0x5d, 0x8e, 0x95, 0xa0, 0x7d, 0xb4, 0x1a, 0xf7, 0x3d, 0x00 } },
+    { .name = "203", .b = 203, .exp = { 0x1b, 0xd8, 0xfe, 0x9f, 0x11, 0x32, 0x41, 0x32, 0x8b, 0xee, 0xa2, 0xc8, 0xb4, 0xcb, 0x06, 0x47 } },
+    { .name = "204", .b = 204, .exp = { 0x86, 0xa8, 0x39, 0xb7, 0xb9, 0x94, 0xc5, 0x7b, 0x46, 0xb6, 0x32, 0x63, 0x14, 0x47, 0x69, 0x83 } },
+    { .name = "205", .b = 205, .exp = { 0xf5, 0x43, 0x58, 0xd9, 0x53, 0x92, 0xf4, 0xee, 0x6a, 0xe5, 0xce, 0x63, 0x98, 0x2f, 0xfd, 0x9a } },
+    { .name = "206", .b = 206, .exp = { 0xa0, 0x9d, 0xb8, 0xc4, 0x83, 0xc1, 0xf4, 0xce, 0xf4, 0xb5, 0xb9, 0x31, 0xc5, 0x8b, 0x7f, 0x90 } },
+    { .name = "207", .b = 207, .exp = { 0x63, 0xf5, 0x32, 0x9c, 0x6b, 0x29, 0xfa, 0x2c, 0x8b, 0x23, 0xc5, 0xea, 0x91, 0x67, 0xf0, 0x6a } },
+    { .name = "208", .b = 208, .exp = { 0xc5, 0xb5, 0x7c, 0xe6, 0xf6, 0x94, 0x08, 0xad, 0x08, 0x23, 0x97, 0x56, 0xaf, 0x72, 0x6a, 0xa2 } },
+    { .name = "209", .b = 209, .exp = { 0x71, 0xec, 0xc8, 0x0d, 0x53, 0x82, 0x44, 0x71, 0xc7, 0x3e, 0x2d, 0x8d, 0xdf, 0xd1, 0x51, 0x89 } },
+    { .name = "210", .b = 210, .exp = { 0x46, 0x73, 0x14, 0xde, 0x01, 0x83, 0x98, 0x3f, 0x87, 0xd3, 0xd9, 0x1d, 0x03, 0x3f, 0xfb, 0xfb } },
+    { .name = "211", .b = 211, .exp = { 0x9f, 0x4e, 0x00, 0xdc, 0x2a, 0xba, 0x5e, 0x69, 0xd8, 0x5c, 0xcb, 0x06, 0x89, 0x4d, 0xee, 0xb4 } },
+    { .name = "212", .b = 212, .exp = { 0xd2, 0xdd, 0x14, 0xc2, 0xf5, 0x21, 0x57, 0xc1, 0xdd, 0x37, 0xce, 0x89, 0xc3, 0xd3, 0x5c, 0xdd } },
+    { .name = "213", .b = 213, .exp = { 0x7d, 0xfa, 0x20, 0x44, 0xa8, 0xa9, 0x56, 0x0f, 0xe3, 0x4d, 0xee, 0x88, 0x36, 0x7f, 0xd9, 0x19 } },
+    { .name = "214", .b = 214, .exp = { 0x53, 0xd1, 0x14, 0x47, 0x6c, 0x82, 0x04, 0xd5, 0xa2, 0x78, 0x5e, 0x67, 0xe4, 0xd8, 0x4d, 0x68 } },
+    { .name = "215", .b = 215, .exp = { 0x22, 0x92, 0x83, 0xce, 0x9f, 0x98, 0x1c, 0x60, 0x3b, 0xf1, 0xf4, 0xdd, 0xb6, 0x9d, 0xfe, 0xd3 } },
+    { .name = "216", .b = 216, .exp = { 0x81, 0xa6, 0xf5, 0x82, 0x4a, 0xd4, 0x67, 0x1a, 0xbd, 0x41, 0x9d, 0xd9, 0x7b, 0x50, 0x53, 0x4e } },
+    { .name = "217", .b = 217, .exp = { 0x7e, 0x8e, 0x60, 0xc3, 0x92, 0xb9, 0x97, 0x14, 0x53, 0xb7, 0x63, 0x82, 0x76, 0xdf, 0x82, 0xc4 } },
+    { .name = "218", .b = 218, .exp = { 0x7e, 0xbe, 0x47, 0x73, 0x7a, 0x98, 0xa8, 0x45, 0x4f, 0x93, 0x78, 0xaa, 0xbd, 0xa3, 0xb7, 0xf7 } },
+    { .name = "219", .b = 219, .exp = { 0x0f, 0x2b, 0xb9, 0xaf, 0xf8, 0xf5, 0xf4, 0xe5, 0xf3, 0x19, 0xe2, 0x33, 0x36, 0x85, 0x42, 0x5c } },
+    { .name = "220", .b = 220, .exp = { 0x74, 0x9c, 0xf4, 0x8c, 0xd5, 0x27, 0xd1, 0x6e, 0xbc, 0x61, 0xa1, 0xed, 0x87, 0x86, 0xf0, 0x95 } },
+    { .name = "221", .b = 221, .exp = { 0x5e, 0xe0, 0x82, 0x69, 0x04, 0x86, 0x5d, 0x0d, 0x35, 0x3b, 0x77, 0x4d, 0x77, 0xc4, 0x22, 0x18 } },
+    { .name = "222", .b = 222, .exp = { 0x4f, 0x36, 0x86, 0xe5, 0x12, 0xd5, 0xb8, 0x79, 0x70, 0x3b, 0x64, 0x2c, 0x4f, 0x34, 0x6c, 0xbe } },
+    { .name = "223", .b = 223, .exp = { 0xf3, 0xc7, 0x9a, 0x23, 0x91, 0xe6, 0xab, 0x38, 0xe4, 0xc4, 0x29, 0xa2, 0x60, 0xb1, 0x35, 0x27 } },
+    { .name = "224", .b = 224, .exp = { 0x0d, 0xaa, 0xb3, 0x88, 0xfe, 0x38, 0xab, 0x46, 0x4c, 0x62, 0x04, 0x55, 0xc0, 0x89, 0x22, 0x4d } },
+    { .name = "225", .b = 225, .exp = { 0xc0, 0xd5, 0xb0, 0x02, 0x45, 0x49, 0x25, 0x42, 0xd2, 0x24, 0x65, 0xef, 0x29, 0x47, 0x43, 0x61 } },
+    { .name = "226", .b = 226, .exp = { 0x4b, 0x8c, 0x41, 0x27, 0x09, 0xe4, 0xb7, 0x6a, 0x25, 0xb4, 0x4b, 0xbc, 0x3b, 0xb6, 0x71, 0x5e } },
+    { .name = "227", .b = 227, .exp = { 0x3d, 0x12, 0x80, 0x3e, 0x80, 0x2d, 0xa0, 0x40, 0x3a, 0x95, 0xf4, 0x7c, 0xc7, 0x4d, 0xe1, 0x16 } },
+    { .name = "228", .b = 228, .exp = { 0xcd, 0xff, 0xa8, 0xa5, 0xb8, 0x61, 0x87, 0xd9, 0xf2, 0x94, 0xc3, 0x70, 0x6a, 0x43, 0xac, 0xf9 } },
+    { .name = "229", .b = 229, .exp = { 0x60, 0x64, 0x43, 0x7f, 0x64, 0xa6, 0x13, 0xc9, 0xfc, 0xd1, 0x92, 0xb3, 0xbc, 0x9d, 0x77, 0x75 } },
+    { .name = "230", .b = 230, .exp = { 0xd3, 0xd2, 0x79, 0x2a, 0x00, 0x59, 0x6d, 0x01, 0x01, 0x07, 0xf6, 0x78, 0x06, 0xf9, 0x4e, 0x93 } },
+    { .name = "231", .b = 231, .exp = { 0x3f, 0xe0, 0x4e, 0xf1, 0x75, 0x80, 0x21, 0x1d, 0x59, 0x14, 0x39, 0x4f, 0xae, 0x60, 0xf7, 0x69 } },
+    { .name = "232", .b = 232, .exp = { 0xce, 0xa0, 0x6c, 0xb8, 0xc7, 0x27, 0x88, 0xce, 0xbd, 0x71, 0xef, 0xa8, 0xff, 0x40, 0x9b, 0xf4 } },
+    { .name = "233", .b = 233, .exp = { 0xb0, 0x77, 0x70, 0x9a, 0x5e, 0xf0, 0x74, 0xee, 0x98, 0x02, 0xe6, 0x8f, 0xab, 0xc9, 0x87, 0x14 } },
+    { .name = "234", .b = 234, .exp = { 0xe4, 0xa3, 0xd6, 0x1d, 0x62, 0x88, 0x7c, 0x5a, 0xab, 0x3e, 0x16, 0xef, 0x10, 0x88, 0x38, 0xe4 } },
+    { .name = "235", .b = 235, .exp = { 0x3f, 0x2b, 0x2d, 0xa9, 0x98, 0xd3, 0x39, 0x20, 0xc4, 0x69, 0x81, 0x52, 0x84, 0xdc, 0xaa, 0x73 } },
+    { .name = "236", .b = 236, .exp = { 0xdb, 0x3a, 0xd9, 0x4f, 0x4f, 0x93, 0xfd, 0xbc, 0x97, 0x65, 0x1f, 0x72, 0x66, 0x08, 0x26, 0x15 } },
+    { .name = "237", .b = 237, .exp = { 0x31, 0xeb, 0x5f, 0xc0, 0x1b, 0xb6, 0xb3, 0xb0, 0x05, 0x9a, 0x01, 0x6f, 0x9e, 0x26, 0x83, 0xaa } },
+    { .name = "238", .b = 238, .exp = { 0xff, 0xb3, 0x4b, 0x08, 0x07, 0x5a, 0x0a, 0xce, 0x0f, 0x53, 0x79, 0x25, 0xaa, 0x28, 0x4a, 0xe8 } },
+    { .name = "239", .b = 239, .exp = { 0x92, 0x71, 0xa5, 0x58, 0x07, 0x83, 0xf9, 0x78, 0xd1, 0xf3, 0xc2, 0x31, 0x05, 0xe3, 0x5e, 0x54 } },
+    { .name = "240", .b = 240, .exp = { 0x36, 0x54, 0x52, 0xda, 0x7c, 0x3c, 0x26, 0x90, 0x36, 0xcc, 0x30, 0x1c, 0x34, 0xfe, 0x49, 0x26 } },
+    { .name = "241", .b = 241, .exp = { 0x33, 0x97, 0xc0, 0xcf, 0x1e, 0x18, 0x6e, 0x98, 0x88, 0xec, 0xa2, 0xc8, 0xf3, 0x9f, 0x63, 0x92 } },
+    { .name = "242", .b = 242, .exp = { 0x5d, 0xb4, 0x54, 0xec, 0x1a, 0x5e, 0xab, 0xc7, 0x4d, 0xf4, 0x02, 0x11, 0xe3, 0xa5, 0xa3, 0xb9 } },
+    { .name = "243", .b = 243, .exp = { 0xc1, 0x8f, 0x8b, 0x5f, 0x30, 0x95, 0xd4, 0xa4, 0xb4, 0xd6, 0x4d, 0x09, 0x9a, 0x5a, 0xac, 0x0f } },
+    { .name = "244", .b = 244, .exp = { 0xa1, 0x3f, 0x27, 0xc6, 0x18, 0x49, 0x23, 0xa1, 0x50, 0xb0, 0x5d, 0x25, 0xd5, 0x01, 0x9b, 0xcd } },
+    { .name = "245", .b = 245, .exp = { 0x0a, 0x5c, 0x43, 0x3d, 0xfe, 0x7e, 0x78, 0xbb, 0x3f, 0xb4, 0xd7, 0x9e, 0x6a, 0x7c, 0x8e, 0x4d } },
+    { .name = "246", .b = 246, .exp = { 0xdd, 0xe4, 0xfe, 0x64, 0xf1, 0x6a, 0x8c, 0xdc, 0x58, 0x74, 0x4e, 0x51, 0x16, 0xee, 0x60, 0xb3 } },
+    { .name = "247", .b = 247, .exp = { 0x09, 0x1b, 0xde, 0xac, 0x4c, 0x24, 0x98, 0x36, 0x60, 0x81, 0xb2, 0x9c, 0xe8, 0xf0, 0x04, 0x4a } },
+    { .name = "248", .b = 248, .exp = { 0x94, 0x7f, 0x28, 0x74, 0x92, 0xdb, 0x43, 0x0d, 0x49, 0x30, 0x1a, 0x24, 0x7e, 0x34, 0x53, 0x6f } },
+    { .name = "249", .b = 249, .exp = { 0xbd, 0xd5, 0xdd, 0x49, 0x36, 0x13, 0xbd, 0xd6, 0xb8, 0xfc, 0xd9, 0x04, 0x9f, 0xc9, 0x42, 0x3f } },
+    { .name = "250", .b = 250, .exp = { 0x10, 0xd1, 0x7b, 0x97, 0xa5, 0x98, 0x15, 0x89, 0x50, 0x38, 0xa0, 0xbf, 0xdb, 0x0e, 0x3b, 0x54 } },
+    { .name = "251", .b = 251, .exp = { 0xe9, 0x70, 0x29, 0x8c, 0x01, 0xc6, 0x6d, 0xc5, 0x40, 0x0b, 0xe8, 0xd2, 0xf7, 0x51, 0xa1, 0x86 } },
+    { .name = "252", .b = 252, .exp = { 0x3a, 0xc8, 0xbf, 0x92, 0x90, 0x92, 0x0b, 0xb6, 0x90, 0x59, 0x13, 0x62, 0x6a, 0x20, 0xee, 0xbc } },
+    { .name = "253", .b = 253, .exp = { 0xc7, 0x88, 0xde, 0xde, 0xbc, 0x8c, 0x84, 0xad, 0x1c, 0xbc, 0x69, 0x00, 0xaf, 0xa5, 0x0b, 0xd2 } },
+    { .name = "254", .b = 254, .exp = { 0x8b, 0x3a, 0xa9, 0x5d, 0x4a, 0x97, 0xfb, 0x20, 0x78, 0x0a, 0xd2, 0x7c, 0x4c, 0xcb, 0xd9, 0x79 } },
+    { .name = "255", .b = 255, .exp = { 0x73, 0x3d, 0x45, 0x87, 0xa0, 0x39, 0xf5, 0x6c, 0x6c, 0xa0, 0x29, 0x0c, 0x94, 0x60, 0x87, 0xfd } },
+  };
+
+  const uint8_t SEED[32] = { 0 }; // all zero prf seed
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    uint8_t got[16] = { 0 };
+    prf(SEED, TESTS[i].b, got, sizeof(got));
+
+    // check for expected value
+    if (memcmp(&got, &TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+typedef struct {
+  uint16_t val; // coefficient
+  size_t sum;   // expected count
+} dist_t;
+
+// Accumulate polynomial coefficient distribution in `sums` and
+// `sums_len`.
+static void dist_add_poly(dist_t * const sums, size_t * const sums_len, const poly_t * const p) {
+  for (size_t i = 0; i < 256; i++) {
+    const uint16_t val = p->cs[i];
+    bool found = false;
+    for (size_t j = 0; !found && j < *sums_len; j++) {
+      if (sums[j].val == val) {
+        sums[j].sum++;
+        found = true;
+      }
+    }
+
+    if (!found) {
+      sums[*sums_len].val = val;
+      sums[*sums_len].sum = 1;
+      *sums_len = *sums_len + 1;
+    }
+  }
+}
+
+// Check for expected polynomial coefficient distribution.
+static void dist_check(const char * const name, const size_t num_polys, const dist_t * const got, const size_t got_len, const dist_t * const exp, const size_t exp_len) {
+  for (size_t i = 0; i < exp_len; i++) {
+    for (size_t j = 0; j < got_len; j++) {
+      if (exp[i].val == got[j].val) {
+        // get expected sum and delta (abs diff) between sums
+        const size_t exp_sum = num_polys * exp[i].sum,
+                     got_sum = got[j].sum,
+                     delta = (exp_sum > got_sum) ? (exp_sum - got_sum) : (got_sum - exp_sum);
+
+        // check for >1% delta from expected sum
+        if (delta > (exp_sum / 100)) {
+          fprintf(stderr, "%s failed: coef = %d, got = %zu, exp = %zu\n", name, got[j].val, got_sum, exp_sum);
+        }
+      }
+    }
+  }
+}
+
+static void test_poly_sample_cbd3(void) {
+  static const struct {
+    const uint8_t byte; // test byte
+    const poly_t exp; // expected polynomial
+  } TESTS[] = {{
+    .byte = 0,
+    .exp = {
+      .cs = {
+        // expected coefficients, seed = { 0 }, byte = 0
+        0, 0, 2, 0, 1, 0, 0, 1, 0, 3328, 3326, 1, 3328, 3328, 3327, 3328, 0, 3328, 1, 0, 2, 3328, 1, 1, 1, 3328, 3328, 1, 0, 3327, 0, 2, 2, 2, 0, 3328, 1, 3328, 0, 0, 3328, 3327, 2, 3327, 1, 1, 2, 2, 3328, 3328, 1, 0, 0, 3327, 1, 0, 1, 3327, 1, 0, 3328, 0, 3327, 3328, 2, 1, 1, 0, 0, 0, 3328, 2, 0, 0, 3328, 3328, 0, 1, 0, 0, 2, 3328, 0, 1, 1, 3328, 1, 2, 0, 0, 1, 0, 3328, 0, 3328, 0, 2, 3328, 0, 3327, 1, 3328, 3328, 1, 1, 3328, 1, 0, 1, 0, 0, 3328, 3327, 3328, 3328, 2, 0, 1, 0, 0, 3327, 0, 0, 0, 2, 3328, 0, 3328, 0, 0, 1, 0, 1, 0, 3328, 1, 0, 1, 1, 3328, 3328, 2, 1, 0, 2, 0, 1, 3327, 3326, 3327, 0, 1, 1, 3328, 0, 0, 0, 0, 3327, 1, 0, 0, 0, 2, 1, 0, 3326, 1, 3, 2, 1, 0, 3328, 3328, 0, 0, 1, 2, 0, 2, 3328, 2, 0, 2, 3328, 0, 0, 1, 3328, 3328, 0, 1, 1, 0, 3, 0, 3327, 3328, 3327, 3328, 2, 1, 0, 3328, 3328, 0, 3327, 3327, 2, 2, 2, 0, 0, 3328, 3, 2, 3327, 3328, 1, 3327, 2, 0, 1, 3328, 3328, 3328, 3327, 1, 3328, 3328, 0, 1, 3327, 2, 0, 1, 1, 3327, 3327, 0, 1, 0, 1, 0, 2, 0, 3328, 2, 0, 3328, 3328, 1, 3326, 1, 1, 1
+      },
+    },
+  }, {
+    .byte = 1,
+    .exp = {
+      .cs = {
+        // expected coefficients, seed = { 0 }, byte = 1
+        1, 2, 1, 2, 1, 0, 3328, 2, 3328, 3327, 2, 1, 1, 3328, 3327, 3328, 0, 1, 3328, 2, 2, 0, 1, 0, 3327, 0, 1, 0, 1, 3328, 3327, 3327, 1, 1, 3328, 0, 0, 3327, 0, 3327, 3328, 2, 3328, 3328, 2, 3328, 0, 3328, 0, 3328, 0, 3327, 1, 2, 3328, 3327, 3326, 2, 2, 3328, 3327, 1, 3328, 0, 2, 2, 2, 1, 3328, 0, 2, 3328, 0, 0, 0, 0, 2, 3327, 2, 1, 3327, 3328, 0, 3328, 3327, 1, 1, 2, 0, 3326, 1, 0, 3327, 3328, 0, 3328, 2, 0, 0, 3328, 3328, 3328, 1, 3328, 2, 2, 3327, 0, 1, 3327, 3327, 0, 0, 2, 1, 3328, 1, 0, 3328, 0, 3328, 3328, 0, 3328, 1, 0, 0, 3328, 3328, 3328, 0, 2, 0, 1, 0, 0, 1, 0, 2, 3328, 3328, 0, 2, 1, 3327, 3328, 1, 3328, 2, 0, 3327, 3327, 0, 3326, 1, 3328, 0, 0, 3327, 0, 0, 2, 3328, 0, 3328, 1, 0, 3328, 0, 3328, 2, 1, 0, 3328, 2, 1, 0, 1, 0, 3327, 0, 3, 3327, 3328, 0, 3327, 0, 3328, 0, 0, 0, 2, 0, 0, 0, 1, 3328, 1, 0, 1, 0, 3328, 0, 0, 1, 0, 3327, 0, 0, 3327, 3, 2, 0, 3328, 2, 3328, 0, 1, 3326, 0, 0, 3328, 2, 3328, 0, 3328, 1, 3328, 3328, 1, 0, 0, 0, 3328, 1, 1, 0, 2, 0, 3328, 3328, 1, 3328, 0, 0, 3328, 3328, 1, 0, 0, 1, 2, 0, 0, 3327, 3328
+      },
+    },
+  }};
+
+  const uint8_t SEED[32] = { 0 }; // all zero prf seed
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // sample coefficients
+    poly_t got = { 0 };
+    poly_sample_cbd3(&got, SEED, TESTS[i].byte);
+
+    // check for expected value
+    if (memcmp(&got, &TESTS[i].exp, sizeof(poly_t))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%d", TESTS[i].byte);
+      fail_poly_test(__func__, name, &got, &(TESTS[i].exp));
+    }
+  }
+
+  const size_t NUM_POLYS = 10000; // number of samples
+
+  // calculate coefficient distribution for 10k polynomials
+  dist_t sums[32] = { 0 };
+  size_t sums_len = 0;
+  for (size_t i = 0; i < NUM_POLYS; i++) {
+    // init seed (first 4 bytes of 32-byte seed value used for PRF are
+    // treated as an u32)
+    union { uint8_t u8[32]; uint32_t u32[8]; } dist_seed =  { .u8 = { 0 } };
+    dist_seed.u32[0] = i;
+
+    // sample coefficients
+    poly_t got = { 0 };
+    poly_sample_cbd3(&got, dist_seed.u8, 0);
+
+    // accumulate polynomial coefficient distribution
+    dist_add_poly(sums, &sums_len, &got);
+  }
+
+  // expected coefficient distribution for one polynomial
+  const dist_t EXP_DIST[] = {
+    { 3326, 4 },  // -3, 1/64*256 = 4
+    { 3327, 24 }, // -2, 6/64*256 = 24
+    { 3328, 60 }, // -1, 15/64*256 = 60
+    { 0, 80 },    //  0, 20/64*256 = 80
+    { 1, 60 },    // +1, 15/64*256 = 60
+    { 2, 24 },    // +2, 6/64*256 = 24
+    { 3, 4 },     // +3, 1/64*256 = 4
+  };
+
+  // check for expected coefficient distribution
+  dist_check("test_poly_sample_cbd3()", NUM_POLYS, sums, sums_len, EXP_DIST, sizeof(EXP_DIST) / sizeof(EXP_DIST[0]));
+}
+
+static void test_poly_sample_cbd2(void) {
+  static const struct {
+    const uint8_t byte; // test byte
+    const poly_t exp; // expected polynomial
+  } TESTS[] = {{
+    .byte = 0,
+    .exp = {
+      .cs = {
+        // expected coefficients, eta = 2, seed = { 0 }, byte = 0
+        0, 3327, 0, 2, 3327, 3327, 1, 3328, 1, 3328, 0, 2, 0, 0, 1, 3328, 1, 0, 1, 2, 3328, 0, 1, 3327, 3328, 0, 3327, 1, 3328, 1, 0, 0, 3328, 0, 0, 0, 1, 0, 3328, 3327, 0, 2, 0, 1, 3328, 1, 0, 1, 0, 3327, 0, 0, 0, 3328, 0, 0, 3327, 3328, 0, 3328, 3327, 1, 0, 0, 3328, 3328, 0, 0, 0, 0, 3327, 0, 0, 0, 3327, 3328, 3327, 0, 0, 2, 0, 1, 0, 0, 1, 1, 3328, 1, 0, 0, 0, 0, 3328, 3328, 1, 3328, 0, 3327, 3328, 1, 0, 2, 2, 1, 3328, 3328, 0, 0, 0, 1, 3328, 0, 0, 0, 1, 3328, 3328, 0, 2, 0, 0, 3328, 0, 0, 1, 0, 1, 3328, 0, 0, 3328, 0, 0, 1, 3328, 2, 0, 1, 0, 1, 2, 0, 0, 3328, 0, 3328, 0, 1, 0, 3328, 0, 1, 3328, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 3328, 1, 1, 3328, 3328, 0, 0, 3327, 0, 1, 0, 3328, 0, 2, 1, 1, 3327, 1, 1, 3328, 0, 1, 0, 3328, 3327, 0, 0, 3328, 0, 1, 1, 3328, 3328, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 3328, 3328, 3327, 3328, 2, 0, 1, 2, 1, 0, 3328, 0, 0, 3328, 3328, 1, 3328, 3328, 3328, 3328, 3328, 3328, 0, 3328, 0, 3328, 3328, 3328, 3327, 0, 0, 1, 2, 0, 0, 1, 0, 1, 3328, 3328, 1, 3328, 1, 0, 1, 3327, 2, 0
+      },
+    },
+  }, {
+    .byte = 1,
+    .exp = {
+      .cs = {
+        // expected coefficients, eta = 2, seed = { 0 }, byte = 1
+        2, 3328, 0, 0, 3328, 2, 0, 0, 3328, 3327, 3328, 0, 3328, 0, 3327, 0, 3327, 3328, 0, 0, 0, 3327, 1, 0, 1, 0, 0, 0, 3328, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 3328, 3328, 0, 1, 0, 2, 0, 0, 3328, 3328, 1, 1, 1, 3328, 0, 3328, 2, 2, 0, 1, 1, 1, 0, 0, 0, 1, 3328, 3328, 3327, 0, 1, 3328, 1, 3328, 0, 0, 0, 0, 0, 1, 1, 1, 3328, 3328, 0, 0, 1, 1, 3328, 3327, 1, 2, 0, 1, 0, 0, 3328, 1, 1, 3328, 3328, 1, 1, 3328, 1, 1, 1, 0, 3327, 0, 3328, 3328, 0, 0, 0, 0, 0, 3328, 2, 3328, 0, 0, 0, 1, 0, 0, 0, 3328, 3328, 3327, 0, 0, 0, 3328, 1, 0, 0, 0, 0, 3328, 1, 1, 1, 2, 3328, 3328, 0, 1, 0, 3328, 2, 1, 0, 0, 3327, 1, 0, 1, 0, 1, 3328, 0, 1, 0, 0, 0, 0, 0, 3328, 1, 1, 1, 3327, 0, 1, 2, 0, 0, 3328, 1, 2, 3328, 3328, 0, 0, 1, 2, 0, 3327, 0, 1, 3328, 0, 1, 2, 0, 0, 1, 0, 0, 1, 0, 3328, 0, 1, 0, 0, 3328, 3327, 0, 0, 3328, 0, 3327, 1, 0, 2, 1, 0, 0, 3327, 1, 0, 3328, 3328, 1, 0, 0, 0, 3328, 0, 0, 0, 0, 3328, 3328, 3327, 1, 1, 3328, 0, 1, 3328, 1, 1, 0, 3328, 3328, 1, 0, 0, 3328, 0, 0, 0
+      },
+    },
+  }};
+
+  const uint8_t SEED[32] = { 0 }; // all zero prf seed
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // sample coefficients
+    poly_t got = { 0 };
+    poly_sample_cbd2(&got, SEED, TESTS[i].byte);
+
+    // check for expected value
+    if (memcmp(&got, &TESTS[i].exp, sizeof(poly_t))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%d", TESTS[i].byte);
+      fail_poly_test(__func__, name, &got, &(TESTS[i].exp));
+    }
+  }
+
+  const size_t NUM_POLYS = 10000; // number of samples
+
+  // calculate coefficient distribution for 10k polynomials
+  dist_t sums[32] = { 0 };
+  size_t sums_len = 0;
+  for (size_t i = 0; i < NUM_POLYS; i++) {
+    // init seed (first 4 bytes of 32-byte seed value used for PRF are
+    // treated as an u32)
+    union { uint8_t u8[32]; uint32_t u32[8]; } dist_seed =  { .u8 = { 0 } };
+    dist_seed.u32[0] = i;
+
+    // sample coefficients
+    poly_t got = { 0 };
+    poly_sample_cbd2(&got, dist_seed.u8, 0);
+
+    // accumulate polynomial coefficient distribution
+    dist_add_poly(sums, &sums_len, &got);
+  }
+
+  // expected coefficient distribution for one polynomial
+  const dist_t EXP_DIST[] = {
+    { 3327, 16 }, // -2, 1/16*256 = 16
+    { 3328, 64 }, // -1, 4/16*256 = 64
+    { 0, 96 },    //  0, 6/16*256 = 96
+    { 1, 64 },    // +1, 4/16*256 = 64
+    { 2, 16 },    // +2, 1/16*256 = 16
+  };
+
+  // check for expected coefficient distribution
+  dist_check("test_poly_sample_cbd2()", NUM_POLYS, sums, sums_len, EXP_DIST, sizeof(EXP_DIST) / sizeof(EXP_DIST[0]));
+}
+
+// Test cases for poly_encode() and poly_decode(), including
+// coefficients in the range [3329, 4095] (e.g., out of bounds)
+static const struct {
+  const char *name; // test name
+  const poly_t val; // test polynomial for poly_encode()
+  const poly_t exp; // expected polynomial from poly_decode()
+} POLY_ENCODE_TESTS[] = {{
+  .name = "0-255",
+  .val = {
+    .cs = {
+      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
+    },
+  },
+  .exp = {
+    .cs = {
+      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
+    },
+  },
+}, {
+  .name = "256-511",
+  .val = {
+    .cs = {
+      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
+    },
+  },
+  .exp = {
+    .cs = {
+      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
+    },
+  },
+}, {
+  .name = "512-767",
+  .val = {
+    .cs = {
+      512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
+    },
+  },
+  .exp = {
+    .cs = {
+      512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
+    },
+  },
+}, {
+  .name = "3000-3255",
+  .val = {
+    .cs = {
+      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,
+    },
+  },
+  .exp = {
+    .cs = {
+      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,
+    },
+  },
+}, {
+  .name = "3073-3328",
+  .val = {
+    .cs = {
+      3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328,
+    },
+  },
+  .exp = {
+    .cs = {
+      3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328,
+    },
+  },
+}, {
+  .name = "3229-3484 (test modulus)",
+  .val = {
+    .cs = {
+      3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584
+    },
+  },
+  .exp = {
+    .cs = {
+      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
+    },
+  },
+}};
+
+// test poly_encode_scalar() and poly_decode_scalar()
+static void test_poly_encode_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_TESTS)/sizeof(POLY_ENCODE_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[384] = { 0 };
+    poly_encode_scalar(buf, &(POLY_ENCODE_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_scalar(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_TESTS[i].name, &got, &(POLY_ENCODE_TESTS[i].exp));
+    }
+  }
+}
+
+// test poly_encode_avx512() and poly_decode_avx512()
+static void test_poly_encode_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_TESTS)/sizeof(POLY_ENCODE_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[384] = { 0 };
+    poly_encode_avx512(buf, &(POLY_ENCODE_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_avx512(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_TESTS[i].name, &got, &(POLY_ENCODE_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+// test poly_encode_neon() and poly_decode_neon()
+static void test_poly_encode_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_TESTS)/sizeof(POLY_ENCODE_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[384] = { 0 };
+    poly_encode_neon(buf, &(POLY_ENCODE_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_neon(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_TESTS[i].name, &got, &(POLY_ENCODE_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val; // test polynomial for poly_encode()
+  const poly_t exp; // expected polynomial from poly_decode()
+} POLY_ENCODE_11BIT_TESTS[] = {{
+  // poly_encode_11bits() tests (0-3315, step=13)
+  .name = "0-3315 (inc by 13)",
+  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
+  .exp = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2716, 2729, 2742, 2755, 2768, 2781, 2794, 2807, 2820, 2833, 2846, 2859, 2872, 2885, 2898, 2911, 2924, 2937, 2950, 2963, 2976, 2989, 3002, 3015, 3028, 3041, 3054, 3067, 3080, 3093, 3106, 3119, 3132, 3145, 3158, 3171, 3184, 3197, 3210, 3223, 3236, 3249, 3262, 3275, 3288, 3301, 3314 } },
+}};
+
+static void test_poly_encode_11bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_11BIT_TESTS)/sizeof(POLY_ENCODE_11BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[352] = { 0 };
+    poly_encode_11bit_scalar(buf, &(POLY_ENCODE_11BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_11bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_11BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_11BIT_TESTS[i].name, &got, &(POLY_ENCODE_11BIT_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_encode_11bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_11BIT_TESTS)/sizeof(POLY_ENCODE_11BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[352] = { 0 };
+    poly_encode_11bit_avx512(buf, &(POLY_ENCODE_11BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_11bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_11BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_11BIT_TESTS[i].name, &got, &(POLY_ENCODE_11BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_encode_11bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_11BIT_TESTS)/sizeof(POLY_ENCODE_11BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[352] = { 0 };
+    poly_encode_11bit_neon(buf, &(POLY_ENCODE_11BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_11bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_11BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_11BIT_TESTS[i].name, &got, &(POLY_ENCODE_11BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val; // test polynomial for poly_encode()
+  const poly_t exp; // expected polynomial from poly_decode()
+} POLY_ENCODE_10BIT_TESTS[] = {{
+  // poly_encode_10bits() tests (0-3315, step=13)
+  .name = "0-3315 (inc by 13)",
+  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
+  .exp = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
+}, {
+  // poly_encode_10bits() tests (0-3315, step=13)
+  .name = "1-3316 (inc by 13)",
+  .val = { .cs = { 1, 14, 27, 40, 53, 66, 79, 92, 105, 118, 131, 144, 157, 170, 183, 196, 209, 222, 235, 248, 261, 274, 287, 300, 313, 326, 339, 352, 365, 378, 391, 404, 417, 430, 443, 456, 469, 482, 495, 508, 521, 534, 547, 560, 573, 586, 599, 612, 625, 638, 651, 664, 677, 690, 703, 716, 729, 742, 755, 768, 781, 794, 807, 820, 833, 846, 859, 872, 885, 898, 911, 924, 937, 950, 963, 976, 989, 1002, 1015, 1028, 1041, 1054, 1067, 1080, 1093, 1106, 1119, 1132, 1145, 1158, 1171, 1184, 1197, 1210, 1223, 1236, 1249, 1262, 1275, 1288, 1301, 1314, 1327, 1340, 1353, 1366, 1379, 1392, 1405, 1418, 1431, 1444, 1457, 1470, 1483, 1496, 1509, 1522, 1535, 1548, 1561, 1574, 1587, 1600, 1613, 1626, 1639, 1652, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
+  .exp = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
+}, {
+  // diffs: 91 (got 1183 exp 1187), 92 (got 1196 exp 1200), 93 (got 1209 exp 1213), 94 (got 1222 exp 1226), 95 (got 1235 exp 1239)
+
+  .name = "2-3317 (inc by 13)",
+  .val = { .cs = { 2, 15, 28, 41, 54, 67, 80, 93, 106, 119, 132, 145, 158, 171, 184, 197, 210, 223, 236, 249, 262, 275, 288, 301, 314, 327, 340, 353, 366, 379, 392, 405, 418, 431, 444, 457, 470, 483, 496, 509, 522, 535, 548, 561, 574, 587, 600, 613, 626, 639, 652, 665, 678, 691, 704, 717, 730, 743, 756, 769, 782, 795, 808, 821, 834, 847, 860, 873, 886, 899, 912, 925, 938, 951, 964, 977, 990, 1003, 1016, 1029, 1042, 1055, 1068, 1081, 1094, 1107, 1120, 1133, 1146, 1159, 1172, 1185, 1198, 1211, 1224, 1237, 1250, 1263, 1276, 1289, 1302, 1315, 1328, 1341, 1354, 1367, 1380, 1393, 1406, 1419, 1432, 1445, 1458, 1471, 1484, 1497, 1510, 1523, 1536, 1549, 1562, 1575, 1588, 1601, 1614, 1627, 1640, 1653, 1666, 1679, 1692, 1705, 1718, 1731, 1744, 1757, 1770, 1783, 1796, 1809, 1822, 1835, 1848, 1861, 1874, 1887, 1900, 1913, 1926, 1939, 1952, 1965, 1978, 1991, 2004, 2017, 2030, 2043, 2056, 2069, 2082, 2095, 2108, 2121, 2134, 2147, 2160, 2173, 2186, 2199, 2212, 2225, 2238, 2251, 2264, 2277, 2290, 2303, 2316, 2329, 2342, 2355, 2368, 2381, 2394, 2407, 2420, 2433, 2446, 2459, 2472, 2485, 2498, 2511, 2524, 2537, 2550, 2563, 2576, 2589, 2602, 2615, 2628, 2641, 2654, 2667, 2680, 2693, 2706, 2719, 2732, 2745, 2758, 2771, 2784, 2797, 2810, 2823, 2836, 2849, 2862, 2875, 2888, 2901, 2914, 2927, 2940, 2953, 2966, 2979, 2992, 3005, 3018, 3031, 3044, 3057, 3070, 3083, 3096, 3109, 3122, 3135, 3148, 3161, 3174, 3187, 3200, 3213, 3226, 3239, 3252, 3265, 3278, 3291, 3304, 3317 } },
+  .exp = { .cs = { 3, 16, 29, 42, 55, 68, 81, 94, 107, 120, 133, 146, 159, 172, 185, 198, 211, 224, 237, 250, 263, 276, 289, 302, 315, 328, 341, 354, 367, 380, 393, 406, 419, 432, 445, 458, 471, 484, 497, 510, 523, 536, 549, 562, 575, 588, 601, 614, 627, 640, 653, 666, 679, 692, 705, 718, 731, 744, 757, 770, 783, 796, 809, 822, 836, 849, 862, 875, 888, 901, 914, 927, 940, 953, 966, 979, 992, 1005, 1018, 1031, 1044, 1057, 1070, 1083, 1096, 1109, 1122, 1135, 1148, 1161, 1174, 1187, 1200, 1213, 1226, 1239, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
+}, {
+  .name = "avx512 failures",
+  .val = { .cs = { 1185, 1198, 1211, 1224, 1237, 0 } },
+  .exp = { .cs = { 1187, 1200, 1213, 1226, 1239, 0 } },
+}};
+
+static void test_poly_encode_10bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_10BIT_TESTS)/sizeof(POLY_ENCODE_10BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_10bit_scalar(buf, &(POLY_ENCODE_10BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_10bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_10BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_10BIT_TESTS[i].name, &got, &(POLY_ENCODE_10BIT_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_encode_10bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_10BIT_TESTS)/sizeof(POLY_ENCODE_10BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_10bit_avx512(buf, &(POLY_ENCODE_10BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_10bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_10BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_10BIT_TESTS[i].name, &got, &(POLY_ENCODE_10BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_encode_10bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_10BIT_TESTS)/sizeof(POLY_ENCODE_10BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_10bit_neon(buf, &(POLY_ENCODE_10BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_10bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_10BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_10BIT_TESTS[i].name, &got, &(POLY_ENCODE_10BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val; // test polynomial for poly_encode_5bit()
+  const poly_t exp; // expected polynomial from poly_decode_5bit()
+} POLY_ENCODE_5BIT_TESTS[] = {{
+  .name = "0-3315 (inc by 13)",
+  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
+  .exp = { .cs = { 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 104, 104, 208, 208, 208, 208, 208, 208, 208, 208, 312, 312, 312, 312, 312, 312, 312, 312, 416, 416, 416, 416, 416, 416, 416, 416, 520, 520, 520, 520, 520, 520, 520, 520, 624, 624, 624, 624, 624, 624, 624, 624, 728, 728, 728, 728, 728, 728, 728, 728, 832, 832, 832, 832, 832, 832, 832, 832, 936, 936, 936, 936, 936, 936, 936, 936, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2393, 2393, 2393, 2393, 2393, 2393, 2393, 2393, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2809, 2809, 2809, 2809, 2809, 2809, 2809, 2809, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 0, 0, 0 } },
+}};
+
+
+static void test_poly_encode_5bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_5BIT_TESTS)/sizeof(POLY_ENCODE_5BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_5bit_scalar(buf, &(POLY_ENCODE_5BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_5bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_5BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_5BIT_TESTS[i].name, &got, &(POLY_ENCODE_5BIT_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_encode_5bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_5BIT_TESTS)/sizeof(POLY_ENCODE_5BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_5bit_avx512(buf, &(POLY_ENCODE_5BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_5bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_5BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_5BIT_TESTS[i].name, &got, &(POLY_ENCODE_5BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_encode_5bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_5BIT_TESTS)/sizeof(POLY_ENCODE_5BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_5bit_neon(buf, &(POLY_ENCODE_5BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_5bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_5BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_5BIT_TESTS[i].name, &got, &(POLY_ENCODE_5BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val; // test polynomial for poly_encode()
+  const poly_t exp; // expected polynomial from poly_decode()
+} POLY_ENCODE_4BIT_TESTS[] = {{
+  // poly_encode_4bits() tests (0-3315, step=13)
+  .name = "0-3315 (inc by 13)",
+  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
+  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 0, 0, 0, 0, 0, 0, 0 } },
+}};
+
+static void test_poly_encode_4bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_4BIT_TESTS)/sizeof(POLY_ENCODE_4BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_4bit_scalar(buf, &(POLY_ENCODE_4BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_4bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_4BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_4BIT_TESTS[i].name, &got, &(POLY_ENCODE_4BIT_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_encode_4bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_4BIT_TESTS)/sizeof(POLY_ENCODE_4BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_4bit_avx512(buf, &(POLY_ENCODE_4BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_4bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_4BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_4BIT_TESTS[i].name, &got, &(POLY_ENCODE_4BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_encode_4bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_4BIT_TESTS)/sizeof(POLY_ENCODE_4BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_4bit_neon(buf, &(POLY_ENCODE_4BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_4bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_4BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_4BIT_TESTS[i].name, &got, &(POLY_ENCODE_4BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val; // test polynomial for poly_encode()
+  const poly_t exp; // expected polynomial from poly_decode()
+} POLY_ENCODE_1BIT_TESTS[] = {{
+  // poly_encode_1bits() tests (0-3315, step=13)
+  .name = "0-3315 (inc by 13)",
+  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
+  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+}};
+
+static void test_poly_encode_1bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_1BIT_TESTS)/sizeof(POLY_ENCODE_1BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_1bit_scalar(buf, &(POLY_ENCODE_1BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_1bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_1BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_1BIT_TESTS[i].name, &got, &(POLY_ENCODE_1BIT_TESTS[i].exp));
+    }
+  }
+}
+
+static void test_poly_encode_1bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_1BIT_TESTS)/sizeof(POLY_ENCODE_1BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_1bit_avx512(buf, &(POLY_ENCODE_1BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_1bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_1BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_1BIT_TESTS[i].name, &got, &(POLY_ENCODE_1BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_encode_1bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_ENCODE_1BIT_TESTS)/sizeof(POLY_ENCODE_1BIT_TESTS[0]); i++) {
+    // encode polynomial
+    uint8_t buf[320] = { 0 };
+    poly_encode_1bit_neon(buf, &(POLY_ENCODE_1BIT_TESTS[i].val));
+
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_1bit(&got, buf);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_ENCODE_1BIT_TESTS[i].exp), sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_ENCODE_1BIT_TESTS[i].name, &got, &(POLY_ENCODE_1BIT_TESTS[i].exp));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+
+static const struct {
+  const char *name; // test name
+  const uint8_t val[352]; // test value for poly_decode_11bit()
+} POLY_DECODE_11BIT_TESTS[] = {{
+  .name = "0x00-0xff",
+  .val = {
+    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
+    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
+    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
+    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
+    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
+    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
+    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  },
+}};
+
+static void test_poly_decode_11bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_DECODE_11BIT_TESTS)/sizeof(POLY_DECODE_11BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_11bit_scalar(&poly, POLY_DECODE_11BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[352] = { 0 };
+    poly_encode_11bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_11BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_11BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_11BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+}
+
+static void test_poly_decode_11bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_DECODE_11BIT_TESTS)/sizeof(POLY_DECODE_11BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_11bit_avx512(&poly, POLY_DECODE_11BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[352] = { 0 };
+    poly_encode_11bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_11BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_11BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_11BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_decode_11bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_DECODE_11BIT_TESTS)/sizeof(POLY_DECODE_11BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_11bit_neon(&poly, POLY_DECODE_11BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[352] = { 0 };
+    poly_encode_11bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_11BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_11BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_11BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t val[320]; // test value for poly_decode_10bit()
+} POLY_DECODE_10BIT_TESTS[] = {{
+  .name = "0x00-0xff",
+  .val = {
+    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
+    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
+    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
+    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
+    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
+    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
+    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  },
+}};
+
+static void test_poly_decode_10bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_DECODE_10BIT_TESTS)/sizeof(POLY_DECODE_10BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_10bit_scalar(&poly, POLY_DECODE_10BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[320] = { 0 };
+    poly_encode_10bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_10BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_10BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_10BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+}
+
+static void test_poly_decode_10bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_DECODE_10BIT_TESTS)/sizeof(POLY_DECODE_10BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_10bit_avx512(&got, POLY_DECODE_10BIT_TESTS[i].val);
+
+    // get expected value
+    poly_t exp = { 0 };
+    poly_decode_10bit_scalar(&exp, POLY_DECODE_10BIT_TESTS[i].val);
+
+    // check for expected value
+    if (memcmp(&got, &exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_DECODE_10BIT_TESTS[i].name, &got, &exp);
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_decode_10bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_DECODE_10BIT_TESTS)/sizeof(POLY_DECODE_10BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t got = { 0 };
+    poly_decode_10bit_neon(&got, POLY_DECODE_10BIT_TESTS[i].val);
+
+    // get expected value
+    poly_t exp = { 0 };
+    poly_decode_10bit_scalar(&exp, POLY_DECODE_10BIT_TESTS[i].val);
+
+    // check for expected value
+    if (memcmp(&got, &exp, sizeof(poly_t))) {
+      fail_poly_test(__func__, POLY_DECODE_10BIT_TESTS[i].name, &got, &exp);
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t val[160]; // test value for poly_decode_5bit()
+} POLY_DECODE_5BIT_TESTS[] = {{
+  .name = "0x00-0x7f",
+  .val = {
+    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
+    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
+    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
+    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
+    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
+    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
+    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
+    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
+    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
+    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
+    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
+    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
+    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
+  },
+}, {
+  .name = "0x80-0xff",
+  .val = {
+    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
+    0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
+    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
+    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
+    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
+    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
+    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
+    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
+    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
+    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
+    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
+    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
+    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
+    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
+    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
+  },
+}};
+
+static void test_poly_decode_5bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_DECODE_5BIT_TESTS)/sizeof(POLY_DECODE_5BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_5bit_scalar(&poly, POLY_DECODE_5BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[160] = { 0 };
+    poly_encode_5bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_5BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_5BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_5BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+}
+
+static void test_poly_decode_5bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_DECODE_5BIT_TESTS)/sizeof(POLY_DECODE_5BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_5bit_avx512(&poly, POLY_DECODE_5BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[160] = { 0 };
+    poly_encode_5bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_5BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_5BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_5BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_decode_5bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_DECODE_5BIT_TESTS)/sizeof(POLY_DECODE_5BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_5bit_neon(&poly, POLY_DECODE_5BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[160] = { 0 };
+    poly_encode_5bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_5BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_5BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_5BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t val[128]; // test value for poly_decode_4bit()
+} POLY_DECODE_4BIT_TESTS[] = {{
+  .name = "0x00-0x7f",
+  .val = {
+    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
+    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
+    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
+    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
+    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
+    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
+    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
+    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
+    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
+    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
+    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
+    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
+    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
+    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
+  },
+}, {
+  .name = "0x80-0xff",
+  .val = {
+    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
+    0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
+    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
+    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
+    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
+    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
+    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
+    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
+    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
+    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
+    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
+    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
+    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
+    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
+    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
+  },
+}};
+
+static void test_poly_decode_4bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_DECODE_4BIT_TESTS)/sizeof(POLY_DECODE_4BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_4bit_scalar(&poly, POLY_DECODE_4BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[128] = { 0 };
+    poly_encode_4bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_4BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_4BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_4BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+}
+
+static void test_poly_decode_4bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_DECODE_4BIT_TESTS)/sizeof(POLY_DECODE_4BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_4bit_avx512(&poly, POLY_DECODE_4BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[128] = { 0 };
+    poly_encode_4bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_4BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_4BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_4BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_decode_4bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_DECODE_4BIT_TESTS)/sizeof(POLY_DECODE_4BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_4bit_neon(&poly, POLY_DECODE_4BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[128] = { 0 };
+    poly_encode_4bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_4BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_4BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_4BIT_TESTS[i].val, sizeof(got));
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t val[32]; // test value for poly_decode_1bit()
+} POLY_DECODE_1BIT_TESTS[] = {{
+  .name = "0x00 x 32",
+  .val = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  },
+}, {
+  .name = "0x0f x 32",
+  .val = {
+    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  },
+}, {
+  .name = "0xf0 x 32",
+  .val = {
+    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  },
+}, {
+  .name = "0xff x 32",
+  .val = {
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  },
+}};
+
+
+static void test_poly_decode_1bit_scalar(void) {
+  for (size_t i = 0; i < sizeof(POLY_DECODE_1BIT_TESTS)/sizeof(POLY_DECODE_1BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_1bit_scalar(&poly, POLY_DECODE_1BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[32] = { 0 };
+    poly_encode_1bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_1BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_1BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_1BIT_TESTS[i].val, 32);
+    }
+  }
+}
+
+static void test_poly_decode_1bit_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t i = 0; i < sizeof(POLY_DECODE_1BIT_TESTS)/sizeof(POLY_DECODE_1BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_1bit_avx512(&poly, POLY_DECODE_1BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[32] = { 0 };
+    poly_encode_1bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_1BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_1BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_1BIT_TESTS[i].val, 32);
+    }
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_poly_decode_1bit_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t i = 0; i < sizeof(POLY_DECODE_1BIT_TESTS)/sizeof(POLY_DECODE_1BIT_TESTS[0]); i++) {
+    // decode polynomial
+    poly_t poly = { 0 };
+    poly_decode_1bit_neon(&poly, POLY_DECODE_1BIT_TESTS[i].val);
+
+    // encode polynomial
+    uint8_t got[32] = { 0 };
+    poly_encode_1bit(got, &poly);
+
+    // check for expected value
+    if (memcmp(&got, &(POLY_DECODE_1BIT_TESTS[i].val), sizeof(got))) {
+      fail_test(__func__, POLY_DECODE_1BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_1BIT_TESTS[i].val, 32);
+    }
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+// define test functions for NxN matrices and N-dim vectors.
+#define DEF_MAT_VEC_TEST_FUNCS(N) \
+  /* apply NTT to NxN matrix */ \
+  static void mat ## N ## _ntt(poly_t mat[static N*N]) { \
+    for (size_t i = 0; i < N*N; i++) { \
+      poly_ntt(mat + i); \
+    } \
+  } \
+  \
+  /* write vecN to file handle */ \
+  static void vec ## N ## _write(FILE *fh, const char *name, const poly_t vec[static N]) { \
+    for (size_t i = 0; i < N; i++) { \
+      fprintf(fh, "%s[%zu] = ", name, i); \
+      poly_write(fh, vec + i); \
+      fputs("\n", fh); \
+    } \
+  }
+
+// define mat2 and vec2 test functions (used by pke512)
+DEF_MAT_VEC_TEST_FUNCS(2)
+
+// define mat3 and vec3 test functions (used by pke768)
+DEF_MAT_VEC_TEST_FUNCS(3)
+
+// define mat4 and vec4 test functions (used by pke1024)
+DEF_MAT_VEC_TEST_FUNCS(4)
+
+static void test_mat2_mul(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t mat[4];
+    const poly_t vec[2];
+    const poly_t exp[2];
+  } TESTS[] = {{
+    .name = "[[(1), (x)], [(x^2), (x^3)]] * [x^4, x^5]^T",
+    .mat = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+    },
+
+    .vec = {
+      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
+    },
+
+    .exp = {
+      { .cs = { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // populate matrix, apply NTT
+    poly_t mat[4] = { 0 };
+    memcpy(mat, TESTS[i].mat, sizeof(mat));
+    mat2_ntt(mat);
+
+    // populate vector, apply NTT
+    poly_t vec[2] = { 0 };
+    memcpy(vec, TESTS[i].vec, sizeof(vec));
+    vec2_ntt(vec);
+
+    poly_t got[2] = { 0 };
+    mat2_mul(got, mat, vec); // got = mat * vec
+    vec2_inv_ntt(got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec2_write(stderr, "got", got);
+      fprintf(stderr, "exp:\n");
+      vec2_write(stderr, "exp", TESTS[i].exp);
+    }
+  }
+}
+
+static void test_vec2_add(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t a[2]; // test value a
+    const poly_t b[2]; // test value b
+    const poly_t exp[2]; // expected value
+  } TESTS[] = {{
+    .name = "[1, x]^T + [x^2, x^3]^T = [1 + x^2, x + x^3]^T",
+    .a = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+    },
+
+    .b = {
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+    },
+
+    .exp = {
+      { .cs = { 1, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t got[2] = { 0 };
+    memcpy(got, TESTS[i].a, sizeof(got)); // got = a
+
+    vec2_add(got, TESTS[i].b); // got += b
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec2_write(stderr, "got", got);
+      fprintf(stderr, "exp:\n");
+      vec2_write(stderr, "exp", TESTS[i].exp);
+    }
+  }
+}
+
+static void test_vec2_dot(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t a[2]; // test value a
+    const poly_t b[2]; // test value b
+    const poly_t exp; // expected value
+  } TESTS[] = {{
+    .name = "[1, x] * [x^2, x^3]^T = (x^2 + x^4)",
+    .a = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+    },
+
+    .b = {
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+    },
+
+    .exp = { .cs = { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 } },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t a[2], b[2];
+
+    memcpy(a, TESTS[i].a, sizeof(a));
+    vec2_ntt(a); // a = NTT(a)
+
+    memcpy(b, TESTS[i].b, sizeof(b));
+    vec2_ntt(b); // b = NTT(b)
+
+    poly_t got = { 0 };
+    vec2_dot(&got, a, b); // got = a * b
+    poly_inv_ntt(&got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
+      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
+    }
+  }
+}
+
+static void test_vec2_ntt(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t exp[2]; // expected value
+  } TESTS[] = {{
+    .name = "[1, x]^T",
+    .exp = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+    },
+  }, {
+    .name = "[x^2, x^3]^T",
+    .exp = {
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t got[2] = { 0 };
+    memcpy(got, TESTS[i].exp, sizeof(got));
+    vec2_ntt(got); // got = NTT(exp)
+    vec2_inv_ntt(got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec2_write(stderr, "got", got);
+      fprintf(stderr, "\nexp:\n");
+      vec2_write(stderr, "exp", TESTS[i].exp);
+      fputs("\n", stderr);
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val[2]; // test vector
+} VEC2_ENCODE_TESTS[] = {{
+  .name = "basic",
+  .val = {
+    { .cs = { 1, 2, 3, 4, 5 } },
+    { .cs = { 3328, 3327, 3326, 3325, 3324 } },
+  },
+}};
+
+DEF_TEST_VEC_FNS(2)
+DEF_TEST_VEC_BIT_FNS(2, 10)
+
+static const struct {
+  const char *name; // test name
+  const uint8_t seed[32]; // test seed
+  const uint8_t exp_ek[PKE512_EK_SIZE]; // expected ek (800 bytes)
+  const uint8_t exp_dk[PKE512_DK_SIZE]; // expected dk (768 bytes)
+} PKE512_KEYGEN_TESTS[] = {{
+  .name = "all-zero",
+  .seed = { 0 },
+  .exp_ek = {
+    0x9c, 0xe5, 0xc6, 0x7e, 0xfc, 0x9c, 0x33, 0x67, 0xa8, 0x3c, 0x7c, 0x42,
+    0xb0, 0xa1, 0x29, 0x37, 0xc9, 0x40, 0xcf, 0x71, 0x1a, 0xa2, 0xa7, 0x7f,
+    0x94, 0x38, 0x92, 0x8d, 0x69, 0x50, 0xea, 0x60, 0x07, 0xc0, 0xb9, 0x02,
+    0xff, 0x19, 0x77, 0x7b, 0x20, 0x93, 0x12, 0x66, 0x06, 0x77, 0x00, 0xb9,
+    0x69, 0xa0, 0x24, 0x92, 0xec, 0xc0, 0x66, 0x73, 0xce, 0xf6, 0xe1, 0xce,
+    0x36, 0x77, 0x3a, 0x4b, 0xdb, 0x95, 0x38, 0xd5, 0x34, 0x58, 0x26, 0x18,
+    0xde, 0xd2, 0x79, 0xe2, 0x99, 0xa1, 0x20, 0x23, 0x18, 0x13, 0x8c, 0xa8,
+    0xd5, 0x49, 0xb6, 0xc6, 0x08, 0x81, 0xee, 0xd2, 0xb7, 0x4a, 0xb8, 0x84,
+    0xb9, 0x30, 0x74, 0x68, 0x53, 0x59, 0x60, 0x35, 0x27, 0xec, 0x63, 0x8b,
+    0xab, 0xb1, 0x3d, 0x98, 0xf2, 0xa7, 0x3e, 0x2a, 0x36, 0x2a, 0x56, 0x62,
+    0xa3, 0x51, 0x53, 0x8d, 0x53, 0x57, 0xec, 0x7c, 0x20, 0xb6, 0x67, 0x40,
+    0x80, 0xc7, 0x6a, 0x53, 0x65, 0xab, 0x9f, 0x48, 0x3f, 0x78, 0x6c, 0x4e,
+    0x2c, 0xdb, 0xca, 0x23, 0xf0, 0xaa, 0x0a, 0x64, 0x58, 0x9e, 0xb8, 0x6e,
+    0xaa, 0x07, 0x37, 0x71, 0xf0, 0x4d, 0x39, 0x80, 0x8e, 0x90, 0x44, 0x37,
+    0x68, 0xaa, 0x0d, 0x09, 0x22, 0xb5, 0xdf, 0xa1, 0x54, 0xe7, 0xe7, 0x09,
+    0x3d, 0x34, 0x22, 0x38, 0x14, 0xba, 0xa1, 0xb6, 0x6d, 0xae, 0x36, 0x53,
+    0xce, 0xa2, 0x15, 0xb3, 0xac, 0x7d, 0x6c, 0x65, 0xb8, 0x2c, 0x31, 0xae,
+    0xdf, 0xc0, 0x3e, 0x3e, 0xf6, 0x1d, 0xd2, 0x93, 0x15, 0xb5, 0xc1, 0x1c,
+    0x10, 0xa5, 0xb9, 0xdf, 0x13, 0x92, 0x17, 0xa0, 0xc2, 0x3e, 0xf4, 0xbf,
+    0x81, 0x41, 0x0e, 0xbf, 0x16, 0x0f, 0x5b, 0xba, 0x4d, 0x3c, 0x67, 0x18,
+    0xb3, 0x56, 0xb1, 0x85, 0x65, 0x5a, 0xbe, 0xd1, 0x42, 0xa3, 0xc4, 0x99,
+    0x05, 0xe2, 0x28, 0x9d, 0xd4, 0xca, 0x05, 0xa0, 0x3a, 0x05, 0x0b, 0xa0,
+    0x08, 0xd3, 0x52, 0xbd, 0x22, 0xba, 0xeb, 0x89, 0x78, 0x4e, 0xfc, 0x29,
+    0x01, 0x0c, 0xa2, 0x78, 0x4a, 0x6c, 0x21, 0xcb, 0x46, 0x93, 0x79, 0x00,
+    0x99, 0xdb, 0x9e, 0xca, 0x93, 0x25, 0x51, 0x69, 0x95, 0x31, 0x64, 0x15,
+    0x88, 0x8c, 0x35, 0xa8, 0x34, 0x61, 0xbb, 0x5a, 0x86, 0xb4, 0x25, 0x17,
+    0xb2, 0xb1, 0x56, 0xd2, 0x85, 0x98, 0xc9, 0x5b, 0x75, 0x4e, 0x1b, 0x37,
+    0x4f, 0x40, 0xa0, 0xae, 0x53, 0x21, 0x69, 0x72, 0x76, 0x88, 0x67, 0xcd,
+    0x45, 0xa7, 0xca, 0xd6, 0xd5, 0xa7, 0x38, 0x2b, 0x2a, 0x5d, 0x7c, 0x16,
+    0x94, 0x49, 0x6e, 0x05, 0x48, 0xad, 0xf4, 0x57, 0x1b, 0x4b, 0x5c, 0x5f,
+    0x5d, 0x21, 0x93, 0x9f, 0xbc, 0x9b, 0xf2, 0x69, 0xcd, 0xaf, 0x53, 0xbe,
+    0x5f, 0x09, 0xbe, 0x61, 0x93, 0xae, 0xba, 0x59, 0x1f, 0x4f, 0xc1, 0xb9,
+    0x43, 0x97, 0x79, 0x8d, 0xb9, 0x42, 0xe7, 0x3a, 0x75, 0x59, 0x00, 0x17,
+    0xbe, 0x4b, 0x46, 0xc1, 0xe9, 0x4d, 0xd0, 0xfb, 0x1b, 0x8a, 0x94, 0x76,
+    0xf2, 0x8a, 0xcf, 0x0b, 0x21, 0x1a, 0xc1, 0xca, 0x80, 0x2c, 0xa8, 0x72,
+    0x3e, 0x7a, 0x6f, 0x61, 0xf1, 0x34, 0x3c, 0x17, 0x45, 0x9e, 0x55, 0xb2,
+    0x73, 0x2c, 0xce, 0xf6, 0x3c, 0x80, 0xbe, 0x43, 0x59, 0xf7, 0xf6, 0x15,
+    0xf9, 0x0c, 0x2e, 0x8c, 0x6c, 0x08, 0x23, 0x85, 0xae, 0xb7, 0x15, 0x18,
+    0x89, 0x2a, 0x1c, 0x87, 0xcb, 0x3f, 0x36, 0x66, 0x81, 0x47, 0xd9, 0x19,
+    0xc1, 0x06, 0x6b, 0xaa, 0x69, 0xb6, 0xe3, 0xf9, 0x99, 0xf9, 0x26, 0x78,
+    0x0d, 0x66, 0x17, 0x70, 0x15, 0x23, 0x40, 0x73, 0x1d, 0x02, 0x76, 0xc4,
+    0x54, 0xa8, 0x6c, 0x82, 0xe0, 0xb7, 0x4c, 0x4b, 0x4c, 0x1b, 0x77, 0x37,
+    0xf2, 0xf9, 0xae, 0x32, 0x22, 0xb7, 0xd0, 0xf2, 0xcb, 0xc0, 0x01, 0xba,
+    0x54, 0x21, 0xcc, 0x6a, 0x1a, 0x22, 0xd0, 0x85, 0x87, 0xa2, 0x58, 0xce,
+    0x42, 0xbc, 0x69, 0xa1, 0x72, 0x44, 0x76, 0xa5, 0xa7, 0x96, 0xb9, 0x7f,
+    0xa1, 0x5c, 0x85, 0x9c, 0x7c, 0x60, 0x6a, 0xe3, 0x2c, 0x81, 0xbc, 0x99,
+    0x39, 0x69, 0x99, 0xd3, 0x45, 0x7b, 0xb4, 0x23, 0x95, 0x63, 0x2a, 0xb6,
+    0x99, 0x53, 0x40, 0xb5, 0x14, 0x80, 0x0f, 0x58, 0x2e, 0x56, 0x95, 0x34,
+    0xd0, 0x1a, 0x27, 0x42, 0xdc, 0x2f, 0x0a, 0x35, 0xbf, 0xad, 0x61, 0x86,
+    0x38, 0xb5, 0x9b, 0xcf, 0xc3, 0x3b, 0xb4, 0xc2, 0x4d, 0x35, 0xe7, 0x65,
+    0x62, 0xfc, 0x4b, 0xdc, 0x44, 0xb4, 0x16, 0x41, 0x31, 0x3b, 0x0c, 0x5f,
+    0xca, 0x92, 0x6c, 0x54, 0xd3, 0xc6, 0x42, 0xe5, 0x2a, 0x62, 0x06, 0x38,
+    0x67, 0xc8, 0xba, 0x3a, 0x0a, 0x79, 0x76, 0x13, 0x5e, 0xfe, 0x3b, 0x6c,
+    0x49, 0xea, 0x26, 0x5d, 0x55, 0xa2, 0xd1, 0xd5, 0x67, 0x7f, 0x49, 0xb0,
+    0x9e, 0xba, 0x38, 0x23, 0x4a, 0xbe, 0x38, 0xb3, 0x95, 0x27, 0xa8, 0x17,
+    0x42, 0x14, 0x4e, 0x93, 0x43, 0x82, 0xb2, 0x75, 0x64, 0x29, 0x2a, 0x24,
+    0xd6, 0xa5, 0x38, 0x91, 0x6b, 0x21, 0x48, 0xd2, 0x3f, 0x78, 0xe7, 0x0a,
+    0x59, 0xe9, 0x80, 0x96, 0xc9, 0x12, 0x03, 0xf7, 0x79, 0x65, 0x21, 0x1f,
+    0x2e, 0xea, 0x2f, 0xc6, 0xfc, 0x1f, 0x59, 0x63, 0x4e, 0x24, 0x6b, 0x0c,
+    0x9e, 0x24, 0x76, 0x9c, 0xe5, 0xa9, 0x4f, 0xc2, 0x7c, 0x33, 0xd5, 0x56,
+    0x50, 0x02, 0x8f, 0x95, 0x1b, 0x2a, 0x30, 0x75, 0xc9, 0x8b, 0x87, 0x87,
+    0x46, 0xe0, 0x3d, 0xc9, 0x1c, 0xbf, 0xdd, 0x97, 0x25, 0xec, 0x09, 0xb4,
+    0x4d, 0xb9, 0x0f, 0x0c, 0x66, 0x2b, 0xa5, 0x09, 0x6e, 0x9d, 0xab, 0x07,
+    0x6a, 0x7b, 0x7b, 0x1a, 0xca, 0xb4, 0xeb, 0x2b, 0x79, 0x5b, 0x65, 0x31,
+    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+  },
+
+  .exp_dk = {
+    0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+    0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+    0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+    0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+    0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+    0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+    0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+    0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+    0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+    0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+    0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+    0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+    0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+    0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+    0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+    0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+    0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+    0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+    0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+    0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+    0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+    0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+    0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+    0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+    0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+    0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+    0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+    0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+    0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+    0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+    0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+    0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+    0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+    0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+    0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+    0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+    0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+    0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+    0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+    0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+    0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+    0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+    0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+    0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+    0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+    0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+    0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+    0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+    0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+    0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+    0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+    0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+    0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+    0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+    0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+    0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+    0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+    0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+    0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+    0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+    0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+    0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+    0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+    0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+  },
+}, {
+  // source: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+  .name = "Key Generation -- ML-KEM-512",
+  .seed = {
+    0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42, 0x42, 0x4A, 0x87, 0xC1,
+    0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88, 0x18, 0x69, 0x07, 0x7E,
+    0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
+  },
+
+  .exp_ek = {
+    0xC6, 0x5A, 0x1D, 0x9D, 0x47, 0x97, 0x77, 0xE6, 0x90, 0x5A, 0x91, 0xA5,
+    0xCB, 0x24, 0x55, 0x1C, 0x8B, 0x1E, 0x52, 0xA3, 0xC7, 0x7B, 0x63, 0x31,
+    0x3F, 0xFC, 0x8B, 0x58, 0x17, 0x81, 0x52, 0x59, 0xA6, 0xAD, 0xB5, 0x96,
+    0x45, 0xDC, 0x4B, 0xB1, 0x43, 0x6D, 0x51, 0xE6, 0x2A, 0x09, 0x68, 0x34,
+    0xAF, 0x43, 0x77, 0x25, 0x10, 0xC4, 0xED, 0xF3, 0x4C, 0xDE, 0x0A, 0x5B,
+    0x57, 0xC1, 0x45, 0xE6, 0x87, 0xCB, 0x87, 0x16, 0x2F, 0x00, 0x1C, 0x21,
+    0xC9, 0xE1, 0x93, 0x4A, 0xC1, 0x1A, 0xAF, 0xA7, 0x0F, 0xF8, 0x10, 0x73,
+    0x26, 0x50, 0xB3, 0x2A, 0x30, 0x18, 0xA7, 0xC5, 0x0C, 0xD7, 0x36, 0x79,
+    0x62, 0x22, 0xC8, 0xAB, 0x82, 0x1A, 0x92, 0x83, 0xBE, 0x1C, 0xC2, 0x04,
+    0xC3, 0xF1, 0x63, 0x0D, 0x3C, 0xCC, 0xDB, 0x0A, 0x9A, 0x3D, 0x17, 0x55,
+    0x2B, 0x91, 0x58, 0xC0, 0x66, 0x4E, 0x5D, 0x6A, 0x04, 0xB0, 0xFA, 0x36,
+    0xDE, 0x45, 0x86, 0x2A, 0x46, 0xA3, 0x9E, 0xC5, 0x97, 0xAE, 0x42, 0xC3,
+    0x11, 0xC4, 0xAC, 0x22, 0x4A, 0x72, 0xD6, 0xF2, 0x53, 0xBB, 0x52, 0x35,
+    0xF7, 0xA2, 0xB8, 0xB0, 0xF2, 0x4D, 0x13, 0x76, 0xAF, 0x58, 0x87, 0x46,
+    0xF3, 0xBB, 0x8E, 0x03, 0x65, 0x07, 0x87, 0x61, 0xCA, 0xB9, 0x83, 0xA4,
+    0xA6, 0xA9, 0x40, 0xA3, 0xD9, 0x97, 0x04, 0x7A, 0x8F, 0x36, 0xA7, 0x31,
+    0xE8, 0x96, 0x52, 0x36, 0xC3, 0x7B, 0xF2, 0x00, 0x08, 0x2F, 0x82, 0x1D,
+    0xCA, 0x77, 0x16, 0xC4, 0x44, 0xA9, 0x0B, 0xEC, 0x53, 0x07, 0x4B, 0xBA,
+    0x58, 0xC1, 0x32, 0xBF, 0xB9, 0xA2, 0xAC, 0xE2, 0xCE, 0xC9, 0xAA, 0x65,
+    0x8E, 0xAC, 0x12, 0x32, 0xCC, 0xCA, 0x3C, 0x81, 0x7A, 0x92, 0xC1, 0x19,
+    0x5C, 0x05, 0xC0, 0xE1, 0xD6, 0x63, 0x9F, 0xD2, 0xAD, 0xE5, 0x31, 0x60,
+    0x7D, 0x48, 0x8B, 0x74, 0xA7, 0x47, 0xCF, 0xF4, 0x7F, 0xCA, 0x5C, 0x8B,
+    0x21, 0x63, 0xCA, 0x03, 0xC5, 0x45, 0xED, 0x10, 0x32, 0x78, 0x43, 0x0C,
+    0x60, 0xB2, 0x38, 0x1A, 0x09, 0x42, 0x7F, 0xD1, 0x30, 0xF8, 0x59, 0xBF,
+    0x5D, 0xB7, 0x76, 0xDA, 0x09, 0x5D, 0xCA, 0x58, 0x04, 0xFA, 0x63, 0xB0,
+    0xD7, 0xD8, 0x7F, 0xA9, 0x41, 0x5C, 0x72, 0xFB, 0x51, 0x87, 0x2A, 0x98,
+    0x9F, 0x46, 0x6C, 0x98, 0x4B, 0xC7, 0x4C, 0x29, 0xB8, 0x63, 0x20, 0x19,
+    0xCA, 0x04, 0x0C, 0x9C, 0xA3, 0x5E, 0x22, 0x60, 0x8D, 0xAA, 0x70, 0x35,
+    0x7A, 0xE2, 0xC3, 0xAD, 0x83, 0x63, 0x1F, 0xAA, 0x17, 0x4E, 0x0A, 0xCD,
+    0xF5, 0xDB, 0xBF, 0x3C, 0xF6, 0x8A, 0x05, 0xB6, 0x54, 0x3A, 0xB6, 0x26,
+    0x8E, 0x1A, 0x51, 0xB0, 0x93, 0x2C, 0x17, 0xB0, 0x0A, 0x13, 0x71, 0xB2,
+    0xDA, 0xB2, 0x41, 0xF9, 0x2A, 0x43, 0xFF, 0xB4, 0x56, 0xD0, 0xA8, 0xC8,
+    0x86, 0x0A, 0x8E, 0x28, 0xA6, 0x1A, 0x21, 0x30, 0x7C, 0xC0, 0x45, 0x6D,
+    0xA4, 0x24, 0x29, 0x05, 0xCB, 0x1D, 0x3D, 0x0B, 0xBD, 0x81, 0xBB, 0x8E,
+    0xE2, 0x74, 0xA4, 0x3C, 0x76, 0xC3, 0x10, 0x01, 0x95, 0x15, 0xFC, 0xC1,
+    0x40, 0x46, 0x7C, 0x33, 0x37, 0x0C, 0x86, 0x80, 0x8E, 0xCA, 0xA5, 0x8E,
+    0x3B, 0xA9, 0x3A, 0x2C, 0x11, 0x90, 0x46, 0x1C, 0x1D, 0xFA, 0x11, 0x30,
+    0x20, 0x01, 0xBB, 0xAB, 0x4C, 0xB1, 0xE3, 0x64, 0x2E, 0xF8, 0xCB, 0x26,
+    0x30, 0x9B, 0x60, 0x52, 0x3B, 0xC2, 0x18, 0x87, 0xB0, 0x7F, 0x89, 0x8C,
+    0xE5, 0x62, 0xA6, 0xCA, 0x77, 0x8E, 0xA0, 0x15, 0x05, 0x85, 0x13, 0x78,
+    0xCE, 0xA8, 0xBB, 0x7F, 0xC0, 0x9D, 0x11, 0x96, 0x1B, 0x6C, 0x59, 0x6F,
+    0x93, 0x54, 0x2A, 0x99, 0x04, 0x86, 0x4E, 0xB1, 0x0C, 0xD0, 0xA7, 0x03,
+    0xDB, 0xA9, 0x89, 0x21, 0x86, 0x1A, 0x87, 0xB0, 0x56, 0x52, 0x5C, 0x71,
+    0xA8, 0x43, 0x55, 0x3E, 0x64, 0x00, 0x77, 0x74, 0x37, 0xC9, 0x5C, 0xCC,
+    0x80, 0x85, 0xCC, 0x0C, 0x47, 0x7D, 0x66, 0x5A, 0x44, 0x79, 0x01, 0x9D,
+    0x4C, 0xD4, 0x42, 0xF7, 0x4A, 0x3C, 0xD8, 0x16, 0x9F, 0x42, 0x62, 0xB8,
+    0x27, 0x1B, 0x5D, 0x5A, 0x67, 0xC8, 0xC1, 0x61, 0x1A, 0xAE, 0x7B, 0x3D,
+    0x05, 0x34, 0xC0, 0x85, 0x97, 0x16, 0xFD, 0xF0, 0xBB, 0x68, 0x94, 0x90,
+    0x94, 0xC0, 0x6A, 0x1B, 0x73, 0xC9, 0xAA, 0x1C, 0xBD, 0xF3, 0x31, 0x54,
+    0x3D, 0xE0, 0x02, 0xA8, 0xC0, 0x6F, 0x94, 0xE8, 0x81, 0x0A, 0x5C, 0xB3,
+    0x73, 0x83, 0x27, 0x45, 0xD7, 0x20, 0x68, 0x3B, 0x57, 0x48, 0x75, 0xA6,
+    0x66, 0x94, 0x6D, 0x02, 0x96, 0x89, 0x3F, 0x2B, 0x59, 0xE9, 0x07, 0x48,
+    0x8D, 0x8C, 0x84, 0x89, 0xD4, 0x74, 0xD9, 0x29, 0xA0, 0x5A, 0x57, 0x3E,
+    0xD6, 0x67, 0x49, 0x03, 0x71, 0xA4, 0x6D, 0x45, 0x56, 0xCB, 0xB6, 0x8A,
+    0xAA, 0x79, 0xCC, 0x3E, 0xC6, 0x65, 0x34, 0x13, 0x57, 0x6C, 0x22, 0x8E,
+    0x37, 0x9A, 0x14, 0xCB, 0x90, 0xB7, 0xB7, 0x59, 0x1B, 0x19, 0xA7, 0xBD,
+    0x37, 0xA1, 0xC4, 0xD3, 0x78, 0x59, 0x89, 0x22, 0x19, 0x44, 0x2B, 0xB0,
+    0xB9, 0xB9, 0xBA, 0x67, 0xBA, 0x3B, 0xC0, 0xD0, 0x95, 0xC8, 0x80, 0x3C,
+    0xEB, 0xE9, 0x7A, 0xFF, 0x0B, 0x1C, 0x15, 0x35, 0x78, 0xA1, 0x30, 0xCD,
+    0x81, 0x57, 0xCF, 0x74, 0x59, 0x46, 0xC2, 0xF5, 0x72, 0x6D, 0x9C, 0x11,
+    0x27, 0x35, 0x75, 0x50, 0x52, 0x91, 0x34, 0x65, 0x28, 0xEE, 0x0B, 0xAC,
+    0x04, 0x7C, 0xC9, 0x84, 0x53, 0x8B, 0x97, 0xBB, 0xAB, 0xFC, 0xC3, 0x57,
+    0xDC, 0xB8, 0xA9, 0x8F, 0xB8, 0x57, 0xC9, 0xC5, 0x2D, 0x1B, 0x78, 0x67,
+    0x49, 0xCA, 0x61, 0x89, 0x2B, 0x09, 0x75, 0x99, 0x80, 0x52, 0x00, 0x91,
+    0xB9, 0xB4, 0x77, 0xC7, 0x0E, 0x6C, 0x46, 0x58, 0x6B, 0x1C, 0xCE, 0xBE,
+    0x87, 0xBC, 0xF6, 0xDF, 0x03, 0xC2, 0xB2, 0x7C, 0xB0, 0x9F, 0xA0, 0x3F,
+    0x63, 0x16, 0x09, 0x58, 0x38, 0x3B, 0xE6, 0x36,
+  },
+
+  .exp_dk = {
+    0x37, 0xEC, 0x47, 0x7E, 0x21, 0x7B, 0xFB, 0x40, 0x38, 0x4C, 0x85, 0x0E,
+    0x51, 0xC1, 0x83, 0x71, 0x58, 0xBD, 0xBC, 0x23, 0xA3, 0x18, 0x32, 0xBC,
+    0x25, 0xC9, 0x1B, 0x31, 0x21, 0x44, 0x4A, 0xD4, 0x53, 0x37, 0x33, 0xBA,
+    0xFF, 0x07, 0xCA, 0x81, 0x7B, 0x64, 0xB2, 0xCA, 0x42, 0x99, 0xAA, 0x26,
+    0x45, 0x4C, 0xBA, 0xFB, 0x35, 0xB6, 0xAB, 0xE1, 0x18, 0x5C, 0xB4, 0x7C,
+    0x4C, 0xD6, 0x1A, 0xF9, 0x83, 0x83, 0xC4, 0x81, 0x4B, 0x20, 0xAB, 0x87,
+    0x54, 0xFC, 0x51, 0x4F, 0x23, 0x07, 0x41, 0x14, 0xC3, 0xE5, 0xA8, 0x10,
+    0xA4, 0x53, 0xB8, 0x55, 0xAA, 0x7F, 0x13, 0x10, 0xC7, 0x4B, 0x0B, 0x01,
+    0xE5, 0xAA, 0xB2, 0xE8, 0x71, 0x73, 0x8F, 0xAC, 0x27, 0x86, 0xC7, 0xA0,
+    0x5D, 0x6B, 0x3B, 0x32, 0xA0, 0x50, 0xD0, 0xFB, 0x22, 0x39, 0x56, 0xC9,
+    0x5C, 0xA0, 0xC2, 0xC1, 0xD5, 0x41, 0x54, 0xA7, 0x7B, 0xD3, 0x37, 0x37,
+    0xA4, 0x9A, 0x00, 0x65, 0xD1, 0x42, 0x4A, 0x2A, 0xBA, 0xFD, 0x52, 0xAA,
+    0x93, 0x4C, 0x98, 0x04, 0x93, 0x92, 0x08, 0xF0, 0x5C, 0xCF, 0x8B, 0x8B,
+    0x80, 0x86, 0x31, 0x6E, 0x09, 0x43, 0xA0, 0x87, 0x10, 0x50, 0x0C, 0x91,
+    0x8A, 0x2B, 0x21, 0x8D, 0x37, 0xB8, 0x5A, 0xE2, 0x80, 0x22, 0xCB, 0x01,
+    0x34, 0xFB, 0x49, 0xF5, 0xC4, 0x5D, 0x98, 0xD3, 0xC0, 0x4B, 0x75, 0x5A,
+    0x60, 0x88, 0x04, 0x22, 0x66, 0x8E, 0x2B, 0x30, 0x1B, 0x18, 0xD5, 0x19,
+    0x4D, 0xE9, 0x91, 0xB2, 0x65, 0xBF, 0x94, 0x69, 0x7E, 0x6A, 0x4B, 0x81,
+    0x50, 0xC8, 0xB8, 0x52, 0x03, 0x39, 0x15, 0x63, 0x5E, 0x30, 0x66, 0x5B,
+    0xDA, 0x21, 0x91, 0xDA, 0xA5, 0x05, 0xD4, 0x33, 0x44, 0xFD, 0x29, 0xC9,
+    0xFC, 0xC1, 0xC5, 0x07, 0x69, 0x1D, 0x47, 0x5B, 0x61, 0x7C, 0x94, 0x8F,
+    0xCC, 0x84, 0xB1, 0xB0, 0x8A, 0x1C, 0x63, 0x8C, 0x3E, 0x13, 0x58, 0x0C,
+    0xE3, 0x59, 0x78, 0x9A, 0x98, 0x60, 0xE5, 0x46, 0x9C, 0xC7, 0x54, 0xB0,
+    0x8E, 0xE3, 0x3F, 0x09, 0x21, 0xBD, 0xEF, 0x15, 0xA9, 0x06, 0x96, 0x9F,
+    0x2D, 0xC5, 0x7A, 0x25, 0xE8, 0x0C, 0xE4, 0xC4, 0x5F, 0x11, 0xE0, 0x4A,
+    0x51, 0x9A, 0xB0, 0x8B, 0x9B, 0x92, 0x7C, 0x3A, 0x13, 0xA0, 0x81, 0xCF,
+    0xFA, 0x11, 0x0F, 0xAC, 0xCC, 0x5E, 0x8D, 0xC2, 0x94, 0x95, 0x97, 0x8B,
+    0x55, 0x53, 0x10, 0x4D, 0x47, 0x3A, 0x17, 0x59, 0x18, 0xAD, 0x5B, 0x54,
+    0x87, 0xBB, 0xA6, 0x97, 0x12, 0xAE, 0x93, 0xF6, 0x15, 0xC6, 0x0A, 0x8D,
+    0x38, 0x7B, 0xCE, 0x3F, 0x65, 0x1E, 0x56, 0x88, 0x0A, 0x52, 0x2B, 0x2D,
+    0xB8, 0x63, 0x51, 0xCA, 0xB6, 0x5D, 0x13, 0xB4, 0x69, 0x3D, 0xB0, 0xB2,
+    0xC8, 0x09, 0x36, 0xFA, 0xD1, 0xCE, 0x67, 0x92, 0x5E, 0x6B, 0xB7, 0xC1,
+    0x10, 0xC4, 0x3E, 0x83, 0x24, 0x7D, 0x22, 0x60, 0x8D, 0x8C, 0x10, 0x23,
+    0x43, 0x1C, 0xB6, 0x92, 0x90, 0xA4, 0xF8, 0xA9, 0x59, 0x3B, 0xF1, 0x24,
+    0x1D, 0x73, 0x7C, 0x0C, 0xD1, 0x6D, 0x75, 0xEB, 0x50, 0xC6, 0x84, 0x2C,
+    0xE0, 0xA2, 0x1D, 0xCE, 0x49, 0x40, 0x36, 0x82, 0x4C, 0xE6, 0x32, 0x52,
+    0xE9, 0x32, 0x5F, 0x05, 0xB7, 0x34, 0x45, 0x2B, 0x12, 0x91, 0x32, 0xB1,
+    0x96, 0x08, 0x4A, 0x37, 0x88, 0xBB, 0xB1, 0xF2, 0x0A, 0x37, 0xD2, 0xC2,
+    0xB3, 0xF9, 0x0E, 0x0D, 0xD7, 0xA2, 0x74, 0xC9, 0xB1, 0xA9, 0xF0, 0x2E,
+    0xC7, 0xE7, 0x21, 0xF4, 0xA4, 0x3D, 0x40, 0x9A, 0x25, 0xFB, 0xC9, 0x9A,
+    0x44, 0xD4, 0x76, 0x31, 0x07, 0xC7, 0x87, 0x62, 0x09, 0x41, 0x76, 0x1E,
+    0xD4, 0x8C, 0x93, 0x29, 0x24, 0xBA, 0x62, 0x09, 0x86, 0xCF, 0x27, 0x7A,
+    0x23, 0x47, 0x1C, 0x7B, 0x13, 0x33, 0x3D, 0x93, 0x6C, 0x0D, 0xD4, 0x9E,
+    0x0F, 0xF3, 0x4C, 0xA3, 0xAB, 0x82, 0x34, 0xC4, 0x2A, 0xEB, 0xE4, 0x59,
+    0xC6, 0x12, 0x05, 0x2B, 0x97, 0x16, 0xE9, 0x6B, 0x20, 0xBE, 0xC7, 0x18,
+    0x12, 0x60, 0x40, 0xA9, 0x09, 0x1F, 0x6B, 0xA9, 0x44, 0x5F, 0x45, 0x80,
+    0x6A, 0xEB, 0x6E, 0x38, 0x16, 0x71, 0x0F, 0x7C, 0xBF, 0xED, 0x11, 0x01,
+    0x46, 0x12, 0x84, 0xDD, 0x96, 0x2B, 0x7B, 0x12, 0x04, 0x7C, 0x0A, 0x0A,
+    0x90, 0x6A, 0x05, 0x89, 0xB4, 0xA9, 0xA4, 0x26, 0x46, 0x9B, 0xDA, 0x39,
+    0x46, 0x09, 0x1A, 0x37, 0x5B, 0x19, 0x52, 0xA9, 0x1C, 0x23, 0x1C, 0x0F,
+    0xE6, 0xB5, 0x7F, 0x7C, 0xC9, 0x7E, 0xFE, 0xD0, 0xBC, 0x10, 0x01, 0x36,
+    0x78, 0x23, 0xBE, 0x18, 0x86, 0x30, 0x8B, 0x3A, 0x21, 0x45, 0x2B, 0x7E,
+    0x45, 0x50, 0x66, 0x71, 0x9C, 0xCC, 0xEA, 0xF6, 0xA7, 0x26, 0xFC, 0x22,
+    0xBC, 0x83, 0x99, 0xF5, 0x4B, 0xBF, 0xCA, 0xF7, 0xCA, 0x63, 0xBA, 0x73,
+    0x17, 0x3C, 0x7A, 0xA8, 0x61, 0x9A, 0x3F, 0x48, 0x5C, 0x3E, 0x33, 0x04,
+    0x21, 0x00, 0x67, 0x66, 0x74, 0x6F, 0x4E, 0xF6, 0x65, 0x3E, 0x44, 0x0E,
+    0x5C, 0xDC, 0x59, 0x53, 0x40, 0x18, 0xC3, 0x52, 0xC0, 0x23, 0x58, 0x4C,
+    0xBB, 0x37, 0x4E, 0xB7, 0xA9, 0xB7, 0x83, 0x68, 0x32, 0xBE, 0x53, 0xAF,
+    0x27, 0x2A, 0x06, 0x97, 0x55, 0xCE, 0x2F, 0xF2, 0x9C, 0xD8, 0xB3, 0x94,
+    0xC5, 0x24, 0x22, 0xB3, 0x47, 0x0E, 0x27, 0x41, 0x5F, 0x41, 0xB3, 0x97,
+    0x53, 0x59, 0x59, 0xF1, 0x60, 0x00, 0x3B, 0x45, 0x2C, 0xF4, 0x96, 0x97,
+    0xB7, 0xA5, 0x36, 0x89, 0x85, 0x2B, 0xBE, 0x6C, 0xCF, 0xDF, 0xB4, 0x0B,
+    0x48, 0xE9, 0x32, 0x8D, 0xE1, 0x15, 0x22, 0xD0, 0xA4, 0x31, 0xB1, 0x15,
+    0xA5, 0xC0, 0xC2, 0xF4, 0x30, 0x7D, 0x98, 0x62, 0xC0, 0xDD, 0x1B, 0x40,
+  },
+}};
+
+static void test_pke512_keygen(void) {
+  for (size_t i = 0; i < sizeof(PKE512_KEYGEN_TESTS)/sizeof(PKE512_KEYGEN_TESTS[0]); i++) {
+    // generate pke512 ek and dk from seed
+    uint8_t got_ek[PKE512_EK_SIZE] = { 0 }, got_dk[PKE512_DK_SIZE] = { 0 };
+    pke512_keygen(got_ek, got_dk, PKE512_KEYGEN_TESTS[i].seed);
+
+    // check for expected ek
+    if (memcmp(&got_ek, &(PKE512_KEYGEN_TESTS[i].exp_ek), sizeof(got_ek))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ek", PKE512_KEYGEN_TESTS[i].name);
+      fail_test(__func__, name, got_ek, sizeof(got_ek), PKE512_KEYGEN_TESTS[i].exp_ek, sizeof(got_ek));
+    }
+
+    // check for expected dk
+    if (memcmp(&got_dk, &(PKE512_KEYGEN_TESTS[i].exp_dk), sizeof(got_dk))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - dk", PKE512_KEYGEN_TESTS[i].name);
+      fail_test(__func__, name, got_dk, sizeof(got_dk), PKE512_KEYGEN_TESTS[i].exp_dk, sizeof(got_dk));
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t ek[PKE512_EK_SIZE]; // test ek (800 bytes)
+  const uint8_t m[32]; // test message (32 bytes)
+  const uint8_t enc_rand[32]; // test randomness (32 bytes)
+  const uint8_t exp[PKE512_CT_SIZE]; // expected ciphertext (768 bytes)
+} PKE512_ENCRYPT_TESTS[] = {{
+  .name = "rand = 0, message = 1",
+  .ek = {
+    0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
+    0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
+    0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
+    0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
+    0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
+    0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
+    0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
+    0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
+    0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
+    0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
+    0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
+    0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
+    0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
+    0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
+    0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
+    0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
+    0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
+    0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
+    0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
+    0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
+    0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
+    0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
+    0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
+    0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
+    0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
+    0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
+    0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
+    0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
+    0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
+    0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
+    0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
+    0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
+    0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
+    0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
+    0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
+    0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
+    0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
+    0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
+    0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
+    0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
+    0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
+    0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
+    0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
+    0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
+    0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
+    0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
+    0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
+    0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
+    0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
+    0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
+    0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
+    0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
+    0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
+    0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
+    0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
+    0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
+    0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
+    0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
+    0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
+    0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
+    0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
+    0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
+    0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
+    0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
+    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+  },
+
+  .m = { 1, 0 },
+  .enc_rand = { 0 },
+
+  .exp = {
+    0x62, 0xab, 0xd0, 0xc6, 0x57, 0x54, 0x84, 0x04, 0x9d, 0x39, 0x85, 0xab,
+    0xed, 0x84, 0x52, 0x30, 0x7d, 0xf6, 0x2a, 0x1a, 0xa0, 0xe6, 0xc7, 0xd3,
+    0x8f, 0x97, 0xff, 0x53, 0x5d, 0xec, 0x9c, 0x18, 0x77, 0x47, 0xf8, 0x1d,
+    0x88, 0x51, 0x39, 0xf5, 0xc3, 0x08, 0x7a, 0x08, 0xff, 0xea, 0xf6, 0x49,
+    0xc7, 0xaa, 0x28, 0xec, 0xe9, 0x1c, 0x65, 0xd0, 0x4c, 0x15, 0x53, 0x10,
+    0x46, 0x82, 0x7c, 0x4e, 0x19, 0xbb, 0xc0, 0xbf, 0xaa, 0x66, 0x53, 0xb7,
+    0x64, 0xb6, 0xbe, 0xd6, 0x15, 0x1e, 0x9a, 0x2e, 0x03, 0x4b, 0x02, 0xa7,
+    0xa3, 0x7b, 0x2d, 0x36, 0x0b, 0x0d, 0xad, 0x0b, 0x64, 0xec, 0x3c, 0x42,
+    0x82, 0xf0, 0xd8, 0x8a, 0x66, 0xf3, 0x16, 0xd7, 0x47, 0xbd, 0x16, 0xa2,
+    0x8f, 0xc8, 0x55, 0xc9, 0x3d, 0xfd, 0x84, 0x86, 0x12, 0x53, 0x33, 0x18,
+    0x5a, 0x19, 0xa7, 0x85, 0x4b, 0xa6, 0x3d, 0xed, 0xea, 0xac, 0xbc, 0x6c,
+    0x5d, 0xf8, 0x9c, 0x19, 0xf0, 0xeb, 0xc1, 0x77, 0x0c, 0x0e, 0xa1, 0xb2,
+    0xec, 0x2a, 0x1c, 0xe2, 0x7e, 0xc4, 0x4f, 0xfd, 0x0a, 0xed, 0xaf, 0x8b,
+    0xf5, 0x37, 0xb0, 0xfc, 0x51, 0x6b, 0x19, 0xd8, 0x14, 0x60, 0xa5, 0xf9,
+    0xed, 0xa3, 0x09, 0x99, 0xe0, 0xb9, 0xdb, 0xef, 0x5d, 0x5f, 0x2e, 0xdb,
+    0x40, 0xb2, 0x96, 0xc5, 0xcc, 0x47, 0x2c, 0xb2, 0xba, 0x83, 0x69, 0x1a,
+    0xd3, 0x60, 0xad, 0xfb, 0x7a, 0xfa, 0x04, 0x51, 0xaa, 0x23, 0x22, 0x5e,
+    0x13, 0xdb, 0x71, 0x88, 0xe7, 0x8b, 0xc0, 0x4f, 0x27, 0x33, 0xd2, 0x74,
+    0x15, 0x6a, 0x06, 0x75, 0x17, 0xaf, 0x71, 0x7c, 0x5d, 0x4b, 0xff, 0x0d,
+    0x5d, 0x63, 0x52, 0x37, 0xdc, 0xd2, 0x22, 0xef, 0x55, 0x50, 0xe9, 0xb1,
+    0xa1, 0x70, 0x41, 0xc0, 0xc1, 0x79, 0xc2, 0x4e, 0x8d, 0xa5, 0x03, 0x0b,
+    0x05, 0x72, 0x94, 0x88, 0x26, 0xe4, 0xc4, 0xd1, 0xb4, 0x8f, 0x06, 0x96,
+    0xa7, 0xc7, 0x32, 0x4f, 0x33, 0x04, 0x1f, 0x1a, 0xff, 0x84, 0x40, 0x11,
+    0x08, 0x95, 0xb8, 0x02, 0x8f, 0x09, 0xae, 0x93, 0xf4, 0x56, 0x1d, 0x82,
+    0xde, 0x2f, 0x77, 0xf4, 0x41, 0x54, 0xcd, 0xe6, 0xc3, 0xf2, 0xb7, 0x69,
+    0x82, 0xe8, 0x37, 0x24, 0x4f, 0x2e, 0xb0, 0x9f, 0xea, 0x99, 0xd1, 0x9b,
+    0x1e, 0x70, 0xa9, 0x26, 0xe4, 0xf5, 0xc6, 0xad, 0x18, 0xac, 0xa7, 0xba,
+    0xe6, 0x98, 0x71, 0x58, 0x30, 0x6c, 0xe4, 0x2d, 0xd6, 0x8f, 0x70, 0xd4,
+    0xb0, 0xca, 0xdb, 0x7b, 0x37, 0xad, 0x0b, 0x5c, 0xe6, 0x40, 0xec, 0x02,
+    0x24, 0x04, 0xec, 0xff, 0x38, 0xb9, 0xfe, 0xa7, 0x9a, 0x3e, 0x02, 0x5c,
+    0x25, 0x6b, 0x3f, 0xd2, 0x8c, 0x85, 0x41, 0x09, 0x28, 0xc0, 0x06, 0xc2,
+    0xb3, 0x93, 0x7d, 0xfa, 0x9f, 0x2c, 0x40, 0x43, 0xa9, 0x2f, 0x9c, 0x25,
+    0x96, 0x15, 0x7b, 0x33, 0x7e, 0xe9, 0xa9, 0xe9, 0x57, 0xe7, 0x05, 0xf7,
+    0xa4, 0x1b, 0x25, 0x07, 0xc8, 0x8d, 0x6e, 0xa1, 0xc7, 0x79, 0x33, 0x9f,
+    0x25, 0x64, 0xe1, 0x9c, 0x88, 0x92, 0x2a, 0xa4, 0xb6, 0x7a, 0x2b, 0x25,
+    0xf3, 0x5b, 0x0f, 0xa3, 0xd1, 0x0c, 0x91, 0xb5, 0xcd, 0x59, 0x73, 0xd8,
+    0xfe, 0x73, 0x3f, 0xf0, 0x21, 0x56, 0x54, 0x2d, 0x25, 0x44, 0x9b, 0x1f,
+    0x15, 0x7a, 0xbf, 0x1b, 0x68, 0xc0, 0x4f, 0xa0, 0xf9, 0xe8, 0xc0, 0x6f,
+    0x86, 0xa5, 0x26, 0x17, 0x5a, 0x20, 0x61, 0x9e, 0x26, 0x6e, 0xd4, 0xca,
+    0xc1, 0xfb, 0xeb, 0x90, 0x40, 0x27, 0x73, 0xb3, 0x3b, 0x09, 0xf5, 0xa9,
+    0xc8, 0xe8, 0xb7, 0xc6, 0x1e, 0x8d, 0xe4, 0x68, 0x60, 0x5b, 0x47, 0x8e,
+    0x05, 0x39, 0x9d, 0x77, 0x0d, 0xfe, 0x6e, 0xe7, 0x90, 0xd6, 0x12, 0xf8,
+    0x2a, 0xcc, 0x03, 0xf2, 0x94, 0x11, 0xdb, 0x4c, 0x75, 0x77, 0x1d, 0xbc,
+    0x0d, 0x0d, 0x63, 0x20, 0xe0, 0xdc, 0xed, 0x64, 0x8f, 0x96, 0x71, 0x90,
+    0xe5, 0xdb, 0xd3, 0xde, 0x6d, 0x27, 0x45, 0x62, 0x30, 0xaa, 0x3d, 0xcf,
+    0x9f, 0xa0, 0x53, 0xdc, 0x9d, 0xb8, 0x7f, 0xd3, 0xad, 0xe8, 0x1b, 0x25,
+    0x21, 0x0e, 0x5c, 0xfc, 0x4f, 0x7c, 0x89, 0x9d, 0x00, 0x27, 0x78, 0xb5,
+    0xdf, 0xff, 0xde, 0x75, 0x2e, 0x08, 0x55, 0x7d, 0x48, 0x4c, 0x05, 0x8c,
+    0x4d, 0x82, 0xa8, 0xfd, 0x2b, 0x90, 0x35, 0x56, 0x5d, 0xc7, 0xdd, 0xa0,
+    0xa5, 0x50, 0x7d, 0xc4, 0x15, 0x7d, 0x12, 0x18, 0xa4, 0x8d, 0xca, 0x26,
+    0xe5, 0x5c, 0xf2, 0x3d, 0x05, 0xd2, 0x27, 0xe9, 0x11, 0x96, 0xee, 0x40,
+    0x18, 0x43, 0xfd, 0x11, 0xa1, 0xde, 0x03, 0x83, 0xae, 0xd7, 0xb3, 0xdc,
+    0xf4, 0x04, 0x70, 0x65, 0xe0, 0x3e, 0xb9, 0xbf, 0x5f, 0x16, 0x71, 0xfb,
+    0x87, 0x34, 0xf0, 0xc4, 0xfb, 0x30, 0x3c, 0x58, 0xe6, 0x55, 0xb6, 0x90,
+    0xb0, 0x72, 0xed, 0xfe, 0xfa, 0x8d, 0xac, 0xc4, 0x4c, 0x78, 0x5c, 0xd4,
+    0x71, 0x34, 0x68, 0xf9, 0x5f, 0x4a, 0xd5, 0x83, 0xc7, 0x9c, 0x19, 0x7c,
+    0x16, 0x87, 0x62, 0x8c, 0x7c, 0x79, 0xcd, 0x4e, 0xe2, 0x3a, 0x55, 0x5e,
+    0xca, 0x3e, 0x46, 0xb4, 0x8f, 0x4e, 0x31, 0x21, 0xd1, 0x98, 0xcc, 0x9d,
+    0xdc, 0x00, 0xa5, 0x60, 0xdc, 0x3e, 0x96, 0x69, 0xc7, 0x3f, 0x05, 0xfd,
+    0x36, 0x6e, 0x49, 0x9f, 0xa2, 0xc9, 0x74, 0x1f, 0x79, 0xe0, 0x25, 0x44,
+    0x76, 0xa9, 0x9c, 0xaa, 0xb9, 0xe1, 0x42, 0x9c, 0x84, 0x15, 0x8f, 0x57,
+    0x86, 0xe3, 0x4c, 0x13, 0xa6, 0xc1, 0xcc, 0x33, 0x72, 0x28, 0x84, 0x95,
+    0xef, 0xcf, 0xa8, 0xa5, 0x41, 0xf6, 0xad, 0x86, 0x01, 0xd7, 0xd8, 0xa8,
+    0xb4, 0x5c, 0xd8, 0x5e, 0x81, 0x71, 0xd3, 0x87, 0x6a, 0xea, 0x11, 0xe6,
+  },
+}};
+
+static void test_pke512_encrypt(void) {
+  for (size_t i = 0; i < sizeof(PKE512_ENCRYPT_TESTS)/sizeof(PKE512_ENCRYPT_TESTS[0]); i++) {
+    // encrypt test message `m` with encryption key `ek` and randomness
+    // `enc_rand`, then store ciphertext to buffer `got`.
+    uint8_t got[PKE512_CT_SIZE] = { 0 };
+    pke512_encrypt(got, PKE512_ENCRYPT_TESTS[i].ek, PKE512_ENCRYPT_TESTS[i].m, PKE512_ENCRYPT_TESTS[i].enc_rand);
+
+    // check for expected ciphertext
+    if (memcmp(got, PKE512_ENCRYPT_TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, PKE512_ENCRYPT_TESTS[i].name, got, sizeof(got), PKE512_ENCRYPT_TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t dk[PKE512_EK_SIZE]; // test decryption key (800 bytes)
+  const uint8_t ct[PKE512_CT_SIZE]; // test ciphertext (32 bytes)
+  const uint8_t exp[32]; // expected message (32 bytes)
+} PKE512_DECRYPT_TESTS[] = {{
+  .name = "rand = 0, message = 1",
+
+  .dk = {
+    0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+    0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+    0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+    0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+    0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+    0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+    0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+    0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+    0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+    0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+    0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+    0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+    0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+    0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+    0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+    0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+    0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+    0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+    0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+    0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+    0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+    0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+    0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+    0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+    0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+    0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+    0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+    0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+    0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+    0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+    0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+    0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+    0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+    0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+    0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+    0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+    0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+    0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+    0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+    0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+    0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+    0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+    0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+    0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+    0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+    0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+    0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+    0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+    0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+    0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+    0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+    0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+    0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+    0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+    0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+    0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+    0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+    0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+    0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+    0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+    0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+    0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+    0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+    0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+  },
+
+  .ct = {
+    0xf8, 0x4a, 0x66, 0x82, 0xed, 0x62, 0xe9, 0x00, 0xf4, 0x10, 0x3e, 0xf4,
+    0x1e, 0x6f, 0x19, 0x37, 0x92, 0xf7, 0x76, 0x6f, 0xcc, 0xd6, 0x77, 0x32,
+    0x92, 0xb1, 0xf6, 0x43, 0xb1, 0x51, 0x0a, 0x25, 0x7c, 0x84, 0x86, 0x35,
+    0x6d, 0x77, 0x12, 0x6c, 0x87, 0x41, 0x8b, 0x4d, 0xac, 0x8e, 0xca, 0x49,
+    0x8b, 0x6c, 0xc2, 0xb1, 0xd3, 0x3f, 0x36, 0x42, 0x4a, 0x21, 0x8d, 0x40,
+    0x68, 0x46, 0x54, 0x2f, 0x36, 0xb7, 0xf1, 0x4e, 0x64, 0xd9, 0xeb, 0xb3,
+    0x30, 0xce, 0xd7, 0x4d, 0x95, 0x22, 0x47, 0x6c, 0xc9, 0x72, 0x9d, 0x91,
+    0x5d, 0xe5, 0xf9, 0x39, 0xb2, 0x0b, 0x35, 0x14, 0xdc, 0x9f, 0x64, 0x60,
+    0x88, 0x1a, 0x29, 0x8c, 0x3e, 0x0e, 0x15, 0x09, 0xdd, 0x0f, 0xdc, 0x7a,
+    0x20, 0xc6, 0x84, 0xa7, 0x03, 0x63, 0x3a, 0x1e, 0xfd, 0x86, 0x9a, 0x3a,
+    0x4c, 0x4e, 0x7b, 0x08, 0x95, 0xe8, 0xe5, 0xd8, 0xaa, 0xcc, 0xbb, 0x42,
+    0x3b, 0xd2, 0x66, 0xf2, 0x7b, 0xf9, 0x06, 0x83, 0x7d, 0xbb, 0xbc, 0x6d,
+    0xf9, 0x7b, 0x09, 0x99, 0xe8, 0xdb, 0x03, 0xd7, 0x56, 0x25, 0x2b, 0x01,
+    0x38, 0x12, 0x92, 0x88, 0xd4, 0xb7, 0xb8, 0x1c, 0x88, 0xe1, 0x73, 0x4f,
+    0x9f, 0x47, 0x19, 0x4c, 0x6a, 0xba, 0x13, 0x54, 0x00, 0x15, 0x91, 0xbc,
+    0xd4, 0x76, 0xab, 0xc3, 0x42, 0xc3, 0x05, 0xab, 0x3e, 0xfa, 0x9a, 0x5e,
+    0xdd, 0x78, 0x2b, 0x59, 0x79, 0x9f, 0xaa, 0x95, 0x52, 0xac, 0x89, 0x1b,
+    0x9c, 0x1f, 0xcb, 0x32, 0x1a, 0x35, 0xf8, 0x0c, 0xcd, 0xe3, 0xae, 0x09,
+    0x50, 0x2a, 0x5b, 0xad, 0x67, 0xce, 0xf2, 0xe3, 0x8d, 0x68, 0x61, 0xfd,
+    0x40, 0x53, 0x7f, 0x8c, 0x72, 0xcd, 0x67, 0x8b, 0x19, 0x66, 0x21, 0x15,
+    0xd2, 0xdd, 0xd8, 0x58, 0xe3, 0xa6, 0x53, 0x43, 0x89, 0x00, 0xdd, 0xe3,
+    0x02, 0xdd, 0x9b, 0xb9, 0xe2, 0xe8, 0x75, 0x73, 0xfe, 0x92, 0x30, 0x3d,
+    0xe4, 0x37, 0x34, 0xb9, 0x7e, 0x4e, 0xa0, 0x2d, 0x2e, 0x61, 0x67, 0x92,
+    0xcb, 0x45, 0x9a, 0x1a, 0x4b, 0xac, 0x9a, 0xee, 0xe6, 0x82, 0x10, 0x18,
+    0x8b, 0x3e, 0x74, 0x15, 0xd1, 0x17, 0x2d, 0x27, 0xa3, 0x70, 0x1e, 0xdd,
+    0x9d, 0x10, 0xb5, 0xf8, 0x68, 0xc4, 0x24, 0x11, 0x4a, 0x59, 0x0f, 0x45,
+    0x06, 0xf5, 0x86, 0x71, 0x05, 0x51, 0xbd, 0xc3, 0x11, 0xa2, 0x17, 0xca,
+    0xae, 0x43, 0x42, 0x07, 0x32, 0x0c, 0x56, 0xf1, 0xef, 0x06, 0x40, 0x80,
+    0xbe, 0x88, 0xc5, 0xbb, 0x54, 0xe6, 0x3a, 0xc8, 0x25, 0x3d, 0x72, 0x08,
+    0x82, 0xda, 0xba, 0x1b, 0xcc, 0x73, 0x24, 0x4c, 0x19, 0x10, 0xd6, 0x00,
+    0xf3, 0xa5, 0xcc, 0x22, 0xce, 0x94, 0x49, 0xe1, 0xdf, 0x8b, 0xc2, 0xba,
+    0xc9, 0x85, 0xff, 0x90, 0xf9, 0xc9, 0xea, 0x3a, 0xfd, 0xb7, 0xcc, 0xcd,
+    0x25, 0x5c, 0x05, 0x96, 0x4e, 0xd9, 0x1c, 0xf6, 0x2a, 0xdc, 0x5d, 0xae,
+    0xfe, 0x53, 0x05, 0xbd, 0xb7, 0xd5, 0xb1, 0xa2, 0xe4, 0xd8, 0x95, 0x85,
+    0xe9, 0x61, 0x8e, 0x62, 0x5b, 0x0d, 0xb3, 0x78, 0x42, 0xc0, 0x62, 0x1d,
+    0xec, 0xb4, 0x7d, 0x30, 0x4e, 0x75, 0xae, 0x2b, 0x9e, 0xd5, 0x9c, 0x48,
+    0xec, 0x40, 0x3f, 0x51, 0x08, 0xb4, 0x92, 0x07, 0x90, 0x50, 0x0b, 0xb0,
+    0x7e, 0x00, 0xfc, 0x6a, 0x1e, 0xb3, 0x49, 0x11, 0x94, 0x63, 0x5a, 0x3f,
+    0x55, 0xf2, 0x1b, 0x23, 0x55, 0x7d, 0x67, 0xa3, 0xf5, 0x35, 0xfa, 0x67,
+    0x3a, 0x87, 0x9c, 0xc7, 0x16, 0x67, 0x6a, 0xf1, 0x4c, 0xfa, 0x76, 0xd4,
+    0xfa, 0xc8, 0xb9, 0xa2, 0xe9, 0x4c, 0x3f, 0x2e, 0x2b, 0xf1, 0xe7, 0xce,
+    0x03, 0xf0, 0x57, 0xaa, 0xcb, 0xb0, 0x81, 0x05, 0xdc, 0x8c, 0x17, 0x7c,
+    0x5a, 0xdf, 0x9d, 0x1c, 0xc5, 0x10, 0x58, 0xcd, 0xa9, 0x55, 0x3d, 0xc9,
+    0x9a, 0x57, 0x46, 0xb5, 0x45, 0x7d, 0x80, 0x7b, 0x37, 0xba, 0x3f, 0x46,
+    0xf1, 0x67, 0x8d, 0x1c, 0xcd, 0x17, 0x0a, 0x5e, 0x25, 0xef, 0x7a, 0x95,
+    0x96, 0x67, 0x75, 0xe2, 0x53, 0xe3, 0x43, 0xda, 0x73, 0x44, 0xf6, 0x41,
+    0x68, 0x48, 0x86, 0x5a, 0x9d, 0x00, 0xa1, 0x0d, 0x10, 0x8e, 0xbf, 0xd7,
+    0x1b, 0x87, 0xc0, 0x86, 0x7e, 0xd1, 0xfc, 0x4d, 0x8a, 0x84, 0xea, 0x17,
+    0x3f, 0x6e, 0xf9, 0xbd, 0xd5, 0x6a, 0xa6, 0x6c, 0x43, 0xfa, 0x90, 0xd2,
+    0x13, 0xcb, 0x03, 0x28, 0x23, 0x10, 0x08, 0x20, 0x4f, 0x9b, 0xed, 0x2f,
+    0x0f, 0x23, 0x1b, 0x0c, 0x6d, 0x8b, 0xed, 0x9e, 0xc2, 0x17, 0xd8, 0x9a,
+    0xa1, 0x31, 0x28, 0x4d, 0xbb, 0x79, 0x3b, 0x02, 0xce, 0xfc, 0x99, 0x1d,
+    0xc7, 0xf2, 0xa8, 0xca, 0x76, 0xbc, 0x55, 0xc0, 0x38, 0x20, 0xdb, 0x1d,
+    0x0b, 0xb0, 0x8e, 0xe5, 0xfb, 0x30, 0x3c, 0x58, 0xe6, 0x55, 0xb6, 0x90,
+    0xb0, 0x72, 0xed, 0xfe, 0xfa, 0x8d, 0xac, 0xc4, 0x4c, 0x78, 0x5c, 0xd4,
+    0x71, 0x34, 0x68, 0xf9, 0x5f, 0x4a, 0xd5, 0x83, 0xc7, 0x9c, 0x19, 0x7c,
+    0x16, 0x87, 0x62, 0x8c, 0x7c, 0x79, 0xcd, 0x4e, 0xe2, 0x3a, 0x55, 0x5e,
+    0xca, 0x3e, 0x46, 0xb4, 0x8f, 0x4e, 0x31, 0x21, 0xd1, 0x98, 0xcc, 0x9d,
+    0xdc, 0x00, 0xa5, 0x60, 0xdc, 0x3e, 0x96, 0x69, 0xc7, 0x3f, 0x05, 0xfd,
+    0x36, 0x6e, 0x49, 0x9f, 0xa2, 0xc9, 0x74, 0x1f, 0x79, 0xe0, 0x25, 0x44,
+    0x76, 0xa9, 0x9c, 0xaa, 0xb9, 0xe1, 0x42, 0x9c, 0x84, 0x15, 0x8f, 0x57,
+    0x86, 0xe3, 0x4c, 0x13, 0xa6, 0xc1, 0xcc, 0x33, 0x72, 0x28, 0x84, 0x95,
+    0xef, 0xcf, 0xa8, 0xa5, 0x41, 0xf6, 0xad, 0x86, 0x01, 0xd7, 0xd8, 0xa8,
+    0xb4, 0x5c, 0xd8, 0x5e, 0x81, 0x71, 0xd3, 0x87, 0x6a, 0xea, 0x11, 0xe6,
+  },
+
+  .exp = { 1, 0 },
+}};
+
+static void test_pke512_decrypt(void) {
+  for (size_t i = 0; i < sizeof(PKE512_DECRYPT_TESTS)/sizeof(PKE512_DECRYPT_TESTS[0]); i++) {
+    // decrypt ciphertext `ct` with decryption key `dk` and store the
+    // plaintext message in output buffer `got`.
+    uint8_t got[32] = { 0 };
+    pke512_decrypt(got, PKE512_DECRYPT_TESTS[i].dk, PKE512_DECRYPT_TESTS[i].ct);
+
+    // check for expected plaintext
+    if (memcmp(got, PKE512_DECRYPT_TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, PKE512_DECRYPT_TESTS[i].name, got, sizeof(got), PKE512_DECRYPT_TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_fips203ipd_kem512_keygen(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t seed[64]; // test seed
+    const uint8_t exp_ek[PKE512_EK_SIZE]; // expected ek (800 bytes)
+    const uint8_t exp_dk[FIPS203IPD_KEM512_DK_SIZE]; // expected dk (1632 bytes)
+  } TESTS[] = {{
+    .name = "all-zero",
+    .seed = { 0 },
+    .exp_ek = {
+      0x9c, 0xe5, 0xc6, 0x7e, 0xfc, 0x9c, 0x33, 0x67, 0xa8, 0x3c, 0x7c, 0x42,
+      0xb0, 0xa1, 0x29, 0x37, 0xc9, 0x40, 0xcf, 0x71, 0x1a, 0xa2, 0xa7, 0x7f,
+      0x94, 0x38, 0x92, 0x8d, 0x69, 0x50, 0xea, 0x60, 0x07, 0xc0, 0xb9, 0x02,
+      0xff, 0x19, 0x77, 0x7b, 0x20, 0x93, 0x12, 0x66, 0x06, 0x77, 0x00, 0xb9,
+      0x69, 0xa0, 0x24, 0x92, 0xec, 0xc0, 0x66, 0x73, 0xce, 0xf6, 0xe1, 0xce,
+      0x36, 0x77, 0x3a, 0x4b, 0xdb, 0x95, 0x38, 0xd5, 0x34, 0x58, 0x26, 0x18,
+      0xde, 0xd2, 0x79, 0xe2, 0x99, 0xa1, 0x20, 0x23, 0x18, 0x13, 0x8c, 0xa8,
+      0xd5, 0x49, 0xb6, 0xc6, 0x08, 0x81, 0xee, 0xd2, 0xb7, 0x4a, 0xb8, 0x84,
+      0xb9, 0x30, 0x74, 0x68, 0x53, 0x59, 0x60, 0x35, 0x27, 0xec, 0x63, 0x8b,
+      0xab, 0xb1, 0x3d, 0x98, 0xf2, 0xa7, 0x3e, 0x2a, 0x36, 0x2a, 0x56, 0x62,
+      0xa3, 0x51, 0x53, 0x8d, 0x53, 0x57, 0xec, 0x7c, 0x20, 0xb6, 0x67, 0x40,
+      0x80, 0xc7, 0x6a, 0x53, 0x65, 0xab, 0x9f, 0x48, 0x3f, 0x78, 0x6c, 0x4e,
+      0x2c, 0xdb, 0xca, 0x23, 0xf0, 0xaa, 0x0a, 0x64, 0x58, 0x9e, 0xb8, 0x6e,
+      0xaa, 0x07, 0x37, 0x71, 0xf0, 0x4d, 0x39, 0x80, 0x8e, 0x90, 0x44, 0x37,
+      0x68, 0xaa, 0x0d, 0x09, 0x22, 0xb5, 0xdf, 0xa1, 0x54, 0xe7, 0xe7, 0x09,
+      0x3d, 0x34, 0x22, 0x38, 0x14, 0xba, 0xa1, 0xb6, 0x6d, 0xae, 0x36, 0x53,
+      0xce, 0xa2, 0x15, 0xb3, 0xac, 0x7d, 0x6c, 0x65, 0xb8, 0x2c, 0x31, 0xae,
+      0xdf, 0xc0, 0x3e, 0x3e, 0xf6, 0x1d, 0xd2, 0x93, 0x15, 0xb5, 0xc1, 0x1c,
+      0x10, 0xa5, 0xb9, 0xdf, 0x13, 0x92, 0x17, 0xa0, 0xc2, 0x3e, 0xf4, 0xbf,
+      0x81, 0x41, 0x0e, 0xbf, 0x16, 0x0f, 0x5b, 0xba, 0x4d, 0x3c, 0x67, 0x18,
+      0xb3, 0x56, 0xb1, 0x85, 0x65, 0x5a, 0xbe, 0xd1, 0x42, 0xa3, 0xc4, 0x99,
+      0x05, 0xe2, 0x28, 0x9d, 0xd4, 0xca, 0x05, 0xa0, 0x3a, 0x05, 0x0b, 0xa0,
+      0x08, 0xd3, 0x52, 0xbd, 0x22, 0xba, 0xeb, 0x89, 0x78, 0x4e, 0xfc, 0x29,
+      0x01, 0x0c, 0xa2, 0x78, 0x4a, 0x6c, 0x21, 0xcb, 0x46, 0x93, 0x79, 0x00,
+      0x99, 0xdb, 0x9e, 0xca, 0x93, 0x25, 0x51, 0x69, 0x95, 0x31, 0x64, 0x15,
+      0x88, 0x8c, 0x35, 0xa8, 0x34, 0x61, 0xbb, 0x5a, 0x86, 0xb4, 0x25, 0x17,
+      0xb2, 0xb1, 0x56, 0xd2, 0x85, 0x98, 0xc9, 0x5b, 0x75, 0x4e, 0x1b, 0x37,
+      0x4f, 0x40, 0xa0, 0xae, 0x53, 0x21, 0x69, 0x72, 0x76, 0x88, 0x67, 0xcd,
+      0x45, 0xa7, 0xca, 0xd6, 0xd5, 0xa7, 0x38, 0x2b, 0x2a, 0x5d, 0x7c, 0x16,
+      0x94, 0x49, 0x6e, 0x05, 0x48, 0xad, 0xf4, 0x57, 0x1b, 0x4b, 0x5c, 0x5f,
+      0x5d, 0x21, 0x93, 0x9f, 0xbc, 0x9b, 0xf2, 0x69, 0xcd, 0xaf, 0x53, 0xbe,
+      0x5f, 0x09, 0xbe, 0x61, 0x93, 0xae, 0xba, 0x59, 0x1f, 0x4f, 0xc1, 0xb9,
+      0x43, 0x97, 0x79, 0x8d, 0xb9, 0x42, 0xe7, 0x3a, 0x75, 0x59, 0x00, 0x17,
+      0xbe, 0x4b, 0x46, 0xc1, 0xe9, 0x4d, 0xd0, 0xfb, 0x1b, 0x8a, 0x94, 0x76,
+      0xf2, 0x8a, 0xcf, 0x0b, 0x21, 0x1a, 0xc1, 0xca, 0x80, 0x2c, 0xa8, 0x72,
+      0x3e, 0x7a, 0x6f, 0x61, 0xf1, 0x34, 0x3c, 0x17, 0x45, 0x9e, 0x55, 0xb2,
+      0x73, 0x2c, 0xce, 0xf6, 0x3c, 0x80, 0xbe, 0x43, 0x59, 0xf7, 0xf6, 0x15,
+      0xf9, 0x0c, 0x2e, 0x8c, 0x6c, 0x08, 0x23, 0x85, 0xae, 0xb7, 0x15, 0x18,
+      0x89, 0x2a, 0x1c, 0x87, 0xcb, 0x3f, 0x36, 0x66, 0x81, 0x47, 0xd9, 0x19,
+      0xc1, 0x06, 0x6b, 0xaa, 0x69, 0xb6, 0xe3, 0xf9, 0x99, 0xf9, 0x26, 0x78,
+      0x0d, 0x66, 0x17, 0x70, 0x15, 0x23, 0x40, 0x73, 0x1d, 0x02, 0x76, 0xc4,
+      0x54, 0xa8, 0x6c, 0x82, 0xe0, 0xb7, 0x4c, 0x4b, 0x4c, 0x1b, 0x77, 0x37,
+      0xf2, 0xf9, 0xae, 0x32, 0x22, 0xb7, 0xd0, 0xf2, 0xcb, 0xc0, 0x01, 0xba,
+      0x54, 0x21, 0xcc, 0x6a, 0x1a, 0x22, 0xd0, 0x85, 0x87, 0xa2, 0x58, 0xce,
+      0x42, 0xbc, 0x69, 0xa1, 0x72, 0x44, 0x76, 0xa5, 0xa7, 0x96, 0xb9, 0x7f,
+      0xa1, 0x5c, 0x85, 0x9c, 0x7c, 0x60, 0x6a, 0xe3, 0x2c, 0x81, 0xbc, 0x99,
+      0x39, 0x69, 0x99, 0xd3, 0x45, 0x7b, 0xb4, 0x23, 0x95, 0x63, 0x2a, 0xb6,
+      0x99, 0x53, 0x40, 0xb5, 0x14, 0x80, 0x0f, 0x58, 0x2e, 0x56, 0x95, 0x34,
+      0xd0, 0x1a, 0x27, 0x42, 0xdc, 0x2f, 0x0a, 0x35, 0xbf, 0xad, 0x61, 0x86,
+      0x38, 0xb5, 0x9b, 0xcf, 0xc3, 0x3b, 0xb4, 0xc2, 0x4d, 0x35, 0xe7, 0x65,
+      0x62, 0xfc, 0x4b, 0xdc, 0x44, 0xb4, 0x16, 0x41, 0x31, 0x3b, 0x0c, 0x5f,
+      0xca, 0x92, 0x6c, 0x54, 0xd3, 0xc6, 0x42, 0xe5, 0x2a, 0x62, 0x06, 0x38,
+      0x67, 0xc8, 0xba, 0x3a, 0x0a, 0x79, 0x76, 0x13, 0x5e, 0xfe, 0x3b, 0x6c,
+      0x49, 0xea, 0x26, 0x5d, 0x55, 0xa2, 0xd1, 0xd5, 0x67, 0x7f, 0x49, 0xb0,
+      0x9e, 0xba, 0x38, 0x23, 0x4a, 0xbe, 0x38, 0xb3, 0x95, 0x27, 0xa8, 0x17,
+      0x42, 0x14, 0x4e, 0x93, 0x43, 0x82, 0xb2, 0x75, 0x64, 0x29, 0x2a, 0x24,
+      0xd6, 0xa5, 0x38, 0x91, 0x6b, 0x21, 0x48, 0xd2, 0x3f, 0x78, 0xe7, 0x0a,
+      0x59, 0xe9, 0x80, 0x96, 0xc9, 0x12, 0x03, 0xf7, 0x79, 0x65, 0x21, 0x1f,
+      0x2e, 0xea, 0x2f, 0xc6, 0xfc, 0x1f, 0x59, 0x63, 0x4e, 0x24, 0x6b, 0x0c,
+      0x9e, 0x24, 0x76, 0x9c, 0xe5, 0xa9, 0x4f, 0xc2, 0x7c, 0x33, 0xd5, 0x56,
+      0x50, 0x02, 0x8f, 0x95, 0x1b, 0x2a, 0x30, 0x75, 0xc9, 0x8b, 0x87, 0x87,
+      0x46, 0xe0, 0x3d, 0xc9, 0x1c, 0xbf, 0xdd, 0x97, 0x25, 0xec, 0x09, 0xb4,
+      0x4d, 0xb9, 0x0f, 0x0c, 0x66, 0x2b, 0xa5, 0x09, 0x6e, 0x9d, 0xab, 0x07,
+      0x6a, 0x7b, 0x7b, 0x1a, 0xca, 0xb4, 0xeb, 0x2b, 0x79, 0x5b, 0x65, 0x31,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+    },
+
+    .exp_dk = {
+      0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+      0x9c, 0xe5, 0xc6, 0x7e, 0xfc, 0x9c, 0x33, 0x67, 0xa8, 0x3c, 0x7c, 0x42,
+      0xb0, 0xa1, 0x29, 0x37, 0xc9, 0x40, 0xcf, 0x71, 0x1a, 0xa2, 0xa7, 0x7f,
+      0x94, 0x38, 0x92, 0x8d, 0x69, 0x50, 0xea, 0x60, 0x07, 0xc0, 0xb9, 0x02,
+      0xff, 0x19, 0x77, 0x7b, 0x20, 0x93, 0x12, 0x66, 0x06, 0x77, 0x00, 0xb9,
+      0x69, 0xa0, 0x24, 0x92, 0xec, 0xc0, 0x66, 0x73, 0xce, 0xf6, 0xe1, 0xce,
+      0x36, 0x77, 0x3a, 0x4b, 0xdb, 0x95, 0x38, 0xd5, 0x34, 0x58, 0x26, 0x18,
+      0xde, 0xd2, 0x79, 0xe2, 0x99, 0xa1, 0x20, 0x23, 0x18, 0x13, 0x8c, 0xa8,
+      0xd5, 0x49, 0xb6, 0xc6, 0x08, 0x81, 0xee, 0xd2, 0xb7, 0x4a, 0xb8, 0x84,
+      0xb9, 0x30, 0x74, 0x68, 0x53, 0x59, 0x60, 0x35, 0x27, 0xec, 0x63, 0x8b,
+      0xab, 0xb1, 0x3d, 0x98, 0xf2, 0xa7, 0x3e, 0x2a, 0x36, 0x2a, 0x56, 0x62,
+      0xa3, 0x51, 0x53, 0x8d, 0x53, 0x57, 0xec, 0x7c, 0x20, 0xb6, 0x67, 0x40,
+      0x80, 0xc7, 0x6a, 0x53, 0x65, 0xab, 0x9f, 0x48, 0x3f, 0x78, 0x6c, 0x4e,
+      0x2c, 0xdb, 0xca, 0x23, 0xf0, 0xaa, 0x0a, 0x64, 0x58, 0x9e, 0xb8, 0x6e,
+      0xaa, 0x07, 0x37, 0x71, 0xf0, 0x4d, 0x39, 0x80, 0x8e, 0x90, 0x44, 0x37,
+      0x68, 0xaa, 0x0d, 0x09, 0x22, 0xb5, 0xdf, 0xa1, 0x54, 0xe7, 0xe7, 0x09,
+      0x3d, 0x34, 0x22, 0x38, 0x14, 0xba, 0xa1, 0xb6, 0x6d, 0xae, 0x36, 0x53,
+      0xce, 0xa2, 0x15, 0xb3, 0xac, 0x7d, 0x6c, 0x65, 0xb8, 0x2c, 0x31, 0xae,
+      0xdf, 0xc0, 0x3e, 0x3e, 0xf6, 0x1d, 0xd2, 0x93, 0x15, 0xb5, 0xc1, 0x1c,
+      0x10, 0xa5, 0xb9, 0xdf, 0x13, 0x92, 0x17, 0xa0, 0xc2, 0x3e, 0xf4, 0xbf,
+      0x81, 0x41, 0x0e, 0xbf, 0x16, 0x0f, 0x5b, 0xba, 0x4d, 0x3c, 0x67, 0x18,
+      0xb3, 0x56, 0xb1, 0x85, 0x65, 0x5a, 0xbe, 0xd1, 0x42, 0xa3, 0xc4, 0x99,
+      0x05, 0xe2, 0x28, 0x9d, 0xd4, 0xca, 0x05, 0xa0, 0x3a, 0x05, 0x0b, 0xa0,
+      0x08, 0xd3, 0x52, 0xbd, 0x22, 0xba, 0xeb, 0x89, 0x78, 0x4e, 0xfc, 0x29,
+      0x01, 0x0c, 0xa2, 0x78, 0x4a, 0x6c, 0x21, 0xcb, 0x46, 0x93, 0x79, 0x00,
+      0x99, 0xdb, 0x9e, 0xca, 0x93, 0x25, 0x51, 0x69, 0x95, 0x31, 0x64, 0x15,
+      0x88, 0x8c, 0x35, 0xa8, 0x34, 0x61, 0xbb, 0x5a, 0x86, 0xb4, 0x25, 0x17,
+      0xb2, 0xb1, 0x56, 0xd2, 0x85, 0x98, 0xc9, 0x5b, 0x75, 0x4e, 0x1b, 0x37,
+      0x4f, 0x40, 0xa0, 0xae, 0x53, 0x21, 0x69, 0x72, 0x76, 0x88, 0x67, 0xcd,
+      0x45, 0xa7, 0xca, 0xd6, 0xd5, 0xa7, 0x38, 0x2b, 0x2a, 0x5d, 0x7c, 0x16,
+      0x94, 0x49, 0x6e, 0x05, 0x48, 0xad, 0xf4, 0x57, 0x1b, 0x4b, 0x5c, 0x5f,
+      0x5d, 0x21, 0x93, 0x9f, 0xbc, 0x9b, 0xf2, 0x69, 0xcd, 0xaf, 0x53, 0xbe,
+      0x5f, 0x09, 0xbe, 0x61, 0x93, 0xae, 0xba, 0x59, 0x1f, 0x4f, 0xc1, 0xb9,
+      0x43, 0x97, 0x79, 0x8d, 0xb9, 0x42, 0xe7, 0x3a, 0x75, 0x59, 0x00, 0x17,
+      0xbe, 0x4b, 0x46, 0xc1, 0xe9, 0x4d, 0xd0, 0xfb, 0x1b, 0x8a, 0x94, 0x76,
+      0xf2, 0x8a, 0xcf, 0x0b, 0x21, 0x1a, 0xc1, 0xca, 0x80, 0x2c, 0xa8, 0x72,
+      0x3e, 0x7a, 0x6f, 0x61, 0xf1, 0x34, 0x3c, 0x17, 0x45, 0x9e, 0x55, 0xb2,
+      0x73, 0x2c, 0xce, 0xf6, 0x3c, 0x80, 0xbe, 0x43, 0x59, 0xf7, 0xf6, 0x15,
+      0xf9, 0x0c, 0x2e, 0x8c, 0x6c, 0x08, 0x23, 0x85, 0xae, 0xb7, 0x15, 0x18,
+      0x89, 0x2a, 0x1c, 0x87, 0xcb, 0x3f, 0x36, 0x66, 0x81, 0x47, 0xd9, 0x19,
+      0xc1, 0x06, 0x6b, 0xaa, 0x69, 0xb6, 0xe3, 0xf9, 0x99, 0xf9, 0x26, 0x78,
+      0x0d, 0x66, 0x17, 0x70, 0x15, 0x23, 0x40, 0x73, 0x1d, 0x02, 0x76, 0xc4,
+      0x54, 0xa8, 0x6c, 0x82, 0xe0, 0xb7, 0x4c, 0x4b, 0x4c, 0x1b, 0x77, 0x37,
+      0xf2, 0xf9, 0xae, 0x32, 0x22, 0xb7, 0xd0, 0xf2, 0xcb, 0xc0, 0x01, 0xba,
+      0x54, 0x21, 0xcc, 0x6a, 0x1a, 0x22, 0xd0, 0x85, 0x87, 0xa2, 0x58, 0xce,
+      0x42, 0xbc, 0x69, 0xa1, 0x72, 0x44, 0x76, 0xa5, 0xa7, 0x96, 0xb9, 0x7f,
+      0xa1, 0x5c, 0x85, 0x9c, 0x7c, 0x60, 0x6a, 0xe3, 0x2c, 0x81, 0xbc, 0x99,
+      0x39, 0x69, 0x99, 0xd3, 0x45, 0x7b, 0xb4, 0x23, 0x95, 0x63, 0x2a, 0xb6,
+      0x99, 0x53, 0x40, 0xb5, 0x14, 0x80, 0x0f, 0x58, 0x2e, 0x56, 0x95, 0x34,
+      0xd0, 0x1a, 0x27, 0x42, 0xdc, 0x2f, 0x0a, 0x35, 0xbf, 0xad, 0x61, 0x86,
+      0x38, 0xb5, 0x9b, 0xcf, 0xc3, 0x3b, 0xb4, 0xc2, 0x4d, 0x35, 0xe7, 0x65,
+      0x62, 0xfc, 0x4b, 0xdc, 0x44, 0xb4, 0x16, 0x41, 0x31, 0x3b, 0x0c, 0x5f,
+      0xca, 0x92, 0x6c, 0x54, 0xd3, 0xc6, 0x42, 0xe5, 0x2a, 0x62, 0x06, 0x38,
+      0x67, 0xc8, 0xba, 0x3a, 0x0a, 0x79, 0x76, 0x13, 0x5e, 0xfe, 0x3b, 0x6c,
+      0x49, 0xea, 0x26, 0x5d, 0x55, 0xa2, 0xd1, 0xd5, 0x67, 0x7f, 0x49, 0xb0,
+      0x9e, 0xba, 0x38, 0x23, 0x4a, 0xbe, 0x38, 0xb3, 0x95, 0x27, 0xa8, 0x17,
+      0x42, 0x14, 0x4e, 0x93, 0x43, 0x82, 0xb2, 0x75, 0x64, 0x29, 0x2a, 0x24,
+      0xd6, 0xa5, 0x38, 0x91, 0x6b, 0x21, 0x48, 0xd2, 0x3f, 0x78, 0xe7, 0x0a,
+      0x59, 0xe9, 0x80, 0x96, 0xc9, 0x12, 0x03, 0xf7, 0x79, 0x65, 0x21, 0x1f,
+      0x2e, 0xea, 0x2f, 0xc6, 0xfc, 0x1f, 0x59, 0x63, 0x4e, 0x24, 0x6b, 0x0c,
+      0x9e, 0x24, 0x76, 0x9c, 0xe5, 0xa9, 0x4f, 0xc2, 0x7c, 0x33, 0xd5, 0x56,
+      0x50, 0x02, 0x8f, 0x95, 0x1b, 0x2a, 0x30, 0x75, 0xc9, 0x8b, 0x87, 0x87,
+      0x46, 0xe0, 0x3d, 0xc9, 0x1c, 0xbf, 0xdd, 0x97, 0x25, 0xec, 0x09, 0xb4,
+      0x4d, 0xb9, 0x0f, 0x0c, 0x66, 0x2b, 0xa5, 0x09, 0x6e, 0x9d, 0xab, 0x07,
+      0x6a, 0x7b, 0x7b, 0x1a, 0xca, 0xb4, 0xeb, 0x2b, 0x79, 0x5b, 0x65, 0x31,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf5, 0xfa, 0x45, 0xab,
+      0xbf, 0xdc, 0xbb, 0x98, 0xdc, 0x4a, 0x17, 0xf6, 0xda, 0xe9, 0x1b, 0x8c,
+      0x74, 0x85, 0x1b, 0x10, 0xb2, 0xa2, 0xeb, 0x1e, 0x51, 0x56, 0xc0, 0x2e,
+      0xcf, 0x56, 0xd9, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+  }, {
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Key Generation -- ML-KEM-512",
+    .seed = {
+      // z
+      0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42, 0x42, 0x4A, 0x87, 0xC1,
+      0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88, 0x18, 0x69, 0x07, 0x7E,
+      0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
+
+      // d
+      0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42, 0x42, 0x4A, 0x87, 0xC1,
+      0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88, 0x18, 0x69, 0x07, 0x7E,
+      0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
+    },
+
+    .exp_ek = {
+      0xC6, 0x5A, 0x1D, 0x9D, 0x47, 0x97, 0x77, 0xE6, 0x90, 0x5A, 0x91, 0xA5,
+      0xCB, 0x24, 0x55, 0x1C, 0x8B, 0x1E, 0x52, 0xA3, 0xC7, 0x7B, 0x63, 0x31,
+      0x3F, 0xFC, 0x8B, 0x58, 0x17, 0x81, 0x52, 0x59, 0xA6, 0xAD, 0xB5, 0x96,
+      0x45, 0xDC, 0x4B, 0xB1, 0x43, 0x6D, 0x51, 0xE6, 0x2A, 0x09, 0x68, 0x34,
+      0xAF, 0x43, 0x77, 0x25, 0x10, 0xC4, 0xED, 0xF3, 0x4C, 0xDE, 0x0A, 0x5B,
+      0x57, 0xC1, 0x45, 0xE6, 0x87, 0xCB, 0x87, 0x16, 0x2F, 0x00, 0x1C, 0x21,
+      0xC9, 0xE1, 0x93, 0x4A, 0xC1, 0x1A, 0xAF, 0xA7, 0x0F, 0xF8, 0x10, 0x73,
+      0x26, 0x50, 0xB3, 0x2A, 0x30, 0x18, 0xA7, 0xC5, 0x0C, 0xD7, 0x36, 0x79,
+      0x62, 0x22, 0xC8, 0xAB, 0x82, 0x1A, 0x92, 0x83, 0xBE, 0x1C, 0xC2, 0x04,
+      0xC3, 0xF1, 0x63, 0x0D, 0x3C, 0xCC, 0xDB, 0x0A, 0x9A, 0x3D, 0x17, 0x55,
+      0x2B, 0x91, 0x58, 0xC0, 0x66, 0x4E, 0x5D, 0x6A, 0x04, 0xB0, 0xFA, 0x36,
+      0xDE, 0x45, 0x86, 0x2A, 0x46, 0xA3, 0x9E, 0xC5, 0x97, 0xAE, 0x42, 0xC3,
+      0x11, 0xC4, 0xAC, 0x22, 0x4A, 0x72, 0xD6, 0xF2, 0x53, 0xBB, 0x52, 0x35,
+      0xF7, 0xA2, 0xB8, 0xB0, 0xF2, 0x4D, 0x13, 0x76, 0xAF, 0x58, 0x87, 0x46,
+      0xF3, 0xBB, 0x8E, 0x03, 0x65, 0x07, 0x87, 0x61, 0xCA, 0xB9, 0x83, 0xA4,
+      0xA6, 0xA9, 0x40, 0xA3, 0xD9, 0x97, 0x04, 0x7A, 0x8F, 0x36, 0xA7, 0x31,
+      0xE8, 0x96, 0x52, 0x36, 0xC3, 0x7B, 0xF2, 0x00, 0x08, 0x2F, 0x82, 0x1D,
+      0xCA, 0x77, 0x16, 0xC4, 0x44, 0xA9, 0x0B, 0xEC, 0x53, 0x07, 0x4B, 0xBA,
+      0x58, 0xC1, 0x32, 0xBF, 0xB9, 0xA2, 0xAC, 0xE2, 0xCE, 0xC9, 0xAA, 0x65,
+      0x8E, 0xAC, 0x12, 0x32, 0xCC, 0xCA, 0x3C, 0x81, 0x7A, 0x92, 0xC1, 0x19,
+      0x5C, 0x05, 0xC0, 0xE1, 0xD6, 0x63, 0x9F, 0xD2, 0xAD, 0xE5, 0x31, 0x60,
+      0x7D, 0x48, 0x8B, 0x74, 0xA7, 0x47, 0xCF, 0xF4, 0x7F, 0xCA, 0x5C, 0x8B,
+      0x21, 0x63, 0xCA, 0x03, 0xC5, 0x45, 0xED, 0x10, 0x32, 0x78, 0x43, 0x0C,
+      0x60, 0xB2, 0x38, 0x1A, 0x09, 0x42, 0x7F, 0xD1, 0x30, 0xF8, 0x59, 0xBF,
+      0x5D, 0xB7, 0x76, 0xDA, 0x09, 0x5D, 0xCA, 0x58, 0x04, 0xFA, 0x63, 0xB0,
+      0xD7, 0xD8, 0x7F, 0xA9, 0x41, 0x5C, 0x72, 0xFB, 0x51, 0x87, 0x2A, 0x98,
+      0x9F, 0x46, 0x6C, 0x98, 0x4B, 0xC7, 0x4C, 0x29, 0xB8, 0x63, 0x20, 0x19,
+      0xCA, 0x04, 0x0C, 0x9C, 0xA3, 0x5E, 0x22, 0x60, 0x8D, 0xAA, 0x70, 0x35,
+      0x7A, 0xE2, 0xC3, 0xAD, 0x83, 0x63, 0x1F, 0xAA, 0x17, 0x4E, 0x0A, 0xCD,
+      0xF5, 0xDB, 0xBF, 0x3C, 0xF6, 0x8A, 0x05, 0xB6, 0x54, 0x3A, 0xB6, 0x26,
+      0x8E, 0x1A, 0x51, 0xB0, 0x93, 0x2C, 0x17, 0xB0, 0x0A, 0x13, 0x71, 0xB2,
+      0xDA, 0xB2, 0x41, 0xF9, 0x2A, 0x43, 0xFF, 0xB4, 0x56, 0xD0, 0xA8, 0xC8,
+      0x86, 0x0A, 0x8E, 0x28, 0xA6, 0x1A, 0x21, 0x30, 0x7C, 0xC0, 0x45, 0x6D,
+      0xA4, 0x24, 0x29, 0x05, 0xCB, 0x1D, 0x3D, 0x0B, 0xBD, 0x81, 0xBB, 0x8E,
+      0xE2, 0x74, 0xA4, 0x3C, 0x76, 0xC3, 0x10, 0x01, 0x95, 0x15, 0xFC, 0xC1,
+      0x40, 0x46, 0x7C, 0x33, 0x37, 0x0C, 0x86, 0x80, 0x8E, 0xCA, 0xA5, 0x8E,
+      0x3B, 0xA9, 0x3A, 0x2C, 0x11, 0x90, 0x46, 0x1C, 0x1D, 0xFA, 0x11, 0x30,
+      0x20, 0x01, 0xBB, 0xAB, 0x4C, 0xB1, 0xE3, 0x64, 0x2E, 0xF8, 0xCB, 0x26,
+      0x30, 0x9B, 0x60, 0x52, 0x3B, 0xC2, 0x18, 0x87, 0xB0, 0x7F, 0x89, 0x8C,
+      0xE5, 0x62, 0xA6, 0xCA, 0x77, 0x8E, 0xA0, 0x15, 0x05, 0x85, 0x13, 0x78,
+      0xCE, 0xA8, 0xBB, 0x7F, 0xC0, 0x9D, 0x11, 0x96, 0x1B, 0x6C, 0x59, 0x6F,
+      0x93, 0x54, 0x2A, 0x99, 0x04, 0x86, 0x4E, 0xB1, 0x0C, 0xD0, 0xA7, 0x03,
+      0xDB, 0xA9, 0x89, 0x21, 0x86, 0x1A, 0x87, 0xB0, 0x56, 0x52, 0x5C, 0x71,
+      0xA8, 0x43, 0x55, 0x3E, 0x64, 0x00, 0x77, 0x74, 0x37, 0xC9, 0x5C, 0xCC,
+      0x80, 0x85, 0xCC, 0x0C, 0x47, 0x7D, 0x66, 0x5A, 0x44, 0x79, 0x01, 0x9D,
+      0x4C, 0xD4, 0x42, 0xF7, 0x4A, 0x3C, 0xD8, 0x16, 0x9F, 0x42, 0x62, 0xB8,
+      0x27, 0x1B, 0x5D, 0x5A, 0x67, 0xC8, 0xC1, 0x61, 0x1A, 0xAE, 0x7B, 0x3D,
+      0x05, 0x34, 0xC0, 0x85, 0x97, 0x16, 0xFD, 0xF0, 0xBB, 0x68, 0x94, 0x90,
+      0x94, 0xC0, 0x6A, 0x1B, 0x73, 0xC9, 0xAA, 0x1C, 0xBD, 0xF3, 0x31, 0x54,
+      0x3D, 0xE0, 0x02, 0xA8, 0xC0, 0x6F, 0x94, 0xE8, 0x81, 0x0A, 0x5C, 0xB3,
+      0x73, 0x83, 0x27, 0x45, 0xD7, 0x20, 0x68, 0x3B, 0x57, 0x48, 0x75, 0xA6,
+      0x66, 0x94, 0x6D, 0x02, 0x96, 0x89, 0x3F, 0x2B, 0x59, 0xE9, 0x07, 0x48,
+      0x8D, 0x8C, 0x84, 0x89, 0xD4, 0x74, 0xD9, 0x29, 0xA0, 0x5A, 0x57, 0x3E,
+      0xD6, 0x67, 0x49, 0x03, 0x71, 0xA4, 0x6D, 0x45, 0x56, 0xCB, 0xB6, 0x8A,
+      0xAA, 0x79, 0xCC, 0x3E, 0xC6, 0x65, 0x34, 0x13, 0x57, 0x6C, 0x22, 0x8E,
+      0x37, 0x9A, 0x14, 0xCB, 0x90, 0xB7, 0xB7, 0x59, 0x1B, 0x19, 0xA7, 0xBD,
+      0x37, 0xA1, 0xC4, 0xD3, 0x78, 0x59, 0x89, 0x22, 0x19, 0x44, 0x2B, 0xB0,
+      0xB9, 0xB9, 0xBA, 0x67, 0xBA, 0x3B, 0xC0, 0xD0, 0x95, 0xC8, 0x80, 0x3C,
+      0xEB, 0xE9, 0x7A, 0xFF, 0x0B, 0x1C, 0x15, 0x35, 0x78, 0xA1, 0x30, 0xCD,
+      0x81, 0x57, 0xCF, 0x74, 0x59, 0x46, 0xC2, 0xF5, 0x72, 0x6D, 0x9C, 0x11,
+      0x27, 0x35, 0x75, 0x50, 0x52, 0x91, 0x34, 0x65, 0x28, 0xEE, 0x0B, 0xAC,
+      0x04, 0x7C, 0xC9, 0x84, 0x53, 0x8B, 0x97, 0xBB, 0xAB, 0xFC, 0xC3, 0x57,
+      0xDC, 0xB8, 0xA9, 0x8F, 0xB8, 0x57, 0xC9, 0xC5, 0x2D, 0x1B, 0x78, 0x67,
+      0x49, 0xCA, 0x61, 0x89, 0x2B, 0x09, 0x75, 0x99, 0x80, 0x52, 0x00, 0x91,
+      0xB9, 0xB4, 0x77, 0xC7, 0x0E, 0x6C, 0x46, 0x58, 0x6B, 0x1C, 0xCE, 0xBE,
+      0x87, 0xBC, 0xF6, 0xDF, 0x03, 0xC2, 0xB2, 0x7C, 0xB0, 0x9F, 0xA0, 0x3F,
+      0x63, 0x16, 0x09, 0x58, 0x38, 0x3B, 0xE6, 0x36,
+    },
+
+    .exp_dk = {
+      0x37, 0xEC, 0x47, 0x7E, 0x21, 0x7B, 0xFB, 0x40, 0x38, 0x4C, 0x85, 0x0E,
+      0x51, 0xC1, 0x83, 0x71, 0x58, 0xBD, 0xBC, 0x23, 0xA3, 0x18, 0x32, 0xBC,
+      0x25, 0xC9, 0x1B, 0x31, 0x21, 0x44, 0x4A, 0xD4, 0x53, 0x37, 0x33, 0xBA,
+      0xFF, 0x07, 0xCA, 0x81, 0x7B, 0x64, 0xB2, 0xCA, 0x42, 0x99, 0xAA, 0x26,
+      0x45, 0x4C, 0xBA, 0xFB, 0x35, 0xB6, 0xAB, 0xE1, 0x18, 0x5C, 0xB4, 0x7C,
+      0x4C, 0xD6, 0x1A, 0xF9, 0x83, 0x83, 0xC4, 0x81, 0x4B, 0x20, 0xAB, 0x87,
+      0x54, 0xFC, 0x51, 0x4F, 0x23, 0x07, 0x41, 0x14, 0xC3, 0xE5, 0xA8, 0x10,
+      0xA4, 0x53, 0xB8, 0x55, 0xAA, 0x7F, 0x13, 0x10, 0xC7, 0x4B, 0x0B, 0x01,
+      0xE5, 0xAA, 0xB2, 0xE8, 0x71, 0x73, 0x8F, 0xAC, 0x27, 0x86, 0xC7, 0xA0,
+      0x5D, 0x6B, 0x3B, 0x32, 0xA0, 0x50, 0xD0, 0xFB, 0x22, 0x39, 0x56, 0xC9,
+      0x5C, 0xA0, 0xC2, 0xC1, 0xD5, 0x41, 0x54, 0xA7, 0x7B, 0xD3, 0x37, 0x37,
+      0xA4, 0x9A, 0x00, 0x65, 0xD1, 0x42, 0x4A, 0x2A, 0xBA, 0xFD, 0x52, 0xAA,
+      0x93, 0x4C, 0x98, 0x04, 0x93, 0x92, 0x08, 0xF0, 0x5C, 0xCF, 0x8B, 0x8B,
+      0x80, 0x86, 0x31, 0x6E, 0x09, 0x43, 0xA0, 0x87, 0x10, 0x50, 0x0C, 0x91,
+      0x8A, 0x2B, 0x21, 0x8D, 0x37, 0xB8, 0x5A, 0xE2, 0x80, 0x22, 0xCB, 0x01,
+      0x34, 0xFB, 0x49, 0xF5, 0xC4, 0x5D, 0x98, 0xD3, 0xC0, 0x4B, 0x75, 0x5A,
+      0x60, 0x88, 0x04, 0x22, 0x66, 0x8E, 0x2B, 0x30, 0x1B, 0x18, 0xD5, 0x19,
+      0x4D, 0xE9, 0x91, 0xB2, 0x65, 0xBF, 0x94, 0x69, 0x7E, 0x6A, 0x4B, 0x81,
+      0x50, 0xC8, 0xB8, 0x52, 0x03, 0x39, 0x15, 0x63, 0x5E, 0x30, 0x66, 0x5B,
+      0xDA, 0x21, 0x91, 0xDA, 0xA5, 0x05, 0xD4, 0x33, 0x44, 0xFD, 0x29, 0xC9,
+      0xFC, 0xC1, 0xC5, 0x07, 0x69, 0x1D, 0x47, 0x5B, 0x61, 0x7C, 0x94, 0x8F,
+      0xCC, 0x84, 0xB1, 0xB0, 0x8A, 0x1C, 0x63, 0x8C, 0x3E, 0x13, 0x58, 0x0C,
+      0xE3, 0x59, 0x78, 0x9A, 0x98, 0x60, 0xE5, 0x46, 0x9C, 0xC7, 0x54, 0xB0,
+      0x8E, 0xE3, 0x3F, 0x09, 0x21, 0xBD, 0xEF, 0x15, 0xA9, 0x06, 0x96, 0x9F,
+      0x2D, 0xC5, 0x7A, 0x25, 0xE8, 0x0C, 0xE4, 0xC4, 0x5F, 0x11, 0xE0, 0x4A,
+      0x51, 0x9A, 0xB0, 0x8B, 0x9B, 0x92, 0x7C, 0x3A, 0x13, 0xA0, 0x81, 0xCF,
+      0xFA, 0x11, 0x0F, 0xAC, 0xCC, 0x5E, 0x8D, 0xC2, 0x94, 0x95, 0x97, 0x8B,
+      0x55, 0x53, 0x10, 0x4D, 0x47, 0x3A, 0x17, 0x59, 0x18, 0xAD, 0x5B, 0x54,
+      0x87, 0xBB, 0xA6, 0x97, 0x12, 0xAE, 0x93, 0xF6, 0x15, 0xC6, 0x0A, 0x8D,
+      0x38, 0x7B, 0xCE, 0x3F, 0x65, 0x1E, 0x56, 0x88, 0x0A, 0x52, 0x2B, 0x2D,
+      0xB8, 0x63, 0x51, 0xCA, 0xB6, 0x5D, 0x13, 0xB4, 0x69, 0x3D, 0xB0, 0xB2,
+      0xC8, 0x09, 0x36, 0xFA, 0xD1, 0xCE, 0x67, 0x92, 0x5E, 0x6B, 0xB7, 0xC1,
+      0x10, 0xC4, 0x3E, 0x83, 0x24, 0x7D, 0x22, 0x60, 0x8D, 0x8C, 0x10, 0x23,
+      0x43, 0x1C, 0xB6, 0x92, 0x90, 0xA4, 0xF8, 0xA9, 0x59, 0x3B, 0xF1, 0x24,
+      0x1D, 0x73, 0x7C, 0x0C, 0xD1, 0x6D, 0x75, 0xEB, 0x50, 0xC6, 0x84, 0x2C,
+      0xE0, 0xA2, 0x1D, 0xCE, 0x49, 0x40, 0x36, 0x82, 0x4C, 0xE6, 0x32, 0x52,
+      0xE9, 0x32, 0x5F, 0x05, 0xB7, 0x34, 0x45, 0x2B, 0x12, 0x91, 0x32, 0xB1,
+      0x96, 0x08, 0x4A, 0x37, 0x88, 0xBB, 0xB1, 0xF2, 0x0A, 0x37, 0xD2, 0xC2,
+      0xB3, 0xF9, 0x0E, 0x0D, 0xD7, 0xA2, 0x74, 0xC9, 0xB1, 0xA9, 0xF0, 0x2E,
+      0xC7, 0xE7, 0x21, 0xF4, 0xA4, 0x3D, 0x40, 0x9A, 0x25, 0xFB, 0xC9, 0x9A,
+      0x44, 0xD4, 0x76, 0x31, 0x07, 0xC7, 0x87, 0x62, 0x09, 0x41, 0x76, 0x1E,
+      0xD4, 0x8C, 0x93, 0x29, 0x24, 0xBA, 0x62, 0x09, 0x86, 0xCF, 0x27, 0x7A,
+      0x23, 0x47, 0x1C, 0x7B, 0x13, 0x33, 0x3D, 0x93, 0x6C, 0x0D, 0xD4, 0x9E,
+      0x0F, 0xF3, 0x4C, 0xA3, 0xAB, 0x82, 0x34, 0xC4, 0x2A, 0xEB, 0xE4, 0x59,
+      0xC6, 0x12, 0x05, 0x2B, 0x97, 0x16, 0xE9, 0x6B, 0x20, 0xBE, 0xC7, 0x18,
+      0x12, 0x60, 0x40, 0xA9, 0x09, 0x1F, 0x6B, 0xA9, 0x44, 0x5F, 0x45, 0x80,
+      0x6A, 0xEB, 0x6E, 0x38, 0x16, 0x71, 0x0F, 0x7C, 0xBF, 0xED, 0x11, 0x01,
+      0x46, 0x12, 0x84, 0xDD, 0x96, 0x2B, 0x7B, 0x12, 0x04, 0x7C, 0x0A, 0x0A,
+      0x90, 0x6A, 0x05, 0x89, 0xB4, 0xA9, 0xA4, 0x26, 0x46, 0x9B, 0xDA, 0x39,
+      0x46, 0x09, 0x1A, 0x37, 0x5B, 0x19, 0x52, 0xA9, 0x1C, 0x23, 0x1C, 0x0F,
+      0xE6, 0xB5, 0x7F, 0x7C, 0xC9, 0x7E, 0xFE, 0xD0, 0xBC, 0x10, 0x01, 0x36,
+      0x78, 0x23, 0xBE, 0x18, 0x86, 0x30, 0x8B, 0x3A, 0x21, 0x45, 0x2B, 0x7E,
+      0x45, 0x50, 0x66, 0x71, 0x9C, 0xCC, 0xEA, 0xF6, 0xA7, 0x26, 0xFC, 0x22,
+      0xBC, 0x83, 0x99, 0xF5, 0x4B, 0xBF, 0xCA, 0xF7, 0xCA, 0x63, 0xBA, 0x73,
+      0x17, 0x3C, 0x7A, 0xA8, 0x61, 0x9A, 0x3F, 0x48, 0x5C, 0x3E, 0x33, 0x04,
+      0x21, 0x00, 0x67, 0x66, 0x74, 0x6F, 0x4E, 0xF6, 0x65, 0x3E, 0x44, 0x0E,
+      0x5C, 0xDC, 0x59, 0x53, 0x40, 0x18, 0xC3, 0x52, 0xC0, 0x23, 0x58, 0x4C,
+      0xBB, 0x37, 0x4E, 0xB7, 0xA9, 0xB7, 0x83, 0x68, 0x32, 0xBE, 0x53, 0xAF,
+      0x27, 0x2A, 0x06, 0x97, 0x55, 0xCE, 0x2F, 0xF2, 0x9C, 0xD8, 0xB3, 0x94,
+      0xC5, 0x24, 0x22, 0xB3, 0x47, 0x0E, 0x27, 0x41, 0x5F, 0x41, 0xB3, 0x97,
+      0x53, 0x59, 0x59, 0xF1, 0x60, 0x00, 0x3B, 0x45, 0x2C, 0xF4, 0x96, 0x97,
+      0xB7, 0xA5, 0x36, 0x89, 0x85, 0x2B, 0xBE, 0x6C, 0xCF, 0xDF, 0xB4, 0x0B,
+      0x48, 0xE9, 0x32, 0x8D, 0xE1, 0x15, 0x22, 0xD0, 0xA4, 0x31, 0xB1, 0x15,
+      0xA5, 0xC0, 0xC2, 0xF4, 0x30, 0x7D, 0x98, 0x62, 0xC0, 0xDD, 0x1B, 0x40,
+      0xC6, 0x5A, 0x1D, 0x9D, 0x47, 0x97, 0x77, 0xE6, 0x90, 0x5A, 0x91, 0xA5,
+      0xCB, 0x24, 0x55, 0x1C, 0x8B, 0x1E, 0x52, 0xA3, 0xC7, 0x7B, 0x63, 0x31,
+      0x3F, 0xFC, 0x8B, 0x58, 0x17, 0x81, 0x52, 0x59, 0xA6, 0xAD, 0xB5, 0x96,
+      0x45, 0xDC, 0x4B, 0xB1, 0x43, 0x6D, 0x51, 0xE6, 0x2A, 0x09, 0x68, 0x34,
+      0xAF, 0x43, 0x77, 0x25, 0x10, 0xC4, 0xED, 0xF3, 0x4C, 0xDE, 0x0A, 0x5B,
+      0x57, 0xC1, 0x45, 0xE6, 0x87, 0xCB, 0x87, 0x16, 0x2F, 0x00, 0x1C, 0x21,
+      0xC9, 0xE1, 0x93, 0x4A, 0xC1, 0x1A, 0xAF, 0xA7, 0x0F, 0xF8, 0x10, 0x73,
+      0x26, 0x50, 0xB3, 0x2A, 0x30, 0x18, 0xA7, 0xC5, 0x0C, 0xD7, 0x36, 0x79,
+      0x62, 0x22, 0xC8, 0xAB, 0x82, 0x1A, 0x92, 0x83, 0xBE, 0x1C, 0xC2, 0x04,
+      0xC3, 0xF1, 0x63, 0x0D, 0x3C, 0xCC, 0xDB, 0x0A, 0x9A, 0x3D, 0x17, 0x55,
+      0x2B, 0x91, 0x58, 0xC0, 0x66, 0x4E, 0x5D, 0x6A, 0x04, 0xB0, 0xFA, 0x36,
+      0xDE, 0x45, 0x86, 0x2A, 0x46, 0xA3, 0x9E, 0xC5, 0x97, 0xAE, 0x42, 0xC3,
+      0x11, 0xC4, 0xAC, 0x22, 0x4A, 0x72, 0xD6, 0xF2, 0x53, 0xBB, 0x52, 0x35,
+      0xF7, 0xA2, 0xB8, 0xB0, 0xF2, 0x4D, 0x13, 0x76, 0xAF, 0x58, 0x87, 0x46,
+      0xF3, 0xBB, 0x8E, 0x03, 0x65, 0x07, 0x87, 0x61, 0xCA, 0xB9, 0x83, 0xA4,
+      0xA6, 0xA9, 0x40, 0xA3, 0xD9, 0x97, 0x04, 0x7A, 0x8F, 0x36, 0xA7, 0x31,
+      0xE8, 0x96, 0x52, 0x36, 0xC3, 0x7B, 0xF2, 0x00, 0x08, 0x2F, 0x82, 0x1D,
+      0xCA, 0x77, 0x16, 0xC4, 0x44, 0xA9, 0x0B, 0xEC, 0x53, 0x07, 0x4B, 0xBA,
+      0x58, 0xC1, 0x32, 0xBF, 0xB9, 0xA2, 0xAC, 0xE2, 0xCE, 0xC9, 0xAA, 0x65,
+      0x8E, 0xAC, 0x12, 0x32, 0xCC, 0xCA, 0x3C, 0x81, 0x7A, 0x92, 0xC1, 0x19,
+      0x5C, 0x05, 0xC0, 0xE1, 0xD6, 0x63, 0x9F, 0xD2, 0xAD, 0xE5, 0x31, 0x60,
+      0x7D, 0x48, 0x8B, 0x74, 0xA7, 0x47, 0xCF, 0xF4, 0x7F, 0xCA, 0x5C, 0x8B,
+      0x21, 0x63, 0xCA, 0x03, 0xC5, 0x45, 0xED, 0x10, 0x32, 0x78, 0x43, 0x0C,
+      0x60, 0xB2, 0x38, 0x1A, 0x09, 0x42, 0x7F, 0xD1, 0x30, 0xF8, 0x59, 0xBF,
+      0x5D, 0xB7, 0x76, 0xDA, 0x09, 0x5D, 0xCA, 0x58, 0x04, 0xFA, 0x63, 0xB0,
+      0xD7, 0xD8, 0x7F, 0xA9, 0x41, 0x5C, 0x72, 0xFB, 0x51, 0x87, 0x2A, 0x98,
+      0x9F, 0x46, 0x6C, 0x98, 0x4B, 0xC7, 0x4C, 0x29, 0xB8, 0x63, 0x20, 0x19,
+      0xCA, 0x04, 0x0C, 0x9C, 0xA3, 0x5E, 0x22, 0x60, 0x8D, 0xAA, 0x70, 0x35,
+      0x7A, 0xE2, 0xC3, 0xAD, 0x83, 0x63, 0x1F, 0xAA, 0x17, 0x4E, 0x0A, 0xCD,
+      0xF5, 0xDB, 0xBF, 0x3C, 0xF6, 0x8A, 0x05, 0xB6, 0x54, 0x3A, 0xB6, 0x26,
+      0x8E, 0x1A, 0x51, 0xB0, 0x93, 0x2C, 0x17, 0xB0, 0x0A, 0x13, 0x71, 0xB2,
+      0xDA, 0xB2, 0x41, 0xF9, 0x2A, 0x43, 0xFF, 0xB4, 0x56, 0xD0, 0xA8, 0xC8,
+      0x86, 0x0A, 0x8E, 0x28, 0xA6, 0x1A, 0x21, 0x30, 0x7C, 0xC0, 0x45, 0x6D,
+      0xA4, 0x24, 0x29, 0x05, 0xCB, 0x1D, 0x3D, 0x0B, 0xBD, 0x81, 0xBB, 0x8E,
+      0xE2, 0x74, 0xA4, 0x3C, 0x76, 0xC3, 0x10, 0x01, 0x95, 0x15, 0xFC, 0xC1,
+      0x40, 0x46, 0x7C, 0x33, 0x37, 0x0C, 0x86, 0x80, 0x8E, 0xCA, 0xA5, 0x8E,
+      0x3B, 0xA9, 0x3A, 0x2C, 0x11, 0x90, 0x46, 0x1C, 0x1D, 0xFA, 0x11, 0x30,
+      0x20, 0x01, 0xBB, 0xAB, 0x4C, 0xB1, 0xE3, 0x64, 0x2E, 0xF8, 0xCB, 0x26,
+      0x30, 0x9B, 0x60, 0x52, 0x3B, 0xC2, 0x18, 0x87, 0xB0, 0x7F, 0x89, 0x8C,
+      0xE5, 0x62, 0xA6, 0xCA, 0x77, 0x8E, 0xA0, 0x15, 0x05, 0x85, 0x13, 0x78,
+      0xCE, 0xA8, 0xBB, 0x7F, 0xC0, 0x9D, 0x11, 0x96, 0x1B, 0x6C, 0x59, 0x6F,
+      0x93, 0x54, 0x2A, 0x99, 0x04, 0x86, 0x4E, 0xB1, 0x0C, 0xD0, 0xA7, 0x03,
+      0xDB, 0xA9, 0x89, 0x21, 0x86, 0x1A, 0x87, 0xB0, 0x56, 0x52, 0x5C, 0x71,
+      0xA8, 0x43, 0x55, 0x3E, 0x64, 0x00, 0x77, 0x74, 0x37, 0xC9, 0x5C, 0xCC,
+      0x80, 0x85, 0xCC, 0x0C, 0x47, 0x7D, 0x66, 0x5A, 0x44, 0x79, 0x01, 0x9D,
+      0x4C, 0xD4, 0x42, 0xF7, 0x4A, 0x3C, 0xD8, 0x16, 0x9F, 0x42, 0x62, 0xB8,
+      0x27, 0x1B, 0x5D, 0x5A, 0x67, 0xC8, 0xC1, 0x61, 0x1A, 0xAE, 0x7B, 0x3D,
+      0x05, 0x34, 0xC0, 0x85, 0x97, 0x16, 0xFD, 0xF0, 0xBB, 0x68, 0x94, 0x90,
+      0x94, 0xC0, 0x6A, 0x1B, 0x73, 0xC9, 0xAA, 0x1C, 0xBD, 0xF3, 0x31, 0x54,
+      0x3D, 0xE0, 0x02, 0xA8, 0xC0, 0x6F, 0x94, 0xE8, 0x81, 0x0A, 0x5C, 0xB3,
+      0x73, 0x83, 0x27, 0x45, 0xD7, 0x20, 0x68, 0x3B, 0x57, 0x48, 0x75, 0xA6,
+      0x66, 0x94, 0x6D, 0x02, 0x96, 0x89, 0x3F, 0x2B, 0x59, 0xE9, 0x07, 0x48,
+      0x8D, 0x8C, 0x84, 0x89, 0xD4, 0x74, 0xD9, 0x29, 0xA0, 0x5A, 0x57, 0x3E,
+      0xD6, 0x67, 0x49, 0x03, 0x71, 0xA4, 0x6D, 0x45, 0x56, 0xCB, 0xB6, 0x8A,
+      0xAA, 0x79, 0xCC, 0x3E, 0xC6, 0x65, 0x34, 0x13, 0x57, 0x6C, 0x22, 0x8E,
+      0x37, 0x9A, 0x14, 0xCB, 0x90, 0xB7, 0xB7, 0x59, 0x1B, 0x19, 0xA7, 0xBD,
+      0x37, 0xA1, 0xC4, 0xD3, 0x78, 0x59, 0x89, 0x22, 0x19, 0x44, 0x2B, 0xB0,
+      0xB9, 0xB9, 0xBA, 0x67, 0xBA, 0x3B, 0xC0, 0xD0, 0x95, 0xC8, 0x80, 0x3C,
+      0xEB, 0xE9, 0x7A, 0xFF, 0x0B, 0x1C, 0x15, 0x35, 0x78, 0xA1, 0x30, 0xCD,
+      0x81, 0x57, 0xCF, 0x74, 0x59, 0x46, 0xC2, 0xF5, 0x72, 0x6D, 0x9C, 0x11,
+      0x27, 0x35, 0x75, 0x50, 0x52, 0x91, 0x34, 0x65, 0x28, 0xEE, 0x0B, 0xAC,
+      0x04, 0x7C, 0xC9, 0x84, 0x53, 0x8B, 0x97, 0xBB, 0xAB, 0xFC, 0xC3, 0x57,
+      0xDC, 0xB8, 0xA9, 0x8F, 0xB8, 0x57, 0xC9, 0xC5, 0x2D, 0x1B, 0x78, 0x67,
+      0x49, 0xCA, 0x61, 0x89, 0x2B, 0x09, 0x75, 0x99, 0x80, 0x52, 0x00, 0x91,
+      0xB9, 0xB4, 0x77, 0xC7, 0x0E, 0x6C, 0x46, 0x58, 0x6B, 0x1C, 0xCE, 0xBE,
+      0x87, 0xBC, 0xF6, 0xDF, 0x03, 0xC2, 0xB2, 0x7C, 0xB0, 0x9F, 0xA0, 0x3F,
+      0x63, 0x16, 0x09, 0x58, 0x38, 0x3B, 0xE6, 0x36, 0xC0, 0xEC, 0xC8, 0xDD,
+      0xAE, 0x8B, 0x59, 0x4A, 0x14, 0x03, 0x78, 0x68, 0xBE, 0xC0, 0xB2, 0x23,
+      0x00, 0xDE, 0xFD, 0xFA, 0xA1, 0xD9, 0x73, 0xAC, 0x5C, 0xEC, 0x84, 0xAE,
+      0x43, 0x86, 0xB8, 0xFB, 0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42,
+      0x42, 0x4A, 0x87, 0xC1, 0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88,
+      0x18, 0x69, 0x07, 0x7E, 0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // generate pke512 ek and dk from seed
+    uint8_t got_ek[PKE512_EK_SIZE] = { 0 },
+            got_dk[FIPS203IPD_KEM512_DK_SIZE] = { 0 };
+    fips203ipd_kem512_keygen(got_ek, got_dk, TESTS[i].seed);
+
+    // check for expected ek
+    if (memcmp(&got_ek, &(TESTS[i].exp_ek), sizeof(got_ek))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ek", TESTS[i].name);
+      fail_test(__func__, name, got_ek, sizeof(got_ek), TESTS[i].exp_ek, sizeof(got_ek));
+    }
+
+    // check for expected dk
+    if (memcmp(&got_dk, &(TESTS[i].exp_dk), sizeof(got_dk))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - dk", TESTS[i].name);
+      fail_test(__func__, name, got_dk, sizeof(got_dk), TESTS[i].exp_dk, sizeof(got_dk));
+    }
+  }
+}
+
+static void test_fips203ipd_kem512_encaps(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t ek[FIPS203IPD_KEM512_EK_SIZE]; // test encapsulation key (800 bytes)
+    const uint8_t seed[32]; // test randomness (32 bytes)
+    const uint8_t exp_k[32]; // expected shared key (32 bytes)
+    const uint8_t exp_ct[FIPS203IPD_KEM512_CT_SIZE]; // expected ciphertext (768 bytes)
+  } TESTS[] = {{
+    .name = "seed = 0",
+    .ek = {
+      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
+      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
+      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
+      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
+      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
+      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
+      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
+      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
+      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
+      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
+      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
+      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
+      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
+      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
+      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
+      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
+      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
+      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
+      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
+      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
+      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
+      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
+      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
+      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
+      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
+      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
+      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
+      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
+      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
+      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
+      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
+      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
+      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
+      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
+      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
+      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
+      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
+      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
+      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
+      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
+      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
+      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
+      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
+      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
+      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
+      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
+      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
+      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
+      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
+      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
+      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
+      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
+      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
+      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
+      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
+      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
+      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
+      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
+      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
+      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
+      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
+      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
+      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
+      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+    },
+    .seed = { 0 },
+
+    .exp_k = {
+      0xf3, 0x23, 0xa8, 0x77, 0x93, 0x95, 0xf0, 0xce, 0x4d, 0x25, 0xc2, 0x97,
+      0x97, 0x76, 0x90, 0x44, 0xa7, 0x82, 0x84, 0xcd, 0x2e, 0xbf, 0xb9, 0xce,
+      0xd8, 0x16, 0xd2, 0xd0, 0x1c, 0xeb, 0xe0, 0x24,
+    },
+
+    .exp_ct = {
+      0x32, 0xeb, 0x87, 0xe6, 0x95, 0x7a, 0x2c, 0x34, 0xd6, 0x3d, 0xde, 0x00,
+      0xa5, 0xc1, 0x96, 0xbf, 0x78, 0xf1, 0xc9, 0xa7, 0xfc, 0x74, 0xb0, 0xbd,
+      0xaa, 0xb4, 0xb5, 0x23, 0xa6, 0xad, 0xf7, 0x1d, 0xcf, 0xe6, 0x4d, 0x34,
+      0xef, 0xfe, 0x25, 0xd0, 0x81, 0x3c, 0xa1, 0x72, 0x51, 0x62, 0xa6, 0x99,
+      0x06, 0x2e, 0x07, 0x4b, 0x34, 0x03, 0x62, 0xfd, 0x1b, 0x63, 0x99, 0x11,
+      0xa2, 0x97, 0xd4, 0x91, 0x22, 0x27, 0x31, 0xf7, 0x2e, 0x6b, 0xd0, 0xe0,
+      0x28, 0x11, 0xdc, 0x13, 0x53, 0xac, 0xf2, 0x36, 0x39, 0x5f, 0x40, 0x03,
+      0xd8, 0xb3, 0x37, 0x18, 0xab, 0x9e, 0x3f, 0xa5, 0x84, 0x04, 0xae, 0x4c,
+      0x0e, 0x66, 0x4a, 0x27, 0x5f, 0x46, 0x8f, 0x94, 0x59, 0x91, 0x5a, 0xe3,
+      0x5e, 0xab, 0xc4, 0xcf, 0x5d, 0x5c, 0x32, 0xf0, 0x4b, 0x90, 0x73, 0x28,
+      0xd8, 0x6e, 0x1e, 0xaf, 0x08, 0x9f, 0xc5, 0x8e, 0xe6, 0x66, 0x6e, 0x77,
+      0xae, 0xfd, 0x07, 0x3f, 0xa4, 0x92, 0xaa, 0xce, 0x66, 0x7e, 0xe7, 0x38,
+      0x8d, 0xc3, 0xd2, 0x1c, 0xeb, 0x45, 0xf8, 0x63, 0x04, 0x93, 0x0f, 0x2e,
+      0x0d, 0xee, 0x37, 0x56, 0x8e, 0xb3, 0x8d, 0x3b, 0xe8, 0x01, 0x0b, 0x75,
+      0xb3, 0xbd, 0x2f, 0x01, 0x97, 0x82, 0xf2, 0x9c, 0xd9, 0x4e, 0xe9, 0xb4,
+      0xec, 0xd4, 0x73, 0xa1, 0x14, 0xca, 0x40, 0x81, 0xa2, 0xbd, 0x18, 0xed,
+      0x26, 0xb2, 0x56, 0x1d, 0xcb, 0xe9, 0xc1, 0x76, 0x08, 0x4b, 0xd1, 0x36,
+      0x3d, 0x82, 0x7e, 0x88, 0x67, 0xa4, 0xc3, 0xc1, 0xb3, 0xe5, 0x06, 0x63,
+      0xb3, 0x4e, 0xf3, 0xa2, 0x74, 0xde, 0xfd, 0x10, 0xda, 0xbc, 0x00, 0x74,
+      0x4b, 0x45, 0x9e, 0x0b, 0x1a, 0xe2, 0x60, 0x4c, 0xc4, 0x3a, 0xe9, 0xa0,
+      0xe9, 0x9c, 0xe2, 0xba, 0x6d, 0xe7, 0x31, 0x0f, 0x2c, 0x8c, 0xf1, 0xbf,
+      0xab, 0xe8, 0x29, 0x7f, 0xb8, 0x9a, 0xd0, 0x50, 0x7d, 0x0d, 0x87, 0xa4,
+      0xa0, 0xb2, 0x69, 0x69, 0xcf, 0x8e, 0xb5, 0xbd, 0xa2, 0x88, 0xb3, 0xe3,
+      0x54, 0xc1, 0xe6, 0x7c, 0x62, 0x59, 0x38, 0x1b, 0xcf, 0x58, 0x45, 0x74,
+      0xe6, 0x3b, 0x2e, 0x61, 0x50, 0x50, 0xf9, 0x1a, 0x9e, 0xf5, 0xde, 0x79,
+      0x17, 0x66, 0x8c, 0x49, 0x97, 0x8d, 0xe6, 0xf7, 0x17, 0x39, 0xe9, 0x9f,
+      0xa3, 0x95, 0xa9, 0x5d, 0x89, 0xa5, 0x3e, 0x97, 0xa3, 0xa0, 0xb0, 0x04,
+      0x06, 0x1f, 0xb3, 0x36, 0xbb, 0x12, 0xa0, 0xac, 0x72, 0xfe, 0x9d, 0xa0,
+      0x3e, 0x41, 0x89, 0x78, 0x2d, 0x3c, 0x9f, 0x2f, 0x2a, 0x1e, 0xb3, 0x48,
+      0x16, 0xa0, 0x9a, 0xc0, 0x3d, 0x33, 0x34, 0x85, 0x5b, 0x87, 0x4d, 0xaa,
+      0x82, 0xc4, 0xd7, 0xd1, 0x9b, 0xdb, 0x3d, 0x39, 0x23, 0x95, 0xf2, 0x60,
+      0x58, 0x5d, 0xd2, 0x9e, 0x6b, 0x6f, 0x15, 0xe0, 0xdf, 0xd6, 0x24, 0x27,
+      0xf9, 0xd2, 0x8a, 0x2e, 0xc5, 0x3c, 0x67, 0x74, 0x8b, 0xee, 0x52, 0xdc,
+      0xf1, 0xce, 0x2b, 0x7f, 0x79, 0x42, 0x8d, 0x9a, 0x62, 0x7c, 0xe7, 0x30,
+      0xb9, 0xfc, 0x98, 0xac, 0xee, 0x67, 0x4a, 0x4e, 0xa9, 0x5d, 0x36, 0x38,
+      0x67, 0x63, 0x56, 0xff, 0xc2, 0x0b, 0xc1, 0xa2, 0x0b, 0xc8, 0xb2, 0xec,
+      0x74, 0xd9, 0x8e, 0xce, 0xcc, 0x43, 0x4b, 0x93, 0x68, 0x02, 0x8f, 0xb0,
+      0x4a, 0x58, 0x64, 0xf6, 0x68, 0x43, 0xb9, 0x55, 0x47, 0x9b, 0x34, 0xa9,
+      0x53, 0x6c, 0xee, 0x08, 0x6b, 0x6e, 0x7f, 0xd2, 0xea, 0x2c, 0x83, 0x69,
+      0xf7, 0x0a, 0x0b, 0x70, 0x23, 0x28, 0x5d, 0xa0, 0x79, 0xf2, 0x33, 0xe7,
+      0x95, 0x76, 0xac, 0x53, 0x2d, 0xe5, 0x2f, 0x44, 0xe1, 0x0b, 0x3b, 0x8d,
+      0x0d, 0x36, 0xb1, 0x01, 0xc4, 0x73, 0x32, 0x75, 0xd6, 0xbc, 0x00, 0xc4,
+      0x0f, 0xe9, 0xfc, 0x57, 0x7e, 0x9d, 0xea, 0xd8, 0xdf, 0x0e, 0x97, 0xf7,
+      0xfa, 0xd1, 0x2b, 0x4c, 0x79, 0x69, 0x66, 0xb8, 0x56, 0x14, 0xea, 0xae,
+      0xda, 0xdc, 0xd2, 0xaa, 0xb0, 0x2b, 0xf9, 0x8e, 0xc9, 0x63, 0x3e, 0x63,
+      0x49, 0xef, 0xfe, 0x2a, 0xb8, 0x66, 0x03, 0x76, 0x36, 0x7a, 0xe7, 0xef,
+      0x14, 0x28, 0x50, 0x41, 0x7d, 0xe1, 0x5d, 0x80, 0x9e, 0x1a, 0x1b, 0x30,
+      0x11, 0xe9, 0x12, 0x8e, 0x67, 0x49, 0xcb, 0xc9, 0xd5, 0xe5, 0xa0, 0xce,
+      0x0e, 0xd1, 0x9c, 0x24, 0x82, 0x8f, 0x00, 0xf2, 0x46, 0xe0, 0x8b, 0xb9,
+      0x27, 0xa7, 0xf4, 0x7d, 0xbe, 0x30, 0x0f, 0x82, 0x70, 0xd5, 0x93, 0xe1,
+      0xe6, 0x3a, 0x95, 0xed, 0x6f, 0xda, 0x1f, 0x55, 0x5e, 0xe8, 0x70, 0x81,
+      0x86, 0x1c, 0xde, 0xf7, 0xae, 0x6c, 0x8f, 0x98, 0x5c, 0x5f, 0xe1, 0x31,
+      0x80, 0x8c, 0x32, 0xbd, 0x07, 0x63, 0x9f, 0xb6, 0xb4, 0x8f, 0x92, 0xc9,
+      0x05, 0xdd, 0x7a, 0xdb, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
+      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
+      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
+      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
+      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
+      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
+      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
+      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
+      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
+      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
+      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
+    },
+  }, {
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Encapsulation -- ML-KEM-512",
+    .ek = {
+      0xA5, 0x40, 0x97, 0x18, 0xCB, 0x72, 0xF2, 0x43, 0x8A, 0x35, 0x55, 0xA3,
+      0xC8, 0xF1, 0x8F, 0x26, 0x71, 0xA1, 0xF8, 0x14, 0x03, 0xDF, 0x7B, 0x5A,
+      0x46, 0x59, 0xA5, 0x1F, 0x50, 0x82, 0x7B, 0xA6, 0x57, 0x7A, 0xA7, 0x08,
+      0x00, 0xD7, 0x8D, 0x8B, 0xC5, 0xAA, 0x86, 0xB8, 0x9E, 0x08, 0xB5, 0x8F,
+      0x34, 0x80, 0xA8, 0x9E, 0x10, 0x4D, 0xC6, 0x92, 0x2E, 0xDB, 0xC1, 0x2D,
+      0x06, 0xF8, 0x91, 0x02, 0x7C, 0x65, 0x4E, 0x99, 0x4A, 0x22, 0xF9, 0x1A,
+      0x2A, 0xF6, 0x34, 0x04, 0xCA, 0x98, 0xD7, 0xB6, 0x7E, 0xEA, 0x25, 0x91,
+      0x1B, 0x24, 0xC7, 0x0D, 0xEB, 0x81, 0x46, 0xA0, 0x82, 0x1F, 0x34, 0xA3,
+      0x02, 0x55, 0x1F, 0x2D, 0x51, 0x0C, 0x05, 0x88, 0xC8, 0xBC, 0xA7, 0x4E,
+      0xB4, 0xDC, 0x0C, 0xFA, 0x46, 0x03, 0xC1, 0xC5, 0xA3, 0xC5, 0x53, 0x70,
+      0x61, 0x78, 0x90, 0x68, 0x68, 0x2C, 0x4C, 0xC3, 0x14, 0x3F, 0xBA, 0x9B,
+      0xB5, 0x54, 0x2F, 0x97, 0x78, 0xBD, 0xF2, 0x3B, 0x36, 0x52, 0xF2, 0xA7,
+      0x52, 0x47, 0x56, 0xFA, 0x73, 0x90, 0x9D, 0xDA, 0xC7, 0xE5, 0x32, 0x52,
+      0x26, 0x59, 0x21, 0x8C, 0xBA, 0x25, 0xF3, 0x3B, 0x6B, 0x04, 0x58, 0xCB,
+      0x03, 0xDA, 0x79, 0x35, 0xBA, 0x59, 0x11, 0x19, 0x55, 0x31, 0x2B, 0x15,
+      0xCC, 0xE2, 0xC0, 0xF7, 0x34, 0x66, 0xA8, 0x00, 0x62, 0x83, 0xA2, 0xAA,
+      0x7C, 0xBB, 0x61, 0x02, 0x2A, 0xBB, 0xC2, 0xD1, 0x9F, 0x29, 0x20, 0xBC,
+      0x30, 0x24, 0x72, 0xDC, 0x97, 0xC4, 0xA1, 0x78, 0x8C, 0x9B, 0xD3, 0xBB,
+      0xED, 0xC9, 0x12, 0x2B, 0x82, 0x7B, 0x27, 0x9C, 0x07, 0x4C, 0x80, 0x44,
+      0x31, 0x41, 0x11, 0x9F, 0x4B, 0x16, 0x29, 0xF6, 0x2F, 0x10, 0xD4, 0xCE,
+      0x2B, 0xE3, 0xBB, 0x34, 0x38, 0x16, 0xCA, 0xD1, 0x6A, 0x1C, 0x87, 0x58,
+      0x2F, 0x2B, 0x70, 0xE2, 0x66, 0x35, 0xB0, 0x8B, 0xB3, 0x90, 0xC1, 0x33,
+      0x98, 0xFC, 0xCD, 0xA7, 0xE9, 0xBB, 0x3D, 0x9B, 0x0B, 0x78, 0x03, 0x75,
+      0x0C, 0x95, 0x5C, 0x57, 0xA0, 0x28, 0xA5, 0xD2, 0x6C, 0x27, 0x03, 0x16,
+      0xBB, 0x2B, 0x81, 0x5C, 0x3B, 0x97, 0x2B, 0xA6, 0x78, 0x2D, 0xAB, 0x02,
+      0xF3, 0x06, 0x82, 0x1E, 0x61, 0x28, 0x5B, 0xB0, 0x72, 0xBF, 0x79, 0x78,
+      0x1C, 0xAB, 0xC3, 0x86, 0x14, 0x2A, 0x50, 0xC7, 0xAA, 0xAE, 0x66, 0xA9,
+      0x47, 0x58, 0x5B, 0xB0, 0xD8, 0x28, 0x8D, 0xBC, 0xAF, 0x4B, 0x3B, 0x85,
+      0xBB, 0x79, 0x26, 0x98, 0x7B, 0xAF, 0x76, 0x43, 0xAA, 0xB5, 0xFB, 0x02,
+      0x21, 0x05, 0x80, 0xA0, 0x26, 0x43, 0x52, 0xE6, 0x9C, 0x60, 0x98, 0x98,
+      0x9C, 0xFB, 0x87, 0x48, 0x33, 0x95, 0x96, 0x0A, 0x3A, 0x4F, 0x31, 0xBE,
+      0xFD, 0xA8, 0x0B, 0x5F, 0x28, 0x6E, 0xCF, 0xDA, 0xA5, 0x55, 0xD4, 0x39,
+      0x0A, 0xF6, 0xB5, 0x5D, 0x31, 0x39, 0x20, 0x92, 0x90, 0x93, 0x44, 0x9C,
+      0xD6, 0x72, 0x9D, 0x00, 0x21, 0x8E, 0x2D, 0x86, 0x57, 0x0A, 0xDC, 0x0C,
+      0x4F, 0x65, 0x45, 0xFF, 0xB5, 0x63, 0x2E, 0xFB, 0x3A, 0xAE, 0x26, 0x25,
+      0xA6, 0x98, 0x26, 0x70, 0xFA, 0xCE, 0x8D, 0x16, 0x12, 0x6F, 0xA6, 0x07,
+      0xE6, 0xD0, 0xA1, 0xFF, 0x61, 0x6A, 0x46, 0xEC, 0xA6, 0x42, 0xCC, 0x6A,
+      0xAC, 0x55, 0x4D, 0xBB, 0xC4, 0x3D, 0xFC, 0xF5, 0x7F, 0x36, 0x4C, 0x19,
+      0x0C, 0xEA, 0x57, 0x76, 0xC1, 0xCE, 0xB5, 0x8B, 0x70, 0x07, 0x50, 0x5F,
+      0xD7, 0x9C, 0x5F, 0x00, 0x5A, 0x4B, 0xA2, 0x18, 0xCF, 0x06, 0x93, 0xB0,
+      0x58, 0xB5, 0x10, 0xA4, 0xCA, 0x20, 0x43, 0x24, 0x60, 0x2F, 0x59, 0xBB,
+      0x8F, 0x22, 0x81, 0xC4, 0xD7, 0xB0, 0xBC, 0x86, 0x25, 0xE7, 0x88, 0x16,
+      0x50, 0xF5, 0x7C, 0x89, 0xE3, 0x2C, 0xF4, 0x80, 0x91, 0x44, 0x77, 0x5C,
+      0x90, 0x73, 0xB6, 0x73, 0xE3, 0x94, 0x12, 0xA2, 0x7C, 0x91, 0x43, 0x21,
+      0xCC, 0xB6, 0xA7, 0xCF, 0x7C, 0x37, 0xC5, 0xBC, 0xBE, 0x7C, 0xA5, 0x1B,
+      0xE0, 0xC9, 0x28, 0x46, 0x6A, 0x45, 0x8E, 0xB7, 0x78, 0xD6, 0x46, 0x6A,
+      0x89, 0x2A, 0x0A, 0xCB, 0xC0, 0x96, 0x38, 0x78, 0x4A, 0x27, 0x73, 0x9C,
+      0x97, 0x0C, 0xA5, 0x8B, 0xC2, 0x59, 0x5A, 0xD6, 0xBF, 0xA4, 0xE5, 0x2E,
+      0xB4, 0x38, 0xAC, 0x97, 0xC4, 0x16, 0x23, 0x80, 0x22, 0x48, 0xE1, 0x10,
+      0xB0, 0x74, 0x83, 0x8F, 0x31, 0xA6, 0xE7, 0x50, 0x37, 0x37, 0x70, 0x4E,
+      0x7A, 0xE4, 0xAD, 0x91, 0x29, 0x95, 0x72, 0xA8, 0xC1, 0x36, 0x03, 0x50,
+      0x0F, 0x36, 0x09, 0xB6, 0x25, 0xB4, 0xE2, 0x4C, 0xAE, 0x33, 0x2B, 0x0D,
+      0x7A, 0x5B, 0xB4, 0x7A, 0x03, 0x85, 0x12, 0xA0, 0x81, 0xBC, 0x27, 0xCD,
+      0xF0, 0xF2, 0x92, 0x3C, 0xD3, 0x47, 0x9F, 0x53, 0x07, 0x02, 0x0B, 0x77,
+      0xF1, 0x49, 0x58, 0x45, 0x64, 0x06, 0x0E, 0x50, 0x83, 0xCE, 0xD5, 0x53,
+      0x12, 0xB6, 0xA6, 0xA4, 0x65, 0xA8, 0x2B, 0x45, 0x77, 0xD6, 0x3A, 0x4B,
+      0x49, 0xC8, 0x0B, 0x07, 0xA9, 0x36, 0x7E, 0x39, 0x77, 0x8A, 0xF7, 0x6F,
+      0xA8, 0xEC, 0x2C, 0xF5, 0x28, 0x72, 0x28, 0x56, 0xCE, 0x78, 0x13, 0x40,
+      0x1A, 0x83, 0x83, 0xBD, 0xB7, 0x15, 0x1B, 0x9B, 0x6D, 0x2D, 0xD6, 0xBF,
+      0xF5, 0x54, 0x01, 0xD2, 0x8A, 0xC6, 0x12, 0x81, 0x8C, 0x88, 0xC9, 0x28,
+      0x73, 0x47, 0xB0, 0x98, 0xA9, 0x66, 0xEB, 0x9C, 0x0A, 0x2D, 0xB7, 0x1F,
+      0x0A, 0x75, 0x55, 0x5E, 0x17, 0x57, 0xD3, 0xAC, 0x4E, 0x3D, 0x80, 0x2C,
+      0x8D, 0xC6, 0xA2, 0x61, 0x52, 0x12, 0x55, 0x18, 0x6A, 0xBB, 0x98, 0xC2,
+      0x48, 0x03, 0x01, 0xB8, 0xC6, 0xB3, 0x12, 0x28, 0xB5, 0x44, 0x61, 0xBC,
+      0x44, 0xEA, 0x3C, 0x2C, 0xF9, 0x4B, 0x86, 0xC7, 0xA5, 0xB8, 0x2C, 0x55,
+      0x16, 0x7A, 0x76, 0x06, 0xCA, 0x9D, 0xC8, 0x25, 0x3B, 0x76, 0x04, 0xE4,
+      0x4A, 0x07, 0xF3, 0xED, 0x55, 0xCD, 0x5B, 0x5E,
+    },
+
+    .seed = {
+      // m
+      0x10, 0x9A, 0x24, 0x8F, 0xE8, 0x05, 0x2F, 0x84, 0x27, 0x1F, 0xF5, 0x7B,
+      0xAC, 0x15, 0x6B, 0x1B, 0xA6, 0xA5, 0x09, 0xCD, 0xCD, 0xBC, 0xC9, 0x6C,
+      0xCD, 0xB1, 0xCC, 0xB8, 0x5C, 0xA4, 0x93, 0x15,
+    },
+
+    .exp_k = {
+      0x4D, 0xDD, 0x30, 0x4E, 0x27, 0x48, 0x99, 0xBD, 0x82, 0x97, 0x18, 0x56,
+      0x82, 0x4B, 0x58, 0x71, 0x30, 0x92, 0x79, 0x52, 0x06, 0x01, 0x21, 0x85,
+      0x8F, 0x9A, 0xDE, 0xB9, 0x6A, 0xB7, 0xF5, 0x71,
+    },
+
+    .exp_ct = {
+      0x59, 0x7A, 0x06, 0xDE, 0xB8, 0x81, 0x72, 0xBA, 0x8D, 0x7C, 0xDE, 0x8D,
+      0x82, 0xCA, 0xA2, 0x34, 0xB8, 0x11, 0x2A, 0xF8, 0xA7, 0x2F, 0x1A, 0xB4,
+      0xCE, 0xA1, 0xEF, 0xCB, 0x2D, 0x86, 0x8D, 0x53, 0xD2, 0x12, 0xE3, 0x03,
+      0xB7, 0x0E, 0x7E, 0x52, 0x1A, 0xB0, 0xF4, 0xB5, 0xDB, 0x4F, 0x51, 0x15,
+      0x92, 0x48, 0xBF, 0xB2, 0x75, 0x36, 0x1B, 0xEF, 0x88, 0x37, 0x52, 0xC7,
+      0x8B, 0x8D, 0x47, 0x12, 0x27, 0x53, 0x85, 0x53, 0x6A, 0x4B, 0x0A, 0x96,
+      0xE3, 0xC2, 0x3E, 0xA6, 0xC1, 0x7E, 0xA9, 0x2B, 0x60, 0x26, 0x16, 0xE5,
+      0x82, 0x1E, 0x57, 0x53, 0xA4, 0x73, 0x6C, 0x40, 0x39, 0xC2, 0x0C, 0x92,
+      0x3C, 0xCE, 0xCB, 0x57, 0x98, 0x05, 0x58, 0x7C, 0x0C, 0xE7, 0x22, 0x18,
+      0xBB, 0x1A, 0xB1, 0x24, 0x52, 0xF8, 0xE1, 0x54, 0xCB, 0x86, 0x43, 0x32,
+      0x81, 0x42, 0xF9, 0xB3, 0x40, 0xA6, 0x41, 0xC6, 0xF2, 0x95, 0xE5, 0xEC,
+      0xF2, 0xE0, 0x48, 0xBC, 0x7F, 0xC7, 0x9B, 0xC5, 0xB9, 0x42, 0x77, 0xC8,
+      0x68, 0xD8, 0xE5, 0x36, 0xB5, 0x04, 0x25, 0x80, 0x9D, 0xCF, 0xA0, 0x24,
+      0xA3, 0x90, 0x5C, 0xBA, 0x55, 0x0A, 0xD3, 0xBB, 0x52, 0xB4, 0x59, 0xAC,
+      0x38, 0xFA, 0xBC, 0x9B, 0xC0, 0x0E, 0xBA, 0x03, 0xEC, 0x09, 0x06, 0x72,
+      0x5B, 0x4F, 0xE4, 0xE9, 0x76, 0xF1, 0x74, 0x32, 0x00, 0x47, 0xB3, 0x1D,
+      0x15, 0x89, 0x13, 0x65, 0xBA, 0x48, 0x23, 0x88, 0xF0, 0xFB, 0x97, 0x3B,
+      0x85, 0x22, 0x4F, 0xB0, 0x0B, 0xA8, 0x65, 0xAF, 0xAB, 0x3C, 0x9A, 0x1B,
+      0x7D, 0x48, 0x9F, 0x7B, 0x98, 0x2D, 0x0B, 0xD4, 0x70, 0xEF, 0x94, 0x8E,
+      0xCB, 0x5B, 0x39, 0x20, 0xAF, 0x89, 0x03, 0x59, 0x60, 0x12, 0x3B, 0x1F,
+      0x86, 0x30, 0xD7, 0x63, 0x68, 0x1B, 0xFD, 0x67, 0x15, 0x67, 0xEF, 0xBB,
+      0x1E, 0x62, 0x76, 0xAA, 0x4F, 0xB2, 0xDF, 0xA9, 0xC3, 0x94, 0x8D, 0xB7,
+      0xF0, 0x83, 0xF2, 0x83, 0x83, 0xB7, 0x7B, 0xC5, 0x14, 0xAF, 0x9D, 0x68,
+      0xD2, 0x2E, 0x24, 0x87, 0xC2, 0x01, 0x63, 0xC0, 0x2B, 0x0B, 0xBF, 0x23,
+      0xBB, 0xCE, 0x06, 0x50, 0xF8, 0x4F, 0xF8, 0xCE, 0x02, 0xC7, 0x4E, 0x9E,
+      0x11, 0xD6, 0xF3, 0x0E, 0xC5, 0xFA, 0x8A, 0x01, 0x2A, 0xDC, 0x3B, 0x89,
+      0x62, 0x7C, 0x7D, 0xE8, 0x55, 0xC1, 0xFB, 0xBE, 0xB5, 0xDC, 0xDE, 0x84,
+      0xD0, 0x5E, 0x36, 0xC5, 0x56, 0x6E, 0x55, 0x51, 0xB5, 0x87, 0x50, 0xA4,
+      0x11, 0x64, 0x26, 0x39, 0xB2, 0x78, 0x64, 0xF7, 0xE0, 0x05, 0x97, 0x8F,
+      0xFE, 0x25, 0x6B, 0x75, 0x7D, 0x13, 0xDA, 0x66, 0x3F, 0xC3, 0xBB, 0x07,
+      0x94, 0xA2, 0x7C, 0xF7, 0x58, 0x5D, 0x12, 0xF2, 0x2D, 0x95, 0x3B, 0x28,
+      0x54, 0x59, 0xFD, 0xC9, 0xBC, 0xDF, 0xCD, 0xCC, 0xB7, 0xBF, 0x3E, 0x4E,
+      0x36, 0x2D, 0x28, 0x91, 0xD5, 0x83, 0x85, 0x5F, 0x5D, 0x94, 0x87, 0xE6,
+      0xFB, 0x21, 0x7E, 0x2E, 0x45, 0xEE, 0x0B, 0xD9, 0xAF, 0xC2, 0x89, 0xF4,
+      0xD5, 0x64, 0x58, 0x12, 0x09, 0xA3, 0xAC, 0xA3, 0x17, 0x95, 0xA1, 0x24,
+      0xBD, 0x1B, 0xBA, 0xEA, 0x84, 0x67, 0x55, 0xC8, 0xEA, 0x78, 0x10, 0xEA,
+      0xA7, 0x30, 0x60, 0xE8, 0x6F, 0xB5, 0xFD, 0xF3, 0xFB, 0xE7, 0x2F, 0x80,
+      0x6B, 0xB1, 0xBF, 0xBF, 0xBA, 0xC0, 0xC7, 0xB1, 0x6B, 0xFE, 0x74, 0x25,
+      0x02, 0x77, 0xEC, 0xF5, 0xF5, 0x41, 0x57, 0x1B, 0x8A, 0x97, 0x50, 0x50,
+      0x91, 0x7F, 0xDF, 0x78, 0x1F, 0xEA, 0x17, 0xB5, 0x85, 0xE3, 0xC6, 0xDB,
+      0xFE, 0x77, 0xB1, 0xE4, 0x8A, 0x16, 0x50, 0x4C, 0x3A, 0x38, 0x90, 0x11,
+      0x56, 0x10, 0x0C, 0xAF, 0xEC, 0x2E, 0xD9, 0x39, 0xAE, 0x9A, 0x9E, 0xDF,
+      0xC9, 0xC0, 0xF8, 0xC7, 0xF5, 0x5C, 0xC9, 0x3E, 0x5D, 0xDD, 0x0B, 0x3D,
+      0xE1, 0xC6, 0xED, 0xAE, 0x2B, 0x7E, 0xE3, 0x4C, 0x61, 0x01, 0xF0, 0x11,
+      0xB5, 0x90, 0x4F, 0x69, 0x3D, 0x28, 0x63, 0x56, 0xB5, 0x4C, 0x86, 0xCE,
+      0x8B, 0xCF, 0xEA, 0x9D, 0xBF, 0xEC, 0x21, 0xC1, 0xEF, 0x0E, 0xCC, 0x91,
+      0x05, 0x00, 0x5B, 0xAA, 0x37, 0x7D, 0x82, 0x9D, 0xCA, 0x2C, 0xBF, 0x5E,
+      0xA5, 0xF3, 0x1B, 0x71, 0xD4, 0x46, 0xB8, 0x33, 0xE0, 0x06, 0x19, 0x81,
+      0x9D, 0x7F, 0xC6, 0x02, 0x40, 0x52, 0x49, 0x97, 0x57, 0xA2, 0x76, 0x5F,
+      0x19, 0xCD, 0x2B, 0x36, 0xC2, 0x48, 0x85, 0x99, 0xDC, 0x52, 0x47, 0x49,
+      0x4F, 0xAB, 0xE8, 0x1E, 0xEB, 0xEF, 0xD3, 0xBE, 0x75, 0xC4, 0x78, 0x0E,
+      0x43, 0xA5, 0x04, 0x18, 0xC5, 0xDB, 0x2F, 0xF3, 0x59, 0xC5, 0xA6, 0xDE,
+      0x28, 0x6E, 0xF5, 0x95, 0x1E, 0x27, 0x09, 0x48, 0x6E, 0xDC, 0x9C, 0xC4,
+      0x9D, 0x07, 0x24, 0xEC, 0xA3, 0xF2, 0xC0, 0xB7, 0x5F, 0x8A, 0x36, 0xCE,
+      0x86, 0x23, 0x88, 0xF0, 0x0B, 0x3C, 0x59, 0x3D, 0x1C, 0x8C, 0x6A, 0xC4,
+      0x5D, 0x73, 0xA7, 0x2F, 0xF6, 0xB4, 0xF8, 0x05, 0xB1, 0x31, 0xED, 0x4E,
+      0xAF, 0x56, 0x01, 0xD7, 0xB7, 0x3B, 0x0E, 0x37, 0x24, 0xE7, 0x5D, 0x58,
+      0xDD, 0x50, 0xF5, 0x87, 0x1C, 0x54, 0xA3, 0x7C, 0x14, 0x81, 0x33, 0x17,
+      0x59, 0xF4, 0xBE, 0x86, 0xFB, 0x58, 0xA2, 0xEE, 0x00, 0x31, 0x30, 0xF6,
+      0x6E, 0x18, 0x7C, 0x8B, 0xA5, 0x01, 0x5B, 0xE7, 0x13, 0x29, 0x65, 0x89,
+      0xAC, 0xAF, 0xBF, 0x65, 0x96, 0x89, 0x7E, 0x03, 0xD4, 0x92, 0x0C, 0x91,
+      0xF2, 0x63, 0x33, 0xB7, 0xBF, 0x17, 0x98, 0xAF, 0x81, 0x5C, 0x93, 0xD4,
+      0xDF, 0x55, 0xBD, 0x47, 0xA0, 0x82, 0x49, 0xBF, 0x11, 0x30, 0x63, 0xFB,
+      0xB3, 0x95, 0x03, 0xE9, 0xB6, 0xD4, 0x3E, 0xAC, 0x7B, 0x0C, 0x30, 0x5A,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // Generate shared key `got_k` and ciphertext `got_ct` for test
+    // encapsulation key `ek` and randomness `seed`.
+    uint8_t got_k[32] = { 0 }, got_ct[FIPS203IPD_KEM512_CT_SIZE] = { 0 };
+    fips203ipd_kem512_encaps(got_k, got_ct, TESTS[i].ek, TESTS[i].seed);
+
+    // check for expected shared key
+    if (memcmp(got_k, TESTS[i].exp_k, sizeof(got_k))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - k", TESTS[i].name);
+      fail_test(__func__, name, got_k, sizeof(got_k), TESTS[i].exp_k, sizeof(got_k));
+    }
+
+    // check for expected ciphertext
+    if (memcmp(got_ct, TESTS[i].exp_ct, sizeof(got_ct))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ct", TESTS[i].name);
+      fail_test(__func__, name, got_ct, sizeof(got_ct), TESTS[i].exp_ct, sizeof(got_ct));
+    }
+  }
+}
+
+static void test_fips203ipd_kem512_decaps(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t ct[FIPS203IPD_KEM512_CT_SIZE]; // test ciphertext (768 bytes)
+    const uint8_t dk[FIPS203IPD_KEM512_DK_SIZE]; // test decapsulation key (1632 bytes)
+    const uint8_t exp[32]; // expected message (32 bytes)
+  } TESTS[] = {{
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Decapsulation -- ML-KEM-512",
+
+    .ct = {
+      0x84, 0xA1, 0x88, 0xA0, 0x72, 0xE4, 0xD4, 0xF4, 0x49, 0xA4, 0xBE, 0x17,
+      0x02, 0x74, 0xDD, 0x2A, 0x5F, 0x3E, 0x35, 0x6E, 0x95, 0xB9, 0x6E, 0x40,
+      0xAD, 0x3F, 0xF1, 0x45, 0x5E, 0x36, 0xC6, 0xA7, 0x1E, 0x90, 0x9D, 0xD2,
+      0xC0, 0xDF, 0xF8, 0xAD, 0x2C, 0x9F, 0x50, 0x3B, 0xAC, 0x90, 0x65, 0x71,
+      0x62, 0x48, 0x08, 0x3B, 0xDA, 0x40, 0xCE, 0xCB, 0x38, 0xE3, 0xB3, 0x05,
+      0x8B, 0xAF, 0x51, 0xA7, 0x57, 0x23, 0x84, 0xFF, 0x84, 0x06, 0xA8, 0x13,
+      0x6A, 0x4F, 0xC6, 0xD9, 0x12, 0xA5, 0x4B, 0x2E, 0xB5, 0xB9, 0xD5, 0x98,
+      0xFB, 0x68, 0x9E, 0x72, 0xED, 0x3D, 0xEF, 0xD2, 0xFF, 0x83, 0x55, 0xED,
+      0x9E, 0x9C, 0xCA, 0x53, 0xE8, 0x2C, 0x08, 0x86, 0xE0, 0x94, 0xC5, 0x92,
+      0xC3, 0x92, 0x31, 0x1F, 0x04, 0xFE, 0xC6, 0x8F, 0x9A, 0x1C, 0x53, 0x1C,
+      0xF3, 0x41, 0x90, 0x30, 0x89, 0x2B, 0x5B, 0xDC, 0xAC, 0xEE, 0xF6, 0xA0,
+      0xE7, 0xF1, 0xBD, 0x44, 0x90, 0x3F, 0x49, 0xDE, 0x8E, 0x37, 0xB0, 0x2B,
+      0xA3, 0xFC, 0x51, 0x21, 0xD9, 0x9F, 0x8C, 0xC3, 0x04, 0x0F, 0x66, 0x83,
+      0x2F, 0x77, 0x02, 0x1B, 0x4C, 0xA3, 0x5F, 0x7A, 0x48, 0x25, 0x03, 0x89,
+      0x36, 0x56, 0x4C, 0xA2, 0xE6, 0x73, 0xFF, 0x9C, 0xC0, 0x51, 0x9C, 0x25,
+      0xF6, 0xA5, 0x2D, 0x87, 0xED, 0xD9, 0x65, 0xB2, 0x46, 0x4A, 0xA3, 0x65,
+      0xD2, 0xBF, 0x06, 0x8B, 0x72, 0xFC, 0x68, 0xB6, 0x5E, 0x88, 0x51, 0x5E,
+      0x2C, 0x83, 0x2B, 0xBD, 0xB2, 0x7D, 0x61, 0xBF, 0x51, 0x2B, 0x5F, 0xC2,
+      0xD8, 0x59, 0x0F, 0xB3, 0x5F, 0x49, 0x50, 0x0C, 0xAF, 0xE7, 0x0E, 0x7D,
+      0x07, 0x76, 0xB5, 0xC4, 0xE4, 0x50, 0x3A, 0x71, 0x89, 0xAD, 0xBA, 0xFF,
+      0x5D, 0x5B, 0x51, 0x5C, 0xC6, 0x8B, 0x2F, 0x81, 0xD9, 0x93, 0xC6, 0xD7,
+      0xFA, 0x7D, 0x3D, 0x1D, 0x90, 0xEB, 0xFF, 0x51, 0xDA, 0x3F, 0xBB, 0xB4,
+      0x43, 0x0E, 0x5B, 0xBE, 0xDB, 0xCA, 0x8D, 0xA0, 0x78, 0xDC, 0xE8, 0xEC,
+      0x81, 0x5B, 0x16, 0x8B, 0xFC, 0x09, 0xAB, 0x4A, 0x20, 0x67, 0x88, 0x70,
+      0xF4, 0x86, 0x8B, 0x1F, 0xAE, 0x28, 0xD2, 0x09, 0xC7, 0x53, 0x68, 0xA7,
+      0x99, 0x31, 0x7D, 0xFA, 0x08, 0xC2, 0xB6, 0x51, 0xFA, 0xC7, 0x2D, 0xCA,
+      0x2A, 0x1B, 0x4C, 0xBB, 0x75, 0xE8, 0x73, 0xF1, 0x5C, 0x51, 0xB6, 0xD0,
+      0xB5, 0xE6, 0xF5, 0xE6, 0x0E, 0x2A, 0xF6, 0xC4, 0x0D, 0x2C, 0xAB, 0xCB,
+      0xF3, 0x58, 0x8F, 0x44, 0xBC, 0xEA, 0x6D, 0x72, 0xD3, 0x59, 0xF4, 0x0F,
+      0x9C, 0xF5, 0xE0, 0xEC, 0x40, 0xA5, 0x21, 0x5E, 0x5A, 0xCE, 0xEA, 0xF0,
+      0xDA, 0x00, 0xD9, 0x23, 0xD4, 0xCE, 0xFF, 0x5C, 0x3A, 0x3A, 0xB1, 0xE4,
+      0x6C, 0x75, 0x4F, 0x4A, 0xE0, 0x52, 0xC2, 0xBC, 0x49, 0xFD, 0xB4, 0x52,
+      0x1A, 0xE4, 0x4D, 0xF6, 0x34, 0xD5, 0x6E, 0x43, 0x3D, 0xAD, 0x3D, 0xF3,
+      0xC0, 0x71, 0x15, 0x40, 0x6F, 0xF8, 0xBF, 0xD0, 0xD7, 0xC9, 0x3B, 0x49,
+      0x41, 0xD0, 0xF0, 0x92, 0x13, 0xC1, 0x68, 0x1C, 0xFD, 0x5C, 0x86, 0x63,
+      0xDF, 0x02, 0x04, 0x1A, 0x3C, 0xBD, 0x16, 0x2F, 0x5C, 0x4D, 0x80, 0xCB,
+      0x1D, 0xC7, 0xD4, 0xA5, 0x01, 0xAD, 0x06, 0xFE, 0x96, 0xEB, 0x34, 0x8B,
+      0x6E, 0x33, 0x1C, 0x82, 0x96, 0xFE, 0x90, 0x4E, 0xB9, 0x7C, 0x08, 0x74,
+      0x56, 0x32, 0x8D, 0x70, 0x3B, 0x85, 0xBD, 0xAC, 0x2F, 0xB4, 0x3C, 0x72,
+      0x8D, 0x0B, 0x05, 0xFC, 0x54, 0xB8, 0xC1, 0x55, 0xC0, 0x10, 0xEF, 0x0D,
+      0xB1, 0x4C, 0xC6, 0x68, 0xD1, 0xB1, 0xBC, 0x72, 0x7A, 0xF8, 0x86, 0x40,
+      0x76, 0x73, 0x6B, 0x89, 0x8B, 0xAB, 0xA1, 0xC8, 0x1D, 0xCA, 0x20, 0x53,
+      0xF5, 0x85, 0x87, 0xD3, 0xC4, 0xE3, 0x3C, 0x69, 0x4A, 0x26, 0x4B, 0xE2,
+      0x89, 0x7E, 0x7D, 0x2E, 0xEF, 0xAD, 0xDA, 0x9F, 0xF8, 0x8D, 0x70, 0xBF,
+      0x37, 0x31, 0xF1, 0x22, 0x8C, 0xB3, 0xE1, 0x31, 0xEB, 0x0C, 0xB7, 0x6F,
+      0xDB, 0xD2, 0xCC, 0xB1, 0xCB, 0xC1, 0x8D, 0x14, 0x50, 0xAC, 0x7A, 0x16,
+      0x34, 0x9E, 0x71, 0x29, 0xCA, 0xB7, 0x20, 0xD5, 0xCB, 0x70, 0xB5, 0x6E,
+      0x85, 0x5E, 0x83, 0x05, 0xDC, 0xDA, 0x73, 0x0B, 0xBD, 0x0E, 0xA3, 0x3E,
+      0xF0, 0x81, 0x5D, 0x02, 0x19, 0x0B, 0xB9, 0x8E, 0x30, 0xF7, 0x3B, 0xF7,
+      0x78, 0x9C, 0xDD, 0x67, 0x3C, 0x61, 0x3B, 0x0C, 0x57, 0xCB, 0x2E, 0xF3,
+      0x2E, 0x67, 0x0A, 0x98, 0xD2, 0xD6, 0x30, 0x67, 0x07, 0x73, 0xC5, 0x9D,
+      0x8A, 0x6A, 0x2C, 0xFC, 0xFF, 0x1C, 0x7C, 0xA1, 0xBB, 0x55, 0xC1, 0x7A,
+      0x32, 0xCB, 0x65, 0xA2, 0xEA, 0x19, 0xC7, 0xB8, 0xE2, 0x95, 0xC6, 0x89,
+      0x8C, 0xF3, 0x2F, 0xEE, 0x1D, 0xEB, 0x01, 0x47, 0x2B, 0xE7, 0x6C, 0x3A,
+      0x78, 0xCB, 0x24, 0x2E, 0xDF, 0xE2, 0x1D, 0x96, 0x1F, 0xCB, 0x85, 0xC3,
+      0xCF, 0x6C, 0xEE, 0x21, 0x89, 0x86, 0xC1, 0xBD, 0x93, 0x2B, 0xF9, 0x7B,
+      0xC6, 0xDE, 0xCA, 0xAB, 0xF8, 0xC6, 0x29, 0x40, 0xC0, 0xA5, 0x8E, 0x87,
+      0xC6, 0xED, 0xDC, 0xD7, 0x4B, 0x7F, 0x71, 0x5D, 0x8C, 0x22, 0x52, 0x05,
+      0x46, 0x23, 0x9F, 0x3A, 0xAA, 0x10, 0xA4, 0x35, 0x82, 0x01, 0x03, 0xB4,
+      0xE3, 0x29, 0x53, 0x11, 0xD9, 0x92, 0xC9, 0xC8, 0x77, 0x1A, 0x3C, 0xE8,
+      0x49, 0x86, 0x8F, 0x36, 0xF3, 0x12, 0x14, 0xF9, 0x63, 0x9C, 0x02, 0x8F,
+      0x4A, 0x5F, 0x49, 0x45, 0xF2, 0xBE, 0xC9, 0x58, 0x50, 0x77, 0xBF, 0x2F,
+      0x63, 0x7D, 0x25, 0x49, 0xF8, 0x34, 0x8C, 0x00, 0xEC, 0xBF, 0x19, 0xC4,
+      0x70, 0xDF, 0x25, 0x5E, 0xFF, 0x62, 0x32, 0x81, 0x34, 0x29, 0xF8, 0x53,
+    },
+
+    .dk = {
+      0x17, 0x43, 0x13, 0xEF, 0xA9, 0x35, 0x20, 0xE2, 0x8A, 0x70, 0x76, 0xC8,
+      0x88, 0x09, 0x6E, 0x02, 0xB0, 0xBD, 0xD8, 0x68, 0x30, 0x49, 0x7B, 0x61,
+      0xFD, 0xEA, 0xB6, 0x20, 0x9C, 0x6C, 0xF7, 0x1C, 0x62, 0x5C, 0x46, 0x80,
+      0x77, 0x5C, 0x34, 0x77, 0x58, 0x1C, 0x42, 0x7A, 0x6F, 0xE1, 0xB0, 0x35,
+      0x6E, 0xAB, 0x04, 0x8B, 0xCA, 0x43, 0x4F, 0x83, 0xB5, 0x42, 0xC8, 0xB8,
+      0x60, 0x01, 0x06, 0x96, 0xA5, 0x72, 0x99, 0xBB, 0x26, 0x22, 0x68, 0x89,
+      0x1F, 0xFC, 0x72, 0x14, 0x2C, 0xA1, 0xA8, 0x66, 0x18, 0x5C, 0xA8, 0x2D,
+      0x05, 0x40, 0x66, 0x95, 0xBA, 0x57, 0xD4, 0xC9, 0x30, 0xF9, 0xC1, 0x7D,
+      0x62, 0x23, 0x52, 0x3C, 0xF5, 0xA4, 0xF2, 0xA4, 0x33, 0xA3, 0x64, 0x45,
+      0x9A, 0xC0, 0xAC, 0xDE, 0x72, 0x54, 0x48, 0x13, 0x29, 0x28, 0x8B, 0x1B,
+      0xE1, 0x87, 0xCC, 0x25, 0x21, 0x9F, 0x48, 0xC2, 0x44, 0x3C, 0x53, 0x21,
+      0x99, 0x85, 0x93, 0x55, 0x32, 0x0D, 0x04, 0xF0, 0xB8, 0x0D, 0xE9, 0x69,
+      0xF1, 0x69, 0xA3, 0xD2, 0xBA, 0x34, 0x11, 0xB4, 0xAD, 0xBC, 0x01, 0xB6,
+      0x62, 0x71, 0x82, 0x4C, 0xD9, 0x54, 0x3C, 0x78, 0xBA, 0x48, 0x04, 0xAE,
+      0x81, 0xF3, 0xAF, 0x00, 0x33, 0x6C, 0x5C, 0xC3, 0x69, 0x83, 0x54, 0xC0,
+      0xE0, 0x18, 0x73, 0xA2, 0xA1, 0x7D, 0x6A, 0x95, 0xA3, 0x12, 0x68, 0x9A,
+      0x99, 0xDC, 0x89, 0x08, 0x41, 0x50, 0xA8, 0xD5, 0x2B, 0xB3, 0x1C, 0x3F,
+      0xF3, 0xD4, 0x21, 0x5F, 0xA3, 0xC4, 0x11, 0x1B, 0x40, 0x19, 0x92, 0x86,
+      0x6E, 0x51, 0x3E, 0x51, 0x28, 0xA2, 0x0E, 0xD9, 0x5F, 0xDE, 0xE6, 0x14,
+      0x85, 0xDC, 0x93, 0x7E, 0x09, 0x9D, 0x76, 0xF7, 0x9B, 0x92, 0x73, 0x4D,
+      0xC4, 0xCB, 0xB9, 0xA7, 0xA4, 0x13, 0xFE, 0xA6, 0x28, 0x5B, 0xC0, 0xC2,
+      0x7C, 0x96, 0x1E, 0x47, 0xD1, 0x98, 0x36, 0x44, 0xC4, 0xBF, 0x91, 0x3D,
+      0x72, 0xF4, 0xB0, 0x30, 0xD3, 0x47, 0x38, 0x42, 0x72, 0x63, 0xE8, 0x7A,
+      0xB4, 0xC0, 0xB7, 0xDF, 0x0B, 0x72, 0xCA, 0x8A, 0xA0, 0xBA, 0xA6, 0x7B,
+      0x07, 0x99, 0x39, 0xD5, 0x87, 0x80, 0x1D, 0x60, 0xC8, 0x7A, 0x20, 0x40,
+      0x5E, 0x5C, 0x52, 0x60, 0x3C, 0x07, 0x2F, 0xDB, 0x63, 0xE2, 0xE1, 0xC2,
+      0xA9, 0x5C, 0xC2, 0x6F, 0x5A, 0xBE, 0xF6, 0x08, 0x83, 0x33, 0x80, 0x08,
+      0x86, 0xD0, 0x93, 0xCA, 0x01, 0xA7, 0x6F, 0x57, 0x00, 0x5E, 0x05, 0x35,
+      0x69, 0x54, 0x2E, 0x0A, 0x07, 0x6B, 0x98, 0x73, 0x6D, 0x4D, 0x39, 0xB0,
+      0x0F, 0xC1, 0x65, 0x3F, 0xBC, 0x2D, 0x12, 0xEA, 0x32, 0xA9, 0x4B, 0x9B,
+      0x92, 0xC6, 0x8B, 0xA4, 0xB6, 0x8A, 0x4E, 0x7B, 0x37, 0x0A, 0x23, 0xB0,
+      0x3F, 0xE8, 0x22, 0x16, 0x39, 0xB0, 0x12, 0x44, 0x80, 0x6C, 0x27, 0x06,
+      0x7A, 0x58, 0x03, 0x1D, 0xB8, 0x0D, 0x2D, 0x03, 0x66, 0x1A, 0x01, 0x7B,
+      0xB4, 0x6B, 0xB3, 0x71, 0x1A, 0xCB, 0x56, 0x8A, 0x4F, 0xAB, 0xEB, 0xAF,
+      0xC5, 0xFA, 0x06, 0xF7, 0xCA, 0x0E, 0x4D, 0x96, 0x2E, 0x31, 0x70, 0xCB,
+      0x11, 0xC0, 0xA8, 0xD1, 0x8A, 0x09, 0xCE, 0x27, 0xA6, 0xA9, 0x76, 0x3E,
+      0x12, 0x38, 0x85, 0x45, 0x02, 0x24, 0xDE, 0x07, 0xCC, 0x17, 0x54, 0x6C,
+      0x17, 0x95, 0x1F, 0xDE, 0x47, 0x6E, 0x08, 0x35, 0x83, 0xEF, 0x10, 0xBF,
+      0x76, 0xA9, 0x8A, 0xFF, 0xF9, 0xB1, 0x2D, 0xB5, 0x40, 0x1C, 0xD3, 0x67,
+      0x34, 0x95, 0x39, 0x2D, 0x74, 0x12, 0x91, 0xC3, 0xAA, 0x78, 0x42, 0x0C,
+      0x8A, 0x7C, 0xB5, 0xFF, 0xE6, 0x50, 0x12, 0x99, 0x7C, 0x4D, 0xA4, 0x32,
+      0x2E, 0xA9, 0x0B, 0x50, 0x14, 0xB5, 0xB4, 0xD0, 0x18, 0x01, 0x00, 0x24,
+      0x70, 0x47, 0x34, 0x1E, 0x4C, 0x24, 0xB9, 0x6B, 0x8D, 0x7C, 0x00, 0x20,
+      0x52, 0x4B, 0x7C, 0x1D, 0x66, 0xC3, 0xE0, 0x8C, 0xB2, 0x99, 0xEB, 0x4E,
+      0xC6, 0xFA, 0x0E, 0xE8, 0xEA, 0x05, 0xFD, 0x43, 0x0F, 0x57, 0x60, 0x5E,
+      0x89, 0x2B, 0x23, 0x2D, 0x20, 0x47, 0xCA, 0x9B, 0x4E, 0xCA, 0xD9, 0xBD,
+      0xD0, 0x9C, 0x99, 0x51, 0x19, 0x69, 0x16, 0x52, 0x5D, 0x1E, 0xC9, 0x21,
+      0xB6, 0xE3, 0xCE, 0x0E, 0xE6, 0x92, 0xEB, 0xA7, 0x28, 0xB4, 0xDB, 0x10,
+      0xF3, 0x38, 0x1F, 0xBF, 0x58, 0x4A, 0xBB, 0x7B, 0x6A, 0x92, 0x10, 0xC7,
+      0xC4, 0x24, 0xCE, 0x4A, 0x36, 0x93, 0x70, 0xCB, 0x48, 0xD6, 0x08, 0x63,
+      0x4A, 0xBA, 0x0B, 0xFF, 0x91, 0xC5, 0x62, 0x0A, 0x11, 0x89, 0xD0, 0xCA,
+      0x97, 0x42, 0x1D, 0x42, 0x34, 0x29, 0xFB, 0x66, 0x39, 0x52, 0xDC, 0x12,
+      0x31, 0xB4, 0x36, 0x2B, 0x71, 0x62, 0xFE, 0x3A, 0x42, 0x11, 0x1C, 0x91,
+      0xD7, 0x6A, 0x96, 0x4C, 0xB4, 0x15, 0x41, 0x94, 0x20, 0x9E, 0xDB, 0xAA,
+      0x1F, 0x48, 0x1B, 0xD1, 0x26, 0xC3, 0x25, 0xD1, 0x56, 0x78, 0xE3, 0x9B,
+      0xCC, 0xE4, 0xC7, 0x04, 0xEA, 0x48, 0x72, 0x46, 0x64, 0x8A, 0x6C, 0x6C,
+      0x25, 0x40, 0xB5, 0xF6, 0x80, 0xA3, 0x5E, 0xE2, 0x82, 0x42, 0x46, 0x45,
+      0x0A, 0x72, 0x93, 0xF2, 0x1A, 0x90, 0xCF, 0xD1, 0x4E, 0xFA, 0xF7, 0x8F,
+      0xA3, 0xD7, 0x32, 0x22, 0x51, 0xC6, 0x41, 0xA5, 0x0E, 0x95, 0xBB, 0x5E,
+      0xC5, 0xCA, 0x0B, 0x60, 0xE8, 0x9D, 0x7C, 0x18, 0xB7, 0xA4, 0x4A, 0x0F,
+      0xAF, 0xB4, 0xBC, 0xAD, 0xE9, 0xB5, 0x88, 0xD1, 0xB7, 0xFC, 0xF1, 0x2B,
+      0xA1, 0xE1, 0x08, 0x4D, 0x56, 0xB1, 0x97, 0xEA, 0x90, 0xA7, 0x9A, 0x3D,
+      0x83, 0x92, 0x7A, 0x23, 0x07, 0x60, 0x3B, 0xC2, 0x11, 0xC0, 0x83, 0x0C,
+      0xB7, 0x06, 0x2C, 0x04, 0x25, 0x48, 0x24, 0x57, 0x5B, 0x22, 0x6C, 0xAD,
+      0x9A, 0x27, 0xC2, 0xA4, 0x55, 0x19, 0xAE, 0x39, 0x54, 0x64, 0x67, 0x69,
+      0x04, 0x85, 0x49, 0x8A, 0x32, 0x0A, 0xD5, 0x69, 0x93, 0xB1, 0x5A, 0x9D,
+      0x22, 0xC6, 0x19, 0x14, 0x46, 0xCB, 0x40, 0xAA, 0x75, 0x47, 0x40, 0x16,
+      0x81, 0xDC, 0xC7, 0xE3, 0x65, 0x96, 0xB1, 0x0C, 0x07, 0xFA, 0x2A, 0x20,
+      0xB4, 0x3C, 0x4B, 0x01, 0x24, 0x40, 0x1F, 0x8A, 0x0E, 0x74, 0x48, 0x78,
+      0xC7, 0x29, 0x66, 0x23, 0xC7, 0x39, 0x5B, 0x69, 0x94, 0xD1, 0x8C, 0x47,
+      0x87, 0xA2, 0x89, 0xDB, 0xB0, 0x5C, 0xB1, 0x82, 0x74, 0x51, 0xD8, 0x3F,
+      0x07, 0x29, 0x04, 0x53, 0x75, 0x94, 0xF5, 0x15, 0xCA, 0x10, 0x17, 0x99,
+      0x16, 0x20, 0xA3, 0x3E, 0x09, 0x6E, 0xE0, 0xDC, 0x09, 0x1A, 0xE4, 0xCA,
+      0x96, 0x06, 0x03, 0xB1, 0x01, 0xB5, 0xB4, 0xE2, 0x3E, 0x9A, 0x5B, 0x65,
+      0xE1, 0xF6, 0xC2, 0xA8, 0xCC, 0x89, 0x34, 0x13, 0x83, 0xB7, 0x06, 0x72,
+      0x5E, 0xD5, 0xB3, 0x48, 0x57, 0x69, 0x18, 0x1B, 0x8F, 0x76, 0x43, 0x9C,
+      0x05, 0x63, 0x6A, 0x0C, 0x34, 0x36, 0xFF, 0xBA, 0x8B, 0x86, 0xA5, 0x30,
+      0x6F, 0xA1, 0x11, 0xF6, 0xFC, 0x71, 0xEB, 0x77, 0x9B, 0x25, 0x70, 0x7C,
+      0xFA, 0xE0, 0xA6, 0xDA, 0x7B, 0x0A, 0xD5, 0xD9, 0x4B, 0x10, 0xF2, 0x1E,
+      0x4F, 0xCA, 0x92, 0x89, 0x3B, 0x9F, 0xFE, 0x73, 0x21, 0x07, 0x63, 0x40,
+      0x13, 0x77, 0x83, 0x7A, 0x10, 0xCA, 0x96, 0x25, 0x34, 0x6C, 0x42, 0xAD,
+      0xC7, 0x05, 0xBD, 0x92, 0xDB, 0x34, 0x26, 0xD9, 0x26, 0xCE, 0x4B, 0x5E,
+      0xC2, 0x4A, 0x5C, 0xDF, 0x27, 0xCB, 0x91, 0xE5, 0xA7, 0xE7, 0x16, 0x4D,
+      0x1B, 0xDC, 0x99, 0xD7, 0x56, 0x79, 0xFB, 0xC9, 0x3A, 0x58, 0xF6, 0x47,
+      0xDA, 0xC1, 0x08, 0x6C, 0xE9, 0x31, 0xBC, 0x08, 0x92, 0x33, 0xE9, 0x48,
+      0x7E, 0x08, 0x67, 0xBC, 0x58, 0x47, 0x2B, 0x01, 0xBF, 0x28, 0x95, 0xC3,
+      0x23, 0xB6, 0x4D, 0xBE, 0x4A, 0x17, 0xA9, 0xE8, 0x41, 0xB0, 0x53, 0xCA,
+      0xDB, 0x5C, 0x76, 0xD0, 0x35, 0x72, 0x4C, 0x32, 0x1B, 0xBC, 0x13, 0x66,
+      0x6F, 0x0A, 0x35, 0xDF, 0xDA, 0x07, 0x21, 0xE8, 0x98, 0x76, 0x23, 0x25,
+      0x6A, 0x99, 0x4D, 0x95, 0xFA, 0x1C, 0x05, 0xF5, 0x7C, 0x1E, 0x15, 0xA3,
+      0x0C, 0x4A, 0x0C, 0x83, 0x18, 0xA0, 0xD8, 0x3C, 0x41, 0x0C, 0x36, 0x28,
+      0x62, 0xE8, 0x17, 0xDD, 0x6A, 0xBB, 0xAA, 0x4B, 0xBE, 0x75, 0xB7, 0x36,
+      0xCC, 0xCB, 0xB4, 0xAF, 0x2A, 0x18, 0x84, 0x02, 0xBD, 0x4C, 0xE5, 0x97,
+      0x93, 0x20, 0x08, 0x86, 0x28, 0x65, 0x33, 0x25, 0x62, 0xF3, 0x24, 0xC7,
+      0xA4, 0x24, 0x15, 0x1F, 0xB5, 0x9D, 0x0A, 0xE1, 0x82, 0x1F, 0x28, 0x64,
+      0xC7, 0xE6, 0x98, 0x12, 0x7A, 0xAD, 0x92, 0xC3, 0x3B, 0x31, 0x39, 0x88,
+      0xC2, 0x9A, 0x09, 0xE2, 0x60, 0x44, 0x9B, 0xCA, 0x7B, 0xEE, 0x36, 0x08,
+      0x62, 0x31, 0x4E, 0x47, 0x51, 0x9E, 0xF3, 0x91, 0x8D, 0xDD, 0xE4, 0x03,
+      0xE7, 0xB9, 0x2A, 0xC9, 0x90, 0x8F, 0x93, 0xC6, 0x36, 0x9C, 0xC5, 0xC4,
+      0x7B, 0x8C, 0xB1, 0xDC, 0x3A, 0x34, 0x79, 0xC7, 0x62, 0xF6, 0x2A, 0x18,
+      0xFE, 0x05, 0xA9, 0xB0, 0x64, 0x5A, 0x53, 0x11, 0xA0, 0x18, 0x28, 0x72,
+      0x3A, 0xEB, 0x51, 0xFA, 0x50, 0x5E, 0x96, 0xB2, 0x9E, 0x3D, 0x2B, 0x6E,
+      0x5B, 0x13, 0x27, 0xDE, 0x3A, 0x61, 0xAB, 0x0C, 0x50, 0xBE, 0x01, 0x24,
+      0xB6, 0x4B, 0x33, 0x31, 0x4B, 0x32, 0xD6, 0x12, 0x25, 0x10, 0xE4, 0x64,
+      0x45, 0x85, 0x7A, 0xA0, 0xE2, 0xC4, 0xB0, 0xD2, 0x56, 0x95, 0x56, 0x20,
+      0xA8, 0x68, 0x1D, 0x1E, 0x55, 0x51, 0x26, 0xD0, 0x05, 0x09, 0xE3, 0x5B,
+      0xF5, 0x96, 0x83, 0xDD, 0xAA, 0x40, 0xE8, 0x2C, 0x51, 0x9B, 0x85, 0x58,
+      0x52, 0xC3, 0x66, 0xCB, 0x54, 0x45, 0x2B, 0xF9, 0x10, 0xB0, 0x01, 0x69,
+      0x23, 0x30, 0x34, 0x57, 0x08, 0x65, 0x3F, 0x51, 0x18, 0x00, 0xB1, 0x0E,
+      0x00, 0x9D, 0x9F, 0x7D, 0x10, 0xA5, 0x3B, 0x8B, 0x30, 0xBF, 0x13, 0xB0,
+      0x6F, 0x25, 0x4E, 0xC8, 0xA6, 0xBA, 0x53, 0x97, 0x00, 0xF6, 0x35, 0x8D,
+      0xE0, 0x46, 0x3A, 0x01, 0x95, 0x40, 0xC9, 0x87, 0x3F, 0x3F, 0x46, 0x80,
+      0xE2, 0x11, 0x3A, 0x7C, 0xCC, 0x55, 0xFF, 0x75, 0x4D, 0x85, 0xAA, 0x67,
+      0xE9, 0xE5, 0x5F, 0x88, 0x74, 0x24, 0xE0, 0xB2, 0x62, 0x56, 0x82, 0xA5,
+      0xDD, 0xA2, 0x18, 0xF0, 0x3C, 0x3C, 0x10, 0xA2, 0x46, 0xCD, 0xB0, 0xCC,
+      0x91, 0xD1, 0x9D, 0x8F, 0x02, 0x4D, 0xB9, 0xB1, 0x41, 0x5F, 0x50, 0xAC,
+      0xD8, 0xF6, 0x5D, 0xE2, 0x78, 0x7B, 0x91, 0x03, 0xC5, 0x75, 0xB6, 0x87,
+      0x76, 0x55, 0x72, 0xCF, 0xFA, 0x59, 0x02, 0x6C, 0x2B, 0xCE, 0xE7, 0x74,
+      0x23, 0xBC, 0xAF, 0xD3, 0x05, 0x4B, 0xF8, 0xE2, 0x71, 0x3F, 0xB8, 0x5B,
+      0x0B, 0xF6, 0xA4, 0x6E, 0x71, 0x61, 0x52, 0xF5, 0xC9, 0xA3, 0x01, 0x1E,
+      0xC9, 0x01, 0x14, 0xC7, 0x6B, 0x01, 0x51, 0x67, 0x99, 0xBD, 0x59, 0x11,
+      0x41, 0x5B, 0x70, 0x45, 0x44, 0x07, 0x7F, 0x18, 0x88, 0x06, 0x75, 0x5E,
+      0xEC, 0x41, 0x31, 0xE5, 0x55, 0x56, 0xDB, 0x90, 0x3F, 0x42, 0x84, 0xC1,
+      0xF9, 0x00, 0x86, 0xFF, 0x43, 0x1B, 0x68, 0xF5, 0x1F, 0x62, 0x98, 0x12,
+      0xF3, 0x20, 0xB5, 0x5F, 0x21, 0x9D, 0x72, 0xA1, 0x92, 0x8F, 0x38, 0xC9,
+      0xA1, 0xEC, 0x82, 0x3B, 0xA1, 0x98, 0xBA, 0x9A, 0xBB, 0xAC, 0xF6, 0x29,
+      0x02, 0xB3, 0xCA, 0x0A, 0xFC, 0x95, 0xEA, 0x8A, 0xC3, 0x03, 0xFB, 0x8B,
+      0xDD, 0x29, 0xBB, 0x9D, 0x18, 0xA0, 0x3B, 0xA4, 0x4E, 0x58, 0xB1, 0xB0,
+      0xB8, 0x5A, 0x2A, 0x16, 0x62, 0xE6, 0xA3, 0x1D, 0xA7, 0x54, 0x55, 0x11,
+      0xA4, 0x78, 0xA1, 0x81, 0x77, 0x88, 0x90, 0x61, 0xEF, 0x76, 0x63, 0x12,
+      0x64, 0x23, 0x9A, 0xDE, 0xBD, 0x04, 0xA8, 0xC5, 0x2B, 0x72, 0xE2, 0xB1,
+      0xF3, 0xA2, 0xDF, 0xBB, 0xD8, 0xC0, 0x54, 0xE7, 0x0C, 0xC2, 0xA7, 0x42,
+      0xE7, 0xB7, 0xD4, 0x17, 0xDF, 0xED, 0x31, 0x44, 0x22, 0x18, 0x7D, 0xE1,
+      0xB2, 0x95, 0x44, 0x81, 0x19, 0x57, 0x55, 0xEC, 0x04, 0xBB, 0x76, 0x71,
+      0xC4, 0x33, 0x14, 0x46, 0xBB, 0xE8, 0x95, 0x25, 0x14, 0x90, 0x53, 0x21,
+      0xA2, 0x17, 0x6E, 0x93, 0x5B, 0x54, 0x20, 0xC0, 0xD5, 0xEA, 0x44, 0x65,
+    },
+
+    .exp = {
+      0x22, 0x4B, 0x9C, 0x05, 0x12, 0x13, 0xEF, 0x46, 0x54, 0x92, 0x43, 0x79,
+      0x65, 0x32, 0x28, 0x29, 0x73, 0xFA, 0x7C, 0xF9, 0x7E, 0x89, 0x13, 0xC3,
+      0x39, 0xC1, 0x94, 0x0A, 0xC1, 0x7E, 0x05, 0xE0,
+    },
+  }, {
+    .name = "0-pass",
+
+    .ct = {
+      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
+      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
+      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
+      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
+      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
+      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
+      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
+      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
+      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
+      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
+      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
+      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
+      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
+      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
+      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
+      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
+      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
+      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
+      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
+      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
+      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
+      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
+      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
+      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
+      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
+      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
+      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
+      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
+      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
+      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
+      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
+      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
+      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
+      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
+      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
+      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
+      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
+      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
+      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
+      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
+      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
+      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
+      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
+      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
+      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
+      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
+      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
+      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
+      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
+      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
+      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
+      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
+      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
+      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
+      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
+      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
+      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
+      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
+      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
+      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
+      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
+      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
+      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
+      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
+    },
+
+    .dk = {
+      0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
+      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
+      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
+      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
+      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
+      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
+      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
+      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
+      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
+      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
+      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
+      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
+      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
+      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
+      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
+      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
+      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
+      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
+      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
+      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
+      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
+      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
+      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
+      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
+      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
+      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
+      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
+      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
+      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
+      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
+      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
+      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
+      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
+      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
+      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
+      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
+      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
+      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
+      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
+      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
+      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
+      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
+      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
+      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
+      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
+      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
+      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
+      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
+      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
+      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
+      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
+      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
+      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
+      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
+      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
+      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
+      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
+      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
+      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
+      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
+      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
+      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
+      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
+      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
+      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
+      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
+      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7, 0xbb, 0xfa, 0x54, 0xd6,
+      0x9c, 0x33, 0xd3, 0x14, 0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
+      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
+    },
+  }, {
+    .name = "1-fail-implicit-rejection-0: ct[0] = 0",
+
+    .ct = {
+      0x00, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
+      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
+      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
+      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
+      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
+      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
+      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
+      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
+      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
+      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
+      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
+      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
+      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
+      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
+      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
+      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
+      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
+      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
+      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
+      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
+      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
+      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
+      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
+      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
+      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
+      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
+      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
+      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
+      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
+      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
+      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
+      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
+      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
+      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
+      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
+      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
+      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
+      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
+      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
+      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
+      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
+      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
+      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
+      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
+      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
+      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
+      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
+      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
+      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
+      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
+      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
+      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
+      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
+      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
+      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
+      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
+      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
+      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
+      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
+      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
+      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
+      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
+      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
+      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
+    },
+
+    .dk = {
+      0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
+      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
+      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
+      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
+      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
+      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
+      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
+      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
+      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
+      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
+      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
+      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
+      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
+      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
+      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
+      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
+      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
+      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
+      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
+      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
+      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
+      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
+      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
+      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
+      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
+      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
+      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
+      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
+      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
+      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
+      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
+      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
+      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
+      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
+      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
+      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
+      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
+      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
+      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
+      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
+      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
+      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
+      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
+      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
+      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
+      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
+      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
+      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
+      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
+      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
+      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
+      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
+      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
+      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
+      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
+      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
+      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
+      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
+      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
+      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
+      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
+      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
+      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
+      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
+      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
+      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
+      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x16, 0xed, 0xe9, 0x7d, 0x5f, 0xc0, 0x81, 0x14,
+      0xb6, 0x91, 0xc3, 0xba, 0x5b, 0x56, 0x4a, 0x64,
+      0x64, 0x4c, 0x8d, 0x4f, 0x67, 0x34, 0xb1, 0x99,
+      0x6d, 0x80, 0xe4, 0x6f, 0x72, 0xc4, 0x66, 0x28,
+    },
+  }, {
+    .name = "2-fail-implicit-rejection-1: dk[0] = 0",
+
+    .ct = {
+      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
+      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
+      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
+      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
+      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
+      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
+      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
+      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
+      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
+      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
+      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
+      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
+      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
+      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
+      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
+      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
+      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
+      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
+      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
+      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
+      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
+      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
+      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
+      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
+      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
+      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
+      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
+      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
+      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
+      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
+      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
+      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
+      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
+      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
+      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
+      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
+      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
+      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
+      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
+      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
+      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
+      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
+      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
+      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
+      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
+      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
+      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
+      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
+      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
+      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
+      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
+      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
+      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
+      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
+      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
+      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
+      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
+      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
+      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
+      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
+      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
+      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
+      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
+      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
+    },
+
+    .dk = {
+      0x00, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
+      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
+      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
+      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
+      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
+      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
+      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
+      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
+      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
+      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
+      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
+      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
+      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
+      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
+      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
+      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
+      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
+      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
+      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
+      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
+      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
+      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
+      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
+      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
+      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
+      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
+      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
+      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
+      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
+      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
+      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
+      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
+      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
+      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
+      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
+      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
+      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
+      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
+      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
+      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
+      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
+      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
+      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
+      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
+      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
+      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
+      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
+      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
+      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
+      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
+      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
+      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
+      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
+      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
+      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
+      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
+      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
+      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
+      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
+      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
+      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
+      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
+      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
+      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
+      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
+      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
+      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7,
+      0xbb, 0xfa, 0x54, 0xd6, 0x9c, 0x33, 0xd3, 0x14,
+      0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
+      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
+    },
+  }, {
+    .name = "2-fail-implicit-rejection-1: dk[0] = 0x01",
+
+    .ct = {
+      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
+      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
+      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
+      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
+      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
+      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
+      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
+      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
+      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
+      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
+      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
+      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
+      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
+      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
+      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
+      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
+      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
+      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
+      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
+      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
+      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
+      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
+      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
+      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
+      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
+      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
+      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
+      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
+      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
+      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
+      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
+      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
+      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
+      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
+      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
+      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
+      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
+      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
+      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
+      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
+      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
+      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
+      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
+      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
+      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
+      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
+      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
+      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
+      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
+      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
+      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
+      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
+      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
+      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
+      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
+      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
+      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
+      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
+      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
+      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
+      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
+      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
+      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
+      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
+    },
+
+    .dk = {
+      0x01, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
+      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
+      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
+      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
+      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
+      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
+      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
+      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
+      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
+      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
+      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
+      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
+      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
+      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
+      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
+      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
+      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
+      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
+      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
+      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
+      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
+      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
+      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
+      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
+      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
+      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
+      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
+      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
+      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
+      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
+      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
+      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
+      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
+      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
+      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
+      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
+      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
+      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
+      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
+      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
+      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
+      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
+      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
+      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
+      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
+      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
+      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
+      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
+      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
+      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
+      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
+      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
+      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
+      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
+      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
+      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
+      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
+      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
+      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
+      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
+      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
+      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
+      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
+      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
+      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
+      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
+      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7,
+      0xbb, 0xfa, 0x54, 0xd6, 0x9c, 0x33, 0xd3, 0x14,
+      0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
+      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
+    },
+  }, {
+    .name = "3-fail-implicit-rejection-2: dk[0] = 0xff",
+
+    .ct = {
+      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
+      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
+      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
+      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
+      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
+      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
+      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
+      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
+      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
+      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
+      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
+      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
+      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
+      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
+      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
+      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
+      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
+      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
+      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
+      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
+      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
+      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
+      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
+      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
+      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
+      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
+      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
+      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
+      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
+      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
+      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
+      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
+      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
+      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
+      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
+      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
+      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
+      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
+      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
+      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
+      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
+      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
+      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
+      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
+      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
+      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
+      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
+      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
+      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
+      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
+      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
+      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
+      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
+      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
+      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
+      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
+      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
+      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
+      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
+      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
+      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
+      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
+      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
+      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
+    },
+
+    .dk = {
+      0xff, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
+      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
+      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
+      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
+      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
+      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
+      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
+      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
+      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
+      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
+      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
+      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
+      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
+      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
+      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
+      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
+      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
+      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
+      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
+      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
+      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
+      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
+      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
+      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
+      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
+      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
+      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
+      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
+      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
+      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
+      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
+      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
+      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
+      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
+      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
+      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
+      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
+      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
+      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
+      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
+      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
+      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
+      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
+      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
+      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
+      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
+      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
+      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
+      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
+      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
+      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
+      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
+      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
+      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
+      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
+      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
+      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
+      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
+      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
+      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
+      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
+      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
+      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
+      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
+      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
+      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
+      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
+      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
+      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
+      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
+      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
+      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
+      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
+      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
+      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
+      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
+      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
+      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
+      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
+      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
+      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
+      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
+      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
+      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
+      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
+      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
+      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
+      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
+      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
+      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
+      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
+      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
+      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
+      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
+      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
+      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
+      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
+      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
+      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
+      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
+      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
+      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
+      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
+      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
+      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
+      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
+      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
+      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
+      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
+      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
+      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
+      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
+      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
+      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
+      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
+      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
+      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
+      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
+      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
+      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
+      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
+      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
+      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
+      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
+      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
+      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
+      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
+      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
+      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
+      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
+      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7,
+      0xbb, 0xfa, 0x54, 0xd6, 0x9c, 0x33, 0xd3, 0x14,
+      0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
+      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // decapsulate shared key from ciphertext `ct` using KEM512
+    // decapsulation key `dk`, then store result in buffer `got`.
+    uint8_t got[32] = { 0 };
+    fips203ipd_kem512_decaps(got, TESTS[i].ct, TESTS[i].dk);
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_fips203ipd_kem512_roundtrip(void) {
+  uint8_t buf[96] = { 0 };
+
+  for (size_t i = 0; i < NUM_ROUNDTRIP_TIMES; i++) {
+    rand_bytes(buf, sizeof(buf));
+    const uint8_t * const keygen_seed = buf; // 64 bytes
+    const uint8_t * const encaps_seed = buf + 64; // 32 bytes
+
+    // generate encapsulation and decapsulation keys
+    uint8_t ek[FIPS203IPD_KEM512_EK_SIZE] = { 0 };
+    uint8_t dk[FIPS203IPD_KEM512_DK_SIZE] = { 0 };
+    fips203ipd_kem512_keygen(ek, dk, keygen_seed);
+
+    // encapsulate, get key and ciphertext
+    uint8_t k0[32] = { 0 };
+    uint8_t ct[FIPS203IPD_KEM512_CT_SIZE] = { 0 };
+    fips203ipd_kem512_encaps(k0, ct, ek, encaps_seed);
+
+    // decapsulate key from ciphertext
+    uint8_t k1[32] = { 0 };
+    fips203ipd_kem512_decaps(k1, ct, dk);
+
+    // verify that k0 == k1
+    compare_keys(__func__, k0, k1, keygen_seed, encaps_seed);
+  }
+}
+
+static void test_mat3_mul(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t mat[9];
+    const poly_t vec[3];
+    const poly_t exp[3];
+  } TESTS[] = {{
+    .name = "[[1, x, x^2], [x^3, x^4, x^5], [x^6, x^7, x^8]] * [x^9, x^10, x^11]^T",
+    //       [    1    x  x^2  ]
+    // mat = [  x^3  x^4  x^5  ]
+    //       [  x^6  x^7  x^8  ]
+    .mat = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
+
+      { .cs = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
+    },
+
+    //       (   x^9, )
+    // vec = (  x^10, )
+    //       (  x^11  )
+    .vec = {
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 } },
+    },
+
+    //       (   x^9 + x^11 + x^13  )
+    // exp = (  x^12 + x^14 + x^16  )
+    //       (  x^15 + x^17 + x^19  )
+    .exp = {
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1 } },
+      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // populate matrix, apply NTT
+    poly_t mat[9] = { 0 };
+    memcpy(mat, TESTS[i].mat, sizeof(mat));
+    mat3_ntt(mat);
+
+    // populate vector, apply NTT
+    poly_t vec[3] = { 0 };
+    memcpy(vec, TESTS[i].vec, sizeof(vec));
+    vec3_ntt(vec);
+
+    poly_t got[3] = { 0 };
+    mat3_mul(got, mat, vec); // got = mat * vec
+    vec3_inv_ntt(got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec3_write(stderr, "got", got);
+      fprintf(stderr, "exp:\n");
+      vec3_write(stderr, "exp", TESTS[i].exp);
+    }
+  }
+}
+
+static void test_vec3_add(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t a[3]; // test value a
+    const poly_t b[3]; // test value b
+    const poly_t exp[3]; // expected value
+  } TESTS[] = {{
+    .name = "[1, x, x^2]^T + [x^3, x^4, x^5]^T = [1 + x^3, x + x^4, x^2 + x^5]^T",
+    .a = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+    },
+
+    .b = {
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
+    },
+
+    .exp = {
+      { .cs = { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 1, 0, 0, 1, 0, 0, 0, 0 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t got[3] = { 0 };
+    memcpy(got, TESTS[i].a, sizeof(got)); // got = a
+
+    vec3_add(got, TESTS[i].b); // got += b
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec3_write(stderr, "got", got);
+      fprintf(stderr, "exp:\n");
+      vec3_write(stderr, "exp", TESTS[i].exp);
+    }
+  }
+}
+
+static void test_vec3_dot(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t a[3]; // test value a
+    const poly_t b[3]; // test value b
+    const poly_t exp; // expected value
+  } TESTS[] = {{
+    .name = "[1, x, x^2] * [x^3, x^4, x^5]^T = (x^3 + x^5 + x^7)",
+    .a = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+    },
+
+    .b = {
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
+    },
+
+    .exp = { .cs = { 0, 0, 0, 1, 0, 1, 0, 1, 0, 0 } },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t a[3], b[3];
+
+    memcpy(a, TESTS[i].a, sizeof(a));
+    vec3_ntt(a); // a = NTT(a)
+
+    memcpy(b, TESTS[i].b, sizeof(b));
+    vec3_ntt(b); // b = NTT(b)
+
+    poly_t got = { 0 };
+    vec3_dot(&got, a, b); // got = a * b
+    poly_inv_ntt(&got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
+      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
+    }
+  }
+}
+
+static void test_vec3_ntt(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t exp[3]; // expected value
+  } TESTS[] = {{
+    .name = "[1, x, x^2]^T",
+    .exp = {
+      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
+    },
+  }, {
+    .name = "[x^3, x^4, x^5]^T",
+    .exp = {
+      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
+      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t got[3] = { 0 };
+    memcpy(got, TESTS[i].exp, sizeof(got));
+    vec3_ntt(got); // got = NTT(exp)
+    vec3_inv_ntt(got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec3_write(stderr, "got", got);
+      fprintf(stderr, "\nexp:\n");
+      vec3_write(stderr, "exp", TESTS[i].exp);
+      fputs("\n", stderr);
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val[3]; // test vector
+} VEC3_ENCODE_TESTS[] = {{
+  .name = "basic",
+  .val = {
+    { .cs = { 1, 2, 3, 4, 5 } },
+    { .cs = { 3328, 3327, 3326, 3325, 3324 } },
+    { .cs = { 100, 200, 300, 400, 500 } },
+  },
+}};
+
+DEF_TEST_VEC_FNS(3)
+DEF_TEST_VEC_BIT_FNS(3, 10)
+
+static const struct {
+  const char *name; // test name
+  const uint8_t seed[32]; // test seed
+  const uint8_t exp_ek[PKE768_EK_SIZE]; // expected ek (1184 bytes)
+  const uint8_t exp_dk[PKE768_DK_SIZE]; // expected dk (1152 bytes)
+} PKE768_KEYGEN_TESTS[] = {{
+  .name = "all-zero",
+  .seed = { 0 },
+  .exp_ek = {
+    0x9c, 0x35, 0x94, 0xe2, 0x35, 0xa8, 0x31, 0x46, 0xb4, 0x90, 0x75, 0x0a,
+    0xfc, 0x8b, 0x5c, 0x65, 0x9c, 0x88, 0x0b, 0x5b, 0x5b, 0x64, 0xa8, 0x37,
+    0xef, 0x52, 0xa2, 0x93, 0xf3, 0x2e, 0x2d, 0x79, 0xa2, 0x6e, 0x03, 0xb6,
+    0xf4, 0x46, 0x6c, 0x14, 0x9b, 0xa2, 0x50, 0xbb, 0x6b, 0x1a, 0x15, 0x92,
+    0xb0, 0x71, 0x88, 0xc9, 0x6c, 0x9c, 0x46, 0x68, 0x81, 0x83, 0x01, 0x89,
+    0xe2, 0xf8, 0x28, 0x53, 0x76, 0x78, 0xe7, 0xc3, 0x5e, 0xfc, 0x68, 0x0d,
+    0x32, 0xf6, 0x5e, 0x7e, 0x4b, 0x65, 0x1d, 0x5c, 0xb3, 0xa5, 0x87, 0xae,
+    0x30, 0xf3, 0x9d, 0x62, 0xda, 0x39, 0x16, 0x58, 0x64, 0x04, 0xaa, 0x3f,
+    0x1e, 0xa2, 0x50, 0xc8, 0x06, 0x11, 0x1d, 0x5c, 0xc4, 0x4b, 0xa6, 0xb5,
+    0xc6, 0x36, 0x40, 0x4c, 0x11, 0xc8, 0xcd, 0x83, 0x26, 0x88, 0x8a, 0xa6,
+    0x70, 0xa7, 0x8d, 0xa7, 0x20, 0x53, 0xfe, 0x87, 0x27, 0xd2, 0x64, 0x88,
+    0x44, 0x34, 0x2b, 0x09, 0xa4, 0xcf, 0xec, 0x68, 0xa6, 0x47, 0x80, 0x5e,
+    0x67, 0xeb, 0x83, 0x4b, 0x6b, 0x5c, 0x7e, 0x00, 0x65, 0xd0, 0xc3, 0x8d,
+    0xba, 0x47, 0x3f, 0xa3, 0x35, 0x37, 0xdc, 0xb9, 0x58, 0x3e, 0xa1, 0x87,
+    0x46, 0xf9, 0xcb, 0x93, 0xf9, 0x9f, 0x92, 0x35, 0x6d, 0x8d, 0x68, 0xc1,
+    0xb8, 0x64, 0x81, 0x85, 0x84, 0x6e, 0xf8, 0xe9, 0x7b, 0xaf, 0x91, 0x0e,
+    0xa2, 0x93, 0x4b, 0x82, 0xc2, 0x44, 0xde, 0x06, 0x00, 0xf5, 0xb0, 0x44,
+    0x76, 0x48, 0xc3, 0x6f, 0xd1, 0x9f, 0xf8, 0x66, 0x45, 0xd3, 0xe3, 0x8e,
+    0x49, 0x33, 0x83, 0x96, 0x06, 0x96, 0x30, 0xe2, 0x1f, 0xd3, 0x49, 0x0f,
+    0xd1, 0xb9, 0x2c, 0x2d, 0x99, 0x84, 0xa6, 0x61, 0xc6, 0xb7, 0x41, 0x5d,
+    0x49, 0x39, 0xad, 0x95, 0x45, 0xc5, 0xca, 0x1a, 0x5a, 0xc3, 0x45, 0x04,
+    0xbf, 0x34, 0xae, 0x16, 0x72, 0x1a, 0x29, 0x9a, 0x03, 0xf3, 0x09, 0x53,
+    0xad, 0xf5, 0x7a, 0x53, 0x54, 0x6d, 0x48, 0xca, 0x7b, 0x9e, 0x61, 0x20,
+    0xe9, 0xba, 0x8e, 0x56, 0xab, 0x47, 0x9d, 0x77, 0x83, 0x0d, 0x69, 0x00,
+    0x52, 0xb9, 0xa1, 0x9c, 0x16, 0x28, 0xe3, 0x68, 0x27, 0x5d, 0xcb, 0x41,
+    0x7c, 0xd1, 0xb6, 0x44, 0xd0, 0x65, 0x2a, 0x25, 0xa2, 0xf2, 0x84, 0x4b,
+    0xf7, 0x85, 0xab, 0x22, 0xd8, 0x42, 0x21, 0x78, 0x58, 0x79, 0xcb, 0x37,
+    0xa9, 0xf7, 0xce, 0x99, 0x90, 0x12, 0xe8, 0x49, 0x38, 0x76, 0x22, 0x2d,
+    0x25, 0x83, 0xb9, 0x5f, 0x72, 0x0d, 0xc2, 0x00, 0x6d, 0xc5, 0x59, 0x43,
+    0x4f, 0x33, 0xa1, 0xb8, 0x45, 0x82, 0x2a, 0x11, 0x13, 0x9a, 0x08, 0x35,
+    0x18, 0xfb, 0x34, 0x68, 0x97, 0x7c, 0xfa, 0xa7, 0x9f, 0x5e, 0xf9, 0x68,
+    0x4b, 0x3a, 0x40, 0xb7, 0xf2, 0x66, 0x9b, 0x05, 0x01, 0x4f, 0xe1, 0x98,
+    0xed, 0xc7, 0x34, 0xfa, 0xc2, 0x27, 0xe6, 0xd7, 0x47, 0x86, 0xfb, 0x17,
+    0x78, 0x45, 0x62, 0x01, 0x07, 0x6d, 0xe7, 0xa4, 0x66, 0x5e, 0x76, 0x45,
+    0xd3, 0x37, 0xc2, 0x46, 0x45, 0x0f, 0x0d, 0xa3, 0x50, 0x90, 0xa3, 0x5b,
+    0xda, 0x44, 0x5a, 0x40, 0xb6, 0x93, 0xe8, 0xd6, 0x96, 0x0f, 0x10, 0x1c,
+    0x0b, 0xe2, 0x7d, 0x03, 0x9a, 0x7a, 0x22, 0x37, 0x1b, 0x55, 0x36, 0x80,
+    0x45, 0x87, 0xbe, 0xd9, 0x29, 0x87, 0xf3, 0xec, 0x61, 0xa3, 0x2a, 0x60,
+    0xa9, 0x3c, 0x0e, 0x0f, 0x83, 0x1f, 0xda, 0xb1, 0x2f, 0x01, 0x21, 0x48,
+    0xb6, 0x5b, 0x89, 0x7f, 0x79, 0xb8, 0x6c, 0x49, 0x90, 0xb3, 0x0b, 0xb2,
+    0x6c, 0x64, 0x24, 0xe7, 0xf7, 0x90, 0xeb, 0xb5, 0xc0, 0xc5, 0x04, 0x8c,
+    0x16, 0x66, 0x56, 0xb0, 0x01, 0x2b, 0x9f, 0xe8, 0x54, 0x6a, 0x01, 0x0b,
+    0xb3, 0x33, 0x95, 0x6a, 0x85, 0x7b, 0xbc, 0xc0, 0x3b, 0x1a, 0x30, 0x47,
+    0xbd, 0x86, 0x20, 0x6b, 0x22, 0x26, 0x58, 0x3b, 0x1d, 0x7b, 0x08, 0x98,
+    0x45, 0x11, 0x29, 0x57, 0x61, 0x7f, 0xfa, 0x93, 0x66, 0x54, 0x87, 0xb2,
+    0x46, 0x91, 0x96, 0x7a, 0xe6, 0xb6, 0x41, 0x20, 0x9e, 0x0e, 0xb2, 0xaf,
+    0xb1, 0x14, 0x8e, 0x1d, 0xaa, 0x76, 0x7f, 0x17, 0x63, 0xb5, 0xf9, 0x60,
+    0x8c, 0xe5, 0x06, 0xba, 0x93, 0x98, 0xe7, 0x46, 0x90, 0x9d, 0x52, 0x39,
+    0x47, 0x47, 0x6f, 0x6d, 0xd8, 0x35, 0xfb, 0x8a, 0x4b, 0x5e, 0x8c, 0x26,
+    0xbc, 0xd0, 0xb6, 0xb9, 0xc6, 0x2f, 0xe4, 0x69, 0x26, 0x55, 0x8a, 0x84,
+    0xa1, 0xd2, 0x54, 0x66, 0x2c, 0x38, 0xcd, 0xa5, 0x0f, 0x5e, 0x27, 0xc3,
+    0xf0, 0x9a, 0x56, 0x7a, 0xe6, 0x6f, 0x26, 0xac, 0x24, 0x90, 0x71, 0x7e,
+    0x60, 0x45, 0x16, 0x2b, 0x15, 0x4e, 0xa5, 0x91, 0x9f, 0xfb, 0x08, 0x96,
+    0xaa, 0x24, 0x84, 0xb2, 0xb7, 0x7c, 0x2f, 0x8c, 0x80, 0x8b, 0xb9, 0x98,
+    0xc6, 0xc0, 0x7e, 0xf7, 0xa0, 0x25, 0x28, 0x51, 0x15, 0xf8, 0x7b, 0x7e,
+    0xe4, 0x54, 0x6c, 0xcf, 0x52, 0x29, 0xac, 0x02, 0x4b, 0x9b, 0x1a, 0x4f,
+    0x60, 0x3a, 0x91, 0x0d, 0x6a, 0x8f, 0x71, 0xbb, 0x33, 0x40, 0xf8, 0x80,
+    0x1b, 0x38, 0x37, 0xd0, 0xf8, 0xc2, 0x2b, 0x30, 0x4e, 0x31, 0xb9, 0x14,
+    0xf9, 0xba, 0x5e, 0x48, 0xf1, 0x41, 0x11, 0x08, 0x67, 0xf5, 0xc6, 0x72,
+    0x7f, 0xa2, 0x46, 0xc6, 0x99, 0x6b, 0x07, 0xc3, 0x0b, 0xe4, 0x99, 0xab,
+    0x08, 0x92, 0x17, 0x69, 0x5a, 0x7f, 0x5d, 0xf7, 0x5f, 0x95, 0x50, 0x32,
+    0xa0, 0xd8, 0xae, 0x08, 0x21, 0x54, 0xfd, 0xac, 0x64, 0x7c, 0x7b, 0x97,
+    0x8c, 0xfc, 0x8a, 0x42, 0x8c, 0x62, 0x0f, 0x20, 0x8d, 0x80, 0x58, 0x66,
+    0x59, 0x72, 0x85, 0x48, 0xb1, 0x13, 0x27, 0xd9, 0x97, 0xc8, 0x53, 0x34,
+    0x8f, 0x7b, 0x48, 0x70, 0xe0, 0x4d, 0xd6, 0x00, 0x7b, 0x71, 0x02, 0x04,
+    0x7f, 0x30, 0x80, 0x33, 0x21, 0x47, 0xea, 0x09, 0x86, 0x6c, 0x93, 0x5e,
+    0x17, 0x96, 0x95, 0x3b, 0x7c, 0x1e, 0x92, 0xda, 0xa8, 0xaa, 0x12, 0x6e,
+    0x30, 0x7a, 0x38, 0xaf, 0x3c, 0x90, 0x6b, 0xd6, 0xb4, 0xfa, 0x6c, 0x5e,
+    0x8d, 0x49, 0xce, 0x08, 0x5c, 0x26, 0x34, 0x43, 0x94, 0xe5, 0xb6, 0x8d,
+    0xec, 0x83, 0x50, 0xa0, 0x38, 0x9f, 0xb4, 0xf2, 0xbf, 0xdd, 0x37, 0x73,
+    0xd2, 0x25, 0xb4, 0x97, 0xa2, 0xa8, 0x3a, 0xf3, 0x2c, 0x80, 0x67, 0x56,
+    0x3d, 0x75, 0x03, 0x42, 0xd7, 0x51, 0x14, 0x02, 0x4a, 0x3d, 0x5b, 0x9e,
+    0x6c, 0x3b, 0x16, 0xe9, 0xc4, 0x28, 0x77, 0x43, 0x17, 0xb1, 0x78, 0x8d,
+    0x54, 0xfb, 0xc5, 0xb4, 0x39, 0xc1, 0xd9, 0x57, 0x1c, 0xd7, 0xab, 0xb7,
+    0xbd, 0x28, 0x4c, 0x98, 0x58, 0x32, 0x15, 0xf0, 0x3b, 0x14, 0x36, 0x80,
+    0xa0, 0xd0, 0xaf, 0xae, 0x26, 0x6b, 0xef, 0x93, 0x1c, 0xc1, 0xa2, 0xaa,
+    0x22, 0xf8, 0xc8, 0xd5, 0x50, 0xa6, 0x9a, 0x0a, 0x34, 0x35, 0xa7, 0xcb,
+    0xcd, 0xba, 0x5c, 0x18, 0xd6, 0x31, 0xc4, 0x5b, 0xc3, 0x12, 0x55, 0xc4,
+    0x0a, 0x64, 0x30, 0x10, 0xe5, 0x95, 0x18, 0x67, 0x68, 0xd9, 0x79, 0x47,
+    0xa0, 0xd1, 0x61, 0x0f, 0x11, 0x70, 0x23, 0xd8, 0xbb, 0x19, 0xf2, 0x4a,
+    0xe1, 0x22, 0x71, 0xf1, 0x69, 0x06, 0x59, 0x02, 0x5a, 0x6e, 0xd2, 0x30,
+    0x08, 0x0b, 0x61, 0xce, 0x61, 0x9b, 0x86, 0x60, 0x1a, 0xaf, 0x5b, 0x46,
+    0x7b, 0xb3, 0x12, 0x84, 0x75, 0x59, 0x91, 0x32, 0xaa, 0x16, 0x21, 0x40,
+    0xc2, 0x00, 0xbd, 0x38, 0x88, 0xa4, 0x56, 0x7c, 0x5f, 0x69, 0x42, 0x9b,
+    0x88, 0xd3, 0x53, 0x97, 0x86, 0x07, 0xd7, 0x4b, 0xcf, 0xf6, 0x39, 0x9a,
+    0x09, 0x34, 0x13, 0x01, 0x22, 0xb7, 0xfd, 0xb6, 0x60, 0x83, 0x49, 0x50,
+    0x64, 0xb7, 0x72, 0x00, 0xc9, 0x11, 0x1d, 0xfa, 0x25, 0x28, 0x28, 0x8e,
+    0x69, 0x20, 0x05, 0xda, 0xa7, 0x5c, 0x48, 0x62, 0x2c, 0xf4, 0xa5, 0x9e,
+    0x73, 0xb4, 0x95, 0xc5, 0xa2, 0x8f, 0x5a, 0x30, 0x84, 0xfe, 0xa0, 0x22,
+    0x82, 0x9b, 0x72, 0x99, 0xb8, 0x36, 0xed, 0xfa, 0x02, 0x57, 0xc9, 0x9d,
+    0xb1, 0x88, 0x92, 0xd2, 0xc0, 0x54, 0x07, 0xf9, 0x78, 0xf8, 0x76, 0x03,
+    0x55, 0x95, 0x95, 0xb2, 0xa1, 0x2e, 0xd2, 0x19, 0xb6, 0x88, 0xe8, 0x4b,
+    0xa8, 0x70, 0xc1, 0xfb, 0x41, 0x97, 0x39, 0xf5, 0x55, 0x84, 0x0a, 0x3c,
+    0xbf, 0x91, 0x56, 0x57, 0xa5, 0x24, 0x50, 0x64, 0x46, 0xd4, 0x75, 0x05,
+    0x22, 0x52, 0x1b, 0x81, 0x67, 0xad, 0x26, 0x19, 0x1e, 0xcd, 0x6a, 0x5d,
+    0x43, 0x15, 0xc0, 0xee, 0x94, 0x0d, 0x60, 0x78, 0x07, 0x79, 0x35, 0x0a,
+    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+  },
+
+  .exp_dk = {
+    0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+    0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+    0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+    0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+    0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+    0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+    0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+    0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+    0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+    0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+    0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+    0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+    0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+    0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+    0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+    0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+    0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+    0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+    0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+    0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+    0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+    0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+    0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+    0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+    0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+    0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+    0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+    0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+    0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+    0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+    0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+    0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+    0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+    0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+    0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+    0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+    0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+    0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+    0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+    0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+    0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+    0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+    0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+    0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+    0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+    0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+    0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+    0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+    0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+    0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+    0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+    0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+    0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+    0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+    0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+    0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+    0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+    0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+    0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+    0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+    0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+    0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+    0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+    0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+    0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+    0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+    0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+    0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+    0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+    0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+    0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+    0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+    0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+    0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+    0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+    0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+    0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+    0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+    0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+    0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+    0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+    0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+    0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+    0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+    0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+    0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+    0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+    0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+    0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+    0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+    0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+    0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+    0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+    0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+    0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+    0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+  },
+}, {
+  // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+  .name = "Key Generation -- ML-KEM-768",
+  .seed = {
+    0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6, 0xEE, 0x86, 0xFE, 0x00,
+    0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34, 0x86, 0x0F, 0x5F, 0xF7,
+    0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
+  },
+
+  .exp_ek = {
+    0xD2, 0xE6, 0x9A, 0x05, 0x53, 0x4A, 0x72, 0x32, 0xC5, 0xF1, 0xB7, 0x66,
+    0xE9, 0x3A, 0x5E, 0xE2, 0xEA, 0x1B, 0x26, 0xE8, 0x60, 0xA3, 0x44, 0x1A,
+    0xDE, 0xA9, 0x1E, 0xDB, 0x78, 0x2C, 0xAB, 0xC8, 0xA5, 0xD0, 0x11, 0xA2,
+    0x1B, 0xC3, 0x88, 0xE7, 0xF4, 0x86, 0xF0, 0xB7, 0x99, 0x30, 0x79, 0xAE,
+    0x3F, 0x1A, 0x7C, 0x85, 0xD2, 0x7D, 0x0F, 0x49, 0x21, 0x84, 0xD5, 0x90,
+    0x62, 0x14, 0x2B, 0x76, 0xA4, 0x37, 0x34, 0xA9, 0x0D, 0x55, 0x6A, 0x95,
+    0xDC, 0x48, 0x3D, 0xD8, 0x21, 0x04, 0xED, 0x58, 0xCA, 0x15, 0x71, 0xC3,
+    0x96, 0x85, 0x82, 0x79, 0x51, 0x43, 0x4C, 0xC1, 0x00, 0x1A, 0xA4, 0xC8,
+    0x13, 0x26, 0x1E, 0x4F, 0x93, 0x02, 0x8E, 0x14, 0xCD, 0x08, 0xF7, 0x68,
+    0xA4, 0x54, 0x31, 0x0C, 0x3B, 0x01, 0x0C, 0x83, 0xB7, 0x4D, 0x04, 0xA5,
+    0x7B, 0xB9, 0x77, 0xB3, 0xD8, 0xBC, 0xF3, 0xAA, 0xA7, 0x8C, 0xA1, 0x2B,
+    0x78, 0xF0, 0x10, 0xD9, 0x51, 0x34, 0x92, 0x8A, 0x5E, 0x5D, 0x96, 0xA0,
+    0x29, 0xB4, 0x42, 0xA4, 0x18, 0x88, 0x03, 0x8B, 0x29, 0xC2, 0xF1, 0x22,
+    0xB0, 0xB6, 0xB3, 0xAF, 0x12, 0x1A, 0xEA, 0x29, 0xA0, 0x55, 0x53, 0xBD,
+    0xF1, 0xDB, 0x60, 0x7A, 0xFB, 0x17, 0x00, 0x18, 0x60, 0xAF, 0x18, 0x23,
+    0xBC, 0xF0, 0x3D, 0xB3, 0xB4, 0x41, 0xDA, 0x16, 0x3A, 0x28, 0xC5, 0x23,
+    0xA5, 0xFB, 0x46, 0x69, 0xA6, 0x42, 0x34, 0xA4, 0xBC, 0xD1, 0x21, 0x7F,
+    0xF2, 0x63, 0x5B, 0xD9, 0x76, 0x80, 0xFF, 0x93, 0x8D, 0xBC, 0xF1, 0x0E,
+    0x95, 0x32, 0xA9, 0xA7, 0x9A, 0x5B, 0x07, 0x3A, 0x9E, 0x8D, 0xB2, 0x12,
+    0x3D, 0x21, 0x0F, 0xAE, 0xA2, 0x00, 0xB6, 0x64, 0x83, 0x8E, 0x80, 0x07,
+    0x1F, 0x2B, 0xA2, 0x54, 0xAA, 0xC8, 0x90, 0xA4, 0x6E, 0x28, 0xEC, 0x34,
+    0x2D, 0x92, 0x81, 0x2B, 0x01, 0x59, 0x30, 0x71, 0x65, 0x7E, 0x7A, 0x3A,
+    0x4A, 0x75, 0xCB, 0x3D, 0x52, 0x79, 0xCE, 0x88, 0x40, 0x5A, 0xC5, 0xAD,
+    0xAC, 0xB2, 0x05, 0x1E, 0x02, 0x2E, 0xE0, 0xAC, 0x9B, 0xBF, 0xE3, 0x2D,
+    0xEF, 0x98, 0x66, 0x7E, 0xD3, 0x47, 0xAD, 0xCB, 0x39, 0x30, 0xF3, 0xCA,
+    0xD0, 0x31, 0x39, 0x1B, 0x70, 0x9A, 0x4E, 0x61, 0xB8, 0xDD, 0x4B, 0x3F,
+    0xB7, 0x41, 0xB5, 0xBD, 0x60, 0xBF, 0x30, 0x40, 0x15, 0xEE, 0x75, 0x46,
+    0xA2, 0x4B, 0x59, 0xEA, 0xDC, 0xA1, 0x37, 0xC7, 0x12, 0x50, 0x74, 0x72,
+    0x6B, 0x76, 0x86, 0xEC, 0x55, 0x1B, 0x7B, 0xC2, 0x6B, 0xBD, 0xB2, 0x0F,
+    0xC3, 0x78, 0x35, 0x34, 0xE3, 0x4E, 0xE1, 0xF1, 0xBC, 0x6B, 0x77, 0xAB,
+    0x49, 0xA6, 0x66, 0x78, 0x46, 0x97, 0x57, 0x78, 0xC3, 0xC5, 0x36, 0x83,
+    0x04, 0x50, 0xA3, 0xFA, 0x91, 0x02, 0x59, 0x72, 0x2F, 0x3F, 0x80, 0x6E,
+    0x6E, 0xB4, 0xB9, 0x34, 0x67, 0x63, 0xFE, 0xF0, 0x92, 0x2B, 0xC4, 0xB6,
+    0xEB, 0x38, 0x26, 0xAF, 0xF2, 0x4E, 0xAD, 0xC6, 0xCF, 0x6E, 0x47, 0x7C,
+    0x2E, 0x05, 0x5C, 0xFB, 0x7A, 0x90, 0xA5, 0x5C, 0x06, 0xD0, 0xB2, 0xA2,
+    0xF5, 0x11, 0x60, 0x69, 0xE6, 0x4A, 0x5B, 0x50, 0x78, 0xC0, 0x57, 0x7B,
+    0xC8, 0xE7, 0x90, 0x0E, 0xA7, 0x1C, 0x34, 0x1C, 0x02, 0xAD, 0x85, 0x4E,
+    0xA5, 0xA0, 0x1A, 0xF2, 0xA6, 0x05, 0xCB, 0x20, 0x68, 0xD5, 0x24, 0x38,
+    0xCD, 0xDC, 0x60, 0xB0, 0x38, 0x82, 0xCC, 0x02, 0x4D, 0x13, 0x04, 0x5F,
+    0x2B, 0xA6, 0xB0, 0xF4, 0x46, 0xAA, 0xA5, 0x95, 0x87, 0x60, 0x61, 0x79,
+    0x45, 0x37, 0x1F, 0xD7, 0x8C, 0x28, 0xA4, 0x06, 0x77, 0xA6, 0xE7, 0x2F,
+    0x51, 0x3B, 0x9E, 0x06, 0x67, 0xA9, 0xBA, 0xF4, 0x46, 0xC1, 0xBA, 0x93,
+    0x1B, 0xA8, 0x18, 0x34, 0x23, 0x47, 0x92, 0xA2, 0xA2, 0xB2, 0xB3, 0x70,
+    0x1F, 0x31, 0xB7, 0xCF, 0x46, 0x7C, 0x80, 0xF1, 0x98, 0x11, 0x41, 0xBB,
+    0x45, 0x77, 0x93, 0xE1, 0x30, 0x70, 0x91, 0xC4, 0x8B, 0x59, 0x14, 0x64,
+    0x6A, 0x60, 0xCE, 0x1A, 0x30, 0x15, 0x43, 0x77, 0x9D, 0x7C, 0x33, 0x42,
+    0xAD, 0x17, 0x97, 0x96, 0xC2, 0xC4, 0x40, 0xD9, 0x9D, 0xF9, 0xD4, 0x1B,
+    0x52, 0xE3, 0x26, 0x25, 0xA8, 0x2A, 0xA5, 0xF5, 0x79, 0xA9, 0x92, 0x0B,
+    0xFF, 0xBA, 0x96, 0x4F, 0xA7, 0x0D, 0xB2, 0x59, 0xC8, 0x5E, 0x68, 0xC8,
+    0x13, 0x81, 0x7B, 0x13, 0x47, 0xBF, 0x19, 0x81, 0x4D, 0xA5, 0xE9, 0x36,
+    0x4A, 0x46, 0x45, 0xE6, 0x21, 0x92, 0x3D, 0x95, 0x5C, 0x21, 0x1A, 0x55,
+    0xD3, 0x55, 0xC8, 0x16, 0xDA, 0x04, 0x73, 0x0A, 0xA3, 0x24, 0x08, 0x5E,
+    0x62, 0x2B, 0x51, 0xD6, 0x10, 0x9B, 0x49, 0xF6, 0x73, 0xAD, 0xD0, 0x0E,
+    0x41, 0x47, 0x55, 0xC8, 0x02, 0x4A, 0xA0, 0x16, 0x4F, 0x24, 0x55, 0x6D,
+    0xED, 0x96, 0x3D, 0x61, 0x14, 0x38, 0x56, 0xCB, 0x4F, 0xF0, 0x56, 0x7E,
+    0x33, 0x20, 0x73, 0x0D, 0xBC, 0xBF, 0x12, 0xF6, 0x6E, 0x2B, 0x70, 0xB2,
+    0x00, 0x54, 0xA6, 0xDE, 0xA4, 0x26, 0x14, 0xB5, 0x0E, 0xF7, 0x2B, 0x15,
+    0x6F, 0x51, 0x49, 0xFC, 0x26, 0x3D, 0xD7, 0xE0, 0x39, 0xC5, 0x5A, 0x3E,
+    0xE9, 0x82, 0x7D, 0xF9, 0x2C, 0x56, 0x5D, 0x24, 0xC5, 0x5E, 0x0A, 0x81,
+    0xC6, 0x49, 0x46, 0x95, 0x34, 0x4D, 0x94, 0x87, 0x48, 0xAF, 0xBA, 0x9F,
+    0x76, 0x2C, 0x0E, 0xA9, 0x0B, 0xB7, 0x24, 0x89, 0x79, 0x02, 0x00, 0x07,
+    0x75, 0x61, 0x39, 0x49, 0x60, 0x2C, 0x48, 0xC7, 0x8A, 0x94, 0x40, 0x67,
+    0x8C, 0x24, 0x08, 0x6D, 0x32, 0x6D, 0x79, 0x64, 0x3B, 0xAF, 0x70, 0x36,
+    0xC6, 0x6C, 0x7E, 0x02, 0x6A, 0xAE, 0xFD, 0xA2, 0x80, 0x7A, 0x60, 0xBD,
+    0x7F, 0xC9, 0x13, 0x63, 0xBB, 0x02, 0x34, 0xA5, 0x90, 0x98, 0x4A, 0xA0,
+    0x11, 0xF1, 0x1D, 0x40, 0x26, 0x82, 0x18, 0xA1, 0x58, 0x83, 0x77, 0xB3,
+    0xD7, 0x67, 0x1B, 0x8B, 0x99, 0x78, 0x99, 0x19, 0xB8, 0x6E, 0xE8, 0x2B,
+    0x18, 0xEC, 0x22, 0xD4, 0xE8, 0x0A, 0x1F, 0x27, 0x85, 0x3D, 0x88, 0x94,
+    0x19, 0xD4, 0x60, 0xDE, 0xF7, 0x56, 0x7A, 0xA4, 0x56, 0x79, 0x69, 0xC4,
+    0x30, 0x48, 0xC3, 0x2B, 0x84, 0x62, 0xA9, 0xC9, 0x38, 0x6E, 0xB3, 0x15,
+    0x2A, 0x69, 0x76, 0xAA, 0x78, 0x3C, 0xDD, 0x1A, 0x8C, 0x57, 0xA9, 0xB6,
+    0xBB, 0xD8, 0x37, 0xA0, 0x06, 0x24, 0xB5, 0x8B, 0x4B, 0xA3, 0xDB, 0xB6,
+    0x3B, 0xB8, 0x20, 0x0E, 0x7B, 0xC8, 0x88, 0x81, 0xBE, 0xBD, 0xA9, 0x25,
+    0xBC, 0xA0, 0x28, 0xE2, 0x91, 0xAA, 0x1C, 0x22, 0x53, 0x9C, 0xD0, 0x4F,
+    0x90, 0x09, 0x0D, 0x7F, 0x74, 0x10, 0x8C, 0x32, 0xB8, 0x02, 0x2C, 0x15,
+    0x91, 0xC8, 0x81, 0xE7, 0x63, 0x04, 0xE2, 0x40, 0x81, 0x90, 0xE2, 0x0F,
+    0x09, 0xA5, 0x4F, 0xC2, 0x34, 0x20, 0xE2, 0x62, 0x0E, 0x9D, 0x87, 0xA3,
+    0x10, 0x8A, 0x94, 0xFE, 0xEA, 0x72, 0xD5, 0xAB, 0x7F, 0xCF, 0xB9, 0x72,
+    0xE6, 0x56, 0x1B, 0x1A, 0x7B, 0x06, 0x2F, 0x1A, 0x68, 0x2E, 0x02, 0x0A,
+    0xA2, 0x56, 0x28, 0x12, 0xB2, 0x96, 0x54, 0x7B, 0x91, 0x78, 0x24, 0xCD,
+    0xB8, 0x8C, 0x58, 0x2B, 0x5A, 0x68, 0x90, 0x17, 0x7B, 0xC7, 0x0C, 0x91,
+    0xAC, 0xAC, 0x9A, 0xBE, 0x29, 0x0A, 0xEB, 0x2C, 0x34, 0xA7, 0xE2, 0x36,
+    0x89, 0x55, 0xCB, 0x45, 0x6A, 0x34, 0x53, 0x68, 0xAB, 0xE3, 0xB9, 0x1B,
+    0x47, 0xFC, 0x30, 0xB0, 0x23, 0x3A, 0x09, 0xBA, 0x79, 0xFB, 0x11, 0x23,
+    0x8A, 0xC5, 0x08, 0xCC, 0xE6, 0x10, 0x95, 0xF8, 0x54, 0xC2, 0x32, 0x04,
+    0xA8, 0xD3, 0x6B, 0xFC, 0x2C, 0x6E, 0x05, 0xA7, 0x2A, 0xF5, 0x24, 0x4B,
+    0x17, 0xC1, 0x21, 0x01, 0xE0, 0x14, 0x51, 0x57, 0x0E, 0xB1, 0x10, 0x56,
+    0x7E, 0x85, 0x0E, 0x79, 0xC0, 0x00, 0x14, 0x24, 0x41, 0xFE, 0x41, 0x60,
+    0x02, 0x75, 0x45, 0xF6, 0x29, 0x0E, 0x85, 0x45, 0x1B, 0x80, 0x23, 0x4A,
+    0x94, 0x06, 0xC3, 0x90, 0xB0, 0xCE, 0xA3, 0xC8, 0x33, 0x5D, 0x4C, 0x6F,
+    0x85, 0x50, 0xB5, 0x44, 0xC9, 0x34, 0x3E, 0x61, 0xBA, 0x1C, 0x84, 0x89,
+    0xD1, 0xB0, 0x39, 0x97, 0x39, 0x16, 0x8A, 0xF7, 0x40, 0xA4, 0x81, 0xB0,
+    0xF5, 0xC3, 0x37, 0x25, 0x30, 0xCA, 0x06, 0xB5, 0x08, 0xEC, 0xE8, 0x38,
+    0xAB, 0x78, 0xBE, 0xE1, 0xE5, 0x97, 0xA9, 0xB1, 0x4F, 0x6A, 0xEC, 0x7A,
+    0x3B, 0xD1, 0xAA, 0x8D, 0x10, 0xBA, 0xC2, 0x3B, 0x98, 0x02, 0x90, 0x2C,
+    0xD5, 0x29, 0xAB, 0x6E, 0xF5, 0x4D, 0xB3, 0x11, 0x0C, 0xFB, 0x56, 0x1E,
+    0x7E, 0x69, 0x48, 0xE6, 0x52, 0x81, 0x25, 0x04, 0x16, 0xC3, 0x49, 0xC8,
+    0x10, 0x0B, 0x3B, 0x4D, 0x3D, 0x0F, 0x62, 0xAC, 0xAD, 0x8D, 0x16, 0x11,
+    0x75, 0xB1, 0x34, 0xF7, 0x56, 0x49, 0x37, 0xCD,
+  },
+
+  .exp_dk = {
+    0x19, 0xD7, 0x4A, 0xD5, 0x47, 0x2A, 0x8B, 0x2B, 0xAA, 0xD2, 0xA5, 0x67,
+    0x02, 0xC9, 0xB3, 0xB5, 0x51, 0x0E, 0xF3, 0x92, 0x48, 0x58, 0x06, 0x1D,
+    0x57, 0xF9, 0x0D, 0xD9, 0xA1, 0xA0, 0x1F, 0xEC, 0x2F, 0x57, 0xC5, 0x1A,
+    0x88, 0x88, 0x05, 0x34, 0x1B, 0x61, 0x7C, 0x51, 0x55, 0x39, 0x59, 0x77,
+    0x50, 0x83, 0x5C, 0x3E, 0xD7, 0xA0, 0x33, 0xB0, 0x39, 0xD7, 0x24, 0x91,
+    0x33, 0x2C, 0x5D, 0xF4, 0xA6, 0x9B, 0x6D, 0xF2, 0x61, 0x71, 0x87, 0x7A,
+    0xD1, 0xE5, 0x0A, 0xC5, 0x01, 0x00, 0xBE, 0x47, 0x28, 0x78, 0x66, 0x85,
+    0xDA, 0x7A, 0x73, 0x9E, 0x84, 0x3F, 0xF0, 0xD4, 0x59, 0x22, 0xD7, 0x28,
+    0x1E, 0x21, 0x0D, 0x5E, 0x82, 0xB9, 0x44, 0x65, 0x2F, 0x48, 0x62, 0xCF,
+    0xB3, 0xD9, 0x02, 0xDE, 0x60, 0xAF, 0xD0, 0xA1, 0x64, 0x47, 0x1B, 0x26,
+    0x14, 0x4A, 0x1D, 0x7A, 0x38, 0x09, 0x65, 0x03, 0x09, 0x59, 0x11, 0x76,
+    0x2E, 0xBA, 0x79, 0x62, 0xC4, 0x51, 0x1D, 0x05, 0xA1, 0x28, 0xF2, 0x78,
+    0x1E, 0xCB, 0x3D, 0x1F, 0x5B, 0xB1, 0x24, 0x42, 0x37, 0x61, 0x1A, 0xBA,
+    0xB9, 0x24, 0x99, 0x1F, 0x8A, 0x27, 0x32, 0xE2, 0x70, 0x32, 0x35, 0x79,
+    0x20, 0xF1, 0x97, 0xC7, 0x69, 0x2D, 0x60, 0xA9, 0x44, 0x44, 0x72, 0x25,
+    0x8C, 0xB4, 0x57, 0xC1, 0xB7, 0x1B, 0x77, 0x99, 0x54, 0x69, 0xF3, 0xA9,
+    0x62, 0xF3, 0xAB, 0xA6, 0x69, 0x96, 0x14, 0xFC, 0xCC, 0xEA, 0x74, 0x1E,
+    0x21, 0xC6, 0x00, 0xC4, 0x35, 0x7B, 0xBF, 0xAB, 0x45, 0x29, 0x27, 0xC3,
+    0xD4, 0x41, 0xBF, 0x8E, 0xD7, 0x31, 0x52, 0xF7, 0x5C, 0x08, 0xF5, 0x40,
+    0xE1, 0x86, 0xAC, 0xCA, 0x33, 0x26, 0xF4, 0x22, 0xC8, 0x4B, 0x98, 0x8D,
+    0x77, 0xE6, 0x1A, 0xE6, 0x18, 0x59, 0xCF, 0x85, 0x41, 0xF8, 0x92, 0x09,
+    0xE4, 0x98, 0x30, 0x40, 0xC5, 0x61, 0x76, 0x54, 0x80, 0x88, 0x52, 0xB6,
+    0x49, 0xB8, 0x99, 0xA3, 0x99, 0xAE, 0xC2, 0xC8, 0xBB, 0xA8, 0xA5, 0x42,
+    0xF3, 0x45, 0xAB, 0xF2, 0x81, 0x3F, 0x65, 0xE9, 0xA7, 0x91, 0xD3, 0x2C,
+    0xC2, 0xD7, 0x60, 0x26, 0xFB, 0x8D, 0x0C, 0x94, 0xB6, 0x57, 0x48, 0x9A,
+    0xBB, 0x48, 0x7D, 0xA4, 0xA2, 0xC0, 0xE3, 0x86, 0x8D, 0x3C, 0xF4, 0x7F,
+    0x1C, 0xBB, 0x2F, 0xA7, 0x9C, 0x53, 0xCF, 0xF6, 0x26, 0x47, 0x77, 0xC0,
+    0x9B, 0x17, 0x7C, 0x91, 0x31, 0x54, 0x84, 0xD2, 0xB3, 0x0B, 0x0C, 0xA2,
+    0x1F, 0x55, 0xAD, 0xD2, 0x3C, 0x57, 0xE1, 0x91, 0x1C, 0x3F, 0x08, 0x6B,
+    0xCA, 0xD2, 0x17, 0x98, 0x48, 0x6E, 0xB4, 0x7B, 0x7C, 0x58, 0x57, 0x73,
+    0x81, 0xC0, 0x9F, 0x52, 0x52, 0x58, 0x2D, 0x1B, 0x27, 0xA7, 0xD5, 0xB8,
+    0xE0, 0x60, 0xCE, 0x78, 0x20, 0x9C, 0xC8, 0x2B, 0xAE, 0x4D, 0xA6, 0x06,
+    0x80, 0x0C, 0x8D, 0xB1, 0x26, 0x8F, 0x7A, 0xD2, 0xB7, 0x93, 0xA4, 0x4F,
+    0x34, 0x61, 0x2C, 0xCE, 0xA3, 0x1C, 0xE7, 0xD7, 0x96, 0xA6, 0x5A, 0x26,
+    0x91, 0xD6, 0x15, 0x00, 0x62, 0x5F, 0x83, 0xE7, 0xBE, 0x57, 0x07, 0x7E,
+    0xE9, 0xC1, 0xB8, 0xC1, 0xCA, 0xA1, 0x37, 0xCC, 0x4B, 0x65, 0x73, 0x30,
+    0x8C, 0x19, 0x66, 0x8B, 0x24, 0xB0, 0x1E, 0x96, 0x69, 0x03, 0xAB, 0xBC,
+    0xB7, 0x9B, 0x67, 0xBE, 0x0A, 0x3E, 0x3E, 0x05, 0x8A, 0xAD, 0xA1, 0x89,
+    0xB9, 0xEA, 0x80, 0x35, 0x9A, 0xC2, 0x6F, 0x4C, 0x5C, 0x53, 0x73, 0x5F,
+    0xE4, 0xFC, 0x35, 0x24, 0x73, 0x37, 0x76, 0x0C, 0xCA, 0x35, 0x29, 0xB8,
+    0xD2, 0x66, 0xBB, 0x6C, 0x48, 0x01, 0x06, 0x54, 0xCD, 0xBC, 0x5A, 0x3E,
+    0x97, 0x57, 0x52, 0x46, 0x75, 0xAB, 0xC4, 0x13, 0x13, 0x0C, 0xC2, 0x70,
+    0x1F, 0x28, 0x93, 0x3E, 0xAB, 0xB8, 0x39, 0x2B, 0x0D, 0x6D, 0x05, 0x9C,
+    0xFC, 0x3A, 0x30, 0x32, 0x6C, 0x4F, 0xCC, 0x81, 0x0B, 0x37, 0xA4, 0x74,
+    0x8C, 0x1C, 0x53, 0x92, 0x8A, 0x49, 0x13, 0xE4, 0x8B, 0x18, 0x66, 0x97,
+    0x16, 0x2C, 0x33, 0xFF, 0xFB, 0x06, 0xDD, 0x51, 0x61, 0xC8, 0x63, 0x9D,
+    0xB1, 0x95, 0xC6, 0xCA, 0x64, 0x82, 0x9B, 0x2B, 0x3A, 0x2E, 0x4C, 0x96,
+    0x83, 0xB6, 0x6D, 0xF7, 0xFB, 0x19, 0x09, 0x90, 0x4E, 0x00, 0x02, 0x0D,
+    0xBA, 0x13, 0x4E, 0x02, 0xA1, 0x68, 0xD7, 0x6A, 0xC0, 0x76, 0xBB, 0x77,
+    0xD4, 0xDC, 0x84, 0x96, 0xB4, 0xBB, 0xE7, 0xB4, 0x69, 0x0B, 0xA2, 0x9B,
+    0x62, 0xA9, 0x1A, 0xBE, 0x72, 0xBE, 0xF3, 0x23, 0xA4, 0x4C, 0x89, 0x03,
+    0xE4, 0x82, 0xB6, 0x0D, 0x99, 0xBA, 0x61, 0xD1, 0xBB, 0xCF, 0x9C, 0xB9,
+    0x67, 0x35, 0x34, 0xC1, 0xD6, 0x47, 0x66, 0x23, 0x74, 0xEE, 0x2C, 0x7C,
+    0x5F, 0x00, 0x81, 0xBA, 0xD1, 0x49, 0xF4, 0x42, 0x06, 0x71, 0x76, 0x84,
+    0xD9, 0x74, 0x6B, 0x20, 0x48, 0x63, 0x3A, 0xF7, 0xA6, 0x8C, 0x68, 0x65,
+    0xFB, 0x59, 0x03, 0x58, 0xD8, 0xCF, 0x82, 0x14, 0x58, 0x36, 0x9B, 0x0C,
+    0x31, 0xEB, 0x59, 0x7C, 0xF5, 0xBE, 0x78, 0xEB, 0x48, 0x0E, 0xA0, 0x4E,
+    0x35, 0xFA, 0xCC, 0x38, 0x03, 0x72, 0xC8, 0xC0, 0xA0, 0x4D, 0xE2, 0x76,
+    0xB1, 0xA7, 0x21, 0x21, 0xE5, 0x96, 0xCB, 0xB2, 0x5E, 0xF7, 0x53, 0x6A,
+    0xD3, 0x80, 0x41, 0x84, 0xA8, 0x7B, 0xDF, 0xB5, 0xA7, 0x69, 0x16, 0x0B,
+    0xFB, 0xB0, 0xCA, 0x3C, 0x36, 0x07, 0x90, 0xE5, 0x56, 0x2B, 0xB7, 0x8E,
+    0xFE, 0x00, 0x69, 0xC7, 0x74, 0x83, 0xAD, 0x35, 0xCA, 0xC2, 0x37, 0xC6,
+    0x1D, 0xE7, 0x8A, 0x7D, 0xB4, 0x6F, 0xC9, 0x17, 0x12, 0x4C, 0xA1, 0x75,
+    0x10, 0xDB, 0x7D, 0xA2, 0x18, 0x89, 0x0F, 0x44, 0x8E, 0xF6, 0x31, 0x86,
+    0x13, 0xA1, 0xC9, 0x7C, 0x92, 0x8E, 0x2B, 0x7B, 0x6A, 0x54, 0x61, 0x7B,
+    0xCC, 0xB6, 0xCD, 0xF2, 0x78, 0xAE, 0x54, 0x2B, 0x56, 0xAD, 0x7B, 0xB5,
+    0xEC, 0xD8, 0xC4, 0x6A, 0x66, 0xC4, 0xFA, 0x09, 0x50, 0xCE, 0x41, 0x35,
+    0x2C, 0xB8, 0x57, 0x11, 0x89, 0x04, 0x58, 0xF2, 0x99, 0xBF, 0x40, 0xBA,
+    0x6F, 0xF2, 0xC0, 0x71, 0x38, 0x62, 0x26, 0x8B, 0x5F, 0x08, 0xE4, 0x98,
+    0x45, 0xB0, 0x94, 0x43, 0x99, 0x7A, 0xB2, 0x9A, 0x62, 0x07, 0x3C, 0x0D,
+    0x98, 0x18, 0xC0, 0x20, 0x16, 0x7D, 0x47, 0x49, 0x23, 0x1C, 0x05, 0x9E,
+    0x6F, 0x48, 0x3F, 0x97, 0x68, 0x17, 0xC9, 0x0C, 0x20, 0xA9, 0xC9, 0x37,
+    0x07, 0x9C, 0x2D, 0x4B, 0xE3, 0x0D, 0xA9, 0x74, 0xA9, 0x7E, 0x4B, 0xC5,
+    0x3E, 0xD9, 0x6A, 0x55, 0x16, 0x9F, 0x4A, 0x23, 0xA3, 0xEA, 0x24, 0xBD,
+    0x8E, 0x01, 0xB8, 0xFA, 0xEB, 0x95, 0xD4, 0xE5, 0x3F, 0xFF, 0xEC, 0xB6,
+    0x08, 0x02, 0xC3, 0x88, 0xA4, 0x0F, 0x46, 0x60, 0x54, 0x0B, 0x1B, 0x1F,
+    0x81, 0x76, 0xC9, 0x81, 0x1B, 0xB2, 0x6A, 0x68, 0x3C, 0xA7, 0x89, 0x56,
+    0x4A, 0x29, 0x40, 0xFC, 0xEB, 0x2C, 0xE6, 0xA9, 0x2A, 0x1E, 0xE4, 0x5E,
+    0xE4, 0xC3, 0x18, 0x57, 0xC9, 0xB9, 0xB8, 0xB5, 0x6A, 0x79, 0xD9, 0x5A,
+    0x46, 0xCB, 0x39, 0x3A, 0x31, 0xA2, 0x73, 0x7B, 0xAF, 0xEA, 0x6C, 0x81,
+    0x06, 0x6A, 0x67, 0x2B, 0x34, 0xC1, 0x0A, 0xA9, 0x89, 0x57, 0xC9, 0x17,
+    0x66, 0xB7, 0x30, 0x03, 0x6A, 0x56, 0xD9, 0x40, 0xAA, 0x4E, 0xBC, 0xB7,
+    0x58, 0xB0, 0x83, 0x51, 0xE2, 0xC4, 0xFD, 0x19, 0x45, 0x3B, 0xF3, 0xA6,
+    0x29, 0x2A, 0x99, 0x3D, 0x67, 0xC7, 0xEC, 0xC7, 0x2F, 0x42, 0xF7, 0x82,
+    0xE9, 0xEB, 0xAA, 0x1A, 0x8B, 0x3B, 0x0F, 0x56, 0x7A, 0xB3, 0x94, 0x21,
+    0xF6, 0xA6, 0x7A, 0x6B, 0x84, 0x10, 0xFD, 0x94, 0xA7, 0x21, 0xD3, 0x65,
+    0xF1, 0x63, 0x9E, 0x9D, 0xDA, 0xBF, 0xD0, 0xA6, 0xCE, 0x1A, 0x46, 0x05,
+    0xBD, 0x2B, 0x1C, 0x9B, 0x97, 0x7B, 0xD1, 0xEA, 0x32, 0x86, 0x73, 0x68,
+    0xD6, 0xE6, 0x39, 0xD0, 0x19, 0xAC, 0x10, 0x18, 0x53, 0xBC, 0x15, 0x3C,
+    0x86, 0xF8, 0x52, 0x80, 0xFC, 0x76, 0x3B, 0xA2, 0x4F, 0xB5, 0x7A, 0x29,
+    0x6C, 0xB1, 0x2D, 0x32, 0xE0, 0x8A, 0xB3, 0x2C, 0x55, 0x1D, 0x5A, 0x45,
+    0xA4, 0xA2, 0x8F, 0x9A, 0xDC, 0x28, 0xF7, 0xA2, 0x90, 0x0E, 0x25, 0xA4,
+    0x0B, 0x51, 0x90, 0xB2, 0x2A, 0xB1, 0x9D, 0xFB, 0x24, 0x6F, 0x42, 0xB2,
+    0x4F, 0x97, 0xCC, 0xA9, 0xB0, 0x9B, 0xEA, 0xD2, 0x46, 0xE1, 0x73, 0x4F,
+    0x44, 0x66, 0x77, 0xB3, 0x8B, 0x75, 0x22, 0xB7, 0x80, 0x72, 0x7C, 0x11,
+    0x74, 0x40, 0xC9, 0xF1, 0xA0, 0x24, 0x52, 0x0C, 0x14, 0x1A, 0x69, 0xCD,
+  },
+}};
+
+static void test_pke768_keygen(void) {
+  for (size_t i = 0; i < sizeof(PKE768_KEYGEN_TESTS)/sizeof(PKE768_KEYGEN_TESTS[0]); i++) {
+    // generate pke768 ek and dk from seed
+    uint8_t got_ek[PKE768_EK_SIZE] = { 0 }, got_dk[PKE768_DK_SIZE] = { 0 };
+    pke768_keygen(got_ek, got_dk, PKE768_KEYGEN_TESTS[i].seed);
+
+    // check for expected ek
+    if (memcmp(&got_ek, &(PKE768_KEYGEN_TESTS[i].exp_ek), sizeof(got_ek))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ek", PKE768_KEYGEN_TESTS[i].name);
+      fail_test(__func__, name, got_ek, sizeof(got_ek), PKE768_KEYGEN_TESTS[i].exp_ek, sizeof(got_ek));
+    }
+
+    // check for expected dk
+    if (memcmp(&got_dk, &(PKE768_KEYGEN_TESTS[i].exp_dk), sizeof(got_dk))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - dk", PKE768_KEYGEN_TESTS[i].name);
+      fail_test(__func__, name, got_dk, sizeof(got_dk), PKE768_KEYGEN_TESTS[i].exp_dk, sizeof(got_dk));
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t ek[PKE768_EK_SIZE]; // test ek (1184 bytes)
+  const uint8_t m[32]; // test message (32 bytes)
+  const uint8_t enc_rand[32]; // test randomness (32 bytes)
+  const uint8_t exp[PKE768_CT_SIZE]; // expected ciphertext (1088 bytes)
+} PKE768_ENCRYPT_TESTS[] = {{
+  .name = "rand = 0, message = 1",
+  .ek = {
+    0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
+    0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
+    0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
+    0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
+    0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
+    0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
+    0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
+    0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
+    0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
+    0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
+    0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
+    0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
+    0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
+    0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
+    0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
+    0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
+    0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
+    0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
+    0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
+    0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
+    0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
+    0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
+    0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
+    0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
+    0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
+    0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
+    0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
+    0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
+    0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
+    0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
+    0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
+    0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
+    0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
+    0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
+    0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
+    0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
+    0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
+    0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
+    0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
+    0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
+    0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
+    0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
+    0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
+    0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
+    0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
+    0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
+    0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
+    0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
+    0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
+    0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
+    0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
+    0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
+    0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
+    0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
+    0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
+    0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
+    0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
+    0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
+    0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
+    0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
+    0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
+    0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
+    0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
+    0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
+    0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
+    0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
+    0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
+    0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
+    0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
+    0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
+    0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
+    0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
+    0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
+    0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
+    0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
+    0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
+    0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
+    0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
+    0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
+    0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
+    0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
+    0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
+    0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
+    0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
+    0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
+    0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
+    0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
+    0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
+    0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
+    0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
+    0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
+    0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
+    0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
+    0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
+    0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
+    0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
+    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+  },
+
+  .m = { 1, 0 },
+  .enc_rand = { 0 },
+
+  .exp = {
+    0x04, 0x9d, 0x1d, 0x88, 0x6d, 0xa9, 0xfd, 0xf5, 0xee, 0xa3, 0x5c, 0xbb,
+    0x91, 0x7a, 0x8c, 0xf6, 0x8e, 0x0a, 0xf5, 0x16, 0xc3, 0x7a, 0xd5, 0x98,
+    0xe6, 0x59, 0x2a, 0xb2, 0x6a, 0x2e, 0x06, 0xc7, 0xfb, 0x72, 0x57, 0x15,
+    0x23, 0x86, 0x02, 0x3b, 0x43, 0xf2, 0x80, 0x3c, 0x00, 0x31, 0x2a, 0x6e,
+    0x4d, 0x93, 0x7b, 0xbb, 0xa0, 0x5e, 0x52, 0x87, 0xbc, 0x2f, 0x1c, 0x1a,
+    0xba, 0x64, 0xb4, 0x09, 0x62, 0x90, 0x11, 0x19, 0x1f, 0x20, 0x64, 0xbd,
+    0x20, 0xe8, 0xd8, 0xa5, 0x19, 0x55, 0xde, 0x96, 0x87, 0x74, 0x2a, 0xc6,
+    0xae, 0xb9, 0xf9, 0xeb, 0x43, 0x56, 0x2a, 0x9c, 0xd5, 0x81, 0xb9, 0xcf,
+    0xc0, 0x9e, 0x21, 0x6b, 0x4b, 0xf0, 0xa0, 0x43, 0x2a, 0xc3, 0xf4, 0x53,
+    0xe8, 0x55, 0xa3, 0xd2, 0x5e, 0xd4, 0x7e, 0x01, 0xe5, 0x5b, 0x92, 0xd6,
+    0x96, 0x13, 0x7a, 0x97, 0x15, 0xbf, 0x30, 0x7b, 0xfb, 0x42, 0xdc, 0x21,
+    0xb5, 0x1a, 0x09, 0xaa, 0xc5, 0xb8, 0x4a, 0x94, 0x2f, 0xbc, 0x33, 0x88,
+    0xe2, 0x8f, 0xea, 0x98, 0x3c, 0xd5, 0x96, 0xf4, 0x70, 0x11, 0x68, 0x21,
+    0x8d, 0xcb, 0x70, 0x93, 0x86, 0x09, 0x5a, 0x74, 0x12, 0xf0, 0x29, 0x4d,
+    0x84, 0xbb, 0xf7, 0x4f, 0x20, 0xcd, 0xe6, 0x29, 0x0c, 0x73, 0x1a, 0x96,
+    0x05, 0x55, 0xf7, 0x39, 0x1c, 0xc7, 0xaa, 0xd9, 0xd4, 0xe6, 0xcb, 0xb0,
+    0xc7, 0x52, 0x69, 0xe8, 0x22, 0x48, 0xfd, 0x3a, 0x77, 0x15, 0xe8, 0x51,
+    0x02, 0xea, 0xfe, 0x4a, 0xe3, 0x01, 0x14, 0x49, 0x21, 0x47, 0xfc, 0x52,
+    0x43, 0x21, 0xec, 0x99, 0xee, 0x28, 0xeb, 0xfb, 0xb7, 0x40, 0xba, 0x4b,
+    0x4d, 0x4b, 0x35, 0x6b, 0x44, 0x13, 0x7c, 0xca, 0x43, 0x5a, 0x27, 0xc5,
+    0x6b, 0xb7, 0x4a, 0xb4, 0xc3, 0xe0, 0x34, 0x5e, 0xb8, 0x9b, 0xac, 0x6e,
+    0x53, 0xbd, 0xd6, 0xff, 0x46, 0x51, 0x0f, 0xfa, 0x58, 0x56, 0xac, 0x04,
+    0xd6, 0x30, 0xe8, 0x61, 0xd9, 0xb0, 0x07, 0x6b, 0x64, 0xe4, 0x78, 0xa3,
+    0x27, 0x37, 0xda, 0x78, 0x0d, 0xe4, 0x89, 0x38, 0xc7, 0xd0, 0x2b, 0x67,
+    0x60, 0xc1, 0x1f, 0x00, 0x1f, 0x1a, 0xac, 0xd3, 0xf1, 0x65, 0x20, 0x3f,
+    0xec, 0xf4, 0xdd, 0xe4, 0x2d, 0xb2, 0x9e, 0x13, 0x5c, 0x5d, 0xdb, 0x7c,
+    0x61, 0x51, 0x18, 0xb1, 0x6c, 0xc9, 0xa6, 0xc4, 0xd9, 0x0d, 0xad, 0xec,
+    0x5b, 0x03, 0xa7, 0x87, 0x8d, 0xaf, 0x9c, 0x53, 0x44, 0x57, 0x11, 0xf6,
+    0xec, 0xdf, 0x55, 0x67, 0xae, 0x4f, 0xfd, 0x29, 0xde, 0x64, 0x78, 0x19,
+    0x72, 0xc7, 0x1a, 0x3a, 0x4a, 0xff, 0x83, 0x46, 0x01, 0xce, 0x17, 0x80,
+    0x22, 0xc5, 0xac, 0x06, 0x85, 0xcd, 0x72, 0xe7, 0xc0, 0xf5, 0x48, 0x3b,
+    0x4f, 0x26, 0x0a, 0x39, 0x7e, 0xc1, 0x53, 0x42, 0x73, 0x10, 0x38, 0x2b,
+    0xf1, 0xdc, 0xc0, 0x96, 0x91, 0x61, 0x69, 0xa4, 0x79, 0x2d, 0xfb, 0x98,
+    0x5d, 0x1c, 0x5b, 0xb6, 0x87, 0xe0, 0x77, 0x11, 0x65, 0xdd, 0x57, 0xfc,
+    0xd3, 0x52, 0x75, 0x8e, 0xab, 0xc0, 0xbc, 0xd3, 0x89, 0x92, 0x44, 0xa7,
+    0x74, 0x5f, 0x0e, 0xd6, 0x11, 0xa7, 0xd6, 0x4d, 0x82, 0x49, 0xcb, 0x96,
+    0x6a, 0x52, 0x7c, 0xb7, 0xb6, 0xcc, 0x86, 0x0d, 0x45, 0xf8, 0x55, 0x21,
+    0xec, 0x4c, 0x09, 0x5f, 0x24, 0xb2, 0x02, 0x6e, 0x95, 0xfe, 0x32, 0xb4,
+    0x54, 0x52, 0xf5, 0x62, 0x0e, 0x8d, 0xb0, 0x3d, 0x72, 0xaa, 0x79, 0xf9,
+    0xd5, 0x0b, 0xb0, 0xb4, 0x74, 0x51, 0xb8, 0xf5, 0xc3, 0x5d, 0x13, 0x6e,
+    0x07, 0xe7, 0x38, 0x75, 0x7e, 0x50, 0x52, 0xb0, 0x8d, 0xa3, 0xdb, 0x9f,
+    0x65, 0x07, 0xf5, 0x87, 0x6d, 0xae, 0x9c, 0x25, 0xd3, 0xa6, 0xfe, 0x37,
+    0x88, 0x32, 0xad, 0xa9, 0x08, 0xe4, 0x99, 0x05, 0xe3, 0x1f, 0x5a, 0x7f,
+    0xa3, 0xfd, 0x29, 0x6b, 0xd8, 0xf4, 0xb5, 0x1f, 0xd5, 0x67, 0xe2, 0x70,
+    0x72, 0xdc, 0xbe, 0xc3, 0xf5, 0x46, 0x40, 0x5e, 0x31, 0xc9, 0x8e, 0x35,
+    0x09, 0xa2, 0xe8, 0x09, 0x6e, 0x96, 0x07, 0xa3, 0x51, 0x7d, 0x31, 0xd1,
+    0x12, 0x4f, 0x47, 0xc0, 0x27, 0xcb, 0xac, 0xc3, 0x27, 0x3c, 0x0b, 0x62,
+    0x62, 0x9b, 0xc7, 0x36, 0xe4, 0x74, 0x51, 0x86, 0x93, 0x52, 0x95, 0x8c,
+    0x61, 0xbb, 0xe0, 0xab, 0xc4, 0x9d, 0xe0, 0x38, 0x61, 0xc1, 0x12, 0x7c,
+    0xf1, 0x29, 0x7f, 0x27, 0x14, 0x27, 0xab, 0xca, 0x76, 0xf5, 0x31, 0x64,
+    0x44, 0xd3, 0x95, 0x27, 0x5b, 0x09, 0xbb, 0xee, 0x39, 0x14, 0x88, 0x2c,
+    0x3d, 0xe5, 0x21, 0x00, 0xb6, 0x23, 0xb3, 0xe6, 0x96, 0xbb, 0xf0, 0x73,
+    0xb9, 0x74, 0x08, 0x27, 0xfe, 0x26, 0x11, 0x4a, 0xbe, 0xcf, 0x1d, 0x37,
+    0x39, 0xf6, 0x2f, 0x45, 0xb0, 0xb5, 0xc0, 0xb2, 0xd5, 0x10, 0xa6, 0x5e,
+    0x67, 0x22, 0xb7, 0x0c, 0x09, 0x3c, 0xd2, 0xc0, 0x9b, 0x4d, 0x24, 0x8c,
+    0xb4, 0x08, 0xb0, 0x84, 0xa5, 0xff, 0x5b, 0x66, 0x06, 0x81, 0x80, 0x80,
+    0xdc, 0xfa, 0xd1, 0xb7, 0x23, 0x1b, 0x71, 0xa5, 0xd0, 0x96, 0x28, 0x5b,
+    0xb3, 0x1d, 0xd2, 0xdc, 0x68, 0x1a, 0x5a, 0xf1, 0xa3, 0xc8, 0xeb, 0x50,
+    0x4e, 0x7a, 0xc5, 0x3a, 0xfd, 0xeb, 0x25, 0x73, 0x18, 0xd3, 0xb6, 0x80,
+    0xed, 0x0f, 0x62, 0x7f, 0x9d, 0xa5, 0x1a, 0x61, 0x06, 0x47, 0xff, 0xde,
+    0xe3, 0x26, 0xc1, 0x53, 0x2a, 0x65, 0xcf, 0xb8, 0x4e, 0x6f, 0x35, 0x31,
+    0xc9, 0x0c, 0x62, 0x3f, 0xa5, 0xbb, 0xa6, 0x2e, 0x83, 0xce, 0xfe, 0x87,
+    0x5f, 0x91, 0x5d, 0x42, 0x79, 0x11, 0x18, 0xd2, 0xf2, 0x0b, 0x19, 0x67,
+    0xec, 0xaf, 0x02, 0xec, 0x64, 0xbe, 0xd5, 0xae, 0xfe, 0x8b, 0x6b, 0x6d,
+    0x3c, 0x19, 0xeb, 0x6c, 0xdb, 0x53, 0x32, 0xc6, 0x79, 0x35, 0x97, 0x76,
+    0x24, 0x53, 0x49, 0x4e, 0xe7, 0x64, 0x4d, 0x8e, 0x90, 0x38, 0xec, 0xd8,
+    0xf6, 0x90, 0xc6, 0xe6, 0xdf, 0x9e, 0x63, 0x59, 0x3a, 0xba, 0x92, 0xc3,
+    0x51, 0x5b, 0xb1, 0x44, 0xc6, 0x73, 0x32, 0x5c, 0x2e, 0x52, 0xdc, 0xce,
+    0xce, 0x0a, 0x4b, 0xaa, 0xc6, 0x57, 0x20, 0xda, 0xe0, 0xa6, 0x74, 0x89,
+    0x32, 0xe9, 0xa8, 0x90, 0x47, 0xef, 0x71, 0x4b, 0xd4, 0x45, 0x0f, 0xd6,
+    0x98, 0xfe, 0x1e, 0x20, 0xc4, 0x05, 0x5f, 0xf7, 0x5f, 0x14, 0x8a, 0xe4,
+    0xe5, 0x90, 0x7d, 0xde, 0x94, 0x3b, 0x6b, 0x27, 0xf7, 0xbb, 0xc7, 0x5d,
+    0x87, 0xa2, 0xc7, 0x52, 0x9b, 0xb5, 0x03, 0xe9, 0x41, 0xf3, 0x9b, 0x58,
+    0x1e, 0x32, 0x04, 0x1a, 0xa4, 0x14, 0x56, 0xd6, 0xec, 0x90, 0x2a, 0x9d,
+    0x72, 0xb8, 0x89, 0xa5, 0x07, 0x5d, 0xce, 0x5e, 0x97, 0x77, 0xa9, 0x9c,
+    0xce, 0x39, 0x74, 0xf2, 0x74, 0xb1, 0x1b, 0x03, 0x7e, 0x0e, 0x86, 0xc8,
+    0x09, 0x4c, 0x3a, 0x88, 0xcc, 0x09, 0x97, 0xe6, 0x3f, 0x9c, 0x48, 0xe1,
+    0xe5, 0x14, 0xf5, 0x0c, 0x2d, 0x0f, 0x25, 0xfc, 0x85, 0x5e, 0x4d, 0xe6,
+    0x5c, 0xa3, 0x0a, 0x83, 0x5c, 0xd6, 0xe5, 0xa0, 0x35, 0x41, 0xde, 0xd9,
+    0xed, 0x83, 0xc1, 0xf6, 0x57, 0xda, 0x34, 0xcc, 0x94, 0x2f, 0x22, 0x61,
+    0xb5, 0x1c, 0x44, 0x36, 0x35, 0x5d, 0xd4, 0x87, 0xea, 0x0b, 0x42, 0xb0,
+    0xe3, 0x7e, 0xe5, 0xb1, 0x50, 0x75, 0x6b, 0x2d, 0x22, 0x0f, 0x28, 0x3f,
+    0x14, 0x46, 0x76, 0xc1, 0x23, 0x94, 0xb3, 0xbc, 0x51, 0x71, 0xc9, 0xca,
+    0xb9, 0xa0, 0xa4, 0x87, 0x39, 0x60, 0x51, 0xfe, 0x22, 0x9b, 0x19, 0x52,
+    0xd9, 0xa8, 0x85, 0x47, 0xa2, 0x2a, 0x3c, 0x79, 0xfb, 0xb0, 0x06, 0x2f,
+    0x0b, 0xf2, 0xa0, 0x2f, 0x1e, 0xae, 0xf7, 0xc5, 0x8c, 0x35, 0x71, 0x57,
+    0xb0, 0x43, 0x1d, 0x0c, 0x6f, 0x99, 0xa6, 0xf5, 0x87, 0xf2, 0x5e, 0x27,
+    0x29, 0xb1, 0xba, 0x97, 0x86, 0x37, 0x95, 0x39, 0xa8, 0x30, 0xab, 0x87,
+    0x44, 0x92, 0x27, 0x45, 0x8c, 0x07, 0xd0, 0xd7, 0xae, 0x89, 0x49, 0xd2,
+    0x50, 0x04, 0xb1, 0xda, 0x08, 0x54, 0x8f, 0x83, 0x3e, 0xde, 0x4f, 0x23,
+    0x00, 0x8f, 0x63, 0x3f, 0x3e, 0xb0, 0xa8, 0xf1,
+  },
+}};
+
+static void test_pke768_encrypt(void) {
+  for (size_t i = 0; i < sizeof(PKE768_ENCRYPT_TESTS)/sizeof(PKE768_ENCRYPT_TESTS[0]); i++) {
+    // encrypt test message `m` with encryption key `ek` and randomness
+    // `enc_rand`, then store ciphertext to buffer `got`.
+    uint8_t got[PKE768_CT_SIZE] = { 0 };
+    pke768_encrypt(got, PKE768_ENCRYPT_TESTS[i].ek, PKE768_ENCRYPT_TESTS[i].m, PKE768_ENCRYPT_TESTS[i].enc_rand);
+
+    // check for expected ciphertext
+    if (memcmp(got, PKE768_ENCRYPT_TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, PKE768_ENCRYPT_TESTS[i].name, got, sizeof(got), PKE768_ENCRYPT_TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_pke768_decrypt(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t dk[PKE768_EK_SIZE]; // test decryption key (1152 bytes)
+    const uint8_t ct[PKE768_CT_SIZE]; // test ciphertext (1108 bytes)
+    const uint8_t exp[32]; // expected message (32 bytes)
+  } TESTS[] = {{
+    .name = "rand = 0, message = 1",
+
+    .dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+    },
+
+    .ct = {
+      0xd6, 0xb6, 0xdd, 0xa2, 0x19, 0x52, 0xa3, 0x00, 0xb5, 0x74, 0x6e, 0x80,
+      0x72, 0x8a, 0x85, 0x7b, 0x81, 0x33, 0xbb, 0x8a, 0x1c, 0x24, 0xf5, 0xd7,
+      0xcd, 0xa7, 0xb4, 0x78, 0x3b, 0xfc, 0x4b, 0x9b, 0x50, 0xd0, 0xb0, 0x91,
+      0x99, 0x81, 0x93, 0x1c, 0x43, 0x21, 0x64, 0xa9, 0xf1, 0x8f, 0x48, 0xda,
+      0x75, 0x41, 0xca, 0x84, 0x7f, 0xf2, 0x30, 0x45, 0xca, 0x8f, 0x3e, 0x7a,
+      0x39, 0x8d, 0x65, 0x94, 0x40, 0x6f, 0x4c, 0xcb, 0xa5, 0x6f, 0xde, 0xeb,
+      0x42, 0xaa, 0x75, 0xf1, 0xf4, 0x60, 0x8d, 0x65, 0x3c, 0x0a, 0xad, 0x86,
+      0xee, 0x2b, 0x3d, 0xc0, 0x59, 0x74, 0x0f, 0x5f, 0x6e, 0x34, 0x2b, 0x52,
+      0x8c, 0x8a, 0x8a, 0x9b, 0x81, 0x32, 0xc4, 0x98, 0xf4, 0x07, 0x31, 0xe3,
+      0x1c, 0x61, 0xe3, 0x42, 0xa1, 0x02, 0xef, 0x98, 0x88, 0xcb, 0xa3, 0x66,
+      0x6e, 0x4b, 0xb4, 0x3b, 0xb4, 0xd4, 0x2b, 0xae, 0x10, 0x61, 0x17, 0xe1,
+      0x7a, 0x63, 0x58, 0x88, 0xfe, 0xb3, 0xf6, 0x1c, 0xba, 0x7f, 0xf4, 0x67,
+      0x44, 0x49, 0xcc, 0x1d, 0x1d, 0x5f, 0x96, 0xcf, 0x80, 0x02, 0xc5, 0xbf,
+      0xce, 0x16, 0xef, 0xbb, 0x63, 0xb7, 0xe5, 0x4e, 0xb5, 0x89, 0x64, 0x12,
+      0x72, 0xf4, 0x60, 0x5f, 0xa7, 0xad, 0xc8, 0x05, 0x25, 0x89, 0xd0, 0xc4,
+      0x59, 0xcb, 0x6f, 0x81, 0xff, 0x7e, 0xf3, 0x69, 0xe5, 0x73, 0x2c, 0x14,
+      0x61, 0xde, 0x29, 0xe5, 0x8c, 0x9d, 0xce, 0xb4, 0xa8, 0xf7, 0xc0, 0x51,
+      0x7d, 0x05, 0x59, 0xcc, 0x09, 0x24, 0xc8, 0xe1, 0xa0, 0x8c, 0xe0, 0xe8,
+      0x4d, 0x63, 0x65, 0x6b, 0xba, 0x37, 0xf4, 0x00, 0x64, 0x41, 0xba, 0x86,
+      0x5f, 0x2b, 0xa2, 0xcf, 0x24, 0x75, 0xa5, 0x7c, 0x6d, 0x05, 0xbc, 0x8e,
+      0x9b, 0x66, 0xb4, 0xa8, 0xb2, 0xe5, 0xd1, 0xd6, 0x6f, 0x50, 0xd1, 0xc8,
+      0x0f, 0x2d, 0xd5, 0x85, 0x44, 0xcb, 0x7d, 0x36, 0xad, 0x54, 0xb1, 0x74,
+      0x10, 0x05, 0xc9, 0xfa, 0x0d, 0x9b, 0x2f, 0x2f, 0xa2, 0x96, 0xaf, 0xc0,
+      0x59, 0x85, 0x3c, 0xe8, 0x62, 0x63, 0x95, 0x73, 0x16, 0x66, 0x14, 0x13,
+      0xbe, 0x00, 0x25, 0x79, 0x00, 0x78, 0x4d, 0xa7, 0x94, 0xf6, 0x97, 0x97,
+      0x09, 0x31, 0xc4, 0xdd, 0x75, 0x67, 0xa9, 0xe3, 0x15, 0xf8, 0x8a, 0x73,
+      0xed, 0x9d, 0x6d, 0x4c, 0x94, 0x23, 0xcc, 0xac, 0x9f, 0x99, 0x23, 0x46,
+      0xf2, 0xb6, 0x33, 0xfb, 0x4e, 0xaf, 0x7a, 0x1c, 0xa7, 0xa6, 0xda, 0xa1,
+      0x10, 0x57, 0x46, 0x2b, 0xc6, 0xa7, 0xa7, 0x43, 0x02, 0x7c, 0xe0, 0x13,
+      0x60, 0x4d, 0xda, 0x01, 0xbe, 0xde, 0xcb, 0x21, 0x4b, 0x50, 0x2a, 0x45,
+      0x24, 0x19, 0x11, 0x98, 0x6c, 0x6d, 0x27, 0xba, 0xf0, 0xad, 0xe6, 0xf9,
+      0x0b, 0xa2, 0xe7, 0x5c, 0x5c, 0xa1, 0x40, 0xac, 0x86, 0x52, 0xcc, 0xe0,
+      0x37, 0xef, 0x67, 0xfb, 0xd5, 0x77, 0x3b, 0x03, 0x21, 0xfc, 0xb8, 0xdb,
+      0x58, 0x60, 0xb2, 0xbd, 0xea, 0x6c, 0x9f, 0x97, 0xa7, 0x98, 0x30, 0x19,
+      0xd2, 0x1f, 0xa0, 0x41, 0xa2, 0xe9, 0xe2, 0xa0, 0x53, 0x9e, 0x11, 0xde,
+      0xab, 0x68, 0xf0, 0xc8, 0x79, 0x49, 0x43, 0x75, 0x9e, 0xe9, 0xbe, 0x8d,
+      0x67, 0x20, 0x5a, 0x53, 0xe7, 0x49, 0x39, 0x40, 0x17, 0x44, 0x3b, 0x7e,
+      0x95, 0x45, 0x8c, 0x51, 0xf8, 0xd9, 0x22, 0x8b, 0x96, 0x51, 0x90, 0x2f,
+      0x8d, 0x26, 0xb7, 0x47, 0x04, 0x71, 0xac, 0x78, 0x45, 0x05, 0x1b, 0xcd,
+      0x3c, 0x04, 0x58, 0xfa, 0x50, 0x83, 0x61, 0x30, 0xe5, 0xa0, 0xfe, 0xa3,
+      0xcb, 0xc6, 0x9c, 0xf5, 0x4a, 0x98, 0x09, 0x57, 0x30, 0x2e, 0x23, 0x4f,
+      0xf6, 0xe2, 0x26, 0xf1, 0x7d, 0xac, 0x99, 0xd6, 0x10, 0x1e, 0x26, 0xbb,
+      0x40, 0xaa, 0x9e, 0x97, 0x0d, 0xa5, 0xda, 0x30, 0x1d, 0x1b, 0xb7, 0x2a,
+      0xb3, 0x37, 0x13, 0xf8, 0x2f, 0xa6, 0x16, 0xa5, 0xde, 0x86, 0x05, 0x18,
+      0x3f, 0x7f, 0x86, 0x5e, 0xa3, 0x26, 0x0d, 0x1c, 0x66, 0xa2, 0x89, 0x30,
+      0x7c, 0xbd, 0x02, 0x44, 0xbc, 0x83, 0x41, 0x5f, 0x79, 0xa5, 0x72, 0x85,
+      0x2e, 0x94, 0xcc, 0x7a, 0x28, 0x4d, 0x4c, 0xa5, 0x37, 0x67, 0x04, 0x40,
+      0x49, 0xa5, 0xc6, 0x5c, 0x82, 0xea, 0x42, 0x3f, 0x0c, 0xd6, 0xbf, 0x18,
+      0x76, 0xd5, 0x95, 0x2c, 0xb9, 0x52, 0x28, 0x4e, 0x16, 0x84, 0x30, 0x15,
+      0xa7, 0x30, 0x8a, 0x71, 0x56, 0xd9, 0x03, 0x75, 0xde, 0xab, 0x5d, 0xe6,
+      0x34, 0x08, 0x52, 0xc9, 0xa3, 0x66, 0x5a, 0xc7, 0xd4, 0x55, 0xc2, 0x2f,
+      0x7d, 0x70, 0xdf, 0xae, 0x2f, 0x86, 0xfc, 0x03, 0xa0, 0x28, 0xce, 0x27,
+      0x67, 0x30, 0x33, 0x66, 0x76, 0x90, 0x41, 0x98, 0xc5, 0xa5, 0x5c, 0x3c,
+      0xbe, 0x08, 0xb8, 0xad, 0xd2, 0x24, 0x7a, 0xfd, 0x44, 0x73, 0x67, 0x70,
+      0x68, 0xbf, 0x6f, 0xb2, 0x51, 0x49, 0x87, 0xac, 0x05, 0xd2, 0x4d, 0x78,
+      0x7d, 0x4b, 0x72, 0x72, 0x19, 0x9d, 0xf7, 0x84, 0xc4, 0x3c, 0x33, 0x46,
+      0x94, 0x0a, 0x7b, 0xcc, 0x99, 0x27, 0xc0, 0xb0, 0x47, 0x71, 0x6f, 0x43,
+      0x47, 0x1d, 0xef, 0x60, 0x56, 0x21, 0x0a, 0x1e, 0xe5, 0xb0, 0x99, 0xa2,
+      0xf3, 0x17, 0xbb, 0xcf, 0x63, 0x20, 0x0a, 0x7f, 0xfe, 0x53, 0x4c, 0x34,
+      0x70, 0xef, 0xf5, 0xc4, 0xc3, 0x99, 0x14, 0x11, 0x31, 0x79, 0x64, 0x38,
+      0xc8, 0x04, 0x6e, 0x3f, 0x33, 0x71, 0x97, 0x75, 0xe7, 0xca, 0xdf, 0xe1,
+      0x5d, 0x48, 0xd6, 0x7e, 0x3f, 0x29, 0xe6, 0xac, 0x00, 0x55, 0xa5, 0xfc,
+      0x53, 0x07, 0x23, 0xb8, 0x53, 0x58, 0xff, 0xce, 0xa5, 0x18, 0x5d, 0x09,
+      0xb9, 0xf0, 0xb6, 0x16, 0x49, 0x1d, 0x7e, 0x16, 0x8e, 0x4b, 0x1f, 0xa2,
+      0xbb, 0x0f, 0x29, 0xb1, 0x0f, 0x72, 0x8e, 0x57, 0x3f, 0x9e, 0x4c, 0xdb,
+      0x02, 0xcc, 0xd9, 0x8c, 0x1d, 0xbf, 0xc6, 0x7d, 0x67, 0xc0, 0xc4, 0x29,
+      0x35, 0x62, 0xc8, 0x38, 0x8d, 0xe6, 0x88, 0x41, 0x89, 0xbe, 0xc0, 0xf0,
+      0x63, 0xf1, 0x03, 0xe1, 0xdb, 0xfd, 0x3a, 0x1e, 0x7e, 0xef, 0xc6, 0x43,
+      0x03, 0x70, 0x4e, 0xee, 0x71, 0x1b, 0x37, 0x33, 0x6b, 0x33, 0xcb, 0x63,
+      0xe2, 0x76, 0x86, 0xef, 0xf8, 0xfc, 0x70, 0x1b, 0xa5, 0xc9, 0xef, 0x3a,
+      0x18, 0x1e, 0x67, 0x18, 0x72, 0x6e, 0xba, 0x10, 0xd5, 0xec, 0xe7, 0xfd,
+      0x32, 0x9b, 0x9e, 0x45, 0xc1, 0xa6, 0xb0, 0xb1, 0xd7, 0x22, 0xbd, 0x74,
+      0xf7, 0x95, 0x9e, 0xde, 0xef, 0x15, 0x6a, 0x47, 0x64, 0xf4, 0x9b, 0x54,
+      0xce, 0xde, 0xd3, 0x45, 0xee, 0x6b, 0xb5, 0xae, 0xe8, 0x0e, 0xf4, 0x59,
+      0x17, 0x2e, 0x91, 0x81, 0x43, 0x0d, 0xca, 0xec, 0xd2, 0xc0, 0x28, 0xbc,
+      0x80, 0x04, 0xc1, 0x42, 0x24, 0x99, 0xd0, 0x68, 0x49, 0x9e, 0x16, 0x5a,
+      0x77, 0xbd, 0x65, 0x11, 0x6d, 0x2f, 0xbb, 0xba, 0x1e, 0xcb, 0x68, 0xbc,
+      0xa2, 0x93, 0x15, 0x57, 0xf6, 0x4c, 0x2a, 0xed, 0xff, 0x2d, 0xae, 0xf6,
+      0xe8, 0x2f, 0x71, 0x36, 0xe7, 0xda, 0x18, 0x95, 0x6a, 0x82, 0xf3, 0x6a,
+      0xfb, 0x61, 0x2f, 0x56, 0x9c, 0x8e, 0x1d, 0x4f, 0xc2, 0x70, 0x63, 0xc6,
+      0xb5, 0x1c, 0x44, 0x36, 0x35, 0x5d, 0xd4, 0x87, 0xea, 0x0b, 0x42, 0xb0,
+      0xe3, 0x7e, 0xe5, 0xb1, 0x50, 0x75, 0x6b, 0x2d, 0x22, 0x0f, 0x28, 0x3f,
+      0x14, 0x46, 0x76, 0xc1, 0x23, 0x94, 0xb3, 0xbc, 0x51, 0x71, 0xc9, 0xca,
+      0xb9, 0xa0, 0xa4, 0x87, 0x39, 0x60, 0x51, 0xfe, 0x22, 0x9b, 0x19, 0x52,
+      0xd9, 0xa8, 0x85, 0x47, 0xa2, 0x2a, 0x3c, 0x79, 0xfb, 0xb0, 0x06, 0x2f,
+      0x0b, 0xf2, 0xa0, 0x2f, 0x1e, 0xae, 0xf7, 0xc5, 0x8c, 0x35, 0x71, 0x57,
+      0xb0, 0x43, 0x1d, 0x0c, 0x6f, 0x99, 0xa6, 0xf5, 0x87, 0xf2, 0x5e, 0x27,
+      0x29, 0xb1, 0xba, 0x97, 0x86, 0x37, 0x95, 0x39, 0xa8, 0x30, 0xab, 0x87,
+      0x44, 0x92, 0x27, 0x45, 0x8c, 0x07, 0xd0, 0xd7, 0xae, 0x89, 0x49, 0xd2,
+      0x50, 0x04, 0xb1, 0xda, 0x08, 0x54, 0x8f, 0x83, 0x3e, 0xde, 0x4f, 0x23,
+      0x00, 0x8f, 0x63, 0x3f, 0x3e, 0xb0, 0xa8, 0xf1,
+    },
+
+    .exp = { 1, 0 },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // decrypt ciphertext `ct` with decryption key `dk` and store the
+    // plaintext message in output buffer `got`.
+    uint8_t got[32] = { 0 };
+    pke768_decrypt(got, TESTS[i].dk, TESTS[i].ct);
+
+    // check for expected plaintext
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_fips203ipd_kem768_keygen(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t seed[64]; // test seed
+    const uint8_t exp_ek[PKE768_EK_SIZE]; // expected ek (1184 bytes)
+    const uint8_t exp_dk[FIPS203IPD_KEM768_DK_SIZE]; // expected dk (2400 bytes)
+  } TESTS[] = {{
+    .name = "all-zero",
+    .seed = { 0 },
+    .exp_ek = {
+      0x9c, 0x35, 0x94, 0xe2, 0x35, 0xa8, 0x31, 0x46, 0xb4, 0x90, 0x75, 0x0a,
+      0xfc, 0x8b, 0x5c, 0x65, 0x9c, 0x88, 0x0b, 0x5b, 0x5b, 0x64, 0xa8, 0x37,
+      0xef, 0x52, 0xa2, 0x93, 0xf3, 0x2e, 0x2d, 0x79, 0xa2, 0x6e, 0x03, 0xb6,
+      0xf4, 0x46, 0x6c, 0x14, 0x9b, 0xa2, 0x50, 0xbb, 0x6b, 0x1a, 0x15, 0x92,
+      0xb0, 0x71, 0x88, 0xc9, 0x6c, 0x9c, 0x46, 0x68, 0x81, 0x83, 0x01, 0x89,
+      0xe2, 0xf8, 0x28, 0x53, 0x76, 0x78, 0xe7, 0xc3, 0x5e, 0xfc, 0x68, 0x0d,
+      0x32, 0xf6, 0x5e, 0x7e, 0x4b, 0x65, 0x1d, 0x5c, 0xb3, 0xa5, 0x87, 0xae,
+      0x30, 0xf3, 0x9d, 0x62, 0xda, 0x39, 0x16, 0x58, 0x64, 0x04, 0xaa, 0x3f,
+      0x1e, 0xa2, 0x50, 0xc8, 0x06, 0x11, 0x1d, 0x5c, 0xc4, 0x4b, 0xa6, 0xb5,
+      0xc6, 0x36, 0x40, 0x4c, 0x11, 0xc8, 0xcd, 0x83, 0x26, 0x88, 0x8a, 0xa6,
+      0x70, 0xa7, 0x8d, 0xa7, 0x20, 0x53, 0xfe, 0x87, 0x27, 0xd2, 0x64, 0x88,
+      0x44, 0x34, 0x2b, 0x09, 0xa4, 0xcf, 0xec, 0x68, 0xa6, 0x47, 0x80, 0x5e,
+      0x67, 0xeb, 0x83, 0x4b, 0x6b, 0x5c, 0x7e, 0x00, 0x65, 0xd0, 0xc3, 0x8d,
+      0xba, 0x47, 0x3f, 0xa3, 0x35, 0x37, 0xdc, 0xb9, 0x58, 0x3e, 0xa1, 0x87,
+      0x46, 0xf9, 0xcb, 0x93, 0xf9, 0x9f, 0x92, 0x35, 0x6d, 0x8d, 0x68, 0xc1,
+      0xb8, 0x64, 0x81, 0x85, 0x84, 0x6e, 0xf8, 0xe9, 0x7b, 0xaf, 0x91, 0x0e,
+      0xa2, 0x93, 0x4b, 0x82, 0xc2, 0x44, 0xde, 0x06, 0x00, 0xf5, 0xb0, 0x44,
+      0x76, 0x48, 0xc3, 0x6f, 0xd1, 0x9f, 0xf8, 0x66, 0x45, 0xd3, 0xe3, 0x8e,
+      0x49, 0x33, 0x83, 0x96, 0x06, 0x96, 0x30, 0xe2, 0x1f, 0xd3, 0x49, 0x0f,
+      0xd1, 0xb9, 0x2c, 0x2d, 0x99, 0x84, 0xa6, 0x61, 0xc6, 0xb7, 0x41, 0x5d,
+      0x49, 0x39, 0xad, 0x95, 0x45, 0xc5, 0xca, 0x1a, 0x5a, 0xc3, 0x45, 0x04,
+      0xbf, 0x34, 0xae, 0x16, 0x72, 0x1a, 0x29, 0x9a, 0x03, 0xf3, 0x09, 0x53,
+      0xad, 0xf5, 0x7a, 0x53, 0x54, 0x6d, 0x48, 0xca, 0x7b, 0x9e, 0x61, 0x20,
+      0xe9, 0xba, 0x8e, 0x56, 0xab, 0x47, 0x9d, 0x77, 0x83, 0x0d, 0x69, 0x00,
+      0x52, 0xb9, 0xa1, 0x9c, 0x16, 0x28, 0xe3, 0x68, 0x27, 0x5d, 0xcb, 0x41,
+      0x7c, 0xd1, 0xb6, 0x44, 0xd0, 0x65, 0x2a, 0x25, 0xa2, 0xf2, 0x84, 0x4b,
+      0xf7, 0x85, 0xab, 0x22, 0xd8, 0x42, 0x21, 0x78, 0x58, 0x79, 0xcb, 0x37,
+      0xa9, 0xf7, 0xce, 0x99, 0x90, 0x12, 0xe8, 0x49, 0x38, 0x76, 0x22, 0x2d,
+      0x25, 0x83, 0xb9, 0x5f, 0x72, 0x0d, 0xc2, 0x00, 0x6d, 0xc5, 0x59, 0x43,
+      0x4f, 0x33, 0xa1, 0xb8, 0x45, 0x82, 0x2a, 0x11, 0x13, 0x9a, 0x08, 0x35,
+      0x18, 0xfb, 0x34, 0x68, 0x97, 0x7c, 0xfa, 0xa7, 0x9f, 0x5e, 0xf9, 0x68,
+      0x4b, 0x3a, 0x40, 0xb7, 0xf2, 0x66, 0x9b, 0x05, 0x01, 0x4f, 0xe1, 0x98,
+      0xed, 0xc7, 0x34, 0xfa, 0xc2, 0x27, 0xe6, 0xd7, 0x47, 0x86, 0xfb, 0x17,
+      0x78, 0x45, 0x62, 0x01, 0x07, 0x6d, 0xe7, 0xa4, 0x66, 0x5e, 0x76, 0x45,
+      0xd3, 0x37, 0xc2, 0x46, 0x45, 0x0f, 0x0d, 0xa3, 0x50, 0x90, 0xa3, 0x5b,
+      0xda, 0x44, 0x5a, 0x40, 0xb6, 0x93, 0xe8, 0xd6, 0x96, 0x0f, 0x10, 0x1c,
+      0x0b, 0xe2, 0x7d, 0x03, 0x9a, 0x7a, 0x22, 0x37, 0x1b, 0x55, 0x36, 0x80,
+      0x45, 0x87, 0xbe, 0xd9, 0x29, 0x87, 0xf3, 0xec, 0x61, 0xa3, 0x2a, 0x60,
+      0xa9, 0x3c, 0x0e, 0x0f, 0x83, 0x1f, 0xda, 0xb1, 0x2f, 0x01, 0x21, 0x48,
+      0xb6, 0x5b, 0x89, 0x7f, 0x79, 0xb8, 0x6c, 0x49, 0x90, 0xb3, 0x0b, 0xb2,
+      0x6c, 0x64, 0x24, 0xe7, 0xf7, 0x90, 0xeb, 0xb5, 0xc0, 0xc5, 0x04, 0x8c,
+      0x16, 0x66, 0x56, 0xb0, 0x01, 0x2b, 0x9f, 0xe8, 0x54, 0x6a, 0x01, 0x0b,
+      0xb3, 0x33, 0x95, 0x6a, 0x85, 0x7b, 0xbc, 0xc0, 0x3b, 0x1a, 0x30, 0x47,
+      0xbd, 0x86, 0x20, 0x6b, 0x22, 0x26, 0x58, 0x3b, 0x1d, 0x7b, 0x08, 0x98,
+      0x45, 0x11, 0x29, 0x57, 0x61, 0x7f, 0xfa, 0x93, 0x66, 0x54, 0x87, 0xb2,
+      0x46, 0x91, 0x96, 0x7a, 0xe6, 0xb6, 0x41, 0x20, 0x9e, 0x0e, 0xb2, 0xaf,
+      0xb1, 0x14, 0x8e, 0x1d, 0xaa, 0x76, 0x7f, 0x17, 0x63, 0xb5, 0xf9, 0x60,
+      0x8c, 0xe5, 0x06, 0xba, 0x93, 0x98, 0xe7, 0x46, 0x90, 0x9d, 0x52, 0x39,
+      0x47, 0x47, 0x6f, 0x6d, 0xd8, 0x35, 0xfb, 0x8a, 0x4b, 0x5e, 0x8c, 0x26,
+      0xbc, 0xd0, 0xb6, 0xb9, 0xc6, 0x2f, 0xe4, 0x69, 0x26, 0x55, 0x8a, 0x84,
+      0xa1, 0xd2, 0x54, 0x66, 0x2c, 0x38, 0xcd, 0xa5, 0x0f, 0x5e, 0x27, 0xc3,
+      0xf0, 0x9a, 0x56, 0x7a, 0xe6, 0x6f, 0x26, 0xac, 0x24, 0x90, 0x71, 0x7e,
+      0x60, 0x45, 0x16, 0x2b, 0x15, 0x4e, 0xa5, 0x91, 0x9f, 0xfb, 0x08, 0x96,
+      0xaa, 0x24, 0x84, 0xb2, 0xb7, 0x7c, 0x2f, 0x8c, 0x80, 0x8b, 0xb9, 0x98,
+      0xc6, 0xc0, 0x7e, 0xf7, 0xa0, 0x25, 0x28, 0x51, 0x15, 0xf8, 0x7b, 0x7e,
+      0xe4, 0x54, 0x6c, 0xcf, 0x52, 0x29, 0xac, 0x02, 0x4b, 0x9b, 0x1a, 0x4f,
+      0x60, 0x3a, 0x91, 0x0d, 0x6a, 0x8f, 0x71, 0xbb, 0x33, 0x40, 0xf8, 0x80,
+      0x1b, 0x38, 0x37, 0xd0, 0xf8, 0xc2, 0x2b, 0x30, 0x4e, 0x31, 0xb9, 0x14,
+      0xf9, 0xba, 0x5e, 0x48, 0xf1, 0x41, 0x11, 0x08, 0x67, 0xf5, 0xc6, 0x72,
+      0x7f, 0xa2, 0x46, 0xc6, 0x99, 0x6b, 0x07, 0xc3, 0x0b, 0xe4, 0x99, 0xab,
+      0x08, 0x92, 0x17, 0x69, 0x5a, 0x7f, 0x5d, 0xf7, 0x5f, 0x95, 0x50, 0x32,
+      0xa0, 0xd8, 0xae, 0x08, 0x21, 0x54, 0xfd, 0xac, 0x64, 0x7c, 0x7b, 0x97,
+      0x8c, 0xfc, 0x8a, 0x42, 0x8c, 0x62, 0x0f, 0x20, 0x8d, 0x80, 0x58, 0x66,
+      0x59, 0x72, 0x85, 0x48, 0xb1, 0x13, 0x27, 0xd9, 0x97, 0xc8, 0x53, 0x34,
+      0x8f, 0x7b, 0x48, 0x70, 0xe0, 0x4d, 0xd6, 0x00, 0x7b, 0x71, 0x02, 0x04,
+      0x7f, 0x30, 0x80, 0x33, 0x21, 0x47, 0xea, 0x09, 0x86, 0x6c, 0x93, 0x5e,
+      0x17, 0x96, 0x95, 0x3b, 0x7c, 0x1e, 0x92, 0xda, 0xa8, 0xaa, 0x12, 0x6e,
+      0x30, 0x7a, 0x38, 0xaf, 0x3c, 0x90, 0x6b, 0xd6, 0xb4, 0xfa, 0x6c, 0x5e,
+      0x8d, 0x49, 0xce, 0x08, 0x5c, 0x26, 0x34, 0x43, 0x94, 0xe5, 0xb6, 0x8d,
+      0xec, 0x83, 0x50, 0xa0, 0x38, 0x9f, 0xb4, 0xf2, 0xbf, 0xdd, 0x37, 0x73,
+      0xd2, 0x25, 0xb4, 0x97, 0xa2, 0xa8, 0x3a, 0xf3, 0x2c, 0x80, 0x67, 0x56,
+      0x3d, 0x75, 0x03, 0x42, 0xd7, 0x51, 0x14, 0x02, 0x4a, 0x3d, 0x5b, 0x9e,
+      0x6c, 0x3b, 0x16, 0xe9, 0xc4, 0x28, 0x77, 0x43, 0x17, 0xb1, 0x78, 0x8d,
+      0x54, 0xfb, 0xc5, 0xb4, 0x39, 0xc1, 0xd9, 0x57, 0x1c, 0xd7, 0xab, 0xb7,
+      0xbd, 0x28, 0x4c, 0x98, 0x58, 0x32, 0x15, 0xf0, 0x3b, 0x14, 0x36, 0x80,
+      0xa0, 0xd0, 0xaf, 0xae, 0x26, 0x6b, 0xef, 0x93, 0x1c, 0xc1, 0xa2, 0xaa,
+      0x22, 0xf8, 0xc8, 0xd5, 0x50, 0xa6, 0x9a, 0x0a, 0x34, 0x35, 0xa7, 0xcb,
+      0xcd, 0xba, 0x5c, 0x18, 0xd6, 0x31, 0xc4, 0x5b, 0xc3, 0x12, 0x55, 0xc4,
+      0x0a, 0x64, 0x30, 0x10, 0xe5, 0x95, 0x18, 0x67, 0x68, 0xd9, 0x79, 0x47,
+      0xa0, 0xd1, 0x61, 0x0f, 0x11, 0x70, 0x23, 0xd8, 0xbb, 0x19, 0xf2, 0x4a,
+      0xe1, 0x22, 0x71, 0xf1, 0x69, 0x06, 0x59, 0x02, 0x5a, 0x6e, 0xd2, 0x30,
+      0x08, 0x0b, 0x61, 0xce, 0x61, 0x9b, 0x86, 0x60, 0x1a, 0xaf, 0x5b, 0x46,
+      0x7b, 0xb3, 0x12, 0x84, 0x75, 0x59, 0x91, 0x32, 0xaa, 0x16, 0x21, 0x40,
+      0xc2, 0x00, 0xbd, 0x38, 0x88, 0xa4, 0x56, 0x7c, 0x5f, 0x69, 0x42, 0x9b,
+      0x88, 0xd3, 0x53, 0x97, 0x86, 0x07, 0xd7, 0x4b, 0xcf, 0xf6, 0x39, 0x9a,
+      0x09, 0x34, 0x13, 0x01, 0x22, 0xb7, 0xfd, 0xb6, 0x60, 0x83, 0x49, 0x50,
+      0x64, 0xb7, 0x72, 0x00, 0xc9, 0x11, 0x1d, 0xfa, 0x25, 0x28, 0x28, 0x8e,
+      0x69, 0x20, 0x05, 0xda, 0xa7, 0x5c, 0x48, 0x62, 0x2c, 0xf4, 0xa5, 0x9e,
+      0x73, 0xb4, 0x95, 0xc5, 0xa2, 0x8f, 0x5a, 0x30, 0x84, 0xfe, 0xa0, 0x22,
+      0x82, 0x9b, 0x72, 0x99, 0xb8, 0x36, 0xed, 0xfa, 0x02, 0x57, 0xc9, 0x9d,
+      0xb1, 0x88, 0x92, 0xd2, 0xc0, 0x54, 0x07, 0xf9, 0x78, 0xf8, 0x76, 0x03,
+      0x55, 0x95, 0x95, 0xb2, 0xa1, 0x2e, 0xd2, 0x19, 0xb6, 0x88, 0xe8, 0x4b,
+      0xa8, 0x70, 0xc1, 0xfb, 0x41, 0x97, 0x39, 0xf5, 0x55, 0x84, 0x0a, 0x3c,
+      0xbf, 0x91, 0x56, 0x57, 0xa5, 0x24, 0x50, 0x64, 0x46, 0xd4, 0x75, 0x05,
+      0x22, 0x52, 0x1b, 0x81, 0x67, 0xad, 0x26, 0x19, 0x1e, 0xcd, 0x6a, 0x5d,
+      0x43, 0x15, 0xc0, 0xee, 0x94, 0x0d, 0x60, 0x78, 0x07, 0x79, 0x35, 0x0a,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+    },
+
+    .exp_dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x9c, 0x35, 0x94, 0xe2, 0x35, 0xa8, 0x31, 0x46, 0xb4, 0x90, 0x75, 0x0a,
+      0xfc, 0x8b, 0x5c, 0x65, 0x9c, 0x88, 0x0b, 0x5b, 0x5b, 0x64, 0xa8, 0x37,
+      0xef, 0x52, 0xa2, 0x93, 0xf3, 0x2e, 0x2d, 0x79, 0xa2, 0x6e, 0x03, 0xb6,
+      0xf4, 0x46, 0x6c, 0x14, 0x9b, 0xa2, 0x50, 0xbb, 0x6b, 0x1a, 0x15, 0x92,
+      0xb0, 0x71, 0x88, 0xc9, 0x6c, 0x9c, 0x46, 0x68, 0x81, 0x83, 0x01, 0x89,
+      0xe2, 0xf8, 0x28, 0x53, 0x76, 0x78, 0xe7, 0xc3, 0x5e, 0xfc, 0x68, 0x0d,
+      0x32, 0xf6, 0x5e, 0x7e, 0x4b, 0x65, 0x1d, 0x5c, 0xb3, 0xa5, 0x87, 0xae,
+      0x30, 0xf3, 0x9d, 0x62, 0xda, 0x39, 0x16, 0x58, 0x64, 0x04, 0xaa, 0x3f,
+      0x1e, 0xa2, 0x50, 0xc8, 0x06, 0x11, 0x1d, 0x5c, 0xc4, 0x4b, 0xa6, 0xb5,
+      0xc6, 0x36, 0x40, 0x4c, 0x11, 0xc8, 0xcd, 0x83, 0x26, 0x88, 0x8a, 0xa6,
+      0x70, 0xa7, 0x8d, 0xa7, 0x20, 0x53, 0xfe, 0x87, 0x27, 0xd2, 0x64, 0x88,
+      0x44, 0x34, 0x2b, 0x09, 0xa4, 0xcf, 0xec, 0x68, 0xa6, 0x47, 0x80, 0x5e,
+      0x67, 0xeb, 0x83, 0x4b, 0x6b, 0x5c, 0x7e, 0x00, 0x65, 0xd0, 0xc3, 0x8d,
+      0xba, 0x47, 0x3f, 0xa3, 0x35, 0x37, 0xdc, 0xb9, 0x58, 0x3e, 0xa1, 0x87,
+      0x46, 0xf9, 0xcb, 0x93, 0xf9, 0x9f, 0x92, 0x35, 0x6d, 0x8d, 0x68, 0xc1,
+      0xb8, 0x64, 0x81, 0x85, 0x84, 0x6e, 0xf8, 0xe9, 0x7b, 0xaf, 0x91, 0x0e,
+      0xa2, 0x93, 0x4b, 0x82, 0xc2, 0x44, 0xde, 0x06, 0x00, 0xf5, 0xb0, 0x44,
+      0x76, 0x48, 0xc3, 0x6f, 0xd1, 0x9f, 0xf8, 0x66, 0x45, 0xd3, 0xe3, 0x8e,
+      0x49, 0x33, 0x83, 0x96, 0x06, 0x96, 0x30, 0xe2, 0x1f, 0xd3, 0x49, 0x0f,
+      0xd1, 0xb9, 0x2c, 0x2d, 0x99, 0x84, 0xa6, 0x61, 0xc6, 0xb7, 0x41, 0x5d,
+      0x49, 0x39, 0xad, 0x95, 0x45, 0xc5, 0xca, 0x1a, 0x5a, 0xc3, 0x45, 0x04,
+      0xbf, 0x34, 0xae, 0x16, 0x72, 0x1a, 0x29, 0x9a, 0x03, 0xf3, 0x09, 0x53,
+      0xad, 0xf5, 0x7a, 0x53, 0x54, 0x6d, 0x48, 0xca, 0x7b, 0x9e, 0x61, 0x20,
+      0xe9, 0xba, 0x8e, 0x56, 0xab, 0x47, 0x9d, 0x77, 0x83, 0x0d, 0x69, 0x00,
+      0x52, 0xb9, 0xa1, 0x9c, 0x16, 0x28, 0xe3, 0x68, 0x27, 0x5d, 0xcb, 0x41,
+      0x7c, 0xd1, 0xb6, 0x44, 0xd0, 0x65, 0x2a, 0x25, 0xa2, 0xf2, 0x84, 0x4b,
+      0xf7, 0x85, 0xab, 0x22, 0xd8, 0x42, 0x21, 0x78, 0x58, 0x79, 0xcb, 0x37,
+      0xa9, 0xf7, 0xce, 0x99, 0x90, 0x12, 0xe8, 0x49, 0x38, 0x76, 0x22, 0x2d,
+      0x25, 0x83, 0xb9, 0x5f, 0x72, 0x0d, 0xc2, 0x00, 0x6d, 0xc5, 0x59, 0x43,
+      0x4f, 0x33, 0xa1, 0xb8, 0x45, 0x82, 0x2a, 0x11, 0x13, 0x9a, 0x08, 0x35,
+      0x18, 0xfb, 0x34, 0x68, 0x97, 0x7c, 0xfa, 0xa7, 0x9f, 0x5e, 0xf9, 0x68,
+      0x4b, 0x3a, 0x40, 0xb7, 0xf2, 0x66, 0x9b, 0x05, 0x01, 0x4f, 0xe1, 0x98,
+      0xed, 0xc7, 0x34, 0xfa, 0xc2, 0x27, 0xe6, 0xd7, 0x47, 0x86, 0xfb, 0x17,
+      0x78, 0x45, 0x62, 0x01, 0x07, 0x6d, 0xe7, 0xa4, 0x66, 0x5e, 0x76, 0x45,
+      0xd3, 0x37, 0xc2, 0x46, 0x45, 0x0f, 0x0d, 0xa3, 0x50, 0x90, 0xa3, 0x5b,
+      0xda, 0x44, 0x5a, 0x40, 0xb6, 0x93, 0xe8, 0xd6, 0x96, 0x0f, 0x10, 0x1c,
+      0x0b, 0xe2, 0x7d, 0x03, 0x9a, 0x7a, 0x22, 0x37, 0x1b, 0x55, 0x36, 0x80,
+      0x45, 0x87, 0xbe, 0xd9, 0x29, 0x87, 0xf3, 0xec, 0x61, 0xa3, 0x2a, 0x60,
+      0xa9, 0x3c, 0x0e, 0x0f, 0x83, 0x1f, 0xda, 0xb1, 0x2f, 0x01, 0x21, 0x48,
+      0xb6, 0x5b, 0x89, 0x7f, 0x79, 0xb8, 0x6c, 0x49, 0x90, 0xb3, 0x0b, 0xb2,
+      0x6c, 0x64, 0x24, 0xe7, 0xf7, 0x90, 0xeb, 0xb5, 0xc0, 0xc5, 0x04, 0x8c,
+      0x16, 0x66, 0x56, 0xb0, 0x01, 0x2b, 0x9f, 0xe8, 0x54, 0x6a, 0x01, 0x0b,
+      0xb3, 0x33, 0x95, 0x6a, 0x85, 0x7b, 0xbc, 0xc0, 0x3b, 0x1a, 0x30, 0x47,
+      0xbd, 0x86, 0x20, 0x6b, 0x22, 0x26, 0x58, 0x3b, 0x1d, 0x7b, 0x08, 0x98,
+      0x45, 0x11, 0x29, 0x57, 0x61, 0x7f, 0xfa, 0x93, 0x66, 0x54, 0x87, 0xb2,
+      0x46, 0x91, 0x96, 0x7a, 0xe6, 0xb6, 0x41, 0x20, 0x9e, 0x0e, 0xb2, 0xaf,
+      0xb1, 0x14, 0x8e, 0x1d, 0xaa, 0x76, 0x7f, 0x17, 0x63, 0xb5, 0xf9, 0x60,
+      0x8c, 0xe5, 0x06, 0xba, 0x93, 0x98, 0xe7, 0x46, 0x90, 0x9d, 0x52, 0x39,
+      0x47, 0x47, 0x6f, 0x6d, 0xd8, 0x35, 0xfb, 0x8a, 0x4b, 0x5e, 0x8c, 0x26,
+      0xbc, 0xd0, 0xb6, 0xb9, 0xc6, 0x2f, 0xe4, 0x69, 0x26, 0x55, 0x8a, 0x84,
+      0xa1, 0xd2, 0x54, 0x66, 0x2c, 0x38, 0xcd, 0xa5, 0x0f, 0x5e, 0x27, 0xc3,
+      0xf0, 0x9a, 0x56, 0x7a, 0xe6, 0x6f, 0x26, 0xac, 0x24, 0x90, 0x71, 0x7e,
+      0x60, 0x45, 0x16, 0x2b, 0x15, 0x4e, 0xa5, 0x91, 0x9f, 0xfb, 0x08, 0x96,
+      0xaa, 0x24, 0x84, 0xb2, 0xb7, 0x7c, 0x2f, 0x8c, 0x80, 0x8b, 0xb9, 0x98,
+      0xc6, 0xc0, 0x7e, 0xf7, 0xa0, 0x25, 0x28, 0x51, 0x15, 0xf8, 0x7b, 0x7e,
+      0xe4, 0x54, 0x6c, 0xcf, 0x52, 0x29, 0xac, 0x02, 0x4b, 0x9b, 0x1a, 0x4f,
+      0x60, 0x3a, 0x91, 0x0d, 0x6a, 0x8f, 0x71, 0xbb, 0x33, 0x40, 0xf8, 0x80,
+      0x1b, 0x38, 0x37, 0xd0, 0xf8, 0xc2, 0x2b, 0x30, 0x4e, 0x31, 0xb9, 0x14,
+      0xf9, 0xba, 0x5e, 0x48, 0xf1, 0x41, 0x11, 0x08, 0x67, 0xf5, 0xc6, 0x72,
+      0x7f, 0xa2, 0x46, 0xc6, 0x99, 0x6b, 0x07, 0xc3, 0x0b, 0xe4, 0x99, 0xab,
+      0x08, 0x92, 0x17, 0x69, 0x5a, 0x7f, 0x5d, 0xf7, 0x5f, 0x95, 0x50, 0x32,
+      0xa0, 0xd8, 0xae, 0x08, 0x21, 0x54, 0xfd, 0xac, 0x64, 0x7c, 0x7b, 0x97,
+      0x8c, 0xfc, 0x8a, 0x42, 0x8c, 0x62, 0x0f, 0x20, 0x8d, 0x80, 0x58, 0x66,
+      0x59, 0x72, 0x85, 0x48, 0xb1, 0x13, 0x27, 0xd9, 0x97, 0xc8, 0x53, 0x34,
+      0x8f, 0x7b, 0x48, 0x70, 0xe0, 0x4d, 0xd6, 0x00, 0x7b, 0x71, 0x02, 0x04,
+      0x7f, 0x30, 0x80, 0x33, 0x21, 0x47, 0xea, 0x09, 0x86, 0x6c, 0x93, 0x5e,
+      0x17, 0x96, 0x95, 0x3b, 0x7c, 0x1e, 0x92, 0xda, 0xa8, 0xaa, 0x12, 0x6e,
+      0x30, 0x7a, 0x38, 0xaf, 0x3c, 0x90, 0x6b, 0xd6, 0xb4, 0xfa, 0x6c, 0x5e,
+      0x8d, 0x49, 0xce, 0x08, 0x5c, 0x26, 0x34, 0x43, 0x94, 0xe5, 0xb6, 0x8d,
+      0xec, 0x83, 0x50, 0xa0, 0x38, 0x9f, 0xb4, 0xf2, 0xbf, 0xdd, 0x37, 0x73,
+      0xd2, 0x25, 0xb4, 0x97, 0xa2, 0xa8, 0x3a, 0xf3, 0x2c, 0x80, 0x67, 0x56,
+      0x3d, 0x75, 0x03, 0x42, 0xd7, 0x51, 0x14, 0x02, 0x4a, 0x3d, 0x5b, 0x9e,
+      0x6c, 0x3b, 0x16, 0xe9, 0xc4, 0x28, 0x77, 0x43, 0x17, 0xb1, 0x78, 0x8d,
+      0x54, 0xfb, 0xc5, 0xb4, 0x39, 0xc1, 0xd9, 0x57, 0x1c, 0xd7, 0xab, 0xb7,
+      0xbd, 0x28, 0x4c, 0x98, 0x58, 0x32, 0x15, 0xf0, 0x3b, 0x14, 0x36, 0x80,
+      0xa0, 0xd0, 0xaf, 0xae, 0x26, 0x6b, 0xef, 0x93, 0x1c, 0xc1, 0xa2, 0xaa,
+      0x22, 0xf8, 0xc8, 0xd5, 0x50, 0xa6, 0x9a, 0x0a, 0x34, 0x35, 0xa7, 0xcb,
+      0xcd, 0xba, 0x5c, 0x18, 0xd6, 0x31, 0xc4, 0x5b, 0xc3, 0x12, 0x55, 0xc4,
+      0x0a, 0x64, 0x30, 0x10, 0xe5, 0x95, 0x18, 0x67, 0x68, 0xd9, 0x79, 0x47,
+      0xa0, 0xd1, 0x61, 0x0f, 0x11, 0x70, 0x23, 0xd8, 0xbb, 0x19, 0xf2, 0x4a,
+      0xe1, 0x22, 0x71, 0xf1, 0x69, 0x06, 0x59, 0x02, 0x5a, 0x6e, 0xd2, 0x30,
+      0x08, 0x0b, 0x61, 0xce, 0x61, 0x9b, 0x86, 0x60, 0x1a, 0xaf, 0x5b, 0x46,
+      0x7b, 0xb3, 0x12, 0x84, 0x75, 0x59, 0x91, 0x32, 0xaa, 0x16, 0x21, 0x40,
+      0xc2, 0x00, 0xbd, 0x38, 0x88, 0xa4, 0x56, 0x7c, 0x5f, 0x69, 0x42, 0x9b,
+      0x88, 0xd3, 0x53, 0x97, 0x86, 0x07, 0xd7, 0x4b, 0xcf, 0xf6, 0x39, 0x9a,
+      0x09, 0x34, 0x13, 0x01, 0x22, 0xb7, 0xfd, 0xb6, 0x60, 0x83, 0x49, 0x50,
+      0x64, 0xb7, 0x72, 0x00, 0xc9, 0x11, 0x1d, 0xfa, 0x25, 0x28, 0x28, 0x8e,
+      0x69, 0x20, 0x05, 0xda, 0xa7, 0x5c, 0x48, 0x62, 0x2c, 0xf4, 0xa5, 0x9e,
+      0x73, 0xb4, 0x95, 0xc5, 0xa2, 0x8f, 0x5a, 0x30, 0x84, 0xfe, 0xa0, 0x22,
+      0x82, 0x9b, 0x72, 0x99, 0xb8, 0x36, 0xed, 0xfa, 0x02, 0x57, 0xc9, 0x9d,
+      0xb1, 0x88, 0x92, 0xd2, 0xc0, 0x54, 0x07, 0xf9, 0x78, 0xf8, 0x76, 0x03,
+      0x55, 0x95, 0x95, 0xb2, 0xa1, 0x2e, 0xd2, 0x19, 0xb6, 0x88, 0xe8, 0x4b,
+      0xa8, 0x70, 0xc1, 0xfb, 0x41, 0x97, 0x39, 0xf5, 0x55, 0x84, 0x0a, 0x3c,
+      0xbf, 0x91, 0x56, 0x57, 0xa5, 0x24, 0x50, 0x64, 0x46, 0xd4, 0x75, 0x05,
+      0x22, 0x52, 0x1b, 0x81, 0x67, 0xad, 0x26, 0x19, 0x1e, 0xcd, 0x6a, 0x5d,
+      0x43, 0x15, 0xc0, 0xee, 0x94, 0x0d, 0x60, 0x78, 0x07, 0x79, 0x35, 0x0a,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x41, 0xb5, 0xe9, 0xa0,
+      0xe8, 0x00, 0x81, 0x9e, 0xa5, 0xb0, 0x4d, 0xf9, 0xad, 0xf3, 0xec, 0xef,
+      0x91, 0x6f, 0x8f, 0x44, 0xf6, 0xab, 0xf1, 0x93, 0xfb, 0xc9, 0x59, 0x57,
+      0x26, 0x15, 0x90, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+  }, {
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Key Generation -- ML-KEM-768",
+    .seed = {
+      // z
+      0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6, 0xEE, 0x86, 0xFE, 0x00,
+      0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34, 0x86, 0x0F, 0x5F, 0xF7,
+      0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
+
+      // d
+      0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6, 0xEE, 0x86, 0xFE, 0x00,
+      0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34, 0x86, 0x0F, 0x5F, 0xF7,
+      0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
+    },
+
+    .exp_ek = {
+      0xD2, 0xE6, 0x9A, 0x05, 0x53, 0x4A, 0x72, 0x32, 0xC5, 0xF1, 0xB7, 0x66,
+      0xE9, 0x3A, 0x5E, 0xE2, 0xEA, 0x1B, 0x26, 0xE8, 0x60, 0xA3, 0x44, 0x1A,
+      0xDE, 0xA9, 0x1E, 0xDB, 0x78, 0x2C, 0xAB, 0xC8, 0xA5, 0xD0, 0x11, 0xA2,
+      0x1B, 0xC3, 0x88, 0xE7, 0xF4, 0x86, 0xF0, 0xB7, 0x99, 0x30, 0x79, 0xAE,
+      0x3F, 0x1A, 0x7C, 0x85, 0xD2, 0x7D, 0x0F, 0x49, 0x21, 0x84, 0xD5, 0x90,
+      0x62, 0x14, 0x2B, 0x76, 0xA4, 0x37, 0x34, 0xA9, 0x0D, 0x55, 0x6A, 0x95,
+      0xDC, 0x48, 0x3D, 0xD8, 0x21, 0x04, 0xED, 0x58, 0xCA, 0x15, 0x71, 0xC3,
+      0x96, 0x85, 0x82, 0x79, 0x51, 0x43, 0x4C, 0xC1, 0x00, 0x1A, 0xA4, 0xC8,
+      0x13, 0x26, 0x1E, 0x4F, 0x93, 0x02, 0x8E, 0x14, 0xCD, 0x08, 0xF7, 0x68,
+      0xA4, 0x54, 0x31, 0x0C, 0x3B, 0x01, 0x0C, 0x83, 0xB7, 0x4D, 0x04, 0xA5,
+      0x7B, 0xB9, 0x77, 0xB3, 0xD8, 0xBC, 0xF3, 0xAA, 0xA7, 0x8C, 0xA1, 0x2B,
+      0x78, 0xF0, 0x10, 0xD9, 0x51, 0x34, 0x92, 0x8A, 0x5E, 0x5D, 0x96, 0xA0,
+      0x29, 0xB4, 0x42, 0xA4, 0x18, 0x88, 0x03, 0x8B, 0x29, 0xC2, 0xF1, 0x22,
+      0xB0, 0xB6, 0xB3, 0xAF, 0x12, 0x1A, 0xEA, 0x29, 0xA0, 0x55, 0x53, 0xBD,
+      0xF1, 0xDB, 0x60, 0x7A, 0xFB, 0x17, 0x00, 0x18, 0x60, 0xAF, 0x18, 0x23,
+      0xBC, 0xF0, 0x3D, 0xB3, 0xB4, 0x41, 0xDA, 0x16, 0x3A, 0x28, 0xC5, 0x23,
+      0xA5, 0xFB, 0x46, 0x69, 0xA6, 0x42, 0x34, 0xA4, 0xBC, 0xD1, 0x21, 0x7F,
+      0xF2, 0x63, 0x5B, 0xD9, 0x76, 0x80, 0xFF, 0x93, 0x8D, 0xBC, 0xF1, 0x0E,
+      0x95, 0x32, 0xA9, 0xA7, 0x9A, 0x5B, 0x07, 0x3A, 0x9E, 0x8D, 0xB2, 0x12,
+      0x3D, 0x21, 0x0F, 0xAE, 0xA2, 0x00, 0xB6, 0x64, 0x83, 0x8E, 0x80, 0x07,
+      0x1F, 0x2B, 0xA2, 0x54, 0xAA, 0xC8, 0x90, 0xA4, 0x6E, 0x28, 0xEC, 0x34,
+      0x2D, 0x92, 0x81, 0x2B, 0x01, 0x59, 0x30, 0x71, 0x65, 0x7E, 0x7A, 0x3A,
+      0x4A, 0x75, 0xCB, 0x3D, 0x52, 0x79, 0xCE, 0x88, 0x40, 0x5A, 0xC5, 0xAD,
+      0xAC, 0xB2, 0x05, 0x1E, 0x02, 0x2E, 0xE0, 0xAC, 0x9B, 0xBF, 0xE3, 0x2D,
+      0xEF, 0x98, 0x66, 0x7E, 0xD3, 0x47, 0xAD, 0xCB, 0x39, 0x30, 0xF3, 0xCA,
+      0xD0, 0x31, 0x39, 0x1B, 0x70, 0x9A, 0x4E, 0x61, 0xB8, 0xDD, 0x4B, 0x3F,
+      0xB7, 0x41, 0xB5, 0xBD, 0x60, 0xBF, 0x30, 0x40, 0x15, 0xEE, 0x75, 0x46,
+      0xA2, 0x4B, 0x59, 0xEA, 0xDC, 0xA1, 0x37, 0xC7, 0x12, 0x50, 0x74, 0x72,
+      0x6B, 0x76, 0x86, 0xEC, 0x55, 0x1B, 0x7B, 0xC2, 0x6B, 0xBD, 0xB2, 0x0F,
+      0xC3, 0x78, 0x35, 0x34, 0xE3, 0x4E, 0xE1, 0xF1, 0xBC, 0x6B, 0x77, 0xAB,
+      0x49, 0xA6, 0x66, 0x78, 0x46, 0x97, 0x57, 0x78, 0xC3, 0xC5, 0x36, 0x83,
+      0x04, 0x50, 0xA3, 0xFA, 0x91, 0x02, 0x59, 0x72, 0x2F, 0x3F, 0x80, 0x6E,
+      0x6E, 0xB4, 0xB9, 0x34, 0x67, 0x63, 0xFE, 0xF0, 0x92, 0x2B, 0xC4, 0xB6,
+      0xEB, 0x38, 0x26, 0xAF, 0xF2, 0x4E, 0xAD, 0xC6, 0xCF, 0x6E, 0x47, 0x7C,
+      0x2E, 0x05, 0x5C, 0xFB, 0x7A, 0x90, 0xA5, 0x5C, 0x06, 0xD0, 0xB2, 0xA2,
+      0xF5, 0x11, 0x60, 0x69, 0xE6, 0x4A, 0x5B, 0x50, 0x78, 0xC0, 0x57, 0x7B,
+      0xC8, 0xE7, 0x90, 0x0E, 0xA7, 0x1C, 0x34, 0x1C, 0x02, 0xAD, 0x85, 0x4E,
+      0xA5, 0xA0, 0x1A, 0xF2, 0xA6, 0x05, 0xCB, 0x20, 0x68, 0xD5, 0x24, 0x38,
+      0xCD, 0xDC, 0x60, 0xB0, 0x38, 0x82, 0xCC, 0x02, 0x4D, 0x13, 0x04, 0x5F,
+      0x2B, 0xA6, 0xB0, 0xF4, 0x46, 0xAA, 0xA5, 0x95, 0x87, 0x60, 0x61, 0x79,
+      0x45, 0x37, 0x1F, 0xD7, 0x8C, 0x28, 0xA4, 0x06, 0x77, 0xA6, 0xE7, 0x2F,
+      0x51, 0x3B, 0x9E, 0x06, 0x67, 0xA9, 0xBA, 0xF4, 0x46, 0xC1, 0xBA, 0x93,
+      0x1B, 0xA8, 0x18, 0x34, 0x23, 0x47, 0x92, 0xA2, 0xA2, 0xB2, 0xB3, 0x70,
+      0x1F, 0x31, 0xB7, 0xCF, 0x46, 0x7C, 0x80, 0xF1, 0x98, 0x11, 0x41, 0xBB,
+      0x45, 0x77, 0x93, 0xE1, 0x30, 0x70, 0x91, 0xC4, 0x8B, 0x59, 0x14, 0x64,
+      0x6A, 0x60, 0xCE, 0x1A, 0x30, 0x15, 0x43, 0x77, 0x9D, 0x7C, 0x33, 0x42,
+      0xAD, 0x17, 0x97, 0x96, 0xC2, 0xC4, 0x40, 0xD9, 0x9D, 0xF9, 0xD4, 0x1B,
+      0x52, 0xE3, 0x26, 0x25, 0xA8, 0x2A, 0xA5, 0xF5, 0x79, 0xA9, 0x92, 0x0B,
+      0xFF, 0xBA, 0x96, 0x4F, 0xA7, 0x0D, 0xB2, 0x59, 0xC8, 0x5E, 0x68, 0xC8,
+      0x13, 0x81, 0x7B, 0x13, 0x47, 0xBF, 0x19, 0x81, 0x4D, 0xA5, 0xE9, 0x36,
+      0x4A, 0x46, 0x45, 0xE6, 0x21, 0x92, 0x3D, 0x95, 0x5C, 0x21, 0x1A, 0x55,
+      0xD3, 0x55, 0xC8, 0x16, 0xDA, 0x04, 0x73, 0x0A, 0xA3, 0x24, 0x08, 0x5E,
+      0x62, 0x2B, 0x51, 0xD6, 0x10, 0x9B, 0x49, 0xF6, 0x73, 0xAD, 0xD0, 0x0E,
+      0x41, 0x47, 0x55, 0xC8, 0x02, 0x4A, 0xA0, 0x16, 0x4F, 0x24, 0x55, 0x6D,
+      0xED, 0x96, 0x3D, 0x61, 0x14, 0x38, 0x56, 0xCB, 0x4F, 0xF0, 0x56, 0x7E,
+      0x33, 0x20, 0x73, 0x0D, 0xBC, 0xBF, 0x12, 0xF6, 0x6E, 0x2B, 0x70, 0xB2,
+      0x00, 0x54, 0xA6, 0xDE, 0xA4, 0x26, 0x14, 0xB5, 0x0E, 0xF7, 0x2B, 0x15,
+      0x6F, 0x51, 0x49, 0xFC, 0x26, 0x3D, 0xD7, 0xE0, 0x39, 0xC5, 0x5A, 0x3E,
+      0xE9, 0x82, 0x7D, 0xF9, 0x2C, 0x56, 0x5D, 0x24, 0xC5, 0x5E, 0x0A, 0x81,
+      0xC6, 0x49, 0x46, 0x95, 0x34, 0x4D, 0x94, 0x87, 0x48, 0xAF, 0xBA, 0x9F,
+      0x76, 0x2C, 0x0E, 0xA9, 0x0B, 0xB7, 0x24, 0x89, 0x79, 0x02, 0x00, 0x07,
+      0x75, 0x61, 0x39, 0x49, 0x60, 0x2C, 0x48, 0xC7, 0x8A, 0x94, 0x40, 0x67,
+      0x8C, 0x24, 0x08, 0x6D, 0x32, 0x6D, 0x79, 0x64, 0x3B, 0xAF, 0x70, 0x36,
+      0xC6, 0x6C, 0x7E, 0x02, 0x6A, 0xAE, 0xFD, 0xA2, 0x80, 0x7A, 0x60, 0xBD,
+      0x7F, 0xC9, 0x13, 0x63, 0xBB, 0x02, 0x34, 0xA5, 0x90, 0x98, 0x4A, 0xA0,
+      0x11, 0xF1, 0x1D, 0x40, 0x26, 0x82, 0x18, 0xA1, 0x58, 0x83, 0x77, 0xB3,
+      0xD7, 0x67, 0x1B, 0x8B, 0x99, 0x78, 0x99, 0x19, 0xB8, 0x6E, 0xE8, 0x2B,
+      0x18, 0xEC, 0x22, 0xD4, 0xE8, 0x0A, 0x1F, 0x27, 0x85, 0x3D, 0x88, 0x94,
+      0x19, 0xD4, 0x60, 0xDE, 0xF7, 0x56, 0x7A, 0xA4, 0x56, 0x79, 0x69, 0xC4,
+      0x30, 0x48, 0xC3, 0x2B, 0x84, 0x62, 0xA9, 0xC9, 0x38, 0x6E, 0xB3, 0x15,
+      0x2A, 0x69, 0x76, 0xAA, 0x78, 0x3C, 0xDD, 0x1A, 0x8C, 0x57, 0xA9, 0xB6,
+      0xBB, 0xD8, 0x37, 0xA0, 0x06, 0x24, 0xB5, 0x8B, 0x4B, 0xA3, 0xDB, 0xB6,
+      0x3B, 0xB8, 0x20, 0x0E, 0x7B, 0xC8, 0x88, 0x81, 0xBE, 0xBD, 0xA9, 0x25,
+      0xBC, 0xA0, 0x28, 0xE2, 0x91, 0xAA, 0x1C, 0x22, 0x53, 0x9C, 0xD0, 0x4F,
+      0x90, 0x09, 0x0D, 0x7F, 0x74, 0x10, 0x8C, 0x32, 0xB8, 0x02, 0x2C, 0x15,
+      0x91, 0xC8, 0x81, 0xE7, 0x63, 0x04, 0xE2, 0x40, 0x81, 0x90, 0xE2, 0x0F,
+      0x09, 0xA5, 0x4F, 0xC2, 0x34, 0x20, 0xE2, 0x62, 0x0E, 0x9D, 0x87, 0xA3,
+      0x10, 0x8A, 0x94, 0xFE, 0xEA, 0x72, 0xD5, 0xAB, 0x7F, 0xCF, 0xB9, 0x72,
+      0xE6, 0x56, 0x1B, 0x1A, 0x7B, 0x06, 0x2F, 0x1A, 0x68, 0x2E, 0x02, 0x0A,
+      0xA2, 0x56, 0x28, 0x12, 0xB2, 0x96, 0x54, 0x7B, 0x91, 0x78, 0x24, 0xCD,
+      0xB8, 0x8C, 0x58, 0x2B, 0x5A, 0x68, 0x90, 0x17, 0x7B, 0xC7, 0x0C, 0x91,
+      0xAC, 0xAC, 0x9A, 0xBE, 0x29, 0x0A, 0xEB, 0x2C, 0x34, 0xA7, 0xE2, 0x36,
+      0x89, 0x55, 0xCB, 0x45, 0x6A, 0x34, 0x53, 0x68, 0xAB, 0xE3, 0xB9, 0x1B,
+      0x47, 0xFC, 0x30, 0xB0, 0x23, 0x3A, 0x09, 0xBA, 0x79, 0xFB, 0x11, 0x23,
+      0x8A, 0xC5, 0x08, 0xCC, 0xE6, 0x10, 0x95, 0xF8, 0x54, 0xC2, 0x32, 0x04,
+      0xA8, 0xD3, 0x6B, 0xFC, 0x2C, 0x6E, 0x05, 0xA7, 0x2A, 0xF5, 0x24, 0x4B,
+      0x17, 0xC1, 0x21, 0x01, 0xE0, 0x14, 0x51, 0x57, 0x0E, 0xB1, 0x10, 0x56,
+      0x7E, 0x85, 0x0E, 0x79, 0xC0, 0x00, 0x14, 0x24, 0x41, 0xFE, 0x41, 0x60,
+      0x02, 0x75, 0x45, 0xF6, 0x29, 0x0E, 0x85, 0x45, 0x1B, 0x80, 0x23, 0x4A,
+      0x94, 0x06, 0xC3, 0x90, 0xB0, 0xCE, 0xA3, 0xC8, 0x33, 0x5D, 0x4C, 0x6F,
+      0x85, 0x50, 0xB5, 0x44, 0xC9, 0x34, 0x3E, 0x61, 0xBA, 0x1C, 0x84, 0x89,
+      0xD1, 0xB0, 0x39, 0x97, 0x39, 0x16, 0x8A, 0xF7, 0x40, 0xA4, 0x81, 0xB0,
+      0xF5, 0xC3, 0x37, 0x25, 0x30, 0xCA, 0x06, 0xB5, 0x08, 0xEC, 0xE8, 0x38,
+      0xAB, 0x78, 0xBE, 0xE1, 0xE5, 0x97, 0xA9, 0xB1, 0x4F, 0x6A, 0xEC, 0x7A,
+      0x3B, 0xD1, 0xAA, 0x8D, 0x10, 0xBA, 0xC2, 0x3B, 0x98, 0x02, 0x90, 0x2C,
+      0xD5, 0x29, 0xAB, 0x6E, 0xF5, 0x4D, 0xB3, 0x11, 0x0C, 0xFB, 0x56, 0x1E,
+      0x7E, 0x69, 0x48, 0xE6, 0x52, 0x81, 0x25, 0x04, 0x16, 0xC3, 0x49, 0xC8,
+      0x10, 0x0B, 0x3B, 0x4D, 0x3D, 0x0F, 0x62, 0xAC, 0xAD, 0x8D, 0x16, 0x11,
+      0x75, 0xB1, 0x34, 0xF7, 0x56, 0x49, 0x37, 0xCD,
+    },
+
+    .exp_dk = {
+      0x19, 0xD7, 0x4A, 0xD5, 0x47, 0x2A, 0x8B, 0x2B, 0xAA, 0xD2, 0xA5, 0x67,
+      0x02, 0xC9, 0xB3, 0xB5, 0x51, 0x0E, 0xF3, 0x92, 0x48, 0x58, 0x06, 0x1D,
+      0x57, 0xF9, 0x0D, 0xD9, 0xA1, 0xA0, 0x1F, 0xEC, 0x2F, 0x57, 0xC5, 0x1A,
+      0x88, 0x88, 0x05, 0x34, 0x1B, 0x61, 0x7C, 0x51, 0x55, 0x39, 0x59, 0x77,
+      0x50, 0x83, 0x5C, 0x3E, 0xD7, 0xA0, 0x33, 0xB0, 0x39, 0xD7, 0x24, 0x91,
+      0x33, 0x2C, 0x5D, 0xF4, 0xA6, 0x9B, 0x6D, 0xF2, 0x61, 0x71, 0x87, 0x7A,
+      0xD1, 0xE5, 0x0A, 0xC5, 0x01, 0x00, 0xBE, 0x47, 0x28, 0x78, 0x66, 0x85,
+      0xDA, 0x7A, 0x73, 0x9E, 0x84, 0x3F, 0xF0, 0xD4, 0x59, 0x22, 0xD7, 0x28,
+      0x1E, 0x21, 0x0D, 0x5E, 0x82, 0xB9, 0x44, 0x65, 0x2F, 0x48, 0x62, 0xCF,
+      0xB3, 0xD9, 0x02, 0xDE, 0x60, 0xAF, 0xD0, 0xA1, 0x64, 0x47, 0x1B, 0x26,
+      0x14, 0x4A, 0x1D, 0x7A, 0x38, 0x09, 0x65, 0x03, 0x09, 0x59, 0x11, 0x76,
+      0x2E, 0xBA, 0x79, 0x62, 0xC4, 0x51, 0x1D, 0x05, 0xA1, 0x28, 0xF2, 0x78,
+      0x1E, 0xCB, 0x3D, 0x1F, 0x5B, 0xB1, 0x24, 0x42, 0x37, 0x61, 0x1A, 0xBA,
+      0xB9, 0x24, 0x99, 0x1F, 0x8A, 0x27, 0x32, 0xE2, 0x70, 0x32, 0x35, 0x79,
+      0x20, 0xF1, 0x97, 0xC7, 0x69, 0x2D, 0x60, 0xA9, 0x44, 0x44, 0x72, 0x25,
+      0x8C, 0xB4, 0x57, 0xC1, 0xB7, 0x1B, 0x77, 0x99, 0x54, 0x69, 0xF3, 0xA9,
+      0x62, 0xF3, 0xAB, 0xA6, 0x69, 0x96, 0x14, 0xFC, 0xCC, 0xEA, 0x74, 0x1E,
+      0x21, 0xC6, 0x00, 0xC4, 0x35, 0x7B, 0xBF, 0xAB, 0x45, 0x29, 0x27, 0xC3,
+      0xD4, 0x41, 0xBF, 0x8E, 0xD7, 0x31, 0x52, 0xF7, 0x5C, 0x08, 0xF5, 0x40,
+      0xE1, 0x86, 0xAC, 0xCA, 0x33, 0x26, 0xF4, 0x22, 0xC8, 0x4B, 0x98, 0x8D,
+      0x77, 0xE6, 0x1A, 0xE6, 0x18, 0x59, 0xCF, 0x85, 0x41, 0xF8, 0x92, 0x09,
+      0xE4, 0x98, 0x30, 0x40, 0xC5, 0x61, 0x76, 0x54, 0x80, 0x88, 0x52, 0xB6,
+      0x49, 0xB8, 0x99, 0xA3, 0x99, 0xAE, 0xC2, 0xC8, 0xBB, 0xA8, 0xA5, 0x42,
+      0xF3, 0x45, 0xAB, 0xF2, 0x81, 0x3F, 0x65, 0xE9, 0xA7, 0x91, 0xD3, 0x2C,
+      0xC2, 0xD7, 0x60, 0x26, 0xFB, 0x8D, 0x0C, 0x94, 0xB6, 0x57, 0x48, 0x9A,
+      0xBB, 0x48, 0x7D, 0xA4, 0xA2, 0xC0, 0xE3, 0x86, 0x8D, 0x3C, 0xF4, 0x7F,
+      0x1C, 0xBB, 0x2F, 0xA7, 0x9C, 0x53, 0xCF, 0xF6, 0x26, 0x47, 0x77, 0xC0,
+      0x9B, 0x17, 0x7C, 0x91, 0x31, 0x54, 0x84, 0xD2, 0xB3, 0x0B, 0x0C, 0xA2,
+      0x1F, 0x55, 0xAD, 0xD2, 0x3C, 0x57, 0xE1, 0x91, 0x1C, 0x3F, 0x08, 0x6B,
+      0xCA, 0xD2, 0x17, 0x98, 0x48, 0x6E, 0xB4, 0x7B, 0x7C, 0x58, 0x57, 0x73,
+      0x81, 0xC0, 0x9F, 0x52, 0x52, 0x58, 0x2D, 0x1B, 0x27, 0xA7, 0xD5, 0xB8,
+      0xE0, 0x60, 0xCE, 0x78, 0x20, 0x9C, 0xC8, 0x2B, 0xAE, 0x4D, 0xA6, 0x06,
+      0x80, 0x0C, 0x8D, 0xB1, 0x26, 0x8F, 0x7A, 0xD2, 0xB7, 0x93, 0xA4, 0x4F,
+      0x34, 0x61, 0x2C, 0xCE, 0xA3, 0x1C, 0xE7, 0xD7, 0x96, 0xA6, 0x5A, 0x26,
+      0x91, 0xD6, 0x15, 0x00, 0x62, 0x5F, 0x83, 0xE7, 0xBE, 0x57, 0x07, 0x7E,
+      0xE9, 0xC1, 0xB8, 0xC1, 0xCA, 0xA1, 0x37, 0xCC, 0x4B, 0x65, 0x73, 0x30,
+      0x8C, 0x19, 0x66, 0x8B, 0x24, 0xB0, 0x1E, 0x96, 0x69, 0x03, 0xAB, 0xBC,
+      0xB7, 0x9B, 0x67, 0xBE, 0x0A, 0x3E, 0x3E, 0x05, 0x8A, 0xAD, 0xA1, 0x89,
+      0xB9, 0xEA, 0x80, 0x35, 0x9A, 0xC2, 0x6F, 0x4C, 0x5C, 0x53, 0x73, 0x5F,
+      0xE4, 0xFC, 0x35, 0x24, 0x73, 0x37, 0x76, 0x0C, 0xCA, 0x35, 0x29, 0xB8,
+      0xD2, 0x66, 0xBB, 0x6C, 0x48, 0x01, 0x06, 0x54, 0xCD, 0xBC, 0x5A, 0x3E,
+      0x97, 0x57, 0x52, 0x46, 0x75, 0xAB, 0xC4, 0x13, 0x13, 0x0C, 0xC2, 0x70,
+      0x1F, 0x28, 0x93, 0x3E, 0xAB, 0xB8, 0x39, 0x2B, 0x0D, 0x6D, 0x05, 0x9C,
+      0xFC, 0x3A, 0x30, 0x32, 0x6C, 0x4F, 0xCC, 0x81, 0x0B, 0x37, 0xA4, 0x74,
+      0x8C, 0x1C, 0x53, 0x92, 0x8A, 0x49, 0x13, 0xE4, 0x8B, 0x18, 0x66, 0x97,
+      0x16, 0x2C, 0x33, 0xFF, 0xFB, 0x06, 0xDD, 0x51, 0x61, 0xC8, 0x63, 0x9D,
+      0xB1, 0x95, 0xC6, 0xCA, 0x64, 0x82, 0x9B, 0x2B, 0x3A, 0x2E, 0x4C, 0x96,
+      0x83, 0xB6, 0x6D, 0xF7, 0xFB, 0x19, 0x09, 0x90, 0x4E, 0x00, 0x02, 0x0D,
+      0xBA, 0x13, 0x4E, 0x02, 0xA1, 0x68, 0xD7, 0x6A, 0xC0, 0x76, 0xBB, 0x77,
+      0xD4, 0xDC, 0x84, 0x96, 0xB4, 0xBB, 0xE7, 0xB4, 0x69, 0x0B, 0xA2, 0x9B,
+      0x62, 0xA9, 0x1A, 0xBE, 0x72, 0xBE, 0xF3, 0x23, 0xA4, 0x4C, 0x89, 0x03,
+      0xE4, 0x82, 0xB6, 0x0D, 0x99, 0xBA, 0x61, 0xD1, 0xBB, 0xCF, 0x9C, 0xB9,
+      0x67, 0x35, 0x34, 0xC1, 0xD6, 0x47, 0x66, 0x23, 0x74, 0xEE, 0x2C, 0x7C,
+      0x5F, 0x00, 0x81, 0xBA, 0xD1, 0x49, 0xF4, 0x42, 0x06, 0x71, 0x76, 0x84,
+      0xD9, 0x74, 0x6B, 0x20, 0x48, 0x63, 0x3A, 0xF7, 0xA6, 0x8C, 0x68, 0x65,
+      0xFB, 0x59, 0x03, 0x58, 0xD8, 0xCF, 0x82, 0x14, 0x58, 0x36, 0x9B, 0x0C,
+      0x31, 0xEB, 0x59, 0x7C, 0xF5, 0xBE, 0x78, 0xEB, 0x48, 0x0E, 0xA0, 0x4E,
+      0x35, 0xFA, 0xCC, 0x38, 0x03, 0x72, 0xC8, 0xC0, 0xA0, 0x4D, 0xE2, 0x76,
+      0xB1, 0xA7, 0x21, 0x21, 0xE5, 0x96, 0xCB, 0xB2, 0x5E, 0xF7, 0x53, 0x6A,
+      0xD3, 0x80, 0x41, 0x84, 0xA8, 0x7B, 0xDF, 0xB5, 0xA7, 0x69, 0x16, 0x0B,
+      0xFB, 0xB0, 0xCA, 0x3C, 0x36, 0x07, 0x90, 0xE5, 0x56, 0x2B, 0xB7, 0x8E,
+      0xFE, 0x00, 0x69, 0xC7, 0x74, 0x83, 0xAD, 0x35, 0xCA, 0xC2, 0x37, 0xC6,
+      0x1D, 0xE7, 0x8A, 0x7D, 0xB4, 0x6F, 0xC9, 0x17, 0x12, 0x4C, 0xA1, 0x75,
+      0x10, 0xDB, 0x7D, 0xA2, 0x18, 0x89, 0x0F, 0x44, 0x8E, 0xF6, 0x31, 0x86,
+      0x13, 0xA1, 0xC9, 0x7C, 0x92, 0x8E, 0x2B, 0x7B, 0x6A, 0x54, 0x61, 0x7B,
+      0xCC, 0xB6, 0xCD, 0xF2, 0x78, 0xAE, 0x54, 0x2B, 0x56, 0xAD, 0x7B, 0xB5,
+      0xEC, 0xD8, 0xC4, 0x6A, 0x66, 0xC4, 0xFA, 0x09, 0x50, 0xCE, 0x41, 0x35,
+      0x2C, 0xB8, 0x57, 0x11, 0x89, 0x04, 0x58, 0xF2, 0x99, 0xBF, 0x40, 0xBA,
+      0x6F, 0xF2, 0xC0, 0x71, 0x38, 0x62, 0x26, 0x8B, 0x5F, 0x08, 0xE4, 0x98,
+      0x45, 0xB0, 0x94, 0x43, 0x99, 0x7A, 0xB2, 0x9A, 0x62, 0x07, 0x3C, 0x0D,
+      0x98, 0x18, 0xC0, 0x20, 0x16, 0x7D, 0x47, 0x49, 0x23, 0x1C, 0x05, 0x9E,
+      0x6F, 0x48, 0x3F, 0x97, 0x68, 0x17, 0xC9, 0x0C, 0x20, 0xA9, 0xC9, 0x37,
+      0x07, 0x9C, 0x2D, 0x4B, 0xE3, 0x0D, 0xA9, 0x74, 0xA9, 0x7E, 0x4B, 0xC5,
+      0x3E, 0xD9, 0x6A, 0x55, 0x16, 0x9F, 0x4A, 0x23, 0xA3, 0xEA, 0x24, 0xBD,
+      0x8E, 0x01, 0xB8, 0xFA, 0xEB, 0x95, 0xD4, 0xE5, 0x3F, 0xFF, 0xEC, 0xB6,
+      0x08, 0x02, 0xC3, 0x88, 0xA4, 0x0F, 0x46, 0x60, 0x54, 0x0B, 0x1B, 0x1F,
+      0x81, 0x76, 0xC9, 0x81, 0x1B, 0xB2, 0x6A, 0x68, 0x3C, 0xA7, 0x89, 0x56,
+      0x4A, 0x29, 0x40, 0xFC, 0xEB, 0x2C, 0xE6, 0xA9, 0x2A, 0x1E, 0xE4, 0x5E,
+      0xE4, 0xC3, 0x18, 0x57, 0xC9, 0xB9, 0xB8, 0xB5, 0x6A, 0x79, 0xD9, 0x5A,
+      0x46, 0xCB, 0x39, 0x3A, 0x31, 0xA2, 0x73, 0x7B, 0xAF, 0xEA, 0x6C, 0x81,
+      0x06, 0x6A, 0x67, 0x2B, 0x34, 0xC1, 0x0A, 0xA9, 0x89, 0x57, 0xC9, 0x17,
+      0x66, 0xB7, 0x30, 0x03, 0x6A, 0x56, 0xD9, 0x40, 0xAA, 0x4E, 0xBC, 0xB7,
+      0x58, 0xB0, 0x83, 0x51, 0xE2, 0xC4, 0xFD, 0x19, 0x45, 0x3B, 0xF3, 0xA6,
+      0x29, 0x2A, 0x99, 0x3D, 0x67, 0xC7, 0xEC, 0xC7, 0x2F, 0x42, 0xF7, 0x82,
+      0xE9, 0xEB, 0xAA, 0x1A, 0x8B, 0x3B, 0x0F, 0x56, 0x7A, 0xB3, 0x94, 0x21,
+      0xF6, 0xA6, 0x7A, 0x6B, 0x84, 0x10, 0xFD, 0x94, 0xA7, 0x21, 0xD3, 0x65,
+      0xF1, 0x63, 0x9E, 0x9D, 0xDA, 0xBF, 0xD0, 0xA6, 0xCE, 0x1A, 0x46, 0x05,
+      0xBD, 0x2B, 0x1C, 0x9B, 0x97, 0x7B, 0xD1, 0xEA, 0x32, 0x86, 0x73, 0x68,
+      0xD6, 0xE6, 0x39, 0xD0, 0x19, 0xAC, 0x10, 0x18, 0x53, 0xBC, 0x15, 0x3C,
+      0x86, 0xF8, 0x52, 0x80, 0xFC, 0x76, 0x3B, 0xA2, 0x4F, 0xB5, 0x7A, 0x29,
+      0x6C, 0xB1, 0x2D, 0x32, 0xE0, 0x8A, 0xB3, 0x2C, 0x55, 0x1D, 0x5A, 0x45,
+      0xA4, 0xA2, 0x8F, 0x9A, 0xDC, 0x28, 0xF7, 0xA2, 0x90, 0x0E, 0x25, 0xA4,
+      0x0B, 0x51, 0x90, 0xB2, 0x2A, 0xB1, 0x9D, 0xFB, 0x24, 0x6F, 0x42, 0xB2,
+      0x4F, 0x97, 0xCC, 0xA9, 0xB0, 0x9B, 0xEA, 0xD2, 0x46, 0xE1, 0x73, 0x4F,
+      0x44, 0x66, 0x77, 0xB3, 0x8B, 0x75, 0x22, 0xB7, 0x80, 0x72, 0x7C, 0x11,
+      0x74, 0x40, 0xC9, 0xF1, 0xA0, 0x24, 0x52, 0x0C, 0x14, 0x1A, 0x69, 0xCD,
+      0xD2, 0xE6, 0x9A, 0x05, 0x53, 0x4A, 0x72, 0x32, 0xC5, 0xF1, 0xB7, 0x66,
+      0xE9, 0x3A, 0x5E, 0xE2, 0xEA, 0x1B, 0x26, 0xE8, 0x60, 0xA3, 0x44, 0x1A,
+      0xDE, 0xA9, 0x1E, 0xDB, 0x78, 0x2C, 0xAB, 0xC8, 0xA5, 0xD0, 0x11, 0xA2,
+      0x1B, 0xC3, 0x88, 0xE7, 0xF4, 0x86, 0xF0, 0xB7, 0x99, 0x30, 0x79, 0xAE,
+      0x3F, 0x1A, 0x7C, 0x85, 0xD2, 0x7D, 0x0F, 0x49, 0x21, 0x84, 0xD5, 0x90,
+      0x62, 0x14, 0x2B, 0x76, 0xA4, 0x37, 0x34, 0xA9, 0x0D, 0x55, 0x6A, 0x95,
+      0xDC, 0x48, 0x3D, 0xD8, 0x21, 0x04, 0xED, 0x58, 0xCA, 0x15, 0x71, 0xC3,
+      0x96, 0x85, 0x82, 0x79, 0x51, 0x43, 0x4C, 0xC1, 0x00, 0x1A, 0xA4, 0xC8,
+      0x13, 0x26, 0x1E, 0x4F, 0x93, 0x02, 0x8E, 0x14, 0xCD, 0x08, 0xF7, 0x68,
+      0xA4, 0x54, 0x31, 0x0C, 0x3B, 0x01, 0x0C, 0x83, 0xB7, 0x4D, 0x04, 0xA5,
+      0x7B, 0xB9, 0x77, 0xB3, 0xD8, 0xBC, 0xF3, 0xAA, 0xA7, 0x8C, 0xA1, 0x2B,
+      0x78, 0xF0, 0x10, 0xD9, 0x51, 0x34, 0x92, 0x8A, 0x5E, 0x5D, 0x96, 0xA0,
+      0x29, 0xB4, 0x42, 0xA4, 0x18, 0x88, 0x03, 0x8B, 0x29, 0xC2, 0xF1, 0x22,
+      0xB0, 0xB6, 0xB3, 0xAF, 0x12, 0x1A, 0xEA, 0x29, 0xA0, 0x55, 0x53, 0xBD,
+      0xF1, 0xDB, 0x60, 0x7A, 0xFB, 0x17, 0x00, 0x18, 0x60, 0xAF, 0x18, 0x23,
+      0xBC, 0xF0, 0x3D, 0xB3, 0xB4, 0x41, 0xDA, 0x16, 0x3A, 0x28, 0xC5, 0x23,
+      0xA5, 0xFB, 0x46, 0x69, 0xA6, 0x42, 0x34, 0xA4, 0xBC, 0xD1, 0x21, 0x7F,
+      0xF2, 0x63, 0x5B, 0xD9, 0x76, 0x80, 0xFF, 0x93, 0x8D, 0xBC, 0xF1, 0x0E,
+      0x95, 0x32, 0xA9, 0xA7, 0x9A, 0x5B, 0x07, 0x3A, 0x9E, 0x8D, 0xB2, 0x12,
+      0x3D, 0x21, 0x0F, 0xAE, 0xA2, 0x00, 0xB6, 0x64, 0x83, 0x8E, 0x80, 0x07,
+      0x1F, 0x2B, 0xA2, 0x54, 0xAA, 0xC8, 0x90, 0xA4, 0x6E, 0x28, 0xEC, 0x34,
+      0x2D, 0x92, 0x81, 0x2B, 0x01, 0x59, 0x30, 0x71, 0x65, 0x7E, 0x7A, 0x3A,
+      0x4A, 0x75, 0xCB, 0x3D, 0x52, 0x79, 0xCE, 0x88, 0x40, 0x5A, 0xC5, 0xAD,
+      0xAC, 0xB2, 0x05, 0x1E, 0x02, 0x2E, 0xE0, 0xAC, 0x9B, 0xBF, 0xE3, 0x2D,
+      0xEF, 0x98, 0x66, 0x7E, 0xD3, 0x47, 0xAD, 0xCB, 0x39, 0x30, 0xF3, 0xCA,
+      0xD0, 0x31, 0x39, 0x1B, 0x70, 0x9A, 0x4E, 0x61, 0xB8, 0xDD, 0x4B, 0x3F,
+      0xB7, 0x41, 0xB5, 0xBD, 0x60, 0xBF, 0x30, 0x40, 0x15, 0xEE, 0x75, 0x46,
+      0xA2, 0x4B, 0x59, 0xEA, 0xDC, 0xA1, 0x37, 0xC7, 0x12, 0x50, 0x74, 0x72,
+      0x6B, 0x76, 0x86, 0xEC, 0x55, 0x1B, 0x7B, 0xC2, 0x6B, 0xBD, 0xB2, 0x0F,
+      0xC3, 0x78, 0x35, 0x34, 0xE3, 0x4E, 0xE1, 0xF1, 0xBC, 0x6B, 0x77, 0xAB,
+      0x49, 0xA6, 0x66, 0x78, 0x46, 0x97, 0x57, 0x78, 0xC3, 0xC5, 0x36, 0x83,
+      0x04, 0x50, 0xA3, 0xFA, 0x91, 0x02, 0x59, 0x72, 0x2F, 0x3F, 0x80, 0x6E,
+      0x6E, 0xB4, 0xB9, 0x34, 0x67, 0x63, 0xFE, 0xF0, 0x92, 0x2B, 0xC4, 0xB6,
+      0xEB, 0x38, 0x26, 0xAF, 0xF2, 0x4E, 0xAD, 0xC6, 0xCF, 0x6E, 0x47, 0x7C,
+      0x2E, 0x05, 0x5C, 0xFB, 0x7A, 0x90, 0xA5, 0x5C, 0x06, 0xD0, 0xB2, 0xA2,
+      0xF5, 0x11, 0x60, 0x69, 0xE6, 0x4A, 0x5B, 0x50, 0x78, 0xC0, 0x57, 0x7B,
+      0xC8, 0xE7, 0x90, 0x0E, 0xA7, 0x1C, 0x34, 0x1C, 0x02, 0xAD, 0x85, 0x4E,
+      0xA5, 0xA0, 0x1A, 0xF2, 0xA6, 0x05, 0xCB, 0x20, 0x68, 0xD5, 0x24, 0x38,
+      0xCD, 0xDC, 0x60, 0xB0, 0x38, 0x82, 0xCC, 0x02, 0x4D, 0x13, 0x04, 0x5F,
+      0x2B, 0xA6, 0xB0, 0xF4, 0x46, 0xAA, 0xA5, 0x95, 0x87, 0x60, 0x61, 0x79,
+      0x45, 0x37, 0x1F, 0xD7, 0x8C, 0x28, 0xA4, 0x06, 0x77, 0xA6, 0xE7, 0x2F,
+      0x51, 0x3B, 0x9E, 0x06, 0x67, 0xA9, 0xBA, 0xF4, 0x46, 0xC1, 0xBA, 0x93,
+      0x1B, 0xA8, 0x18, 0x34, 0x23, 0x47, 0x92, 0xA2, 0xA2, 0xB2, 0xB3, 0x70,
+      0x1F, 0x31, 0xB7, 0xCF, 0x46, 0x7C, 0x80, 0xF1, 0x98, 0x11, 0x41, 0xBB,
+      0x45, 0x77, 0x93, 0xE1, 0x30, 0x70, 0x91, 0xC4, 0x8B, 0x59, 0x14, 0x64,
+      0x6A, 0x60, 0xCE, 0x1A, 0x30, 0x15, 0x43, 0x77, 0x9D, 0x7C, 0x33, 0x42,
+      0xAD, 0x17, 0x97, 0x96, 0xC2, 0xC4, 0x40, 0xD9, 0x9D, 0xF9, 0xD4, 0x1B,
+      0x52, 0xE3, 0x26, 0x25, 0xA8, 0x2A, 0xA5, 0xF5, 0x79, 0xA9, 0x92, 0x0B,
+      0xFF, 0xBA, 0x96, 0x4F, 0xA7, 0x0D, 0xB2, 0x59, 0xC8, 0x5E, 0x68, 0xC8,
+      0x13, 0x81, 0x7B, 0x13, 0x47, 0xBF, 0x19, 0x81, 0x4D, 0xA5, 0xE9, 0x36,
+      0x4A, 0x46, 0x45, 0xE6, 0x21, 0x92, 0x3D, 0x95, 0x5C, 0x21, 0x1A, 0x55,
+      0xD3, 0x55, 0xC8, 0x16, 0xDA, 0x04, 0x73, 0x0A, 0xA3, 0x24, 0x08, 0x5E,
+      0x62, 0x2B, 0x51, 0xD6, 0x10, 0x9B, 0x49, 0xF6, 0x73, 0xAD, 0xD0, 0x0E,
+      0x41, 0x47, 0x55, 0xC8, 0x02, 0x4A, 0xA0, 0x16, 0x4F, 0x24, 0x55, 0x6D,
+      0xED, 0x96, 0x3D, 0x61, 0x14, 0x38, 0x56, 0xCB, 0x4F, 0xF0, 0x56, 0x7E,
+      0x33, 0x20, 0x73, 0x0D, 0xBC, 0xBF, 0x12, 0xF6, 0x6E, 0x2B, 0x70, 0xB2,
+      0x00, 0x54, 0xA6, 0xDE, 0xA4, 0x26, 0x14, 0xB5, 0x0E, 0xF7, 0x2B, 0x15,
+      0x6F, 0x51, 0x49, 0xFC, 0x26, 0x3D, 0xD7, 0xE0, 0x39, 0xC5, 0x5A, 0x3E,
+      0xE9, 0x82, 0x7D, 0xF9, 0x2C, 0x56, 0x5D, 0x24, 0xC5, 0x5E, 0x0A, 0x81,
+      0xC6, 0x49, 0x46, 0x95, 0x34, 0x4D, 0x94, 0x87, 0x48, 0xAF, 0xBA, 0x9F,
+      0x76, 0x2C, 0x0E, 0xA9, 0x0B, 0xB7, 0x24, 0x89, 0x79, 0x02, 0x00, 0x07,
+      0x75, 0x61, 0x39, 0x49, 0x60, 0x2C, 0x48, 0xC7, 0x8A, 0x94, 0x40, 0x67,
+      0x8C, 0x24, 0x08, 0x6D, 0x32, 0x6D, 0x79, 0x64, 0x3B, 0xAF, 0x70, 0x36,
+      0xC6, 0x6C, 0x7E, 0x02, 0x6A, 0xAE, 0xFD, 0xA2, 0x80, 0x7A, 0x60, 0xBD,
+      0x7F, 0xC9, 0x13, 0x63, 0xBB, 0x02, 0x34, 0xA5, 0x90, 0x98, 0x4A, 0xA0,
+      0x11, 0xF1, 0x1D, 0x40, 0x26, 0x82, 0x18, 0xA1, 0x58, 0x83, 0x77, 0xB3,
+      0xD7, 0x67, 0x1B, 0x8B, 0x99, 0x78, 0x99, 0x19, 0xB8, 0x6E, 0xE8, 0x2B,
+      0x18, 0xEC, 0x22, 0xD4, 0xE8, 0x0A, 0x1F, 0x27, 0x85, 0x3D, 0x88, 0x94,
+      0x19, 0xD4, 0x60, 0xDE, 0xF7, 0x56, 0x7A, 0xA4, 0x56, 0x79, 0x69, 0xC4,
+      0x30, 0x48, 0xC3, 0x2B, 0x84, 0x62, 0xA9, 0xC9, 0x38, 0x6E, 0xB3, 0x15,
+      0x2A, 0x69, 0x76, 0xAA, 0x78, 0x3C, 0xDD, 0x1A, 0x8C, 0x57, 0xA9, 0xB6,
+      0xBB, 0xD8, 0x37, 0xA0, 0x06, 0x24, 0xB5, 0x8B, 0x4B, 0xA3, 0xDB, 0xB6,
+      0x3B, 0xB8, 0x20, 0x0E, 0x7B, 0xC8, 0x88, 0x81, 0xBE, 0xBD, 0xA9, 0x25,
+      0xBC, 0xA0, 0x28, 0xE2, 0x91, 0xAA, 0x1C, 0x22, 0x53, 0x9C, 0xD0, 0x4F,
+      0x90, 0x09, 0x0D, 0x7F, 0x74, 0x10, 0x8C, 0x32, 0xB8, 0x02, 0x2C, 0x15,
+      0x91, 0xC8, 0x81, 0xE7, 0x63, 0x04, 0xE2, 0x40, 0x81, 0x90, 0xE2, 0x0F,
+      0x09, 0xA5, 0x4F, 0xC2, 0x34, 0x20, 0xE2, 0x62, 0x0E, 0x9D, 0x87, 0xA3,
+      0x10, 0x8A, 0x94, 0xFE, 0xEA, 0x72, 0xD5, 0xAB, 0x7F, 0xCF, 0xB9, 0x72,
+      0xE6, 0x56, 0x1B, 0x1A, 0x7B, 0x06, 0x2F, 0x1A, 0x68, 0x2E, 0x02, 0x0A,
+      0xA2, 0x56, 0x28, 0x12, 0xB2, 0x96, 0x54, 0x7B, 0x91, 0x78, 0x24, 0xCD,
+      0xB8, 0x8C, 0x58, 0x2B, 0x5A, 0x68, 0x90, 0x17, 0x7B, 0xC7, 0x0C, 0x91,
+      0xAC, 0xAC, 0x9A, 0xBE, 0x29, 0x0A, 0xEB, 0x2C, 0x34, 0xA7, 0xE2, 0x36,
+      0x89, 0x55, 0xCB, 0x45, 0x6A, 0x34, 0x53, 0x68, 0xAB, 0xE3, 0xB9, 0x1B,
+      0x47, 0xFC, 0x30, 0xB0, 0x23, 0x3A, 0x09, 0xBA, 0x79, 0xFB, 0x11, 0x23,
+      0x8A, 0xC5, 0x08, 0xCC, 0xE6, 0x10, 0x95, 0xF8, 0x54, 0xC2, 0x32, 0x04,
+      0xA8, 0xD3, 0x6B, 0xFC, 0x2C, 0x6E, 0x05, 0xA7, 0x2A, 0xF5, 0x24, 0x4B,
+      0x17, 0xC1, 0x21, 0x01, 0xE0, 0x14, 0x51, 0x57, 0x0E, 0xB1, 0x10, 0x56,
+      0x7E, 0x85, 0x0E, 0x79, 0xC0, 0x00, 0x14, 0x24, 0x41, 0xFE, 0x41, 0x60,
+      0x02, 0x75, 0x45, 0xF6, 0x29, 0x0E, 0x85, 0x45, 0x1B, 0x80, 0x23, 0x4A,
+      0x94, 0x06, 0xC3, 0x90, 0xB0, 0xCE, 0xA3, 0xC8, 0x33, 0x5D, 0x4C, 0x6F,
+      0x85, 0x50, 0xB5, 0x44, 0xC9, 0x34, 0x3E, 0x61, 0xBA, 0x1C, 0x84, 0x89,
+      0xD1, 0xB0, 0x39, 0x97, 0x39, 0x16, 0x8A, 0xF7, 0x40, 0xA4, 0x81, 0xB0,
+      0xF5, 0xC3, 0x37, 0x25, 0x30, 0xCA, 0x06, 0xB5, 0x08, 0xEC, 0xE8, 0x38,
+      0xAB, 0x78, 0xBE, 0xE1, 0xE5, 0x97, 0xA9, 0xB1, 0x4F, 0x6A, 0xEC, 0x7A,
+      0x3B, 0xD1, 0xAA, 0x8D, 0x10, 0xBA, 0xC2, 0x3B, 0x98, 0x02, 0x90, 0x2C,
+      0xD5, 0x29, 0xAB, 0x6E, 0xF5, 0x4D, 0xB3, 0x11, 0x0C, 0xFB, 0x56, 0x1E,
+      0x7E, 0x69, 0x48, 0xE6, 0x52, 0x81, 0x25, 0x04, 0x16, 0xC3, 0x49, 0xC8,
+      0x10, 0x0B, 0x3B, 0x4D, 0x3D, 0x0F, 0x62, 0xAC, 0xAD, 0x8D, 0x16, 0x11,
+      0x75, 0xB1, 0x34, 0xF7, 0x56, 0x49, 0x37, 0xCD, 0xEC, 0xE9, 0xE2, 0x46,
+      0xAA, 0xD1, 0x10, 0x21, 0xA6, 0x7B, 0x20, 0xEB, 0x8F, 0x77, 0x65, 0xAC,
+      0x28, 0x23, 0xA9, 0xD1, 0x8C, 0x93, 0xEC, 0x28, 0x2D, 0x6D, 0xBC, 0x53,
+      0xCD, 0x6D, 0xF5, 0x75, 0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6,
+      0xEE, 0x86, 0xFE, 0x00, 0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34,
+      0x86, 0x0F, 0x5F, 0xF7, 0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // generate pke768 ek and dk from seed
+    uint8_t got_ek[PKE768_EK_SIZE] = { 0 },
+            got_dk[FIPS203IPD_KEM768_DK_SIZE] = { 0 };
+    fips203ipd_kem768_keygen(got_ek, got_dk, TESTS[i].seed);
+
+    // check for expected ek
+    if (memcmp(&got_ek, &(TESTS[i].exp_ek), sizeof(got_ek))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ek", TESTS[i].name);
+      fail_test(__func__, name, got_ek, sizeof(got_ek), TESTS[i].exp_ek, sizeof(got_ek));
+    }
+
+    // check for expected dk
+    if (memcmp(&got_dk, &(TESTS[i].exp_dk), sizeof(got_dk))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - dk", TESTS[i].name);
+      fail_test(__func__, name, got_dk, sizeof(got_dk), TESTS[i].exp_dk, sizeof(got_dk));
+    }
+  }
+}
+
+static void test_fips203ipd_kem768_encaps(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t ek[FIPS203IPD_KEM768_EK_SIZE]; // test encapsulation key (1184 bytes)
+    const uint8_t seed[32]; // test randomness (32 bytes)
+    const uint8_t exp_k[32]; // expected shared key (32 bytes)
+    const uint8_t exp_ct[FIPS203IPD_KEM768_CT_SIZE]; // expected ciphertext (1088 bytes)
+  } TESTS[] = {{
+    .name = "seed = 0",
+    .ek = {
+      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
+      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
+      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
+      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
+      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
+      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
+      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
+      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
+      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
+      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
+      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
+      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
+      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
+      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
+      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
+      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
+      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
+      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
+      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
+      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
+      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
+      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
+      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
+      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
+      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
+      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
+      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
+      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
+      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
+      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
+      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
+      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
+      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
+      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
+      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
+      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
+      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
+      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
+      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
+      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
+      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
+      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
+      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
+      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
+      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
+      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
+      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
+      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
+      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
+      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
+      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
+      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
+      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
+      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
+      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
+      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
+      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
+      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
+      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
+      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
+      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
+      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
+      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
+      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
+      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
+      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
+      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
+      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
+      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
+      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
+      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
+      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
+      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
+      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
+      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
+      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
+      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
+      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
+      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
+      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
+      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
+      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
+      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
+      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
+      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
+      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
+      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
+      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
+      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
+      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
+      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
+      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
+      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
+      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
+      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
+      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+    },
+    .seed = { 0 },
+
+    .exp_k = {
+      0xbd, 0xf6, 0xaf, 0x94, 0x41, 0x1a, 0x58, 0x70, 0xb7, 0xae, 0x04, 0xc4,
+      0x4d, 0xd4, 0x96, 0x71, 0x1b, 0xfc, 0xf1, 0x04, 0x25, 0xd1, 0x60, 0xc4,
+      0x31, 0xa1, 0x1a, 0xf4, 0x3a, 0x17, 0xd9, 0x66,
+    },
+
+    .exp_ct = {
+      0x48, 0xd2, 0x58, 0xe8, 0x0d, 0xfa, 0x6c, 0xa4, 0x7c, 0xba, 0xc3, 0x79,
+      0xb1, 0xb3, 0xed, 0x39, 0xba, 0xe3, 0xcf, 0x4a, 0xe8, 0xfd, 0xbe, 0x2d,
+      0xba, 0xed, 0xf0, 0xf9, 0xf6, 0x5c, 0x75, 0x54, 0x42, 0xb2, 0x0e, 0x7c,
+      0xa7, 0xd1, 0x35, 0x98, 0xe5, 0x14, 0x56, 0x45, 0xa0, 0x6d, 0x8c, 0x49,
+      0x53, 0xbd, 0xbe, 0x8a, 0x9f, 0x67, 0x69, 0xa6, 0x44, 0x12, 0x8b, 0xdf,
+      0x7c, 0x6a, 0x7f, 0x5f, 0xb2, 0x4a, 0x66, 0xf8, 0x75, 0xdd, 0x37, 0xb8,
+      0x2a, 0x67, 0xe1, 0xf8, 0x82, 0x79, 0x4e, 0xe4, 0xa6, 0xb6, 0xdb, 0x92,
+      0x38, 0xed, 0xb8, 0x94, 0x16, 0xf8, 0xea, 0xb1, 0x4f, 0x20, 0xb6, 0x83,
+      0xf2, 0x50, 0xa9, 0xc1, 0x45, 0x89, 0xb5, 0x24, 0x9a, 0x85, 0x48, 0xed,
+      0x35, 0x36, 0x8f, 0x1a, 0x74, 0x4d, 0x8f, 0x60, 0x55, 0xee, 0xc5, 0x0c,
+      0x16, 0xb0, 0x58, 0x9c, 0x98, 0x28, 0x11, 0xae, 0x0a, 0x92, 0xe0, 0xd5,
+      0x87, 0x12, 0x15, 0xe0, 0x90, 0xb5, 0x6a, 0x8f, 0xa1, 0x63, 0x49, 0x50,
+      0xee, 0x51, 0x76, 0x16, 0x71, 0xb9, 0xf9, 0xb5, 0x37, 0xbe, 0x32, 0xa0,
+      0x0f, 0xc5, 0xed, 0x4e, 0x70, 0xf2, 0x4e, 0x34, 0x63, 0x46, 0xea, 0x7b,
+      0x82, 0x59, 0x6b, 0x9b, 0x86, 0x86, 0xfe, 0x89, 0x6a, 0xd2, 0xfb, 0xef,
+      0x09, 0x67, 0x4b, 0xb5, 0xf0, 0x8c, 0xb9, 0x12, 0xdd, 0x29, 0x8c, 0x11,
+      0x30, 0x03, 0xf0, 0xec, 0x31, 0xac, 0xc4, 0x83, 0x56, 0xf1, 0x78, 0x22,
+      0x9a, 0x77, 0x54, 0xfb, 0xa4, 0x60, 0x05, 0x7b, 0xac, 0xb6, 0x18, 0x4f,
+      0x0a, 0xae, 0x3a, 0xee, 0xfa, 0xf5, 0x8a, 0x60, 0xe9, 0xe6, 0xe5, 0x07,
+      0x19, 0x01, 0xaf, 0xe1, 0xab, 0xf9, 0xc9, 0x15, 0xc0, 0x15, 0x9e, 0xe0,
+      0x67, 0x43, 0xee, 0x87, 0x0a, 0x14, 0x0a, 0x4c, 0x36, 0x8d, 0x65, 0x97,
+      0xdb, 0x6f, 0xaf, 0x89, 0x0e, 0xda, 0x2a, 0x51, 0x00, 0x2e, 0x5a, 0x3b,
+      0x91, 0x21, 0xa2, 0x68, 0x64, 0x5c, 0x01, 0xab, 0x07, 0xa7, 0x80, 0x54,
+      0x12, 0x79, 0x2a, 0x53, 0x7b, 0x1f, 0x93, 0xb9, 0x74, 0x48, 0x53, 0x0d,
+      0x1b, 0xc0, 0x2a, 0xa0, 0xde, 0xbc, 0x37, 0xb9, 0xae, 0x89, 0xa7, 0xab,
+      0x58, 0x1b, 0x24, 0x93, 0xd6, 0xad, 0x6e, 0xbb, 0x2e, 0x7c, 0xb9, 0x0b,
+      0x3e, 0x10, 0x10, 0x6f, 0xb4, 0x0d, 0xdf, 0xd0, 0xd3, 0xc4, 0x10, 0xe7,
+      0x67, 0x9e, 0x05, 0x3a, 0x08, 0x06, 0xed, 0x44, 0x4c, 0x24, 0xcd, 0xd4,
+      0xc3, 0x4b, 0xe5, 0x12, 0x97, 0x7f, 0x1b, 0x8c, 0x25, 0x63, 0x6c, 0x45,
+      0x4f, 0x6f, 0xd2, 0x1f, 0xa9, 0xd9, 0x7e, 0xdf, 0xd5, 0xfd, 0x2b, 0xc3,
+      0x76, 0xe9, 0xae, 0x32, 0xce, 0xfc, 0x39, 0x08, 0xea, 0xef, 0xb9, 0x4d,
+      0xca, 0x32, 0x59, 0xb5, 0xeb, 0xd1, 0xa9, 0x01, 0x59, 0x5b, 0x7c, 0xaf,
+      0x39, 0x6b, 0xb5, 0x19, 0x09, 0x54, 0x90, 0x23, 0x7d, 0x07, 0x44, 0x30,
+      0x39, 0x2d, 0x8d, 0xf0, 0x63, 0xd0, 0x93, 0xa7, 0xbc, 0x9c, 0x5d, 0x05,
+      0x59, 0x23, 0x91, 0x2d, 0xd2, 0x21, 0x27, 0x2d, 0xa6, 0xe6, 0x35, 0x88,
+      0x39, 0xf3, 0xde, 0x3c, 0x5d, 0x3c, 0x87, 0x0e, 0x7c, 0xc8, 0xa5, 0xe3,
+      0xd9, 0xcb, 0x82, 0x0f, 0x3d, 0xca, 0x41, 0x05, 0xf9, 0x1b, 0xa7, 0xb3,
+      0x66, 0xf1, 0x18, 0xe7, 0x9c, 0x1c, 0x53, 0x57, 0x30, 0x91, 0xe7, 0xdf,
+      0x3e, 0x8e, 0x70, 0xe7, 0xf1, 0xb3, 0x7a, 0x39, 0x55, 0xe8, 0x1e, 0xfa,
+      0x99, 0x7f, 0xde, 0x22, 0x6a, 0x7c, 0xf6, 0x73, 0x9b, 0x8f, 0x4d, 0x6e,
+      0x92, 0xdd, 0x2e, 0x1a, 0xe9, 0x69, 0xc9, 0xd5, 0xa9, 0x89, 0x51, 0x8e,
+      0x80, 0x5a, 0xc5, 0xf9, 0x74, 0x33, 0x51, 0x5c, 0xd2, 0xba, 0xcf, 0x24,
+      0x49, 0xf1, 0xdc, 0x64, 0xc5, 0xa5, 0xdc, 0xf0, 0x07, 0xc4, 0x10, 0x90,
+      0x39, 0x25, 0x1f, 0xea, 0x96, 0xaf, 0xec, 0xf3, 0x75, 0xe0, 0x66, 0x33,
+      0x2f, 0x0d, 0x90, 0x3e, 0xbb, 0xd9, 0xad, 0x00, 0x55, 0xe0, 0x77, 0xef,
+      0x41, 0x4d, 0xb1, 0x72, 0xa2, 0xdd, 0x33, 0x63, 0x92, 0x36, 0xbe, 0x47,
+      0xfd, 0xfe, 0xfb, 0x9b, 0x71, 0x2b, 0xbd, 0xf5, 0x06, 0xdd, 0x87, 0x10,
+      0xf1, 0xd7, 0x58, 0xc1, 0xfd, 0x58, 0xbe, 0x04, 0x3f, 0x2b, 0x7d, 0x84,
+      0xd8, 0x61, 0x89, 0x0b, 0x56, 0xf7, 0xd5, 0x1a, 0x95, 0xff, 0xee, 0x52,
+      0x35, 0xf8, 0x33, 0xfb, 0xc9, 0xe2, 0x26, 0x70, 0x76, 0xc2, 0x49, 0x38,
+      0x22, 0x4f, 0x58, 0xb6, 0x8c, 0x78, 0xf6, 0x40, 0x08, 0x4d, 0x99, 0xe0,
+      0x75, 0xf2, 0x35, 0xa3, 0xf0, 0x60, 0x35, 0xda, 0x1e, 0xbb, 0xee, 0x44,
+      0xae, 0x65, 0x2b, 0xa0, 0x82, 0x65, 0x3c, 0x38, 0x79, 0x28, 0x37, 0x03,
+      0xfe, 0x43, 0x22, 0x27, 0xd8, 0x83, 0xa7, 0x96, 0x6f, 0xff, 0x62, 0xd0,
+      0x8f, 0x46, 0x4f, 0xf2, 0x17, 0x97, 0xfd, 0x7c, 0x7e, 0x69, 0x6a, 0xf7,
+      0x2c, 0x2f, 0xe2, 0x64, 0xa4, 0x95, 0xf3, 0x30, 0x27, 0x4d, 0x4e, 0x04,
+      0xe1, 0x06, 0xca, 0xe7, 0x5e, 0x60, 0xf1, 0x0f, 0x8e, 0x6e, 0xb2, 0xb8,
+      0x9e, 0x0f, 0xfd, 0xb4, 0x62, 0xdd, 0x82, 0xcc, 0x1d, 0x69, 0x67, 0xff,
+      0xb8, 0x40, 0x46, 0x81, 0xde, 0xac, 0x99, 0xec, 0xa3, 0x23, 0x67, 0xd7,
+      0x12, 0x7a, 0xcc, 0x55, 0x9f, 0x2c, 0x1b, 0xd8, 0x27, 0x56, 0x6f, 0xc1,
+      0x4e, 0x68, 0x62, 0x2a, 0xf1, 0xf9, 0x4c, 0x1d, 0x9e, 0x11, 0x05, 0x1d,
+      0xbc, 0x0e, 0xe5, 0x63, 0x63, 0x3c, 0x8f, 0x84, 0x61, 0x65, 0xc3, 0xa1,
+      0x42, 0x04, 0x16, 0x2a, 0x05, 0x61, 0xe1, 0xc8, 0xf6, 0x14, 0x3c, 0x64,
+      0x64, 0xd8, 0xbd, 0x46, 0x57, 0xbd, 0xdd, 0x1b, 0x22, 0x40, 0x59, 0x19,
+      0xb5, 0x06, 0x18, 0x99, 0x37, 0xb9, 0xa0, 0x68, 0x6a, 0x1e, 0xcd, 0xd3,
+      0xb0, 0x41, 0xb9, 0x09, 0x18, 0x44, 0xe1, 0x93, 0x2d, 0x87, 0xa0, 0xca,
+      0x02, 0x0f, 0xc1, 0xb9, 0x74, 0xcf, 0x5a, 0xd0, 0x76, 0x1d, 0xe5, 0x64,
+      0x10, 0xdf, 0x0d, 0xf5, 0x1d, 0x82, 0x0f, 0x28, 0x02, 0x44, 0x87, 0x54,
+      0x6f, 0x04, 0x68, 0x49, 0x06, 0xbd, 0xd7, 0x0c, 0xd9, 0x3b, 0xa2, 0x17,
+      0x1f, 0x3e, 0x82, 0x54, 0xc5, 0x7a, 0xc9, 0x29, 0xcd, 0x9a, 0xb1, 0x12,
+      0x58, 0xb0, 0xbb, 0x24, 0x3c, 0xe4, 0x34, 0xfa, 0x0a, 0xdf, 0x6e, 0xa7,
+      0xe0, 0x98, 0x06, 0xd5, 0xf1, 0x2b, 0x1d, 0xae, 0x60, 0xe0, 0xc0, 0x95,
+      0xa0, 0xf2, 0xda, 0x2b, 0xb7, 0xf8, 0xf1, 0x87, 0x81, 0x0e, 0x05, 0x41,
+      0x7d, 0x2b, 0x91, 0xab, 0x8c, 0x7a, 0xf2, 0x96, 0x32, 0x28, 0x8c, 0x2b,
+      0x63, 0x20, 0x74, 0x24, 0x83, 0xb5, 0x45, 0x19, 0xea, 0xa7, 0x10, 0x43,
+      0xde, 0x93, 0xd5, 0x54, 0xf5, 0x41, 0x94, 0x84, 0x02, 0xa6, 0xb8, 0x21,
+      0x0d, 0x88, 0xa9, 0x68, 0x65, 0xb6, 0xb2, 0x02, 0x8e, 0x9a, 0x11, 0x4b,
+      0x37, 0x85, 0x4d, 0x22, 0x71, 0xdb, 0xf6, 0x03, 0xea, 0xef, 0xd2, 0xe2,
+      0x8f, 0x96, 0x0a, 0x4e, 0xdc, 0xd9, 0xe1, 0x72, 0x9b, 0x21, 0x19, 0x01,
+      0xa5, 0xce, 0x58, 0x16, 0x0f, 0x19, 0x26, 0xa7, 0xcd, 0x71, 0x5f, 0x51,
+      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
+      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
+      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
+      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
+      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
+      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
+      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
+      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
+      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
+      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
+      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
+    },
+  }, {
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Encapsulation -- ML-KEM-768",
+    .ek = {
+      0x14, 0x56, 0xA2, 0xEE, 0x8C, 0x35, 0x56, 0x05, 0x4A, 0xBC, 0x79, 0xB4,
+      0x88, 0x2C, 0x31, 0x90, 0xE5, 0xCA, 0x72, 0x6A, 0xB4, 0x02, 0xE5, 0xB0,
+      0x97, 0x28, 0xC0, 0xF4, 0xF7, 0x9C, 0x9F, 0xC2, 0xAD, 0xD8, 0x28, 0xAB,
+      0xE4, 0x32, 0xB1, 0x50, 0x1B, 0x60, 0xF4, 0x6C, 0xCB, 0xC8, 0x6A, 0x33,
+      0x78, 0xC3, 0x48, 0x95, 0x70, 0x8A, 0x13, 0x67, 0x1B, 0x20, 0xB3, 0x89,
+      0x47, 0x9A, 0xAA, 0x01, 0xC6, 0x9D, 0x6B, 0x3B, 0x7D, 0x07, 0xD1, 0xC3,
+      0xAB, 0x54, 0xB9, 0x1C, 0x58, 0x0F, 0x5A, 0x33, 0x6B, 0x30, 0x06, 0x9A,
+      0x4F, 0x13, 0x4F, 0xFD, 0x37, 0x64, 0xCE, 0x73, 0xA0, 0x47, 0xE2, 0x84,
+      0x47, 0x71, 0x74, 0x2B, 0xF4, 0x71, 0x0B, 0x97, 0x2D, 0x4F, 0x65, 0x90,
+      0xA1, 0xC5, 0x3A, 0x97, 0x53, 0x68, 0xC2, 0x71, 0xB6, 0x70, 0xF1, 0xA4,
+      0x03, 0x64, 0x41, 0x05, 0x4A, 0x66, 0xE8, 0x81, 0x59, 0x97, 0x51, 0x22,
+      0x88, 0x55, 0x2F, 0xD7, 0x14, 0x9F, 0xFB, 0x70, 0x5A, 0xAE, 0x13, 0x3F,
+      0x84, 0x14, 0x06, 0x0D, 0x00, 0x92, 0xFA, 0x8A, 0x16, 0x27, 0xD7, 0x8A,
+      0xB2, 0xAB, 0xC6, 0x69, 0x62, 0x88, 0xBA, 0xF5, 0xC6, 0x0E, 0xF3, 0x70,
+      0x82, 0x7A, 0x7E, 0xFA, 0x72, 0xAE, 0x5C, 0x67, 0x41, 0xA5, 0xDA, 0x04,
+      0x3D, 0x59, 0x40, 0xF1, 0x21, 0x48, 0x53, 0x72, 0xA9, 0x8F, 0x47, 0x2D,
+      0x60, 0xF0, 0x5F, 0x74, 0xD9, 0x5F, 0x01, 0xA1, 0x99, 0x1E, 0x73, 0xA3,
+      0xE0, 0xA9, 0x53, 0x64, 0x67, 0xA4, 0x73, 0x8A, 0xB4, 0xCF, 0x38, 0x5B,
+      0xA7, 0x72, 0x82, 0x7E, 0xB8, 0xCC, 0x05, 0x8B, 0x35, 0x72, 0xE4, 0x0B,
+      0x59, 0x84, 0x44, 0xC1, 0x81, 0xC7, 0xF6, 0xD9, 0xB7, 0x60, 0xA7, 0xB9,
+      0x07, 0x09, 0x2E, 0x9C, 0x33, 0x51, 0xEA, 0x23, 0x4E, 0x44, 0x49, 0xBD,
+      0x9B, 0x61, 0xA1, 0x34, 0x65, 0x4E, 0x2D, 0xA1, 0x91, 0xFF, 0x07, 0x93,
+      0x96, 0x15, 0x69, 0xD3, 0x59, 0x44, 0x48, 0xBB, 0xC2, 0x58, 0x69, 0x99,
+      0xA6, 0x67, 0x1E, 0xFC, 0xA9, 0x57, 0xF3, 0xA6, 0x69, 0x9A, 0x4A, 0x1B,
+      0x2F, 0x47, 0x07, 0xAB, 0xA0, 0xB2, 0xDB, 0x20, 0x11, 0x4F, 0xE6, 0x8A,
+      0x4E, 0x28, 0x15, 0xAF, 0x3A, 0xAC, 0x4B, 0x8C, 0x6B, 0xE5, 0x64, 0x8C,
+      0x50, 0xCC, 0x35, 0xC2, 0x7C, 0x57, 0x28, 0x80, 0x28, 0xD3, 0x61, 0x70,
+      0x8D, 0x30, 0x2E, 0xEB, 0xB8, 0x60, 0xBE, 0xE6, 0x91, 0xF6, 0x56, 0xA2,
+      0x55, 0x0C, 0xB3, 0x21, 0xE9, 0x29, 0x3D, 0x75, 0x16, 0xC5, 0x99, 0x81,
+      0x7B, 0x76, 0x6B, 0xA9, 0x28, 0xB1, 0x08, 0x77, 0x9A, 0x1C, 0x87, 0x12,
+      0xE7, 0x4C, 0x76, 0x84, 0x1A, 0xC5, 0x8B, 0x8C, 0x51, 0x5B, 0xF4, 0x74,
+      0x9B, 0xF7, 0x15, 0x98, 0x44, 0x45, 0xB2, 0xB5, 0x30, 0x63, 0x38, 0x40,
+      0x01, 0xE5, 0x5F, 0x68, 0x86, 0x7B, 0x1A, 0xF4, 0x6C, 0xA7, 0x0C, 0xA8,
+      0xEA, 0x74, 0x17, 0x2D, 0xB8, 0x0B, 0x52, 0x18, 0xBD, 0xE4, 0xF0, 0x0A,
+      0x0E, 0x65, 0x8D, 0xB5, 0xA1, 0x8D, 0x94, 0xE1, 0x42, 0x7A, 0xF7, 0xAE,
+      0x35, 0x8C, 0xCE, 0xB2, 0x38, 0x77, 0x2F, 0xCC, 0x83, 0xF1, 0x08, 0x28,
+      0xA4, 0xA3, 0x67, 0xD4, 0x2C, 0x4C, 0xB6, 0x93, 0x3F, 0xDD, 0x1C, 0x1C,
+      0x7B, 0x86, 0xAD, 0x8B, 0x00, 0x96, 0x57, 0xA9, 0x62, 0x22, 0xD7, 0xBA,
+      0x92, 0xF5, 0x27, 0xAF, 0x87, 0x79, 0x70, 0xA8, 0x32, 0x47, 0xF4, 0x7A,
+      0x23, 0xFC, 0x22, 0x85, 0x11, 0x8B, 0x57, 0x71, 0x77, 0x15, 0x20, 0x46,
+      0x74, 0xDA, 0x9C, 0x94, 0xB6, 0x2B, 0xC7, 0x83, 0x8C, 0xF8, 0x72, 0x00,
+      0x15, 0x6B, 0x26, 0xBA, 0x46, 0x71, 0x15, 0x99, 0x31, 0xC4, 0x93, 0x22,
+      0xD8, 0x06, 0x71, 0xA0, 0xF3, 0x32, 0xEA, 0xA2, 0xBB, 0xF8, 0x93, 0xBE,
+      0x40, 0x8B, 0x9E, 0xAC, 0x6A, 0x50, 0x54, 0x83, 0xAA, 0x90, 0x75, 0xBD,
+      0x13, 0x68, 0xB5, 0x1F, 0x99, 0x21, 0x1F, 0x48, 0x0A, 0x9C, 0x54, 0x2A,
+      0x75, 0xB5, 0xBE, 0x08, 0xE4, 0x3A, 0xDA, 0xF3, 0x01, 0xDD, 0x72, 0x9A,
+      0x85, 0x95, 0x40, 0x10, 0xE6, 0x48, 0x92, 0xA2, 0xAA, 0x4F, 0x15, 0xC0,
+      0xBD, 0x70, 0xB3, 0xD8, 0x56, 0x49, 0x4F, 0xF9, 0xBA, 0x0F, 0xE4, 0xCE,
+      0x12, 0x99, 0x1C, 0xA0, 0x6B, 0x5E, 0x3D, 0x0B, 0x2A, 0xF1, 0xF7, 0x97,
+      0xB7, 0xA2, 0xB7, 0x60, 0x91, 0x0A, 0xE9, 0xF8, 0x33, 0xD0, 0xD4, 0x26,
+      0x7A, 0x58, 0x05, 0x2C, 0x29, 0x90, 0xF1, 0x61, 0xB8, 0x86, 0xE2, 0x51,
+      0x71, 0x1C, 0x09, 0xD0, 0x85, 0xC3, 0xD9, 0x58, 0xB1, 0x44, 0x19, 0x2C,
+      0x9C, 0xC3, 0x22, 0x4A, 0x46, 0x07, 0x15, 0xB6, 0x78, 0x4E, 0xB0, 0xB2,
+      0x6F, 0x23, 0x71, 0x87, 0x50, 0x7D, 0x85, 0xC5, 0x11, 0x0A, 0xCC, 0x71,
+      0xCE, 0x47, 0x19, 0x8F, 0x25, 0x45, 0x53, 0x35, 0x6D, 0xAB, 0x44, 0x8C,
+      0x38, 0xD2, 0x43, 0xA7, 0xC0, 0x2B, 0xE4, 0x0C, 0x90, 0x8C, 0x82, 0x8D,
+      0x05, 0xC0, 0x81, 0xDF, 0xAB, 0x8F, 0xC6, 0xB5, 0xCF, 0xE7, 0xD5, 0x6E,
+      0x73, 0x17, 0x15, 0x7D, 0xC0, 0x53, 0xB2, 0xB3, 0x48, 0x99, 0x86, 0xB0,
+      0x81, 0x28, 0x88, 0x71, 0x81, 0x85, 0x85, 0xE0, 0x99, 0x31, 0x09, 0x5E,
+      0x32, 0x74, 0xA0, 0x84, 0x11, 0x5B, 0xE2, 0x76, 0x43, 0x82, 0x54, 0xA7,
+      0x96, 0x27, 0x0A, 0x7B, 0x43, 0x06, 0xF0, 0x8B, 0x98, 0xD9, 0xC2, 0xAA,
+      0xEC, 0xF7, 0x06, 0x5E, 0x74, 0x44, 0x6B, 0x7C, 0x69, 0x6D, 0xBA, 0xAF,
+      0x8B, 0x46, 0x25, 0xA1, 0x0B, 0x07, 0x82, 0x7B, 0x4A, 0x8B, 0xAB, 0xAB,
+      0x09, 0xB6, 0x4A, 0xE1, 0xC3, 0x75, 0xBB, 0x78, 0x54, 0x41, 0xF3, 0x19,
+      0xFB, 0x9A, 0xC2, 0xF1, 0x4C, 0x95, 0xFF, 0xB2, 0x52, 0xAB, 0xBB, 0x80,
+      0x9C, 0x69, 0x09, 0xCD, 0x97, 0x70, 0x6E, 0x40, 0x69, 0x1C, 0xBA, 0x61,
+      0xC9, 0x25, 0x2B, 0xD3, 0x8A, 0x04, 0x31, 0x1C, 0xA5, 0xBB, 0x2C, 0xA7,
+      0x95, 0x78, 0x34, 0x75, 0x05, 0xD0, 0x88, 0x88, 0x51, 0xE0, 0x82, 0x64,
+      0x8B, 0xD0, 0x03, 0xBE, 0x97, 0xC0, 0xF8, 0xF6, 0x67, 0x59, 0xEC, 0x96,
+      0xA9, 0x6A, 0x08, 0x1C, 0x68, 0x22, 0xC4, 0x51, 0x05, 0x59, 0x53, 0x70,
+      0x42, 0xFC, 0x15, 0xF0, 0x69, 0xA6, 0x49, 0xB7, 0x4A, 0x10, 0x96, 0x1B,
+      0x35, 0x4A, 0x1F, 0x62, 0x5B, 0x04, 0xE2, 0x5B, 0x29, 0x3C, 0xF6, 0x5F,
+      0xB4, 0xF5, 0x3A, 0x80, 0xCC, 0x73, 0x3D, 0x7A, 0x17, 0x57, 0x75, 0xBF,
+      0x8A, 0x9A, 0xBB, 0x92, 0x01, 0x62, 0x0E, 0x83, 0xA7, 0xF3, 0xE7, 0x24,
+      0xD1, 0x28, 0x7D, 0xBC, 0x44, 0xBD, 0xD5, 0xD8, 0x5F, 0xC7, 0x15, 0x45,
+      0xA9, 0x27, 0xBE, 0xED, 0xE5, 0x37, 0xA7, 0x76, 0x87, 0x35, 0xCC, 0x14,
+      0x86, 0xC7, 0xC3, 0xF3, 0x11, 0x04, 0xDB, 0x67, 0x34, 0x3F, 0x43, 0x5D,
+      0x2D, 0x45, 0x55, 0x4B, 0xAA, 0xC9, 0xCD, 0xB5, 0x82, 0x2E, 0x84, 0x22,
+      0xAE, 0x83, 0x21, 0xC7, 0x8A, 0xBE, 0x9F, 0x26, 0x1F, 0xD4, 0x81, 0x0A,
+      0x79, 0xE3, 0x3E, 0x94, 0xE6, 0x3B, 0x33, 0x41, 0x87, 0x2C, 0x92, 0x25,
+      0x35, 0x21, 0x99, 0x7C, 0x08, 0x4F, 0xBC, 0x06, 0x0B, 0x8B, 0x12, 0x5C,
+      0xCC, 0x88, 0xAC, 0x85, 0xAC, 0x5F, 0xE3, 0x16, 0x8A, 0xCB, 0x05, 0x9B,
+      0x3F, 0x11, 0x9C, 0x4E, 0x05, 0x0A, 0x20, 0x73, 0x2F, 0x50, 0x1B, 0xB9,
+      0xB3, 0xE6, 0x87, 0xC8, 0x46, 0xB5, 0xC2, 0x65, 0x3F, 0x88, 0x86, 0x37,
+      0x3E, 0x10, 0x04, 0xA2, 0xAB, 0x8D, 0x1B, 0xB9, 0x70, 0xA7, 0xE5, 0x71,
+      0xD8, 0xA4, 0x6E, 0xE8, 0x1B, 0x78, 0x2F, 0x26, 0x94, 0x2D, 0xD3, 0x94,
+      0xFD, 0xD9, 0xA5, 0xE4, 0xC5, 0x63, 0x1D, 0x98, 0x55, 0x28, 0x60, 0x4B,
+      0x1C, 0xC9, 0x76, 0x27, 0x5B, 0x6A, 0xC8, 0xA6, 0x7C, 0xEE, 0xC1, 0x0F,
+      0xFA, 0xCB, 0xBA, 0x3D, 0x3B, 0xB1, 0x41, 0x32, 0x1D, 0xFC, 0x3C, 0x92,
+      0x31, 0xFC, 0x96, 0xE4, 0x48, 0xB9, 0xAB, 0x84, 0x70, 0x21, 0xE2, 0xC8,
+      0xD9, 0x0C, 0x6B, 0xCA, 0xF2, 0xB1, 0x24, 0x07, 0x83, 0xB6, 0x2C, 0x79,
+      0xDE, 0xDC, 0x07, 0x2A, 0x57, 0x63, 0xE6, 0x60, 0xAF, 0x2C, 0x27, 0xC3,
+      0xF0, 0xC3, 0xC0, 0x92, 0x07, 0xCA, 0xD9, 0x90, 0xBB, 0x41, 0xA7, 0xBF,
+      0xCE, 0xC9, 0x9F, 0x51, 0x59, 0x6A, 0x0E, 0x83, 0x77, 0x8F, 0x85, 0xC0,
+      0x06, 0xAC, 0x6D, 0x1F, 0xE9, 0x81, 0xB4, 0xC4, 0xBA, 0x1C, 0xB5, 0x75,
+      0xA7, 0xD0, 0x7A, 0xE2, 0xD3, 0x1B, 0xA7, 0x60, 0x09, 0x5F, 0x74, 0xBC,
+      0x16, 0x38, 0x41, 0xCF, 0x8F, 0xF7, 0x7F, 0x89, 0x4A, 0xBC, 0x6D, 0x26,
+      0x1E, 0xD8, 0x7A, 0x45, 0x30, 0x36, 0x3B, 0x94, 0x9C, 0x4A, 0xD2, 0x4E,
+      0xFB, 0x3A, 0x56, 0x80, 0x94, 0x78, 0xDD, 0xA2,
+    },
+
+    .seed = {
+      0x40, 0xBE, 0x9D, 0xCA, 0xC1, 0x6E, 0x9C, 0xA7, 0x3D, 0x49, 0xD0, 0xC8,
+      0x3F, 0x9D, 0x3D, 0x89, 0xBB, 0x71, 0x57, 0x4A, 0x42, 0x19, 0xA0, 0xF3,
+      0x93, 0xDF, 0xEC, 0xE2, 0x98, 0x83, 0x94, 0xC4,
+    },
+
+    .exp_k = {
+      0x61, 0x6E, 0x0B, 0x75, 0x3A, 0x3B, 0x7F, 0x40, 0xFE, 0xF9, 0xA3, 0x89,
+      0xF5, 0x8F, 0x16, 0xBF, 0xBB, 0x04, 0x62, 0x29, 0x41, 0xD2, 0x46, 0x4B,
+      0xDA, 0xE7, 0x67, 0x82, 0x0D, 0xFA, 0xC3, 0x8E,
+    },
+
+    .exp_ct = {
+      0x77, 0x8D, 0x6B, 0x03, 0x79, 0x1A, 0xCA, 0xF5, 0x6C, 0xAA, 0xFC, 0xC7,
+      0x8C, 0xEE, 0x5C, 0xBC, 0xA1, 0xDE, 0x87, 0x37, 0xE9, 0xC7, 0xFF, 0x4A,
+      0xE5, 0xF3, 0x84, 0xD3, 0x44, 0xE0, 0x82, 0x23, 0xC7, 0x4C, 0x82, 0x4C,
+      0xB5, 0x84, 0x85, 0x20, 0x51, 0x7C, 0x7F, 0x0E, 0xA0, 0x64, 0x5E, 0xB6,
+      0xF8, 0x89, 0x51, 0x7A, 0xE5, 0x21, 0x6B, 0x0C, 0xF4, 0x1D, 0xDC, 0x3F,
+      0x0D, 0x1D, 0xF9, 0xBC, 0x6E, 0x4D, 0xEC, 0xB2, 0x36, 0xA5, 0xEA, 0x8B,
+      0x21, 0x4F, 0x64, 0x26, 0x6D, 0x3C, 0xDE, 0x08, 0xE0, 0xCB, 0x00, 0xE5,
+      0xD9, 0x1F, 0x58, 0x67, 0x06, 0xB1, 0xEE, 0x53, 0x3D, 0x20, 0x47, 0x6F,
+      0x44, 0x23, 0xB7, 0x8F, 0x91, 0x6B, 0x17, 0x26, 0xEE, 0xEA, 0x95, 0x9F,
+      0xFB, 0x9A, 0xC6, 0x34, 0xD0, 0x4A, 0x94, 0xD0, 0x99, 0x23, 0xCB, 0x0D,
+      0x4E, 0x73, 0x0C, 0xCA, 0x41, 0x44, 0xE7, 0xC4, 0x88, 0x49, 0x21, 0x65,
+      0x2D, 0xA4, 0x92, 0x8C, 0x68, 0xE6, 0x44, 0xF6, 0x73, 0xCF, 0xC5, 0x7D,
+      0x3E, 0x87, 0xCF, 0x5B, 0xE5, 0x81, 0xA8, 0x9F, 0x9C, 0xB8, 0xF0, 0xFC,
+      0xE2, 0x78, 0x2D, 0x68, 0x1E, 0x5C, 0xE8, 0x8A, 0xF5, 0x84, 0x58, 0xC3,
+      0xD6, 0x3D, 0x80, 0x75, 0x72, 0xDE, 0x5A, 0xA8, 0xE1, 0xFA, 0xF2, 0xDC,
+      0xD1, 0x4E, 0xDB, 0x73, 0x49, 0x56, 0x5B, 0x7D, 0x32, 0x71, 0xDD, 0xBE,
+      0xB0, 0xB6, 0xCC, 0x7A, 0xFE, 0x08, 0x63, 0x57, 0x84, 0x31, 0x11, 0x59,
+      0x73, 0x3C, 0x46, 0xE5, 0xFD, 0xC5, 0xE0, 0xCD, 0x36, 0xCE, 0x56, 0x85,
+      0xAC, 0xFB, 0x1A, 0xFE, 0x50, 0xAB, 0xB4, 0x6F, 0x44, 0x75, 0x21, 0xE6,
+      0x0D, 0x9C, 0x8F, 0x0E, 0x4C, 0xA2, 0x8C, 0x19, 0x0A, 0xBB, 0x40, 0xC3,
+      0x65, 0xF4, 0x12, 0x47, 0x1E, 0x95, 0xA8, 0xEA, 0x39, 0x6D, 0x4B, 0xD8,
+      0x07, 0x0E, 0xEB, 0x1F, 0x02, 0xB0, 0x7C, 0x82, 0x53, 0x67, 0xAA, 0x1E,
+      0xC0, 0xF1, 0x0C, 0x38, 0x62, 0x41, 0x6B, 0xB2, 0x1A, 0xD6, 0xCA, 0x74,
+      0x8A, 0x86, 0xE9, 0x82, 0x9E, 0xFC, 0x1A, 0x04, 0x99, 0x09, 0x3C, 0x85,
+      0x17, 0x6D, 0x37, 0xF5, 0x74, 0xC7, 0x5C, 0xF5, 0xED, 0xFA, 0x8D, 0x92,
+      0x0D, 0x32, 0x68, 0xCB, 0x34, 0xC6, 0xA4, 0xBB, 0x00, 0x02, 0x86, 0x9B,
+      0xC0, 0x5D, 0x7C, 0x8F, 0xCC, 0x06, 0x58, 0xD4, 0xA0, 0x1E, 0xAC, 0xD7,
+      0x45, 0x57, 0xA3, 0x7D, 0x98, 0xA7, 0x63, 0x07, 0x47, 0x52, 0xDF, 0xDD,
+      0x64, 0x29, 0x88, 0x1C, 0xAF, 0xF5, 0x77, 0xD3, 0xA0, 0x48, 0x03, 0x1B,
+      0xD5, 0x2C, 0x4E, 0x97, 0x26, 0x39, 0x85, 0x90, 0xF9, 0x51, 0x9F, 0xD5,
+      0x94, 0x05, 0xD6, 0xB3, 0xC3, 0x07, 0xAF, 0xCB, 0x16, 0x8A, 0x98, 0x57,
+      0x85, 0xD9, 0x54, 0xA6, 0xD1, 0xDC, 0x1E, 0xA9, 0x2E, 0x1E, 0xB6, 0xF9,
+      0x46, 0xA4, 0xD9, 0x9D, 0xD6, 0xCA, 0x30, 0x7A, 0xBF, 0xD8, 0x36, 0x2F,
+      0xAB, 0xA9, 0x8B, 0xB2, 0x64, 0xC6, 0x9C, 0x5F, 0x55, 0x5D, 0x60, 0x88,
+      0x3C, 0xC5, 0x60, 0x19, 0xFE, 0xB4, 0xE8, 0x00, 0x0C, 0x48, 0xB7, 0xE6,
+      0x8C, 0xD6, 0x67, 0xF0, 0x0B, 0x52, 0x50, 0xCE, 0xF2, 0x93, 0xA4, 0xA9,
+      0xE7, 0x78, 0x72, 0x6E, 0x62, 0xF1, 0x20, 0x36, 0x1E, 0x21, 0xAB, 0x31,
+      0x40, 0x46, 0x4C, 0xDC, 0x6A, 0xBD, 0xE9, 0xEA, 0x05, 0x19, 0x8D, 0x8B,
+      0x3B, 0xB6, 0x71, 0xB9, 0x11, 0x1A, 0x2F, 0x31, 0x75, 0x82, 0x84, 0x7C,
+      0xA5, 0x01, 0x56, 0x64, 0xF2, 0x2C, 0xDB, 0x08, 0xC1, 0x43, 0x18, 0x7B,
+      0xDE, 0x21, 0x29, 0xB5, 0x4F, 0x34, 0x16, 0x02, 0x95, 0xD7, 0x5F, 0xE9,
+      0xA4, 0x94, 0xFD, 0x7E, 0x67, 0xAA, 0xA7, 0x6B, 0x57, 0xAA, 0xFF, 0xD8,
+      0x9D, 0x01, 0xA7, 0x1D, 0xF5, 0xC8, 0x15, 0x86, 0x20, 0x29, 0x8D, 0x58,
+      0x2B, 0xBE, 0xFA, 0x6D, 0x09, 0xAC, 0x41, 0x2A, 0x99, 0xAA, 0x3B, 0xE9,
+      0xC3, 0x83, 0x50, 0x49, 0x48, 0xC4, 0x3D, 0xD5, 0xAF, 0x41, 0x27, 0xB1,
+      0x43, 0x58, 0x04, 0xF4, 0x4B, 0xAF, 0xA1, 0x42, 0xBF, 0xC2, 0xA9, 0x5D,
+      0x95, 0xFB, 0x2E, 0xF0, 0x64, 0x1A, 0xBE, 0x71, 0x06, 0x4D, 0xE5, 0x1D,
+      0x6B, 0x9E, 0xC5, 0x08, 0x57, 0xB8, 0xEE, 0xF7, 0xF4, 0x80, 0x36, 0x31,
+      0x3D, 0x0E, 0x93, 0x67, 0x63, 0xB8, 0xF7, 0xBD, 0xE6, 0x9B, 0x06, 0x4D,
+      0xD5, 0x76, 0x1D, 0x80, 0xEA, 0x6F, 0x1A, 0x8B, 0x37, 0x56, 0x57, 0x53,
+      0xC5, 0x79, 0xBB, 0xB8, 0x95, 0xEF, 0xB9, 0xFC, 0xB3, 0xFC, 0x5F, 0xA3,
+      0x36, 0x2E, 0x37, 0x74, 0xF0, 0xF7, 0x71, 0x40, 0xB9, 0x73, 0xCA, 0xE5,
+      0x87, 0xBA, 0xD2, 0xF3, 0xB5, 0x66, 0xA9, 0xC2, 0x5A, 0x96, 0x93, 0x47,
+      0xE5, 0xC5, 0x4F, 0x87, 0xF1, 0x10, 0x5E, 0x9C, 0x07, 0x48, 0x67, 0xD9,
+      0x40, 0x77, 0xCC, 0xAE, 0x3A, 0xBE, 0xA5, 0x45, 0x20, 0xED, 0xB5, 0x1D,
+      0x9D, 0xAA, 0xBE, 0x78, 0x48, 0xE7, 0x8F, 0xDF, 0x66, 0xE0, 0x7E, 0x2E,
+      0x22, 0xB3, 0x02, 0x51, 0x93, 0x1E, 0x89, 0x0B, 0xAF, 0x1F, 0x5E, 0x17,
+      0x7D, 0x4D, 0x9C, 0xEC, 0x9E, 0x49, 0x69, 0x48, 0x1F, 0xD7, 0xC1, 0x33,
+      0x5A, 0x0E, 0xD5, 0x87, 0x9F, 0x34, 0xEF, 0x4B, 0xB4, 0xF6, 0x6C, 0x28,
+      0x80, 0x3C, 0xEA, 0x16, 0x2B, 0xA4, 0x61, 0x50, 0x6D, 0x52, 0xEB, 0x3A,
+      0xE1, 0x69, 0x51, 0x92, 0x2B, 0x06, 0x82, 0x51, 0x86, 0xC3, 0xD4, 0xCE,
+      0x1B, 0x51, 0xF3, 0xC9, 0x2F, 0x3C, 0x52, 0xF2, 0xD0, 0x4D, 0x1F, 0x13,
+      0xB2, 0xB1, 0x7C, 0x9E, 0xEB, 0x88, 0x2C, 0xCE, 0x0E, 0xB8, 0x8B, 0x7E,
+      0xA9, 0xA1, 0xCE, 0x4E, 0x37, 0x41, 0x5C, 0xC8, 0x4C, 0x7B, 0xC4, 0x36,
+      0xA4, 0x62, 0x83, 0x86, 0xCC, 0x77, 0xD9, 0xAF, 0xD2, 0x07, 0x91, 0x1B,
+      0xD9, 0xBF, 0xD8, 0xA7, 0xFA, 0x05, 0xC2, 0x75, 0xBE, 0x0C, 0x4C, 0x6A,
+      0x8F, 0xC0, 0xA6, 0x1B, 0xDA, 0x1D, 0x67, 0xAE, 0x33, 0xB5, 0x31, 0x0B,
+      0xE1, 0x29, 0x0D, 0xC7, 0x1C, 0x14, 0x18, 0xEB, 0x57, 0x44, 0xBF, 0x28,
+      0x42, 0xC1, 0x65, 0x21, 0x73, 0xA4, 0x9A, 0x69, 0x2E, 0x71, 0xFE, 0x43,
+      0x25, 0x8A, 0x20, 0x5B, 0x3C, 0xAA, 0xB9, 0x0C, 0x03, 0x04, 0xA5, 0x1E,
+      0x77, 0xD0, 0x1B, 0x40, 0x4A, 0x01, 0xFA, 0xE2, 0xF8, 0x3A, 0xB8, 0x0C,
+      0x5D, 0xBF, 0x6C, 0xF5, 0x18, 0xC0, 0x01, 0xF4, 0x6A, 0x63, 0x3F, 0xA1,
+      0x69, 0xB1, 0xBD, 0xB7, 0x7A, 0x9D, 0x0B, 0x1E, 0x0C, 0x00, 0x78, 0x35,
+      0xC0, 0x9F, 0x6A, 0xBB, 0xA9, 0x6F, 0x3F, 0x53, 0x56, 0x4D, 0xA5, 0x08,
+      0xEE, 0x88, 0x61, 0xA4, 0x83, 0xA8, 0x17, 0x49, 0xD4, 0xA4, 0x46, 0x72,
+      0xB1, 0xEF, 0x16, 0x05, 0xF2, 0x9D, 0x16, 0x8B, 0x74, 0xB7, 0x36, 0xB4,
+      0xF1, 0x35, 0x01, 0xD7, 0xAD, 0x12, 0x13, 0x11, 0x8A, 0x78, 0x32, 0xE6,
+      0x66, 0xA5, 0x0B, 0xE8, 0x01, 0x0D, 0x54, 0x32, 0x2A, 0x52, 0x6C, 0xF7,
+      0xA4, 0xE5, 0x43, 0xA7, 0x9D, 0x0D, 0x98, 0xE0, 0x04, 0xFB, 0xEC, 0x76,
+      0xEA, 0x3F, 0x7E, 0x88, 0x7B, 0xDB, 0xAF, 0x50, 0xDA, 0xDF, 0xDD, 0xDF,
+      0x3F, 0xFE, 0xCF, 0x6D, 0x3F, 0x77, 0xEA, 0x4B, 0x9B, 0x16, 0xDC, 0x75,
+      0x4F, 0x4A, 0x68, 0xE5, 0xEF, 0x32, 0xF6, 0xA1, 0x37, 0xE7, 0xC9, 0xE3,
+      0xC3, 0xE8, 0xC2, 0xE2, 0x36, 0xC7, 0xEB, 0xC4, 0x5D, 0x46, 0xEC, 0x16,
+      0x77, 0xA5, 0xA8, 0xBB, 0x26, 0x68, 0x44, 0x3B, 0x0B, 0xE8, 0x69, 0x3D,
+      0xC2, 0x57, 0xF1, 0x3D, 0x8B, 0x9A, 0x90, 0x10, 0x0B, 0x92, 0xB4, 0xD1,
+      0x76, 0x1B, 0x81, 0x96, 0x73, 0x83, 0x2C, 0x32, 0x02, 0x06, 0x71, 0xBF,
+      0xB3, 0xD0, 0x22, 0x0A, 0x36, 0x3E, 0x4B, 0xED, 0x6D, 0x64, 0x9D, 0x3F,
+      0x73, 0x68, 0xCF, 0xE0, 0x81, 0xE1, 0x96, 0xA4, 0x3D, 0x47, 0x08, 0x79,
+      0x8E, 0x31, 0xBB, 0x2A, 0x2F, 0x61, 0x82, 0x46, 0x74, 0xAB, 0xA2, 0xFC,
+      0x9D, 0xCD, 0x05, 0xDB, 0x84, 0xB8, 0x62, 0x7A, 0xE1, 0x14, 0x88, 0x88,
+      0x6F, 0x92, 0x1B, 0xC7, 0x9A, 0xE1, 0xFD, 0x03,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // Generate shared key `got_k` and ciphertext `got_ct` for test
+    // encapsulation key `ek` and randomness `seed`.
+    uint8_t got_k[32] = { 0 }, got_ct[FIPS203IPD_KEM768_CT_SIZE] = { 0 };
+    fips203ipd_kem768_encaps(got_k, got_ct, TESTS[i].ek, TESTS[i].seed);
+
+    // check for expected shared key
+    if (memcmp(got_k, TESTS[i].exp_k, sizeof(got_k))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - k", TESTS[i].name);
+      fail_test(__func__, name, got_k, sizeof(got_k), TESTS[i].exp_k, sizeof(got_k));
+    }
+
+    // check for expected ciphertext
+    if (memcmp(got_ct, TESTS[i].exp_ct, sizeof(got_ct))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ct", TESTS[i].name);
+      fail_test(__func__, name, got_ct, sizeof(got_ct), TESTS[i].exp_ct, sizeof(got_ct));
+    }
+  }
+}
+
+static void test_fips203ipd_kem768_decaps(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t ct[FIPS203IPD_KEM768_CT_SIZE]; // test ciphertext (1088 bytes)
+    const uint8_t dk[FIPS203IPD_KEM768_DK_SIZE]; // test decapsulation key (2400 bytes)
+    const uint8_t exp[32]; // expected message (32 bytes)
+  } TESTS[] = {{
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Decapsulation -- ML-KEM-768",
+
+    .ct = {
+      0xDF, 0xA6, 0xB9, 0xD7, 0x2A, 0x63, 0xB4, 0x20, 0xB8, 0x9D, 0xDE, 0x50,
+      0xF7, 0xE0, 0xD5, 0x6E, 0xCF, 0x87, 0x6B, 0xFE, 0xF9, 0x91, 0xFC, 0xE9,
+      0x1C, 0x8D, 0x28, 0x6F, 0xA6, 0xEA, 0xBA, 0xC1, 0x73, 0x0F, 0xD8, 0x77,
+      0x41, 0xFE, 0x4A, 0xD7, 0x17, 0xB2, 0x82, 0xA2, 0x1E, 0x23, 0x5A, 0x55,
+      0xC3, 0x75, 0x7D, 0x88, 0xD4, 0xCE, 0x62, 0xF4, 0x14, 0xEB, 0x77, 0xEB,
+      0x9D, 0x35, 0x7E, 0xE2, 0x9D, 0x00, 0x08, 0x7B, 0xF8, 0x11, 0x0E, 0x5B,
+      0xBB, 0xC7, 0xC9, 0x04, 0x19, 0x07, 0x2E, 0xAE, 0x04, 0x4B, 0xF7, 0xE1,
+      0x83, 0xD4, 0x3A, 0x94, 0xB2, 0x63, 0x2A, 0xA1, 0x46, 0x49, 0x61, 0x9B,
+      0x70, 0x64, 0x95, 0x21, 0xBC, 0x19, 0x37, 0x09, 0x42, 0xEF, 0x70, 0xF3,
+      0x6C, 0x34, 0xC8, 0xC2, 0x35, 0x91, 0xEE, 0x0C, 0xA7, 0x1A, 0x12, 0xD2,
+      0x79, 0xE0, 0xF5, 0x2D, 0x39, 0xED, 0x0F, 0x91, 0x3F, 0x8C, 0x26, 0x26,
+      0x21, 0xFB, 0x24, 0x2E, 0x68, 0x0D, 0xEB, 0x30, 0x7B, 0x07, 0x49, 0xC6,
+      0xB3, 0x93, 0xA8, 0xEF, 0x66, 0xF8, 0xB0, 0x4A, 0xAF, 0xA8, 0x77, 0xB9,
+      0x51, 0xAB, 0x93, 0xF5, 0x98, 0xB4, 0xB2, 0xFA, 0xB0, 0x4F, 0x88, 0xAC,
+      0x80, 0x39, 0x84, 0xFF, 0x37, 0xE3, 0xFE, 0x74, 0xF3, 0xA6, 0x16, 0xD5,
+      0x31, 0x4E, 0xB3, 0xA8, 0x26, 0xF8, 0x74, 0xF8, 0xEC, 0xD3, 0xA5, 0x64,
+      0x7D, 0x04, 0x94, 0x2A, 0x57, 0xEF, 0xC0, 0x96, 0x38, 0x47, 0x0D, 0xC0,
+      0xA9, 0xDF, 0x40, 0xB3, 0x17, 0x57, 0x1D, 0x39, 0x84, 0xA7, 0x8C, 0xF7,
+      0xD1, 0x17, 0x51, 0x09, 0x07, 0x22, 0xB3, 0x05, 0x9E, 0x07, 0x59, 0x1C,
+      0xC4, 0xA2, 0xED, 0x9B, 0xA0, 0xDC, 0xE9, 0x9B, 0xE9, 0xE5, 0xEE, 0x5D,
+      0xB8, 0xD6, 0x98, 0xCD, 0xEB, 0x58, 0x14, 0x75, 0x9B, 0xA9, 0x77, 0xC9,
+      0x00, 0x79, 0xCF, 0x2A, 0xFD, 0xE4, 0x78, 0x06, 0x9C, 0x51, 0x3A, 0x60,
+      0x09, 0x1A, 0x3A, 0x5D, 0x01, 0x11, 0xE2, 0x2D, 0xE0, 0x6C, 0xB1, 0x45,
+      0xC1, 0x4E, 0x22, 0xA2, 0x14, 0xCB, 0x27, 0x8C, 0x81, 0x52, 0xB0, 0x68,
+      0x1B, 0xCA, 0xFF, 0x54, 0xD5, 0x52, 0xB5, 0x4A, 0x67, 0x1C, 0x0D, 0xFE,
+      0xF7, 0x75, 0xE7, 0xC5, 0x4F, 0xEF, 0xC4, 0x85, 0x38, 0x68, 0xC9, 0x55,
+      0x97, 0x1A, 0xBD, 0xAC, 0x2A, 0x76, 0x29, 0x2C, 0xCC, 0xD4, 0xFD, 0x1C,
+      0x70, 0x6B, 0x7D, 0x36, 0x14, 0x15, 0x96, 0x73, 0xE9, 0xD7, 0xB2, 0x9A,
+      0x2D, 0x3F, 0x63, 0x36, 0x31, 0x29, 0xE7, 0xA2, 0x1E, 0x80, 0x3A, 0x46,
+      0x0F, 0x27, 0x14, 0xE3, 0xE2, 0x59, 0x22, 0x78, 0x0A, 0xF3, 0x82, 0x57,
+      0xCD, 0x14, 0x95, 0xAC, 0xD1, 0xE0, 0x19, 0x80, 0x63, 0x8D, 0xF5, 0x8A,
+      0x15, 0x3D, 0xAB, 0x07, 0xEF, 0xB5, 0xC7, 0xE7, 0x8A, 0xDA, 0xCF, 0x63,
+      0x19, 0x56, 0xD6, 0x9C, 0xCD, 0xA0, 0x70, 0x45, 0x95, 0x68, 0xBD, 0x9D,
+      0x11, 0xA2, 0x93, 0x4B, 0xCF, 0x16, 0x43, 0xBC, 0x99, 0x46, 0x82, 0x38,
+      0x91, 0x0B, 0x1F, 0x74, 0x2E, 0xBB, 0x3C, 0x03, 0xD3, 0x9F, 0xD4, 0x5C,
+      0xFB, 0x85, 0xBA, 0x30, 0x9E, 0x29, 0xDD, 0x9B, 0x5C, 0xD5, 0x60, 0x81,
+      0x9E, 0xC7, 0x29, 0xFC, 0xAC, 0x8B, 0x9D, 0x72, 0x5E, 0x3E, 0x8A, 0xBE,
+      0xDE, 0x4B, 0x52, 0x98, 0xA8, 0x65, 0x8E, 0xE3, 0xF7, 0x81, 0xB0, 0xCE,
+      0x68, 0x3C, 0xBB, 0x73, 0x35, 0xCD, 0x57, 0xEF, 0xE2, 0x20, 0x4A, 0x8F,
+      0x19, 0x74, 0x46, 0xD7, 0x31, 0x4C, 0xDB, 0xF4, 0xC5, 0xD0, 0x8C, 0xCC,
+      0x41, 0xF8, 0x08, 0x57, 0xCC, 0x95, 0x71, 0xFB, 0xFB, 0x90, 0x60, 0x60,
+      0xF7, 0xE1, 0x7C, 0x8C, 0xEF, 0x0F, 0x27, 0x4A, 0xFF, 0x83, 0xE3, 0x93,
+      0xB1, 0x5F, 0x2F, 0x95, 0x89, 0xA1, 0x3A, 0xF4, 0xBC, 0x78, 0xE1, 0x6C,
+      0xDD, 0xE6, 0x23, 0x61, 0xD6, 0x3B, 0x8D, 0xC9, 0x03, 0xB7, 0x0C, 0x01,
+      0xA4, 0x34, 0x19, 0xCD, 0x20, 0x52, 0x15, 0x0B, 0xD2, 0x87, 0x19, 0xF6,
+      0x1F, 0xF3, 0x1F, 0x4A, 0x9B, 0xEC, 0x4D, 0xDB, 0xCE, 0xC1, 0xF8, 0xFB,
+      0x2E, 0xFB, 0xF3, 0x7D, 0xFF, 0xFA, 0x4C, 0x7F, 0xEC, 0xA8, 0xCE, 0x6D,
+      0x62, 0x6B, 0xFD, 0xA1, 0x6E, 0xE7, 0x08, 0xD9, 0x20, 0x68, 0x14, 0xA2,
+      0xEF, 0x98, 0x85, 0x25, 0x61, 0x5D, 0x4A, 0xC9, 0xBE, 0x60, 0x8C, 0x4B,
+      0x03, 0xAB, 0xEE, 0x95, 0xB3, 0x2A, 0x5D, 0xB7, 0x4A, 0x96, 0x11, 0x9A,
+      0x7E, 0x15, 0x9A, 0xF9, 0x9C, 0xD9, 0x8E, 0x88, 0xEA, 0xF0, 0x9F, 0x0D,
+      0x78, 0x0E, 0x7C, 0x7E, 0x81, 0x4B, 0x8E, 0x88, 0xB4, 0xF4, 0xE1, 0x5F,
+      0xA5, 0x49, 0x95, 0xD0, 0xEC, 0xBA, 0xD3, 0xEF, 0x04, 0x6A, 0x49, 0x47,
+      0xF3, 0xE8, 0xB9, 0xE7, 0x44, 0x24, 0x14, 0x89, 0xB8, 0x06, 0xFE, 0x94,
+      0x01, 0xE7, 0x8B, 0xAF, 0xC8, 0xE8, 0x82, 0xE9, 0xD6, 0xD0, 0x70, 0x0F,
+      0x72, 0x0C, 0x00, 0x24, 0xE7, 0xDA, 0x49, 0x06, 0x1C, 0x5D, 0x18, 0xA6,
+      0x20, 0x74, 0x04, 0x0A, 0xBC, 0x00, 0x03, 0x20, 0x0E, 0xD4, 0x65, 0x23,
+      0x17, 0x97, 0x93, 0x0A, 0x2E, 0x2A, 0xA5, 0x01, 0xF6, 0x48, 0x62, 0xDD,
+      0xA1, 0x30, 0x14, 0xA9, 0x9F, 0x9D, 0x32, 0x70, 0xAA, 0x90, 0x7E, 0xEB,
+      0x3F, 0xDB, 0xFF, 0x29, 0x16, 0x00, 0xDF, 0x1F, 0x6B, 0x39, 0x68, 0x4B,
+      0x11, 0xE3, 0x96, 0xB7, 0x0D, 0x86, 0xF9, 0x04, 0x92, 0xE8, 0x2B, 0x09,
+      0xBA, 0x25, 0x60, 0x7B, 0x0C, 0x28, 0x6F, 0xBC, 0x07, 0x01, 0x82, 0xAC,
+      0x76, 0xFA, 0x7C, 0x85, 0x9A, 0xAF, 0xEA, 0x87, 0x01, 0x6A, 0xED, 0x22,
+      0xC3, 0x60, 0x5A, 0x27, 0x89, 0xA1, 0xD4, 0x39, 0xFD, 0x8D, 0x93, 0x33,
+      0x42, 0xDA, 0xB7, 0x45, 0xA3, 0xE5, 0x50, 0xE7, 0xD7, 0x7C, 0x01, 0xA6,
+      0x23, 0x4B, 0xDA, 0x7D, 0x6B, 0xB1, 0x9D, 0x49, 0x5E, 0x65, 0x60, 0xFC,
+      0xE8, 0x39, 0x6F, 0xC3, 0xC6, 0xE0, 0x88, 0xED, 0x60, 0xF5, 0xF2, 0x77,
+      0x14, 0x16, 0xEA, 0x3B, 0xE5, 0xBE, 0x47, 0x2B, 0x64, 0x04, 0x90, 0x6C,
+      0x91, 0xE7, 0x1D, 0x9A, 0x86, 0x72, 0xF3, 0x90, 0x08, 0x36, 0x55, 0xAB,
+      0x7D, 0x0E, 0xC6, 0xED, 0xFE, 0x86, 0x78, 0x9C, 0xE2, 0x0B, 0xE2, 0xEA,
+      0x90, 0xCA, 0x5C, 0xC3, 0x14, 0x16, 0xFB, 0x24, 0xCB, 0xAF, 0x94, 0xDA,
+      0x14, 0x68, 0xFE, 0x69, 0x6B, 0xCD, 0xF5, 0x24, 0x7C, 0xF1, 0x17, 0xCB,
+      0xE9, 0x33, 0x40, 0x76, 0xCA, 0x68, 0x96, 0xB2, 0xF6, 0xA0, 0x16, 0xB1,
+      0xF7, 0xC7, 0x37, 0x28, 0x80, 0x78, 0x98, 0xD8, 0xB1, 0x99, 0x75, 0x6C,
+      0x2B, 0x0A, 0xA2, 0x45, 0x7E, 0x1B, 0x4F, 0x77, 0x54, 0xC4, 0x57, 0x6C,
+      0xE5, 0x64, 0x56, 0x14, 0xEA, 0x15, 0xC1, 0xAE, 0x28, 0xB0, 0x94, 0xEB,
+      0x21, 0x7C, 0x7A, 0x7A, 0x41, 0x23, 0x95, 0x76, 0xCB, 0xDA, 0x38, 0x0E,
+      0xE6, 0x87, 0x83, 0x43, 0x27, 0x30, 0xAD, 0x5E, 0xBE, 0x7F, 0x51, 0xD6,
+      0xBE, 0x7F, 0xB0, 0x2A, 0xB3, 0x7B, 0xE0, 0xC9, 0x6A, 0xAC, 0x9F, 0x3C,
+      0x79, 0x0A, 0x18, 0xD1, 0x59, 0xE6, 0xBA, 0xBA, 0x71, 0xEC, 0x88, 0xC1,
+      0x10, 0xFD, 0x84, 0xC3, 0x36, 0xDF, 0x63, 0x0F, 0x27, 0x1C, 0xF7, 0x93,
+      0x28, 0xB6, 0xC8, 0x79, 0xDF, 0x7C, 0xDE, 0x0F, 0x70, 0x71, 0x22, 0x20,
+      0xB1, 0xFB, 0xB9, 0xAC, 0xB4, 0x82, 0x48, 0xD9, 0x1F, 0x0E, 0x2B, 0x6E,
+      0x3B, 0xE4, 0x0C, 0x2B, 0x22, 0x1E, 0x62, 0x6E, 0x7E, 0x33, 0x0D, 0x9D,
+      0x83, 0xCC, 0x06, 0x68, 0xF7, 0x30, 0x85, 0x91, 0xE1, 0x4C, 0x7D, 0x72,
+      0xB8, 0x41, 0xA6, 0xF0, 0x5F, 0x3F, 0xDC, 0x13, 0x9E, 0xEC, 0xC1, 0x53,
+      0x67, 0x65, 0x65, 0x0B, 0x55, 0xA9, 0xCE, 0xC6, 0xBB, 0xF5, 0x4C, 0xCE,
+      0xC5, 0xC3, 0xAC, 0x9A, 0x0E, 0x39, 0xF4, 0x8F, 0x23, 0x7B, 0xD4, 0xC6,
+      0x60, 0xCB, 0x1A, 0x8D, 0x25, 0x0B, 0xB6, 0xC8, 0xC0, 0x10, 0xFE, 0xC3,
+      0x4C, 0xC3, 0xD9, 0x15, 0x99, 0x27, 0x1C, 0x75, 0x31, 0x33, 0x0F, 0x12,
+      0xA3, 0xE4, 0x4F, 0xAF, 0xD9, 0x05, 0xD2, 0xC6,
+    },
+
+    .dk = {
+      0x34, 0x56, 0x85, 0x9B, 0xF7, 0x07, 0xE6, 0x72, 0xAC, 0x71, 0x2B, 0x7E,
+      0x70, 0xF5, 0x42, 0x75, 0x74, 0x59, 0x75, 0x02, 0xB8, 0x1D, 0xE8, 0x93,
+      0x1C, 0x92, 0xA9, 0xC0, 0xD2, 0x2A, 0x8E, 0x17, 0x73, 0xCB, 0x87, 0x47,
+      0x22, 0x05, 0xA3, 0x1C, 0x32, 0x20, 0x6B, 0xA4, 0xBC, 0xF4, 0x22, 0x59,
+      0x53, 0x3C, 0xB3, 0xA1, 0x9C, 0x02, 0x00, 0x86, 0x02, 0x44, 0xA6, 0xC3,
+      0xF6, 0x92, 0x18, 0x45, 0xB0, 0xA0, 0x58, 0x50, 0x18, 0x7A, 0x43, 0x10,
+      0xB3, 0xD5, 0x22, 0x3A, 0xAA, 0xA0, 0xC7, 0x9B, 0x9B, 0xBC, 0xFC, 0xCB,
+      0x3F, 0x75, 0x12, 0x14, 0xEB, 0x0C, 0xFA, 0xC1, 0xA2, 0x9E, 0xD8, 0x84,
+      0x8A, 0x5A, 0x49, 0xBA, 0x84, 0xBA, 0x68, 0xE6, 0xB6, 0xF5, 0x05, 0x7D,
+      0x49, 0x31, 0x05, 0xFF, 0x38, 0xA9, 0xF4, 0x4B, 0x4E, 0x7F, 0x6C, 0xBE,
+      0x7D, 0x21, 0x64, 0x08, 0xF7, 0xB4, 0x86, 0x05, 0xB2, 0x70, 0xB2, 0x53,
+      0xB0, 0x01, 0xA5, 0x40, 0x1C, 0x0C, 0x91, 0x27, 0xCC, 0x18, 0x5B, 0x1B,
+      0x0C, 0xF9, 0x2B, 0x99, 0xFB, 0xA0, 0xD9, 0x5A, 0x29, 0x5F, 0x87, 0x35,
+      0x15, 0x52, 0x0C, 0x86, 0x32, 0x1B, 0x8C, 0x96, 0x6C, 0x83, 0x7A, 0xAB,
+      0x34, 0xB2, 0xBF, 0xFA, 0xB2, 0xA2, 0xA4, 0x30, 0x1B, 0x35, 0x6B, 0x26,
+      0xCD, 0xC4, 0x56, 0x38, 0x02, 0x90, 0x1B, 0x47, 0x62, 0xF2, 0x84, 0x28,
+      0x1A, 0x38, 0x2E, 0x5F, 0x76, 0x2B, 0xEF, 0x47, 0xB5, 0x19, 0xA8, 0x1A,
+      0x10, 0x86, 0x57, 0xEB, 0xE9, 0x62, 0xBE, 0x12, 0x0B, 0x5F, 0xB3, 0xB9,
+      0xED, 0x33, 0x8C, 0xCF, 0x47, 0xB3, 0xA0, 0x39, 0x52, 0xA1, 0x66, 0x33,
+      0xF6, 0xE6, 0xB5, 0x34, 0xE6, 0xB6, 0x3D, 0x05, 0x70, 0x6E, 0xFA, 0x0F,
+      0x94, 0xC0, 0x3A, 0x2B, 0x85, 0x6A, 0xE5, 0x51, 0x42, 0x2F, 0x90, 0x11,
+      0xF2, 0x58, 0x9A, 0x41, 0xB9, 0x6A, 0x2C, 0xD2, 0x13, 0xC6, 0x99, 0x9B,
+      0x09, 0xE9, 0x1F, 0xF4, 0x23, 0xCB, 0x10, 0x6A, 0x1A, 0x92, 0x0B, 0x84,
+      0xB8, 0x11, 0x46, 0x94, 0x97, 0x15, 0x42, 0x23, 0x98, 0x7F, 0x00, 0x5C,
+      0x72, 0xF8, 0xAF, 0x38, 0x8B, 0x09, 0x0C, 0x63, 0x9F, 0x8C, 0x77, 0x4F,
+      0xC5, 0xA2, 0x94, 0xC7, 0x4A, 0x21, 0x2C, 0x91, 0xA8, 0x6C, 0x32, 0x8A,
+      0xEB, 0xEA, 0x55, 0x8A, 0xB4, 0x3F, 0x8B, 0x87, 0x35, 0x34, 0xFA, 0x2E,
+      0xF9, 0xE6, 0x6C, 0xEF, 0x3C, 0x52, 0xCD, 0x47, 0x1A, 0xB7, 0x83, 0x75,
+      0xE7, 0x45, 0xB9, 0xD0, 0xAA, 0x65, 0xD2, 0x27, 0x8B, 0x92, 0x75, 0xAE,
+      0x53, 0x48, 0xB1, 0x6C, 0xF6, 0x2A, 0xC8, 0x06, 0x57, 0x34, 0xE4, 0xBD,
+      0x77, 0xB8, 0x0C, 0xCF, 0x89, 0x76, 0x05, 0xEB, 0x76, 0xF4, 0x85, 0xAF,
+      0x8A, 0x0B, 0x46, 0x65, 0x57, 0xA8, 0x3C, 0x02, 0x92, 0xCC, 0xF9, 0x03,
+      0xEE, 0x7A, 0xA5, 0x7C, 0x3B, 0x51, 0xAD, 0x66, 0x01, 0x89, 0xB8, 0x61,
+      0x39, 0xE3, 0x80, 0x42, 0x5B, 0x31, 0xA9, 0x26, 0x89, 0xDF, 0x24, 0x31,
+      0xBF, 0xA7, 0xB6, 0x9E, 0xAB, 0x17, 0x27, 0x45, 0x1B, 0x29, 0xDA, 0x8B,
+      0x8B, 0xF8, 0x51, 0xE1, 0xBC, 0x2D, 0x3A, 0x63, 0x13, 0x4C, 0xA9, 0x66,
+      0x3C, 0x57, 0xAE, 0xC6, 0x98, 0x5C, 0xEB, 0xD5, 0x6D, 0xB0, 0x44, 0x7B,
+      0x13, 0x6B, 0x01, 0x7A, 0x97, 0x47, 0x61, 0xC3, 0xC6, 0x7D, 0x33, 0x77,
+      0x2F, 0x99, 0x64, 0xE5, 0x43, 0x4D, 0x64, 0x35, 0x04, 0x33, 0x2A, 0x30,
+      0x27, 0x29, 0x4A, 0x07, 0x8C, 0x59, 0x9C, 0xB2, 0x91, 0x63, 0x10, 0x9C,
+      0xE3, 0xB5, 0x6C, 0xE6, 0x98, 0xB4, 0xD3, 0xF5, 0x9E, 0x29, 0x56, 0xA1,
+      0xF0, 0x3A, 0x4B, 0x95, 0x55, 0x93, 0xF2, 0xD2, 0x45, 0x7F, 0xFA, 0xAE,
+      0x96, 0x24, 0xA0, 0x71, 0x10, 0x45, 0xB3, 0xF5, 0x52, 0x92, 0xF2, 0x0C,
+      0xC9, 0xD0, 0xCD, 0x79, 0x1A, 0x21, 0x59, 0x7B, 0x0F, 0x2C, 0xD9, 0x80,
+      0xF3, 0x51, 0x0F, 0x0B, 0x02, 0x39, 0x02, 0x20, 0x00, 0xD7, 0x35, 0x58,
+      0x6E, 0xE6, 0xA7, 0x3F, 0x3A, 0x3D, 0xCB, 0xD6, 0xBD, 0x1A, 0x85, 0xC8,
+      0x65, 0x12, 0xAB, 0xF3, 0xC5, 0x1C, 0xE0, 0x0A, 0x03, 0x31, 0xF6, 0x53,
+      0x60, 0x46, 0x2C, 0x02, 0x23, 0x29, 0x59, 0x7A, 0x81, 0xC3, 0xF9, 0x2F,
+      0xC1, 0x79, 0x38, 0xC9, 0x13, 0x8F, 0x41, 0x11, 0x38, 0x79, 0x79, 0xC2,
+      0x8F, 0x03, 0x34, 0xF9, 0x01, 0x19, 0x22, 0x13, 0x74, 0xDA, 0xB0, 0x45,
+      0x92, 0x9B, 0x49, 0xE4, 0x3A, 0x96, 0x46, 0xA2, 0x43, 0xF4, 0x46, 0x4D,
+      0xAF, 0x81, 0x1A, 0xB0, 0x06, 0x30, 0xC7, 0x59, 0x61, 0xBC, 0xD4, 0xAF,
+      0x5D, 0x99, 0x11, 0x5A, 0x37, 0x49, 0x19, 0x1B, 0xA8, 0xFD, 0x41, 0xCE,
+      0x0B, 0x3C, 0x89, 0xA6, 0x95, 0xB4, 0xBB, 0x85, 0x06, 0x4F, 0xD3, 0xAF,
+      0x95, 0xC9, 0xB4, 0xAE, 0xE0, 0x9A, 0xC7, 0xB0, 0xCC, 0x69, 0xEC, 0xA3,
+      0x6A, 0x00, 0x4B, 0x6C, 0xD6, 0x62, 0xA6, 0xD3, 0x27, 0x95, 0x05, 0x3E,
+      0xF0, 0xA0, 0x3A, 0xDA, 0x3B, 0x98, 0xBF, 0xE3, 0xB4, 0x6A, 0x79, 0x72,
+      0x3E, 0x3A, 0x45, 0xAB, 0x3C, 0x31, 0x95, 0x06, 0x69, 0xAD, 0x77, 0x07,
+      0x20, 0x62, 0xCC, 0x3B, 0x50, 0x4D, 0xF1, 0x33, 0x4F, 0xD6, 0x90, 0x9E,
+      0xAC, 0x79, 0x15, 0xF1, 0xD5, 0xAD, 0x16, 0x63, 0x9F, 0x5F, 0xB5, 0x64,
+      0x41, 0x64, 0x54, 0x25, 0x91, 0x34, 0xD5, 0x65, 0x88, 0x2C, 0xB3, 0x81,
+      0xCB, 0xA5, 0x8B, 0x76, 0x88, 0x07, 0x67, 0xB5, 0x0A, 0xC1, 0xB8, 0x57,
+      0x95, 0xD7, 0x26, 0x84, 0x33, 0xB3, 0x71, 0x23, 0x0E, 0xD4, 0xC7, 0x2F,
+      0x99, 0xAB, 0x1A, 0xD1, 0xE5, 0x95, 0xA4, 0x59, 0xCF, 0x0A, 0x23, 0x34,
+      0xAA, 0x14, 0x63, 0xAD, 0xE4, 0xBD, 0xC9, 0x24, 0x96, 0x05, 0x38, 0x18,
+      0x57, 0xBB, 0x98, 0x09, 0x5B, 0x41, 0x13, 0x29, 0x46, 0xCA, 0x24, 0x57,
+      0xDF, 0xAA, 0x91, 0x49, 0x58, 0x2A, 0xA1, 0x99, 0x27, 0xB6, 0x36, 0x89,
+      0xE2, 0x92, 0x9A, 0xA4, 0x10, 0x27, 0xBE, 0xF4, 0x92, 0x19, 0x70, 0xBA,
+      0xD4, 0xA5, 0x54, 0x90, 0xD9, 0x1A, 0xBE, 0x25, 0x1D, 0xEF, 0x45, 0x52,
+      0xCA, 0x88, 0x03, 0x41, 0x06, 0xA0, 0x2C, 0xE4, 0xB0, 0x58, 0xF8, 0xB5,
+      0x96, 0x24, 0xB6, 0x7E, 0x06, 0x3B, 0xF1, 0x78, 0xB0, 0x15, 0xE4, 0x28,
+      0x1E, 0xB1, 0x14, 0xA2, 0xBC, 0x24, 0x54, 0x94, 0x3A, 0x4B, 0x46, 0x47,
+      0x12, 0x2C, 0x42, 0xCB, 0xEA, 0x4E, 0x94, 0x15, 0x4F, 0xD3, 0xE4, 0xB7,
+      0x91, 0xF6, 0x29, 0x0B, 0x78, 0x29, 0x94, 0x20, 0x68, 0x53, 0xD6, 0x70,
+      0x00, 0xA6, 0x33, 0xF3, 0x20, 0xA8, 0xA3, 0x74, 0xCA, 0x5D, 0x40, 0x38,
+      0xF9, 0xCA, 0x42, 0x44, 0xDC, 0xB0, 0x2E, 0x9A, 0x84, 0xE1, 0xF7, 0xC8,
+      0xA8, 0x21, 0x13, 0x2B, 0x32, 0xB9, 0xA8, 0x40, 0x55, 0x7B, 0x34, 0x78,
+      0x06, 0x65, 0x30, 0x17, 0x24, 0xBA, 0x26, 0x06, 0x68, 0x1D, 0x94, 0x5E,
+      0x34, 0xD7, 0xCF, 0x94, 0x1B, 0x89, 0x63, 0xCA, 0xA1, 0x00, 0x1A, 0x49,
+      0x1B, 0x8B, 0x2E, 0x43, 0x57, 0x0E, 0x9A, 0xB9, 0x5C, 0x0A, 0x57, 0xC5,
+      0x03, 0xF0, 0xAB, 0x96, 0x0B, 0x48, 0x56, 0xD0, 0x25, 0x15, 0x74, 0x71,
+      0x0F, 0xE5, 0xCB, 0x47, 0x42, 0x84, 0xFC, 0x10, 0x49, 0xAA, 0x2A, 0x7B,
+      0x03, 0x69, 0x4A, 0x1C, 0x76, 0x3E, 0x99, 0xDA, 0xC6, 0xAD, 0x0B, 0xA8,
+      0x03, 0x8B, 0x13, 0x8A, 0x64, 0x43, 0x2E, 0x34, 0x91, 0x16, 0xA0, 0x31,
+      0xE8, 0xC7, 0x92, 0x78, 0x17, 0x51, 0xBA, 0x47, 0x3C, 0xBD, 0xF5, 0x57,
+      0x20, 0x00, 0x5A, 0xBD, 0xAA, 0x13, 0xD5, 0x01, 0x82, 0xF0, 0xE6, 0x33,
+      0x77, 0x6B, 0xB0, 0x67, 0x5C, 0x40, 0x47, 0x2B, 0xAD, 0x1F, 0x96, 0x72,
+      0x76, 0x91, 0x83, 0xD0, 0xCC, 0xC8, 0x10, 0xBC, 0x25, 0xA8, 0x57, 0x32,
+      0x20, 0x56, 0x9F, 0x6A, 0xC4, 0xBA, 0xC2, 0x2A, 0x13, 0x54, 0xD8, 0xB3,
+      0x6C, 0x05, 0x80, 0xD0, 0xE5, 0x29, 0x9E, 0x62, 0x9C, 0x50, 0x6C, 0xC7,
+      0x65, 0x55, 0x46, 0xFF, 0x27, 0x81, 0x0C, 0x97, 0xB5, 0x1B, 0xA0, 0x56,
+      0xBB, 0xF8, 0x6E, 0xD9, 0xCB, 0x7C, 0x0A, 0x53, 0x7F, 0x72, 0xD0, 0xCF,
+      0x9A, 0xD2, 0xC2, 0x31, 0xE2, 0x9E, 0xBF, 0x55, 0x3F, 0x61, 0x3C, 0xBB,
+      0x15, 0xB3, 0x72, 0x1A, 0x20, 0x07, 0x7E, 0x50, 0x5F, 0xD3, 0x90, 0xCB,
+      0x19, 0xF6, 0x48, 0x8A, 0x10, 0x7D, 0xEE, 0x1C, 0xAC, 0x58, 0xAB, 0x70,
+      0x34, 0xBA, 0x69, 0x03, 0x00, 0x21, 0x95, 0x95, 0xB3, 0x69, 0x5C, 0x12,
+      0x34, 0xE8, 0xB5, 0x7E, 0x33, 0xC8, 0xD3, 0xA0, 0x48, 0x45, 0x4A, 0x61,
+      0x6D, 0xF3, 0xC9, 0xB5, 0x6A, 0x6F, 0xF2, 0x02, 0x6A, 0xF9, 0x97, 0x72,
+      0x5F, 0xC9, 0x55, 0x79, 0x04, 0x3B, 0xAE, 0x93, 0x99, 0xB6, 0x79, 0x0D,
+      0x63, 0x7B, 0x4F, 0xA8, 0x20, 0xB0, 0xB2, 0xD2, 0xCA, 0xB6, 0x07, 0xBA,
+      0xF6, 0xA3, 0x72, 0x73, 0x4C, 0x31, 0xEE, 0x00, 0x26, 0xF3, 0xC0, 0x76,
+      0xD1, 0x4A, 0x8E, 0x3E, 0xE6, 0x6A, 0xAD, 0x8B, 0xBB, 0xCC, 0xEB, 0x9D,
+      0xC7, 0x0C, 0x7B, 0x6B, 0xB0, 0xBB, 0x76, 0xC2, 0x00, 0xC2, 0x31, 0x60,
+      0x1C, 0xA0, 0x87, 0x3E, 0xC8, 0x71, 0x0F, 0x4B, 0x18, 0xD5, 0x72, 0x90,
+      0xB0, 0x33, 0x72, 0x7C, 0x60, 0x1E, 0xDB, 0x71, 0xC2, 0xB0, 0xF0, 0xC2,
+      0x1D, 0x55, 0x3E, 0x0E, 0x7A, 0x4F, 0x77, 0x71, 0x68, 0x39, 0xC7, 0xC8,
+      0x44, 0x8A, 0xBB, 0x9F, 0x66, 0xA5, 0x4E, 0x8A, 0x4B, 0x08, 0xA7, 0x9D,
+      0x9A, 0x39, 0x2C, 0xA1, 0x27, 0x00, 0x31, 0x38, 0x8B, 0xAD, 0x56, 0x21,
+      0x7E, 0x32, 0xAE, 0xF5, 0x54, 0x11, 0x97, 0x49, 0x06, 0xA2, 0x45, 0xC0,
+      0x07, 0x12, 0xB3, 0xCB, 0xB1, 0x17, 0x06, 0x85, 0x19, 0x3F, 0xE2, 0x5A,
+      0xCD, 0x7A, 0xC1, 0x3D, 0x32, 0x07, 0x3F, 0x38, 0x79, 0xA5, 0xD7, 0x83,
+      0x75, 0xF0, 0x05, 0x2C, 0xF7, 0x91, 0x75, 0xBA, 0xB4, 0x6D, 0x22, 0x37,
+      0x05, 0x97, 0xBD, 0x06, 0x78, 0x9E, 0xDD, 0x07, 0x11, 0xCC, 0x42, 0x43,
+      0x50, 0x7A, 0x02, 0xB4, 0xFA, 0xAD, 0xBB, 0x62, 0x25, 0x0C, 0xC9, 0x97,
+      0xAE, 0x03, 0x27, 0xAE, 0xB0, 0x0D, 0xEB, 0x52, 0x91, 0x92, 0xA6, 0x4B,
+      0x10, 0x96, 0xA8, 0x6B, 0x19, 0x67, 0x4D, 0x0B, 0x0A, 0xF0, 0x5C, 0x4A,
+      0xAE, 0x17, 0x8C, 0x2C, 0x9A, 0x64, 0x42, 0xE9, 0x4E, 0xD0, 0xA5, 0x60,
+      0x33, 0xA1, 0x1E, 0xE4, 0x26, 0x32, 0xC0, 0xB4, 0xAA, 0x51, 0xD4, 0x21,
+      0x50, 0x79, 0x0F, 0x41, 0x06, 0x2B, 0x77, 0x25, 0x3C, 0x25, 0xBA, 0x4D,
+      0xE5, 0x59, 0x76, 0x1F, 0x0A, 0x90, 0x06, 0x83, 0x89, 0x72, 0x8B, 0xC9,
+      0x77, 0xF7, 0x0C, 0xF7, 0xBC, 0xCF, 0xBD, 0x88, 0x3D, 0xF1, 0x3C, 0x79,
+      0xF5, 0xF2, 0xC3, 0x43, 0x12, 0xCB, 0x1D, 0x5A, 0x55, 0xD7, 0x8C, 0x1B,
+      0x24, 0x20, 0x96, 0xA8, 0xC0, 0x59, 0x3C, 0xFB, 0x27, 0x53, 0x46, 0x0B,
+      0xD3, 0x0A, 0xBA, 0x30, 0x6C, 0x74, 0x17, 0x39, 0x95, 0x74, 0x83, 0x85,
+      0xD0, 0x0B, 0x36, 0x70, 0xE6, 0x13, 0x24, 0xD8, 0x7D, 0xE8, 0xA1, 0x44,
+      0x50, 0xDC, 0x49, 0x37, 0x68, 0x77, 0x7F, 0xF0, 0xCE, 0x68, 0x10, 0x93,
+      0x7A, 0x71, 0x12, 0x29, 0x56, 0x1A, 0x5E, 0xF2, 0xBB, 0x69, 0x86, 0x10,
+      0x74, 0xE0, 0x0B, 0xD9, 0x32, 0x66, 0xE4, 0xB8, 0x62, 0x69, 0xE1, 0x8E,
+      0xEA, 0x2C, 0xAA, 0xCB, 0x60, 0xA1, 0x35, 0x86, 0x36, 0xCD, 0x7A, 0x7C,
+      0xA6, 0xBB, 0x68, 0x21, 0x30, 0x24, 0x17, 0x84, 0xB1, 0x01, 0xEA, 0x5B,
+      0xFD, 0x6C, 0x3A, 0x07, 0x15, 0x86, 0x21, 0x61, 0x47, 0x36, 0xF6, 0x99,
+      0x6D, 0x5A, 0x4E, 0x14, 0x96, 0x3A, 0x12, 0xD8, 0x36, 0xE5, 0x33, 0xA0,
+      0xC8, 0x91, 0x2D, 0xB7, 0xE1, 0x16, 0x85, 0xA4, 0xA5, 0x3D, 0x82, 0x85,
+      0xF0, 0x87, 0x50, 0xDF, 0xF6, 0x6D, 0xA2, 0x7C, 0x23, 0xB9, 0x75, 0x42,
+      0xDE, 0xFB, 0x99, 0xE4, 0x70, 0xAC, 0xD5, 0xE6, 0x47, 0xC9, 0x40, 0xCB,
+      0x57, 0x30, 0x1B, 0x43, 0xCC, 0x3E, 0x68, 0xE6, 0x4E, 0x28, 0xB0, 0x67,
+      0x70, 0x69, 0x5E, 0xF6, 0x09, 0x26, 0x5E, 0x06, 0xC6, 0x0F, 0x22, 0xCB,
+      0x87, 0x58, 0x49, 0xE6, 0x2B, 0xAB, 0x88, 0xCC, 0x10, 0xEC, 0xF6, 0x22,
+      0xC3, 0x79, 0xCB, 0x54, 0xF1, 0x3D, 0x8B, 0x2B, 0xAC, 0x90, 0x2B, 0x9A,
+      0xB0, 0x2B, 0xB3, 0x30, 0xB4, 0x5A, 0xC8, 0xB7, 0x41, 0xC2, 0x64, 0x7A,
+      0xC4, 0x5B, 0x5B, 0xF4, 0x8A, 0x6D, 0x3F, 0xE0, 0x39, 0x98, 0x6C, 0xC9,
+      0x40, 0xC6, 0x0A, 0x94, 0xE6, 0x6C, 0xF6, 0x44, 0x53, 0x10, 0x16, 0xA5,
+      0x27, 0x24, 0x50, 0x82, 0x43, 0x14, 0xB5, 0x66, 0x2A, 0x0A, 0x90, 0x9A,
+      0xBF, 0xB4, 0x6F, 0xD2, 0x7B, 0xAE, 0xD3, 0xAB, 0xA8, 0x25, 0x93, 0x61,
+      0x59, 0x68, 0x82, 0xB0, 0x8B, 0x2A, 0xC7, 0x23, 0x39, 0x30, 0xFC, 0x37,
+      0x86, 0x73, 0x8E, 0xD2, 0xF8, 0x1E, 0xE6, 0x38, 0xC4, 0x5C, 0x3B, 0x9C,
+      0xFD, 0x19, 0x51, 0xDB, 0x5B, 0xCC, 0x14, 0x45, 0xC2, 0xC1, 0x62, 0x5D,
+      0x57, 0xD5, 0x7B, 0x53, 0x90, 0x4B, 0x6A, 0x1A, 0xB6, 0x81, 0x58, 0x07,
+      0x55, 0xE8, 0x9F, 0xA7, 0x97, 0x75, 0xA6, 0x57, 0xCD, 0x62, 0xB4, 0x42,
+      0x63, 0x04, 0xBC, 0x0C, 0x71, 0x1E, 0x28, 0x07, 0xA2, 0xC9, 0xE8, 0x52,
+      0xD4, 0xB4, 0x35, 0x9E, 0xE6, 0xB5, 0x3E, 0x46, 0x75, 0xF5, 0x23, 0xC9,
+      0x07, 0x82, 0x57, 0x2D, 0xC7, 0x36, 0x8F, 0xB4, 0x00, 0xC3, 0x28, 0xC7,
+      0x0F, 0xC8, 0x46, 0xB5, 0xE9, 0x8A, 0x43, 0x30, 0xBB, 0xB6, 0x27, 0xBD,
+      0xD7, 0x84, 0xB4, 0xDA, 0xF0, 0xB1, 0xF6, 0x45, 0x94, 0x49, 0x42, 0xB4,
+      0xC2, 0xB6, 0x22, 0x5C, 0x8B, 0x31, 0xE9, 0x89, 0x54, 0x55, 0x22, 0xBA,
+      0x6F, 0x10, 0x39, 0x60, 0x34, 0xCB, 0x1C, 0xA7, 0x45, 0x97, 0x78, 0x44,
+      0xD5, 0x70, 0x89, 0x4C, 0x61, 0x1A, 0x56, 0x08, 0xA7, 0x57, 0x41, 0x6D,
+      0x6D, 0xE5, 0x99, 0x63, 0xC3, 0x27, 0x98, 0xC4, 0x93, 0xEF, 0xD2, 0x26,
+      0x4C, 0x23, 0x19, 0x10, 0xE9, 0xA3, 0x00, 0x90, 0xCA, 0x7B, 0x53, 0x84,
+      0xF2, 0x31, 0xB8, 0x9B, 0xA6, 0x8A, 0x23, 0x81, 0x90, 0xEF, 0x1A, 0x2A,
+      0x43, 0xCB, 0x01, 0x70, 0x34, 0x70, 0xA0, 0xF0, 0x61, 0xA7, 0x07, 0x38,
+      0x94, 0x4B, 0xCD, 0x9B, 0x70, 0x04, 0xF2, 0x47, 0x97, 0xAE, 0xCB, 0x88,
+      0xB1, 0x09, 0x1C, 0xFE, 0xD0, 0x59, 0x0B, 0x04, 0x15, 0x45, 0x3C, 0x39,
+      0xB6, 0xEC, 0x45, 0xB6, 0x63, 0x05, 0xFA, 0xEA, 0x6B, 0x55, 0xA4, 0xB7,
+      0x96, 0x75, 0x05, 0xFE, 0x38, 0x62, 0xA2, 0x67, 0xAD, 0xBF, 0xE0, 0x5B,
+      0x91, 0x81, 0xA0, 0x65, 0x01, 0x89, 0x33, 0x91, 0x65, 0x0E, 0xAA, 0xA4,
+      0xA6, 0xD1, 0x68, 0x53, 0x34, 0x92, 0x76, 0xF9, 0x8E, 0x0F, 0x44, 0xCD,
+      0x72, 0x66, 0x15, 0xC6, 0x1C, 0x16, 0x71, 0x30, 0x94, 0xD8, 0xAB, 0x09,
+      0x3C, 0xAC, 0x71, 0xF2, 0x80, 0x3E, 0x7D, 0x39, 0x10, 0x9E, 0xF5, 0x00,
+      0x9C, 0x9C, 0x2C, 0xDA, 0xF7, 0xB7, 0xA6, 0xB3, 0x7A, 0x33, 0xA4, 0x98,
+      0x81, 0xF4, 0xBB, 0x5D, 0x72, 0x45, 0xA1, 0x4C, 0x50, 0x42, 0x28, 0x0C,
+      0x76, 0xA8, 0x4E, 0x63, 0xF4, 0x9D, 0x0D, 0x61, 0x9D, 0x46, 0xD7, 0x23,
+      0xBA, 0xA7, 0x47, 0xA3, 0xBA, 0x90, 0xA6, 0xFB, 0x63, 0x7A, 0x9A, 0x1D,
+      0xC0, 0x22, 0x68, 0xFD, 0x5C, 0x04, 0x3D, 0x18, 0xCB, 0xA1, 0x52, 0x8A,
+      0xC8, 0xE2, 0x25, 0xC1, 0xF9, 0x23, 0xD1, 0xCC, 0x84, 0xF2, 0xE7, 0x8E,
+      0x25, 0xDC, 0x3C, 0xCE, 0x93, 0x53, 0xC9, 0xDA, 0xC2, 0xAD, 0x72, 0x6A,
+      0x79, 0xF6, 0x49, 0x40, 0x80, 0x1D, 0xD5, 0x70, 0x1E, 0xFB, 0xDC, 0xB8,
+      0x0A, 0x98, 0xA2, 0x59, 0x93, 0xCD, 0x7F, 0x80, 0x59, 0x13, 0x20, 0xB6,
+      0x31, 0x72, 0x71, 0x86, 0x47, 0xB9, 0x76, 0xA9, 0x8A, 0x77, 0x16, 0x86,
+      0xF0, 0x12, 0x0A, 0x05, 0x3B, 0x0C, 0x44, 0x74, 0x60, 0x43, 0x05, 0x89,
+      0x0F, 0xEC, 0xAF, 0x23, 0x47, 0x5D, 0xDC, 0xC1, 0x1B, 0xC0, 0x8A, 0x9C,
+      0x5F, 0x59, 0x2A, 0xBB, 0x1A, 0x15, 0x3D, 0xB1, 0xB8, 0x83, 0xC0, 0x50,
+      0x7E, 0xB6, 0x8F, 0x78, 0xE0, 0xA1, 0x4D, 0xEB, 0xBF, 0xEE, 0xC6, 0x21,
+      0xE1, 0x0A, 0x69, 0xB6, 0xDA, 0xAF, 0xAA, 0x91, 0x6B, 0x53, 0x95, 0x33,
+      0xE5, 0x08, 0x00, 0x7C, 0x41, 0x88, 0xCE, 0x05, 0xC8, 0x62, 0xD1, 0x01,
+      0xD4, 0xDB, 0x1D, 0xF3, 0xC4, 0x50, 0x2B, 0x8C, 0x8A, 0xE1, 0x45, 0x74,
+      0x88, 0xA3, 0x6E, 0xAD, 0x26, 0x65, 0xBF, 0xAC, 0xB3, 0x21, 0x76, 0x02,
+      0x81, 0xDB, 0x9C, 0xA7, 0x2C, 0x76, 0x14, 0x36, 0x34, 0x04, 0xA0, 0xA8,
+      0xEA, 0xBC, 0x05, 0x8A, 0x23, 0xA3, 0x46, 0x87, 0x5F, 0xA9, 0x6B, 0xB1,
+      0x8A, 0xC2, 0xCC, 0xF0, 0x93, 0xB8, 0xA8, 0x55, 0x67, 0x38, 0x11, 0xCE,
+      0xD4, 0x7C, 0xBE, 0x1E, 0xE8, 0x1D, 0x2C, 0xF0, 0x7E, 0x43, 0xFC, 0x48,
+      0x72, 0x09, 0x08, 0x53, 0x74, 0x31, 0x08, 0x86, 0x5F, 0x02, 0xC5, 0x61,
+      0x2A, 0xA8, 0x71, 0x66, 0x70, 0x7E, 0xE9, 0x0F, 0xFD, 0x5B, 0x80, 0x21,
+      0xF0, 0xAA, 0x01, 0x6E, 0x5D, 0xBC, 0xD9, 0x1F, 0x57, 0xB3, 0x56, 0x2D,
+      0x3A, 0x2B, 0xCF, 0xA2, 0x0A, 0x4C, 0x03, 0x01, 0x0B, 0x8A, 0xA1, 0x44,
+      0xE6, 0x48, 0x28, 0x04, 0xB4, 0x74, 0xFE, 0xC1, 0xF5, 0xE1, 0x38, 0xBE,
+      0x63, 0x2A, 0x3B, 0x9C, 0x82, 0x48, 0x3D, 0xC6, 0x89, 0x0A, 0x13, 0xB1,
+      0xE8, 0xEE, 0x6A, 0xF7, 0x14, 0xEC, 0x5E, 0xFA, 0xC3, 0xB1, 0x97, 0x6B,
+      0x29, 0xDA, 0xDB, 0x60, 0x5B, 0x14, 0xD3, 0x73, 0x2B, 0x5D, 0xE1, 0x18,
+      0x59, 0x65, 0x16, 0x85, 0x81, 0x17, 0xE2, 0x63, 0x4C, 0x4E, 0xA0, 0xCC,
+    },
+
+    .exp = {
+      0xBD, 0x72, 0x56, 0xB2, 0x42, 0xF4, 0x04, 0x86, 0x9D, 0x66, 0x2F, 0x80,
+      0xBF, 0x67, 0x7A, 0x16, 0xC0, 0xC6, 0xFC, 0x15, 0x68, 0xCC, 0xA5, 0xB6,
+      0x45, 0x82, 0xA0, 0x1A, 0x6A, 0x14, 0x2D, 0x71,
+    },
+  }, {
+    .name = "0-pass",
+
+    .ct = {
+      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
+      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
+      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
+      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
+      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
+      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
+      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
+      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
+      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
+      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
+      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
+      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
+      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
+      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
+      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
+      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
+      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
+      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
+      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
+      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
+      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
+      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
+      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
+      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
+      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
+      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
+      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
+      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
+      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
+      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
+      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
+      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
+      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
+      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
+      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
+      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
+      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
+      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
+      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
+      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
+      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
+      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
+      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
+      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
+      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
+      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
+      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
+      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
+      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
+      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
+      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
+      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
+      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
+      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
+      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
+      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
+      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
+      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
+      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
+      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
+      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
+      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
+      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
+      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
+      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
+      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
+      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
+      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
+      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
+      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
+      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
+      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
+      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
+      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
+      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
+      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
+      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
+      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
+      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
+      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
+      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
+      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
+      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
+      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
+      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
+      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
+      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
+      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
+      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
+      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
+      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
+    },
+
+    .dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
+      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
+      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
+      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
+      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
+      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
+      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
+      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
+      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
+      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
+      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
+      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
+      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
+      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
+      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
+      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
+      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
+      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
+      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
+      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
+      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
+      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
+      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
+      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
+      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
+      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
+      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
+      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
+      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
+      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
+      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
+      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
+      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
+      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
+      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
+      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
+      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
+      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
+      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
+      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
+      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
+      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
+      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
+      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
+      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
+      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
+      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
+      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
+      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
+      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
+      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
+      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
+      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
+      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
+      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
+      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
+      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
+      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
+      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
+      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
+      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
+      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
+      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
+      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
+      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
+      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
+      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
+      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
+      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
+      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
+      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
+      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
+      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
+      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
+      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
+      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
+      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
+      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
+      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
+      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
+      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
+      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
+      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
+      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
+      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
+      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
+      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
+      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
+      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
+      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
+      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
+      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
+      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
+      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
+      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
+      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
+      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
+      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
+      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62, 0xb0, 0xa7, 0x40, 0x24,
+      0xca, 0xd0, 0xf1, 0x44, 0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
+      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
+    },
+  }, {
+    .name = "1-fail-implicit-rejection-0: ct[0] = 0",
+
+    .ct = {
+      0x00, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
+      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
+      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
+      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
+      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
+      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
+      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
+      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
+      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
+      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
+      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
+      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
+      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
+      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
+      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
+      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
+      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
+      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
+      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
+      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
+      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
+      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
+      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
+      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
+      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
+      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
+      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
+      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
+      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
+      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
+      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
+      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
+      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
+      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
+      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
+      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
+      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
+      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
+      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
+      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
+      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
+      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
+      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
+      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
+      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
+      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
+      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
+      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
+      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
+      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
+      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
+      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
+      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
+      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
+      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
+      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
+      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
+      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
+      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
+      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
+      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
+      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
+      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
+      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
+      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
+      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
+      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
+      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
+      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
+      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
+      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
+      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
+      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
+      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
+      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
+      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
+      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
+      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
+      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
+      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
+      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
+      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
+      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
+      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
+      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
+      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
+      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
+      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
+      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
+      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
+      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
+    },
+
+    .dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
+      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
+      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
+      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
+      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
+      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
+      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
+      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
+      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
+      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
+      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
+      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
+      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
+      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
+      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
+      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
+      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
+      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
+      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
+      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
+      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
+      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
+      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
+      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
+      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
+      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
+      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
+      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
+      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
+      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
+      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
+      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
+      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
+      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
+      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
+      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
+      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
+      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
+      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
+      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
+      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
+      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
+      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
+      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
+      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
+      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
+      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
+      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
+      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
+      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
+      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
+      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
+      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
+      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
+      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
+      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
+      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
+      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
+      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
+      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
+      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
+      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
+      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
+      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
+      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
+      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
+      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
+      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
+      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
+      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
+      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
+      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
+      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
+      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
+      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
+      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
+      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
+      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
+      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
+      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
+      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
+      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
+      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
+      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
+      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
+      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
+      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
+      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
+      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
+      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
+      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
+      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
+      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
+      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
+      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
+      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
+      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
+      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
+      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0xee, 0x37, 0x19, 0xfd, 0x64, 0xde, 0x38, 0x6f,
+      0x1c, 0x3d, 0xb4, 0xf7, 0xbc, 0x1d, 0x6a, 0x14,
+      0xff, 0x7d, 0x98, 0xaa, 0x5e, 0x57, 0xb3, 0xd5,
+      0xd5, 0x06, 0x1d, 0xae, 0x1e, 0x50, 0x23, 0x4c,
+    },
+  }, {
+    .name = "2-fail-implicit-rejection-1: dk[0] = 0",
+
+    .ct = {
+      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
+      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
+      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
+      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
+      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
+      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
+      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
+      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
+      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
+      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
+      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
+      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
+      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
+      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
+      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
+      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
+      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
+      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
+      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
+      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
+      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
+      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
+      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
+      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
+      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
+      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
+      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
+      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
+      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
+      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
+      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
+      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
+      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
+      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
+      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
+      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
+      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
+      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
+      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
+      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
+      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
+      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
+      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
+      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
+      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
+      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
+      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
+      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
+      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
+      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
+      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
+      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
+      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
+      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
+      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
+      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
+      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
+      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
+      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
+      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
+      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
+      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
+      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
+      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
+      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
+      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
+      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
+      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
+      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
+      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
+      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
+      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
+      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
+      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
+      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
+      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
+      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
+      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
+      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
+      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
+      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
+      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
+      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
+      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
+      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
+      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
+      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
+      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
+      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
+      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
+      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
+    },
+
+    .dk = {
+      0x00, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
+      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
+      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
+      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
+      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
+      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
+      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
+      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
+      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
+      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
+      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
+      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
+      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
+      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
+      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
+      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
+      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
+      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
+      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
+      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
+      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
+      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
+      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
+      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
+      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
+      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
+      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
+      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
+      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
+      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
+      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
+      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
+      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
+      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
+      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
+      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
+      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
+      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
+      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
+      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
+      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
+      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
+      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
+      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
+      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
+      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
+      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
+      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
+      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
+      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
+      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
+      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
+      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
+      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
+      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
+      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
+      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
+      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
+      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
+      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
+      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
+      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
+      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
+      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
+      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
+      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
+      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
+      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
+      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
+      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
+      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
+      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
+      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
+      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
+      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
+      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
+      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
+      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
+      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
+      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
+      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
+      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
+      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
+      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
+      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
+      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
+      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
+      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
+      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
+      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
+      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
+      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
+      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
+      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
+      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
+      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
+      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
+      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
+      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62,
+      0xb0, 0xa7, 0x40, 0x24, 0xca, 0xd0, 0xf1, 0x44,
+      0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
+      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
+    },
+  }, {
+    .name = "2-fail-implicit-rejection-1: dk[0] = 0x01",
+
+    .ct = {
+      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
+      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
+      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
+      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
+      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
+      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
+      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
+      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
+      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
+      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
+      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
+      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
+      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
+      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
+      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
+      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
+      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
+      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
+      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
+      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
+      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
+      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
+      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
+      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
+      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
+      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
+      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
+      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
+      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
+      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
+      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
+      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
+      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
+      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
+      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
+      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
+      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
+      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
+      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
+      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
+      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
+      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
+      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
+      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
+      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
+      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
+      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
+      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
+      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
+      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
+      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
+      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
+      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
+      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
+      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
+      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
+      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
+      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
+      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
+      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
+      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
+      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
+      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
+      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
+      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
+      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
+      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
+      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
+      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
+      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
+      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
+      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
+      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
+      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
+      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
+      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
+      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
+      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
+      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
+      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
+      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
+      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
+      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
+      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
+      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
+      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
+      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
+      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
+      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
+      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
+      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
+    },
+
+    .dk = {
+      0x01, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
+      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
+      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
+      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
+      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
+      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
+      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
+      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
+      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
+      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
+      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
+      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
+      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
+      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
+      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
+      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
+      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
+      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
+      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
+      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
+      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
+      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
+      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
+      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
+      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
+      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
+      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
+      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
+      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
+      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
+      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
+      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
+      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
+      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
+      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
+      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
+      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
+      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
+      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
+      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
+      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
+      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
+      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
+      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
+      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
+      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
+      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
+      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
+      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
+      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
+      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
+      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
+      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
+      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
+      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
+      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
+      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
+      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
+      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
+      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
+      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
+      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
+      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
+      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
+      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
+      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
+      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
+      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
+      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
+      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
+      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
+      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
+      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
+      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
+      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
+      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
+      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
+      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
+      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
+      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
+      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
+      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
+      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
+      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
+      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
+      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
+      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
+      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
+      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
+      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
+      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
+      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
+      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
+      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
+      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
+      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
+      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
+      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
+      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62,
+      0xb0, 0xa7, 0x40, 0x24, 0xca, 0xd0, 0xf1, 0x44,
+      0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
+      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
+    },
+  }, {
+    .name = "3-fail-implicit-rejection-2: dk[0] = 0xff",
+
+    .ct = {
+      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
+      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
+      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
+      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
+      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
+      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
+      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
+      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
+      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
+      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
+      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
+      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
+      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
+      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
+      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
+      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
+      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
+      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
+      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
+      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
+      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
+      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
+      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
+      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
+      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
+      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
+      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
+      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
+      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
+      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
+      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
+      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
+      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
+      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
+      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
+      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
+      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
+      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
+      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
+      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
+      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
+      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
+      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
+      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
+      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
+      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
+      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
+      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
+      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
+      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
+      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
+      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
+      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
+      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
+      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
+      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
+      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
+      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
+      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
+      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
+      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
+      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
+      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
+      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
+      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
+      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
+      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
+      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
+      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
+      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
+      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
+      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
+      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
+      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
+      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
+      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
+      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
+      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
+      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
+      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
+      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
+      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
+      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
+      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
+      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
+      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
+      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
+      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
+      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
+      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
+      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
+    },
+
+    .dk = {
+      0xff, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
+      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
+      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
+      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
+      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
+      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
+      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
+      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
+      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
+      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
+      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
+      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
+      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
+      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
+      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
+      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
+      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
+      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
+      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
+      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
+      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
+      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
+      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
+      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
+      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
+      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
+      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
+      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
+      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
+      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
+      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
+      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
+      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
+      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
+      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
+      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
+      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
+      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
+      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
+      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
+      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
+      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
+      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
+      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
+      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
+      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
+      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
+      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
+      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
+      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
+      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
+      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
+      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
+      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
+      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
+      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
+      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
+      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
+      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
+      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
+      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
+      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
+      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
+      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
+      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
+      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
+      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
+      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
+      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
+      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
+      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
+      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
+      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
+      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
+      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
+      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
+      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
+      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
+      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
+      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
+      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
+      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
+      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
+      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
+      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
+      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
+      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
+      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
+      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
+      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
+      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
+      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
+      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
+      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
+      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
+      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
+      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
+      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
+      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62,
+      0xb0, 0xa7, 0x40, 0x24, 0xca, 0xd0, 0xf1, 0x44,
+      0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
+      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // decapsulate shared key from ciphertext `ct` using KEM768
+    // decapsulation key `dk`, then store result in buffer `got`.
+    uint8_t got[32] = { 0 };
+    fips203ipd_kem768_decaps(got, TESTS[i].ct, TESTS[i].dk);
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_fips203ipd_kem768_roundtrip(void) {
+  uint8_t buf[96] = { 0 };
+
+  for (size_t i = 0; i < NUM_ROUNDTRIP_TIMES; i++) {
+    rand_bytes(buf, sizeof(buf));
+    const uint8_t * const keygen_seed = buf; // 64 bytes
+    const uint8_t * const encaps_seed = buf + 64; // 32 bytes
+
+    // generate encapsulation and decapsulation keys
+    uint8_t ek[FIPS203IPD_KEM768_EK_SIZE] = { 0 };
+    uint8_t dk[FIPS203IPD_KEM768_DK_SIZE] = { 0 };
+    fips203ipd_kem768_keygen(ek, dk, keygen_seed);
+
+    // encapsulate, get key and ciphertext
+    uint8_t k0[32] = { 0 };
+    uint8_t ct[FIPS203IPD_KEM768_CT_SIZE] = { 0 };
+    fips203ipd_kem768_encaps(k0, ct, ek, encaps_seed);
+
+    // decapsulate key from ciphertext
+    uint8_t k1[32] = { 0 };
+    fips203ipd_kem768_decaps(k1, ct, dk);
+
+    // verify that k0 == k1
+    compare_keys(__func__, k0, k1, keygen_seed, encaps_seed);
+  }
+}
+
+static void test_mat4_mul(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t mat[16];
+    const poly_t vec[4];
+    const poly_t exp[4];
+  } TESTS[] = {{
+    .name = "[[1, x, x^2, x^3], ... [x^12, x^13, x^14, x^15]] * [x, x^2, x^3, x^4]^T",
+    //       [     1   x^1   x^2   x^3  ]
+    // mat = [   x^4   x^5   x^6   x^7  ]
+    //       [   x^8   x^9  x^10  x^11  ]
+    //       [  x^12  x^13  x^14  x^15  ]
+    .mat = {
+      { .cs = { [0] = 1 } },
+      { .cs = { [1] = 1 } },
+      { .cs = { [2] = 1 } },
+      { .cs = { [3] = 1 } },
+
+      { .cs = { [4] = 1 } },
+      { .cs = { [5] = 1 } },
+      { .cs = { [6] = 1 } },
+      { .cs = { [7] = 1 } },
+
+      { .cs = { [8] = 1 } },
+      { .cs = { [9] = 1 } },
+      { .cs = { [10] = 1 } },
+      { .cs = { [11] = 1 } },
+
+      { .cs = { [12] = 1 } },
+      { .cs = { [13] = 1 } },
+      { .cs = { [14] = 1 } },
+      { .cs = { [15] = 1 } },
+    },
+
+    //       (  x^1, )
+    // vec = (  x^2, )
+    //       (  x^3  )
+    //       (  x^4  )
+    .vec = {
+      { .cs = { [1] = 1 } },
+      { .cs = { [2] = 1 } },
+      { .cs = { [3] = 1 } },
+      { .cs = { [4] = 1 } },
+    },
+
+    //       (   x^1 +  x^3 +  x^5 +  x^7  )
+    // exp = (   x^5 +  x^7 +  x^9 + x^11  )
+    //       (   x^9 + x^11 + x^13 + x^15  )
+    //       (  x^13 + x^15 + x^17 + x^19  )
+    .exp = {
+      { .cs = {  [1] = 1,  [3] = 1,  [5] = 1,  [7] = 1 } },
+      { .cs = {  [5] = 1,  [7] = 1,  [9] = 1, [11] = 1 } },
+      { .cs = {  [9] = 1, [11] = 1, [13] = 1, [15] = 1 } },
+      { .cs = { [13] = 1, [15] = 1, [17] = 1, [19] = 1 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // populate matrix, apply NTT
+    poly_t mat[16] = { 0 };
+    memcpy(mat, TESTS[i].mat, sizeof(mat));
+    mat4_ntt(mat);
+
+    // populate vector, apply NTT
+    poly_t vec[4] = { 0 };
+    memcpy(vec, TESTS[i].vec, sizeof(vec));
+    vec4_ntt(vec);
+
+    poly_t got[4] = { 0 };
+    mat4_mul(got, mat, vec); // got = mat * vec
+    vec4_inv_ntt(got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec4_write(stderr, "got", got);
+      fprintf(stderr, "exp:\n");
+      vec4_write(stderr, "exp", TESTS[i].exp);
+    }
+  }
+}
+
+static void test_vec4_add(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t a[4]; // test value a
+    const poly_t b[4]; // test value b
+    const poly_t exp[4]; // expected value
+  } TESTS[] = {{
+    .name = "[1, x, x^2, x^3]^T + [x^4, x^5, x^6, x^7]^T",
+    .a = {
+      { .cs = { [0] = 1 } },
+      { .cs = { [1] = 1 } },
+      { .cs = { [2] = 1 } },
+      { .cs = { [3] = 1 } },
+    },
+
+    .b = {
+      { .cs = { [4] = 1 } },
+      { .cs = { [5] = 1 } },
+      { .cs = { [6] = 1 } },
+      { .cs = { [7] = 1 } },
+    },
+
+    .exp = {
+      { .cs = { [0] = 1, [4] = 1 } },
+      { .cs = { [1] = 1, [5] = 1 } },
+      { .cs = { [2] = 1, [6] = 1 } },
+      { .cs = { [3] = 1, [7] = 1 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t got[4] = { 0 };
+    memcpy(got, TESTS[i].a, sizeof(got)); // got = a
+
+    vec4_add(got, TESTS[i].b); // got += b
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec4_write(stderr, "got", got);
+      fprintf(stderr, "exp:\n");
+      vec4_write(stderr, "exp", TESTS[i].exp);
+    }
+  }
+}
+
+static void test_vec4_dot(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t a[4]; // test value a
+    const poly_t b[4]; // test value b
+    const poly_t exp; // expected value
+  } TESTS[] = {{
+    .name = "[1, x, x^2, x^3] * [x^4, x^5, x^6, x^7]^T",
+    .a = {
+      { .cs = { [0] = 1 } },
+      { .cs = { [1] = 1 } },
+      { .cs = { [2] = 1 } },
+      { .cs = { [3] = 1 } },
+    },
+
+    .b = {
+      { .cs = { [4] = 1 } },
+      { .cs = { [5] = 1 } },
+      { .cs = { [6] = 1 } },
+      { .cs = { [7] = 1 } },
+    },
+
+    .exp = { .cs = { [4] = 1, [6] = 1, [8] = 1, [10] = 1 } },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t a[4], b[4];
+
+    memcpy(a, TESTS[i].a, sizeof(a));
+    vec4_ntt(a); // a = NTT(a)
+
+    memcpy(b, TESTS[i].b, sizeof(b));
+    vec4_ntt(b); // b = NTT(b)
+
+    poly_t got = { 0 };
+    vec4_dot(&got, a, b); // got = a * b
+    poly_inv_ntt(&got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
+      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
+    }
+  }
+}
+
+static void test_vec4_ntt(void) {
+  static const struct {
+    const char *name; // test name
+    const poly_t exp[4]; // expected value
+  } TESTS[] = {{
+    .name = "[1, x, x^2, x^3]^T",
+    .exp = {
+      { .cs = { [0] = 1 } },
+      { .cs = { [1] = 1 } },
+      { .cs = { [2] = 1 } },
+      { .cs = { [3] = 1 } },
+    },
+  }, {
+    .name = "[x^4, x^5, x^6, x^7]^T",
+    .exp = {
+      { .cs = { [4] = 1 } },
+      { .cs = { [5] = 1 } },
+      { .cs = { [6] = 1 } },
+      { .cs = { [7] = 1 } },
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    poly_t got[4] = { 0 };
+    memcpy(got, TESTS[i].exp, sizeof(got));
+    vec4_ntt(got); // got = NTT(exp)
+    vec4_inv_ntt(got); // got = InvNTT(got)
+
+    // check for expected value
+    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
+      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
+      vec4_write(stderr, "got", got);
+      fprintf(stderr, "\nexp:\n");
+      vec4_write(stderr, "exp", TESTS[i].exp);
+      fputs("\n", stderr);
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const poly_t val[4]; // test vector
+} VEC4_ENCODE_TESTS[] = {{
+  .name = "basic",
+  .val = {
+    { .cs = { 1, 2, 3, 4, 5 } },
+    { .cs = { 3328, 3327, 3326, 3325, 3324 } },
+    { .cs = { 100, 200, 300, 400, 500 } },
+    { .cs = { 2432, 1234, 567, 890, 876 } },
+  },
+}};
+
+DEF_TEST_VEC_FNS(4)
+DEF_TEST_VEC_BIT_FNS(4, 11)
+
+static const struct {
+  const char *name; // test name
+  const uint8_t seed[32]; // test seed
+  const uint8_t exp_ek[PKE1024_EK_SIZE]; // expected ek (1568 bytes)
+  const uint8_t exp_dk[PKE1024_DK_SIZE]; // expected dk (1536 bytes)
+} PKE1024_KEYGEN_TESTS[] = {{
+  .name = "all-zero",
+  .seed = { 0 },
+  .exp_ek = {
+    0xe4, 0xb4, 0x3d, 0xd6, 0xb4, 0x02, 0xb6, 0x1c, 0x32, 0xf0, 0x19, 0x1d,
+    0x13, 0xb1, 0xb5, 0x4c, 0x50, 0xb8, 0xdc, 0xc2, 0x24, 0x48, 0x28, 0x64,
+    0xd7, 0xc8, 0x18, 0xf7, 0xa2, 0x42, 0xa8, 0x18, 0x1e, 0x32, 0x63, 0xbc,
+    0x43, 0x32, 0x50, 0x1b, 0x23, 0x59, 0xdb, 0xa9, 0xa8, 0x42, 0x18, 0x86,
+    0x24, 0x87, 0xa5, 0x4b, 0x4a, 0x6a, 0xfd, 0x4a, 0xa8, 0xed, 0x86, 0x68,
+    0x00, 0xe1, 0xaf, 0x36, 0xd7, 0xb6, 0xd3, 0x49, 0x81, 0x21, 0x74, 0x07,
+    0x38, 0xc4, 0xca, 0xfb, 0x10, 0xca, 0x54, 0x74, 0x3f, 0x4b, 0xe2, 0x07,
+    0xdd, 0xa5, 0x2e, 0xa1, 0xc9, 0xb1, 0x4a, 0x36, 0x81, 0x9f, 0x58, 0x18,
+    0x91, 0x5b, 0x74, 0x6f, 0xdc, 0xa9, 0x75, 0x7a, 0x4b, 0x59, 0x47, 0x69,
+    0xc8, 0x76, 0xa5, 0x30, 0xec, 0x95, 0xfb, 0x56, 0x8a, 0xce, 0xf0, 0x3f,
+    0x90, 0x04, 0x99, 0xb0, 0xb2, 0xca, 0xaa, 0x01, 0x58, 0xbe, 0x13, 0x7e,
+    0x86, 0x4c, 0x95, 0x46, 0x1b, 0x34, 0x22, 0xe8, 0xcd, 0x0a, 0x88, 0x8c,
+    0xa7, 0xd3, 0x02, 0xcf, 0xf8, 0x6a, 0x64, 0x03, 0x8f, 0xce, 0x28, 0x91,
+    0xba, 0xb6, 0x69, 0xd2, 0x81, 0x04, 0xa8, 0xf6, 0xa1, 0xb8, 0x64, 0xa1,
+    0x8e, 0x03, 0x7b, 0x39, 0x54, 0xb7, 0x56, 0x18, 0x45, 0xc4, 0x4a, 0x31,
+    0x8e, 0x87, 0x36, 0xfe, 0x09, 0x0d, 0xf1, 0x8a, 0x7d, 0xb7, 0xdb, 0x52,
+    0x8f, 0x24, 0x5d, 0x09, 0xe9, 0x01, 0xa5, 0x7a, 0x40, 0xc9, 0x3a, 0x0b,
+    0xb1, 0x77, 0x24, 0x80, 0xb7, 0x89, 0xa4, 0x98, 0x25, 0xf7, 0xd4, 0x7e,
+    0xe5, 0x7c, 0x73, 0xb5, 0xf3, 0x4c, 0x80, 0x19, 0x24, 0xea, 0xeb, 0x60,
+    0xe8, 0x29, 0x87, 0xe0, 0xb9, 0x6f, 0x50, 0x69, 0x45, 0x34, 0x98, 0x23,
+    0x93, 0xd7, 0x0b, 0xaa, 0x67, 0x65, 0xcf, 0xb8, 0xc0, 0xe0, 0x81, 0x17,
+    0xa2, 0x12, 0xa7, 0xe8, 0x0c, 0x14, 0x16, 0xc4, 0xb1, 0x7f, 0xd6, 0x55,
+    0xcf, 0x62, 0x89, 0xe3, 0xc6, 0x12, 0x92, 0xf2, 0x0a, 0x2c, 0x82, 0x9d,
+    0x94, 0x04, 0xc9, 0x6a, 0x34, 0x11, 0x83, 0x0b, 0x9f, 0x20, 0x4c, 0x01,
+    0x02, 0xf2, 0x06, 0x51, 0x18, 0x77, 0xf4, 0x6a, 0x89, 0x31, 0xdc, 0x01,
+    0x5d, 0x00, 0x03, 0xfc, 0x78, 0xb1, 0xe6, 0x55, 0x12, 0x3c, 0xa0, 0x14,
+    0xbd, 0xc4, 0xc3, 0x92, 0xbb, 0xaf, 0x7d, 0x1c, 0x4e, 0x99, 0xe7, 0x93,
+    0xf5, 0x22, 0x28, 0xaf, 0xe3, 0xc9, 0x34, 0xf4, 0xc4, 0xc3, 0x36, 0x36,
+    0xa5, 0x60, 0x93, 0x7e, 0xc0, 0xa2, 0x65, 0xa6, 0x96, 0x62, 0x52, 0x81,
+    0xdf, 0x60, 0x7f, 0x0a, 0x4c, 0x06, 0x62, 0xd3, 0x77, 0x70, 0x03, 0x50,
+    0x2f, 0x47, 0x4e, 0xb7, 0xe8, 0x94, 0xca, 0xf4, 0x47, 0x9f, 0xea, 0xb4,
+    0x18, 0xb1, 0x36, 0x04, 0x71, 0xb9, 0x6f, 0xda, 0xbe, 0x8c, 0xf4, 0x5f,
+    0x3c, 0x59, 0xce, 0x79, 0x99, 0x2e, 0xf8, 0xab, 0x1f, 0x4a, 0x8a, 0x1d,
+    0xc1, 0xe0, 0x30, 0xba, 0xf9, 0xc0, 0x21, 0x71, 0x42, 0xb7, 0xc9, 0x38,
+    0x55, 0xd8, 0x34, 0x1f, 0x49, 0x23, 0xcd, 0x27, 0x66, 0x93, 0xd3, 0x68,
+    0x6f, 0xc4, 0xc9, 0x6c, 0x47, 0x03, 0xad, 0x60, 0x4c, 0x34, 0x38, 0x58,
+    0x2b, 0xfb, 0x03, 0x6f, 0xd9, 0x62, 0xb0, 0xf8, 0xa0, 0xf4, 0xd6, 0x22,
+    0x3b, 0x0c, 0xb0, 0x38, 0x32, 0x15, 0xe7, 0xdb, 0x8c, 0x75, 0x82, 0x93,
+    0x39, 0x33, 0xad, 0x09, 0x51, 0x19, 0xfb, 0xca, 0x1f, 0x35, 0xd0, 0x3e,
+    0x82, 0x56, 0x2a, 0x4e, 0x17, 0x20, 0x4a, 0x45, 0x59, 0x27, 0x06, 0x0a,
+    0xef, 0xec, 0x25, 0x96, 0xc6, 0xca, 0x48, 0x7b, 0x3e, 0x3b, 0x94, 0xcc,
+    0x4d, 0x3b, 0x15, 0x84, 0xb7, 0x90, 0x80, 0x55, 0x5c, 0x87, 0x9c, 0x69,
+    0xae, 0xc2, 0xa8, 0xca, 0xcc, 0xb0, 0x0e, 0xf0, 0x23, 0xab, 0xa8, 0x86,
+    0x72, 0x12, 0x01, 0x34, 0x2a, 0x2b, 0xe6, 0x8b, 0x67, 0xc9, 0x31, 0x24,
+    0x80, 0x44, 0x1d, 0x9b, 0x71, 0x56, 0x8e, 0x69, 0x0e, 0x20, 0x72, 0x8f,
+    0xb2, 0x27, 0x49, 0xcc, 0xca, 0x94, 0x86, 0x79, 0xaa, 0x70, 0xd5, 0xac,
+    0xef, 0xe3, 0x8a, 0x91, 0xe0, 0x26, 0xf4, 0x25, 0x08, 0xb4, 0x49, 0xc7,
+    0x19, 0xd5, 0x70, 0x27, 0xfa, 0x42, 0xb6, 0x23, 0xb2, 0x80, 0x14, 0x69,
+    0x91, 0x90, 0x0c, 0x85, 0x4b, 0x72, 0x5d, 0xc3, 0xb6, 0x56, 0xc4, 0xb9,
+    0xe7, 0xa6, 0x97, 0xbd, 0x57, 0x19, 0x11, 0x5b, 0x7c, 0xbf, 0xd2, 0x68,
+    0x21, 0x49, 0x35, 0x05, 0xdb, 0x5f, 0x9e, 0x40, 0xa4, 0x4f, 0x2a, 0x38,
+    0x17, 0x7c, 0x3b, 0xc4, 0x52, 0x5b, 0xfe, 0x05, 0x60, 0x6e, 0xc6, 0x5b,
+    0x77, 0x29, 0x4c, 0x16, 0xa1, 0x8c, 0x93, 0x94, 0x53, 0xc6, 0x61, 0x41,
+    0x78, 0x9a, 0x9d, 0xb5, 0x51, 0x5a, 0x2d, 0x23, 0x0a, 0x34, 0xa1, 0xad,
+    0x5e, 0x62, 0x2a, 0x0c, 0x27, 0xcb, 0xca, 0x07, 0xc4, 0x9f, 0x35, 0x9e,
+    0x4f, 0x25, 0x5f, 0xd7, 0x04, 0x8a, 0x93, 0xe8, 0xcf, 0x12, 0x08, 0x64,
+    0xd0, 0x69, 0x66, 0x4c, 0xc3, 0x0b, 0xe2, 0x61, 0xb6, 0x31, 0xa9, 0x11,
+    0x43, 0x6b, 0x49, 0x1e, 0xf0, 0x19, 0x86, 0xea, 0x3b, 0xf8, 0x91, 0x5f,
+    0x20, 0xca, 0x52, 0x66, 0x41, 0xcb, 0x44, 0xfa, 0x96, 0x31, 0x69, 0xb2,
+    0x09, 0x9b, 0x30, 0x7f, 0x86, 0x13, 0x15, 0x96, 0x02, 0x49, 0x88, 0x94,
+    0x6b, 0x01, 0x4e, 0x12, 0xf6, 0x74, 0x65, 0x89, 0x7a, 0xbe, 0x25, 0x04,
+    0xf2, 0xf8, 0x13, 0x9a, 0x7b, 0x1c, 0x94, 0xbb, 0x5f, 0xfc, 0x73, 0x24,
+    0x70, 0x1c, 0xa4, 0xa6, 0x2b, 0xcf, 0xa3, 0x42, 0xba, 0xfe, 0x53, 0x6f,
+    0xc4, 0x02, 0x2c, 0xbc, 0xb1, 0x9a, 0x2b, 0x74, 0x6f, 0xdd, 0x44, 0x2c,
+    0x45, 0x6b, 0x98, 0xa2, 0x77, 0x6f, 0x0c, 0x40, 0x9f, 0x94, 0x43, 0x0d,
+    0x33, 0xa0, 0xbd, 0x94, 0x36, 0x38, 0x1f, 0x49, 0x43, 0xbc, 0xc6, 0x8c,
+    0x6e, 0xe0, 0x89, 0x57, 0xc1, 0xb9, 0x4c, 0x95, 0x43, 0x74, 0xe6, 0xb0,
+    0x1b, 0x83, 0xaf, 0x8b, 0x3b, 0x2b, 0xe0, 0x18, 0x47, 0xe5, 0xd0, 0x4f,
+    0x74, 0x2b, 0xbb, 0x30, 0xbc, 0xcf, 0xb8, 0x52, 0x8b, 0x58, 0xf9, 0x7e,
+    0x5a, 0xb8, 0x48, 0xae, 0x68, 0x30, 0x01, 0x66, 0x0e, 0x69, 0xb4, 0xbc,
+    0xa0, 0x60, 0x2c, 0xbb, 0x43, 0xb3, 0xd5, 0xa2, 0x88, 0xaa, 0x8b, 0x93,
+    0x8c, 0x26, 0x67, 0x0d, 0x31, 0xa7, 0x9f, 0x70, 0x4a, 0x14, 0x54, 0x6b,
+    0x52, 0xfc, 0xbc, 0x81, 0x69, 0xa8, 0xfd, 0xd5, 0x40, 0x66, 0x0a, 0x3a,
+    0x56, 0xe3, 0x69, 0x39, 0xa7, 0x53, 0xd6, 0x39, 0x24, 0x73, 0x58, 0xad,
+    0xb6, 0xb4, 0xb7, 0xeb, 0xf0, 0x97, 0x96, 0x48, 0x25, 0xb7, 0xea, 0x80,
+    0x05, 0x68, 0x0f, 0x2a, 0xe5, 0x82, 0x0a, 0x6b, 0xcf, 0x60, 0xa6, 0x15,
+    0x28, 0x2b, 0x71, 0x07, 0x36, 0xba, 0xe6, 0xbb, 0x55, 0xe7, 0x48, 0xad,
+    0x3f, 0xb7, 0x3d, 0xd3, 0xac, 0xa0, 0x3e, 0x0a, 0x68, 0xf6, 0xb7, 0x13,
+    0xcf, 0xa6, 0x1b, 0x20, 0x16, 0xca, 0x8a, 0x47, 0x64, 0xaf, 0x25, 0x6e,
+    0xb9, 0xf8, 0x76, 0xfe, 0x6a, 0x70, 0x3f, 0xa1, 0x64, 0xd6, 0xec, 0x9a,
+    0x27, 0xc6, 0x84, 0xfd, 0xe5, 0x00, 0x1d, 0x75, 0x94, 0xdf, 0x70, 0x04,
+    0x59, 0x10, 0x46, 0xb3, 0xca, 0xaf, 0x65, 0x48, 0x81, 0x9b, 0x60, 0x38,
+    0xcd, 0xf3, 0x78, 0xa0, 0x33, 0xb8, 0x7c, 0x8c, 0x1a, 0x45, 0x04, 0x57,
+    0x13, 0x12, 0x5d, 0x4e, 0x61, 0x7f, 0x7c, 0x52, 0xb7, 0xdc, 0x27, 0x0c,
+    0x7c, 0x55, 0x2a, 0xdb, 0x03, 0x2e, 0xf6, 0x38, 0x11, 0x71, 0x3b, 0x06,
+    0x6e, 0x33, 0xc2, 0xc1, 0x42, 0x5b, 0x02, 0x14, 0xa1, 0xe3, 0xd8, 0xcf,
+    0x69, 0xb5, 0xc3, 0x37, 0xd1, 0x6b, 0x12, 0xd3, 0x64, 0x60, 0xfc, 0x3a,
+    0xd1, 0x4c, 0x27, 0x20, 0xf8, 0x69, 0xae, 0x4b, 0xa2, 0x94, 0xf6, 0x2c,
+    0x67, 0xe2, 0x47, 0x40, 0xb8, 0x93, 0x52, 0xa3, 0x8a, 0x73, 0x4c, 0xb5,
+    0x35, 0xb5, 0x8b, 0x6d, 0x94, 0x56, 0x8d, 0x2c, 0x65, 0xa6, 0xd6, 0x62,
+    0x3b, 0xb5, 0xc9, 0x05, 0x51, 0x3f, 0x62, 0x20, 0x1d, 0x48, 0xcb, 0x60,
+    0xa9, 0x46, 0xc9, 0x7c, 0x86, 0x5f, 0x96, 0xc9, 0xc4, 0xdf, 0x39, 0x33,
+    0x45, 0x23, 0xa1, 0xd1, 0x53, 0x95, 0xa9, 0x01, 0x95, 0xa3, 0xb5, 0x7b,
+    0x34, 0xb1, 0xb7, 0xc1, 0x27, 0x94, 0x4c, 0x2a, 0x2a, 0x39, 0xc2, 0xc0,
+    0x67, 0xa7, 0x14, 0xac, 0x13, 0xcb, 0x76, 0x8a, 0x68, 0xb4, 0xab, 0x6a,
+    0x97, 0x34, 0x69, 0xf0, 0xa4, 0x42, 0xd7, 0xe0, 0x7a, 0x70, 0x25, 0x43,
+    0x29, 0xd8, 0x01, 0x92, 0x69, 0x27, 0xd7, 0xfb, 0xbc, 0xc8, 0x88, 0x47,
+    0x68, 0x62, 0x33, 0x6e, 0xa2, 0x02, 0x6d, 0x68, 0xaa, 0x34, 0x8b, 0x4b,
+    0x6e, 0x3c, 0xb9, 0x72, 0xd4, 0x2c, 0xc0, 0x98, 0x29, 0x14, 0x79, 0xa4,
+    0xbe, 0x24, 0xb2, 0x33, 0xa7, 0x15, 0x5f, 0xb9, 0xaa, 0x77, 0x35, 0x3e,
+    0xbb, 0xc6, 0x4f, 0x0e, 0x0a, 0xa0, 0x28, 0x4a, 0xcc, 0x51, 0xf5, 0xc9,
+    0x26, 0x31, 0x5e, 0x0b, 0x44, 0x00, 0x79, 0xa7, 0x61, 0x9b, 0xb4, 0xb2,
+    0xe8, 0x08, 0x80, 0xd5, 0x1c, 0x1c, 0x18, 0xcb, 0xcc, 0xae, 0xa0, 0x4d,
+    0xe7, 0xc5, 0x69, 0xbe, 0xf5, 0x31, 0x61, 0xe3, 0xc3, 0xb7, 0x31, 0x0e,
+    0x91, 0x37, 0x53, 0x0e, 0x41, 0x0d, 0x40, 0xca, 0x55, 0xa6, 0xa5, 0x1f,
+    0x62, 0xe2, 0x21, 0x4e, 0x62, 0x2b, 0xd0, 0x25, 0x5b, 0x71, 0xab, 0x59,
+    0x44, 0xc5, 0x0f, 0x92, 0xb6, 0x34, 0x2c, 0xe7, 0xc2, 0xf6, 0xeb, 0x6c,
+    0x01, 0x87, 0x70, 0xa9, 0x08, 0x0e, 0x20, 0x54, 0x6e, 0xa9, 0x81, 0x2b,
+    0x7c, 0xe6, 0x5c, 0x7a, 0xa5, 0xae, 0x0a, 0xa6, 0x5d, 0x2f, 0x90, 0x36,
+    0xa9, 0xe4, 0x5c, 0x7d, 0xda, 0x0d, 0xc3, 0x2b, 0x31, 0x13, 0x65, 0xba,
+    0xcf, 0x48, 0x9d, 0x9e, 0x70, 0x88, 0x02, 0xb1, 0x62, 0x6c, 0x39, 0x2f,
+    0x9a, 0xa0, 0x0c, 0xb6, 0xd5, 0xa2, 0x37, 0xf3, 0xbc, 0xa3, 0x90, 0x8c,
+    0x0c, 0x85, 0x39, 0x93, 0xe9, 0x4a, 0x55, 0x8a, 0x05, 0x51, 0xa3, 0x75,
+    0x55, 0x51, 0x53, 0xd3, 0x44, 0x30, 0xb4, 0xf5, 0xa1, 0x6e, 0xd4, 0x48,
+    0x2d, 0x95, 0x06, 0x30, 0xca, 0x3f, 0xea, 0x06, 0x1c, 0xa0, 0xe5, 0x83,
+    0x6d, 0x18, 0x12, 0x70, 0x0b, 0xca, 0x26, 0xd3, 0x6d, 0x92, 0x0a, 0x3c,
+    0x49, 0xd9, 0x46, 0xcb, 0xd8, 0xa1, 0xf2, 0x01, 0x0a, 0x3e, 0x8b, 0x44,
+    0xe4, 0x9b, 0x14, 0x28, 0x23, 0x3a, 0x7a, 0x3a, 0x7e, 0x2c, 0x09, 0x64,
+    0xec, 0x47, 0xca, 0xc2, 0xb6, 0xa5, 0x27, 0x31, 0x0f, 0xe3, 0x19, 0x61,
+    0x45, 0xf0, 0xb7, 0x00, 0xb1, 0xbc, 0xac, 0xd9, 0x4b, 0x8a, 0xfb, 0x9e,
+    0x1f, 0x33, 0x66, 0xac, 0xb7, 0x83, 0xf3, 0x7a, 0xbd, 0xc8, 0x98, 0xbf,
+    0x1a, 0x6b, 0x9e, 0xf4, 0x8b, 0x60, 0x71, 0xe2, 0x9c, 0xa9, 0x48, 0x1c,
+    0x14, 0x83, 0x04, 0x03, 0x96, 0x4a, 0xa6, 0xf2, 0xae, 0xb2, 0x23, 0x42,
+    0xc0, 0x81, 0x6d, 0x7e, 0x02, 0x25, 0x7d, 0x41, 0xa8, 0x8f, 0x79, 0x0a,
+    0x13, 0x72, 0x71, 0x97, 0x42, 0xac, 0xaf, 0x76, 0x0d, 0x7b, 0x41, 0x29,
+    0x04, 0x64, 0x4d, 0x8b, 0x0b, 0x9c, 0x7f, 0xf3, 0x3a, 0xe7, 0xaa, 0x08,
+    0x06, 0xa7, 0x45, 0x4a, 0x38, 0xc8, 0x1c, 0xb5, 0x31, 0x9b, 0xf3, 0x46,
+    0x90, 0x21, 0x2b, 0x06, 0xe3, 0xb6, 0xf6, 0xab, 0x7f, 0x05, 0xe0, 0x1e,
+    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+  },
+
+  .exp_dk = {
+    0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+    0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+    0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+    0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+    0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+    0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+    0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+    0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+    0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+    0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+    0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+    0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+    0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+    0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+    0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+    0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+    0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+    0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+    0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+    0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+    0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+    0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+    0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+    0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+    0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+    0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+    0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+    0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+    0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+    0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+    0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+    0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+    0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+    0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+    0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+    0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+    0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+    0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+    0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+    0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+    0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+    0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+    0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+    0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+    0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+    0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+    0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+    0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+    0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+    0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+    0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+    0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+    0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+    0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+    0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+    0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+    0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+    0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+    0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+    0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+    0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+    0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+    0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+    0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+    0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+    0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+    0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+    0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+    0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+    0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+    0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+    0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+    0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+    0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+    0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+    0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+    0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+    0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+    0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+    0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+    0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+    0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+    0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+    0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+    0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+    0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+    0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+    0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+    0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+    0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+    0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+    0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+    0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+    0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+    0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+    0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+    0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+    0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+    0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+    0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+    0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+    0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+    0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+    0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+    0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+    0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+    0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+    0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+    0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+    0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+    0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+    0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+    0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+    0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+    0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+    0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+    0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+    0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+    0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+    0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+    0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+    0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+    0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+    0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+    0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+    0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+    0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+    0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+  },
+}, {
+  // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+  .name = "Key Generation -- ML-KEM-1024",
+
+  .seed = {
+    // d
+    0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED, 0x63, 0x88, 0x63, 0x8E,
+    0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F, 0xFD, 0xF2, 0xB6, 0x7C,
+    0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
+  },
+
+  .exp_ek = {
+    0x70, 0xE1, 0x3F, 0x30, 0x15, 0x17, 0xB5, 0xA4, 0x0D, 0x70, 0x36, 0x1F,
+    0x63, 0x09, 0x41, 0x60, 0x67, 0x64, 0x6D, 0x2B, 0x71, 0x36, 0x62, 0x6B,
+    0xCC, 0xCC, 0x17, 0x0C, 0x66, 0xCE, 0xD4, 0x90, 0xC7, 0x35, 0x34, 0x4B,
+    0x62, 0x77, 0x09, 0x7C, 0xA9, 0x14, 0x21, 0x2A, 0x29, 0x2D, 0xD1, 0x22,
+    0xFB, 0xB6, 0x9F, 0xDE, 0xCA, 0x47, 0xFA, 0xB4, 0x53, 0x2B, 0x8C, 0x80,
+    0xCE, 0xB7, 0x7F, 0x9C, 0x54, 0x3E, 0x0B, 0xF1, 0x53, 0x6D, 0x1C, 0x0C,
+    0xAE, 0x07, 0x7E, 0x2C, 0xA7, 0x86, 0x2B, 0x45, 0xA4, 0x10, 0x46, 0x9C,
+    0xC5, 0xB7, 0x06, 0xBA, 0xE0, 0x05, 0x1C, 0xB2, 0x96, 0x1D, 0xB7, 0x27,
+    0x0B, 0x75, 0xB7, 0x11, 0x69, 0x8D, 0x2B, 0x80, 0x70, 0x40, 0xD5, 0x62,
+    0x81, 0x29, 0x43, 0x6F, 0xBB, 0x58, 0xF1, 0x20, 0x3F, 0x75, 0x56, 0x14,
+    0x65, 0xF5, 0x42, 0x57, 0xE4, 0x4D, 0x33, 0xF5, 0x12, 0xD6, 0x33, 0x43,
+    0x1D, 0x00, 0xA2, 0xFB, 0x02, 0x30, 0xC9, 0xBB, 0x9C, 0xDD, 0xFC, 0x83,
+    0xBD, 0x65, 0xC9, 0x74, 0x45, 0x30, 0x21, 0x86, 0xA1, 0x72, 0x23, 0xAD,
+    0x21, 0x33, 0x28, 0x03, 0xB9, 0x09, 0xE5, 0xE5, 0x67, 0x19, 0x70, 0xBB,
+    0xB0, 0xF1, 0xC4, 0x83, 0x7B, 0xB8, 0x42, 0x73, 0xBA, 0x67, 0x5A, 0xC0,
+    0x74, 0xC5, 0x29, 0x0B, 0x41, 0x1C, 0x25, 0x00, 0x65, 0x70, 0x59, 0x33,
+    0x9D, 0xE3, 0x92, 0xF9, 0xCA, 0x30, 0x89, 0x52, 0xA2, 0x20, 0x1A, 0x58,
+    0x87, 0x67, 0xAD, 0xC0, 0x35, 0xBD, 0xF3, 0x30, 0x24, 0xEA, 0x3B, 0x9A,
+    0x83, 0xC5, 0xA0, 0xB9, 0xC5, 0x42, 0x5D, 0x14, 0x07, 0x0C, 0x81, 0xAA,
+    0xDA, 0x26, 0xBA, 0xC3, 0xFB, 0xB8, 0xD4, 0xB7, 0xCF, 0xEE, 0x03, 0x92,
+    0x37, 0x5C, 0x68, 0x42, 0x73, 0x51, 0xDF, 0xEC, 0x63, 0x60, 0x9B, 0xBB,
+    0x50, 0xB4, 0x63, 0xE0, 0x40, 0x92, 0x85, 0x70, 0x09, 0xD1, 0xE5, 0xB8,
+    0x1D, 0x70, 0x7D, 0x14, 0xB8, 0x33, 0xCD, 0x4A, 0x0B, 0x55, 0x1B, 0xAA,
+    0x13, 0xEC, 0x48, 0x8A, 0x15, 0x03, 0xB0, 0x46, 0x7E, 0xE4, 0x02, 0x3C,
+    0x3F, 0xE0, 0x32, 0xC7, 0x82, 0x25, 0x06, 0x38, 0x86, 0xE2, 0x46, 0x8E,
+    0x00, 0xF7, 0x00, 0x07, 0x2A, 0x2E, 0xC8, 0xDA, 0x6A, 0xFB, 0x20, 0x6C,
+    0x91, 0x90, 0x44, 0x33, 0xBB, 0xCC, 0xB0, 0xE7, 0x6F, 0x42, 0x46, 0x8C,
+    0x40, 0xEB, 0x5F, 0x59, 0xCB, 0x9A, 0xE1, 0xB0, 0x35, 0xE5, 0x21, 0x51,
+    0x0B, 0xF2, 0x16, 0xA1, 0xAB, 0xCB, 0x19, 0x03, 0x3B, 0x7A, 0x65, 0x88,
+    0x97, 0xC6, 0x58, 0x74, 0xD5, 0x13, 0x51, 0x83, 0x14, 0x9F, 0x97, 0x9E,
+    0x55, 0x3C, 0xCF, 0xBF, 0xA3, 0x90, 0x0C, 0xDA, 0x6F, 0x01, 0x96, 0x0B,
+    0x75, 0x15, 0x7F, 0x54, 0x53, 0xAA, 0x6E, 0x73, 0xB3, 0xED, 0x90, 0x2F,
+    0x7D, 0x7C, 0x93, 0x05, 0x97, 0x1B, 0xDF, 0x72, 0x2E, 0x29, 0x37, 0x16,
+    0x9A, 0x1B, 0xC0, 0xFA, 0xEB, 0x6C, 0x92, 0xF7, 0x15, 0x0D, 0x23, 0x30,
+    0x87, 0x7C, 0x5D, 0xC5, 0x24, 0x9A, 0xAE, 0x20, 0x30, 0x26, 0x34, 0xC5,
+    0xC5, 0xB2, 0x30, 0x53, 0x52, 0x10, 0x28, 0x12, 0x25, 0x42, 0xF4, 0x85,
+    0xA0, 0xEA, 0xC8, 0x69, 0x22, 0x37, 0x20, 0x63, 0x36, 0x51, 0xF5, 0xB2,
+    0x47, 0xC6, 0x62, 0xB3, 0x1A, 0x10, 0x53, 0x8C, 0xA7, 0x49, 0x1B, 0x14,
+    0x37, 0xAA, 0x74, 0xF4, 0x28, 0x2D, 0x12, 0x97, 0x4D, 0x9C, 0x93, 0x4D,
+    0xF2, 0x14, 0x78, 0x5B, 0x64, 0x18, 0x46, 0x8B, 0x92, 0xE5, 0x25, 0x28,
+    0xC8, 0x44, 0x7A, 0x1C, 0xA4, 0x22, 0xFA, 0x6C, 0xC8, 0x8E, 0x28, 0xB0,
+    0x59, 0xF0, 0x4B, 0x23, 0x59, 0x73, 0x23, 0xF7, 0x2F, 0x3E, 0x23, 0x36,
+    0xF8, 0x7C, 0x47, 0x90, 0x5C, 0xBA, 0x65, 0x5B, 0xB7, 0x3F, 0xC3, 0x2E,
+    0x18, 0xD4, 0xB7, 0x87, 0x05, 0xC7, 0x82, 0xEB, 0xCB, 0x43, 0xE2, 0x78,
+    0x5C, 0x82, 0xC5, 0xAF, 0x24, 0xB0, 0xE1, 0x69, 0x9C, 0xFB, 0xC0, 0x25,
+    0x74, 0x75, 0x79, 0x9A, 0x53, 0x9B, 0x11, 0xA5, 0x0F, 0x4D, 0xF2, 0xB7,
+    0xFA, 0xA2, 0x0B, 0xD8, 0x82, 0x75, 0x15, 0xCA, 0x37, 0x0F, 0x89, 0xC0,
+    0xD4, 0xC6, 0x09, 0x02, 0xF6, 0x56, 0x7C, 0xD6, 0x0B, 0x08, 0x60, 0xA5,
+    0x5B, 0xC8, 0x57, 0x2C, 0x43, 0x6C, 0x24, 0x6A, 0xC2, 0x76, 0x64, 0x4E,
+    0x7D, 0x60, 0x2A, 0xA5, 0x7C, 0x01, 0x66, 0x20, 0x18, 0x14, 0x99, 0x1C,
+    0x1B, 0xD7, 0x5C, 0x7C, 0x47, 0xC3, 0x48, 0xB6, 0x7D, 0x77, 0x61, 0x33,
+    0x86, 0x90, 0x81, 0x44, 0xEA, 0x83, 0xFF, 0x72, 0x1F, 0x9A, 0x50, 0x07,
+    0x6C, 0x51, 0x01, 0x64, 0xD1, 0x8E, 0x05, 0xD0, 0x5D, 0x98, 0x84, 0xC4,
+    0x41, 0x46, 0xA0, 0x7C, 0xCA, 0xCF, 0x89, 0x04, 0x98, 0xED, 0x1A, 0x19,
+    0xB2, 0xA1, 0x54, 0x31, 0x72, 0x9D, 0xC1, 0xF1, 0x2B, 0x7E, 0xA1, 0x0F,
+    0x9F, 0x92, 0x80, 0x62, 0xD1, 0x45, 0x4B, 0x4B, 0x9F, 0x68, 0xE5, 0x99,
+    0x90, 0x29, 0x0B, 0xE3, 0x72, 0x8B, 0x32, 0x89, 0x56, 0x93, 0x63, 0xAB,
+    0x10, 0x05, 0x13, 0x1B, 0x23, 0x81, 0xA0, 0x8C, 0xC2, 0xBF, 0x94, 0x3E,
+    0x95, 0xD5, 0xB2, 0x1B, 0xC6, 0xAA, 0xBC, 0x22, 0x73, 0x34, 0x8B, 0xC7,
+    0x2B, 0xD0, 0x93, 0xB7, 0xB5, 0x61, 0x7A, 0xE8, 0x7F, 0x60, 0x2B, 0xB9,
+    0x89, 0xE6, 0xAF, 0xC4, 0x4B, 0x81, 0x51, 0x20, 0x76, 0xA3, 0xA8, 0x76,
+    0xE0, 0xE2, 0x5F, 0x97, 0x62, 0xB4, 0x62, 0x08, 0x19, 0x85, 0x50, 0x2F,
+    0x26, 0xB2, 0x87, 0xA2, 0x93, 0x6D, 0x5B, 0x1A, 0xCF, 0xFC, 0xEC, 0x4E,
+    0xEE, 0x77, 0xA9, 0xCB, 0xA9, 0x80, 0xEB, 0x9B, 0x5F, 0xDE, 0x75, 0x53,
+    0x9F, 0x65, 0x09, 0x04, 0x67, 0x7D, 0xBE, 0x29, 0xAB, 0x8B, 0xB9, 0x18,
+    0xA3, 0x49, 0x48, 0x03, 0xEC, 0xA5, 0x9A, 0x2C, 0x32, 0xE5, 0xB5, 0xC8,
+    0x3B, 0x0B, 0x80, 0xB1, 0x10, 0x2C, 0xD7, 0xD9, 0x48, 0x2B, 0x45, 0x9B,
+    0x6B, 0x74, 0x49, 0x1E, 0xC3, 0x0C, 0x4B, 0xE7, 0x7C, 0x2B, 0x52, 0x4A,
+    0xF7, 0xB3, 0xAD, 0x1F, 0x71, 0x34, 0x1D, 0xF0, 0xA7, 0x6F, 0x25, 0x5C,
+    0x29, 0x03, 0xC8, 0x82, 0x08, 0x07, 0x93, 0x79, 0x93, 0x0A, 0x95, 0x13,
+    0xF3, 0x90, 0x12, 0x6E, 0x73, 0x2A, 0x2B, 0xB0, 0x94, 0xBF, 0xA6, 0xBF,
+    0x0A, 0x43, 0x2B, 0xCD, 0x65, 0x7D, 0xAF, 0xCB, 0x25, 0xC8, 0xBB, 0x15,
+    0xE0, 0x95, 0x5D, 0x09, 0x9B, 0x74, 0xFF, 0x1A, 0x4D, 0xE6, 0x55, 0x9C,
+    0xD6, 0x79, 0x7C, 0x38, 0xC4, 0x8C, 0x11, 0x34, 0xCA, 0x2C, 0x97, 0x92,
+    0x43, 0xF3, 0x15, 0x2A, 0xF4, 0xBB, 0xE4, 0xD7, 0xA6, 0xBC, 0x09, 0x87,
+    0x21, 0x33, 0x92, 0x0C, 0xD2, 0x3B, 0x3E, 0xF9, 0x84, 0x8C, 0xCC, 0x68,
+    0x45, 0xD6, 0x47, 0xB5, 0x38, 0x75, 0x57, 0x73, 0x65, 0x13, 0xD5, 0x85,
+    0x60, 0x84, 0x51, 0x92, 0xF9, 0x26, 0x51, 0x59, 0x93, 0x2E, 0x57, 0x2A,
+    0x88, 0xC4, 0x4E, 0x65, 0x66, 0x76, 0x0C, 0x06, 0x1C, 0x67, 0xFC, 0xB5,
+    0xBF, 0x21, 0x00, 0x95, 0xE2, 0x14, 0xDA, 0x74, 0x53, 0x57, 0xE3, 0x69,
+    0x96, 0xD8, 0xC0, 0x66, 0x31, 0x1B, 0xBC, 0x76, 0x1A, 0x1F, 0xD2, 0x52,
+    0x73, 0xD2, 0x1E, 0xAB, 0x50, 0x01, 0x05, 0x63, 0xCD, 0x64, 0x68, 0xA4,
+    0xEA, 0x83, 0x6B, 0x6D, 0x64, 0xBD, 0x2B, 0xD7, 0x6D, 0xBE, 0x35, 0x82,
+    0xD5, 0x73, 0x6A, 0x60, 0x5A, 0x55, 0x09, 0xFC, 0x28, 0x78, 0x9B, 0x56,
+    0xB8, 0x84, 0xAE, 0x9A, 0x60, 0x41, 0x5F, 0x55, 0x67, 0x4B, 0xE6, 0x01,
+    0x57, 0x6C, 0x7C, 0xEE, 0x58, 0x14, 0x3B, 0xF0, 0x54, 0x80, 0x6A, 0xBC,
+    0xB3, 0x45, 0xA2, 0x56, 0xCB, 0xC4, 0x54, 0xE3, 0x43, 0xF3, 0xCC, 0x7A,
+    0xDE, 0x65, 0x56, 0x2F, 0xD2, 0x9E, 0xB2, 0x59, 0x73, 0x7B, 0xB3, 0xCF,
+    0x96, 0x49, 0xBD, 0xEA, 0x28, 0x3F, 0xB0, 0x72, 0x65, 0x67, 0x7C, 0x98,
+    0x08, 0xD1, 0x31, 0x19, 0xC0, 0xA2, 0xAD, 0xF7, 0x45, 0xDE, 0x69, 0x75,
+    0xF4, 0x56, 0x2C, 0xD6, 0x15, 0x57, 0xB3, 0x96, 0x5D, 0x2B, 0x07, 0x2F,
+    0x00, 0x0A, 0xA7, 0xE0, 0xA3, 0x57, 0xE1, 0x25, 0x3E, 0xAF, 0xEA, 0x7F,
+    0xDF, 0xCC, 0x92, 0xFA, 0x87, 0x63, 0x0D, 0xD2, 0x27, 0x6C, 0xE4, 0x2E,
+    0x82, 0x0B, 0x69, 0xD1, 0xFC, 0x2E, 0x47, 0xD5, 0xC4, 0x98, 0xA5, 0x5B,
+    0x3B, 0x29, 0xC3, 0x4E, 0x64, 0x90, 0x3D, 0x04, 0x7A, 0xB1, 0xC0, 0x40,
+    0x24, 0x95, 0x8F, 0x70, 0x11, 0x95, 0xF5, 0xD1, 0x3E, 0xC6, 0x70, 0x6B,
+    0x84, 0x48, 0x50, 0x3A, 0x54, 0x99, 0x22, 0xA5, 0x8A, 0x24, 0xB6, 0x7C,
+    0x93, 0x63, 0x27, 0x56, 0xB7, 0x7D, 0x22, 0x54, 0x07, 0x31, 0x61, 0x71,
+    0xDE, 0xEC, 0x56, 0x71, 0x44, 0x35, 0xCF, 0x94, 0xCC, 0xF4, 0x59, 0x9E,
+    0x00, 0xD1, 0x0E, 0x56, 0x96, 0x22, 0xBA, 0xDA, 0x82, 0x0C, 0x45, 0x2F,
+    0x25, 0x42, 0xAD, 0xF0, 0x87, 0x65, 0xCA, 0x93, 0xAE, 0x38, 0xEB, 0x02,
+    0x5D, 0xE3, 0x1C, 0xFF, 0x79, 0x74, 0x54, 0x9A, 0x78, 0x25, 0xA8, 0x31,
+    0xDD, 0x05, 0x4E, 0x87, 0xB8, 0x4C, 0x5F, 0x25, 0x47, 0xFF, 0x47, 0xB4,
+    0x6F, 0x88, 0xC9, 0x9F, 0x15, 0x48, 0xE9, 0x33, 0xA6, 0xF4, 0xD8, 0x7F,
+    0x1A, 0x4A, 0x1B, 0x00, 0xE3, 0x9E, 0x02, 0xD6, 0x0E, 0x51, 0xEB, 0x60,
+    0x3C, 0x1C, 0x0D, 0x80, 0x7A, 0xCD, 0xAB, 0x08, 0xBA, 0xA2, 0xB9, 0x98,
+    0x69, 0xB7, 0x5C, 0xA2, 0xC4, 0xB9, 0x63, 0x68, 0xB5, 0x17, 0x80, 0xBD,
+    0x1E, 0xC7, 0x5B, 0x11, 0x0B, 0x9F, 0xA6, 0x65, 0x56, 0x87, 0x6C, 0x5F,
+    0x48, 0x79, 0x7D, 0x09, 0x01, 0x38, 0xF7, 0x54, 0xAE, 0x30, 0x53, 0x3D,
+    0x36, 0xAA, 0x44, 0xB9, 0xB1, 0x70, 0x2A, 0x6A, 0x8A, 0x56, 0x62, 0x6B,
+    0xF0, 0x45, 0x1A, 0x37, 0xA7, 0xAC, 0x1A, 0x33, 0x70, 0x76, 0xE5, 0x1E,
+    0x0A, 0x6B, 0x03, 0x00, 0xC2, 0xC7, 0x90, 0xA4, 0x43, 0x7E, 0xA2, 0x8D,
+    0x7E, 0xC9, 0x8C, 0x41, 0x9B, 0x37, 0xD6, 0xAA, 0x97, 0x04, 0x17, 0x43,
+    0x5F, 0x91, 0xBE, 0xDC, 0x2B, 0x1F, 0x4B, 0xC8, 0x15, 0x8A, 0x51, 0xB1,
+    0xF4, 0x71, 0x51, 0x6F, 0xE8, 0x24, 0x28, 0x7C, 0x89, 0x6B, 0x89, 0x1B,
+    0x49, 0xF2, 0x54, 0xDD, 0x36, 0x35, 0x9B, 0x89, 0xC8, 0x24, 0xEB, 0x3F,
+    0x62, 0x48, 0x02, 0x7F, 0xBB, 0xAD, 0x4C, 0xF2, 0x91, 0x18, 0xCB, 0x50,
+    0xEB, 0xB6, 0x25, 0xA3, 0x7C, 0x53, 0x7A, 0x02, 0x23, 0xF0, 0xEB, 0x70,
+    0x85, 0xB5, 0xC7, 0xEC, 0x60, 0x75, 0x70, 0xDB, 0x91, 0x85, 0xD5, 0x99,
+    0x02, 0xBC, 0x26, 0xC6, 0x54, 0xA2, 0x80, 0x4C, 0x0D, 0x94, 0x67, 0x93,
+    0xD8, 0xA2, 0x14, 0x82, 0xAC, 0x4F, 0x05, 0xE9, 0x01, 0x62, 0x60, 0x33,
+    0x1D, 0xCC, 0x58, 0xBC, 0x66, 0xAF, 0x3C, 0xA7, 0x58, 0x54, 0x40, 0x21,
+    0x6A, 0xA0, 0x26, 0x3B, 0x2A, 0x72, 0x5E, 0x08, 0x0F, 0x6F, 0x9C, 0x5B,
+    0x6A, 0x9C, 0x9D, 0xA2, 0x93, 0x55, 0x18, 0x9B, 0x4B, 0x95, 0xB1, 0x37,
+    0xD1, 0x22, 0x5F, 0x25, 0x2A, 0xC7, 0x97, 0xB0, 0x64, 0x6C, 0xAC, 0x52,
+    0x16, 0x4B, 0x59, 0x72, 0xA9, 0x92, 0x65, 0xD3, 0x47, 0xFC, 0x7C, 0x35,
+    0x91, 0xD1, 0x5F, 0xFE, 0x68, 0x1C, 0x06, 0xD4, 0x38, 0xCC, 0xEB, 0x60,
+    0xBB, 0x63, 0x10, 0xB7, 0x95, 0x32, 0x89, 0x72, 0x0E, 0x2C, 0x72, 0x87,
+    0x30, 0x05, 0x23, 0x37, 0xAC, 0xA7, 0xC8, 0x52, 0x1A, 0xB4, 0x4F, 0x1E,
+    0x2A, 0x04, 0x9B, 0x83, 0xE0, 0x77, 0x4C, 0x96, 0xCD, 0x8C, 0x87, 0x6F,
+    0xA6, 0x75, 0xD0, 0x92, 0x39, 0x77, 0x27, 0x1B,
+  },
+
+  .exp_dk = {
+    0x8A, 0xD0, 0xB5, 0xF0, 0x9A, 0x25, 0xAA, 0x93, 0x5D, 0xD9, 0xDA, 0x34,
+    0xAB, 0x82, 0xCA, 0x75, 0xA1, 0x2D, 0x66, 0xE9, 0x9C, 0xF4, 0x8B, 0xCA,
+    0x45, 0xB9, 0xB2, 0xDB, 0x44, 0x1B, 0xC2, 0x97, 0x1B, 0xDC, 0x99, 0x22,
+    0xB5, 0xF8, 0xBC, 0x3C, 0x06, 0x78, 0x54, 0x67, 0x59, 0x07, 0x3C, 0xB8,
+    0x8E, 0x26, 0xBA, 0xD1, 0xB1, 0xB3, 0xA4, 0x64, 0x6A, 0x65, 0x29, 0xC6,
+    0x32, 0xEA, 0xA3, 0x47, 0x73, 0x4A, 0x3B, 0xE5, 0x83, 0xD4, 0x71, 0x78,
+    0x09, 0x4C, 0x4A, 0x67, 0x0C, 0xBC, 0x41, 0xEC, 0x06, 0x89, 0x76, 0x56,
+    0x68, 0x54, 0x2E, 0x6F, 0x15, 0xA7, 0xD5, 0x86, 0xC9, 0xE2, 0x6A, 0x6A,
+    0x03, 0xC7, 0x14, 0x69, 0xC2, 0xC5, 0x3F, 0x7B, 0x14, 0x1B, 0x23, 0x2D,
+    0x86, 0x21, 0x6A, 0x25, 0xC7, 0xA8, 0xF3, 0x68, 0x52, 0x85, 0x8C, 0x07,
+    0xA9, 0x52, 0x4E, 0xE1, 0x7B, 0xA6, 0x34, 0x0A, 0xA2, 0xA2, 0x15, 0xC1,
+    0xEA, 0x85, 0x21, 0x67, 0xB6, 0x89, 0x1C, 0xC1, 0x66, 0xC2, 0xFA, 0x13,
+    0xA0, 0x27, 0x0A, 0x22, 0x98, 0x34, 0x13, 0xE0, 0xAC, 0xC4, 0x44, 0xBF,
+    0x40, 0xE2, 0x8C, 0x45, 0xE1, 0x4E, 0x07, 0x40, 0x4F, 0x62, 0x99, 0x63,
+    0x69, 0x59, 0x7F, 0x10, 0xFC, 0xC1, 0x80, 0xEC, 0xAC, 0xAD, 0x1A, 0x67,
+    0x19, 0xAB, 0x9F, 0x1B, 0x44, 0x7A, 0xE1, 0x9A, 0x2C, 0xB0, 0x2A, 0x7D,
+    0x04, 0x20, 0x61, 0x72, 0x16, 0x8C, 0x4F, 0x0A, 0x99, 0xBA, 0xFA, 0x93,
+    0x2D, 0x66, 0x49, 0xE8, 0x94, 0xA8, 0xF0, 0x57, 0x7B, 0x81, 0xC6, 0x64,
+    0x83, 0xC5, 0xB5, 0xCF, 0x60, 0xAE, 0x75, 0xA4, 0x44, 0x52, 0x6A, 0x9B,
+    0x36, 0x74, 0x32, 0x5F, 0xBA, 0x38, 0xF5, 0x32, 0x96, 0x42, 0x1A, 0x78,
+    0x50, 0x11, 0xC1, 0xDD, 0xB3, 0xA6, 0x99, 0x77, 0x45, 0xDB, 0x83, 0xCD,
+    0x58, 0x3C, 0x0C, 0x41, 0x77, 0xC7, 0x97, 0xD4, 0x0A, 0x4F, 0x69, 0x9F,
+    0x1F, 0x40, 0xC5, 0x41, 0x3A, 0xC4, 0xE4, 0x23, 0x73, 0x49, 0x2B, 0x6A,
+    0x2C, 0x6A, 0x40, 0x6D, 0x43, 0x7F, 0x42, 0x57, 0x0B, 0x5E, 0x94, 0x9E,
+    0xF4, 0x35, 0x0D, 0xEA, 0x79, 0x0C, 0xFE, 0xB7, 0x2D, 0x12, 0x87, 0x51,
+    0x7F, 0xE3, 0x27, 0x3D, 0x3C, 0xA6, 0x5A, 0x13, 0xCA, 0x6E, 0x23, 0xC5,
+    0x7B, 0xF0, 0x7D, 0xA0, 0x4B, 0x85, 0x1C, 0xF3, 0xAF, 0xA1, 0x8B, 0xAF,
+    0x5E, 0xF0, 0x20, 0x79, 0x28, 0x57, 0xA9, 0xE7, 0x21, 0xF0, 0x1B, 0x9F,
+    0xEA, 0x7B, 0x61, 0x2E, 0x4C, 0x6E, 0x29, 0x07, 0x93, 0x66, 0xB0, 0x22,
+    0x86, 0x88, 0xBE, 0x2A, 0x06, 0x7F, 0xBE, 0x92, 0x84, 0x2D, 0xD2, 0x80,
+    0xB3, 0xC7, 0x4D, 0xFA, 0xB7, 0x61, 0xE6, 0x13, 0xA8, 0x60, 0x4C, 0x47,
+    0x6E, 0x15, 0x46, 0x66, 0x85, 0xC6, 0x95, 0xAC, 0x35, 0x79, 0x1A, 0x91,
+    0x59, 0x94, 0x2F, 0x60, 0x17, 0x0C, 0xA2, 0x14, 0xC7, 0xC0, 0x9B, 0x1A,
+    0x4B, 0x1B, 0xCC, 0x4F, 0x4C, 0xC6, 0x0D, 0xF0, 0x1A, 0x10, 0x19, 0x15,
+    0xA9, 0xA2, 0xBC, 0x55, 0x31, 0x19, 0x66, 0x50, 0x32, 0xDC, 0xD9, 0x47,
+    0x6F, 0xBA, 0x7B, 0xB0, 0x71, 0x57, 0xD3, 0x3C, 0x9C, 0x8E, 0xFA, 0x6B,
+    0xD0, 0xAC, 0x38, 0xC1, 0xAC, 0x26, 0x5F, 0xB5, 0x18, 0x57, 0xD0, 0x15,
+    0x17, 0x61, 0x53, 0x26, 0xCA, 0x0E, 0x08, 0x65, 0x0B, 0xA6, 0xFA, 0x40,
+    0x83, 0x2C, 0x7B, 0x4C, 0x41, 0xB6, 0x44, 0x71, 0x60, 0x22, 0xB6, 0x52,
+    0xB1, 0x92, 0x7D, 0x55, 0xC9, 0xB3, 0x7F, 0xE2, 0x5F, 0x1A, 0xB6, 0x7A,
+    0x9A, 0x03, 0xC7, 0x00, 0x8C, 0x84, 0xB0, 0x7C, 0x49, 0x26, 0xB6, 0x38,
+    0x1E, 0x40, 0xCF, 0xD4, 0x41, 0x04, 0x12, 0x35, 0x18, 0x74, 0x16, 0xCE,
+    0xC3, 0x66, 0xCA, 0x6F, 0xB7, 0x6F, 0xA0, 0xAB, 0x6E, 0x32, 0x8A, 0x26,
+    0x41, 0xFC, 0x47, 0xDC, 0xD7, 0x6E, 0x91, 0xCA, 0x94, 0x31, 0xE1, 0x9B,
+    0xFF, 0x02, 0xCE, 0x62, 0x28, 0xC2, 0x33, 0x63, 0x82, 0xF8, 0xA1, 0x0E,
+    0x9E, 0xE2, 0xC8, 0xF1, 0x75, 0x93, 0x90, 0xA2, 0x00, 0x24, 0xA1, 0x5B,
+    0x3B, 0x09, 0x0C, 0x13, 0x90, 0xCA, 0x03, 0x43, 0x79, 0x72, 0x84, 0x24,
+    0x6B, 0xD8, 0x94, 0x35, 0x07, 0xB7, 0xA6, 0xB7, 0x1F, 0xC3, 0x3A, 0x03,
+    0xB7, 0xA8, 0x83, 0x66, 0xE4, 0xAF, 0xED, 0x51, 0x57, 0x39, 0xE5, 0xC6,
+    0x9F, 0x8A, 0x26, 0x6E, 0x4A, 0x1F, 0x53, 0xD7, 0x39, 0x30, 0xE9, 0x87,
+    0x55, 0x69, 0x31, 0x2B, 0x27, 0x03, 0x7E, 0x5C, 0x7F, 0x85, 0x21, 0x00,
+    0xC2, 0xBA, 0x36, 0x48, 0xB1, 0xB9, 0xC1, 0xB1, 0x49, 0xF6, 0x25, 0x0E,
+    0x0A, 0x6B, 0x06, 0x52, 0x13, 0x13, 0x4F, 0x30, 0x25, 0x69, 0x75, 0x5B,
+    0x8C, 0x5C, 0x4F, 0xFC, 0x68, 0x0B, 0xF7, 0x81, 0x18, 0x45, 0x34, 0x00,
+    0x35, 0xF1, 0x70, 0xB0, 0x68, 0xBA, 0x67, 0xA4, 0xC3, 0xB0, 0x16, 0x6D,
+    0x03, 0xCC, 0x82, 0x61, 0x84, 0x01, 0x90, 0xA2, 0x0F, 0x9A, 0x3B, 0x1E,
+    0xF4, 0x65, 0xC2, 0xF2, 0x18, 0x2D, 0xA8, 0xDA, 0x8D, 0x3B, 0x3C, 0x8C,
+    0xB1, 0x29, 0x15, 0xF7, 0xD9, 0x3E, 0x04, 0xD8, 0x84, 0x0C, 0x35, 0x67,
+    0x25, 0x5A, 0x7B, 0xD6, 0xD4, 0x33, 0xCF, 0x10, 0x68, 0xD8, 0x84, 0x52,
+    0xCF, 0xC1, 0x1F, 0x99, 0x1B, 0x7C, 0xE3, 0x79, 0x27, 0xD6, 0xCA, 0xAE,
+    0x88, 0x10, 0x74, 0x2F, 0x42, 0x14, 0x8B, 0x89, 0x6E, 0xC4, 0xEB, 0xB5,
+    0x34, 0x03, 0x86, 0x31, 0x5B, 0x2C, 0x1E, 0x2B, 0x43, 0x91, 0x5C, 0x04,
+    0x54, 0x9C, 0xC8, 0xC1, 0x9A, 0xB4, 0x0E, 0x3B, 0x7C, 0x31, 0x1B, 0x42,
+    0x61, 0x10, 0xA9, 0xBB, 0xB1, 0x8D, 0x3B, 0x99, 0x2A, 0x42, 0xC0, 0x18,
+    0x92, 0x90, 0xBE, 0x67, 0x3A, 0x39, 0x7C, 0x40, 0x90, 0x44, 0x3B, 0x88,
+    0xC5, 0xD5, 0xC5, 0x65, 0xA1, 0x0F, 0xEA, 0x05, 0x60, 0x3D, 0x36, 0x24,
+    0x4A, 0x4A, 0xA8, 0xE9, 0x25, 0x5C, 0xF1, 0x84, 0xAE, 0x69, 0x53, 0x5A,
+    0x83, 0x99, 0xC1, 0xC6, 0xF7, 0x6C, 0xF2, 0x34, 0x2A, 0xDF, 0xEA, 0x6A,
+    0x44, 0x7B, 0xB4, 0x50, 0x1B, 0x9A, 0x6C, 0x44, 0x59, 0x3E, 0xB0, 0x43,
+    0xE7, 0xA5, 0x50, 0x2F, 0x58, 0x6C, 0xF3, 0x40, 0x7D, 0xEB, 0x7A, 0x0F,
+    0xC3, 0x2B, 0x3F, 0x46, 0xF1, 0x24, 0x5C, 0x55, 0x96, 0xE0, 0xF1, 0xBE,
+    0xD9, 0x37, 0x20, 0x7C, 0x45, 0x09, 0xE1, 0xD8, 0x98, 0x5B, 0xE7, 0x45,
+    0xFD, 0x69, 0xBF, 0x44, 0x80, 0x92, 0x43, 0x30, 0x28, 0xBE, 0x25, 0x95,
+    0x90, 0x33, 0x11, 0x47, 0x95, 0x86, 0xA3, 0x4B, 0x2D, 0x49, 0x10, 0x74,
+    0x10, 0xBC, 0x4B, 0xD2, 0x96, 0x53, 0x17, 0xFC, 0x76, 0x35, 0x2B, 0x63,
+    0x8D, 0xF3, 0xB3, 0xA3, 0x15, 0x32, 0x50, 0x26, 0x80, 0x9E, 0x3B, 0xC4,
+    0x60, 0x8C, 0x0B, 0x2C, 0xB8, 0x4D, 0xF0, 0xC9, 0x5B, 0xC0, 0x52, 0x70,
+    0x7F, 0xC1, 0xA3, 0x77, 0xB2, 0xB4, 0x65, 0xEB, 0x7A, 0x5D, 0x64, 0x4A,
+    0xB4, 0x27, 0x8D, 0xDC, 0xE5, 0xB6, 0x1E, 0x2B, 0xB3, 0xA7, 0x10, 0x52,
+    0x55, 0x5C, 0xB3, 0xBA, 0xC6, 0x93, 0xEF, 0x02, 0x5F, 0xF0, 0x03, 0x53,
+    0xFB, 0x76, 0x94, 0x5B, 0x8A, 0xA3, 0xE9, 0x95, 0x0F, 0x92, 0x73, 0x81,
+    0x87, 0x91, 0xCC, 0xAD, 0x56, 0x88, 0x46, 0x58, 0x14, 0x2A, 0x2B, 0x4D,
+    0xF3, 0xC5, 0x7E, 0xCA, 0x13, 0xAD, 0x44, 0xB4, 0x9B, 0x63, 0x46, 0xC6,
+    0x3E, 0xE8, 0x90, 0x78, 0x58, 0x9E, 0x9E, 0xB9, 0xA9, 0x80, 0x4A, 0x03,
+    0xBF, 0x7A, 0x27, 0x6F, 0x86, 0xB9, 0x67, 0x6C, 0x58, 0xD3, 0xE7, 0x1D,
+    0x2C, 0x87, 0x70, 0x80, 0x4A, 0x61, 0x59, 0x21, 0x78, 0xB4, 0x49, 0xC7,
+    0x95, 0x5B, 0xBE, 0x8C, 0xF4, 0x2F, 0x31, 0x67, 0x25, 0xE3, 0xB1, 0x6D,
+    0x55, 0xB5, 0x27, 0xCF, 0xB2, 0x32, 0x68, 0x1B, 0x21, 0xB2, 0xCB, 0x2F,
+    0x30, 0xAC, 0x76, 0x01, 0x5B, 0xB5, 0x41, 0x6A, 0x04, 0x11, 0xC1, 0x74,
+    0x58, 0x92, 0x41, 0x2E, 0x68, 0x3A, 0x98, 0xD7, 0x36, 0xED, 0x1A, 0x4C,
+    0xD9, 0x80, 0x61, 0x7D, 0x08, 0x21, 0xC2, 0xAB, 0x02, 0x82, 0x07, 0x0A,
+    0x61, 0x1A, 0x11, 0xD1, 0x97, 0x01, 0xFB, 0xD5, 0x5A, 0x21, 0x27, 0xB3,
+    0x24, 0xE6, 0x90, 0x1D, 0x84, 0x98, 0x6C, 0x04, 0x64, 0xDE, 0x71, 0x20,
+    0xAF, 0x45, 0x10, 0xAF, 0x59, 0x1D, 0xD9, 0xBB, 0x79, 0x47, 0x9C, 0x5F,
+    0xA8, 0x87, 0x14, 0xC6, 0xA9, 0x97, 0x14, 0xF7, 0x6A, 0x1E, 0x40, 0x2C,
+    0x8F, 0x38, 0x4A, 0x4E, 0xE6, 0xBC, 0xD4, 0x15, 0x00, 0x72, 0x4C, 0xC1,
+    0x79, 0x3A, 0xBF, 0xD8, 0xD3, 0xC2, 0xF3, 0x20, 0x39, 0x71, 0x34, 0xB0,
+    0x0F, 0x76, 0x2D, 0xBA, 0x85, 0xA2, 0x3A, 0xF1, 0x55, 0xE6, 0xCC, 0x03,
+    0x73, 0x80, 0xC1, 0xDD, 0x64, 0xA9, 0x73, 0xDB, 0x35, 0xB7, 0x44, 0x70,
+    0x44, 0x8B, 0x24, 0x21, 0x20, 0x62, 0x76, 0x47, 0x87, 0xE5, 0xA9, 0x3A,
+    0x48, 0x80, 0x71, 0x71, 0xA7, 0x71, 0x5C, 0xFC, 0x89, 0xBC, 0xBC, 0x9E,
+    0x14, 0x18, 0x86, 0xF8, 0x07, 0xA1, 0xF9, 0xD6, 0x84, 0xC8, 0x42, 0x6F,
+    0x01, 0x22, 0x88, 0x7D, 0x9C, 0x4C, 0x27, 0xEA, 0x69, 0xCC, 0x15, 0x1B,
+    0x4D, 0x49, 0xB5, 0x1E, 0x5A, 0x4E, 0xAA, 0xA5, 0xAD, 0x06, 0xAB, 0xA8,
+    0x6D, 0xF9, 0x42, 0xE9, 0x86, 0xA5, 0xD5, 0x79, 0x20, 0x80, 0xFC, 0x48,
+    0x03, 0x96, 0xB3, 0x94, 0x86, 0x68, 0xFB, 0x38, 0x2C, 0xC8, 0xFC, 0x15,
+    0x47, 0x48, 0xCB, 0x30, 0xB7, 0x64, 0x1F, 0x02, 0x70, 0xC8, 0x34, 0x38,
+    0xB4, 0xFC, 0x3D, 0x19, 0x01, 0x26, 0x58, 0x80, 0x40, 0x51, 0x77, 0xBC,
+    0x7F, 0x44, 0x78, 0x82, 0x51, 0xAB, 0xC4, 0x74, 0x27, 0x35, 0x31, 0x21,
+    0x2A, 0x66, 0x27, 0x9E, 0x70, 0x33, 0x7A, 0x23, 0x09, 0xFD, 0xF4, 0x9E,
+    0x05, 0x9B, 0xBD, 0xAF, 0x49, 0x73, 0xA5, 0x37, 0x7A, 0x4D, 0x51, 0x7B,
+    0xA7, 0x55, 0x70, 0x2C, 0x37, 0xCC, 0x35, 0x56, 0x85, 0x40, 0x4C, 0x95,
+    0x2F, 0xB6, 0x7E, 0x04, 0x19, 0xC7, 0x8D, 0x15, 0x84, 0xD0, 0x94, 0x92,
+    0x54, 0xD0, 0x49, 0x52, 0xF7, 0x24, 0x3B, 0xF1, 0x40, 0x28, 0x03, 0xC9,
+    0xFC, 0x73, 0x73, 0x25, 0x88, 0x13, 0x78, 0xCA, 0x77, 0xEE, 0xF5, 0xC4,
+    0x15, 0xFB, 0x03, 0x7D, 0x68, 0x9A, 0x58, 0x54, 0xA1, 0xD2, 0x4B, 0x65,
+    0x27, 0xA5, 0x9B, 0x9B, 0x16, 0x95, 0x93, 0x84, 0x35, 0x8C, 0x42, 0x3C,
+    0x79, 0x64, 0x5C, 0xCF, 0x31, 0x33, 0xE2, 0x1B, 0x4B, 0x64, 0x95, 0x7B,
+    0x14, 0xF6, 0x3F, 0x2A, 0xA2, 0x63, 0x57, 0xB1, 0xC2, 0x62, 0xF2, 0xA9,
+    0x0F, 0x7C, 0xCC, 0x2A, 0x15, 0x93, 0x69, 0x99, 0xB0, 0xA1, 0xB4, 0x98,
+    0xAB, 0x3B, 0x32, 0x43, 0x30, 0x32, 0xC9, 0xCA, 0x23, 0x08, 0x1C, 0x55,
+    0xD3, 0x1C, 0xAD, 0x36, 0xE9, 0x0C, 0x1C, 0xE0, 0xB5, 0xFC, 0x24, 0x7C,
+    0xE8, 0xC8, 0x43, 0xF2, 0x88, 0x35, 0x24, 0xB6, 0x64, 0xFA, 0xC1, 0xB2,
+    0x0B, 0xE6, 0x02, 0xA1, 0x0A, 0xAF, 0x65, 0x73, 0x86, 0x80, 0xBB, 0x10,
+    0x25, 0x44, 0x26, 0xF9, 0xCB, 0x09, 0xA1, 0x95, 0x4D, 0xB7, 0x65, 0x56,
+    0x22, 0x30, 0x8F, 0xAE, 0xF5, 0x05, 0xAC, 0xB4, 0x97, 0x55, 0x4A, 0x8F,
+    0xCF, 0xA9, 0x6A, 0x85, 0x25, 0x5A, 0xD8, 0x46, 0x54, 0x20, 0x13, 0xB8,
+    0x41, 0x59, 0x51, 0xBD, 0xD4, 0x5C, 0x01, 0x93, 0x1E, 0xBE, 0x58, 0x3E,
+  },
+}};
+
+static void test_pke1024_keygen(void) {
+  for (size_t i = 0; i < sizeof(PKE1024_KEYGEN_TESTS)/sizeof(PKE1024_KEYGEN_TESTS[0]); i++) {
+    // generate pke1024 ek and dk from seed
+    uint8_t got_ek[PKE1024_EK_SIZE] = { 0 }, got_dk[PKE1024_DK_SIZE] = { 0 };
+    pke1024_keygen(got_ek, got_dk, PKE1024_KEYGEN_TESTS[i].seed);
+
+    // check for expected ek
+    if (memcmp(&got_ek, &(PKE1024_KEYGEN_TESTS[i].exp_ek), sizeof(got_ek))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ek", PKE1024_KEYGEN_TESTS[i].name);
+      fail_test(__func__, name, got_ek, sizeof(got_ek), PKE1024_KEYGEN_TESTS[i].exp_ek, sizeof(got_ek));
+    }
+
+    // check for expected dk
+    if (memcmp(&got_dk, &(PKE1024_KEYGEN_TESTS[i].exp_dk), sizeof(got_dk))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - dk", PKE1024_KEYGEN_TESTS[i].name);
+      fail_test(__func__, name, got_dk, sizeof(got_dk), PKE1024_KEYGEN_TESTS[i].exp_dk, sizeof(got_dk));
+    }
+  }
+}
+
+static const struct {
+  const char *name; // test name
+  const uint8_t ek[PKE1024_EK_SIZE]; // test ek (1184 bytes)
+  const uint8_t m[32]; // test message (32 bytes)
+  const uint8_t enc_rand[32]; // test randomness (32 bytes)
+  const uint8_t exp[PKE1024_CT_SIZE]; // expected ciphertext (1408 bytes)
+} PKE1024_ENCRYPT_TESTS[] = {{
+  .name = "rand = 0, message = 1",
+  .ek = {
+    0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
+    0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
+    0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
+    0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
+    0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
+    0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
+    0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
+    0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
+    0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
+    0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
+    0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
+    0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
+    0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
+    0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
+    0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
+    0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
+    0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
+    0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
+    0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
+    0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
+    0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
+    0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
+    0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
+    0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
+    0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
+    0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
+    0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
+    0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
+    0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
+    0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
+    0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
+    0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
+    0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
+    0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
+    0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
+    0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
+    0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
+    0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
+    0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
+    0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
+    0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
+    0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
+    0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
+    0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
+    0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
+    0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
+    0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
+    0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
+    0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
+    0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
+    0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
+    0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
+    0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
+    0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
+    0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
+    0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
+    0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
+    0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
+    0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
+    0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
+    0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
+    0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
+    0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
+    0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
+    0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
+    0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
+    0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
+    0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
+    0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
+    0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
+    0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
+    0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
+    0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
+    0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
+    0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
+    0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
+    0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
+    0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
+    0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
+    0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
+    0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
+    0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
+    0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
+    0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
+    0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
+    0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
+    0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
+    0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
+    0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
+    0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
+    0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
+    0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
+    0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
+    0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
+    0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
+    0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
+    0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
+    0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
+    0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
+    0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
+    0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
+    0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
+    0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
+    0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
+    0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
+    0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
+    0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
+    0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
+    0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
+    0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
+    0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
+    0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
+    0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
+    0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
+    0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
+    0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
+    0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
+    0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
+    0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
+    0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
+    0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
+    0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
+    0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
+    0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
+    0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
+    0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
+    0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
+    0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
+    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+  },
+
+  .m = { 1, 0 },
+  .enc_rand = { 0 },
+
+  .exp = {
+    0x33, 0x16, 0xf7, 0x1f, 0xea, 0x93, 0xec, 0xb5, 0xb3, 0x08, 0x5e, 0xcb,
+    0x55, 0x19, 0x8f, 0x6f, 0x69, 0x3c, 0x67, 0x3e, 0xac, 0xa0, 0xfd, 0xa5,
+    0xce, 0x9f, 0x08, 0xcd, 0x7c, 0x2d, 0xc9, 0x05, 0x50, 0x9d, 0xb0, 0xec,
+    0x66, 0x03, 0xff, 0x9d, 0xf8, 0xee, 0xb0, 0x4d, 0xdf, 0x73, 0x39, 0x19,
+    0xe0, 0xd8, 0x68, 0xfb, 0x2c, 0xd7, 0x0f, 0x96, 0x5d, 0x9d, 0x10, 0xa5,
+    0xbf, 0x4b, 0xc1, 0xd8, 0x5e, 0x0d, 0x9b, 0x81, 0xa3, 0xcd, 0x08, 0x47,
+    0x64, 0x2d, 0xf5, 0xb3, 0x77, 0xc2, 0x49, 0xe2, 0xd6, 0x10, 0xfc, 0xa2,
+    0xfa, 0x96, 0x04, 0x43, 0xbc, 0x20, 0x32, 0x52, 0xdb, 0x52, 0xd9, 0x11,
+    0x91, 0x4b, 0x4f, 0xdd, 0xd2, 0xfb, 0xe6, 0xb2, 0x3c, 0xc8, 0xff, 0x5c,
+    0x65, 0xe5, 0x1d, 0x1f, 0x46, 0x9a, 0x57, 0x08, 0x20, 0x38, 0xc6, 0xa0,
+    0x36, 0xbe, 0xac, 0x2a, 0xe6, 0x83, 0x87, 0xd6, 0x31, 0x99, 0xc1, 0x62,
+    0x8d, 0x68, 0xbc, 0xf8, 0x8d, 0x6c, 0x46, 0x3d, 0x0d, 0x20, 0xf6, 0xb0,
+    0x87, 0xab, 0x4e, 0x25, 0xee, 0xd9, 0x79, 0x3c, 0x2b, 0xe2, 0x1b, 0xdc,
+    0xe7, 0xd8, 0xa1, 0xb8, 0xe5, 0x8a, 0x29, 0xa3, 0x95, 0xcb, 0x47, 0xe4,
+    0x32, 0x54, 0x24, 0x3c, 0xd5, 0xbb, 0x6f, 0x79, 0x0d, 0xfc, 0x61, 0x28,
+    0x86, 0x8f, 0xad, 0x2e, 0x2b, 0x81, 0xf4, 0x45, 0xf5, 0x2a, 0xc6, 0x94,
+    0x04, 0xda, 0xd2, 0xd2, 0x35, 0xb7, 0xd3, 0xb2, 0x86, 0x65, 0xa9, 0xd1,
+    0xa4, 0xd2, 0x33, 0x25, 0xf5, 0xb9, 0xc9, 0xc9, 0x6a, 0x88, 0x11, 0x46,
+    0x97, 0x30, 0x21, 0x51, 0x2e, 0x4d, 0x01, 0x24, 0x2a, 0x02, 0x28, 0x2a,
+    0xbb, 0x57, 0x11, 0x1e, 0x7c, 0xd2, 0x44, 0x47, 0x86, 0x50, 0x4d, 0x78,
+    0x91, 0x7d, 0x86, 0x03, 0xb6, 0x23, 0x95, 0x80, 0x18, 0x00, 0x5e, 0x3f,
+    0xb3, 0xa8, 0x3b, 0xb4, 0xd7, 0x5f, 0x47, 0xd8, 0xaa, 0x1f, 0x05, 0x40,
+    0x25, 0xad, 0x0d, 0xba, 0x91, 0x57, 0x8a, 0x69, 0x4d, 0xf8, 0xfc, 0x1f,
+    0x12, 0x6f, 0xc7, 0xc2, 0x3d, 0x62, 0xdc, 0x2f, 0x3b, 0x1d, 0xcf, 0x09,
+    0xb9, 0x15, 0x6d, 0x4a, 0xf4, 0x87, 0x2b, 0xd0, 0x80, 0x80, 0x89, 0x37,
+    0xb3, 0x29, 0x3c, 0x5e, 0xf5, 0xa5, 0x3b, 0xca, 0xff, 0x3f, 0x8c, 0x6f,
+    0xb3, 0x29, 0x80, 0xf0, 0x35, 0x5b, 0x9f, 0xf9, 0x50, 0x15, 0xb0, 0xc4,
+    0x23, 0x07, 0x1a, 0x6f, 0xd2, 0x8b, 0x7c, 0xd0, 0x16, 0xc2, 0xaa, 0x36,
+    0xd3, 0xda, 0xf9, 0xd0, 0x92, 0x18, 0xea, 0xff, 0xf0, 0x02, 0xea, 0x7c,
+    0x30, 0x64, 0xf9, 0xa1, 0xa5, 0xcc, 0xf3, 0x0a, 0x23, 0x4c, 0x32, 0xc2,
+    0x7a, 0xc1, 0x91, 0x53, 0xf7, 0xf3, 0xba, 0x44, 0xb6, 0xd5, 0x79, 0x50,
+    0xec, 0x6c, 0x03, 0x3d, 0x10, 0x7c, 0x3b, 0xa9, 0x9a, 0x8f, 0xe9, 0xff,
+    0xb9, 0x1b, 0x5a, 0x35, 0x44, 0xd5, 0x52, 0x8a, 0xc7, 0xfb, 0xa3, 0x46,
+    0x1a, 0xe6, 0x9c, 0xe0, 0xc0, 0xa9, 0xcd, 0x89, 0x3a, 0xf7, 0x48, 0xd3,
+    0x55, 0x98, 0x94, 0x4e, 0x4a, 0x5d, 0x59, 0x6b, 0xc5, 0x7d, 0xfc, 0x2a,
+    0xf7, 0xf9, 0x29, 0x9f, 0x01, 0x38, 0xee, 0x07, 0x47, 0x55, 0xa1, 0x74,
+    0x35, 0xad, 0x65, 0x95, 0x43, 0xa9, 0x80, 0xbe, 0x7f, 0x69, 0x9c, 0xd7,
+    0x74, 0x7f, 0xb4, 0x5f, 0xaf, 0xc1, 0xea, 0xa5, 0xa2, 0x7c, 0x79, 0xd0,
+    0x74, 0xd8, 0xdb, 0x09, 0x08, 0x6c, 0x4e, 0xfe, 0xc2, 0xb7, 0x22, 0xc6,
+    0x9c, 0xad, 0xd1, 0x3d, 0xda, 0x2a, 0x08, 0x36, 0x76, 0x2e, 0x96, 0x85,
+    0x4b, 0x13, 0xfb, 0xd4, 0x78, 0x03, 0xe1, 0xb5, 0x45, 0xed, 0xcc, 0x0a,
+    0x36, 0x4e, 0xe6, 0x78, 0x4c, 0xc2, 0x35, 0xa9, 0x84, 0x99, 0x02, 0xc0,
+    0x07, 0x32, 0x5d, 0x6d, 0x95, 0xdd, 0xcc, 0xe9, 0xdf, 0x44, 0x50, 0x55,
+    0x1c, 0x93, 0xb1, 0xb4, 0x7c, 0xc3, 0x30, 0x00, 0xf1, 0x6e, 0xa9, 0xf9,
+    0xd6, 0x66, 0xff, 0x4b, 0xd3, 0x73, 0xb0, 0x32, 0xaa, 0x13, 0x8f, 0xec,
+    0x5d, 0xec, 0x64, 0x13, 0x72, 0xf8, 0xbc, 0x19, 0x1d, 0x58, 0xdd, 0x10,
+    0xd9, 0xab, 0x55, 0x37, 0xb2, 0xf7, 0x61, 0xc7, 0x93, 0xa8, 0x83, 0x26,
+    0x6b, 0x6f, 0xdc, 0x3c, 0x08, 0xe9, 0x84, 0xc0, 0x47, 0x79, 0x78, 0xdb,
+    0xa2, 0x35, 0xa1, 0x02, 0xc9, 0x92, 0x3e, 0x87, 0x7a, 0x18, 0xee, 0x94,
+    0xc6, 0x70, 0x8c, 0x03, 0x9f, 0xa0, 0xe7, 0x78, 0x9f, 0x6b, 0xd1, 0x60,
+    0xa4, 0x82, 0x9c, 0x1b, 0xaa, 0x80, 0x16, 0x41, 0xb4, 0x90, 0x5a, 0x69,
+    0xdf, 0x06, 0x97, 0xee, 0xdb, 0x12, 0x0a, 0x90, 0x4e, 0x64, 0x6c, 0x2a,
+    0x0c, 0x54, 0x20, 0x2b, 0x84, 0x56, 0x27, 0x96, 0x86, 0xfd, 0xba, 0xc4,
+    0x94, 0x52, 0x47, 0xc2, 0x63, 0x17, 0xc7, 0x5e, 0x37, 0x0e, 0xa0, 0x6c,
+    0x38, 0x55, 0xfd, 0xc6, 0x1d, 0xe3, 0x4b, 0x3f, 0x16, 0xc0, 0x8c, 0xb9,
+    0xaa, 0xf3, 0x92, 0x1c, 0xf6, 0xf9, 0x8b, 0xef, 0xe3, 0x69, 0x77, 0x3c,
+    0x25, 0x31, 0x48, 0x7f, 0xb3, 0xc8, 0x54, 0xd6, 0xe0, 0x1c, 0x85, 0x1f,
+    0x19, 0x6e, 0x54, 0x1f, 0xdd, 0x96, 0x23, 0x66, 0x6f, 0x57, 0x5d, 0x0c,
+    0xc2, 0x5e, 0xf3, 0x12, 0xcd, 0x83, 0x8a, 0x4a, 0x7c, 0xa6, 0x6e, 0x5f,
+    0x39, 0xbd, 0xd0, 0xc4, 0x8e, 0xea, 0x46, 0x3d, 0xf5, 0xdb, 0xe5, 0xb0,
+    0xaa, 0x79, 0x63, 0x18, 0x44, 0x0d, 0xd9, 0x61, 0xaf, 0x16, 0xab, 0x48,
+    0xa5, 0xda, 0x89, 0x9f, 0xf6, 0x9b, 0xe6, 0xcb, 0xa9, 0x5d, 0xf5, 0x88,
+    0x69, 0x14, 0x34, 0xc6, 0x06, 0x1a, 0x7b, 0xa9, 0x96, 0x7f, 0x99, 0xed,
+    0x4f, 0xee, 0xec, 0x50, 0xe3, 0xbf, 0xf1, 0xee, 0xed, 0xeb, 0x76, 0xd4,
+    0x79, 0xf8, 0xee, 0xb2, 0xce, 0x78, 0xbd, 0x1f, 0x4e, 0x3a, 0x5f, 0x5c,
+    0x8e, 0x1f, 0xa9, 0x9d, 0xa8, 0x2d, 0xf9, 0x7d, 0xc6, 0x2b, 0xc3, 0xd1,
+    0x25, 0xdb, 0xc5, 0xe6, 0xc8, 0x42, 0x50, 0x8a, 0xf4, 0xd3, 0x87, 0x99,
+    0xdf, 0x99, 0xf3, 0xf6, 0xa8, 0x25, 0x97, 0xa1, 0xb3, 0x1a, 0xcf, 0x3a,
+    0xc0, 0xc2, 0xbd, 0x5f, 0x07, 0xb9, 0x15, 0x62, 0xeb, 0xbe, 0x97, 0x22,
+    0xf1, 0x2f, 0xfa, 0x33, 0x7d, 0xb9, 0x30, 0xfc, 0x07, 0xf0, 0x9d, 0x56,
+    0x46, 0xa9, 0xb1, 0xae, 0x42, 0xb2, 0x36, 0xe9, 0xad, 0x34, 0x3c, 0x49,
+    0xe4, 0xc9, 0xaf, 0xdd, 0xc1, 0x90, 0xbb, 0xae, 0x55, 0xcc, 0x0a, 0x77,
+    0x83, 0xe5, 0x5c, 0x82, 0x95, 0x60, 0x69, 0x68, 0x34, 0x27, 0xed, 0x80,
+    0x62, 0xa4, 0xdb, 0x44, 0x36, 0xfd, 0xd8, 0xf5, 0xf0, 0xa3, 0xea, 0x55,
+    0xa6, 0xff, 0xba, 0xda, 0xdf, 0xc4, 0x1c, 0xe7, 0x05, 0x1e, 0xa0, 0xd0,
+    0xae, 0x3a, 0x25, 0x87, 0x87, 0xc5, 0x6d, 0xd6, 0x96, 0x47, 0x4e, 0x73,
+    0x9a, 0x6e, 0xba, 0xd8, 0xfb, 0xb7, 0xab, 0x9e, 0x55, 0x15, 0x8f, 0xf0,
+    0xe6, 0xe6, 0x2e, 0xcb, 0x01, 0x27, 0x6d, 0x6e, 0xd1, 0x11, 0x7f, 0x46,
+    0x78, 0xc1, 0x42, 0x73, 0xe1, 0x55, 0xa5, 0x82, 0xc7, 0xa2, 0x75, 0x19,
+    0x66, 0x30, 0x6e, 0x74, 0x20, 0x28, 0x31, 0xb6, 0x5a, 0xa0, 0x91, 0x60,
+    0xfa, 0xb0, 0xd7, 0x07, 0x87, 0x94, 0x26, 0xf2, 0xe2, 0x20, 0x5b, 0x0d,
+    0xd3, 0x7e, 0x96, 0x02, 0x8e, 0x6d, 0xa3, 0x01, 0x25, 0x01, 0xc0, 0xd4,
+    0x80, 0x1e, 0x97, 0x84, 0x76, 0x62, 0x30, 0x0a, 0xaf, 0x0a, 0xf6, 0xb8,
+    0x2f, 0x73, 0x96, 0xf1, 0xd2, 0x04, 0xd1, 0xa9, 0x02, 0xbe, 0x1c, 0x18,
+    0xf5, 0x2d, 0x5a, 0x73, 0x79, 0xcd, 0x6b, 0xb4, 0x09, 0x8c, 0x49, 0x30,
+    0x02, 0xf2, 0x57, 0xfb, 0x7b, 0x8e, 0x5c, 0xde, 0x0d, 0xd6, 0x6c, 0x89,
+    0x69, 0xeb, 0x70, 0x2d, 0x67, 0x72, 0x18, 0xd0, 0xc6, 0x41, 0xf9, 0xd4,
+    0x3d, 0xee, 0x53, 0xa3, 0x46, 0x0a, 0xe5, 0x94, 0xad, 0xab, 0x7d, 0x54,
+    0x78, 0xd6, 0x49, 0x9b, 0x16, 0xcd, 0x62, 0x4c, 0xa2, 0x58, 0x6d, 0xb3,
+    0xfe, 0xaa, 0x8d, 0x9f, 0x46, 0xa5, 0x68, 0xa6, 0x43, 0x6e, 0x5d, 0x12,
+    0x15, 0x85, 0xc7, 0x6e, 0x8a, 0x5b, 0x3c, 0xac, 0xa8, 0x9a, 0xaa, 0x29,
+    0x47, 0x08, 0x59, 0x09, 0xe1, 0x81, 0xa7, 0x69, 0x2f, 0xd1, 0xf5, 0xc6,
+    0x65, 0x98, 0xdf, 0xd7, 0xb0, 0xfd, 0x5d, 0xc1, 0xec, 0x8f, 0x26, 0x7a,
+    0x39, 0xc3, 0xf4, 0xd1, 0x84, 0xe2, 0x3d, 0xbd, 0xf4, 0x53, 0x58, 0xd8,
+    0x31, 0x6a, 0x34, 0x93, 0xba, 0x37, 0xd8, 0x16, 0xd1, 0xd4, 0x99, 0x56,
+    0xb1, 0x2a, 0x21, 0xe2, 0xcb, 0x97, 0x3e, 0xab, 0x71, 0x67, 0x4e, 0xe1,
+    0xdb, 0x7c, 0x00, 0xf0, 0x65, 0xe3, 0x8c, 0x65, 0xf1, 0x90, 0x60, 0x1f,
+    0xea, 0x26, 0xd0, 0x30, 0x51, 0x5b, 0xef, 0x16, 0x42, 0xb0, 0xa9, 0x5e,
+    0x11, 0xf7, 0xef, 0xe7, 0x1b, 0xe4, 0xf7, 0x8a, 0x73, 0xb4, 0xac, 0x2a,
+    0x4f, 0xf8, 0x70, 0x33, 0xf6, 0xdc, 0x8a, 0xbf, 0x9c, 0xaa, 0x55, 0x1c,
+    0x06, 0x15, 0x0a, 0x3b, 0x38, 0xe1, 0x8d, 0xcf, 0x34, 0xf3, 0xcf, 0xe8,
+    0x21, 0x34, 0x6b, 0x02, 0xff, 0x22, 0x9e, 0x1c, 0x51, 0x8b, 0x7b, 0x94,
+    0x9c, 0x20, 0xa3, 0x99, 0x35, 0xae, 0x6c, 0xde, 0x21, 0x86, 0x9e, 0x12,
+    0x32, 0x52, 0x3b, 0x71, 0x08, 0x68, 0xb6, 0x5f, 0xb3, 0xee, 0x25, 0x06,
+    0xd5, 0x10, 0x6e, 0x3a, 0x95, 0x2c, 0x4b, 0x75, 0x77, 0x7d, 0x66, 0x58,
+    0x6f, 0x34, 0xa4, 0xd2, 0xe7, 0x27, 0x2a, 0x48, 0x2f, 0x33, 0x19, 0x23,
+    0x07, 0x45, 0xd2, 0x5f, 0x6f, 0xd3, 0x76, 0xa7, 0xb6, 0x5b, 0xcf, 0xf3,
+    0xba, 0x42, 0xed, 0xa7, 0xb5, 0x60, 0xd2, 0x18, 0x69, 0x5f, 0x6c, 0x8a,
+    0x0c, 0x98, 0x3d, 0x6a, 0x6c, 0x65, 0xd3, 0x25, 0x72, 0x3a, 0xbd, 0x52,
+    0x7d, 0x4a, 0xe3, 0x18, 0x51, 0xe8, 0xc3, 0xa7, 0x12, 0x42, 0x73, 0xa3,
+    0x8f, 0x8e, 0x04, 0x38, 0x39, 0x40, 0x7f, 0x16, 0x55, 0x69, 0xb5, 0xae,
+    0x59, 0x9d, 0x88, 0xa3, 0x8b, 0x66, 0xe6, 0x58, 0x43, 0x16, 0x29, 0xac,
+    0x69, 0xad, 0xac, 0x47, 0x9e, 0x16, 0x8a, 0xdd, 0xc7, 0x67, 0x25, 0xfa,
+    0x4e, 0xc7, 0x97, 0xfa, 0x29, 0x86, 0xd7, 0x9b, 0xa3, 0x9d, 0x1c, 0x0a,
+    0x39, 0x3b, 0xec, 0xa8, 0xd7, 0x38, 0x4f, 0x3d, 0x56, 0x22, 0xbc, 0x08,
+    0x74, 0x31, 0xc8, 0x16, 0xda, 0x98, 0xd3, 0x54, 0x1f, 0xe9, 0x89, 0x3c,
+    0x28, 0x1d, 0x27, 0x78, 0xe5, 0x31, 0xcf, 0x6b, 0x0a, 0x12, 0x08, 0x01,
+    0x8b, 0x1a, 0x2f, 0xf3, 0xde, 0x19, 0xda, 0xca, 0x11, 0x25, 0xdd, 0x93,
+    0x05, 0x71, 0xc1, 0xab, 0x95, 0x3b, 0x28, 0x8f, 0x5d, 0xa4, 0x0e, 0xad,
+    0xcf, 0x14, 0x57, 0x66, 0x4e, 0xb1, 0x88, 0x2f, 0x02, 0x4f, 0x0d, 0xe1,
+    0x37, 0xe2, 0x2a, 0x02, 0xe4, 0x81, 0x53, 0xb2, 0xd5, 0x30, 0xf7, 0x4f,
+    0x5f, 0x95, 0xc0, 0x42, 0x4c, 0x89, 0x7c, 0x82, 0x62, 0x17, 0xbf, 0x9a,
+    0x88, 0xdf, 0xac, 0x73, 0x93, 0x8a, 0x85, 0x29, 0xd0, 0x16, 0xae, 0x79,
+    0xab, 0x91, 0x54, 0x29, 0x32, 0x52, 0x17, 0x91, 0x6b, 0x51, 0x59, 0x09,
+    0x56, 0x8f, 0x81, 0xc2, 0x7f, 0x77, 0xad, 0x65, 0x81, 0x3b, 0x9d, 0xeb,
+    0xdd, 0xc3, 0x61, 0x2a, 0x4d, 0xe3, 0x10, 0x84, 0x54, 0xc0, 0xcd, 0xae,
+    0x86, 0x54, 0xaa, 0x70, 0xf3, 0xfb, 0xf1, 0x57, 0x6f, 0xd5, 0xbe, 0x24,
+    0x0e, 0x26, 0x2e, 0xba, 0x1e, 0x65, 0x3d, 0x22, 0x8b, 0xd1, 0x37, 0xc4,
+    0x77, 0x63, 0x9c, 0x40, 0xee, 0x71, 0x33, 0xf8, 0xe4, 0xfa, 0x4c, 0x87,
+    0x9f, 0xee, 0xf3, 0x51, 0xcf, 0x35, 0x69, 0xd2, 0x98, 0x5b, 0x2d, 0x3f,
+    0x44, 0xdf, 0xcb, 0xb8, 0xb2, 0x5f, 0xf5, 0x9d,
+  },
+}};
+
+static void test_pke1024_encrypt(void) {
+  for (size_t i = 0; i < sizeof(PKE1024_ENCRYPT_TESTS)/sizeof(PKE1024_ENCRYPT_TESTS[0]); i++) {
+    // encrypt test message `m` with encryption key `ek` and randomness
+    // `enc_rand`, then store ciphertext to buffer `got`.
+    uint8_t got[PKE1024_CT_SIZE] = { 0 };
+    pke1024_encrypt(got, PKE1024_ENCRYPT_TESTS[i].ek, PKE1024_ENCRYPT_TESTS[i].m, PKE1024_ENCRYPT_TESTS[i].enc_rand);
+
+    // check for expected ciphertext
+    if (memcmp(got, PKE1024_ENCRYPT_TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, PKE1024_ENCRYPT_TESTS[i].name, got, sizeof(got), PKE1024_ENCRYPT_TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_pke1024_decrypt(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t dk[PKE1024_EK_SIZE]; // test decryption key (1536 bytes)
+    const uint8_t ct[PKE1024_CT_SIZE]; // test ciphertext (1568 bytes)
+    const uint8_t exp[32]; // expected message (32 bytes)
+  } TESTS[] = {{
+    .name = "rand = 0, message = 1",
+
+    .dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+    },
+
+    .ct = {
+      0x6c, 0x21, 0x44, 0xd1, 0xd8, 0x6c, 0xfc, 0xa8, 0x53, 0xe1, 0x58, 0x64,
+      0x41, 0x5f, 0x14, 0x91, 0x12, 0xca, 0x59, 0x5f, 0x4b, 0x6d, 0x9c, 0xfc,
+      0xda, 0x6b, 0xd0, 0xac, 0x08, 0x42, 0x73, 0xb8, 0x1c, 0xe7, 0x05, 0xe0,
+      0xb8, 0x0a, 0xdd, 0xd2, 0x44, 0x9e, 0xb5, 0xa5, 0xf0, 0x14, 0x15, 0x0b,
+      0xcd, 0xa5, 0x91, 0x3d, 0x00, 0xe5, 0x60, 0x6c, 0x73, 0x09, 0x7a, 0x9c,
+      0x7c, 0xd4, 0x37, 0xfb, 0x94, 0xf5, 0xd0, 0x95, 0x49, 0xf5, 0x5d, 0x2a,
+      0xad, 0x67, 0xab, 0x0a, 0x51, 0x40, 0x64, 0x4f, 0x8d, 0xbc, 0xf2, 0x2c,
+      0xe3, 0x03, 0x92, 0xfd, 0xa7, 0x96, 0xb1, 0x56, 0x85, 0x91, 0x66, 0x67,
+      0x26, 0xd5, 0x8f, 0x4c, 0x57, 0x1d, 0xcc, 0x72, 0x53, 0xab, 0xfe, 0x70,
+      0xdd, 0x9c, 0x22, 0x86, 0xe2, 0x81, 0x4b, 0x92, 0x4f, 0x54, 0xe6, 0x38,
+      0xef, 0x88, 0x65, 0x7d, 0xf4, 0xea, 0xdd, 0x15, 0x28, 0x0d, 0xed, 0x01,
+      0xf7, 0xa2, 0xb7, 0x1f, 0x3b, 0x21, 0x32, 0xec, 0x21, 0x28, 0xfb, 0x6e,
+      0xd3, 0x16, 0x76, 0xd8, 0x3d, 0x3a, 0xb0, 0xe2, 0xb7, 0x92, 0xa2, 0xc9,
+      0x0b, 0x7a, 0xa9, 0x03, 0xce, 0x60, 0x46, 0x4c, 0x07, 0xdb, 0x8b, 0x07,
+      0xea, 0x5e, 0xa0, 0xb4, 0xa3, 0xc8, 0x51, 0x93, 0x1c, 0xfa, 0x0b, 0x68,
+      0xdb, 0x78, 0xac, 0x98, 0x96, 0xa2, 0xaa, 0x55, 0x6e, 0xd6, 0x27, 0x36,
+      0x2e, 0x20, 0xa0, 0xc9, 0x94, 0xaa, 0x2e, 0x35, 0xa5, 0x39, 0xd8, 0x97,
+      0x3a, 0x47, 0x63, 0x36, 0x08, 0xd3, 0x1b, 0xce, 0x0d, 0xf9, 0x2d, 0x9a,
+      0x7d, 0xd7, 0x97, 0xe9, 0x0c, 0xae, 0x88, 0x13, 0x26, 0xb7, 0xa5, 0xc0,
+      0x27, 0x9e, 0x46, 0x87, 0xc9, 0x78, 0xd8, 0x5e, 0xdd, 0x49, 0x17, 0xd0,
+      0xf4, 0x4e, 0xeb, 0x12, 0x04, 0x5a, 0xdf, 0xfe, 0x33, 0x6a, 0x28, 0x04,
+      0xba, 0x66, 0xc5, 0x40, 0xfc, 0x65, 0xe3, 0xe2, 0x56, 0x81, 0xb3, 0x83,
+      0xfc, 0xf2, 0x62, 0x9f, 0x88, 0x54, 0xda, 0x05, 0x71, 0xc9, 0x46, 0xe3,
+      0xef, 0xc7, 0xb5, 0x3a, 0x5d, 0x0c, 0x58, 0xaa, 0x21, 0x0d, 0xe9, 0x3a,
+      0x04, 0x92, 0x92, 0x9d, 0x6e, 0xcf, 0x65, 0xd9, 0xb3, 0x76, 0x67, 0x04,
+      0xb6, 0x1a, 0xa6, 0x32, 0x96, 0xf4, 0x44, 0xe7, 0xd4, 0xf6, 0x7d, 0x9a,
+      0x31, 0x46, 0xd6, 0xb3, 0xea, 0xe1, 0xf9, 0xde, 0x5f, 0x72, 0xe3, 0x69,
+      0x08, 0x4a, 0x95, 0xc8, 0x8d, 0x37, 0x99, 0x2c, 0x56, 0x34, 0x18, 0xe3,
+      0x60, 0x9a, 0x4d, 0x07, 0x9b, 0xae, 0x24, 0xb4, 0x1c, 0xf6, 0x2d, 0xca,
+      0xeb, 0xdc, 0xe5, 0x8b, 0xc6, 0x9b, 0x69, 0x60, 0x29, 0xa2, 0xb2, 0x35,
+      0x47, 0xfc, 0x19, 0xb7, 0x41, 0x16, 0xab, 0x43, 0x8a, 0x2b, 0x5d, 0x7a,
+      0x0b, 0x19, 0xb7, 0xdd, 0x95, 0x2e, 0xae, 0x8f, 0x54, 0x85, 0xb4, 0xf6,
+      0xed, 0xa1, 0x74, 0xed, 0x08, 0xe3, 0x3e, 0x5b, 0x13, 0xa7, 0xbf, 0xe5,
+      0x26, 0x4d, 0xb1, 0x28, 0xdb, 0x45, 0x3a, 0x5c, 0x21, 0x8e, 0x07, 0x62,
+      0xb9, 0xc4, 0xe5, 0xaf, 0xdc, 0x26, 0xdb, 0x74, 0x2d, 0xf6, 0xf8, 0x98,
+      0xf3, 0xcb, 0x3a, 0x34, 0x8f, 0x63, 0xad, 0xe8, 0x91, 0xf8, 0x6e, 0x81,
+      0x46, 0x0c, 0x38, 0xec, 0x4b, 0xb5, 0x68, 0x1b, 0x77, 0x81, 0x95, 0x92,
+      0xd0, 0xc0, 0x14, 0x9e, 0x11, 0xc3, 0x85, 0xcc, 0x70, 0xf9, 0xdd, 0x32,
+      0xb7, 0xc4, 0x08, 0x97, 0x6f, 0x8b, 0x78, 0x84, 0x5a, 0x8d, 0xca, 0x21,
+      0x4b, 0x74, 0xb1, 0x77, 0x7a, 0x75, 0x53, 0x0a, 0x61, 0xb6, 0x7a, 0x8b,
+      0xa9, 0x3a, 0x2e, 0x95, 0x80, 0xdc, 0xd5, 0xa7, 0x33, 0x3d, 0x54, 0x8a,
+      0xd3, 0x1d, 0x19, 0xb7, 0xf2, 0x16, 0xbf, 0x76, 0x06, 0x00, 0x15, 0xd8,
+      0xe1, 0xd5, 0x81, 0xad, 0x53, 0xb3, 0x08, 0xc3, 0x22, 0xe0, 0xf0, 0xbe,
+      0x1e, 0xd2, 0xd3, 0x36, 0xcb, 0xf9, 0x0b, 0x75, 0x42, 0xdb, 0xfa, 0xd8,
+      0x7e, 0x25, 0x30, 0xae, 0x73, 0xc6, 0x6a, 0x40, 0xd7, 0x3c, 0x13, 0xdb,
+      0xf6, 0xde, 0xcd, 0x7b, 0x8b, 0x62, 0xad, 0x0c, 0x7a, 0x59, 0x98, 0x6d,
+      0x75, 0xa7, 0xf9, 0xdb, 0x52, 0x44, 0x01, 0x82, 0xec, 0x87, 0x0d, 0x91,
+      0x4c, 0xa2, 0x20, 0xc3, 0xbf, 0xcf, 0x54, 0x4b, 0x9d, 0x18, 0x08, 0x67,
+      0xba, 0xde, 0x57, 0x98, 0x92, 0xaa, 0x78, 0xd6, 0x87, 0x0d, 0x0b, 0x98,
+      0x9c, 0xf9, 0xf6, 0x28, 0xb0, 0xe8, 0x96, 0x82, 0xa0, 0x16, 0xe3, 0x02,
+      0xa6, 0x8c, 0x46, 0x47, 0x8b, 0xf8, 0x53, 0xcc, 0x52, 0xe3, 0x8c, 0xf1,
+      0x50, 0x40, 0x0a, 0xf3, 0x65, 0x51, 0x9d, 0xba, 0xd9, 0x91, 0x86, 0xbe,
+      0x59, 0xf5, 0x50, 0x19, 0x0f, 0x39, 0xfb, 0xf6, 0x44, 0x2b, 0x0d, 0xc5,
+      0x01, 0xaf, 0x03, 0xec, 0xa6, 0xb2, 0x6c, 0x5f, 0x04, 0xb7, 0xe5, 0xd6,
+      0xa9, 0x6a, 0xb5, 0x1d, 0xc9, 0x60, 0x89, 0x43, 0xe9, 0x29, 0x18, 0x7f,
+      0x3b, 0x4e, 0xf2, 0xda, 0x72, 0xe9, 0x72, 0x1d, 0x70, 0x17, 0x98, 0x1c,
+      0x73, 0x2f, 0xb4, 0x54, 0x95, 0x4c, 0xb4, 0x01, 0x95, 0xbb, 0xcb, 0xf6,
+      0xb2, 0xb7, 0x72, 0x8c, 0x32, 0x7b, 0x41, 0x2d, 0x03, 0xaa, 0x88, 0x25,
+      0x64, 0x8f, 0xa9, 0x8a, 0x42, 0x94, 0xe0, 0x66, 0x8c, 0xbd, 0xb9, 0xc2,
+      0xf2, 0xf8, 0x59, 0xc7, 0x55, 0x73, 0xcd, 0x31, 0x85, 0x0f, 0xc4, 0x95,
+      0x63, 0xb7, 0xc9, 0x66, 0x37, 0xcb, 0x49, 0x63, 0xab, 0x7e, 0xdf, 0x87,
+      0x76, 0x07, 0xa0, 0x37, 0xe9, 0xe9, 0x80, 0x26, 0x48, 0xf9, 0xf2, 0x46,
+      0xb1, 0x81, 0x07, 0xbd, 0x3d, 0x52, 0x19, 0x98, 0x3d, 0x01, 0xbb, 0x61,
+      0xf0, 0xf9, 0x47, 0xd2, 0x53, 0x97, 0x15, 0x46, 0x36, 0xd8, 0xa7, 0x7c,
+      0xc9, 0x2f, 0xe4, 0x27, 0xf5, 0xde, 0xe9, 0x33, 0x6c, 0x0a, 0xa1, 0x8f,
+      0xeb, 0xd4, 0xb8, 0x36, 0x1b, 0x80, 0x78, 0x6f, 0x7f, 0x2a, 0xa4, 0x35,
+      0xba, 0xdb, 0xf2, 0xf7, 0x53, 0x7f, 0xaa, 0x30, 0x5e, 0x0b, 0xa8, 0x20,
+      0x7a, 0x9a, 0x9b, 0x5b, 0x73, 0x62, 0x15, 0xd8, 0x90, 0x5e, 0xb0, 0x42,
+      0x44, 0xaa, 0xd7, 0x5c, 0xc7, 0xe4, 0xca, 0x4d, 0x68, 0xea, 0x0f, 0x0e,
+      0x5e, 0x27, 0x8e, 0x61, 0xb5, 0x61, 0xc6, 0xd4, 0xd5, 0x55, 0x1a, 0x93,
+      0x0f, 0x50, 0x50, 0x1e, 0xbd, 0x84, 0xb3, 0x4c, 0xb1, 0xa7, 0x1e, 0xaa,
+      0x22, 0xf5, 0xea, 0x5a, 0x6f, 0xa4, 0xf4, 0x91, 0xd6, 0x13, 0x14, 0x8f,
+      0x5f, 0x6b, 0xb7, 0xfa, 0xb1, 0x3f, 0xdb, 0xa4, 0xbe, 0x2e, 0xa8, 0xd8,
+      0x4b, 0x03, 0xeb, 0x3a, 0xc2, 0x0d, 0x36, 0x8e, 0x21, 0x0d, 0x63, 0x31,
+      0x24, 0x9d, 0x3f, 0xda, 0xd0, 0x14, 0xec, 0x32, 0x85, 0x57, 0xe6, 0x4f,
+      0x3a, 0x7a, 0x03, 0x2b, 0x94, 0x0a, 0x32, 0x5c, 0x53, 0xc5, 0xe1, 0x8d,
+      0xcd, 0x36, 0xc2, 0x9b, 0x42, 0x49, 0xc2, 0x0b, 0x37, 0x6e, 0xa2, 0x08,
+      0xb1, 0x5d, 0xca, 0xdf, 0x49, 0xd7, 0xcf, 0x6c, 0xa3, 0xfb, 0x2b, 0xd4,
+      0xfd, 0x06, 0x71, 0x84, 0x27, 0xab, 0x26, 0xbe, 0x4d, 0x33, 0x31, 0x2e,
+      0x27, 0xe2, 0x38, 0x8a, 0x41, 0x07, 0x40, 0xe6, 0x9f, 0x2f, 0x17, 0x54,
+      0x91, 0x6c, 0x8f, 0x7f, 0x46, 0xcd, 0xd9, 0x09, 0x70, 0xb5, 0xa7, 0xab,
+      0x0d, 0xa4, 0xa3, 0xec, 0x71, 0xa3, 0x75, 0xd8, 0x59, 0x75, 0xaf, 0x12,
+      0x76, 0x3d, 0xb2, 0xd5, 0xd9, 0xc1, 0x7b, 0x11, 0x76, 0xfe, 0xd7, 0x81,
+      0x71, 0xaa, 0x93, 0xa1, 0x4b, 0xc3, 0xf7, 0xa2, 0xbf, 0x77, 0x76, 0x8b,
+      0x12, 0x9a, 0x7b, 0x1d, 0x86, 0x71, 0xb2, 0xda, 0x14, 0x73, 0x16, 0x6f,
+      0xdf, 0xb1, 0xa8, 0x90, 0x77, 0x6a, 0xea, 0xbf, 0x63, 0x0e, 0x31, 0x7c,
+      0x64, 0x52, 0x36, 0x68, 0x1f, 0xe4, 0x0e, 0x4f, 0x48, 0x77, 0xfb, 0x40,
+      0x12, 0x92, 0x21, 0xfb, 0x50, 0xb5, 0x8d, 0x66, 0x1f, 0x1f, 0x02, 0x4d,
+      0x48, 0xc6, 0x65, 0xa9, 0xaa, 0xc8, 0xd8, 0x52, 0xab, 0xb1, 0x8b, 0xe8,
+      0x4a, 0xeb, 0xc9, 0x3e, 0x8d, 0x8d, 0x41, 0x69, 0xcd, 0x10, 0xe9, 0x18,
+      0xf8, 0x95, 0x44, 0xce, 0x62, 0x57, 0xf5, 0xd6, 0x0a, 0x7c, 0x71, 0xe9,
+      0x8e, 0x61, 0xcd, 0xba, 0x27, 0xe9, 0x53, 0xf2, 0xa8, 0x59, 0x05, 0x51,
+      0xbf, 0xc2, 0x13, 0x74, 0xc2, 0x6c, 0xb1, 0x84, 0xcb, 0x31, 0xbd, 0x75,
+      0x84, 0xa0, 0xf0, 0xab, 0xe5, 0x6d, 0xcc, 0x35, 0x3e, 0x6a, 0x34, 0xb1,
+      0xc7, 0x7c, 0x22, 0x78, 0xab, 0x80, 0xad, 0x9f, 0xb9, 0x6e, 0x4c, 0xe2,
+      0xe2, 0xdc, 0x9a, 0xf9, 0x29, 0xbd, 0xb4, 0x29, 0x5a, 0x3f, 0xc1, 0x91,
+      0x66, 0xb7, 0x56, 0x5f, 0xb1, 0x76, 0x70, 0x6a, 0xe8, 0x09, 0xb6, 0x20,
+      0x95, 0xc8, 0x56, 0x4b, 0x3c, 0x43, 0x47, 0x14, 0x56, 0xaf, 0xfe, 0x64,
+      0xd3, 0x10, 0x90, 0x3a, 0x54, 0xe7, 0xbf, 0x02, 0xf3, 0x7d, 0x6b, 0x13,
+      0x86, 0x87, 0xf8, 0xe5, 0xd7, 0x22, 0x95, 0x79, 0x76, 0x75, 0xea, 0x36,
+      0xb4, 0x2f, 0x09, 0xe2, 0x00, 0x42, 0xd2, 0x33, 0x38, 0x94, 0x5d, 0x9d,
+      0x9d, 0x81, 0xb5, 0xb3, 0xa8, 0xa5, 0x66, 0x18, 0x86, 0x00, 0xf2, 0x1d,
+      0x30, 0xb9, 0xd2, 0x52, 0xc7, 0x8e, 0xdd, 0x9d, 0x2e, 0xe1, 0xab, 0x78,
+      0xf0, 0xd3, 0x94, 0x83, 0xdf, 0xdd, 0xd3, 0x73, 0xa2, 0x6c, 0x98, 0x89,
+      0x1b, 0xd6, 0xdd, 0xee, 0xcd, 0x57, 0x6e, 0x44, 0x05, 0x9c, 0x7c, 0x0f,
+      0x4d, 0xc4, 0x73, 0xa1, 0x78, 0xfe, 0x0f, 0x4b, 0x2b, 0xa3, 0xab, 0x58,
+      0x11, 0x08, 0x67, 0x42, 0x7e, 0x00, 0x4b, 0x72, 0x63, 0xa4, 0x84, 0xb4,
+      0xa8, 0x19, 0x9e, 0x21, 0x52, 0xd5, 0x12, 0x0f, 0xaa, 0x79, 0x1c, 0xe9,
+      0x80, 0x77, 0x97, 0x46, 0xa2, 0xef, 0xaf, 0x40, 0x3c, 0x61, 0x27, 0x1a,
+      0x6b, 0x95, 0x0a, 0x6a, 0x0b, 0x27, 0x70, 0x7e, 0xe0, 0x60, 0x17, 0x89,
+      0x1c, 0x3e, 0x04, 0x73, 0x34, 0xb3, 0x66, 0xd1, 0xe3, 0xf1, 0x08, 0x91,
+      0x46, 0x50, 0xeb, 0xb0, 0xef, 0x3f, 0x6a, 0x53, 0x98, 0xaa, 0xc0, 0x32,
+      0x1c, 0x90, 0x04, 0xe6, 0x9c, 0x64, 0x5b, 0x9a, 0x13, 0x03, 0x27, 0x47,
+      0x6d, 0x33, 0xbc, 0xc9, 0xfd, 0xa5, 0x7c, 0x55, 0xf5, 0x55, 0x10, 0x85,
+      0x8c, 0x49, 0xf1, 0x63, 0x34, 0xe6, 0x14, 0xcf, 0x15, 0x52, 0xcd, 0x6c,
+      0x9b, 0xe6, 0xf5, 0xd1, 0xfd, 0xed, 0x49, 0x57, 0x05, 0xa4, 0x34, 0x9b,
+      0xcf, 0x24, 0x6a, 0x28, 0x67, 0xe5, 0x53, 0x5f, 0xdf, 0x54, 0x88, 0x69,
+      0x69, 0xe7, 0x4d, 0x65, 0xde, 0x19, 0xda, 0xca, 0x11, 0x25, 0xdd, 0x93,
+      0x05, 0x71, 0xc1, 0xab, 0x95, 0x3b, 0x28, 0x8f, 0x5d, 0xa4, 0x0e, 0xad,
+      0xcf, 0x14, 0x57, 0x66, 0x4e, 0xb1, 0x88, 0x2f, 0x02, 0x4f, 0x0d, 0xe1,
+      0x37, 0xe2, 0x2a, 0x02, 0xe4, 0x81, 0x53, 0xb2, 0xd5, 0x30, 0xf7, 0x4f,
+      0x5f, 0x95, 0xc0, 0x42, 0x4c, 0x89, 0x7c, 0x82, 0x62, 0x17, 0xbf, 0x9a,
+      0x88, 0xdf, 0xac, 0x73, 0x93, 0x8a, 0x85, 0x29, 0xd0, 0x16, 0xae, 0x79,
+      0xab, 0x91, 0x54, 0x29, 0x32, 0x52, 0x17, 0x91, 0x6b, 0x51, 0x59, 0x09,
+      0x56, 0x8f, 0x81, 0xc2, 0x7f, 0x77, 0xad, 0x65, 0x81, 0x3b, 0x9d, 0xeb,
+      0xdd, 0xc3, 0x61, 0x2a, 0x4d, 0xe3, 0x10, 0x84, 0x54, 0xc0, 0xcd, 0xae,
+      0x86, 0x54, 0xaa, 0x70, 0xf3, 0xfb, 0xf1, 0x57, 0x6f, 0xd5, 0xbe, 0x24,
+      0x0e, 0x26, 0x2e, 0xba, 0x1e, 0x65, 0x3d, 0x22, 0x8b, 0xd1, 0x37, 0xc4,
+      0x77, 0x63, 0x9c, 0x40, 0xee, 0x71, 0x33, 0xf8, 0xe4, 0xfa, 0x4c, 0x87,
+      0x9f, 0xee, 0xf3, 0x51, 0xcf, 0x35, 0x69, 0xd2, 0x98, 0x5b, 0x2d, 0x3f,
+      0x44, 0xdf, 0xcb, 0xb8, 0xb2, 0x5f, 0xf5, 0x9d,
+    },
+
+    .exp = { 1, 0 },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // decrypt ciphertext `ct` with decryption key `dk` and store the
+    // plaintext message in output buffer `got`.
+    uint8_t got[32] = { 0 };
+    pke1024_decrypt(got, TESTS[i].dk, TESTS[i].ct);
+
+    // check for expected plaintext
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_fips203ipd_kem1024_keygen(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t seed[64]; // test seed
+    const uint8_t exp_ek[PKE1024_EK_SIZE]; // expected ek (1568 bytes)
+    const uint8_t exp_dk[FIPS203IPD_KEM1024_DK_SIZE]; // expected dk (3168 bytes)
+  } TESTS[] = {{
+    .name = "all-zero",
+    .seed = { 0 },
+    .exp_ek = {
+      0xe4, 0xb4, 0x3d, 0xd6, 0xb4, 0x02, 0xb6, 0x1c, 0x32, 0xf0, 0x19, 0x1d,
+      0x13, 0xb1, 0xb5, 0x4c, 0x50, 0xb8, 0xdc, 0xc2, 0x24, 0x48, 0x28, 0x64,
+      0xd7, 0xc8, 0x18, 0xf7, 0xa2, 0x42, 0xa8, 0x18, 0x1e, 0x32, 0x63, 0xbc,
+      0x43, 0x32, 0x50, 0x1b, 0x23, 0x59, 0xdb, 0xa9, 0xa8, 0x42, 0x18, 0x86,
+      0x24, 0x87, 0xa5, 0x4b, 0x4a, 0x6a, 0xfd, 0x4a, 0xa8, 0xed, 0x86, 0x68,
+      0x00, 0xe1, 0xaf, 0x36, 0xd7, 0xb6, 0xd3, 0x49, 0x81, 0x21, 0x74, 0x07,
+      0x38, 0xc4, 0xca, 0xfb, 0x10, 0xca, 0x54, 0x74, 0x3f, 0x4b, 0xe2, 0x07,
+      0xdd, 0xa5, 0x2e, 0xa1, 0xc9, 0xb1, 0x4a, 0x36, 0x81, 0x9f, 0x58, 0x18,
+      0x91, 0x5b, 0x74, 0x6f, 0xdc, 0xa9, 0x75, 0x7a, 0x4b, 0x59, 0x47, 0x69,
+      0xc8, 0x76, 0xa5, 0x30, 0xec, 0x95, 0xfb, 0x56, 0x8a, 0xce, 0xf0, 0x3f,
+      0x90, 0x04, 0x99, 0xb0, 0xb2, 0xca, 0xaa, 0x01, 0x58, 0xbe, 0x13, 0x7e,
+      0x86, 0x4c, 0x95, 0x46, 0x1b, 0x34, 0x22, 0xe8, 0xcd, 0x0a, 0x88, 0x8c,
+      0xa7, 0xd3, 0x02, 0xcf, 0xf8, 0x6a, 0x64, 0x03, 0x8f, 0xce, 0x28, 0x91,
+      0xba, 0xb6, 0x69, 0xd2, 0x81, 0x04, 0xa8, 0xf6, 0xa1, 0xb8, 0x64, 0xa1,
+      0x8e, 0x03, 0x7b, 0x39, 0x54, 0xb7, 0x56, 0x18, 0x45, 0xc4, 0x4a, 0x31,
+      0x8e, 0x87, 0x36, 0xfe, 0x09, 0x0d, 0xf1, 0x8a, 0x7d, 0xb7, 0xdb, 0x52,
+      0x8f, 0x24, 0x5d, 0x09, 0xe9, 0x01, 0xa5, 0x7a, 0x40, 0xc9, 0x3a, 0x0b,
+      0xb1, 0x77, 0x24, 0x80, 0xb7, 0x89, 0xa4, 0x98, 0x25, 0xf7, 0xd4, 0x7e,
+      0xe5, 0x7c, 0x73, 0xb5, 0xf3, 0x4c, 0x80, 0x19, 0x24, 0xea, 0xeb, 0x60,
+      0xe8, 0x29, 0x87, 0xe0, 0xb9, 0x6f, 0x50, 0x69, 0x45, 0x34, 0x98, 0x23,
+      0x93, 0xd7, 0x0b, 0xaa, 0x67, 0x65, 0xcf, 0xb8, 0xc0, 0xe0, 0x81, 0x17,
+      0xa2, 0x12, 0xa7, 0xe8, 0x0c, 0x14, 0x16, 0xc4, 0xb1, 0x7f, 0xd6, 0x55,
+      0xcf, 0x62, 0x89, 0xe3, 0xc6, 0x12, 0x92, 0xf2, 0x0a, 0x2c, 0x82, 0x9d,
+      0x94, 0x04, 0xc9, 0x6a, 0x34, 0x11, 0x83, 0x0b, 0x9f, 0x20, 0x4c, 0x01,
+      0x02, 0xf2, 0x06, 0x51, 0x18, 0x77, 0xf4, 0x6a, 0x89, 0x31, 0xdc, 0x01,
+      0x5d, 0x00, 0x03, 0xfc, 0x78, 0xb1, 0xe6, 0x55, 0x12, 0x3c, 0xa0, 0x14,
+      0xbd, 0xc4, 0xc3, 0x92, 0xbb, 0xaf, 0x7d, 0x1c, 0x4e, 0x99, 0xe7, 0x93,
+      0xf5, 0x22, 0x28, 0xaf, 0xe3, 0xc9, 0x34, 0xf4, 0xc4, 0xc3, 0x36, 0x36,
+      0xa5, 0x60, 0x93, 0x7e, 0xc0, 0xa2, 0x65, 0xa6, 0x96, 0x62, 0x52, 0x81,
+      0xdf, 0x60, 0x7f, 0x0a, 0x4c, 0x06, 0x62, 0xd3, 0x77, 0x70, 0x03, 0x50,
+      0x2f, 0x47, 0x4e, 0xb7, 0xe8, 0x94, 0xca, 0xf4, 0x47, 0x9f, 0xea, 0xb4,
+      0x18, 0xb1, 0x36, 0x04, 0x71, 0xb9, 0x6f, 0xda, 0xbe, 0x8c, 0xf4, 0x5f,
+      0x3c, 0x59, 0xce, 0x79, 0x99, 0x2e, 0xf8, 0xab, 0x1f, 0x4a, 0x8a, 0x1d,
+      0xc1, 0xe0, 0x30, 0xba, 0xf9, 0xc0, 0x21, 0x71, 0x42, 0xb7, 0xc9, 0x38,
+      0x55, 0xd8, 0x34, 0x1f, 0x49, 0x23, 0xcd, 0x27, 0x66, 0x93, 0xd3, 0x68,
+      0x6f, 0xc4, 0xc9, 0x6c, 0x47, 0x03, 0xad, 0x60, 0x4c, 0x34, 0x38, 0x58,
+      0x2b, 0xfb, 0x03, 0x6f, 0xd9, 0x62, 0xb0, 0xf8, 0xa0, 0xf4, 0xd6, 0x22,
+      0x3b, 0x0c, 0xb0, 0x38, 0x32, 0x15, 0xe7, 0xdb, 0x8c, 0x75, 0x82, 0x93,
+      0x39, 0x33, 0xad, 0x09, 0x51, 0x19, 0xfb, 0xca, 0x1f, 0x35, 0xd0, 0x3e,
+      0x82, 0x56, 0x2a, 0x4e, 0x17, 0x20, 0x4a, 0x45, 0x59, 0x27, 0x06, 0x0a,
+      0xef, 0xec, 0x25, 0x96, 0xc6, 0xca, 0x48, 0x7b, 0x3e, 0x3b, 0x94, 0xcc,
+      0x4d, 0x3b, 0x15, 0x84, 0xb7, 0x90, 0x80, 0x55, 0x5c, 0x87, 0x9c, 0x69,
+      0xae, 0xc2, 0xa8, 0xca, 0xcc, 0xb0, 0x0e, 0xf0, 0x23, 0xab, 0xa8, 0x86,
+      0x72, 0x12, 0x01, 0x34, 0x2a, 0x2b, 0xe6, 0x8b, 0x67, 0xc9, 0x31, 0x24,
+      0x80, 0x44, 0x1d, 0x9b, 0x71, 0x56, 0x8e, 0x69, 0x0e, 0x20, 0x72, 0x8f,
+      0xb2, 0x27, 0x49, 0xcc, 0xca, 0x94, 0x86, 0x79, 0xaa, 0x70, 0xd5, 0xac,
+      0xef, 0xe3, 0x8a, 0x91, 0xe0, 0x26, 0xf4, 0x25, 0x08, 0xb4, 0x49, 0xc7,
+      0x19, 0xd5, 0x70, 0x27, 0xfa, 0x42, 0xb6, 0x23, 0xb2, 0x80, 0x14, 0x69,
+      0x91, 0x90, 0x0c, 0x85, 0x4b, 0x72, 0x5d, 0xc3, 0xb6, 0x56, 0xc4, 0xb9,
+      0xe7, 0xa6, 0x97, 0xbd, 0x57, 0x19, 0x11, 0x5b, 0x7c, 0xbf, 0xd2, 0x68,
+      0x21, 0x49, 0x35, 0x05, 0xdb, 0x5f, 0x9e, 0x40, 0xa4, 0x4f, 0x2a, 0x38,
+      0x17, 0x7c, 0x3b, 0xc4, 0x52, 0x5b, 0xfe, 0x05, 0x60, 0x6e, 0xc6, 0x5b,
+      0x77, 0x29, 0x4c, 0x16, 0xa1, 0x8c, 0x93, 0x94, 0x53, 0xc6, 0x61, 0x41,
+      0x78, 0x9a, 0x9d, 0xb5, 0x51, 0x5a, 0x2d, 0x23, 0x0a, 0x34, 0xa1, 0xad,
+      0x5e, 0x62, 0x2a, 0x0c, 0x27, 0xcb, 0xca, 0x07, 0xc4, 0x9f, 0x35, 0x9e,
+      0x4f, 0x25, 0x5f, 0xd7, 0x04, 0x8a, 0x93, 0xe8, 0xcf, 0x12, 0x08, 0x64,
+      0xd0, 0x69, 0x66, 0x4c, 0xc3, 0x0b, 0xe2, 0x61, 0xb6, 0x31, 0xa9, 0x11,
+      0x43, 0x6b, 0x49, 0x1e, 0xf0, 0x19, 0x86, 0xea, 0x3b, 0xf8, 0x91, 0x5f,
+      0x20, 0xca, 0x52, 0x66, 0x41, 0xcb, 0x44, 0xfa, 0x96, 0x31, 0x69, 0xb2,
+      0x09, 0x9b, 0x30, 0x7f, 0x86, 0x13, 0x15, 0x96, 0x02, 0x49, 0x88, 0x94,
+      0x6b, 0x01, 0x4e, 0x12, 0xf6, 0x74, 0x65, 0x89, 0x7a, 0xbe, 0x25, 0x04,
+      0xf2, 0xf8, 0x13, 0x9a, 0x7b, 0x1c, 0x94, 0xbb, 0x5f, 0xfc, 0x73, 0x24,
+      0x70, 0x1c, 0xa4, 0xa6, 0x2b, 0xcf, 0xa3, 0x42, 0xba, 0xfe, 0x53, 0x6f,
+      0xc4, 0x02, 0x2c, 0xbc, 0xb1, 0x9a, 0x2b, 0x74, 0x6f, 0xdd, 0x44, 0x2c,
+      0x45, 0x6b, 0x98, 0xa2, 0x77, 0x6f, 0x0c, 0x40, 0x9f, 0x94, 0x43, 0x0d,
+      0x33, 0xa0, 0xbd, 0x94, 0x36, 0x38, 0x1f, 0x49, 0x43, 0xbc, 0xc6, 0x8c,
+      0x6e, 0xe0, 0x89, 0x57, 0xc1, 0xb9, 0x4c, 0x95, 0x43, 0x74, 0xe6, 0xb0,
+      0x1b, 0x83, 0xaf, 0x8b, 0x3b, 0x2b, 0xe0, 0x18, 0x47, 0xe5, 0xd0, 0x4f,
+      0x74, 0x2b, 0xbb, 0x30, 0xbc, 0xcf, 0xb8, 0x52, 0x8b, 0x58, 0xf9, 0x7e,
+      0x5a, 0xb8, 0x48, 0xae, 0x68, 0x30, 0x01, 0x66, 0x0e, 0x69, 0xb4, 0xbc,
+      0xa0, 0x60, 0x2c, 0xbb, 0x43, 0xb3, 0xd5, 0xa2, 0x88, 0xaa, 0x8b, 0x93,
+      0x8c, 0x26, 0x67, 0x0d, 0x31, 0xa7, 0x9f, 0x70, 0x4a, 0x14, 0x54, 0x6b,
+      0x52, 0xfc, 0xbc, 0x81, 0x69, 0xa8, 0xfd, 0xd5, 0x40, 0x66, 0x0a, 0x3a,
+      0x56, 0xe3, 0x69, 0x39, 0xa7, 0x53, 0xd6, 0x39, 0x24, 0x73, 0x58, 0xad,
+      0xb6, 0xb4, 0xb7, 0xeb, 0xf0, 0x97, 0x96, 0x48, 0x25, 0xb7, 0xea, 0x80,
+      0x05, 0x68, 0x0f, 0x2a, 0xe5, 0x82, 0x0a, 0x6b, 0xcf, 0x60, 0xa6, 0x15,
+      0x28, 0x2b, 0x71, 0x07, 0x36, 0xba, 0xe6, 0xbb, 0x55, 0xe7, 0x48, 0xad,
+      0x3f, 0xb7, 0x3d, 0xd3, 0xac, 0xa0, 0x3e, 0x0a, 0x68, 0xf6, 0xb7, 0x13,
+      0xcf, 0xa6, 0x1b, 0x20, 0x16, 0xca, 0x8a, 0x47, 0x64, 0xaf, 0x25, 0x6e,
+      0xb9, 0xf8, 0x76, 0xfe, 0x6a, 0x70, 0x3f, 0xa1, 0x64, 0xd6, 0xec, 0x9a,
+      0x27, 0xc6, 0x84, 0xfd, 0xe5, 0x00, 0x1d, 0x75, 0x94, 0xdf, 0x70, 0x04,
+      0x59, 0x10, 0x46, 0xb3, 0xca, 0xaf, 0x65, 0x48, 0x81, 0x9b, 0x60, 0x38,
+      0xcd, 0xf3, 0x78, 0xa0, 0x33, 0xb8, 0x7c, 0x8c, 0x1a, 0x45, 0x04, 0x57,
+      0x13, 0x12, 0x5d, 0x4e, 0x61, 0x7f, 0x7c, 0x52, 0xb7, 0xdc, 0x27, 0x0c,
+      0x7c, 0x55, 0x2a, 0xdb, 0x03, 0x2e, 0xf6, 0x38, 0x11, 0x71, 0x3b, 0x06,
+      0x6e, 0x33, 0xc2, 0xc1, 0x42, 0x5b, 0x02, 0x14, 0xa1, 0xe3, 0xd8, 0xcf,
+      0x69, 0xb5, 0xc3, 0x37, 0xd1, 0x6b, 0x12, 0xd3, 0x64, 0x60, 0xfc, 0x3a,
+      0xd1, 0x4c, 0x27, 0x20, 0xf8, 0x69, 0xae, 0x4b, 0xa2, 0x94, 0xf6, 0x2c,
+      0x67, 0xe2, 0x47, 0x40, 0xb8, 0x93, 0x52, 0xa3, 0x8a, 0x73, 0x4c, 0xb5,
+      0x35, 0xb5, 0x8b, 0x6d, 0x94, 0x56, 0x8d, 0x2c, 0x65, 0xa6, 0xd6, 0x62,
+      0x3b, 0xb5, 0xc9, 0x05, 0x51, 0x3f, 0x62, 0x20, 0x1d, 0x48, 0xcb, 0x60,
+      0xa9, 0x46, 0xc9, 0x7c, 0x86, 0x5f, 0x96, 0xc9, 0xc4, 0xdf, 0x39, 0x33,
+      0x45, 0x23, 0xa1, 0xd1, 0x53, 0x95, 0xa9, 0x01, 0x95, 0xa3, 0xb5, 0x7b,
+      0x34, 0xb1, 0xb7, 0xc1, 0x27, 0x94, 0x4c, 0x2a, 0x2a, 0x39, 0xc2, 0xc0,
+      0x67, 0xa7, 0x14, 0xac, 0x13, 0xcb, 0x76, 0x8a, 0x68, 0xb4, 0xab, 0x6a,
+      0x97, 0x34, 0x69, 0xf0, 0xa4, 0x42, 0xd7, 0xe0, 0x7a, 0x70, 0x25, 0x43,
+      0x29, 0xd8, 0x01, 0x92, 0x69, 0x27, 0xd7, 0xfb, 0xbc, 0xc8, 0x88, 0x47,
+      0x68, 0x62, 0x33, 0x6e, 0xa2, 0x02, 0x6d, 0x68, 0xaa, 0x34, 0x8b, 0x4b,
+      0x6e, 0x3c, 0xb9, 0x72, 0xd4, 0x2c, 0xc0, 0x98, 0x29, 0x14, 0x79, 0xa4,
+      0xbe, 0x24, 0xb2, 0x33, 0xa7, 0x15, 0x5f, 0xb9, 0xaa, 0x77, 0x35, 0x3e,
+      0xbb, 0xc6, 0x4f, 0x0e, 0x0a, 0xa0, 0x28, 0x4a, 0xcc, 0x51, 0xf5, 0xc9,
+      0x26, 0x31, 0x5e, 0x0b, 0x44, 0x00, 0x79, 0xa7, 0x61, 0x9b, 0xb4, 0xb2,
+      0xe8, 0x08, 0x80, 0xd5, 0x1c, 0x1c, 0x18, 0xcb, 0xcc, 0xae, 0xa0, 0x4d,
+      0xe7, 0xc5, 0x69, 0xbe, 0xf5, 0x31, 0x61, 0xe3, 0xc3, 0xb7, 0x31, 0x0e,
+      0x91, 0x37, 0x53, 0x0e, 0x41, 0x0d, 0x40, 0xca, 0x55, 0xa6, 0xa5, 0x1f,
+      0x62, 0xe2, 0x21, 0x4e, 0x62, 0x2b, 0xd0, 0x25, 0x5b, 0x71, 0xab, 0x59,
+      0x44, 0xc5, 0x0f, 0x92, 0xb6, 0x34, 0x2c, 0xe7, 0xc2, 0xf6, 0xeb, 0x6c,
+      0x01, 0x87, 0x70, 0xa9, 0x08, 0x0e, 0x20, 0x54, 0x6e, 0xa9, 0x81, 0x2b,
+      0x7c, 0xe6, 0x5c, 0x7a, 0xa5, 0xae, 0x0a, 0xa6, 0x5d, 0x2f, 0x90, 0x36,
+      0xa9, 0xe4, 0x5c, 0x7d, 0xda, 0x0d, 0xc3, 0x2b, 0x31, 0x13, 0x65, 0xba,
+      0xcf, 0x48, 0x9d, 0x9e, 0x70, 0x88, 0x02, 0xb1, 0x62, 0x6c, 0x39, 0x2f,
+      0x9a, 0xa0, 0x0c, 0xb6, 0xd5, 0xa2, 0x37, 0xf3, 0xbc, 0xa3, 0x90, 0x8c,
+      0x0c, 0x85, 0x39, 0x93, 0xe9, 0x4a, 0x55, 0x8a, 0x05, 0x51, 0xa3, 0x75,
+      0x55, 0x51, 0x53, 0xd3, 0x44, 0x30, 0xb4, 0xf5, 0xa1, 0x6e, 0xd4, 0x48,
+      0x2d, 0x95, 0x06, 0x30, 0xca, 0x3f, 0xea, 0x06, 0x1c, 0xa0, 0xe5, 0x83,
+      0x6d, 0x18, 0x12, 0x70, 0x0b, 0xca, 0x26, 0xd3, 0x6d, 0x92, 0x0a, 0x3c,
+      0x49, 0xd9, 0x46, 0xcb, 0xd8, 0xa1, 0xf2, 0x01, 0x0a, 0x3e, 0x8b, 0x44,
+      0xe4, 0x9b, 0x14, 0x28, 0x23, 0x3a, 0x7a, 0x3a, 0x7e, 0x2c, 0x09, 0x64,
+      0xec, 0x47, 0xca, 0xc2, 0xb6, 0xa5, 0x27, 0x31, 0x0f, 0xe3, 0x19, 0x61,
+      0x45, 0xf0, 0xb7, 0x00, 0xb1, 0xbc, 0xac, 0xd9, 0x4b, 0x8a, 0xfb, 0x9e,
+      0x1f, 0x33, 0x66, 0xac, 0xb7, 0x83, 0xf3, 0x7a, 0xbd, 0xc8, 0x98, 0xbf,
+      0x1a, 0x6b, 0x9e, 0xf4, 0x8b, 0x60, 0x71, 0xe2, 0x9c, 0xa9, 0x48, 0x1c,
+      0x14, 0x83, 0x04, 0x03, 0x96, 0x4a, 0xa6, 0xf2, 0xae, 0xb2, 0x23, 0x42,
+      0xc0, 0x81, 0x6d, 0x7e, 0x02, 0x25, 0x7d, 0x41, 0xa8, 0x8f, 0x79, 0x0a,
+      0x13, 0x72, 0x71, 0x97, 0x42, 0xac, 0xaf, 0x76, 0x0d, 0x7b, 0x41, 0x29,
+      0x04, 0x64, 0x4d, 0x8b, 0x0b, 0x9c, 0x7f, 0xf3, 0x3a, 0xe7, 0xaa, 0x08,
+      0x06, 0xa7, 0x45, 0x4a, 0x38, 0xc8, 0x1c, 0xb5, 0x31, 0x9b, 0xf3, 0x46,
+      0x90, 0x21, 0x2b, 0x06, 0xe3, 0xb6, 0xf6, 0xab, 0x7f, 0x05, 0xe0, 0x1e,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+    },
+
+    .exp_dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+      0xe4, 0xb4, 0x3d, 0xd6, 0xb4, 0x02, 0xb6, 0x1c, 0x32, 0xf0, 0x19, 0x1d,
+      0x13, 0xb1, 0xb5, 0x4c, 0x50, 0xb8, 0xdc, 0xc2, 0x24, 0x48, 0x28, 0x64,
+      0xd7, 0xc8, 0x18, 0xf7, 0xa2, 0x42, 0xa8, 0x18, 0x1e, 0x32, 0x63, 0xbc,
+      0x43, 0x32, 0x50, 0x1b, 0x23, 0x59, 0xdb, 0xa9, 0xa8, 0x42, 0x18, 0x86,
+      0x24, 0x87, 0xa5, 0x4b, 0x4a, 0x6a, 0xfd, 0x4a, 0xa8, 0xed, 0x86, 0x68,
+      0x00, 0xe1, 0xaf, 0x36, 0xd7, 0xb6, 0xd3, 0x49, 0x81, 0x21, 0x74, 0x07,
+      0x38, 0xc4, 0xca, 0xfb, 0x10, 0xca, 0x54, 0x74, 0x3f, 0x4b, 0xe2, 0x07,
+      0xdd, 0xa5, 0x2e, 0xa1, 0xc9, 0xb1, 0x4a, 0x36, 0x81, 0x9f, 0x58, 0x18,
+      0x91, 0x5b, 0x74, 0x6f, 0xdc, 0xa9, 0x75, 0x7a, 0x4b, 0x59, 0x47, 0x69,
+      0xc8, 0x76, 0xa5, 0x30, 0xec, 0x95, 0xfb, 0x56, 0x8a, 0xce, 0xf0, 0x3f,
+      0x90, 0x04, 0x99, 0xb0, 0xb2, 0xca, 0xaa, 0x01, 0x58, 0xbe, 0x13, 0x7e,
+      0x86, 0x4c, 0x95, 0x46, 0x1b, 0x34, 0x22, 0xe8, 0xcd, 0x0a, 0x88, 0x8c,
+      0xa7, 0xd3, 0x02, 0xcf, 0xf8, 0x6a, 0x64, 0x03, 0x8f, 0xce, 0x28, 0x91,
+      0xba, 0xb6, 0x69, 0xd2, 0x81, 0x04, 0xa8, 0xf6, 0xa1, 0xb8, 0x64, 0xa1,
+      0x8e, 0x03, 0x7b, 0x39, 0x54, 0xb7, 0x56, 0x18, 0x45, 0xc4, 0x4a, 0x31,
+      0x8e, 0x87, 0x36, 0xfe, 0x09, 0x0d, 0xf1, 0x8a, 0x7d, 0xb7, 0xdb, 0x52,
+      0x8f, 0x24, 0x5d, 0x09, 0xe9, 0x01, 0xa5, 0x7a, 0x40, 0xc9, 0x3a, 0x0b,
+      0xb1, 0x77, 0x24, 0x80, 0xb7, 0x89, 0xa4, 0x98, 0x25, 0xf7, 0xd4, 0x7e,
+      0xe5, 0x7c, 0x73, 0xb5, 0xf3, 0x4c, 0x80, 0x19, 0x24, 0xea, 0xeb, 0x60,
+      0xe8, 0x29, 0x87, 0xe0, 0xb9, 0x6f, 0x50, 0x69, 0x45, 0x34, 0x98, 0x23,
+      0x93, 0xd7, 0x0b, 0xaa, 0x67, 0x65, 0xcf, 0xb8, 0xc0, 0xe0, 0x81, 0x17,
+      0xa2, 0x12, 0xa7, 0xe8, 0x0c, 0x14, 0x16, 0xc4, 0xb1, 0x7f, 0xd6, 0x55,
+      0xcf, 0x62, 0x89, 0xe3, 0xc6, 0x12, 0x92, 0xf2, 0x0a, 0x2c, 0x82, 0x9d,
+      0x94, 0x04, 0xc9, 0x6a, 0x34, 0x11, 0x83, 0x0b, 0x9f, 0x20, 0x4c, 0x01,
+      0x02, 0xf2, 0x06, 0x51, 0x18, 0x77, 0xf4, 0x6a, 0x89, 0x31, 0xdc, 0x01,
+      0x5d, 0x00, 0x03, 0xfc, 0x78, 0xb1, 0xe6, 0x55, 0x12, 0x3c, 0xa0, 0x14,
+      0xbd, 0xc4, 0xc3, 0x92, 0xbb, 0xaf, 0x7d, 0x1c, 0x4e, 0x99, 0xe7, 0x93,
+      0xf5, 0x22, 0x28, 0xaf, 0xe3, 0xc9, 0x34, 0xf4, 0xc4, 0xc3, 0x36, 0x36,
+      0xa5, 0x60, 0x93, 0x7e, 0xc0, 0xa2, 0x65, 0xa6, 0x96, 0x62, 0x52, 0x81,
+      0xdf, 0x60, 0x7f, 0x0a, 0x4c, 0x06, 0x62, 0xd3, 0x77, 0x70, 0x03, 0x50,
+      0x2f, 0x47, 0x4e, 0xb7, 0xe8, 0x94, 0xca, 0xf4, 0x47, 0x9f, 0xea, 0xb4,
+      0x18, 0xb1, 0x36, 0x04, 0x71, 0xb9, 0x6f, 0xda, 0xbe, 0x8c, 0xf4, 0x5f,
+      0x3c, 0x59, 0xce, 0x79, 0x99, 0x2e, 0xf8, 0xab, 0x1f, 0x4a, 0x8a, 0x1d,
+      0xc1, 0xe0, 0x30, 0xba, 0xf9, 0xc0, 0x21, 0x71, 0x42, 0xb7, 0xc9, 0x38,
+      0x55, 0xd8, 0x34, 0x1f, 0x49, 0x23, 0xcd, 0x27, 0x66, 0x93, 0xd3, 0x68,
+      0x6f, 0xc4, 0xc9, 0x6c, 0x47, 0x03, 0xad, 0x60, 0x4c, 0x34, 0x38, 0x58,
+      0x2b, 0xfb, 0x03, 0x6f, 0xd9, 0x62, 0xb0, 0xf8, 0xa0, 0xf4, 0xd6, 0x22,
+      0x3b, 0x0c, 0xb0, 0x38, 0x32, 0x15, 0xe7, 0xdb, 0x8c, 0x75, 0x82, 0x93,
+      0x39, 0x33, 0xad, 0x09, 0x51, 0x19, 0xfb, 0xca, 0x1f, 0x35, 0xd0, 0x3e,
+      0x82, 0x56, 0x2a, 0x4e, 0x17, 0x20, 0x4a, 0x45, 0x59, 0x27, 0x06, 0x0a,
+      0xef, 0xec, 0x25, 0x96, 0xc6, 0xca, 0x48, 0x7b, 0x3e, 0x3b, 0x94, 0xcc,
+      0x4d, 0x3b, 0x15, 0x84, 0xb7, 0x90, 0x80, 0x55, 0x5c, 0x87, 0x9c, 0x69,
+      0xae, 0xc2, 0xa8, 0xca, 0xcc, 0xb0, 0x0e, 0xf0, 0x23, 0xab, 0xa8, 0x86,
+      0x72, 0x12, 0x01, 0x34, 0x2a, 0x2b, 0xe6, 0x8b, 0x67, 0xc9, 0x31, 0x24,
+      0x80, 0x44, 0x1d, 0x9b, 0x71, 0x56, 0x8e, 0x69, 0x0e, 0x20, 0x72, 0x8f,
+      0xb2, 0x27, 0x49, 0xcc, 0xca, 0x94, 0x86, 0x79, 0xaa, 0x70, 0xd5, 0xac,
+      0xef, 0xe3, 0x8a, 0x91, 0xe0, 0x26, 0xf4, 0x25, 0x08, 0xb4, 0x49, 0xc7,
+      0x19, 0xd5, 0x70, 0x27, 0xfa, 0x42, 0xb6, 0x23, 0xb2, 0x80, 0x14, 0x69,
+      0x91, 0x90, 0x0c, 0x85, 0x4b, 0x72, 0x5d, 0xc3, 0xb6, 0x56, 0xc4, 0xb9,
+      0xe7, 0xa6, 0x97, 0xbd, 0x57, 0x19, 0x11, 0x5b, 0x7c, 0xbf, 0xd2, 0x68,
+      0x21, 0x49, 0x35, 0x05, 0xdb, 0x5f, 0x9e, 0x40, 0xa4, 0x4f, 0x2a, 0x38,
+      0x17, 0x7c, 0x3b, 0xc4, 0x52, 0x5b, 0xfe, 0x05, 0x60, 0x6e, 0xc6, 0x5b,
+      0x77, 0x29, 0x4c, 0x16, 0xa1, 0x8c, 0x93, 0x94, 0x53, 0xc6, 0x61, 0x41,
+      0x78, 0x9a, 0x9d, 0xb5, 0x51, 0x5a, 0x2d, 0x23, 0x0a, 0x34, 0xa1, 0xad,
+      0x5e, 0x62, 0x2a, 0x0c, 0x27, 0xcb, 0xca, 0x07, 0xc4, 0x9f, 0x35, 0x9e,
+      0x4f, 0x25, 0x5f, 0xd7, 0x04, 0x8a, 0x93, 0xe8, 0xcf, 0x12, 0x08, 0x64,
+      0xd0, 0x69, 0x66, 0x4c, 0xc3, 0x0b, 0xe2, 0x61, 0xb6, 0x31, 0xa9, 0x11,
+      0x43, 0x6b, 0x49, 0x1e, 0xf0, 0x19, 0x86, 0xea, 0x3b, 0xf8, 0x91, 0x5f,
+      0x20, 0xca, 0x52, 0x66, 0x41, 0xcb, 0x44, 0xfa, 0x96, 0x31, 0x69, 0xb2,
+      0x09, 0x9b, 0x30, 0x7f, 0x86, 0x13, 0x15, 0x96, 0x02, 0x49, 0x88, 0x94,
+      0x6b, 0x01, 0x4e, 0x12, 0xf6, 0x74, 0x65, 0x89, 0x7a, 0xbe, 0x25, 0x04,
+      0xf2, 0xf8, 0x13, 0x9a, 0x7b, 0x1c, 0x94, 0xbb, 0x5f, 0xfc, 0x73, 0x24,
+      0x70, 0x1c, 0xa4, 0xa6, 0x2b, 0xcf, 0xa3, 0x42, 0xba, 0xfe, 0x53, 0x6f,
+      0xc4, 0x02, 0x2c, 0xbc, 0xb1, 0x9a, 0x2b, 0x74, 0x6f, 0xdd, 0x44, 0x2c,
+      0x45, 0x6b, 0x98, 0xa2, 0x77, 0x6f, 0x0c, 0x40, 0x9f, 0x94, 0x43, 0x0d,
+      0x33, 0xa0, 0xbd, 0x94, 0x36, 0x38, 0x1f, 0x49, 0x43, 0xbc, 0xc6, 0x8c,
+      0x6e, 0xe0, 0x89, 0x57, 0xc1, 0xb9, 0x4c, 0x95, 0x43, 0x74, 0xe6, 0xb0,
+      0x1b, 0x83, 0xaf, 0x8b, 0x3b, 0x2b, 0xe0, 0x18, 0x47, 0xe5, 0xd0, 0x4f,
+      0x74, 0x2b, 0xbb, 0x30, 0xbc, 0xcf, 0xb8, 0x52, 0x8b, 0x58, 0xf9, 0x7e,
+      0x5a, 0xb8, 0x48, 0xae, 0x68, 0x30, 0x01, 0x66, 0x0e, 0x69, 0xb4, 0xbc,
+      0xa0, 0x60, 0x2c, 0xbb, 0x43, 0xb3, 0xd5, 0xa2, 0x88, 0xaa, 0x8b, 0x93,
+      0x8c, 0x26, 0x67, 0x0d, 0x31, 0xa7, 0x9f, 0x70, 0x4a, 0x14, 0x54, 0x6b,
+      0x52, 0xfc, 0xbc, 0x81, 0x69, 0xa8, 0xfd, 0xd5, 0x40, 0x66, 0x0a, 0x3a,
+      0x56, 0xe3, 0x69, 0x39, 0xa7, 0x53, 0xd6, 0x39, 0x24, 0x73, 0x58, 0xad,
+      0xb6, 0xb4, 0xb7, 0xeb, 0xf0, 0x97, 0x96, 0x48, 0x25, 0xb7, 0xea, 0x80,
+      0x05, 0x68, 0x0f, 0x2a, 0xe5, 0x82, 0x0a, 0x6b, 0xcf, 0x60, 0xa6, 0x15,
+      0x28, 0x2b, 0x71, 0x07, 0x36, 0xba, 0xe6, 0xbb, 0x55, 0xe7, 0x48, 0xad,
+      0x3f, 0xb7, 0x3d, 0xd3, 0xac, 0xa0, 0x3e, 0x0a, 0x68, 0xf6, 0xb7, 0x13,
+      0xcf, 0xa6, 0x1b, 0x20, 0x16, 0xca, 0x8a, 0x47, 0x64, 0xaf, 0x25, 0x6e,
+      0xb9, 0xf8, 0x76, 0xfe, 0x6a, 0x70, 0x3f, 0xa1, 0x64, 0xd6, 0xec, 0x9a,
+      0x27, 0xc6, 0x84, 0xfd, 0xe5, 0x00, 0x1d, 0x75, 0x94, 0xdf, 0x70, 0x04,
+      0x59, 0x10, 0x46, 0xb3, 0xca, 0xaf, 0x65, 0x48, 0x81, 0x9b, 0x60, 0x38,
+      0xcd, 0xf3, 0x78, 0xa0, 0x33, 0xb8, 0x7c, 0x8c, 0x1a, 0x45, 0x04, 0x57,
+      0x13, 0x12, 0x5d, 0x4e, 0x61, 0x7f, 0x7c, 0x52, 0xb7, 0xdc, 0x27, 0x0c,
+      0x7c, 0x55, 0x2a, 0xdb, 0x03, 0x2e, 0xf6, 0x38, 0x11, 0x71, 0x3b, 0x06,
+      0x6e, 0x33, 0xc2, 0xc1, 0x42, 0x5b, 0x02, 0x14, 0xa1, 0xe3, 0xd8, 0xcf,
+      0x69, 0xb5, 0xc3, 0x37, 0xd1, 0x6b, 0x12, 0xd3, 0x64, 0x60, 0xfc, 0x3a,
+      0xd1, 0x4c, 0x27, 0x20, 0xf8, 0x69, 0xae, 0x4b, 0xa2, 0x94, 0xf6, 0x2c,
+      0x67, 0xe2, 0x47, 0x40, 0xb8, 0x93, 0x52, 0xa3, 0x8a, 0x73, 0x4c, 0xb5,
+      0x35, 0xb5, 0x8b, 0x6d, 0x94, 0x56, 0x8d, 0x2c, 0x65, 0xa6, 0xd6, 0x62,
+      0x3b, 0xb5, 0xc9, 0x05, 0x51, 0x3f, 0x62, 0x20, 0x1d, 0x48, 0xcb, 0x60,
+      0xa9, 0x46, 0xc9, 0x7c, 0x86, 0x5f, 0x96, 0xc9, 0xc4, 0xdf, 0x39, 0x33,
+      0x45, 0x23, 0xa1, 0xd1, 0x53, 0x95, 0xa9, 0x01, 0x95, 0xa3, 0xb5, 0x7b,
+      0x34, 0xb1, 0xb7, 0xc1, 0x27, 0x94, 0x4c, 0x2a, 0x2a, 0x39, 0xc2, 0xc0,
+      0x67, 0xa7, 0x14, 0xac, 0x13, 0xcb, 0x76, 0x8a, 0x68, 0xb4, 0xab, 0x6a,
+      0x97, 0x34, 0x69, 0xf0, 0xa4, 0x42, 0xd7, 0xe0, 0x7a, 0x70, 0x25, 0x43,
+      0x29, 0xd8, 0x01, 0x92, 0x69, 0x27, 0xd7, 0xfb, 0xbc, 0xc8, 0x88, 0x47,
+      0x68, 0x62, 0x33, 0x6e, 0xa2, 0x02, 0x6d, 0x68, 0xaa, 0x34, 0x8b, 0x4b,
+      0x6e, 0x3c, 0xb9, 0x72, 0xd4, 0x2c, 0xc0, 0x98, 0x29, 0x14, 0x79, 0xa4,
+      0xbe, 0x24, 0xb2, 0x33, 0xa7, 0x15, 0x5f, 0xb9, 0xaa, 0x77, 0x35, 0x3e,
+      0xbb, 0xc6, 0x4f, 0x0e, 0x0a, 0xa0, 0x28, 0x4a, 0xcc, 0x51, 0xf5, 0xc9,
+      0x26, 0x31, 0x5e, 0x0b, 0x44, 0x00, 0x79, 0xa7, 0x61, 0x9b, 0xb4, 0xb2,
+      0xe8, 0x08, 0x80, 0xd5, 0x1c, 0x1c, 0x18, 0xcb, 0xcc, 0xae, 0xa0, 0x4d,
+      0xe7, 0xc5, 0x69, 0xbe, 0xf5, 0x31, 0x61, 0xe3, 0xc3, 0xb7, 0x31, 0x0e,
+      0x91, 0x37, 0x53, 0x0e, 0x41, 0x0d, 0x40, 0xca, 0x55, 0xa6, 0xa5, 0x1f,
+      0x62, 0xe2, 0x21, 0x4e, 0x62, 0x2b, 0xd0, 0x25, 0x5b, 0x71, 0xab, 0x59,
+      0x44, 0xc5, 0x0f, 0x92, 0xb6, 0x34, 0x2c, 0xe7, 0xc2, 0xf6, 0xeb, 0x6c,
+      0x01, 0x87, 0x70, 0xa9, 0x08, 0x0e, 0x20, 0x54, 0x6e, 0xa9, 0x81, 0x2b,
+      0x7c, 0xe6, 0x5c, 0x7a, 0xa5, 0xae, 0x0a, 0xa6, 0x5d, 0x2f, 0x90, 0x36,
+      0xa9, 0xe4, 0x5c, 0x7d, 0xda, 0x0d, 0xc3, 0x2b, 0x31, 0x13, 0x65, 0xba,
+      0xcf, 0x48, 0x9d, 0x9e, 0x70, 0x88, 0x02, 0xb1, 0x62, 0x6c, 0x39, 0x2f,
+      0x9a, 0xa0, 0x0c, 0xb6, 0xd5, 0xa2, 0x37, 0xf3, 0xbc, 0xa3, 0x90, 0x8c,
+      0x0c, 0x85, 0x39, 0x93, 0xe9, 0x4a, 0x55, 0x8a, 0x05, 0x51, 0xa3, 0x75,
+      0x55, 0x51, 0x53, 0xd3, 0x44, 0x30, 0xb4, 0xf5, 0xa1, 0x6e, 0xd4, 0x48,
+      0x2d, 0x95, 0x06, 0x30, 0xca, 0x3f, 0xea, 0x06, 0x1c, 0xa0, 0xe5, 0x83,
+      0x6d, 0x18, 0x12, 0x70, 0x0b, 0xca, 0x26, 0xd3, 0x6d, 0x92, 0x0a, 0x3c,
+      0x49, 0xd9, 0x46, 0xcb, 0xd8, 0xa1, 0xf2, 0x01, 0x0a, 0x3e, 0x8b, 0x44,
+      0xe4, 0x9b, 0x14, 0x28, 0x23, 0x3a, 0x7a, 0x3a, 0x7e, 0x2c, 0x09, 0x64,
+      0xec, 0x47, 0xca, 0xc2, 0xb6, 0xa5, 0x27, 0x31, 0x0f, 0xe3, 0x19, 0x61,
+      0x45, 0xf0, 0xb7, 0x00, 0xb1, 0xbc, 0xac, 0xd9, 0x4b, 0x8a, 0xfb, 0x9e,
+      0x1f, 0x33, 0x66, 0xac, 0xb7, 0x83, 0xf3, 0x7a, 0xbd, 0xc8, 0x98, 0xbf,
+      0x1a, 0x6b, 0x9e, 0xf4, 0x8b, 0x60, 0x71, 0xe2, 0x9c, 0xa9, 0x48, 0x1c,
+      0x14, 0x83, 0x04, 0x03, 0x96, 0x4a, 0xa6, 0xf2, 0xae, 0xb2, 0x23, 0x42,
+      0xc0, 0x81, 0x6d, 0x7e, 0x02, 0x25, 0x7d, 0x41, 0xa8, 0x8f, 0x79, 0x0a,
+      0x13, 0x72, 0x71, 0x97, 0x42, 0xac, 0xaf, 0x76, 0x0d, 0x7b, 0x41, 0x29,
+      0x04, 0x64, 0x4d, 0x8b, 0x0b, 0x9c, 0x7f, 0xf3, 0x3a, 0xe7, 0xaa, 0x08,
+      0x06, 0xa7, 0x45, 0x4a, 0x38, 0xc8, 0x1c, 0xb5, 0x31, 0x9b, 0xf3, 0x46,
+      0x90, 0x21, 0x2b, 0x06, 0xe3, 0xb6, 0xf6, 0xab, 0x7f, 0x05, 0xe0, 0x1e,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x10, 0x27, 0x76, 0xaa,
+      0x21, 0xa3, 0xd0, 0xb9, 0x7c, 0x61, 0xc5, 0x0f, 0xb8, 0x3c, 0xe3, 0xc4,
+      0xc4, 0x6b, 0xc7, 0x4e, 0x18, 0x4a, 0x04, 0x35, 0x5b, 0x46, 0x63, 0x50,
+      0x82, 0x33, 0x42, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+  }, {
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Key Generation -- ML-KEM-1024",
+
+    .seed = {
+      // z
+      0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED, 0x63, 0x88, 0x63, 0x8E,
+      0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F, 0xFD, 0xF2, 0xB6, 0x7C,
+      0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
+
+      // d
+      0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED, 0x63, 0x88, 0x63, 0x8E,
+      0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F, 0xFD, 0xF2, 0xB6, 0x7C,
+      0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
+    },
+
+    .exp_ek = {
+      0x70, 0xE1, 0x3F, 0x30, 0x15, 0x17, 0xB5, 0xA4, 0x0D, 0x70, 0x36, 0x1F,
+      0x63, 0x09, 0x41, 0x60, 0x67, 0x64, 0x6D, 0x2B, 0x71, 0x36, 0x62, 0x6B,
+      0xCC, 0xCC, 0x17, 0x0C, 0x66, 0xCE, 0xD4, 0x90, 0xC7, 0x35, 0x34, 0x4B,
+      0x62, 0x77, 0x09, 0x7C, 0xA9, 0x14, 0x21, 0x2A, 0x29, 0x2D, 0xD1, 0x22,
+      0xFB, 0xB6, 0x9F, 0xDE, 0xCA, 0x47, 0xFA, 0xB4, 0x53, 0x2B, 0x8C, 0x80,
+      0xCE, 0xB7, 0x7F, 0x9C, 0x54, 0x3E, 0x0B, 0xF1, 0x53, 0x6D, 0x1C, 0x0C,
+      0xAE, 0x07, 0x7E, 0x2C, 0xA7, 0x86, 0x2B, 0x45, 0xA4, 0x10, 0x46, 0x9C,
+      0xC5, 0xB7, 0x06, 0xBA, 0xE0, 0x05, 0x1C, 0xB2, 0x96, 0x1D, 0xB7, 0x27,
+      0x0B, 0x75, 0xB7, 0x11, 0x69, 0x8D, 0x2B, 0x80, 0x70, 0x40, 0xD5, 0x62,
+      0x81, 0x29, 0x43, 0x6F, 0xBB, 0x58, 0xF1, 0x20, 0x3F, 0x75, 0x56, 0x14,
+      0x65, 0xF5, 0x42, 0x57, 0xE4, 0x4D, 0x33, 0xF5, 0x12, 0xD6, 0x33, 0x43,
+      0x1D, 0x00, 0xA2, 0xFB, 0x02, 0x30, 0xC9, 0xBB, 0x9C, 0xDD, 0xFC, 0x83,
+      0xBD, 0x65, 0xC9, 0x74, 0x45, 0x30, 0x21, 0x86, 0xA1, 0x72, 0x23, 0xAD,
+      0x21, 0x33, 0x28, 0x03, 0xB9, 0x09, 0xE5, 0xE5, 0x67, 0x19, 0x70, 0xBB,
+      0xB0, 0xF1, 0xC4, 0x83, 0x7B, 0xB8, 0x42, 0x73, 0xBA, 0x67, 0x5A, 0xC0,
+      0x74, 0xC5, 0x29, 0x0B, 0x41, 0x1C, 0x25, 0x00, 0x65, 0x70, 0x59, 0x33,
+      0x9D, 0xE3, 0x92, 0xF9, 0xCA, 0x30, 0x89, 0x52, 0xA2, 0x20, 0x1A, 0x58,
+      0x87, 0x67, 0xAD, 0xC0, 0x35, 0xBD, 0xF3, 0x30, 0x24, 0xEA, 0x3B, 0x9A,
+      0x83, 0xC5, 0xA0, 0xB9, 0xC5, 0x42, 0x5D, 0x14, 0x07, 0x0C, 0x81, 0xAA,
+      0xDA, 0x26, 0xBA, 0xC3, 0xFB, 0xB8, 0xD4, 0xB7, 0xCF, 0xEE, 0x03, 0x92,
+      0x37, 0x5C, 0x68, 0x42, 0x73, 0x51, 0xDF, 0xEC, 0x63, 0x60, 0x9B, 0xBB,
+      0x50, 0xB4, 0x63, 0xE0, 0x40, 0x92, 0x85, 0x70, 0x09, 0xD1, 0xE5, 0xB8,
+      0x1D, 0x70, 0x7D, 0x14, 0xB8, 0x33, 0xCD, 0x4A, 0x0B, 0x55, 0x1B, 0xAA,
+      0x13, 0xEC, 0x48, 0x8A, 0x15, 0x03, 0xB0, 0x46, 0x7E, 0xE4, 0x02, 0x3C,
+      0x3F, 0xE0, 0x32, 0xC7, 0x82, 0x25, 0x06, 0x38, 0x86, 0xE2, 0x46, 0x8E,
+      0x00, 0xF7, 0x00, 0x07, 0x2A, 0x2E, 0xC8, 0xDA, 0x6A, 0xFB, 0x20, 0x6C,
+      0x91, 0x90, 0x44, 0x33, 0xBB, 0xCC, 0xB0, 0xE7, 0x6F, 0x42, 0x46, 0x8C,
+      0x40, 0xEB, 0x5F, 0x59, 0xCB, 0x9A, 0xE1, 0xB0, 0x35, 0xE5, 0x21, 0x51,
+      0x0B, 0xF2, 0x16, 0xA1, 0xAB, 0xCB, 0x19, 0x03, 0x3B, 0x7A, 0x65, 0x88,
+      0x97, 0xC6, 0x58, 0x74, 0xD5, 0x13, 0x51, 0x83, 0x14, 0x9F, 0x97, 0x9E,
+      0x55, 0x3C, 0xCF, 0xBF, 0xA3, 0x90, 0x0C, 0xDA, 0x6F, 0x01, 0x96, 0x0B,
+      0x75, 0x15, 0x7F, 0x54, 0x53, 0xAA, 0x6E, 0x73, 0xB3, 0xED, 0x90, 0x2F,
+      0x7D, 0x7C, 0x93, 0x05, 0x97, 0x1B, 0xDF, 0x72, 0x2E, 0x29, 0x37, 0x16,
+      0x9A, 0x1B, 0xC0, 0xFA, 0xEB, 0x6C, 0x92, 0xF7, 0x15, 0x0D, 0x23, 0x30,
+      0x87, 0x7C, 0x5D, 0xC5, 0x24, 0x9A, 0xAE, 0x20, 0x30, 0x26, 0x34, 0xC5,
+      0xC5, 0xB2, 0x30, 0x53, 0x52, 0x10, 0x28, 0x12, 0x25, 0x42, 0xF4, 0x85,
+      0xA0, 0xEA, 0xC8, 0x69, 0x22, 0x37, 0x20, 0x63, 0x36, 0x51, 0xF5, 0xB2,
+      0x47, 0xC6, 0x62, 0xB3, 0x1A, 0x10, 0x53, 0x8C, 0xA7, 0x49, 0x1B, 0x14,
+      0x37, 0xAA, 0x74, 0xF4, 0x28, 0x2D, 0x12, 0x97, 0x4D, 0x9C, 0x93, 0x4D,
+      0xF2, 0x14, 0x78, 0x5B, 0x64, 0x18, 0x46, 0x8B, 0x92, 0xE5, 0x25, 0x28,
+      0xC8, 0x44, 0x7A, 0x1C, 0xA4, 0x22, 0xFA, 0x6C, 0xC8, 0x8E, 0x28, 0xB0,
+      0x59, 0xF0, 0x4B, 0x23, 0x59, 0x73, 0x23, 0xF7, 0x2F, 0x3E, 0x23, 0x36,
+      0xF8, 0x7C, 0x47, 0x90, 0x5C, 0xBA, 0x65, 0x5B, 0xB7, 0x3F, 0xC3, 0x2E,
+      0x18, 0xD4, 0xB7, 0x87, 0x05, 0xC7, 0x82, 0xEB, 0xCB, 0x43, 0xE2, 0x78,
+      0x5C, 0x82, 0xC5, 0xAF, 0x24, 0xB0, 0xE1, 0x69, 0x9C, 0xFB, 0xC0, 0x25,
+      0x74, 0x75, 0x79, 0x9A, 0x53, 0x9B, 0x11, 0xA5, 0x0F, 0x4D, 0xF2, 0xB7,
+      0xFA, 0xA2, 0x0B, 0xD8, 0x82, 0x75, 0x15, 0xCA, 0x37, 0x0F, 0x89, 0xC0,
+      0xD4, 0xC6, 0x09, 0x02, 0xF6, 0x56, 0x7C, 0xD6, 0x0B, 0x08, 0x60, 0xA5,
+      0x5B, 0xC8, 0x57, 0x2C, 0x43, 0x6C, 0x24, 0x6A, 0xC2, 0x76, 0x64, 0x4E,
+      0x7D, 0x60, 0x2A, 0xA5, 0x7C, 0x01, 0x66, 0x20, 0x18, 0x14, 0x99, 0x1C,
+      0x1B, 0xD7, 0x5C, 0x7C, 0x47, 0xC3, 0x48, 0xB6, 0x7D, 0x77, 0x61, 0x33,
+      0x86, 0x90, 0x81, 0x44, 0xEA, 0x83, 0xFF, 0x72, 0x1F, 0x9A, 0x50, 0x07,
+      0x6C, 0x51, 0x01, 0x64, 0xD1, 0x8E, 0x05, 0xD0, 0x5D, 0x98, 0x84, 0xC4,
+      0x41, 0x46, 0xA0, 0x7C, 0xCA, 0xCF, 0x89, 0x04, 0x98, 0xED, 0x1A, 0x19,
+      0xB2, 0xA1, 0x54, 0x31, 0x72, 0x9D, 0xC1, 0xF1, 0x2B, 0x7E, 0xA1, 0x0F,
+      0x9F, 0x92, 0x80, 0x62, 0xD1, 0x45, 0x4B, 0x4B, 0x9F, 0x68, 0xE5, 0x99,
+      0x90, 0x29, 0x0B, 0xE3, 0x72, 0x8B, 0x32, 0x89, 0x56, 0x93, 0x63, 0xAB,
+      0x10, 0x05, 0x13, 0x1B, 0x23, 0x81, 0xA0, 0x8C, 0xC2, 0xBF, 0x94, 0x3E,
+      0x95, 0xD5, 0xB2, 0x1B, 0xC6, 0xAA, 0xBC, 0x22, 0x73, 0x34, 0x8B, 0xC7,
+      0x2B, 0xD0, 0x93, 0xB7, 0xB5, 0x61, 0x7A, 0xE8, 0x7F, 0x60, 0x2B, 0xB9,
+      0x89, 0xE6, 0xAF, 0xC4, 0x4B, 0x81, 0x51, 0x20, 0x76, 0xA3, 0xA8, 0x76,
+      0xE0, 0xE2, 0x5F, 0x97, 0x62, 0xB4, 0x62, 0x08, 0x19, 0x85, 0x50, 0x2F,
+      0x26, 0xB2, 0x87, 0xA2, 0x93, 0x6D, 0x5B, 0x1A, 0xCF, 0xFC, 0xEC, 0x4E,
+      0xEE, 0x77, 0xA9, 0xCB, 0xA9, 0x80, 0xEB, 0x9B, 0x5F, 0xDE, 0x75, 0x53,
+      0x9F, 0x65, 0x09, 0x04, 0x67, 0x7D, 0xBE, 0x29, 0xAB, 0x8B, 0xB9, 0x18,
+      0xA3, 0x49, 0x48, 0x03, 0xEC, 0xA5, 0x9A, 0x2C, 0x32, 0xE5, 0xB5, 0xC8,
+      0x3B, 0x0B, 0x80, 0xB1, 0x10, 0x2C, 0xD7, 0xD9, 0x48, 0x2B, 0x45, 0x9B,
+      0x6B, 0x74, 0x49, 0x1E, 0xC3, 0x0C, 0x4B, 0xE7, 0x7C, 0x2B, 0x52, 0x4A,
+      0xF7, 0xB3, 0xAD, 0x1F, 0x71, 0x34, 0x1D, 0xF0, 0xA7, 0x6F, 0x25, 0x5C,
+      0x29, 0x03, 0xC8, 0x82, 0x08, 0x07, 0x93, 0x79, 0x93, 0x0A, 0x95, 0x13,
+      0xF3, 0x90, 0x12, 0x6E, 0x73, 0x2A, 0x2B, 0xB0, 0x94, 0xBF, 0xA6, 0xBF,
+      0x0A, 0x43, 0x2B, 0xCD, 0x65, 0x7D, 0xAF, 0xCB, 0x25, 0xC8, 0xBB, 0x15,
+      0xE0, 0x95, 0x5D, 0x09, 0x9B, 0x74, 0xFF, 0x1A, 0x4D, 0xE6, 0x55, 0x9C,
+      0xD6, 0x79, 0x7C, 0x38, 0xC4, 0x8C, 0x11, 0x34, 0xCA, 0x2C, 0x97, 0x92,
+      0x43, 0xF3, 0x15, 0x2A, 0xF4, 0xBB, 0xE4, 0xD7, 0xA6, 0xBC, 0x09, 0x87,
+      0x21, 0x33, 0x92, 0x0C, 0xD2, 0x3B, 0x3E, 0xF9, 0x84, 0x8C, 0xCC, 0x68,
+      0x45, 0xD6, 0x47, 0xB5, 0x38, 0x75, 0x57, 0x73, 0x65, 0x13, 0xD5, 0x85,
+      0x60, 0x84, 0x51, 0x92, 0xF9, 0x26, 0x51, 0x59, 0x93, 0x2E, 0x57, 0x2A,
+      0x88, 0xC4, 0x4E, 0x65, 0x66, 0x76, 0x0C, 0x06, 0x1C, 0x67, 0xFC, 0xB5,
+      0xBF, 0x21, 0x00, 0x95, 0xE2, 0x14, 0xDA, 0x74, 0x53, 0x57, 0xE3, 0x69,
+      0x96, 0xD8, 0xC0, 0x66, 0x31, 0x1B, 0xBC, 0x76, 0x1A, 0x1F, 0xD2, 0x52,
+      0x73, 0xD2, 0x1E, 0xAB, 0x50, 0x01, 0x05, 0x63, 0xCD, 0x64, 0x68, 0xA4,
+      0xEA, 0x83, 0x6B, 0x6D, 0x64, 0xBD, 0x2B, 0xD7, 0x6D, 0xBE, 0x35, 0x82,
+      0xD5, 0x73, 0x6A, 0x60, 0x5A, 0x55, 0x09, 0xFC, 0x28, 0x78, 0x9B, 0x56,
+      0xB8, 0x84, 0xAE, 0x9A, 0x60, 0x41, 0x5F, 0x55, 0x67, 0x4B, 0xE6, 0x01,
+      0x57, 0x6C, 0x7C, 0xEE, 0x58, 0x14, 0x3B, 0xF0, 0x54, 0x80, 0x6A, 0xBC,
+      0xB3, 0x45, 0xA2, 0x56, 0xCB, 0xC4, 0x54, 0xE3, 0x43, 0xF3, 0xCC, 0x7A,
+      0xDE, 0x65, 0x56, 0x2F, 0xD2, 0x9E, 0xB2, 0x59, 0x73, 0x7B, 0xB3, 0xCF,
+      0x96, 0x49, 0xBD, 0xEA, 0x28, 0x3F, 0xB0, 0x72, 0x65, 0x67, 0x7C, 0x98,
+      0x08, 0xD1, 0x31, 0x19, 0xC0, 0xA2, 0xAD, 0xF7, 0x45, 0xDE, 0x69, 0x75,
+      0xF4, 0x56, 0x2C, 0xD6, 0x15, 0x57, 0xB3, 0x96, 0x5D, 0x2B, 0x07, 0x2F,
+      0x00, 0x0A, 0xA7, 0xE0, 0xA3, 0x57, 0xE1, 0x25, 0x3E, 0xAF, 0xEA, 0x7F,
+      0xDF, 0xCC, 0x92, 0xFA, 0x87, 0x63, 0x0D, 0xD2, 0x27, 0x6C, 0xE4, 0x2E,
+      0x82, 0x0B, 0x69, 0xD1, 0xFC, 0x2E, 0x47, 0xD5, 0xC4, 0x98, 0xA5, 0x5B,
+      0x3B, 0x29, 0xC3, 0x4E, 0x64, 0x90, 0x3D, 0x04, 0x7A, 0xB1, 0xC0, 0x40,
+      0x24, 0x95, 0x8F, 0x70, 0x11, 0x95, 0xF5, 0xD1, 0x3E, 0xC6, 0x70, 0x6B,
+      0x84, 0x48, 0x50, 0x3A, 0x54, 0x99, 0x22, 0xA5, 0x8A, 0x24, 0xB6, 0x7C,
+      0x93, 0x63, 0x27, 0x56, 0xB7, 0x7D, 0x22, 0x54, 0x07, 0x31, 0x61, 0x71,
+      0xDE, 0xEC, 0x56, 0x71, 0x44, 0x35, 0xCF, 0x94, 0xCC, 0xF4, 0x59, 0x9E,
+      0x00, 0xD1, 0x0E, 0x56, 0x96, 0x22, 0xBA, 0xDA, 0x82, 0x0C, 0x45, 0x2F,
+      0x25, 0x42, 0xAD, 0xF0, 0x87, 0x65, 0xCA, 0x93, 0xAE, 0x38, 0xEB, 0x02,
+      0x5D, 0xE3, 0x1C, 0xFF, 0x79, 0x74, 0x54, 0x9A, 0x78, 0x25, 0xA8, 0x31,
+      0xDD, 0x05, 0x4E, 0x87, 0xB8, 0x4C, 0x5F, 0x25, 0x47, 0xFF, 0x47, 0xB4,
+      0x6F, 0x88, 0xC9, 0x9F, 0x15, 0x48, 0xE9, 0x33, 0xA6, 0xF4, 0xD8, 0x7F,
+      0x1A, 0x4A, 0x1B, 0x00, 0xE3, 0x9E, 0x02, 0xD6, 0x0E, 0x51, 0xEB, 0x60,
+      0x3C, 0x1C, 0x0D, 0x80, 0x7A, 0xCD, 0xAB, 0x08, 0xBA, 0xA2, 0xB9, 0x98,
+      0x69, 0xB7, 0x5C, 0xA2, 0xC4, 0xB9, 0x63, 0x68, 0xB5, 0x17, 0x80, 0xBD,
+      0x1E, 0xC7, 0x5B, 0x11, 0x0B, 0x9F, 0xA6, 0x65, 0x56, 0x87, 0x6C, 0x5F,
+      0x48, 0x79, 0x7D, 0x09, 0x01, 0x38, 0xF7, 0x54, 0xAE, 0x30, 0x53, 0x3D,
+      0x36, 0xAA, 0x44, 0xB9, 0xB1, 0x70, 0x2A, 0x6A, 0x8A, 0x56, 0x62, 0x6B,
+      0xF0, 0x45, 0x1A, 0x37, 0xA7, 0xAC, 0x1A, 0x33, 0x70, 0x76, 0xE5, 0x1E,
+      0x0A, 0x6B, 0x03, 0x00, 0xC2, 0xC7, 0x90, 0xA4, 0x43, 0x7E, 0xA2, 0x8D,
+      0x7E, 0xC9, 0x8C, 0x41, 0x9B, 0x37, 0xD6, 0xAA, 0x97, 0x04, 0x17, 0x43,
+      0x5F, 0x91, 0xBE, 0xDC, 0x2B, 0x1F, 0x4B, 0xC8, 0x15, 0x8A, 0x51, 0xB1,
+      0xF4, 0x71, 0x51, 0x6F, 0xE8, 0x24, 0x28, 0x7C, 0x89, 0x6B, 0x89, 0x1B,
+      0x49, 0xF2, 0x54, 0xDD, 0x36, 0x35, 0x9B, 0x89, 0xC8, 0x24, 0xEB, 0x3F,
+      0x62, 0x48, 0x02, 0x7F, 0xBB, 0xAD, 0x4C, 0xF2, 0x91, 0x18, 0xCB, 0x50,
+      0xEB, 0xB6, 0x25, 0xA3, 0x7C, 0x53, 0x7A, 0x02, 0x23, 0xF0, 0xEB, 0x70,
+      0x85, 0xB5, 0xC7, 0xEC, 0x60, 0x75, 0x70, 0xDB, 0x91, 0x85, 0xD5, 0x99,
+      0x02, 0xBC, 0x26, 0xC6, 0x54, 0xA2, 0x80, 0x4C, 0x0D, 0x94, 0x67, 0x93,
+      0xD8, 0xA2, 0x14, 0x82, 0xAC, 0x4F, 0x05, 0xE9, 0x01, 0x62, 0x60, 0x33,
+      0x1D, 0xCC, 0x58, 0xBC, 0x66, 0xAF, 0x3C, 0xA7, 0x58, 0x54, 0x40, 0x21,
+      0x6A, 0xA0, 0x26, 0x3B, 0x2A, 0x72, 0x5E, 0x08, 0x0F, 0x6F, 0x9C, 0x5B,
+      0x6A, 0x9C, 0x9D, 0xA2, 0x93, 0x55, 0x18, 0x9B, 0x4B, 0x95, 0xB1, 0x37,
+      0xD1, 0x22, 0x5F, 0x25, 0x2A, 0xC7, 0x97, 0xB0, 0x64, 0x6C, 0xAC, 0x52,
+      0x16, 0x4B, 0x59, 0x72, 0xA9, 0x92, 0x65, 0xD3, 0x47, 0xFC, 0x7C, 0x35,
+      0x91, 0xD1, 0x5F, 0xFE, 0x68, 0x1C, 0x06, 0xD4, 0x38, 0xCC, 0xEB, 0x60,
+      0xBB, 0x63, 0x10, 0xB7, 0x95, 0x32, 0x89, 0x72, 0x0E, 0x2C, 0x72, 0x87,
+      0x30, 0x05, 0x23, 0x37, 0xAC, 0xA7, 0xC8, 0x52, 0x1A, 0xB4, 0x4F, 0x1E,
+      0x2A, 0x04, 0x9B, 0x83, 0xE0, 0x77, 0x4C, 0x96, 0xCD, 0x8C, 0x87, 0x6F,
+      0xA6, 0x75, 0xD0, 0x92, 0x39, 0x77, 0x27, 0x1B,
+    },
+
+    .exp_dk = {
+      0x8A, 0xD0, 0xB5, 0xF0, 0x9A, 0x25, 0xAA, 0x93, 0x5D, 0xD9, 0xDA, 0x34,
+      0xAB, 0x82, 0xCA, 0x75, 0xA1, 0x2D, 0x66, 0xE9, 0x9C, 0xF4, 0x8B, 0xCA,
+      0x45, 0xB9, 0xB2, 0xDB, 0x44, 0x1B, 0xC2, 0x97, 0x1B, 0xDC, 0x99, 0x22,
+      0xB5, 0xF8, 0xBC, 0x3C, 0x06, 0x78, 0x54, 0x67, 0x59, 0x07, 0x3C, 0xB8,
+      0x8E, 0x26, 0xBA, 0xD1, 0xB1, 0xB3, 0xA4, 0x64, 0x6A, 0x65, 0x29, 0xC6,
+      0x32, 0xEA, 0xA3, 0x47, 0x73, 0x4A, 0x3B, 0xE5, 0x83, 0xD4, 0x71, 0x78,
+      0x09, 0x4C, 0x4A, 0x67, 0x0C, 0xBC, 0x41, 0xEC, 0x06, 0x89, 0x76, 0x56,
+      0x68, 0x54, 0x2E, 0x6F, 0x15, 0xA7, 0xD5, 0x86, 0xC9, 0xE2, 0x6A, 0x6A,
+      0x03, 0xC7, 0x14, 0x69, 0xC2, 0xC5, 0x3F, 0x7B, 0x14, 0x1B, 0x23, 0x2D,
+      0x86, 0x21, 0x6A, 0x25, 0xC7, 0xA8, 0xF3, 0x68, 0x52, 0x85, 0x8C, 0x07,
+      0xA9, 0x52, 0x4E, 0xE1, 0x7B, 0xA6, 0x34, 0x0A, 0xA2, 0xA2, 0x15, 0xC1,
+      0xEA, 0x85, 0x21, 0x67, 0xB6, 0x89, 0x1C, 0xC1, 0x66, 0xC2, 0xFA, 0x13,
+      0xA0, 0x27, 0x0A, 0x22, 0x98, 0x34, 0x13, 0xE0, 0xAC, 0xC4, 0x44, 0xBF,
+      0x40, 0xE2, 0x8C, 0x45, 0xE1, 0x4E, 0x07, 0x40, 0x4F, 0x62, 0x99, 0x63,
+      0x69, 0x59, 0x7F, 0x10, 0xFC, 0xC1, 0x80, 0xEC, 0xAC, 0xAD, 0x1A, 0x67,
+      0x19, 0xAB, 0x9F, 0x1B, 0x44, 0x7A, 0xE1, 0x9A, 0x2C, 0xB0, 0x2A, 0x7D,
+      0x04, 0x20, 0x61, 0x72, 0x16, 0x8C, 0x4F, 0x0A, 0x99, 0xBA, 0xFA, 0x93,
+      0x2D, 0x66, 0x49, 0xE8, 0x94, 0xA8, 0xF0, 0x57, 0x7B, 0x81, 0xC6, 0x64,
+      0x83, 0xC5, 0xB5, 0xCF, 0x60, 0xAE, 0x75, 0xA4, 0x44, 0x52, 0x6A, 0x9B,
+      0x36, 0x74, 0x32, 0x5F, 0xBA, 0x38, 0xF5, 0x32, 0x96, 0x42, 0x1A, 0x78,
+      0x50, 0x11, 0xC1, 0xDD, 0xB3, 0xA6, 0x99, 0x77, 0x45, 0xDB, 0x83, 0xCD,
+      0x58, 0x3C, 0x0C, 0x41, 0x77, 0xC7, 0x97, 0xD4, 0x0A, 0x4F, 0x69, 0x9F,
+      0x1F, 0x40, 0xC5, 0x41, 0x3A, 0xC4, 0xE4, 0x23, 0x73, 0x49, 0x2B, 0x6A,
+      0x2C, 0x6A, 0x40, 0x6D, 0x43, 0x7F, 0x42, 0x57, 0x0B, 0x5E, 0x94, 0x9E,
+      0xF4, 0x35, 0x0D, 0xEA, 0x79, 0x0C, 0xFE, 0xB7, 0x2D, 0x12, 0x87, 0x51,
+      0x7F, 0xE3, 0x27, 0x3D, 0x3C, 0xA6, 0x5A, 0x13, 0xCA, 0x6E, 0x23, 0xC5,
+      0x7B, 0xF0, 0x7D, 0xA0, 0x4B, 0x85, 0x1C, 0xF3, 0xAF, 0xA1, 0x8B, 0xAF,
+      0x5E, 0xF0, 0x20, 0x79, 0x28, 0x57, 0xA9, 0xE7, 0x21, 0xF0, 0x1B, 0x9F,
+      0xEA, 0x7B, 0x61, 0x2E, 0x4C, 0x6E, 0x29, 0x07, 0x93, 0x66, 0xB0, 0x22,
+      0x86, 0x88, 0xBE, 0x2A, 0x06, 0x7F, 0xBE, 0x92, 0x84, 0x2D, 0xD2, 0x80,
+      0xB3, 0xC7, 0x4D, 0xFA, 0xB7, 0x61, 0xE6, 0x13, 0xA8, 0x60, 0x4C, 0x47,
+      0x6E, 0x15, 0x46, 0x66, 0x85, 0xC6, 0x95, 0xAC, 0x35, 0x79, 0x1A, 0x91,
+      0x59, 0x94, 0x2F, 0x60, 0x17, 0x0C, 0xA2, 0x14, 0xC7, 0xC0, 0x9B, 0x1A,
+      0x4B, 0x1B, 0xCC, 0x4F, 0x4C, 0xC6, 0x0D, 0xF0, 0x1A, 0x10, 0x19, 0x15,
+      0xA9, 0xA2, 0xBC, 0x55, 0x31, 0x19, 0x66, 0x50, 0x32, 0xDC, 0xD9, 0x47,
+      0x6F, 0xBA, 0x7B, 0xB0, 0x71, 0x57, 0xD3, 0x3C, 0x9C, 0x8E, 0xFA, 0x6B,
+      0xD0, 0xAC, 0x38, 0xC1, 0xAC, 0x26, 0x5F, 0xB5, 0x18, 0x57, 0xD0, 0x15,
+      0x17, 0x61, 0x53, 0x26, 0xCA, 0x0E, 0x08, 0x65, 0x0B, 0xA6, 0xFA, 0x40,
+      0x83, 0x2C, 0x7B, 0x4C, 0x41, 0xB6, 0x44, 0x71, 0x60, 0x22, 0xB6, 0x52,
+      0xB1, 0x92, 0x7D, 0x55, 0xC9, 0xB3, 0x7F, 0xE2, 0x5F, 0x1A, 0xB6, 0x7A,
+      0x9A, 0x03, 0xC7, 0x00, 0x8C, 0x84, 0xB0, 0x7C, 0x49, 0x26, 0xB6, 0x38,
+      0x1E, 0x40, 0xCF, 0xD4, 0x41, 0x04, 0x12, 0x35, 0x18, 0x74, 0x16, 0xCE,
+      0xC3, 0x66, 0xCA, 0x6F, 0xB7, 0x6F, 0xA0, 0xAB, 0x6E, 0x32, 0x8A, 0x26,
+      0x41, 0xFC, 0x47, 0xDC, 0xD7, 0x6E, 0x91, 0xCA, 0x94, 0x31, 0xE1, 0x9B,
+      0xFF, 0x02, 0xCE, 0x62, 0x28, 0xC2, 0x33, 0x63, 0x82, 0xF8, 0xA1, 0x0E,
+      0x9E, 0xE2, 0xC8, 0xF1, 0x75, 0x93, 0x90, 0xA2, 0x00, 0x24, 0xA1, 0x5B,
+      0x3B, 0x09, 0x0C, 0x13, 0x90, 0xCA, 0x03, 0x43, 0x79, 0x72, 0x84, 0x24,
+      0x6B, 0xD8, 0x94, 0x35, 0x07, 0xB7, 0xA6, 0xB7, 0x1F, 0xC3, 0x3A, 0x03,
+      0xB7, 0xA8, 0x83, 0x66, 0xE4, 0xAF, 0xED, 0x51, 0x57, 0x39, 0xE5, 0xC6,
+      0x9F, 0x8A, 0x26, 0x6E, 0x4A, 0x1F, 0x53, 0xD7, 0x39, 0x30, 0xE9, 0x87,
+      0x55, 0x69, 0x31, 0x2B, 0x27, 0x03, 0x7E, 0x5C, 0x7F, 0x85, 0x21, 0x00,
+      0xC2, 0xBA, 0x36, 0x48, 0xB1, 0xB9, 0xC1, 0xB1, 0x49, 0xF6, 0x25, 0x0E,
+      0x0A, 0x6B, 0x06, 0x52, 0x13, 0x13, 0x4F, 0x30, 0x25, 0x69, 0x75, 0x5B,
+      0x8C, 0x5C, 0x4F, 0xFC, 0x68, 0x0B, 0xF7, 0x81, 0x18, 0x45, 0x34, 0x00,
+      0x35, 0xF1, 0x70, 0xB0, 0x68, 0xBA, 0x67, 0xA4, 0xC3, 0xB0, 0x16, 0x6D,
+      0x03, 0xCC, 0x82, 0x61, 0x84, 0x01, 0x90, 0xA2, 0x0F, 0x9A, 0x3B, 0x1E,
+      0xF4, 0x65, 0xC2, 0xF2, 0x18, 0x2D, 0xA8, 0xDA, 0x8D, 0x3B, 0x3C, 0x8C,
+      0xB1, 0x29, 0x15, 0xF7, 0xD9, 0x3E, 0x04, 0xD8, 0x84, 0x0C, 0x35, 0x67,
+      0x25, 0x5A, 0x7B, 0xD6, 0xD4, 0x33, 0xCF, 0x10, 0x68, 0xD8, 0x84, 0x52,
+      0xCF, 0xC1, 0x1F, 0x99, 0x1B, 0x7C, 0xE3, 0x79, 0x27, 0xD6, 0xCA, 0xAE,
+      0x88, 0x10, 0x74, 0x2F, 0x42, 0x14, 0x8B, 0x89, 0x6E, 0xC4, 0xEB, 0xB5,
+      0x34, 0x03, 0x86, 0x31, 0x5B, 0x2C, 0x1E, 0x2B, 0x43, 0x91, 0x5C, 0x04,
+      0x54, 0x9C, 0xC8, 0xC1, 0x9A, 0xB4, 0x0E, 0x3B, 0x7C, 0x31, 0x1B, 0x42,
+      0x61, 0x10, 0xA9, 0xBB, 0xB1, 0x8D, 0x3B, 0x99, 0x2A, 0x42, 0xC0, 0x18,
+      0x92, 0x90, 0xBE, 0x67, 0x3A, 0x39, 0x7C, 0x40, 0x90, 0x44, 0x3B, 0x88,
+      0xC5, 0xD5, 0xC5, 0x65, 0xA1, 0x0F, 0xEA, 0x05, 0x60, 0x3D, 0x36, 0x24,
+      0x4A, 0x4A, 0xA8, 0xE9, 0x25, 0x5C, 0xF1, 0x84, 0xAE, 0x69, 0x53, 0x5A,
+      0x83, 0x99, 0xC1, 0xC6, 0xF7, 0x6C, 0xF2, 0x34, 0x2A, 0xDF, 0xEA, 0x6A,
+      0x44, 0x7B, 0xB4, 0x50, 0x1B, 0x9A, 0x6C, 0x44, 0x59, 0x3E, 0xB0, 0x43,
+      0xE7, 0xA5, 0x50, 0x2F, 0x58, 0x6C, 0xF3, 0x40, 0x7D, 0xEB, 0x7A, 0x0F,
+      0xC3, 0x2B, 0x3F, 0x46, 0xF1, 0x24, 0x5C, 0x55, 0x96, 0xE0, 0xF1, 0xBE,
+      0xD9, 0x37, 0x20, 0x7C, 0x45, 0x09, 0xE1, 0xD8, 0x98, 0x5B, 0xE7, 0x45,
+      0xFD, 0x69, 0xBF, 0x44, 0x80, 0x92, 0x43, 0x30, 0x28, 0xBE, 0x25, 0x95,
+      0x90, 0x33, 0x11, 0x47, 0x95, 0x86, 0xA3, 0x4B, 0x2D, 0x49, 0x10, 0x74,
+      0x10, 0xBC, 0x4B, 0xD2, 0x96, 0x53, 0x17, 0xFC, 0x76, 0x35, 0x2B, 0x63,
+      0x8D, 0xF3, 0xB3, 0xA3, 0x15, 0x32, 0x50, 0x26, 0x80, 0x9E, 0x3B, 0xC4,
+      0x60, 0x8C, 0x0B, 0x2C, 0xB8, 0x4D, 0xF0, 0xC9, 0x5B, 0xC0, 0x52, 0x70,
+      0x7F, 0xC1, 0xA3, 0x77, 0xB2, 0xB4, 0x65, 0xEB, 0x7A, 0x5D, 0x64, 0x4A,
+      0xB4, 0x27, 0x8D, 0xDC, 0xE5, 0xB6, 0x1E, 0x2B, 0xB3, 0xA7, 0x10, 0x52,
+      0x55, 0x5C, 0xB3, 0xBA, 0xC6, 0x93, 0xEF, 0x02, 0x5F, 0xF0, 0x03, 0x53,
+      0xFB, 0x76, 0x94, 0x5B, 0x8A, 0xA3, 0xE9, 0x95, 0x0F, 0x92, 0x73, 0x81,
+      0x87, 0x91, 0xCC, 0xAD, 0x56, 0x88, 0x46, 0x58, 0x14, 0x2A, 0x2B, 0x4D,
+      0xF3, 0xC5, 0x7E, 0xCA, 0x13, 0xAD, 0x44, 0xB4, 0x9B, 0x63, 0x46, 0xC6,
+      0x3E, 0xE8, 0x90, 0x78, 0x58, 0x9E, 0x9E, 0xB9, 0xA9, 0x80, 0x4A, 0x03,
+      0xBF, 0x7A, 0x27, 0x6F, 0x86, 0xB9, 0x67, 0x6C, 0x58, 0xD3, 0xE7, 0x1D,
+      0x2C, 0x87, 0x70, 0x80, 0x4A, 0x61, 0x59, 0x21, 0x78, 0xB4, 0x49, 0xC7,
+      0x95, 0x5B, 0xBE, 0x8C, 0xF4, 0x2F, 0x31, 0x67, 0x25, 0xE3, 0xB1, 0x6D,
+      0x55, 0xB5, 0x27, 0xCF, 0xB2, 0x32, 0x68, 0x1B, 0x21, 0xB2, 0xCB, 0x2F,
+      0x30, 0xAC, 0x76, 0x01, 0x5B, 0xB5, 0x41, 0x6A, 0x04, 0x11, 0xC1, 0x74,
+      0x58, 0x92, 0x41, 0x2E, 0x68, 0x3A, 0x98, 0xD7, 0x36, 0xED, 0x1A, 0x4C,
+      0xD9, 0x80, 0x61, 0x7D, 0x08, 0x21, 0xC2, 0xAB, 0x02, 0x82, 0x07, 0x0A,
+      0x61, 0x1A, 0x11, 0xD1, 0x97, 0x01, 0xFB, 0xD5, 0x5A, 0x21, 0x27, 0xB3,
+      0x24, 0xE6, 0x90, 0x1D, 0x84, 0x98, 0x6C, 0x04, 0x64, 0xDE, 0x71, 0x20,
+      0xAF, 0x45, 0x10, 0xAF, 0x59, 0x1D, 0xD9, 0xBB, 0x79, 0x47, 0x9C, 0x5F,
+      0xA8, 0x87, 0x14, 0xC6, 0xA9, 0x97, 0x14, 0xF7, 0x6A, 0x1E, 0x40, 0x2C,
+      0x8F, 0x38, 0x4A, 0x4E, 0xE6, 0xBC, 0xD4, 0x15, 0x00, 0x72, 0x4C, 0xC1,
+      0x79, 0x3A, 0xBF, 0xD8, 0xD3, 0xC2, 0xF3, 0x20, 0x39, 0x71, 0x34, 0xB0,
+      0x0F, 0x76, 0x2D, 0xBA, 0x85, 0xA2, 0x3A, 0xF1, 0x55, 0xE6, 0xCC, 0x03,
+      0x73, 0x80, 0xC1, 0xDD, 0x64, 0xA9, 0x73, 0xDB, 0x35, 0xB7, 0x44, 0x70,
+      0x44, 0x8B, 0x24, 0x21, 0x20, 0x62, 0x76, 0x47, 0x87, 0xE5, 0xA9, 0x3A,
+      0x48, 0x80, 0x71, 0x71, 0xA7, 0x71, 0x5C, 0xFC, 0x89, 0xBC, 0xBC, 0x9E,
+      0x14, 0x18, 0x86, 0xF8, 0x07, 0xA1, 0xF9, 0xD6, 0x84, 0xC8, 0x42, 0x6F,
+      0x01, 0x22, 0x88, 0x7D, 0x9C, 0x4C, 0x27, 0xEA, 0x69, 0xCC, 0x15, 0x1B,
+      0x4D, 0x49, 0xB5, 0x1E, 0x5A, 0x4E, 0xAA, 0xA5, 0xAD, 0x06, 0xAB, 0xA8,
+      0x6D, 0xF9, 0x42, 0xE9, 0x86, 0xA5, 0xD5, 0x79, 0x20, 0x80, 0xFC, 0x48,
+      0x03, 0x96, 0xB3, 0x94, 0x86, 0x68, 0xFB, 0x38, 0x2C, 0xC8, 0xFC, 0x15,
+      0x47, 0x48, 0xCB, 0x30, 0xB7, 0x64, 0x1F, 0x02, 0x70, 0xC8, 0x34, 0x38,
+      0xB4, 0xFC, 0x3D, 0x19, 0x01, 0x26, 0x58, 0x80, 0x40, 0x51, 0x77, 0xBC,
+      0x7F, 0x44, 0x78, 0x82, 0x51, 0xAB, 0xC4, 0x74, 0x27, 0x35, 0x31, 0x21,
+      0x2A, 0x66, 0x27, 0x9E, 0x70, 0x33, 0x7A, 0x23, 0x09, 0xFD, 0xF4, 0x9E,
+      0x05, 0x9B, 0xBD, 0xAF, 0x49, 0x73, 0xA5, 0x37, 0x7A, 0x4D, 0x51, 0x7B,
+      0xA7, 0x55, 0x70, 0x2C, 0x37, 0xCC, 0x35, 0x56, 0x85, 0x40, 0x4C, 0x95,
+      0x2F, 0xB6, 0x7E, 0x04, 0x19, 0xC7, 0x8D, 0x15, 0x84, 0xD0, 0x94, 0x92,
+      0x54, 0xD0, 0x49, 0x52, 0xF7, 0x24, 0x3B, 0xF1, 0x40, 0x28, 0x03, 0xC9,
+      0xFC, 0x73, 0x73, 0x25, 0x88, 0x13, 0x78, 0xCA, 0x77, 0xEE, 0xF5, 0xC4,
+      0x15, 0xFB, 0x03, 0x7D, 0x68, 0x9A, 0x58, 0x54, 0xA1, 0xD2, 0x4B, 0x65,
+      0x27, 0xA5, 0x9B, 0x9B, 0x16, 0x95, 0x93, 0x84, 0x35, 0x8C, 0x42, 0x3C,
+      0x79, 0x64, 0x5C, 0xCF, 0x31, 0x33, 0xE2, 0x1B, 0x4B, 0x64, 0x95, 0x7B,
+      0x14, 0xF6, 0x3F, 0x2A, 0xA2, 0x63, 0x57, 0xB1, 0xC2, 0x62, 0xF2, 0xA9,
+      0x0F, 0x7C, 0xCC, 0x2A, 0x15, 0x93, 0x69, 0x99, 0xB0, 0xA1, 0xB4, 0x98,
+      0xAB, 0x3B, 0x32, 0x43, 0x30, 0x32, 0xC9, 0xCA, 0x23, 0x08, 0x1C, 0x55,
+      0xD3, 0x1C, 0xAD, 0x36, 0xE9, 0x0C, 0x1C, 0xE0, 0xB5, 0xFC, 0x24, 0x7C,
+      0xE8, 0xC8, 0x43, 0xF2, 0x88, 0x35, 0x24, 0xB6, 0x64, 0xFA, 0xC1, 0xB2,
+      0x0B, 0xE6, 0x02, 0xA1, 0x0A, 0xAF, 0x65, 0x73, 0x86, 0x80, 0xBB, 0x10,
+      0x25, 0x44, 0x26, 0xF9, 0xCB, 0x09, 0xA1, 0x95, 0x4D, 0xB7, 0x65, 0x56,
+      0x22, 0x30, 0x8F, 0xAE, 0xF5, 0x05, 0xAC, 0xB4, 0x97, 0x55, 0x4A, 0x8F,
+      0xCF, 0xA9, 0x6A, 0x85, 0x25, 0x5A, 0xD8, 0x46, 0x54, 0x20, 0x13, 0xB8,
+      0x41, 0x59, 0x51, 0xBD, 0xD4, 0x5C, 0x01, 0x93, 0x1E, 0xBE, 0x58, 0x3E,
+      0x70, 0xE1, 0x3F, 0x30, 0x15, 0x17, 0xB5, 0xA4, 0x0D, 0x70, 0x36, 0x1F,
+      0x63, 0x09, 0x41, 0x60, 0x67, 0x64, 0x6D, 0x2B, 0x71, 0x36, 0x62, 0x6B,
+      0xCC, 0xCC, 0x17, 0x0C, 0x66, 0xCE, 0xD4, 0x90, 0xC7, 0x35, 0x34, 0x4B,
+      0x62, 0x77, 0x09, 0x7C, 0xA9, 0x14, 0x21, 0x2A, 0x29, 0x2D, 0xD1, 0x22,
+      0xFB, 0xB6, 0x9F, 0xDE, 0xCA, 0x47, 0xFA, 0xB4, 0x53, 0x2B, 0x8C, 0x80,
+      0xCE, 0xB7, 0x7F, 0x9C, 0x54, 0x3E, 0x0B, 0xF1, 0x53, 0x6D, 0x1C, 0x0C,
+      0xAE, 0x07, 0x7E, 0x2C, 0xA7, 0x86, 0x2B, 0x45, 0xA4, 0x10, 0x46, 0x9C,
+      0xC5, 0xB7, 0x06, 0xBA, 0xE0, 0x05, 0x1C, 0xB2, 0x96, 0x1D, 0xB7, 0x27,
+      0x0B, 0x75, 0xB7, 0x11, 0x69, 0x8D, 0x2B, 0x80, 0x70, 0x40, 0xD5, 0x62,
+      0x81, 0x29, 0x43, 0x6F, 0xBB, 0x58, 0xF1, 0x20, 0x3F, 0x75, 0x56, 0x14,
+      0x65, 0xF5, 0x42, 0x57, 0xE4, 0x4D, 0x33, 0xF5, 0x12, 0xD6, 0x33, 0x43,
+      0x1D, 0x00, 0xA2, 0xFB, 0x02, 0x30, 0xC9, 0xBB, 0x9C, 0xDD, 0xFC, 0x83,
+      0xBD, 0x65, 0xC9, 0x74, 0x45, 0x30, 0x21, 0x86, 0xA1, 0x72, 0x23, 0xAD,
+      0x21, 0x33, 0x28, 0x03, 0xB9, 0x09, 0xE5, 0xE5, 0x67, 0x19, 0x70, 0xBB,
+      0xB0, 0xF1, 0xC4, 0x83, 0x7B, 0xB8, 0x42, 0x73, 0xBA, 0x67, 0x5A, 0xC0,
+      0x74, 0xC5, 0x29, 0x0B, 0x41, 0x1C, 0x25, 0x00, 0x65, 0x70, 0x59, 0x33,
+      0x9D, 0xE3, 0x92, 0xF9, 0xCA, 0x30, 0x89, 0x52, 0xA2, 0x20, 0x1A, 0x58,
+      0x87, 0x67, 0xAD, 0xC0, 0x35, 0xBD, 0xF3, 0x30, 0x24, 0xEA, 0x3B, 0x9A,
+      0x83, 0xC5, 0xA0, 0xB9, 0xC5, 0x42, 0x5D, 0x14, 0x07, 0x0C, 0x81, 0xAA,
+      0xDA, 0x26, 0xBA, 0xC3, 0xFB, 0xB8, 0xD4, 0xB7, 0xCF, 0xEE, 0x03, 0x92,
+      0x37, 0x5C, 0x68, 0x42, 0x73, 0x51, 0xDF, 0xEC, 0x63, 0x60, 0x9B, 0xBB,
+      0x50, 0xB4, 0x63, 0xE0, 0x40, 0x92, 0x85, 0x70, 0x09, 0xD1, 0xE5, 0xB8,
+      0x1D, 0x70, 0x7D, 0x14, 0xB8, 0x33, 0xCD, 0x4A, 0x0B, 0x55, 0x1B, 0xAA,
+      0x13, 0xEC, 0x48, 0x8A, 0x15, 0x03, 0xB0, 0x46, 0x7E, 0xE4, 0x02, 0x3C,
+      0x3F, 0xE0, 0x32, 0xC7, 0x82, 0x25, 0x06, 0x38, 0x86, 0xE2, 0x46, 0x8E,
+      0x00, 0xF7, 0x00, 0x07, 0x2A, 0x2E, 0xC8, 0xDA, 0x6A, 0xFB, 0x20, 0x6C,
+      0x91, 0x90, 0x44, 0x33, 0xBB, 0xCC, 0xB0, 0xE7, 0x6F, 0x42, 0x46, 0x8C,
+      0x40, 0xEB, 0x5F, 0x59, 0xCB, 0x9A, 0xE1, 0xB0, 0x35, 0xE5, 0x21, 0x51,
+      0x0B, 0xF2, 0x16, 0xA1, 0xAB, 0xCB, 0x19, 0x03, 0x3B, 0x7A, 0x65, 0x88,
+      0x97, 0xC6, 0x58, 0x74, 0xD5, 0x13, 0x51, 0x83, 0x14, 0x9F, 0x97, 0x9E,
+      0x55, 0x3C, 0xCF, 0xBF, 0xA3, 0x90, 0x0C, 0xDA, 0x6F, 0x01, 0x96, 0x0B,
+      0x75, 0x15, 0x7F, 0x54, 0x53, 0xAA, 0x6E, 0x73, 0xB3, 0xED, 0x90, 0x2F,
+      0x7D, 0x7C, 0x93, 0x05, 0x97, 0x1B, 0xDF, 0x72, 0x2E, 0x29, 0x37, 0x16,
+      0x9A, 0x1B, 0xC0, 0xFA, 0xEB, 0x6C, 0x92, 0xF7, 0x15, 0x0D, 0x23, 0x30,
+      0x87, 0x7C, 0x5D, 0xC5, 0x24, 0x9A, 0xAE, 0x20, 0x30, 0x26, 0x34, 0xC5,
+      0xC5, 0xB2, 0x30, 0x53, 0x52, 0x10, 0x28, 0x12, 0x25, 0x42, 0xF4, 0x85,
+      0xA0, 0xEA, 0xC8, 0x69, 0x22, 0x37, 0x20, 0x63, 0x36, 0x51, 0xF5, 0xB2,
+      0x47, 0xC6, 0x62, 0xB3, 0x1A, 0x10, 0x53, 0x8C, 0xA7, 0x49, 0x1B, 0x14,
+      0x37, 0xAA, 0x74, 0xF4, 0x28, 0x2D, 0x12, 0x97, 0x4D, 0x9C, 0x93, 0x4D,
+      0xF2, 0x14, 0x78, 0x5B, 0x64, 0x18, 0x46, 0x8B, 0x92, 0xE5, 0x25, 0x28,
+      0xC8, 0x44, 0x7A, 0x1C, 0xA4, 0x22, 0xFA, 0x6C, 0xC8, 0x8E, 0x28, 0xB0,
+      0x59, 0xF0, 0x4B, 0x23, 0x59, 0x73, 0x23, 0xF7, 0x2F, 0x3E, 0x23, 0x36,
+      0xF8, 0x7C, 0x47, 0x90, 0x5C, 0xBA, 0x65, 0x5B, 0xB7, 0x3F, 0xC3, 0x2E,
+      0x18, 0xD4, 0xB7, 0x87, 0x05, 0xC7, 0x82, 0xEB, 0xCB, 0x43, 0xE2, 0x78,
+      0x5C, 0x82, 0xC5, 0xAF, 0x24, 0xB0, 0xE1, 0x69, 0x9C, 0xFB, 0xC0, 0x25,
+      0x74, 0x75, 0x79, 0x9A, 0x53, 0x9B, 0x11, 0xA5, 0x0F, 0x4D, 0xF2, 0xB7,
+      0xFA, 0xA2, 0x0B, 0xD8, 0x82, 0x75, 0x15, 0xCA, 0x37, 0x0F, 0x89, 0xC0,
+      0xD4, 0xC6, 0x09, 0x02, 0xF6, 0x56, 0x7C, 0xD6, 0x0B, 0x08, 0x60, 0xA5,
+      0x5B, 0xC8, 0x57, 0x2C, 0x43, 0x6C, 0x24, 0x6A, 0xC2, 0x76, 0x64, 0x4E,
+      0x7D, 0x60, 0x2A, 0xA5, 0x7C, 0x01, 0x66, 0x20, 0x18, 0x14, 0x99, 0x1C,
+      0x1B, 0xD7, 0x5C, 0x7C, 0x47, 0xC3, 0x48, 0xB6, 0x7D, 0x77, 0x61, 0x33,
+      0x86, 0x90, 0x81, 0x44, 0xEA, 0x83, 0xFF, 0x72, 0x1F, 0x9A, 0x50, 0x07,
+      0x6C, 0x51, 0x01, 0x64, 0xD1, 0x8E, 0x05, 0xD0, 0x5D, 0x98, 0x84, 0xC4,
+      0x41, 0x46, 0xA0, 0x7C, 0xCA, 0xCF, 0x89, 0x04, 0x98, 0xED, 0x1A, 0x19,
+      0xB2, 0xA1, 0x54, 0x31, 0x72, 0x9D, 0xC1, 0xF1, 0x2B, 0x7E, 0xA1, 0x0F,
+      0x9F, 0x92, 0x80, 0x62, 0xD1, 0x45, 0x4B, 0x4B, 0x9F, 0x68, 0xE5, 0x99,
+      0x90, 0x29, 0x0B, 0xE3, 0x72, 0x8B, 0x32, 0x89, 0x56, 0x93, 0x63, 0xAB,
+      0x10, 0x05, 0x13, 0x1B, 0x23, 0x81, 0xA0, 0x8C, 0xC2, 0xBF, 0x94, 0x3E,
+      0x95, 0xD5, 0xB2, 0x1B, 0xC6, 0xAA, 0xBC, 0x22, 0x73, 0x34, 0x8B, 0xC7,
+      0x2B, 0xD0, 0x93, 0xB7, 0xB5, 0x61, 0x7A, 0xE8, 0x7F, 0x60, 0x2B, 0xB9,
+      0x89, 0xE6, 0xAF, 0xC4, 0x4B, 0x81, 0x51, 0x20, 0x76, 0xA3, 0xA8, 0x76,
+      0xE0, 0xE2, 0x5F, 0x97, 0x62, 0xB4, 0x62, 0x08, 0x19, 0x85, 0x50, 0x2F,
+      0x26, 0xB2, 0x87, 0xA2, 0x93, 0x6D, 0x5B, 0x1A, 0xCF, 0xFC, 0xEC, 0x4E,
+      0xEE, 0x77, 0xA9, 0xCB, 0xA9, 0x80, 0xEB, 0x9B, 0x5F, 0xDE, 0x75, 0x53,
+      0x9F, 0x65, 0x09, 0x04, 0x67, 0x7D, 0xBE, 0x29, 0xAB, 0x8B, 0xB9, 0x18,
+      0xA3, 0x49, 0x48, 0x03, 0xEC, 0xA5, 0x9A, 0x2C, 0x32, 0xE5, 0xB5, 0xC8,
+      0x3B, 0x0B, 0x80, 0xB1, 0x10, 0x2C, 0xD7, 0xD9, 0x48, 0x2B, 0x45, 0x9B,
+      0x6B, 0x74, 0x49, 0x1E, 0xC3, 0x0C, 0x4B, 0xE7, 0x7C, 0x2B, 0x52, 0x4A,
+      0xF7, 0xB3, 0xAD, 0x1F, 0x71, 0x34, 0x1D, 0xF0, 0xA7, 0x6F, 0x25, 0x5C,
+      0x29, 0x03, 0xC8, 0x82, 0x08, 0x07, 0x93, 0x79, 0x93, 0x0A, 0x95, 0x13,
+      0xF3, 0x90, 0x12, 0x6E, 0x73, 0x2A, 0x2B, 0xB0, 0x94, 0xBF, 0xA6, 0xBF,
+      0x0A, 0x43, 0x2B, 0xCD, 0x65, 0x7D, 0xAF, 0xCB, 0x25, 0xC8, 0xBB, 0x15,
+      0xE0, 0x95, 0x5D, 0x09, 0x9B, 0x74, 0xFF, 0x1A, 0x4D, 0xE6, 0x55, 0x9C,
+      0xD6, 0x79, 0x7C, 0x38, 0xC4, 0x8C, 0x11, 0x34, 0xCA, 0x2C, 0x97, 0x92,
+      0x43, 0xF3, 0x15, 0x2A, 0xF4, 0xBB, 0xE4, 0xD7, 0xA6, 0xBC, 0x09, 0x87,
+      0x21, 0x33, 0x92, 0x0C, 0xD2, 0x3B, 0x3E, 0xF9, 0x84, 0x8C, 0xCC, 0x68,
+      0x45, 0xD6, 0x47, 0xB5, 0x38, 0x75, 0x57, 0x73, 0x65, 0x13, 0xD5, 0x85,
+      0x60, 0x84, 0x51, 0x92, 0xF9, 0x26, 0x51, 0x59, 0x93, 0x2E, 0x57, 0x2A,
+      0x88, 0xC4, 0x4E, 0x65, 0x66, 0x76, 0x0C, 0x06, 0x1C, 0x67, 0xFC, 0xB5,
+      0xBF, 0x21, 0x00, 0x95, 0xE2, 0x14, 0xDA, 0x74, 0x53, 0x57, 0xE3, 0x69,
+      0x96, 0xD8, 0xC0, 0x66, 0x31, 0x1B, 0xBC, 0x76, 0x1A, 0x1F, 0xD2, 0x52,
+      0x73, 0xD2, 0x1E, 0xAB, 0x50, 0x01, 0x05, 0x63, 0xCD, 0x64, 0x68, 0xA4,
+      0xEA, 0x83, 0x6B, 0x6D, 0x64, 0xBD, 0x2B, 0xD7, 0x6D, 0xBE, 0x35, 0x82,
+      0xD5, 0x73, 0x6A, 0x60, 0x5A, 0x55, 0x09, 0xFC, 0x28, 0x78, 0x9B, 0x56,
+      0xB8, 0x84, 0xAE, 0x9A, 0x60, 0x41, 0x5F, 0x55, 0x67, 0x4B, 0xE6, 0x01,
+      0x57, 0x6C, 0x7C, 0xEE, 0x58, 0x14, 0x3B, 0xF0, 0x54, 0x80, 0x6A, 0xBC,
+      0xB3, 0x45, 0xA2, 0x56, 0xCB, 0xC4, 0x54, 0xE3, 0x43, 0xF3, 0xCC, 0x7A,
+      0xDE, 0x65, 0x56, 0x2F, 0xD2, 0x9E, 0xB2, 0x59, 0x73, 0x7B, 0xB3, 0xCF,
+      0x96, 0x49, 0xBD, 0xEA, 0x28, 0x3F, 0xB0, 0x72, 0x65, 0x67, 0x7C, 0x98,
+      0x08, 0xD1, 0x31, 0x19, 0xC0, 0xA2, 0xAD, 0xF7, 0x45, 0xDE, 0x69, 0x75,
+      0xF4, 0x56, 0x2C, 0xD6, 0x15, 0x57, 0xB3, 0x96, 0x5D, 0x2B, 0x07, 0x2F,
+      0x00, 0x0A, 0xA7, 0xE0, 0xA3, 0x57, 0xE1, 0x25, 0x3E, 0xAF, 0xEA, 0x7F,
+      0xDF, 0xCC, 0x92, 0xFA, 0x87, 0x63, 0x0D, 0xD2, 0x27, 0x6C, 0xE4, 0x2E,
+      0x82, 0x0B, 0x69, 0xD1, 0xFC, 0x2E, 0x47, 0xD5, 0xC4, 0x98, 0xA5, 0x5B,
+      0x3B, 0x29, 0xC3, 0x4E, 0x64, 0x90, 0x3D, 0x04, 0x7A, 0xB1, 0xC0, 0x40,
+      0x24, 0x95, 0x8F, 0x70, 0x11, 0x95, 0xF5, 0xD1, 0x3E, 0xC6, 0x70, 0x6B,
+      0x84, 0x48, 0x50, 0x3A, 0x54, 0x99, 0x22, 0xA5, 0x8A, 0x24, 0xB6, 0x7C,
+      0x93, 0x63, 0x27, 0x56, 0xB7, 0x7D, 0x22, 0x54, 0x07, 0x31, 0x61, 0x71,
+      0xDE, 0xEC, 0x56, 0x71, 0x44, 0x35, 0xCF, 0x94, 0xCC, 0xF4, 0x59, 0x9E,
+      0x00, 0xD1, 0x0E, 0x56, 0x96, 0x22, 0xBA, 0xDA, 0x82, 0x0C, 0x45, 0x2F,
+      0x25, 0x42, 0xAD, 0xF0, 0x87, 0x65, 0xCA, 0x93, 0xAE, 0x38, 0xEB, 0x02,
+      0x5D, 0xE3, 0x1C, 0xFF, 0x79, 0x74, 0x54, 0x9A, 0x78, 0x25, 0xA8, 0x31,
+      0xDD, 0x05, 0x4E, 0x87, 0xB8, 0x4C, 0x5F, 0x25, 0x47, 0xFF, 0x47, 0xB4,
+      0x6F, 0x88, 0xC9, 0x9F, 0x15, 0x48, 0xE9, 0x33, 0xA6, 0xF4, 0xD8, 0x7F,
+      0x1A, 0x4A, 0x1B, 0x00, 0xE3, 0x9E, 0x02, 0xD6, 0x0E, 0x51, 0xEB, 0x60,
+      0x3C, 0x1C, 0x0D, 0x80, 0x7A, 0xCD, 0xAB, 0x08, 0xBA, 0xA2, 0xB9, 0x98,
+      0x69, 0xB7, 0x5C, 0xA2, 0xC4, 0xB9, 0x63, 0x68, 0xB5, 0x17, 0x80, 0xBD,
+      0x1E, 0xC7, 0x5B, 0x11, 0x0B, 0x9F, 0xA6, 0x65, 0x56, 0x87, 0x6C, 0x5F,
+      0x48, 0x79, 0x7D, 0x09, 0x01, 0x38, 0xF7, 0x54, 0xAE, 0x30, 0x53, 0x3D,
+      0x36, 0xAA, 0x44, 0xB9, 0xB1, 0x70, 0x2A, 0x6A, 0x8A, 0x56, 0x62, 0x6B,
+      0xF0, 0x45, 0x1A, 0x37, 0xA7, 0xAC, 0x1A, 0x33, 0x70, 0x76, 0xE5, 0x1E,
+      0x0A, 0x6B, 0x03, 0x00, 0xC2, 0xC7, 0x90, 0xA4, 0x43, 0x7E, 0xA2, 0x8D,
+      0x7E, 0xC9, 0x8C, 0x41, 0x9B, 0x37, 0xD6, 0xAA, 0x97, 0x04, 0x17, 0x43,
+      0x5F, 0x91, 0xBE, 0xDC, 0x2B, 0x1F, 0x4B, 0xC8, 0x15, 0x8A, 0x51, 0xB1,
+      0xF4, 0x71, 0x51, 0x6F, 0xE8, 0x24, 0x28, 0x7C, 0x89, 0x6B, 0x89, 0x1B,
+      0x49, 0xF2, 0x54, 0xDD, 0x36, 0x35, 0x9B, 0x89, 0xC8, 0x24, 0xEB, 0x3F,
+      0x62, 0x48, 0x02, 0x7F, 0xBB, 0xAD, 0x4C, 0xF2, 0x91, 0x18, 0xCB, 0x50,
+      0xEB, 0xB6, 0x25, 0xA3, 0x7C, 0x53, 0x7A, 0x02, 0x23, 0xF0, 0xEB, 0x70,
+      0x85, 0xB5, 0xC7, 0xEC, 0x60, 0x75, 0x70, 0xDB, 0x91, 0x85, 0xD5, 0x99,
+      0x02, 0xBC, 0x26, 0xC6, 0x54, 0xA2, 0x80, 0x4C, 0x0D, 0x94, 0x67, 0x93,
+      0xD8, 0xA2, 0x14, 0x82, 0xAC, 0x4F, 0x05, 0xE9, 0x01, 0x62, 0x60, 0x33,
+      0x1D, 0xCC, 0x58, 0xBC, 0x66, 0xAF, 0x3C, 0xA7, 0x58, 0x54, 0x40, 0x21,
+      0x6A, 0xA0, 0x26, 0x3B, 0x2A, 0x72, 0x5E, 0x08, 0x0F, 0x6F, 0x9C, 0x5B,
+      0x6A, 0x9C, 0x9D, 0xA2, 0x93, 0x55, 0x18, 0x9B, 0x4B, 0x95, 0xB1, 0x37,
+      0xD1, 0x22, 0x5F, 0x25, 0x2A, 0xC7, 0x97, 0xB0, 0x64, 0x6C, 0xAC, 0x52,
+      0x16, 0x4B, 0x59, 0x72, 0xA9, 0x92, 0x65, 0xD3, 0x47, 0xFC, 0x7C, 0x35,
+      0x91, 0xD1, 0x5F, 0xFE, 0x68, 0x1C, 0x06, 0xD4, 0x38, 0xCC, 0xEB, 0x60,
+      0xBB, 0x63, 0x10, 0xB7, 0x95, 0x32, 0x89, 0x72, 0x0E, 0x2C, 0x72, 0x87,
+      0x30, 0x05, 0x23, 0x37, 0xAC, 0xA7, 0xC8, 0x52, 0x1A, 0xB4, 0x4F, 0x1E,
+      0x2A, 0x04, 0x9B, 0x83, 0xE0, 0x77, 0x4C, 0x96, 0xCD, 0x8C, 0x87, 0x6F,
+      0xA6, 0x75, 0xD0, 0x92, 0x39, 0x77, 0x27, 0x1B, 0xE6, 0xE8, 0x32, 0xF2,
+      0x49, 0x8C, 0xA5, 0xA3, 0x43, 0x1F, 0x40, 0xD3, 0x18, 0x7B, 0x1E, 0xD9,
+      0x65, 0xFD, 0xD6, 0x69, 0x3B, 0x37, 0xF6, 0xEB, 0x40, 0x8A, 0x99, 0x97,
+      0x7A, 0xE4, 0x96, 0x44, 0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED,
+      0x63, 0x88, 0x63, 0x8E, 0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F,
+      0xFD, 0xF2, 0xB6, 0x7C, 0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // generate pke1024 ek and dk from seed
+    uint8_t got_ek[PKE1024_EK_SIZE] = { 0 },
+            got_dk[FIPS203IPD_KEM1024_DK_SIZE] = { 0 };
+    fips203ipd_kem1024_keygen(got_ek, got_dk, TESTS[i].seed);
+
+    // check for expected ek
+    if (memcmp(&got_ek, &(TESTS[i].exp_ek), sizeof(got_ek))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ek", TESTS[i].name);
+      fail_test(__func__, name, got_ek, sizeof(got_ek), TESTS[i].exp_ek, sizeof(got_ek));
+    }
+
+    // check for expected dk
+    if (memcmp(&got_dk, &(TESTS[i].exp_dk), sizeof(got_dk))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - dk", TESTS[i].name);
+      fail_test(__func__, name, got_dk, sizeof(got_dk), TESTS[i].exp_dk, sizeof(got_dk));
+    }
+  }
+}
+
+static void test_fips203ipd_kem1024_encaps(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t ek[FIPS203IPD_KEM1024_EK_SIZE]; // test encapsulation key (1568 bytes)
+    const uint8_t seed[32]; // test randomness (32 bytes)
+    const uint8_t exp_k[32]; // expected shared key (32 bytes)
+    const uint8_t exp_ct[FIPS203IPD_KEM1024_CT_SIZE]; // expected ciphertext (1088 bytes)
+  } TESTS[] = {{
+    .name = "seed = 0",
+    .ek = {
+      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
+      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
+      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
+      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
+      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
+      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
+      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
+      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
+      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
+      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
+      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
+      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
+      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
+      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
+      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
+      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
+      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
+      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
+      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
+      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
+      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
+      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
+      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
+      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
+      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
+      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
+      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
+      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
+      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
+      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
+      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
+      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
+      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
+      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
+      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
+      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
+      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
+      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
+      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
+      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
+      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
+      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
+      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
+      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
+      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
+      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
+      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
+      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
+      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
+      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
+      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
+      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
+      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
+      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
+      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
+      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
+      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
+      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
+      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
+      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
+      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
+      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
+      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
+      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
+      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
+      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
+      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
+      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
+      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
+      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
+      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
+      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
+      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
+      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
+      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
+      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
+      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
+      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
+      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
+      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
+      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
+      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
+      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
+      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
+      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
+      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
+      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
+      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
+      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
+      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
+      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
+      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
+      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
+      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
+      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
+      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
+      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
+      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
+      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
+      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
+      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
+      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
+      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
+      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
+      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
+      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
+      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
+      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
+      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
+      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
+      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
+      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
+      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
+      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
+      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
+      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
+      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
+      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
+      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
+      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
+      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
+      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
+      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
+      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
+      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
+      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
+      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
+      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
+    },
+    .seed = { 0 },
+
+    .exp_k = {
+      0x6d, 0x8f, 0x14, 0x80, 0x69, 0x7d, 0x87, 0xd4,
+      0x47, 0xb4, 0xd1, 0xf7, 0xdd, 0x7f, 0x18, 0x9c,
+      0x91, 0x20, 0x9c, 0x4a, 0x94, 0x15, 0x27, 0x37,
+      0xca, 0xf8, 0x15, 0x70, 0x31, 0xaf, 0x12, 0xe3,
+    },
+
+    .exp_ct = {
+      0x93, 0x23, 0x21, 0xf8, 0xd2, 0xbc, 0x0f, 0x37, 0xcf, 0x19, 0x50, 0xaa,
+      0xf1, 0xfe, 0xb5, 0x22, 0x7c, 0x87, 0x27, 0x05, 0x32, 0xcd, 0x2b, 0x3b,
+      0x34, 0x38, 0xc5, 0x8f, 0x5a, 0xd4, 0x96, 0xc4, 0xc5, 0xe0, 0x25, 0xb0,
+      0xa9, 0xc3, 0x0c, 0x33, 0x02, 0x33, 0xa4, 0x8a, 0x8d, 0x82, 0xee, 0x4e,
+      0xdd, 0x0a, 0xe1, 0x6e, 0xaf, 0xbd, 0x11, 0xac, 0xf6, 0xee, 0x8b, 0x9a,
+      0x73, 0x5d, 0x52, 0x38, 0x83, 0x60, 0xdf, 0xe6, 0xd9, 0x93, 0x03, 0x0f,
+      0x3d, 0x5b, 0x2f, 0x52, 0x1b, 0x62, 0x71, 0xf6, 0x27, 0x61, 0x13, 0x8c,
+      0x72, 0x76, 0xf1, 0x24, 0x30, 0x90, 0x20, 0x64, 0x15, 0x56, 0xa3, 0x3a,
+      0xef, 0xfa, 0xc8, 0x16, 0x3c, 0x60, 0x87, 0x64, 0xae, 0x5c, 0x05, 0x68,
+      0x46, 0x50, 0xbf, 0x5b, 0x6c, 0x45, 0x9d, 0xf3, 0x8c, 0x33, 0x87, 0x87,
+      0xef, 0x22, 0xe1, 0xfb, 0x71, 0xec, 0xb6, 0xd5, 0x99, 0x97, 0x26, 0xe4,
+      0x25, 0xbc, 0x3f, 0x97, 0x50, 0xdc, 0x7c, 0x0d, 0x12, 0x1b, 0xa9, 0x57,
+      0x28, 0x29, 0xb7, 0x71, 0x43, 0x4e, 0xa6, 0x32, 0x3b, 0x13, 0x03, 0xd7,
+      0xa1, 0x20, 0xf4, 0xda, 0xa9, 0xa5, 0xbd, 0x27, 0x17, 0x0c, 0xfc, 0xf0,
+      0xea, 0x08, 0xb5, 0x43, 0x8e, 0x3c, 0x89, 0x8b, 0x4a, 0x23, 0x30, 0xd7,
+      0x43, 0xb3, 0x69, 0x21, 0xfc, 0xa4, 0x8a, 0x9b, 0xa0, 0x55, 0xfc, 0xbf,
+      0x72, 0xe5, 0x9d, 0xbb, 0xc1, 0x7b, 0xa8, 0xc3, 0x4c, 0xdc, 0x22, 0x8a,
+      0xa0, 0xa4, 0x66, 0x21, 0x1e, 0x7a, 0xc4, 0xab, 0x01, 0x08, 0xe2, 0xfb,
+      0xbe, 0x71, 0x22, 0x0f, 0xa5, 0xe2, 0x31, 0xd9, 0x56, 0xe4, 0x7d, 0x56,
+      0xce, 0xab, 0x8a, 0x18, 0x95, 0xdd, 0x21, 0x89, 0xff, 0x83, 0xbc, 0x9b,
+      0x94, 0x3c, 0x38, 0x3b, 0xcc, 0xbd, 0x8d, 0xcb, 0x87, 0xbb, 0x24, 0x5b,
+      0x2d, 0xd4, 0xc0, 0x8e, 0xdc, 0x85, 0xbd, 0xc1, 0x7b, 0xe5, 0xb7, 0x48,
+      0x70, 0x3a, 0x49, 0xd4, 0xbb, 0xca, 0xda, 0xa3, 0x21, 0x93, 0x2d, 0xbe,
+      0xdb, 0x08, 0xde, 0x52, 0xb0, 0x11, 0x5f, 0x66, 0x09, 0xe0, 0xa2, 0x36,
+      0xf2, 0x97, 0x79, 0xe5, 0xb3, 0x6f, 0x13, 0xa4, 0x57, 0xf9, 0xdc, 0x21,
+      0xfd, 0xaa, 0x20, 0xa8, 0x63, 0xe8, 0x6d, 0x32, 0x8a, 0x18, 0x0a, 0x01,
+      0xf2, 0x41, 0x0d, 0x5c, 0x22, 0x97, 0xc8, 0xb8, 0xb5, 0xa3, 0x57, 0xa2,
+      0xe0, 0xf2, 0x00, 0x4c, 0x30, 0xcb, 0x35, 0x77, 0x76, 0xfa, 0x9b, 0x03,
+      0x32, 0xa9, 0x45, 0xcb, 0xa8, 0xca, 0x75, 0x61, 0xf9, 0x7c, 0x78, 0xf7,
+      0x72, 0x94, 0xcc, 0x4b, 0xab, 0xbc, 0xc1, 0x95, 0x12, 0xfa, 0x85, 0xdb,
+      0x13, 0x92, 0x3a, 0x2f, 0xb6, 0x28, 0x9d, 0xa3, 0xbb, 0x76, 0x22, 0xe5,
+      0xbb, 0x78, 0xa0, 0x6b, 0x92, 0x56, 0x40, 0x86, 0x1d, 0x0b, 0xd5, 0x75,
+      0xfb, 0x21, 0x10, 0x26, 0xb6, 0xd5, 0xe0, 0x6c, 0xe6, 0x44, 0xc1, 0x4a,
+      0x95, 0xe3, 0x52, 0x6a, 0xd9, 0x80, 0x38, 0x3d, 0xde, 0xad, 0x21, 0x62,
+      0x0c, 0x0a, 0x95, 0x38, 0xa4, 0x73, 0x26, 0xa1, 0x35, 0xe5, 0xca, 0x0f,
+      0x82, 0x87, 0x19, 0xbc, 0xd8, 0x9b, 0xd1, 0xdd, 0xc2, 0xd7, 0xe6, 0xbd,
+      0x90, 0x54, 0x55, 0x42, 0xcc, 0xb3, 0xcf, 0x17, 0x80, 0x48, 0xac, 0x78,
+      0xcf, 0x84, 0xdc, 0x4c, 0x32, 0xc2, 0xf0, 0xab, 0x4a, 0x11, 0x95, 0x2c,
+      0xca, 0x2e, 0x16, 0xff, 0x22, 0xf1, 0xfd, 0x85, 0x4c, 0x47, 0x0d, 0xeb,
+      0x02, 0x2d, 0xd2, 0x92, 0xb8, 0x60, 0xbe, 0x45, 0xac, 0xe6, 0x09, 0xbc,
+      0x82, 0xc2, 0x75, 0x81, 0x58, 0x46, 0xba, 0x66, 0x32, 0xde, 0xa2, 0xec,
+      0x21, 0x4b, 0xf4, 0x66, 0xa6, 0x85, 0xf0, 0xcf, 0x33, 0x3c, 0x43, 0xa3,
+      0x88, 0x71, 0x0c, 0xd8, 0x2a, 0xec, 0x49, 0x31, 0xb5, 0xd2, 0xee, 0x11,
+      0xf3, 0x61, 0x5a, 0x9e, 0x3e, 0x86, 0x2c, 0x0d, 0x0e, 0x35, 0x37, 0xec,
+      0xde, 0x3a, 0x6d, 0x70, 0xa1, 0xc3, 0x9f, 0x39, 0x2b, 0xcb, 0x2f, 0xe0,
+      0x7b, 0x2e, 0x52, 0x81, 0xc5, 0x3d, 0x74, 0xa7, 0xa0, 0x7a, 0xf9, 0x4c,
+      0x6d, 0xcd, 0xfe, 0xf3, 0xba, 0x1c, 0xfb, 0x2f, 0x12, 0x88, 0xec, 0xd3,
+      0xac, 0xc0, 0x37, 0x77, 0x8c, 0x0e, 0x51, 0xda, 0x31, 0xcb, 0x5d, 0x52,
+      0xe3, 0x84, 0x16, 0xb6, 0x7f, 0x1f, 0x5a, 0x7c, 0x88, 0xc8, 0xe4, 0x18,
+      0x9a, 0x14, 0xaa, 0x73, 0x39, 0xef, 0x01, 0xa5, 0xf6, 0x78, 0x00, 0x57,
+      0xca, 0x84, 0xff, 0x27, 0xc1, 0x08, 0x5f, 0x32, 0x38, 0x10, 0xfc, 0xd3,
+      0xa4, 0x0b, 0x0a, 0xb9, 0x85, 0x0a, 0xd0, 0xc9, 0x64, 0xae, 0xbe, 0x47,
+      0x44, 0x6a, 0xff, 0x3c, 0xa3, 0x33, 0x70, 0x74, 0xa7, 0x43, 0xca, 0x23,
+      0xb1, 0x8b, 0x6d, 0xc3, 0xcf, 0xad, 0x42, 0x4f, 0x5f, 0x1a, 0x3f, 0x73,
+      0x54, 0xe3, 0xb6, 0xdf, 0x87, 0xf2, 0x35, 0x91, 0x15, 0x5f, 0xdf, 0x57,
+      0xf8, 0xd3, 0x03, 0x12, 0x5d, 0x7f, 0xf7, 0x19, 0x9d, 0x8d, 0xed, 0xd0,
+      0x04, 0x23, 0x0b, 0x75, 0xd9, 0x1d, 0x28, 0x84, 0xc2, 0x51, 0xdd, 0x3b,
+      0x97, 0xef, 0x46, 0x4b, 0xb6, 0x52, 0x24, 0x1c, 0x20, 0x07, 0x90, 0xc7,
+      0xcc, 0x6b, 0x55, 0x03, 0xbc, 0x39, 0xf7, 0x61, 0x4f, 0x75, 0x21, 0xee,
+      0x45, 0x00, 0x4b, 0xc5, 0xb4, 0xd5, 0xb4, 0x2e, 0x4f, 0xbb, 0x88, 0xc8,
+      0x49, 0x8d, 0xc5, 0x92, 0x59, 0x4e, 0x9a, 0x9a, 0xd8, 0xf1, 0x1b, 0xe5,
+      0x70, 0x7f, 0x6a, 0x29, 0x64, 0xc7, 0xbe, 0x0a, 0x82, 0xef, 0x4e, 0x76,
+      0xfb, 0x63, 0xd7, 0xe1, 0x6f, 0x31, 0x21, 0x7a, 0xcd, 0xf9, 0x7a, 0xbd,
+      0xc4, 0xc1, 0x65, 0xbb, 0x0c, 0xdf, 0x71, 0xc4, 0xb2, 0x32, 0x59, 0x44,
+      0x30, 0x78, 0x81, 0xfb, 0xfd, 0x95, 0xd2, 0x24, 0xaf, 0x7e, 0x62, 0x95,
+      0x2e, 0x84, 0x03, 0x4b, 0xe2, 0x31, 0x65, 0xdf, 0xdf, 0xac, 0x24, 0x9c,
+      0xb9, 0x85, 0xd4, 0x97, 0x46, 0x26, 0xa9, 0x42, 0x51, 0x41, 0x9b, 0x11,
+      0xde, 0x3d, 0x46, 0xea, 0xee, 0x54, 0x57, 0x46, 0x3a, 0x46, 0x41, 0x90,
+      0x93, 0x08, 0x4c, 0x02, 0xab, 0xcb, 0x90, 0x39, 0xf0, 0x45, 0xcb, 0xc6,
+      0xc0, 0x5d, 0xe9, 0xb6, 0xbb, 0x8f, 0xf8, 0x79, 0xb9, 0x15, 0x1f, 0x36,
+      0x04, 0xae, 0x9c, 0xc4, 0x97, 0xa2, 0x15, 0x66, 0x66, 0xec, 0x71, 0x84,
+      0x51, 0xcb, 0x07, 0x81, 0xf3, 0x35, 0x6f, 0x3b, 0x77, 0x5d, 0x22, 0x52,
+      0xd4, 0x7c, 0xb1, 0xcc, 0xcf, 0x0d, 0x52, 0xbc, 0x9a, 0x18, 0x07, 0x9a,
+      0x57, 0x85, 0xda, 0x04, 0xa0, 0xc5, 0x70, 0x38, 0xd7, 0xda, 0x97, 0xcb,
+      0x70, 0x00, 0x08, 0x20, 0x2c, 0x7c, 0x46, 0xed, 0xbb, 0x2c, 0x4f, 0x17,
+      0xe5, 0x22, 0x71, 0xdd, 0x91, 0x16, 0xf8, 0x2b, 0x81, 0xd4, 0xe9, 0x43,
+      0x84, 0xef, 0xd7, 0xd0, 0xbc, 0x83, 0x69, 0xe1, 0xe0, 0x25, 0xa5, 0x97,
+      0x59, 0x2b, 0x1c, 0x19, 0x6c, 0x96, 0x7d, 0x63, 0xfe, 0xaa, 0x6d, 0x0a,
+      0xfc, 0x5d, 0x3b, 0x1e, 0xfd, 0x43, 0xa8, 0x9e, 0x2d, 0x90, 0xd2, 0xa3,
+      0x4b, 0x2e, 0xc0, 0x53, 0x47, 0x7d, 0x05, 0x64, 0x85, 0xe9, 0xf9, 0xd5,
+      0xd8, 0x16, 0xba, 0x42, 0x49, 0xf2, 0x63, 0x66, 0x8c, 0xf0, 0x27, 0xaf,
+      0x56, 0x81, 0x49, 0x9e, 0xe4, 0x3a, 0x6c, 0xd3, 0xb6, 0x35, 0x49, 0xba,
+      0x3a, 0xfd, 0xb0, 0xad, 0x16, 0xe9, 0xf3, 0x0c, 0xfb, 0xf2, 0x26, 0x58,
+      0x64, 0x1d, 0x44, 0xa4, 0x86, 0x97, 0x2a, 0x14, 0xd4, 0x17, 0xef, 0xf9,
+      0xe7, 0x16, 0xc2, 0xc3, 0xd9, 0x48, 0x48, 0xd7, 0x2e, 0xad, 0x46, 0x23,
+      0xed, 0x6c, 0x6d, 0xa5, 0x28, 0x61, 0xe4, 0xb7, 0xe1, 0x81, 0xc7, 0xb8,
+      0x5e, 0x76, 0x2a, 0x12, 0x09, 0x61, 0xd1, 0x98, 0x46, 0xdc, 0x83, 0xd3,
+      0x4e, 0x96, 0x63, 0x85, 0x0d, 0x43, 0xc0, 0x3b, 0x4a, 0xd4, 0x04, 0x93,
+      0x76, 0x17, 0x50, 0x3b, 0xaa, 0xa7, 0xd1, 0xaa, 0x43, 0x12, 0x4a, 0xcd,
+      0x81, 0x99, 0xf0, 0xab, 0x3b, 0xd3, 0x2d, 0xbf, 0xc9, 0xa5, 0x8a, 0xaa,
+      0x15, 0xe7, 0xce, 0x28, 0x29, 0x79, 0x50, 0x5e, 0xc2, 0x07, 0x26, 0x35,
+      0x20, 0x2a, 0xa2, 0x27, 0x05, 0x87, 0x65, 0x39, 0x91, 0x7b, 0xa8, 0xff,
+      0x8a, 0xf4, 0x0a, 0xb2, 0x40, 0x8e, 0xef, 0x81, 0xa6, 0x52, 0xc5, 0xe0,
+      0xb9, 0xba, 0x3a, 0x6c, 0x33, 0x86, 0x9e, 0xcc, 0x70, 0x2b, 0xbe, 0xb9,
+      0x44, 0x84, 0xd6, 0x4e, 0x58, 0x57, 0xf6, 0xd2, 0xef, 0x00, 0x4d, 0xc1,
+      0x49, 0x87, 0xa8, 0x36, 0x75, 0x61, 0xc5, 0x60, 0x14, 0x84, 0xda, 0xbb,
+      0x41, 0xf9, 0x9c, 0xd4, 0x44, 0x4b, 0xbc, 0x24, 0x33, 0xab, 0xb3, 0x1b,
+      0xb5, 0x2b, 0x40, 0xf0, 0xf6, 0xd7, 0x28, 0xaa, 0x94, 0x95, 0xf2, 0x39,
+      0x95, 0xee, 0x74, 0xfd, 0xc3, 0x4b, 0x83, 0x74, 0x8b, 0x87, 0x5c, 0x67,
+      0x49, 0x8e, 0xa6, 0xa8, 0xb8, 0xd4, 0x4d, 0x12, 0x9e, 0x49, 0xfb, 0x8b,
+      0x55, 0x7e, 0x78, 0x01, 0xd3, 0xf1, 0x05, 0xeb, 0xff, 0x79, 0xd4, 0x40,
+      0x32, 0x5e, 0xb1, 0xb3, 0x1b, 0x35, 0x17, 0x45, 0x32, 0xc4, 0x22, 0x02,
+      0xe2, 0xa1, 0xc3, 0xe8, 0xe1, 0x9d, 0x3d, 0x2a, 0x10, 0xe5, 0x0a, 0x71,
+      0xb8, 0xfa, 0x30, 0xfa, 0x98, 0x6e, 0x51, 0xe3, 0x0a, 0x74, 0x08, 0x26,
+      0xb7, 0x9f, 0x20, 0xab, 0x8e, 0x7c, 0x3b, 0xf4, 0x57, 0x47, 0xa7, 0xa0,
+      0xda, 0xae, 0x4a, 0x90, 0xb8, 0x34, 0xa8, 0x21, 0xbd, 0xfb, 0x9e, 0x46,
+      0xee, 0x4f, 0x7d, 0x37, 0x84, 0x31, 0xde, 0x8b, 0x1f, 0x88, 0x44, 0x40,
+      0xb1, 0xa7, 0x36, 0xa0, 0x4b, 0x31, 0xff, 0x40, 0x37, 0x49, 0x1a, 0xb7,
+      0x89, 0x35, 0x7a, 0x8e, 0x6c, 0x78, 0x47, 0x66, 0xe5, 0x38, 0x99, 0xae,
+      0x5b, 0x5e, 0xa6, 0xb8, 0x50, 0xef, 0x70, 0x0f, 0xf3, 0xa5, 0x4c, 0x42,
+      0xe1, 0x3d, 0x84, 0x5f, 0x71, 0x66, 0x08, 0xa3, 0x57, 0x96, 0xf3, 0x2b,
+      0x2b, 0x8e, 0x33, 0x98, 0x49, 0x0d, 0x66, 0x40, 0xb7, 0x48, 0x6a, 0x45,
+      0x45, 0x35, 0x68, 0x41, 0x26, 0x22, 0x91, 0xf7, 0x33, 0xc6, 0x85, 0x51,
+      0x7c, 0x56, 0x0a, 0x5d, 0xc7, 0x9a, 0x37, 0xb6, 0xfb, 0x5e, 0x18, 0x85,
+      0x31, 0xf6, 0x74, 0x57, 0x5f, 0x1a, 0xcc, 0x8d, 0x34, 0x85, 0xcb, 0x31,
+      0xcc, 0x14, 0xda, 0x10, 0xf0, 0xf5, 0x38, 0xc2, 0x1b, 0x54, 0x93, 0x0c,
+      0x62, 0x8a, 0x4c, 0x4f, 0x7f, 0xb7, 0x26, 0x36, 0xa8, 0x08, 0x84, 0x60,
+      0x48, 0xaa, 0x2a, 0x6a, 0x72, 0x9b, 0x22, 0xaf, 0x0a, 0x5d, 0x0b, 0x92,
+      0x3f, 0x98, 0x3e, 0x7f, 0xa8, 0x27, 0xc5, 0x0d, 0x84, 0x6e, 0x67, 0x88,
+      0x13, 0x2e, 0xbd, 0xda, 0x60, 0xe0, 0x9c, 0xf3, 0x54, 0x07, 0xf2, 0x10,
+      0xf5, 0xfe, 0x09, 0x42, 0x09, 0x39, 0xa9, 0xca, 0x0e, 0xe2, 0xd4, 0x1f,
+      0x38, 0x54, 0x61, 0x99, 0x03, 0x8f, 0x4b, 0x7d, 0x7f, 0x5d, 0x7e, 0xac,
+      0x0e, 0x79, 0x85, 0x18, 0xb9, 0x2f, 0x66, 0x86, 0x86, 0xbd, 0x57, 0x86,
+      0x51, 0x46, 0x59, 0x70, 0x28, 0xf6, 0xa5, 0xf1, 0x20, 0x7b, 0xbd, 0xad,
+      0x5e, 0x42, 0x55, 0x35, 0xcf, 0x8d, 0xd9, 0x55, 0xa5, 0x39, 0x67, 0xcc,
+      0x10, 0x92, 0x5b, 0xbf, 0x05, 0x9d, 0xe8, 0xc1, 0xde, 0xfc, 0xe6, 0x24,
+      0x47, 0x7d, 0xc9, 0x2a, 0xb6, 0xc4, 0x09, 0x45, 0xa2, 0x3d, 0xe1, 0xdd,
+      0x2c, 0xc5, 0x9e, 0x39, 0x5f, 0x8e, 0x03, 0xa1, 0x1f, 0xcb, 0xb5, 0xe7,
+      0x89, 0xe5, 0x87, 0xda, 0xfd, 0x9a, 0x6f, 0xf5, 0xf0, 0xb6, 0x4b, 0xda,
+      0xc5, 0x9c, 0xf3, 0xe0, 0x4c, 0xb0, 0xc9, 0x96, 0x5a, 0x82, 0x03, 0x15,
+      0xb5, 0xf3, 0x54, 0xfb, 0xd4, 0xe3, 0x54, 0x2c,
+    },
+  }, {
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Encapsulation -- ML-KEM-1024",
+    .ek = {
+      0x27, 0x66, 0x9A, 0x66, 0x76, 0x67, 0xB8, 0xD5, 0x46, 0x68, 0x58, 0x60,
+      0x22, 0x60, 0x11, 0x5B, 0x62, 0x09, 0xBC, 0x2C, 0x45, 0xDF, 0x7A, 0x4E,
+      0x64, 0x93, 0x2B, 0x75, 0xC7, 0x8B, 0x9F, 0x70, 0x83, 0xF1, 0x31, 0xBC,
+      0xD4, 0xE2, 0x0E, 0xFF, 0x8C, 0xCF, 0x69, 0x73, 0x6B, 0xDB, 0xC8, 0x84,
+      0x06, 0xF9, 0xB6, 0x9A, 0xD3, 0xCE, 0x35, 0x6A, 0x0F, 0x5E, 0x67, 0x6D,
+      0xD0, 0xA7, 0xC4, 0xAB, 0xB1, 0xA1, 0xC9, 0xD6, 0x20, 0x21, 0xBB, 0x38,
+      0x4A, 0x40, 0x14, 0xFB, 0x04, 0xCD, 0x2F, 0x82, 0x18, 0x90, 0xD9, 0x04,
+      0x27, 0xC4, 0x9F, 0x4A, 0x62, 0x8E, 0xCE, 0xC2, 0x73, 0x1F, 0xAC, 0x02,
+      0x52, 0x37, 0x36, 0x0D, 0x58, 0x2C, 0xD0, 0x66, 0x47, 0xB1, 0x10, 0x9A,
+      0xA6, 0xC2, 0xAC, 0x5D, 0x43, 0x37, 0x58, 0xC1, 0xCA, 0xA5, 0x35, 0x55,
+      0xFF, 0xF5, 0x77, 0xEB, 0xB5, 0x21, 0xFB, 0xE3, 0x2D, 0x10, 0xF7, 0x90,
+      0x60, 0x4C, 0x53, 0xC2, 0xF8, 0x2C, 0x17, 0xB0, 0x8E, 0xF3, 0x62, 0x56,
+      0x74, 0x21, 0x48, 0x44, 0x90, 0x6D, 0xB3, 0xFB, 0x95, 0x20, 0x03, 0x14,
+      0x22, 0xA1, 0x3B, 0xD7, 0x61, 0x2D, 0x42, 0x01, 0xC2, 0x7D, 0x15, 0xB9,
+      0xD1, 0x94, 0x83, 0x0C, 0xC3, 0x66, 0x9B, 0xB8, 0xBA, 0x34, 0xC2, 0x52,
+      0x37, 0x64, 0x41, 0x39, 0x71, 0xC4, 0x0D, 0x84, 0xAE, 0xE6, 0x56, 0x75,
+      0xD5, 0x21, 0x53, 0x09, 0xDA, 0x83, 0x67, 0xF0, 0x01, 0x49, 0x75, 0x46,
+      0xEC, 0xE0, 0x7C, 0xBF, 0x00, 0x2D, 0x78, 0x1B, 0x83, 0x06, 0x82, 0x48,
+      0x40, 0x80, 0xAD, 0x6F, 0x95, 0x58, 0xB3, 0x6B, 0x6B, 0xF6, 0x10, 0x91,
+      0x71, 0x30, 0xB7, 0x41, 0x9B, 0x39, 0xF8, 0x50, 0x29, 0x62, 0x12, 0x64,
+      0xCF, 0x2C, 0x8A, 0xE4, 0xD8, 0x08, 0x38, 0x7B, 0x20, 0xCC, 0x5A, 0xA0,
+      0xB9, 0x69, 0xC3, 0x9B, 0xC8, 0x0E, 0x6C, 0xB9, 0xCA, 0x03, 0x51, 0xA3,
+      0xF6, 0x0A, 0xCE, 0xAF, 0x12, 0xBD, 0x41, 0xFA, 0x09, 0x96, 0xE3, 0x99,
+      0x06, 0xA9, 0xB6, 0x16, 0x97, 0xB7, 0x47, 0xC2, 0x03, 0x1C, 0x76, 0x02,
+      0x88, 0x36, 0x44, 0x57, 0x42, 0x5B, 0xBB, 0xB4, 0x0F, 0x48, 0x98, 0xAD,
+      0x08, 0x58, 0x76, 0x60, 0x8A, 0x77, 0xA5, 0xEB, 0x9D, 0x12, 0x4B, 0xC9,
+      0x92, 0x26, 0x51, 0xB7, 0x63, 0x95, 0x88, 0x15, 0x58, 0xCA, 0xD0, 0x6F,
+      0x3C, 0x4B, 0xCF, 0x08, 0xE4, 0x5B, 0x67, 0xBA, 0x51, 0x60, 0x38, 0xA3,
+      0x64, 0xB7, 0x74, 0x0E, 0x97, 0x40, 0xEE, 0x2B, 0x93, 0xC5, 0xC6, 0x5F,
+      0x49, 0x02, 0x0A, 0xD4, 0x2B, 0x3C, 0x0A, 0xEA, 0x5B, 0xF2, 0x42, 0xA4,
+      0xF1, 0xB0, 0x89, 0xB5, 0xA3, 0x45, 0x8B, 0xE8, 0xA3, 0x71, 0xCA, 0x1F,
+      0x29, 0x3C, 0x53, 0xF2, 0x78, 0x0E, 0xCE, 0x28, 0x12, 0x93, 0xD9, 0x91,
+      0xE6, 0xE5, 0x79, 0x04, 0x2B, 0xAB, 0xC1, 0x69, 0x72, 0x4F, 0x10, 0x68,
+      0x1F, 0xD1, 0xC7, 0xD2, 0xFB, 0x16, 0x48, 0xB0, 0xBF, 0x80, 0x81, 0x8A,
+      0x7D, 0xD3, 0xB7, 0x09, 0x73, 0x4D, 0x38, 0x97, 0x2E, 0x3E, 0x44, 0x87,
+      0x5A, 0xF0, 0x92, 0x7A, 0x9A, 0xAD, 0xE8, 0x26, 0x13, 0xFC, 0xA0, 0x5E,
+      0xE5, 0xB3, 0x21, 0x06, 0x47, 0xA5, 0x63, 0x2A, 0xA1, 0x70, 0xD0, 0x9E,
+      0x70, 0xB5, 0x6A, 0x2F, 0x04, 0x33, 0x7A, 0x33, 0x7E, 0xE9, 0x52, 0x38,
+      0x3A, 0x1A, 0x8A, 0xEE, 0xA6, 0xCD, 0xB9, 0x0C, 0xCD, 0x86, 0xA8, 0x18,
+      0xD1, 0xBB, 0x39, 0x46, 0x5B, 0xA3, 0x13, 0xD2, 0x66, 0xBB, 0xB1, 0x05,
+      0x81, 0xFA, 0x18, 0x7D, 0x92, 0x6A, 0xC3, 0xA8, 0xB7, 0x49, 0xF6, 0x44,
+      0x45, 0xFA, 0xB5, 0x6C, 0x99, 0x27, 0x55, 0x57, 0x93, 0xFB, 0x4A, 0xCF,
+      0xB0, 0x39, 0xB1, 0xAA, 0x54, 0x3B, 0x1B, 0x87, 0xAE, 0x6A, 0x49, 0xAB,
+      0x56, 0x29, 0x33, 0xC4, 0xC9, 0x7B, 0xD7, 0x4C, 0x07, 0xBF, 0x29, 0x85,
+      0x1A, 0x46, 0x98, 0x51, 0xA9, 0x82, 0x59, 0x55, 0x96, 0xFE, 0x7A, 0xCA,
+      0xE0, 0xDB, 0x23, 0x53, 0x30, 0x28, 0xAA, 0x34, 0x67, 0x6F, 0x7A, 0x9B,
+      0x29, 0x26, 0x3E, 0x7A, 0xA2, 0x79, 0x00, 0x10, 0x4B, 0x1B, 0xA1, 0xB5,
+      0x67, 0x47, 0x39, 0xB2, 0xFC, 0x4E, 0xD8, 0xA3, 0x30, 0xBB, 0xA5, 0xA0,
+      0xB6, 0x24, 0x7C, 0x63, 0xF1, 0x15, 0x3D, 0xA0, 0x1D, 0xC8, 0xF6, 0x16,
+      0xF1, 0x04, 0x83, 0xA6, 0x93, 0xA6, 0x34, 0xC1, 0xBA, 0x6A, 0xE1, 0xAB,
+      0x2F, 0x16, 0x34, 0x00, 0xBB, 0x57, 0x71, 0xE7, 0x01, 0x71, 0xFC, 0xB5,
+      0x41, 0x55, 0xAB, 0xFC, 0xB2, 0x04, 0x4F, 0xCB, 0x30, 0xBA, 0xD6, 0x7F,
+      0x74, 0x21, 0x83, 0x86, 0x18, 0x19, 0xED, 0xB1, 0xAA, 0x6C, 0x77, 0x1F,
+      0xC8, 0xE1, 0x1A, 0x92, 0xE0, 0x8B, 0x71, 0xF4, 0x0D, 0x03, 0x6C, 0x15,
+      0xD2, 0x89, 0x6A, 0x20, 0x47, 0x25, 0xBA, 0x90, 0xA0, 0x3B, 0x47, 0x8D,
+      0x98, 0xC4, 0x90, 0x84, 0x38, 0x2F, 0x1D, 0x22, 0x3F, 0xE1, 0x29, 0x80,
+      0xE9, 0x47, 0xA4, 0x15, 0xE5, 0x5F, 0xE6, 0x7B, 0x85, 0xDA, 0x40, 0x44,
+      0x13, 0x42, 0x44, 0x5B, 0x46, 0xC2, 0xFC, 0x42, 0x02, 0x0D, 0x04, 0x76,
+      0x9A, 0x2A, 0x1C, 0x64, 0x64, 0x1F, 0x0C, 0x36, 0x63, 0x6B, 0xA6, 0xC4,
+      0x65, 0x2B, 0x26, 0x7A, 0x4B, 0x92, 0x19, 0xE3, 0x33, 0xA0, 0x68, 0x17,
+      0xB5, 0x81, 0x7B, 0x6E, 0x6C, 0xC4, 0x85, 0xE3, 0x52, 0x61, 0x41, 0x69,
+      0xAB, 0xC2, 0x0E, 0x18, 0x91, 0xB7, 0xA0, 0x00, 0xC5, 0x2A, 0xF1, 0x5A,
+      0x7B, 0x90, 0x4C, 0x97, 0x6C, 0x1B, 0xFD, 0x3A, 0x23, 0x77, 0xEB, 0x76,
+      0xB5, 0x50, 0x33, 0xC7, 0xC4, 0xC6, 0x9E, 0x71, 0x74, 0xAA, 0xF2, 0x77,
+      0x15, 0x75, 0x63, 0x16, 0xCA, 0xCC, 0xCE, 0x63, 0xA5, 0xA2, 0x24, 0x35,
+      0xC7, 0xD1, 0x02, 0x04, 0x43, 0xAA, 0x71, 0x69, 0x3B, 0xF0, 0x62, 0x30,
+      0x3D, 0x13, 0x33, 0x1F, 0x79, 0x54, 0x24, 0xC2, 0x0D, 0x26, 0x6C, 0x1D,
+      0x90, 0x30, 0x5F, 0xC8, 0xC2, 0x53, 0x66, 0x84, 0xA9, 0x3D, 0x50, 0x6D,
+      0xE6, 0x32, 0x9B, 0x61, 0x62, 0x40, 0x59, 0x99, 0xBD, 0x5C, 0xAA, 0x7D,
+      0xDB, 0x96, 0x13, 0xC8, 0x23, 0x8C, 0xC6, 0xD3, 0x35, 0xA1, 0xEB, 0x40,
+      0x82, 0xE7, 0x71, 0x0D, 0x07, 0x9F, 0x87, 0xA4, 0xBF, 0xF6, 0x47, 0x8B,
+      0x5F, 0x0C, 0x58, 0x77, 0x86, 0xAF, 0x42, 0x71, 0x92, 0xD9, 0xA3, 0x4A,
+      0x4F, 0xA3, 0x3B, 0xF0, 0xD3, 0xCC, 0x58, 0xFB, 0x46, 0x3B, 0x48, 0x38,
+      0xCA, 0x2C, 0x33, 0x7E, 0x65, 0x39, 0x7D, 0xA1, 0x56, 0x90, 0xC5, 0x2A,
+      0xC0, 0xE5, 0x46, 0x8B, 0xDC, 0x03, 0xDF, 0x5A, 0x62, 0xF7, 0x02, 0x09,
+      0x34, 0xE2, 0x67, 0xE0, 0xF7, 0xCF, 0x95, 0x59, 0x94, 0x35, 0xF9, 0x52,
+      0xFA, 0xB7, 0x4C, 0xFE, 0xB4, 0x30, 0x8B, 0x17, 0x3F, 0x12, 0xE0, 0x73,
+      0xF7, 0xF0, 0x40, 0xDB, 0x4C, 0x63, 0xC1, 0xC4, 0x8A, 0x7B, 0x7A, 0x41,
+      0xF4, 0x77, 0x9A, 0x6B, 0x57, 0xA9, 0x22, 0xC9, 0x70, 0x77, 0x11, 0x80,
+      0x00, 0x84, 0x93, 0xD4, 0xC7, 0x68, 0x05, 0x40, 0x0B, 0x7C, 0x66, 0x4D,
+      0x0B, 0x92, 0xB2, 0x2C, 0x49, 0x55, 0x1B, 0x12, 0x47, 0xE6, 0x2C, 0x85,
+      0xE1, 0xE5, 0x40, 0xC8, 0x20, 0x93, 0x37, 0x10, 0x13, 0xC4, 0x67, 0x6C,
+      0xEA, 0xD7, 0x7C, 0x5F, 0x30, 0x64, 0xA3, 0x73, 0x49, 0xC7, 0x16, 0x5E,
+      0xB3, 0xAA, 0x7D, 0xEF, 0x87, 0x31, 0xE9, 0xD6, 0x6A, 0x56, 0x36, 0x8F,
+      0x19, 0x5C, 0x04, 0x5B, 0x2A, 0x50, 0xE5, 0x97, 0x86, 0x16, 0x1A, 0x63,
+      0x0D, 0x28, 0x00, 0x89, 0x80, 0x12, 0x98, 0xC1, 0x30, 0xE4, 0x48, 0x31,
+      0x50, 0xCA, 0x91, 0x52, 0xC2, 0xA0, 0xF2, 0x47, 0x75, 0x0C, 0x06, 0x22,
+      0x59, 0xB8, 0x4C, 0x28, 0x23, 0x6C, 0x3F, 0xB5, 0x46, 0x25, 0xD5, 0xCD,
+      0xBE, 0xCC, 0x68, 0xDB, 0xA2, 0x2F, 0xB1, 0x55, 0x80, 0x55, 0xFB, 0x9B,
+      0x24, 0x35, 0x01, 0xC7, 0x58, 0x51, 0xE7, 0x6A, 0xBE, 0x48, 0x47, 0xB9,
+      0xB9, 0x72, 0xA7, 0x34, 0x11, 0xA6, 0xB4, 0x28, 0x2B, 0xF5, 0x98, 0x3A,
+      0x82, 0xDA, 0x74, 0x13, 0xE5, 0x4B, 0xA3, 0x5B, 0xAB, 0x37, 0xA9, 0xB3,
+      0xC6, 0x28, 0x84, 0xB6, 0x43, 0xC1, 0x34, 0x16, 0x5C, 0x98, 0x70, 0xC6,
+      0xBB, 0x39, 0x0F, 0x6B, 0x7A, 0x1E, 0x57, 0x45, 0x15, 0x8F, 0xB2, 0x51,
+      0xD6, 0x90, 0x94, 0x33, 0x55, 0x1F, 0xEB, 0xD3, 0x0B, 0xA5, 0x75, 0xA1,
+      0xE2, 0xF1, 0x09, 0x58, 0x49, 0x8D, 0x9F, 0x14, 0x7E, 0xD9, 0x53, 0x13,
+      0x22, 0xA1, 0x60, 0x97, 0xF5, 0x5D, 0x81, 0x17, 0x95, 0x45, 0x79, 0x12,
+      0x91, 0x2B, 0x1C, 0x65, 0xF3, 0x80, 0x25, 0x42, 0x9B, 0x3E, 0x76, 0x4A,
+      0x2E, 0x1A, 0xBC, 0x4E, 0x30, 0xC2, 0x88, 0x08, 0x27, 0x42, 0x99, 0x55,
+      0x90, 0x98, 0x1C, 0x43, 0xDB, 0xB3, 0x65, 0x96, 0x6B, 0xCB, 0x97, 0x20,
+      0xB1, 0x78, 0xC5, 0xEB, 0x96, 0x3B, 0x82, 0x93, 0x4C, 0x02, 0x81, 0x4B,
+      0x75, 0x25, 0x54, 0x6D, 0xB7, 0xC9, 0x6D, 0x65, 0x82, 0x2E, 0x49, 0x42,
+      0xE4, 0xA4, 0xAC, 0x13, 0xC9, 0x94, 0x90, 0xE7, 0xAB, 0x4A, 0x70, 0x23,
+      0x71, 0xF2, 0x13, 0x16, 0xA5, 0x79, 0x06, 0xB1, 0x92, 0x58, 0x42, 0x88,
+      0x01, 0x19, 0x25, 0x67, 0xC2, 0x04, 0x5B, 0xF8, 0x77, 0x5C, 0xF5, 0x8C,
+      0x5D, 0xB2, 0x8B, 0xA1, 0xB0, 0x5E, 0x04, 0x2A, 0x18, 0x59, 0xE6, 0x42,
+      0x86, 0xB5, 0xB1, 0x14, 0xF3, 0x9F, 0xCA, 0xCC, 0x12, 0x7B, 0xE6, 0x3D,
+      0xFF, 0x59, 0x0B, 0xC1, 0x84, 0xB8, 0x3B, 0x16, 0x8C, 0x30, 0x19, 0x98,
+      0x90, 0x37, 0x41, 0x00, 0xE4, 0x0D, 0x2F, 0xC7, 0x75, 0x2B, 0x14, 0x30,
+      0x35, 0x50, 0x22, 0xF3, 0xD5, 0x89, 0x25, 0xD1, 0x99, 0x1B, 0xF3, 0xB9,
+      0x8A, 0x90, 0x39, 0x5F, 0x85, 0x79, 0x64, 0x6C, 0x84, 0x13, 0xBA, 0xB3,
+      0xC0, 0xC0, 0x70, 0x7A, 0x23, 0x8A, 0x27, 0xD0, 0x9F, 0xA5, 0x7A, 0x32,
+      0xFF, 0x85, 0x39, 0x2F, 0xD0, 0x8C, 0x2F, 0x22, 0x86, 0xAB, 0xDB, 0x2B,
+      0x69, 0x36, 0xB9, 0xD3, 0x50, 0x38, 0x02, 0xC6, 0xB5, 0x1E, 0x41, 0x5B,
+      0x81, 0x67, 0x3C, 0xC7, 0x80, 0x54, 0xF1, 0xB2, 0xC4, 0xBD, 0xFA, 0x73,
+      0x3E, 0x52, 0x64, 0xC5, 0x5A, 0x7C, 0x4D, 0xA5, 0xB7, 0x39, 0x44, 0x40,
+      0x24, 0x62, 0x03, 0x3D, 0x08, 0xAE, 0x62, 0x0B, 0xD0, 0x56, 0x44, 0xB4,
+      0x77, 0xAB, 0x31, 0x5E, 0x93, 0x6D, 0x3F, 0x25, 0xB5, 0xBA, 0x7A, 0xC1,
+      0x9E, 0xB5, 0x59, 0xA5, 0xC1, 0x19, 0x5F, 0x56, 0x8B, 0x31, 0x3C, 0x26,
+      0x75, 0x09, 0x2E, 0x6D, 0xF5, 0x8F, 0xF3, 0x99, 0xC4, 0x2C, 0xAB, 0x63,
+      0x63, 0xAA, 0x03, 0x36, 0x91, 0xCB, 0x8C, 0xE0, 0x66, 0x99, 0xE7, 0x01,
+      0xF2, 0xB9, 0x25, 0x97, 0xCB, 0x8F, 0xC2, 0x35, 0x16, 0xE9, 0xF4, 0x0C,
+      0xE7, 0x5B, 0x7B, 0xC1, 0xE0, 0x52, 0x0A, 0x5A, 0x38, 0x95, 0xEB, 0x7D,
+      0x8D, 0x47, 0x40, 0x09, 0xA0, 0xCB, 0x0A, 0xDC, 0x2D, 0xF4, 0x76, 0xB5,
+      0x16, 0x41, 0x12, 0xC3, 0xB6, 0x00, 0xB6, 0x77, 0x6D, 0xAB, 0x49, 0xB2,
+      0x03, 0x81, 0xA4, 0x01, 0x46, 0x91, 0x65, 0x2A, 0x3C, 0x31, 0x61, 0xAA,
+      0xC6, 0x61, 0x6C, 0xFA, 0xA2, 0x65, 0x63, 0x8C, 0x6C, 0x66, 0x5A, 0x84,
+      0x54, 0xF3, 0x67, 0x80, 0xB7, 0x89, 0xCF, 0xA3, 0x5D, 0x2A, 0xF4, 0x9E,
+      0x6D, 0x5F, 0x48, 0x2B, 0xFA, 0x3C, 0x86, 0x4B, 0x0E, 0xF2, 0x9E, 0x18,
+      0xD2, 0xEF, 0xFF, 0x92, 0xDB, 0x18, 0x76, 0xA2, 0x20, 0x76, 0xAB, 0x1A,
+      0xAC, 0x0A, 0x73, 0x93, 0xED, 0x9E, 0x5A, 0x48,
+    },
+
+    .seed = {
+      0x03, 0x4F, 0xF1, 0x4A, 0x56, 0x24, 0x9C, 0x25, 0x21, 0xD4, 0x27, 0x9E,
+      0xBA, 0x3D, 0x04, 0x93, 0x1C, 0xC8, 0x92, 0xBB, 0xC4, 0x50, 0x02, 0xB5,
+      0xB3, 0x3D, 0x9F, 0x01, 0x88, 0xAC, 0xBA, 0xF6,
+    },
+
+    .exp_k = {
+      0x46, 0xC2, 0x00, 0xF3, 0xF6, 0xEE, 0x8E, 0x11, 0xD4, 0x76, 0x53, 0x80,
+      0x1E, 0x34, 0x82, 0x24, 0x1C, 0xB7, 0x83, 0xB9, 0xD7, 0x94, 0xEB, 0x11,
+      0x6A, 0x4B, 0xDA, 0x08, 0x5A, 0xEB, 0x6B, 0xB7,
+    },
+
+    .exp_ct = {
+      0x8D, 0x4E, 0x2C, 0xB3, 0x9F, 0xFD, 0xE4, 0x31, 0x1A, 0xEE, 0xDB, 0x23,
+      0x38, 0xBF, 0x58, 0xCE, 0x11, 0xFA, 0xDA, 0xBD, 0xC9, 0x81, 0x3A, 0x32,
+      0x19, 0x30, 0xF4, 0x67, 0x56, 0xDD, 0x13, 0xA8, 0xE7, 0x91, 0x9F, 0xAC,
+      0x4F, 0x59, 0xCC, 0x9F, 0x8B, 0x91, 0xC8, 0x33, 0xB3, 0xB3, 0xF9, 0x1A,
+      0xDC, 0x6F, 0x9F, 0xBD, 0xBD, 0xE2, 0xF7, 0xDA, 0xE8, 0x84, 0x1B, 0xE5,
+      0x23, 0x8B, 0x98, 0x50, 0xA5, 0xEE, 0xBE, 0x67, 0x5D, 0xDE, 0xF4, 0x2A,
+      0x93, 0x14, 0xF6, 0x90, 0x59, 0x5D, 0x51, 0x52, 0x3E, 0x81, 0x17, 0xF2,
+      0x22, 0x66, 0x03, 0x4F, 0x09, 0xB7, 0x7D, 0x99, 0x1E, 0xE5, 0x75, 0x80,
+      0x2A, 0xFE, 0x44, 0x63, 0x74, 0xEB, 0x3D, 0x9E, 0x1B, 0xEB, 0x8F, 0x25,
+      0x04, 0x9C, 0x6E, 0xFA, 0x96, 0x32, 0x73, 0x66, 0xC0, 0x24, 0xCD, 0xFB,
+      0xE8, 0xDC, 0x27, 0xEF, 0x56, 0x49, 0x2C, 0x90, 0x40, 0x9E, 0x87, 0x13,
+      0x9C, 0x60, 0x88, 0x48, 0x8E, 0x17, 0xB8, 0x2D, 0x15, 0x56, 0xC2, 0x51,
+      0x31, 0xAC, 0xEE, 0x7D, 0xAF, 0xFE, 0x2D, 0x43, 0x7C, 0xEC, 0x34, 0x41,
+      0xBB, 0xBB, 0xAB, 0x80, 0xC4, 0xBF, 0x17, 0x7E, 0x65, 0x3A, 0xE0, 0x83,
+      0x1C, 0x9B, 0x4C, 0xEB, 0x70, 0x50, 0x57, 0x27, 0xD6, 0x3C, 0x4D, 0x47,
+      0x4F, 0xED, 0xC5, 0x20, 0x19, 0xBE, 0x41, 0x1C, 0x9A, 0x43, 0xB8, 0x71,
+      0x70, 0xF5, 0x89, 0x3F, 0x06, 0xEC, 0xD8, 0xD7, 0x82, 0x06, 0x3D, 0xF8,
+      0x93, 0xA1, 0xB6, 0x82, 0x24, 0x6D, 0x1C, 0x64, 0xF8, 0xF5, 0xA8, 0xC6,
+      0xFC, 0xDF, 0x07, 0x92, 0x7F, 0x4D, 0x5B, 0x7A, 0x39, 0x7F, 0xBC, 0xBD,
+      0x07, 0x50, 0x45, 0xDF, 0x2C, 0x4A, 0x36, 0xF5, 0x30, 0x4C, 0x95, 0xF4,
+      0x4A, 0xF9, 0x27, 0xAE, 0x91, 0x66, 0x42, 0x0B, 0x39, 0x44, 0x87, 0x94,
+      0xF5, 0xB3, 0xC3, 0x52, 0x27, 0xC3, 0xC9, 0xDF, 0x92, 0x56, 0x02, 0xA1,
+      0xAC, 0x98, 0xF8, 0x51, 0xAA, 0xDB, 0x65, 0xC9, 0x3F, 0xDD, 0x63, 0x27,
+      0xAE, 0xD8, 0xAE, 0x41, 0x29, 0x72, 0x44, 0x36, 0xA3, 0x3A, 0xA0, 0x8A,
+      0xA5, 0x66, 0x08, 0x85, 0x5F, 0xF8, 0x0A, 0xAA, 0x42, 0xAC, 0xA4, 0x56,
+      0x2B, 0x2D, 0x78, 0xDB, 0xBD, 0x2F, 0x91, 0xAE, 0xF2, 0x51, 0x56, 0x6B,
+      0x8C, 0x6F, 0x98, 0x21, 0x37, 0x84, 0xC9, 0x9D, 0xD7, 0xD7, 0x1F, 0x49,
+      0x55, 0x64, 0xC9, 0x08, 0x50, 0x1E, 0x35, 0xE3, 0xBF, 0xBB, 0x67, 0x5C,
+      0xCB, 0x66, 0x63, 0x52, 0x87, 0xCB, 0x64, 0x66, 0xE6, 0xE3, 0x8E, 0xA8,
+      0xAB, 0x11, 0xCE, 0x7E, 0xC6, 0x0B, 0xED, 0x86, 0x20, 0xB3, 0xDC, 0xD6,
+      0x94, 0x3D, 0x12, 0x79, 0xA4, 0x1F, 0x93, 0xA8, 0x7F, 0xA3, 0x59, 0xE5,
+      0x13, 0xC8, 0x1D, 0xE9, 0x18, 0xDA, 0x88, 0x32, 0x2B, 0x1B, 0x08, 0x81,
+      0x40, 0xE0, 0x74, 0xBE, 0x39, 0xBC, 0x17, 0xE3, 0xC5, 0x1A, 0xB7, 0x19,
+      0xDF, 0x6E, 0x42, 0x6D, 0x64, 0xFF, 0x94, 0xB8, 0x66, 0x2B, 0x9D, 0xD2,
+      0x6A, 0x32, 0xA3, 0xC3, 0x68, 0x7B, 0xF9, 0x29, 0x4C, 0x53, 0x7A, 0x22,
+      0x68, 0xF9, 0xDE, 0xD3, 0x80, 0xCC, 0x8A, 0x0F, 0x11, 0x27, 0xEE, 0x5A,
+      0x32, 0x2B, 0x4D, 0xF2, 0x4D, 0x87, 0xFB, 0xCE, 0x76, 0xF5, 0x60, 0xB0,
+      0x37, 0xC6, 0x59, 0xB6, 0xFB, 0x15, 0xC1, 0x56, 0x07, 0x1A, 0xED, 0xC2,
+      0x6E, 0xF1, 0x11, 0x40, 0xDE, 0x88, 0xD0, 0x8D, 0x46, 0x3E, 0xA0, 0xEA,
+      0xF0, 0x80, 0xA0, 0xB2, 0xE6, 0x27, 0xD9, 0xFF, 0x1D, 0x56, 0xC5, 0x02,
+      0x33, 0x55, 0x24, 0x26, 0x97, 0x27, 0xA0, 0x32, 0xDA, 0xCD, 0x16, 0x54,
+      0x3A, 0xDA, 0x83, 0x42, 0xCD, 0x6C, 0xB4, 0x0E, 0x72, 0x28, 0x59, 0x2C,
+      0x35, 0x74, 0xD9, 0x82, 0xE0, 0xB9, 0x14, 0x5E, 0xB8, 0x65, 0xDB, 0x2E,
+      0xE7, 0x81, 0x07, 0x26, 0xA9, 0x16, 0xB8, 0x37, 0xCA, 0x4F, 0x14, 0xC2,
+      0xCB, 0x9E, 0x95, 0x1B, 0xDE, 0x76, 0xBE, 0x16, 0xB8, 0xB1, 0xCD, 0xC2,
+      0xEE, 0xCD, 0xC0, 0x69, 0x49, 0xB8, 0xBE, 0xB1, 0x17, 0x86, 0xB8, 0xF2,
+      0x5F, 0x4C, 0x9A, 0xFA, 0x55, 0x97, 0xCE, 0xB1, 0xD8, 0x5F, 0xC9, 0xB9,
+      0xC9, 0x1D, 0xC6, 0x19, 0x66, 0xF3, 0x96, 0x09, 0x1E, 0x54, 0xC9, 0x6C,
+      0x97, 0xA4, 0x30, 0x0E, 0x99, 0xFD, 0x9F, 0x75, 0x2C, 0x0B, 0xEF, 0x5D,
+      0x88, 0xCA, 0xFB, 0xDC, 0xB3, 0x99, 0x3F, 0xCF, 0x6C, 0x7A, 0x8C, 0x55,
+      0x19, 0xFC, 0xEC, 0xB6, 0xA7, 0x91, 0x17, 0xE9, 0xB5, 0x21, 0x68, 0x01,
+      0x97, 0xD8, 0xA9, 0x1A, 0xB7, 0x5F, 0x18, 0x14, 0xDB, 0xC5, 0x80, 0x75,
+      0xEF, 0x4F, 0x07, 0x98, 0x7A, 0xBC, 0x56, 0xA7, 0x5D, 0xA4, 0x41, 0x6E,
+      0xDB, 0x9D, 0x6F, 0x3D, 0x77, 0x1A, 0xD3, 0x40, 0xD5, 0xCB, 0xCF, 0xC0,
+      0xE5, 0x71, 0xFA, 0x70, 0xAA, 0xC1, 0xC7, 0xDB, 0xBB, 0x5F, 0x5C, 0x5E,
+      0x1D, 0x8B, 0x10, 0x36, 0xF5, 0xA6, 0xFC, 0xFD, 0x06, 0x25, 0xAB, 0x5B,
+      0xBD, 0xA5, 0x71, 0x83, 0x9C, 0x58, 0x35, 0xDD, 0x69, 0x79, 0x77, 0x8F,
+      0x59, 0xD3, 0x48, 0x68, 0x4F, 0xA6, 0xCF, 0xC2, 0xA6, 0x25, 0x35, 0xB4,
+      0x7F, 0xAD, 0x7F, 0x97, 0xB5, 0x21, 0x88, 0x72, 0xD5, 0x2D, 0xCA, 0xCE,
+      0x9D, 0x3C, 0x1B, 0x11, 0x62, 0x8D, 0x35, 0x2A, 0xD8, 0x21, 0x90, 0x0F,
+      0x44, 0xE1, 0x4B, 0x64, 0x7F, 0x6B, 0xFA, 0x70, 0xF6, 0x46, 0xB5, 0xC7,
+      0xAF, 0x53, 0x13, 0x17, 0x7A, 0x10, 0x95, 0x49, 0x44, 0x22, 0x91, 0x53,
+      0xA4, 0x49, 0xFC, 0xF8, 0x9A, 0x62, 0x63, 0xBD, 0xBF, 0x85, 0x56, 0xE9,
+      0x81, 0xE5, 0xD6, 0x25, 0x13, 0x40, 0xF9, 0xF4, 0x3C, 0x66, 0x92, 0x03,
+      0x0F, 0xB9, 0x60, 0x5B, 0xB9, 0x9F, 0x33, 0xE9, 0x6F, 0x06, 0xD1, 0xE4,
+      0xE6, 0xAB, 0xBE, 0x65, 0xE1, 0x46, 0x96, 0xD5, 0x30, 0xF1, 0xB5, 0x25,
+      0xFF, 0xF8, 0x7D, 0x54, 0xC1, 0xAC, 0x2F, 0x5E, 0x96, 0x4D, 0x46, 0xEE,
+      0x37, 0xF4, 0x04, 0x5B, 0x54, 0xE6, 0x09, 0x8F, 0x76, 0xB2, 0x8E, 0xAF,
+      0x69, 0xE9, 0x98, 0x88, 0x8D, 0x25, 0xE0, 0x21, 0xA5, 0x38, 0xFD, 0x19,
+      0x56, 0xA7, 0xFC, 0x30, 0xAE, 0x83, 0xF8, 0xBA, 0x99, 0x47, 0xF8, 0x64,
+      0xFD, 0x59, 0x73, 0x1A, 0x6F, 0xBB, 0x40, 0x2A, 0xF2, 0x99, 0x0E, 0x1E,
+      0xD2, 0xD5, 0x6B, 0xF6, 0x2A, 0xA6, 0xCE, 0xAE, 0x6F, 0x76, 0x9D, 0x2D,
+      0x0C, 0x6C, 0x31, 0x3D, 0x7A, 0xAF, 0x97, 0x4E, 0x69, 0xDC, 0x02, 0xCC,
+      0x43, 0x18, 0xB9, 0x45, 0x7B, 0x8C, 0xC4, 0x06, 0x56, 0xAB, 0x7B, 0x61,
+      0x34, 0xDE, 0x3F, 0x98, 0x01, 0xCE, 0x01, 0x96, 0x99, 0xCE, 0x85, 0x5E,
+      0xBE, 0x9C, 0x6C, 0x02, 0xFD, 0x08, 0x50, 0x6F, 0x00, 0x4A, 0x4E, 0xED,
+      0x2C, 0xA1, 0x66, 0xC9, 0x54, 0xC7, 0xDB, 0x88, 0x10, 0x70, 0x0C, 0xA6,
+      0x71, 0xEF, 0x37, 0x2A, 0x29, 0x0B, 0x00, 0xE1, 0xBF, 0xBB, 0x97, 0xE3,
+      0xE6, 0x74, 0xD3, 0xDC, 0xCC, 0x57, 0xCE, 0x59, 0xF4, 0x65, 0xB1, 0x48,
+      0x8F, 0xF7, 0x6F, 0x62, 0x39, 0x00, 0x8B, 0xE3, 0xE7, 0x61, 0xEF, 0x9C,
+      0x11, 0x3D, 0xF0, 0x10, 0x7B, 0x8E, 0xEA, 0xE3, 0xFE, 0xBA, 0x55, 0xB3,
+      0x5E, 0x4C, 0x1D, 0xA3, 0xB6, 0xC8, 0x7A, 0x8D, 0x20, 0x11, 0x0E, 0x1C,
+      0xD7, 0x71, 0xCC, 0xBC, 0x30, 0xDF, 0xF7, 0x61, 0xE6, 0x03, 0xD4, 0x88,
+      0xE5, 0x5B, 0x85, 0x3A, 0xAE, 0x7D, 0xAA, 0xDF, 0x2A, 0x00, 0x7B, 0x83,
+      0x93, 0xDF, 0x08, 0xAF, 0x53, 0x4F, 0x9F, 0x53, 0xA7, 0x37, 0x57, 0xBA,
+      0xBE, 0x21, 0xC8, 0x64, 0x26, 0xCF, 0x05, 0x8E, 0xCA, 0x81, 0x7E, 0xF2,
+      0x37, 0xBF, 0xC5, 0x8A, 0xC2, 0x98, 0xFB, 0xF2, 0xA1, 0x48, 0x1C, 0x4D,
+      0x12, 0xDC, 0xF1, 0xB7, 0x37, 0xFD, 0x63, 0x97, 0x69, 0xA2, 0x53, 0x1E,
+      0xF9, 0x31, 0xA3, 0x62, 0xA4, 0x44, 0x56, 0xEE, 0x2C, 0xA4, 0x85, 0x98,
+      0xB4, 0x62, 0x59, 0xFC, 0xC9, 0x77, 0x07, 0x6C, 0x59, 0xFA, 0x4E, 0x29,
+      0x54, 0xE9, 0x96, 0x7D, 0xA4, 0x5D, 0xA7, 0xCB, 0xF7, 0x86, 0x33, 0xEC,
+      0x59, 0xC4, 0x63, 0xFE, 0x48, 0xA8, 0x3B, 0x80, 0x1A, 0x54, 0xDB, 0x3F,
+      0xEA, 0xB4, 0x45, 0xA3, 0x57, 0xE4, 0x18, 0xB0, 0x65, 0x3F, 0x29, 0x40,
+      0xB2, 0xB7, 0x13, 0x81, 0xB2, 0xDF, 0x9E, 0xCF, 0x81, 0x00, 0x84, 0x8E,
+      0x29, 0x12, 0xF4, 0xBD, 0x50, 0x3A, 0xF0, 0x75, 0xAA, 0xAF, 0x36, 0xC1,
+      0x36, 0xA4, 0x13, 0xC9, 0x5B, 0xE2, 0xF2, 0x5A, 0x6D, 0x29, 0x19, 0x76,
+      0xCD, 0x66, 0xA2, 0x76, 0x43, 0x53, 0x7E, 0x35, 0xE1, 0xDF, 0x89, 0xB1,
+      0xE4, 0x94, 0xB3, 0x6B, 0x08, 0xF3, 0xD0, 0x19, 0x6C, 0xD7, 0xE9, 0x0B,
+      0xA5, 0xBB, 0x21, 0x00, 0x9F, 0x37, 0xA8, 0x43, 0x19, 0x9E, 0x08, 0xDD,
+      0x95, 0xCA, 0x49, 0x48, 0xC5, 0x33, 0xCB, 0x26, 0x3B, 0x5D, 0x40, 0x5A,
+      0xF2, 0xFA, 0x11, 0x99, 0x81, 0xA8, 0x53, 0x6E, 0xB7, 0x1C, 0x88, 0x22,
+      0x6C, 0x41, 0x53, 0x4C, 0x26, 0x87, 0xBF, 0x1E, 0xED, 0x34, 0x75, 0xE8,
+      0x48, 0x8B, 0xDE, 0x90, 0x9A, 0x93, 0xD4, 0xDB, 0x55, 0xB6, 0xE8, 0x34,
+      0xB5, 0xE7, 0x86, 0x0A, 0xA9, 0x8F, 0xD8, 0xBC, 0xB1, 0x3A, 0xB0, 0x77,
+      0xB7, 0xBF, 0xD7, 0x5B, 0x35, 0xFA, 0x39, 0x3E, 0x93, 0xE3, 0xBF, 0xB4,
+      0xB9, 0xBA, 0x1D, 0xAA, 0x74, 0x65, 0xFD, 0x5B, 0x23, 0xA5, 0xB4, 0xCD,
+      0x17, 0x16, 0xD4, 0xBD, 0xF7, 0xB8, 0xD5, 0x57, 0x4B, 0x15, 0x6D, 0xB8,
+      0x7D, 0x8D, 0xE1, 0xE5, 0x26, 0xC9, 0x7F, 0x8E, 0xB2, 0x87, 0xBD, 0x97,
+      0xEE, 0xEE, 0xEF, 0x07, 0x4D, 0xBC, 0xB2, 0xC4, 0xDB, 0x51, 0xA4, 0xEF,
+      0xF1, 0xFA, 0x7F, 0xFF, 0x32, 0x8A, 0x57, 0x2D, 0x72, 0x70, 0x01, 0x71,
+      0x08, 0xAC, 0xE2, 0xED, 0x25, 0x09, 0x3D, 0xA5, 0x35, 0xC7, 0xA2, 0x6D,
+      0x3B, 0x91, 0x2A, 0xA5, 0x7F, 0xB3, 0x22, 0xE5, 0x3B, 0xB2, 0x22, 0xE9,
+      0x4E, 0x7C, 0xF6, 0x8C, 0xD8, 0xA2, 0x1A, 0xD7, 0xC0, 0x6A, 0x4A, 0xF9,
+      0x78, 0xED, 0x1D, 0xEB, 0x10, 0xE3, 0xF2, 0x41, 0x2A, 0xC6, 0x54, 0x3C,
+      0x18, 0x20, 0x68, 0xEF, 0xFB, 0xD8, 0x7F, 0x31, 0x76, 0x5F, 0x5A, 0xE6,
+      0x81, 0xEE, 0x8B, 0x2E, 0x9A, 0xEB, 0x5B, 0xC9, 0x40, 0xA9, 0x4E, 0xC0,
+      0xEE, 0xF5, 0xBE, 0xF7, 0x48, 0x74, 0x16, 0x9E, 0xAB, 0xEC, 0xF1, 0x51,
+      0x25, 0x65, 0xC5, 0x1E, 0xA5, 0x87, 0x21, 0xDD, 0x3A, 0xF1, 0x69, 0x03,
+      0x65, 0xDB, 0x22, 0xE1, 0x87, 0x7F, 0x2A, 0x5C, 0x01, 0x72, 0x3F, 0x69,
+      0xB7, 0x72, 0x52, 0x77, 0xAE, 0x4E, 0x9E, 0xFA, 0xCD, 0x3A, 0xFA, 0x5A,
+      0xDC, 0xAF, 0x38, 0x57, 0x77, 0xE7, 0xCE, 0x10, 0xF9, 0x56, 0xB4, 0x64,
+      0x2C, 0x6F, 0xC1, 0xC9, 0x78, 0x08, 0x99, 0x3E, 0xFD, 0x99, 0x4C, 0xA6,
+      0x5C, 0x75, 0xF4, 0x59, 0xAC, 0x58, 0x72, 0xF8, 0x24, 0x88, 0xC5, 0x7F,
+      0xB7, 0xAF, 0x9A, 0xB9, 0x69, 0xD5, 0xE3, 0x69, 0xC1, 0x6D, 0x0B, 0x2B,
+      0xF7, 0x80, 0x0B, 0x93, 0x8D, 0x67, 0x84, 0xC7, 0xF6, 0x4D, 0x0C, 0x55,
+      0xCA, 0x77, 0x94, 0x65, 0x49, 0x38, 0x94, 0x9E, 0x14, 0x21, 0x70, 0x55,
+      0xD3, 0x41, 0x01, 0xF9, 0x41, 0x7D, 0x37, 0x0A, 0x8A, 0xDD, 0x72, 0xFC,
+      0x0B, 0x57, 0x66, 0xEC, 0x1D, 0x8A, 0xDD, 0xD7, 0x02, 0x33, 0x4A, 0x2A,
+      0xC2, 0x77, 0x09, 0xC5, 0xAC, 0x5A, 0xE5, 0x60, 0x1D, 0xBA, 0x95, 0x2B,
+      0xE2, 0x58, 0xD9, 0x33, 0x6D, 0xF3, 0xE0, 0xF6, 0x58, 0x78, 0xA8, 0x58,
+      0x61, 0x32, 0x58, 0xFB, 0x5E, 0x47, 0x94, 0x1B,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // Generate shared key `got_k` and ciphertext `got_ct` for test
+    // encapsulation key `ek` and randomness `seed`.
+    uint8_t got_k[32] = { 0 }, got_ct[FIPS203IPD_KEM1024_CT_SIZE] = { 0 };
+    fips203ipd_kem1024_encaps(got_k, got_ct, TESTS[i].ek, TESTS[i].seed);
+
+    // check for expected shared key
+    if (memcmp(got_k, TESTS[i].exp_k, sizeof(got_k))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - k", TESTS[i].name);
+      fail_test(__func__, name, got_k, sizeof(got_k), TESTS[i].exp_k, sizeof(got_k));
+    }
+
+    // check for expected ciphertext
+    if (memcmp(got_ct, TESTS[i].exp_ct, sizeof(got_ct))) {
+      char name[64];
+      snprintf(name, sizeof(name), "%s - ct", TESTS[i].name);
+      fail_test(__func__, name, got_ct, sizeof(got_ct), TESTS[i].exp_ct, sizeof(got_ct));
+    }
+  }
+}
+
+static void test_fips203ipd_kem1024_decaps(void) {
+  static const struct {
+    const char *name; // test name
+    const uint8_t ct[FIPS203IPD_KEM1024_CT_SIZE]; // test ciphertext (1568 bytes)
+    const uint8_t dk[FIPS203IPD_KEM1024_DK_SIZE]; // test decapsulation key (3168 bytes)
+    const uint8_t exp[32]; // expected message (32 bytes)
+  } TESTS[] = {{
+    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
+    .name = "Decapsulation -- ML-KEM-1024",
+
+    .ct = {
+      0x61, 0xFF, 0x1A, 0x8B, 0x61, 0x17, 0xEF, 0x11, 0x83, 0x28, 0xE8, 0x8B,
+      0x32, 0x27, 0x99, 0x30, 0x14, 0xDC, 0xD0, 0x75, 0xB8, 0xA1, 0xA7, 0xF9,
+      0x80, 0x18, 0x93, 0xEE, 0xE6, 0x40, 0x5B, 0xB9, 0x60, 0xB6, 0xB7, 0xF6,
+      0xA1, 0xA2, 0x75, 0x18, 0xA3, 0x40, 0x91, 0x39, 0xA4, 0x8B, 0x85, 0x96,
+      0x81, 0xCC, 0x75, 0x8F, 0x2B, 0xCC, 0x3E, 0xEF, 0xB0, 0x43, 0x94, 0xA3,
+      0x75, 0xA5, 0xCD, 0x71, 0x31, 0x64, 0x90, 0x93, 0x8A, 0xBF, 0xD1, 0x94,
+      0xB2, 0x0B, 0xCD, 0x31, 0xB3, 0x98, 0x02, 0x61, 0xC9, 0xED, 0x69, 0xBF,
+      0x9B, 0x1D, 0x7D, 0x76, 0x59, 0xA8, 0x04, 0x0D, 0xB1, 0xE2, 0x5D, 0x2B,
+      0xA6, 0xF7, 0x03, 0x48, 0x66, 0x24, 0xB7, 0x3C, 0xAC, 0xDC, 0xA2, 0x7D,
+      0xB0, 0xF7, 0xE2, 0x40, 0x8C, 0x94, 0x48, 0xE3, 0x88, 0x73, 0x28, 0x0F,
+      0x5E, 0x99, 0x50, 0xD7, 0xCC, 0xE2, 0x52, 0xA6, 0x47, 0x58, 0x0C, 0x19,
+      0x90, 0x4F, 0xAD, 0x62, 0xAE, 0xC3, 0x00, 0xBC, 0x8E, 0x38, 0xF0, 0x59,
+      0x48, 0xB6, 0x3B, 0xAD, 0x5C, 0xE7, 0xC9, 0x0E, 0x40, 0xC4, 0xBC, 0x65,
+      0x11, 0x77, 0x61, 0xF5, 0xF8, 0x86, 0x8F, 0x80, 0x25, 0xD6, 0xCE, 0xB2,
+      0xC5, 0xDF, 0x60, 0xDE, 0x38, 0xC3, 0x23, 0x29, 0x22, 0x08, 0x7E, 0xFC,
+      0xF2, 0xCD, 0x95, 0xDE, 0x5E, 0x87, 0xB6, 0x88, 0x8B, 0x88, 0xC8, 0x6C,
+      0xC7, 0x83, 0x15, 0x58, 0x5B, 0x2C, 0xC6, 0x88, 0xA7, 0x1B, 0x47, 0x7B,
+      0xFA, 0x38, 0x8D, 0xC2, 0x33, 0x4D, 0xFA, 0x8A, 0xA9, 0x55, 0x03, 0xD5,
+      0x39, 0x7E, 0x2A, 0xE0, 0x35, 0x29, 0x03, 0xEA, 0x6A, 0x0A, 0xE8, 0xB6,
+      0x49, 0xA9, 0x14, 0xB3, 0x52, 0x5F, 0xE5, 0x8F, 0x56, 0x4B, 0xF1, 0x9C,
+      0xC0, 0x9F, 0x54, 0xE1, 0x05, 0xD1, 0x9B, 0xD8, 0x10, 0x54, 0xE5, 0x70,
+      0x01, 0xF7, 0x0B, 0xBD, 0xD7, 0x71, 0x94, 0x49, 0x68, 0x7E, 0x9A, 0x53,
+      0xB1, 0x6C, 0xA5, 0x36, 0x6A, 0x19, 0x10, 0x5A, 0x8B, 0xA0, 0x85, 0x89,
+      0xAD, 0x08, 0xDF, 0x13, 0x00, 0xEF, 0x4F, 0x92, 0x3B, 0xA9, 0xE7, 0x62,
+      0xA8, 0x2F, 0xB0, 0x9B, 0x76, 0xE1, 0x25, 0xF2, 0xF2, 0x74, 0xD6, 0x17,
+      0xBF, 0x30, 0xEA, 0xB4, 0x65, 0xEC, 0xF2, 0x4D, 0x37, 0x07, 0xAD, 0x30,
+      0x0D, 0x9A, 0xFC, 0x1C, 0xF1, 0xDC, 0x40, 0xEE, 0x7D, 0x4E, 0xEA, 0x6D,
+      0x15, 0x0E, 0x6F, 0x0A, 0x31, 0xDB, 0x9F, 0x8F, 0x92, 0xBA, 0x8E, 0xEE,
+      0xB3, 0x5D, 0x74, 0x45, 0x58, 0x9B, 0x04, 0x6B, 0xA7, 0x9E, 0xFE, 0x23,
+      0x11, 0x06, 0xCF, 0x0A, 0x75, 0x71, 0x2A, 0xB3, 0x92, 0x72, 0x4C, 0x53,
+      0xEF, 0xF9, 0xF5, 0x73, 0x3B, 0xEE, 0x0D, 0x6A, 0x44, 0xD0, 0xB6, 0xF5,
+      0x15, 0xD0, 0xF5, 0xE4, 0x0B, 0x1B, 0x1E, 0x17, 0xE6, 0x7A, 0xED, 0x3C,
+      0x81, 0xD0, 0x0A, 0xC4, 0x68, 0xA2, 0x8F, 0x84, 0x53, 0xD4, 0xB0, 0xDA,
+      0x80, 0x9E, 0x57, 0xD8, 0x23, 0xF2, 0x8D, 0x61, 0xED, 0x0B, 0x59, 0xA0,
+      0x8C, 0x62, 0x29, 0x72, 0xD9, 0x91, 0x79, 0xDA, 0x86, 0x36, 0xC4, 0x5F,
+      0x1C, 0xE8, 0xF6, 0x25, 0x2A, 0xC8, 0x6D, 0x91, 0xB5, 0xE9, 0x29, 0x97,
+      0x01, 0x4E, 0x3F, 0x50, 0x89, 0xE6, 0x8B, 0xC5, 0x2C, 0xED, 0x5D, 0xAE,
+      0x6D, 0x5B, 0x17, 0x5F, 0xE2, 0xD6, 0x19, 0x28, 0x46, 0x50, 0x59, 0x72,
+      0x4C, 0x83, 0x59, 0x02, 0xD7, 0x61, 0x2C, 0xDB, 0x69, 0xCD, 0xAC, 0x66,
+      0x4F, 0xC1, 0xC9, 0xCB, 0x11, 0x20, 0x3A, 0x8C, 0x7B, 0x71, 0x48, 0x6E,
+      0x97, 0xB7, 0xD1, 0xBC, 0x6A, 0x98, 0xF4, 0x93, 0xDC, 0xBE, 0xC8, 0xE6,
+      0x29, 0x55, 0x8E, 0xD3, 0x61, 0x09, 0x12, 0x93, 0xD1, 0xB5, 0xD2, 0x09,
+      0x6C, 0xEB, 0x9F, 0xC7, 0xAF, 0xEE, 0x71, 0xDB, 0x7C, 0xCF, 0xE4, 0x82,
+      0xB6, 0x8A, 0x19, 0x64, 0x29, 0xFF, 0x04, 0xD1, 0x59, 0x03, 0xE7, 0xA7,
+      0x5C, 0x7B, 0xB5, 0xF6, 0x22, 0xC3, 0x69, 0x71, 0x69, 0x45, 0x59, 0xFF,
+      0x07, 0xDF, 0xAA, 0x79, 0xE4, 0x1C, 0x36, 0x2B, 0x22, 0x64, 0x3C, 0xD3,
+      0x9B, 0xD9, 0xE1, 0xD3, 0xD6, 0xC2, 0xA3, 0x06, 0xB5, 0xF1, 0x10, 0x2C,
+      0x26, 0x6E, 0xEE, 0x67, 0xDC, 0xDA, 0xCF, 0x36, 0x69, 0x7A, 0x83, 0x6F,
+      0x20, 0x38, 0x38, 0xEC, 0x11, 0x03, 0x08, 0xC9, 0x0A, 0x3D, 0x01, 0x57,
+      0x0C, 0xB3, 0x66, 0x8A, 0xBA, 0x50, 0x34, 0x0E, 0x40, 0xF5, 0x4C, 0xFA,
+      0x6A, 0x9E, 0x88, 0x62, 0x53, 0x2F, 0x5F, 0x19, 0x84, 0x8A, 0xA1, 0x1F,
+      0xD3, 0x4F, 0xC8, 0x6B, 0x7F, 0xCB, 0x16, 0x37, 0xF4, 0xE5, 0xA1, 0xD0,
+      0x3A, 0xFC, 0xE4, 0x41, 0x24, 0xE4, 0xE4, 0x60, 0xB8, 0x4C, 0x63, 0x49,
+      0x6A, 0xDE, 0xD5, 0x58, 0x01, 0xDF, 0x25, 0x17, 0xA9, 0x0A, 0xB0, 0x61,
+      0xC8, 0xE6, 0x3A, 0xB6, 0xB1, 0x4B, 0xE1, 0x69, 0x4D, 0x6F, 0x38, 0x9D,
+      0xD8, 0x5F, 0x56, 0x39, 0xC5, 0x78, 0x3A, 0xFC, 0xA0, 0x14, 0x6E, 0x6A,
+      0x1E, 0xB0, 0xC4, 0x05, 0x63, 0xC1, 0x37, 0x01, 0x0D, 0xB6, 0x0B, 0xBC,
+      0x3D, 0x63, 0x74, 0xD6, 0xF3, 0xA8, 0x92, 0xDE, 0xBC, 0x06, 0x47, 0x01,
+      0xC6, 0x4B, 0xEC, 0xCB, 0x8E, 0x2C, 0x33, 0xB7, 0x40, 0xCC, 0x7E, 0xD4,
+      0x9D, 0x10, 0x8A, 0x8C, 0x46, 0x56, 0x81, 0x8D, 0xF5, 0xF7, 0xD9, 0x1E,
+      0xAA, 0xA4, 0x46, 0xAC, 0x6C, 0xCD, 0xE3, 0x0C, 0x6D, 0x3D, 0x1B, 0xF6,
+      0x6E, 0x4E, 0x3B, 0x7B, 0x6B, 0x81, 0xE3, 0xCB, 0x17, 0x22, 0x7F, 0x80,
+      0xDB, 0x00, 0x96, 0xE6, 0xBE, 0x7D, 0x85, 0x9C, 0x09, 0x71, 0x37, 0x49,
+      0xFC, 0xA2, 0x15, 0x30, 0xFE, 0x1A, 0x71, 0x6E, 0xBE, 0x32, 0x55, 0x04,
+      0x31, 0x9B, 0xD0, 0xEA, 0x2A, 0x7D, 0x77, 0x13, 0x60, 0x7C, 0xB6, 0x79,
+      0xB0, 0xA0, 0xB2, 0x26, 0x8D, 0x49, 0x3B, 0x67, 0xC0, 0x48, 0x18, 0x72,
+      0x17, 0x7F, 0xFD, 0x25, 0x93, 0xF3, 0xAC, 0xF6, 0x91, 0xCE, 0xE9, 0x9A,
+      0x36, 0xEC, 0xA7, 0x22, 0x57, 0x9E, 0xFA, 0xA5, 0x9A, 0xCC, 0x59, 0xEF,
+      0x8C, 0xEA, 0x91, 0x08, 0xE6, 0x20, 0xB0, 0x60, 0x56, 0xC1, 0x9D, 0x3C,
+      0x1E, 0xB9, 0x1E, 0x86, 0x34, 0xDE, 0x49, 0x57, 0x70, 0x6D, 0xFA, 0x8F,
+      0x9D, 0x0A, 0x9E, 0x0C, 0xD4, 0x09, 0x4F, 0x6B, 0x95, 0xA8, 0x3F, 0x11,
+      0x8A, 0x51, 0x3E, 0xBF, 0xE5, 0xE9, 0x9A, 0xEB, 0x88, 0xA2, 0x68, 0xE0,
+      0x09, 0x7F, 0xCC, 0x3C, 0x7A, 0xE2, 0x50, 0xB6, 0x81, 0x93, 0x3B, 0xBC,
+      0x2A, 0x8F, 0x53, 0x81, 0xF9, 0x4D, 0x15, 0x64, 0x34, 0xA8, 0x7E, 0x9E,
+      0xE3, 0x7E, 0x78, 0xC2, 0x7A, 0x0C, 0xDA, 0xEE, 0xA9, 0x81, 0x4B, 0xCB,
+      0x43, 0xDF, 0x53, 0x8D, 0xBE, 0x62, 0x8C, 0x80, 0x2C, 0x1A, 0x94, 0xE0,
+      0xCD, 0xDC, 0xD0, 0xCD, 0x5A, 0x0F, 0x82, 0x20, 0xDA, 0x97, 0xC2, 0x38,
+      0x39, 0x36, 0xA3, 0x39, 0x19, 0xFC, 0xDC, 0x11, 0xD7, 0x0E, 0xD4, 0x43,
+      0x7D, 0xD2, 0xD7, 0xC7, 0x3C, 0xD0, 0xC3, 0xBB, 0x90, 0xCA, 0x70, 0x70,
+      0x22, 0x8F, 0xE8, 0xD6, 0x4A, 0x1C, 0x9D, 0x56, 0xE6, 0xB3, 0x48, 0x30,
+      0xEF, 0x30, 0x0B, 0x5A, 0xA6, 0xEC, 0x6C, 0x78, 0xA5, 0x42, 0x5A, 0xE6,
+      0xF7, 0xAD, 0x0E, 0xFD, 0xD5, 0x27, 0xCF, 0x0A, 0xF8, 0xE0, 0x9B, 0x56,
+      0xE4, 0x95, 0xBE, 0x66, 0xF6, 0x65, 0xC6, 0x4B, 0x0A, 0x42, 0xC5, 0xC4,
+      0xB2, 0x46, 0x80, 0x48, 0x0A, 0xD2, 0xE5, 0xC1, 0x1D, 0x99, 0x1F, 0x7E,
+      0x3D, 0xA7, 0x59, 0xAE, 0xC8, 0x02, 0xF1, 0x76, 0xDD, 0xF1, 0x1E, 0xF7,
+      0x14, 0x69, 0xDC, 0x13, 0xB3, 0xA3, 0xE0, 0x36, 0x99, 0x51, 0x98, 0x58,
+      0xAC, 0x6F, 0xC6, 0x5C, 0x27, 0xFA, 0x4C, 0xEF, 0xDA, 0x09, 0xC8, 0x2E,
+      0x8F, 0x95, 0x8E, 0x01, 0x8D, 0xD5, 0x25, 0x5C, 0xA2, 0xF6, 0x28, 0xE0,
+      0xDA, 0x73, 0x91, 0xAB, 0xED, 0x6D, 0x37, 0x70, 0x55, 0x28, 0xAB, 0x22,
+      0xEC, 0x71, 0xDC, 0x88, 0x36, 0xD7, 0xFD, 0x46, 0x45, 0x94, 0x47, 0x03,
+      0xA5, 0x1C, 0xC7, 0x4D, 0x29, 0x70, 0x92, 0xFC, 0xE1, 0x39, 0xE8, 0x97,
+      0x6F, 0x8B, 0xE9, 0xC5, 0xF8, 0x63, 0x90, 0xB7, 0x4D, 0x40, 0x1A, 0x8C,
+      0x81, 0x53, 0x11, 0x22, 0x01, 0x13, 0x3D, 0x0C, 0x51, 0x7C, 0x6C, 0xE7,
+      0xA3, 0x8C, 0x08, 0x60, 0x69, 0xCE, 0x39, 0x71, 0xF1, 0xAD, 0x28, 0xF3,
+      0xE5, 0xD0, 0x1B, 0x56, 0xA4, 0x80, 0xB4, 0x17, 0xA0, 0x16, 0xAE, 0xA4,
+      0x63, 0x94, 0xCD, 0xF7, 0x64, 0x81, 0x29, 0x18, 0xD8, 0xAB, 0x05, 0x01,
+      0xD5, 0xD1, 0x8C, 0xE1, 0x3F, 0xBD, 0x3D, 0xE9, 0x1F, 0x50, 0x42, 0x15,
+      0xCC, 0xD0, 0xE2, 0xD1, 0x7B, 0x7E, 0x96, 0x3C, 0x86, 0x7F, 0x6F, 0x13,
+      0x21, 0x14, 0xE3, 0x64, 0x59, 0xFC, 0x5A, 0xF7, 0xCE, 0xE9, 0x9B, 0x78,
+      0x96, 0x73, 0xE5, 0x24, 0x13, 0x1F, 0x7D, 0xC7, 0x13, 0x60, 0x95, 0x1A,
+      0x99, 0x7A, 0x9C, 0xE5, 0x0D, 0xD5, 0xFA, 0xFC, 0x45, 0x21, 0x14, 0x44,
+      0x41, 0xC0, 0x6B, 0xB4, 0x1C, 0x79, 0xE8, 0xED, 0x53, 0x28, 0x5D, 0x13,
+      0x7D, 0x54, 0xF3, 0x25, 0xA6, 0xC2, 0xF2, 0xEF, 0x74, 0xE3, 0x4C, 0x0F,
+      0x87, 0x7A, 0x61, 0x4C, 0xE4, 0x5D, 0xC0, 0xAE, 0xDD, 0xF9, 0x5A, 0x0E,
+      0x2E, 0x4E, 0xDA, 0xE2, 0x9A, 0xF4, 0x11, 0xC9, 0xCC, 0x2A, 0xF9, 0x5C,
+      0x9E, 0xA9, 0xA9, 0x4A, 0x79, 0x61, 0xC8, 0x24, 0x6E, 0x65, 0x4F, 0xA2,
+      0x8F, 0x3D, 0x56, 0x8D, 0x5F, 0xEE, 0x93, 0x35, 0x2C, 0x2E, 0x0D, 0x60,
+      0xCC, 0xAF, 0x5B, 0x00, 0x09, 0x0A, 0xB6, 0xE7, 0xA5, 0x3A, 0xA0, 0x6A,
+      0x8C, 0xD3, 0x73, 0x7E, 0xBF, 0x1B, 0x65, 0xD6, 0x25, 0xBC, 0xF2, 0x20,
+      0xF7, 0x4D, 0xE2, 0x2D, 0x98, 0x71, 0xEF, 0xC3, 0x76, 0xBF, 0x08, 0x2D,
+      0x4B, 0x87, 0x2A, 0x30, 0x3C, 0x32, 0x42, 0x7A, 0x0C, 0x98, 0xBE, 0xCF,
+      0x58, 0x95, 0x9C, 0x9F, 0x9E, 0x2E, 0x88, 0x7D, 0xBC, 0x42, 0xAA, 0xB1,
+      0x65, 0x6A, 0xD1, 0x56, 0x37, 0xA6, 0xA8, 0xF4, 0xBF, 0x96, 0x34, 0x09,
+      0x54, 0x91, 0xF8, 0xC9, 0x92, 0x42, 0x91, 0x38, 0x91, 0x43, 0x7E, 0x6C,
+      0x5B, 0x50, 0xA2, 0x13, 0xDD, 0xE8, 0x0D, 0x21, 0x96, 0xBE, 0x12, 0xC3,
+      0x93, 0x7F, 0xE3, 0x23, 0x9B, 0xF6, 0x75, 0x9A, 0xBB, 0x8C, 0x1C, 0x94,
+      0x66, 0xF4, 0x2F, 0xBD, 0x53, 0x89, 0x4A, 0xE5, 0x2F, 0xB5, 0x33, 0x32,
+      0x14, 0x29, 0xFC, 0xE4, 0xFE, 0xC1, 0xDB, 0x35, 0x2C, 0x49, 0x58, 0x3A,
+      0x7D, 0x81, 0x7E, 0xAF, 0x62, 0x00, 0x08, 0x88, 0xEC, 0xB0, 0xEB, 0xFF,
+      0xEF, 0x69, 0xFF, 0x8E, 0x59, 0x0C, 0xFA, 0x25, 0xBE, 0xAB, 0x21, 0x60,
+      0x5B, 0x63, 0x5A, 0xBC, 0x2C, 0xA2, 0x36, 0x80, 0x78, 0x97, 0x25, 0xCF,
+      0x70, 0x0F, 0x55, 0x3C, 0x88, 0x35, 0x2F, 0x31, 0x61, 0x61, 0x54, 0x87,
+      0x3D, 0x18, 0xB6, 0xC6, 0xEB, 0x51, 0x9F, 0xC6, 0x39, 0xB0, 0x70, 0xFD,
+      0x67, 0xF8, 0x6A, 0xAB, 0x62, 0x34, 0x9D, 0xBF, 0xFA, 0x89, 0xF9, 0x30,
+      0x51, 0xA7, 0xC7, 0xB7, 0xBD, 0x16, 0x1F, 0xCD, 0x73, 0x67, 0x2C, 0xEE,
+      0xF5, 0x9A, 0x9B, 0xB7, 0xF5, 0x71, 0xEA, 0xBE, 0x25, 0x70, 0xC5, 0xBF,
+      0x31, 0xEC, 0xAA, 0x1F, 0x9C, 0xA7, 0xA9, 0xC6, 0xD3, 0x1E, 0xA5, 0xFB,
+      0x7C, 0x97, 0x9C, 0xDD, 0x26, 0x13, 0x89, 0x7E, 0x7D, 0x15, 0x03, 0xFB,
+      0x0C, 0x19, 0xAD, 0xDC, 0xFB, 0x3A, 0x63, 0xE2, 0x18, 0x5F, 0xC4, 0x10,
+      0x18, 0x38, 0xDA, 0x66, 0xCC, 0xE2, 0xD3, 0xD9, 0xFF, 0xB4, 0x77, 0x46,
+      0xC2, 0x00, 0x3E, 0xDD, 0x86, 0xC2, 0xF8, 0xC3,
+    },
+
+    .dk = {
+      0x0F, 0xEA, 0x26, 0xC4, 0xA5, 0x44, 0xA5, 0x14, 0x44, 0x4A, 0x97, 0x1B,
+      0x5C, 0x5A, 0x82, 0x58, 0x27, 0xC0, 0x9D, 0x42, 0x46, 0x9E, 0x59, 0x34,
+      0x4C, 0xF2, 0xAC, 0x06, 0xA2, 0x8D, 0x33, 0xE9, 0xA0, 0x12, 0xCA, 0xA3,
+      0x71, 0x7B, 0x2C, 0x3B, 0x29, 0x0A, 0x07, 0x15, 0x82, 0x11, 0x09, 0xC4,
+      0xCC, 0xEA, 0xC4, 0x9F, 0x34, 0x1D, 0xAD, 0xD3, 0x77, 0xD4, 0x2A, 0x37,
+      0x26, 0x19, 0x16, 0xAC, 0x7B, 0xB9, 0xE4, 0x1C, 0x09, 0x6C, 0xA8, 0x18,
+      0x1C, 0xF5, 0x83, 0x50, 0x57, 0x3F, 0x60, 0x56, 0x84, 0xA1, 0xBC, 0xA5,
+      0x3D, 0x88, 0x25, 0x74, 0x53, 0xC5, 0x35, 0x16, 0x5C, 0x4E, 0xD7, 0x2A,
+      0x9F, 0xF0, 0x56, 0x45, 0x71, 0x29, 0x01, 0xF6, 0x6C, 0x10, 0xD0, 0x4F,
+      0x5E, 0xB4, 0xA2, 0xEC, 0x37, 0x72, 0xE9, 0x49, 0x8E, 0x9D, 0xC4, 0x4B,
+      0xBD, 0xAB, 0x71, 0xBB, 0xDB, 0xBC, 0xFC, 0x85, 0xB8, 0x01, 0x36, 0x30,
+      0x89, 0xEA, 0x60, 0xEF, 0xE5, 0x86, 0xE1, 0xE2, 0x18, 0x0C, 0x38, 0xB2,
+      0xE7, 0xB4, 0xA6, 0x3E, 0xD6, 0x07, 0x49, 0x0B, 0xC5, 0xBA, 0x7A, 0x58,
+      0xAC, 0x3B, 0x1C, 0x0E, 0x43, 0x96, 0x72, 0x00, 0xC7, 0x98, 0x02, 0x90,
+      0xEB, 0xF4, 0x11, 0x82, 0x84, 0x39, 0xEE, 0x8C, 0x8E, 0x61, 0x29, 0xB2,
+      0x58, 0xE1, 0x3D, 0x12, 0x7C, 0xB1, 0x5A, 0x00, 0xCB, 0x7B, 0x46, 0x8D,
+      0x40, 0x23, 0xB5, 0x09, 0x7B, 0x9B, 0x2E, 0x50, 0x9B, 0x50, 0xE8, 0x90,
+      0xB6, 0x3B, 0x47, 0x07, 0x48, 0x79, 0x61, 0xA2, 0x9E, 0x18, 0x65, 0x6D,
+      0xD2, 0xD0, 0x9E, 0x6A, 0x3B, 0x88, 0x43, 0xE2, 0x84, 0x3C, 0xB4, 0x85,
+      0x4F, 0x18, 0x11, 0x6E, 0x71, 0x7D, 0xDB, 0x03, 0x55, 0xA7, 0x51, 0x35,
+      0xB2, 0x02, 0x6A, 0x75, 0x2C, 0x8E, 0x7F, 0xF1, 0x8E, 0x0F, 0x4A, 0x39,
+      0x1C, 0xA3, 0x7F, 0x5B, 0x2B, 0xCC, 0x88, 0xC9, 0x99, 0xB4, 0xE4, 0x77,
+      0x50, 0xC4, 0x65, 0x47, 0xEC, 0x07, 0x6A, 0xC2, 0x15, 0x30, 0x72, 0x2C,
+      0xFA, 0xF9, 0x67, 0x99, 0x61, 0xC9, 0x86, 0x88, 0xC3, 0x56, 0x2B, 0x17,
+      0xCC, 0x80, 0x81, 0x46, 0xA1, 0x25, 0x72, 0xC9, 0xB5, 0xFF, 0x15, 0x1A,
+      0xAB, 0x54, 0x41, 0x09, 0x01, 0x84, 0x0E, 0x26, 0x42, 0x39, 0x87, 0xC5,
+      0xE0, 0xD2, 0x8E, 0xF2, 0xEA, 0x53, 0xEA, 0xE5, 0x95, 0x1E, 0x62, 0xAC,
+      0x7B, 0xD5, 0x18, 0xB9, 0x83, 0x0A, 0x4D, 0xBC, 0xCE, 0x6A, 0x93, 0x65,
+      0x91, 0xEA, 0x8E, 0xF2, 0x75, 0x07, 0x8A, 0x09, 0x73, 0x85, 0x2A, 0x4D,
+      0x13, 0x04, 0x95, 0xD0, 0x0B, 0x3F, 0x21, 0x85, 0x15, 0x99, 0x90, 0x1C,
+      0xFD, 0xF9, 0x36, 0x83, 0x44, 0xC8, 0x10, 0x42, 0x2F, 0xFE, 0xA0, 0x8A,
+      0xED, 0xCB, 0x1A, 0x7F, 0xD3, 0x62, 0x5F, 0x26, 0xB0, 0x34, 0x81, 0x2F,
+      0xA3, 0x07, 0xAB, 0x2C, 0x20, 0x94, 0x54, 0x65, 0x54, 0x6D, 0x31, 0xA3,
+      0x41, 0xA4, 0x01, 0x3D, 0x81, 0x89, 0xB4, 0xF5, 0x0F, 0xE8, 0x60, 0xA6,
+      0x68, 0xDA, 0xC7, 0xB1, 0x03, 0x44, 0x1E, 0x96, 0x1F, 0xCE, 0xB0, 0xC5,
+      0xB1, 0xF3, 0x4D, 0xF2, 0xE5, 0x98, 0xC6, 0xD8, 0xCF, 0x60, 0xB8, 0x64,
+      0x15, 0x0C, 0x70, 0x3D, 0x2B, 0xBE, 0xAC, 0x9B, 0x00, 0x1A, 0xA2, 0x10,
+      0x81, 0x47, 0xAE, 0x6B, 0x8A, 0xAE, 0x2C, 0x77, 0x91, 0xDB, 0xE9, 0x56,
+      0xC1, 0xF9, 0xB2, 0x04, 0x7A, 0x15, 0x76, 0x09, 0x43, 0x87, 0x06, 0x4C,
+      0x3A, 0x80, 0x1B, 0x0D, 0x89, 0xC9, 0x96, 0xA5, 0xCF, 0xA3, 0xB0, 0x12,
+      0xC1, 0x44, 0x38, 0xB9, 0xF3, 0x53, 0x0C, 0x0C, 0x5F, 0xA9, 0x38, 0x9F,
+      0x10, 0xFB, 0x3E, 0xF1, 0xE2, 0x01, 0x33, 0x38, 0x41, 0x5F, 0x7B, 0x1D,
+      0xB4, 0x11, 0xAD, 0xF9, 0x1C, 0x73, 0xB6, 0x45, 0x6B, 0x68, 0xAB, 0x7C,
+      0xFC, 0x7B, 0xC9, 0x29, 0xE4, 0x4E, 0x58, 0xEB, 0x34, 0xCA, 0x10, 0xAE,
+      0x31, 0xF0, 0x3B, 0x2C, 0x3B, 0xA6, 0xCC, 0xA2, 0x7E, 0xB3, 0x5C, 0xB1,
+      0x37, 0x9A, 0x13, 0x0A, 0xAC, 0x87, 0xE3, 0xB8, 0x75, 0xCF, 0xE2, 0x53,
+      0xAF, 0x03, 0xC4, 0xBD, 0x78, 0x3F, 0x18, 0xC5, 0xA2, 0xF8, 0x49, 0x2B,
+      0xBF, 0x7C, 0x56, 0x87, 0x55, 0x98, 0xB1, 0xB6, 0x3F, 0xE6, 0xCB, 0x06,
+      0x94, 0xD0, 0x48, 0x0C, 0xA1, 0xC8, 0xF8, 0x86, 0x7C, 0x11, 0xB8, 0xBF,
+      0x33, 0xA3, 0x2C, 0x20, 0xB7, 0x9F, 0x9C, 0xA4, 0x86, 0x85, 0x86, 0x10,
+      0xB1, 0x97, 0x83, 0xBE, 0xF7, 0x84, 0xBF, 0x6B, 0x0F, 0x85, 0x8C, 0x1A,
+      0x79, 0x11, 0x30, 0xDA, 0x69, 0x57, 0xF2, 0x12, 0x23, 0x4E, 0xC9, 0x86,
+      0x79, 0x81, 0x4B, 0xE8, 0x39, 0xBF, 0x11, 0x0B, 0x45, 0xC1, 0xC8, 0x83,
+      0xEC, 0xDC, 0x3D, 0xB3, 0xF8, 0x22, 0xA4, 0xF7, 0xC1, 0x25, 0x56, 0x6E,
+      0xD1, 0x66, 0x35, 0x68, 0xC8, 0x41, 0x3C, 0xD0, 0x1C, 0x22, 0x46, 0x7A,
+      0xD5, 0x20, 0x1A, 0x0A, 0xDC, 0x76, 0x34, 0x35, 0xA2, 0xCB, 0x05, 0xCD,
+      0xC4, 0x70, 0x72, 0xA9, 0x43, 0x70, 0xF5, 0xB4, 0x34, 0xF7, 0x5C, 0x07,
+      0x8B, 0x41, 0x59, 0x93, 0xE8, 0x54, 0xDD, 0xE1, 0x7B, 0xBF, 0x86, 0xC0,
+      0xC6, 0xC9, 0xA3, 0x24, 0x85, 0x32, 0xD9, 0xC2, 0x13, 0x9E, 0xF3, 0xC7,
+      0x5A, 0x9B, 0xC6, 0x93, 0x78, 0x10, 0x60, 0xDC, 0xAE, 0x2F, 0xFA, 0x58,
+      0xD9, 0xCC, 0x54, 0x8F, 0x19, 0xC1, 0xCE, 0x53, 0x64, 0x88, 0x0C, 0x7F,
+      0xB5, 0x0C, 0xC7, 0xBE, 0x40, 0x53, 0x12, 0xD6, 0xCC, 0x94, 0x03, 0x76,
+      0x18, 0xF3, 0x88, 0xC4, 0x90, 0xAF, 0x8F, 0x61, 0xB9, 0xB4, 0x04, 0x4C,
+      0xF7, 0x5A, 0x5C, 0xD7, 0x1A, 0x15, 0x85, 0x3B, 0x5F, 0xD6, 0x22, 0x4C,
+      0x6B, 0x95, 0x90, 0xE5, 0x85, 0x01, 0xD2, 0x81, 0x42, 0x00, 0xC9, 0x19,
+      0xF2, 0x83, 0xCC, 0x2B, 0x49, 0xAD, 0x8B, 0xFA, 0x5B, 0xAA, 0xA2, 0x97,
+      0x7F, 0x03, 0x82, 0x3F, 0x60, 0x9E, 0xFB, 0x24, 0x26, 0xF9, 0x36, 0xC3,
+      0x02, 0x87, 0x09, 0x7B, 0xD6, 0xB7, 0xBD, 0xC6, 0x78, 0x62, 0x85, 0x88,
+      0x83, 0xDB, 0x59, 0x54, 0x08, 0x04, 0x29, 0xB9, 0xCD, 0x02, 0xCA, 0x96,
+      0xBC, 0x1C, 0xCB, 0xDB, 0x51, 0x21, 0xDF, 0xF8, 0x05, 0xB0, 0x82, 0x4A,
+      0xEE, 0x99, 0x9E, 0x2B, 0xBB, 0x2D, 0x82, 0x35, 0x3E, 0x6D, 0x3A, 0x30,
+      0x07, 0x92, 0x78, 0x10, 0x58, 0xC5, 0x6E, 0xF7, 0x09, 0x8A, 0xB3, 0x58,
+      0x4E, 0xA0, 0x62, 0x1E, 0x20, 0x33, 0x7D, 0x3A, 0x97, 0x5D, 0x93, 0xCF,
+      0x32, 0x58, 0x6D, 0x6A, 0x71, 0xA2, 0xC4, 0xBB, 0xB2, 0x02, 0xB8, 0x53,
+      0xFF, 0x09, 0xC4, 0x07, 0xB4, 0x3B, 0x1C, 0x19, 0xB1, 0xC4, 0xCC, 0xB8,
+      0x21, 0x48, 0x2D, 0xDD, 0x27, 0x37, 0x81, 0x77, 0xAA, 0x7F, 0x61, 0x78,
+      0x49, 0x7C, 0x3F, 0xBA, 0x79, 0x71, 0x53, 0x84, 0x8C, 0x5D, 0x0B, 0x1F,
+      0x40, 0xB5, 0x4E, 0x9D, 0x51, 0x93, 0x90, 0x4A, 0x30, 0x3F, 0x72, 0x5F,
+      0x0C, 0xCC, 0x66, 0xC6, 0xCC, 0xB1, 0x58, 0x85, 0x06, 0x05, 0x34, 0x6D,
+      0xB4, 0x2B, 0x87, 0x7D, 0xD9, 0xCE, 0xA5, 0xF6, 0x9C, 0x12, 0xB2, 0x21,
+      0xC7, 0xEC, 0x51, 0x00, 0xF7, 0x65, 0x87, 0xB9, 0x83, 0x4B, 0xC0, 0xC6,
+      0x41, 0x53, 0x8F, 0x83, 0xE8, 0x5B, 0xB3, 0x09, 0x0D, 0xBA, 0xFB, 0xCB,
+      0x0B, 0x71, 0x18, 0xFF, 0x7C, 0x97, 0xE9, 0x52, 0x63, 0x15, 0x70, 0x41,
+      0xF8, 0xAC, 0x40, 0x52, 0xD0, 0x40, 0x35, 0x00, 0xCC, 0x4F, 0x68, 0x94,
+      0x55, 0x97, 0x4C, 0xEB, 0x5B, 0x07, 0x67, 0x90, 0xA0, 0x50, 0xE0, 0xB3,
+      0xF6, 0x77, 0x2A, 0x77, 0x67, 0x54, 0x1F, 0xF6, 0xB6, 0x7B, 0x2A, 0x1D,
+      0x54, 0x07, 0x82, 0x06, 0x47, 0x68, 0x8F, 0x36, 0x0A, 0x2B, 0x01, 0x47,
+      0x37, 0x67, 0x71, 0x29, 0x09, 0xB2, 0x27, 0x65, 0x8B, 0xE6, 0x45, 0x78,
+      0x48, 0xC4, 0x40, 0x75, 0x71, 0x68, 0x06, 0x18, 0x88, 0x58, 0x9C, 0xB0,
+      0x5A, 0x99, 0x9E, 0x55, 0x49, 0x67, 0x91, 0xB1, 0x1A, 0xF2, 0x06, 0x6B,
+      0xB8, 0xCA, 0x74, 0x60, 0x51, 0xC4, 0x68, 0x0A, 0x0B, 0xC0, 0x73, 0x82,
+      0x41, 0x2A, 0xB8, 0xB8, 0xA3, 0x19, 0xDB, 0xC7, 0x94, 0xDD, 0xC6, 0x94,
+      0xBF, 0xDB, 0x81, 0x3F, 0x80, 0xB5, 0x8B, 0x72, 0x21, 0x8D, 0xD6, 0x4D,
+      0xFC, 0xDB, 0xA1, 0xAB, 0x48, 0xA9, 0x4F, 0x7A, 0x8D, 0xCA, 0x92, 0x66,
+      0xCD, 0x15, 0xA4, 0x2D, 0x9B, 0xA5, 0xFB, 0x67, 0x67, 0xA9, 0x55, 0x52,
+      0x6C, 0x05, 0x0D, 0xE2, 0x59, 0x8B, 0x11, 0x2A, 0x2B, 0x10, 0x3A, 0xA2,
+      0xD1, 0xF0, 0x60, 0x6F, 0xE6, 0x8A, 0x55, 0x19, 0x1E, 0xF5, 0x3B, 0x30,
+      0x2F, 0x7C, 0x19, 0x22, 0xC3, 0x01, 0xCE, 0xEA, 0x98, 0x9A, 0x62, 0x13,
+      0x40, 0x90, 0xA8, 0x60, 0x76, 0x77, 0x6F, 0xA4, 0x46, 0x27, 0xB7, 0x31,
+      0x63, 0x86, 0x57, 0x6A, 0x67, 0x81, 0x75, 0xB2, 0x18, 0xE6, 0xF4, 0x82,
+      0xB5, 0x2B, 0xC6, 0x02, 0x7B, 0xBE, 0xB3, 0x46, 0x98, 0xB9, 0x80, 0x2F,
+      0xD6, 0x76, 0x34, 0xC1, 0xA9, 0x4D, 0xD4, 0xC5, 0xCD, 0x49, 0xEC, 0x6E,
+      0x2D, 0x66, 0x5F, 0x72, 0x77, 0x81, 0xD1, 0xEC, 0x10, 0xAA, 0xF6, 0x6A,
+      0xD8, 0x27, 0x9B, 0x9B, 0xF2, 0x4C, 0x99, 0xE8, 0x75, 0xEC, 0x94, 0x35,
+      0x2D, 0x96, 0x05, 0xFA, 0x30, 0xCB, 0x3D, 0x8B, 0x26, 0x86, 0xB0, 0x39,
+      0x71, 0xA7, 0x60, 0xB3, 0x05, 0x3B, 0x34, 0x34, 0x6D, 0x0D, 0x71, 0xB4,
+      0x4D, 0x8B, 0x7D, 0x2E, 0xA6, 0x1A, 0x5C, 0x10, 0xA9, 0x33, 0xD3, 0x8B,
+      0xA4, 0x83, 0x36, 0x71, 0x11, 0x74, 0x54, 0x61, 0x47, 0xD4, 0x4B, 0x29,
+      0x14, 0xF8, 0x56, 0x89, 0xD9, 0xC1, 0xBF, 0x00, 0x37, 0xC7, 0xF7, 0x37,
+      0x7C, 0xD9, 0x30, 0xCF, 0xF6, 0x0F, 0x84, 0xB0, 0xA2, 0x00, 0x5D, 0x3E,
+      0xFE, 0x55, 0xC7, 0x31, 0x1B, 0x1B, 0x61, 0x32, 0x76, 0x8B, 0x52, 0x90,
+      0xD8, 0x36, 0xB8, 0x2B, 0xC4, 0x43, 0xC3, 0x2B, 0x4F, 0xEC, 0x96, 0x02,
+      0x19, 0xDB, 0x21, 0x32, 0xF7, 0x99, 0x0A, 0xD6, 0x84, 0xA3, 0x72, 0x9F,
+      0x3D, 0x1A, 0x2C, 0xEA, 0x3A, 0x1F, 0xE4, 0xB1, 0x26, 0x75, 0xC4, 0x89,
+      0xEF, 0x33, 0x19, 0x8F, 0x01, 0xA1, 0x06, 0x80, 0x6E, 0xFC, 0xE8, 0x92,
+      0x1D, 0xC4, 0x6E, 0x97, 0x1C, 0x0A, 0x0A, 0x56, 0x4A, 0xF9, 0xE5, 0x6C,
+      0xA7, 0x27, 0xA7, 0x64, 0x1C, 0x56, 0x8C, 0x95, 0xAA, 0x59, 0x56, 0x91,
+      0x0B, 0x28, 0x84, 0x29, 0xF8, 0x0E, 0xE7, 0x22, 0x6E, 0x9D, 0xC4, 0x06,
+      0x7E, 0x34, 0x94, 0x4F, 0x06, 0x92, 0x6D, 0x44, 0xB2, 0xCF, 0x87, 0x64,
+      0xF7, 0x13, 0x59, 0x3B, 0x44, 0x29, 0xF8, 0x2B, 0x8F, 0xCC, 0x60, 0x77,
+      0x98, 0x91, 0x6B, 0x81, 0x5B, 0x90, 0x98, 0x33, 0x0E, 0xC3, 0x34, 0x29,
+      0x0D, 0xB8, 0xC0, 0x4B, 0x08, 0x3D, 0xF3, 0xCA, 0x10, 0xCE, 0x35, 0x75,
+      0x07, 0x30, 0x28, 0xE9, 0x94, 0xA2, 0x5B, 0xE7, 0x28, 0x78, 0x49, 0x2F,
+      0xE1, 0xB6, 0x96, 0xBA, 0x5C, 0xB1, 0xA7, 0x73, 0x19, 0x3A, 0x3B, 0x28,
+      0xA4, 0xF4, 0x40, 0xAE, 0x58, 0x2D, 0xC7, 0xC2, 0x4F, 0xE7, 0x45, 0x1D,
+      0x66, 0x76, 0x23, 0x2B, 0xB9, 0x61, 0xC5, 0x04, 0x0C, 0x9E, 0x52, 0x01,
+      0xAA, 0xF3, 0xCD, 0x4D, 0xE4, 0x0A, 0xD5, 0xA9, 0x57, 0x8A, 0xF5, 0x28,
+      0x10, 0xB5, 0x93, 0xE9, 0x81, 0x5E, 0x23, 0xF6, 0x3F, 0x56, 0x40, 0x61,
+      0xA4, 0x84, 0x07, 0x21, 0x3A, 0xA1, 0xB0, 0x90, 0x8F, 0x4B, 0x17, 0x4F,
+      0x86, 0xD5, 0x73, 0xFA, 0x04, 0x38, 0x64, 0x98, 0xBE, 0x68, 0x39, 0x8E,
+      0x8D, 0x72, 0x0D, 0x27, 0x81, 0x11, 0xD8, 0xB1, 0x73, 0x03, 0x60, 0x2A,
+      0x96, 0xE3, 0x5F, 0x56, 0xFB, 0x25, 0x17, 0x3C, 0x4F, 0x4A, 0x03, 0xCA,
+      0x2A, 0xC9, 0xBF, 0x79, 0xDC, 0xAB, 0x76, 0x4B, 0xCE, 0x44, 0x10, 0x40,
+      0x1E, 0x10, 0x13, 0xE6, 0x52, 0x8C, 0xCC, 0x51, 0x13, 0x35, 0x85, 0x77,
+      0xDA, 0x83, 0x75, 0xE0, 0x23, 0x43, 0x10, 0x8C, 0x29, 0x24, 0xD2, 0x55,
+      0x1E, 0x5C, 0xC5, 0xA1, 0xB0, 0x4D, 0xEF, 0x88, 0x32, 0x4D, 0x85, 0x4F,
+      0xC9, 0x2C, 0x4A, 0xDF, 0x7C, 0x23, 0x01, 0x33, 0x7E, 0x45, 0x20, 0xBF,
+      0xC3, 0x65, 0x56, 0x6F, 0x66, 0x09, 0x2E, 0x36, 0x7A, 0xE6, 0x06, 0x12,
+      0x74, 0x46, 0x53, 0xC1, 0xEB, 0x47, 0xF0, 0x82, 0x09, 0x51, 0xA2, 0xA1,
+      0x4C, 0x42, 0x59, 0x09, 0x34, 0x0D, 0x87, 0x27, 0x18, 0x8E, 0xAA, 0x08,
+      0xE4, 0x86, 0x78, 0x98, 0x48, 0x76, 0xD0, 0x00, 0x8D, 0xAE, 0x99, 0x01,
+      0x5B, 0x36, 0x63, 0xFD, 0xCB, 0x72, 0x57, 0x41, 0x53, 0x0B, 0xC3, 0x89,
+      0x5B, 0x11, 0x62, 0x0C, 0xE3, 0xB4, 0x17, 0xA3, 0x20, 0xE1, 0x88, 0x13,
+      0xB9, 0x9C, 0x23, 0x5A, 0xC0, 0x6F, 0x55, 0x60, 0x0F, 0x98, 0x38, 0x82,
+      0xBF, 0xF0, 0x02, 0x36, 0x10, 0x7B, 0x50, 0x42, 0x54, 0x5B, 0x6B, 0x77,
+      0x58, 0x68, 0xAE, 0xFB, 0x79, 0xB5, 0x95, 0x59, 0x69, 0x02, 0xC6, 0x9B,
+      0x9E, 0xCA, 0x3D, 0x35, 0x8C, 0x61, 0xFE, 0xE0, 0x36, 0xD2, 0x18, 0xAC,
+      0x43, 0xBA, 0x3F, 0x52, 0xC0, 0x6A, 0x8F, 0x88, 0x1A, 0x7E, 0xD7, 0x03,
+      0x86, 0x14, 0x2C, 0xBA, 0xC5, 0xCC, 0x04, 0xFC, 0xC3, 0x1E, 0x16, 0x27,
+      0x76, 0x51, 0xCE, 0x2D, 0xCC, 0x50, 0x14, 0xF6, 0xBA, 0x5A, 0x91, 0x5C,
+      0x13, 0x38, 0x83, 0x4E, 0xF4, 0x74, 0xB6, 0x71, 0x59, 0x13, 0xBC, 0x7A,
+      0x4E, 0x59, 0x3C, 0x68, 0x87, 0x66, 0xAD, 0xD7, 0x06, 0x98, 0xB3, 0x7E,
+      0x06, 0xE5, 0x39, 0x15, 0xF3, 0x85, 0x38, 0x8C, 0x25, 0xC4, 0x26, 0x5E,
+      0x1C, 0xB4, 0x4F, 0xE3, 0xD0, 0x19, 0xD1, 0x21, 0xAE, 0x4C, 0x32, 0x43,
+      0x4F, 0x37, 0xB0, 0xA4, 0xCB, 0x69, 0xC7, 0xCC, 0x95, 0x70, 0x73, 0x50,
+      0xC3, 0x49, 0x3D, 0x0F, 0xB1, 0x1C, 0xD4, 0xD0, 0x9F, 0x29, 0xDC, 0x56,
+      0xC0, 0x7B, 0xC8, 0xEB, 0x0B, 0xD0, 0x08, 0x2B, 0x41, 0x44, 0x21, 0x45,
+      0x66, 0x3C, 0x21, 0xAB, 0x43, 0x34, 0x67, 0xB9, 0x5E, 0xC2, 0x47, 0x84,
+      0x23, 0xC1, 0x8B, 0xF2, 0xEC, 0x70, 0x3E, 0xFB, 0xA2, 0x8C, 0xDA, 0xBD,
+      0x42, 0xB7, 0xB8, 0x33, 0x15, 0x0D, 0x6D, 0xA2, 0x5E, 0xB0, 0x0A, 0x83,
+      0x28, 0x90, 0x2E, 0x2D, 0x08, 0x9B, 0x55, 0xD6, 0x9A, 0xAD, 0x9A, 0x94,
+      0xD8, 0x18, 0x26, 0x4C, 0x54, 0xB0, 0x4D, 0x61, 0x4D, 0x14, 0x7A, 0x30,
+      0xAB, 0xFC, 0x03, 0xD9, 0x92, 0x9D, 0x96, 0xBA, 0x7F, 0x81, 0x86, 0x5D,
+      0xA3, 0x53, 0xC4, 0x54, 0xBA, 0x7A, 0xA7, 0x88, 0x1A, 0xB9, 0x74, 0xC1,
+      0xB8, 0xF0, 0x83, 0x1E, 0x79, 0xC4, 0x41, 0x86, 0x64, 0xE9, 0x53, 0xA5,
+      0x4D, 0xE9, 0x32, 0x13, 0x69, 0x72, 0x81, 0x34, 0x1D, 0x37, 0xF5, 0x08,
+      0xE8, 0xCB, 0xAE, 0x3D, 0x81, 0x85, 0x05, 0x45, 0x67, 0xDE, 0xFC, 0x8E,
+      0x3B, 0xBC, 0xAA, 0x42, 0x47, 0x90, 0x7C, 0x48, 0x3B, 0x8F, 0x1B, 0x84,
+      0xB3, 0x24, 0xC1, 0xA7, 0xCA, 0x84, 0x42, 0xDB, 0x6B, 0x7B, 0x12, 0x8C,
+      0x83, 0x13, 0xBE, 0x1F, 0xE2, 0x57, 0x91, 0x20, 0x9B, 0x86, 0x4A, 0x3E,
+      0x1A, 0x61, 0x8D, 0x56, 0xD7, 0x10, 0xD6, 0xF3, 0xBF, 0x55, 0x95, 0x10,
+      0x16, 0x7C, 0x46, 0x4C, 0x6B, 0x9B, 0x8B, 0xC4, 0x90, 0xB8, 0xE0, 0x39,
+      0x25, 0xD0, 0x3D, 0x0E, 0xEB, 0x5D, 0x78, 0x17, 0x94, 0x28, 0xBB, 0x80,
+      0xD3, 0xFB, 0x14, 0x88, 0x40, 0x70, 0x9C, 0x41, 0x14, 0x7A, 0x68, 0x6F,
+      0xC9, 0xBC, 0xBD, 0xCD, 0xF7, 0xC7, 0xEA, 0x7C, 0x30, 0xFB, 0x64, 0x0F,
+      0xF0, 0x5B, 0x75, 0x39, 0xAB, 0xAB, 0x70, 0x89, 0x29, 0x08, 0xE9, 0x3C,
+      0xC9, 0xC3, 0x47, 0xF8, 0xAC, 0x88, 0x9E, 0x56, 0x46, 0x8A, 0x13, 0x5B,
+      0x99, 0x75, 0x47, 0x38, 0xE1, 0x5F, 0x4E, 0x67, 0x7D, 0xF3, 0x75, 0xBF,
+      0x1B, 0x43, 0x60, 0x6A, 0x2C, 0x47, 0x38, 0x0B, 0x10, 0xA0, 0xC1, 0x4C,
+      0x28, 0x58, 0x3C, 0x83, 0x31, 0x1A, 0x28, 0x54, 0xB2, 0xA9, 0x93, 0x1F,
+      0xD6, 0x60, 0x86, 0xC1, 0x07, 0x49, 0xF3, 0x34, 0x57, 0x7F, 0xD7, 0x0B,
+      0x51, 0xB9, 0x50, 0x60, 0x07, 0x51, 0x99, 0x31, 0x9B, 0x3F, 0x7C, 0xB5,
+      0xB2, 0x37, 0x30, 0x2C, 0x37, 0x0A, 0x23, 0x17, 0x5E, 0x4E, 0x01, 0x3C,
+      0x56, 0x28, 0x1B, 0xAF, 0xE2, 0xBE, 0x9F, 0x82, 0x5A, 0x30, 0x66, 0xAB,
+      0x8B, 0xBA, 0x57, 0x93, 0xE2, 0x1E, 0x7A, 0x48, 0x97, 0x8C, 0xF6, 0x0C,
+      0x09, 0x1B, 0x1F, 0x80, 0xC0, 0xC2, 0x38, 0x14, 0xA3, 0x0F, 0x77, 0x60,
+      0x60, 0x1A, 0xCE, 0xAB, 0xB1, 0x21, 0x52, 0x00, 0x94, 0x0F, 0xFA, 0x15,
+      0x22, 0x72, 0x09, 0x6D, 0x45, 0x8D, 0x00, 0xDD, 0x03, 0x9F, 0x23, 0x6B,
+      0x27, 0x27, 0xB5, 0x88, 0xC6, 0x22, 0x04, 0xE7, 0x9C, 0x45, 0x16, 0x81,
+      0xDF, 0xE4, 0x10, 0xEE, 0xC4, 0x2B, 0x74, 0x94, 0x5A, 0xEC, 0x03, 0x13,
+      0xA3, 0x91, 0x94, 0x2A, 0xE1, 0xB1, 0x22, 0x17, 0x4D, 0xBE, 0x59, 0xAB,
+      0x1E, 0x39, 0x0C, 0xD6, 0x49, 0x41, 0x43, 0x6C, 0x75, 0xA9, 0x32, 0x3C,
+      0x69, 0xA6, 0x41, 0x88, 0x08, 0x70, 0xFB, 0xB2, 0x80, 0xB3, 0xB3, 0x7B,
+      0x3B, 0xD9, 0x82, 0xB8, 0x29, 0x55, 0x62, 0x0B, 0x07, 0x83, 0xB8, 0x2E,
+      0x89, 0x61, 0xA4, 0x04, 0x3B, 0xC7, 0xF6, 0x6C, 0x0E, 0xF2, 0x5A, 0x5E,
+      0xD1, 0x53, 0x26, 0xF8, 0x81, 0x6E, 0x5E, 0xA4, 0x16, 0x7E, 0xE8, 0xBF,
+      0x66, 0x66, 0x45, 0x1D, 0x31, 0x5B, 0x2C, 0x75, 0x14, 0x41, 0x17, 0x2C,
+      0x27, 0x83, 0x00, 0x26, 0x82, 0x61, 0xC7, 0x8C, 0x6F, 0x0C, 0x46, 0x56,
+      0x27, 0x79, 0xB3, 0xA1, 0x19, 0x6F, 0x87, 0x83, 0x5F, 0x79, 0xFC, 0xB7,
+      0xE0, 0xCB, 0xA1, 0x53, 0x36, 0xCC, 0x83, 0xE1, 0x56, 0xC5, 0x02, 0x28,
+      0x87, 0xA8, 0x09, 0x86, 0xB4, 0x9C, 0x1B, 0x57, 0x65, 0x94, 0xA2, 0x31,
+      0x42, 0x62, 0x4A, 0xBF, 0x52, 0x48, 0x22, 0x41, 0x8C, 0x61, 0x01, 0x90,
+      0x52, 0x62, 0x80, 0x65, 0x72, 0x49, 0x4D, 0x37, 0x53, 0xC0, 0x62, 0x81,
+      0xE7, 0xF1, 0x7E, 0x0D, 0x79, 0x6C, 0xD7, 0x76, 0x7F, 0xDC, 0xE9, 0x01,
+      0xFE, 0x17, 0x12, 0xA0, 0x0A, 0x3D, 0x36, 0xEB, 0x42, 0x3E, 0x29, 0x86,
+      0x88, 0x46, 0x93, 0x2A, 0x94, 0x31, 0xB8, 0xCA, 0x66, 0x0F, 0xC1, 0x97,
+      0x5E, 0x23, 0xA7, 0x5B, 0x4A, 0x51, 0xDE, 0x10, 0x69, 0xD3, 0xA5, 0x9F,
+      0x6E, 0xEB, 0x2A, 0x5C, 0xE7, 0x2A, 0x89, 0x16, 0xB5, 0xE8, 0x63, 0x47,
+      0x6E, 0x6A, 0xC5, 0x72, 0x92, 0x9F, 0x2C, 0x29, 0xBC, 0x56, 0x27, 0xBA,
+      0x99, 0x41, 0x63, 0xCE, 0xD3, 0x5A, 0xB7, 0x03, 0x1C, 0x00, 0x49, 0x07,
+      0x24, 0x55, 0x5A, 0xCD, 0xE6, 0x13, 0xAE, 0xB4, 0xC3, 0xE9, 0x99, 0x81,
+      0xC6, 0x2B, 0x5D, 0xC6, 0xA9, 0xB3, 0x5B, 0xA7, 0x92, 0x20, 0x24, 0x36,
+      0x89, 0xE0, 0x59, 0x49, 0x96, 0x85, 0x7C, 0x04, 0x5D, 0x67, 0x19, 0x3D,
+      0x9E, 0x41, 0x1B, 0x4F, 0xF3, 0x9D, 0x0F, 0x8C, 0x3C, 0x0A, 0x70, 0xAD,
+      0xB7, 0x2A, 0x70, 0x21, 0xE3, 0x6D, 0x64, 0xFB, 0x29, 0x4D, 0x93, 0x2B,
+      0x24, 0xE1, 0xA2, 0xBC, 0x0B, 0xC4, 0x1C, 0x4A, 0xA3, 0xB5, 0xEC, 0x3C,
+      0xF0, 0xE6, 0x72, 0xDE, 0x14, 0x0F, 0x48, 0x47, 0x33, 0xFD, 0x82, 0xBF,
+      0x08, 0x29, 0x34, 0xB5, 0x40, 0xA6, 0x35, 0xC4, 0x48, 0x98, 0xE8, 0xAB,
+      0x8E, 0x06, 0x45, 0x70, 0x5A, 0xA5, 0x81, 0x71, 0x8B, 0x41, 0x32, 0xC4,
+      0x27, 0x92, 0x7F, 0xAE, 0x75, 0xBF, 0x96, 0x16, 0xA5, 0x42, 0x4C, 0x20,
+      0x20, 0xEB, 0xC5, 0xCF, 0xC1, 0xBC, 0x0E, 0xD1, 0x65, 0x3A, 0xE5, 0x00,
+      0x5A, 0x17, 0x54, 0x18, 0x16, 0x20, 0xB7, 0xF0, 0x6D, 0x71, 0x63, 0x13,
+      0x03, 0x3B, 0xB7, 0x2A, 0x40, 0x64, 0x7A, 0xDB, 0x2E, 0x66, 0x73, 0x70,
+      0xF2, 0xC7, 0x4F, 0xDB, 0x94, 0x42, 0x0D, 0xA4, 0x8D, 0xD1, 0x37, 0x9D,
+      0xBA, 0x59, 0xAA, 0x22, 0xF8, 0x57, 0xE2, 0x31, 0xC5, 0xC0, 0x83, 0x29,
+      0x00, 0x66, 0xC5, 0x48, 0x76, 0x1B, 0xDF, 0x38, 0x5F, 0x2F, 0x85, 0x81,
+      0x7B, 0x21, 0x20, 0x66, 0xD3, 0x9F, 0x03, 0xB7, 0x7F, 0x8E, 0xF4, 0x12,
+      0x19, 0xE4, 0xBF, 0xB9, 0xC1, 0x2E, 0x4F, 0xC9, 0x88, 0x00, 0x57, 0x1D,
+      0x22, 0x3A, 0xA9, 0x2A, 0x32, 0xC7, 0xA3, 0xC2, 0xA7, 0xCF, 0x9C, 0x99,
+      0x5A, 0xE0, 0xA7, 0xB5, 0x93, 0x91, 0xFE, 0x9A, 0x4F, 0x0D, 0x63, 0x3B,
+      0xFB, 0x79, 0x8C, 0x34, 0xB7, 0x2B, 0xBA, 0x6A, 0x9F, 0x16, 0xC4, 0x13,
+      0x2E, 0x88, 0xB5, 0x70, 0x75, 0x8B, 0xD5, 0x51, 0xC9, 0x1B, 0xD2, 0xAD,
+      0xEB, 0x53, 0xA7, 0x2A, 0xC6, 0xAA, 0x03, 0x68, 0x9D, 0xD6, 0x4B, 0x03,
+      0x57, 0x09, 0xA8, 0xAF, 0x46, 0x85, 0x43, 0xCB, 0x17, 0x36, 0xDB, 0xC9,
+      0xC7, 0x2B, 0x52, 0x9E, 0x70, 0x59, 0x6D, 0x18, 0xB1, 0x9C, 0xA6, 0x8E,
+      0x61, 0x7A, 0x14, 0x7C, 0x18, 0x9D, 0x28, 0x3A, 0x77, 0x68, 0x8C, 0xAF,
+      0x94, 0xDA, 0x5A, 0x0E, 0x9B, 0x63, 0x18, 0x1A, 0x40, 0xBB, 0xE7, 0xBD,
+      0x41, 0x68, 0xA2, 0x4D, 0x27, 0x43, 0x19, 0xA9, 0x93, 0xBC, 0xEA, 0x8A,
+      0xBF, 0x50, 0x5F, 0xE8, 0x62, 0x12, 0x96, 0x92, 0xB5, 0xBD, 0xE8, 0x49,
+      0xF3, 0x6A, 0xC9, 0x2F, 0x71, 0x71, 0xE5, 0x38, 0x59, 0x31, 0x36, 0x04,
+      0xEA, 0xC1, 0x0B, 0xE2, 0x78, 0x6F, 0xF3, 0x85, 0xB9, 0xC7, 0x18, 0x15,
+      0x48, 0x18, 0x77, 0x2F, 0xA7, 0xB8, 0x99, 0xC0, 0x4E, 0xFD, 0x18, 0xA8,
+      0x01, 0x9A, 0x79, 0xB6, 0xF6, 0x4D, 0x5B, 0x9A, 0x2C, 0x55, 0xE7, 0x84,
+      0xCB, 0x47, 0xCA, 0x29, 0x48, 0x56, 0x68, 0x9A, 0xA6, 0xA7, 0x0C, 0xC2,
+      0x7B, 0x6C, 0x20, 0xD4, 0xD1, 0xC7, 0x29, 0xC4, 0x09, 0xD0, 0xB9, 0x25,
+      0xC4, 0x0C, 0x30, 0xC0, 0x77, 0x78, 0x15, 0x07, 0x77, 0x49, 0x48, 0x8B,
+      0x8D, 0xF0, 0x39, 0x06, 0x95, 0xAB, 0xDB, 0x04, 0x8C, 0x7C, 0xE1, 0x85,
+      0x36, 0x02, 0xA5, 0x4D, 0x15, 0x3C, 0xF2, 0xA5, 0x16, 0x17, 0x84, 0x7B,
+      0x11, 0xE6, 0x3C, 0x4C, 0x76, 0x19, 0x66, 0xD5, 0xAD, 0x93, 0x35, 0x0D,
+      0xBA, 0xDA, 0x4A, 0x15, 0xC1, 0x24, 0xBD, 0x80, 0x88, 0x71, 0x99, 0x3F,
+      0xC7, 0x75, 0xB6, 0xE4, 0x10, 0xC3, 0x86, 0x59, 0x0F, 0x73, 0x0A, 0x8E,
+      0xC9, 0x47, 0x5E, 0xEE, 0x91, 0x50, 0x39, 0xE9, 0x1B, 0x6F, 0xE4, 0x25,
+      0xB9, 0x06, 0x68, 0xC6, 0xAC, 0x52, 0x58, 0xB7, 0xAF, 0x10, 0x3B, 0x9F,
+      0x5E, 0x23, 0x0B, 0x71, 0x9B, 0xBB, 0x09, 0x87, 0x1D, 0xC1, 0x62, 0x15,
+      0x17, 0xBA, 0x2A, 0x83, 0x9C, 0x96, 0xAA, 0xA6, 0x44, 0x0A, 0x87, 0x5E,
+      0xAC, 0x90, 0xB2, 0x98, 0xD6, 0x1B, 0xD3, 0xF3, 0xAC, 0x89, 0xB4, 0x05,
+      0xDB, 0x39, 0x42, 0x32, 0x68, 0x6A, 0x2B, 0xE0, 0xF3, 0xC7, 0x5F, 0x15,
+      0xE6, 0x4E, 0x61, 0xF0, 0x70, 0x79, 0x1E, 0xB4, 0xBB, 0x97, 0xB7, 0x01,
+      0x98, 0x25, 0xF1, 0x17, 0xC7, 0xD7, 0x3A, 0x12, 0xFD, 0x3D, 0xCC, 0x22,
+      0xD5, 0x81, 0xB0, 0xE4, 0x1B, 0x78, 0x63, 0x74, 0xA4, 0x61, 0xEA, 0x0D,
+      0x88, 0xDA, 0xA8, 0x9B, 0x65, 0x9F, 0x0D, 0xC8, 0x24, 0x43, 0x42, 0x35,
+      0x15, 0xB6, 0x33, 0xB0, 0x05, 0xC9, 0x58, 0xEC, 0x26, 0x56, 0x1B, 0x6D,
+      0xB8, 0x18, 0xF4, 0xB8, 0xCB, 0x2E, 0x28, 0x99, 0x0E, 0x74, 0x84, 0x17,
+      0x58, 0x7F, 0xEC, 0x38, 0xA1, 0x28, 0x4B, 0xBB, 0x4F, 0xF9, 0xE4, 0x78,
+    },
+
+    .exp = {
+      0xC6, 0x1F, 0x73, 0xD2, 0xBF, 0xB1, 0x85, 0x94, 0xE1, 0xBA, 0x5D, 0x3B,
+      0x58, 0xB4, 0xC9, 0x34, 0x20, 0x6D, 0x3A, 0x6F, 0x8E, 0xC9, 0x13, 0x95,
+      0xAB, 0x77, 0x79, 0xC6, 0x1F, 0xA1, 0xDD, 0x6F,
+    },
+  }, {
+    .name = "0-pass",
+
+    .ct = {
+      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
+      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
+      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
+      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
+      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
+      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
+      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
+      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
+      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
+      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
+      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
+      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
+      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
+      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
+      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
+      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
+      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
+      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
+      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
+      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
+      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
+      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
+      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
+      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
+      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
+      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
+      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
+      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
+      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
+      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
+      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
+      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
+      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
+      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
+      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
+      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
+      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
+      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
+      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
+      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
+      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
+      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
+      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
+      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
+      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
+      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
+      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
+      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
+      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
+      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
+      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
+      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
+      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
+      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
+      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
+      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
+      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
+      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
+      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
+      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
+      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
+      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
+      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
+      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
+      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
+      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
+      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
+      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
+      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
+      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
+      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
+      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
+      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
+      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
+      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
+      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
+      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
+      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
+      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
+      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
+      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
+      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
+      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
+      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
+      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
+      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
+      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
+      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
+      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
+      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
+      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
+      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
+      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
+      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
+      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
+      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
+      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
+      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
+      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
+      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
+      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
+      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
+      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
+      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
+      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
+      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
+      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
+      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
+      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
+      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
+      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
+      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
+      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
+      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
+      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
+      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
+      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
+      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
+      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
+      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
+      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
+      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
+      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
+      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
+      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
+      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
+      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
+      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
+      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
+      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
+      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
+    },
+
+    .dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
+      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
+      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
+      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
+      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
+      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
+      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
+      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
+      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
+      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
+      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
+      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
+      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
+      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
+      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
+      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
+      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
+      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
+      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
+      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
+      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
+      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
+      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
+      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
+      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
+      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
+      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
+      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
+      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
+      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
+      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
+      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
+      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
+      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
+      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
+      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
+      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
+      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
+      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
+      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
+      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
+      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
+      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
+      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
+      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
+      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
+      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
+      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
+      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
+      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
+      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
+      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
+      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
+      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
+      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
+      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
+      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
+      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
+      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
+      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
+      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
+      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
+      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
+      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
+      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
+      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
+      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
+      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
+      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
+      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
+      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
+      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
+      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
+      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
+      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
+      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
+      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
+      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
+      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
+      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
+      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
+      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
+      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
+      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
+      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
+      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
+      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
+      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
+      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
+      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
+      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
+      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
+      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
+      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
+      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
+      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
+      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
+      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
+      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
+      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
+      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
+      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
+      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
+      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
+      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
+      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
+      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
+      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
+      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
+      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
+      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
+      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
+      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
+      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
+      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
+      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
+      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
+      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
+      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
+      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
+      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
+      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
+      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
+      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
+      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
+      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
+      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
+      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
+      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
+      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
+      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
+      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
+      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
+      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
+    },
+  }, {
+    .name = "1-fail-implicit-rejection-0: ct[0] = 0",
+
+    .ct = {
+      0x00, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
+      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
+      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
+      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
+      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
+      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
+      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
+      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
+      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
+      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
+      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
+      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
+      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
+      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
+      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
+      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
+      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
+      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
+      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
+      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
+      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
+      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
+      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
+      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
+      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
+      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
+      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
+      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
+      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
+      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
+      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
+      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
+      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
+      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
+      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
+      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
+      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
+      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
+      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
+      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
+      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
+      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
+      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
+      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
+      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
+      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
+      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
+      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
+      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
+      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
+      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
+      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
+      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
+      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
+      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
+      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
+      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
+      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
+      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
+      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
+      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
+      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
+      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
+      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
+      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
+      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
+      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
+      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
+      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
+      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
+      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
+      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
+      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
+      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
+      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
+      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
+      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
+      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
+      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
+      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
+      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
+      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
+      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
+      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
+      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
+      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
+      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
+      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
+      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
+      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
+      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
+      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
+      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
+      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
+      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
+      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
+      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
+      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
+      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
+      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
+      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
+      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
+      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
+      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
+      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
+      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
+      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
+      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
+      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
+      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
+      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
+      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
+      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
+      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
+      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
+      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
+      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
+      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
+      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
+      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
+      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
+      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
+      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
+      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
+      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
+      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
+      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
+      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
+      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
+      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
+      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
+    },
+
+    .dk = {
+      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
+      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
+      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
+      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
+      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
+      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
+      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
+      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
+      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
+      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
+      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
+      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
+      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
+      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
+      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
+      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
+      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
+      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
+      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
+      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
+      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
+      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
+      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
+      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
+      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
+      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
+      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
+      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
+      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
+      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
+      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
+      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
+      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
+      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
+      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
+      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
+      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
+      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
+      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
+      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
+      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
+      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
+      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
+      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
+      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
+      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
+      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
+      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
+      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
+      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
+      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
+      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
+      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
+      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
+      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
+      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
+      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
+      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
+      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
+      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
+      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
+      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
+      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
+      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
+      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
+      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
+      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
+      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
+      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
+      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
+      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
+      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
+      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
+      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
+      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
+      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
+      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
+      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
+      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
+      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
+      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
+      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
+      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
+      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
+      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
+      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
+      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
+      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
+      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
+      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
+      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
+      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
+      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
+      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
+      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
+      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
+      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
+      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
+      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
+      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
+      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
+      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
+      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
+      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
+      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
+      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
+      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
+      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
+      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
+      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
+      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
+      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
+      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
+      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
+      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
+      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
+      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
+      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
+      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
+      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
+      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
+      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
+      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
+      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
+      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
+      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
+      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
+      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
+      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
+      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
+      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0xb1, 0x8c, 0x33, 0xca, 0x11, 0x47, 0xa9, 0xd7,
+      0x28, 0xb9, 0xdf, 0xb8, 0x7d, 0x90, 0x7d, 0x8a,
+      0x88, 0x1b, 0x93, 0x76, 0xa0, 0xfd, 0x16, 0x44,
+      0x77, 0x23, 0xc8, 0x6e, 0x3f, 0x24, 0x2b, 0xcf,
+    },
+  }, {
+    .name = "2-fail-implicit-rejection-1: dk[0] = 0",
+
+    .ct = {
+      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
+      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
+      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
+      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
+      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
+      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
+      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
+      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
+      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
+      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
+      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
+      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
+      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
+      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
+      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
+      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
+      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
+      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
+      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
+      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
+      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
+      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
+      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
+      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
+      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
+      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
+      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
+      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
+      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
+      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
+      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
+      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
+      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
+      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
+      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
+      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
+      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
+      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
+      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
+      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
+      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
+      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
+      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
+      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
+      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
+      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
+      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
+      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
+      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
+      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
+      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
+      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
+      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
+      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
+      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
+      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
+      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
+      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
+      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
+      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
+      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
+      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
+      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
+      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
+      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
+      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
+      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
+      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
+      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
+      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
+      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
+      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
+      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
+      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
+      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
+      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
+      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
+      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
+      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
+      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
+      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
+      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
+      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
+      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
+      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
+      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
+      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
+      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
+      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
+      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
+      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
+      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
+      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
+      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
+      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
+      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
+      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
+      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
+      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
+      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
+      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
+      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
+      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
+      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
+      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
+      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
+      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
+      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
+      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
+      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
+      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
+      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
+      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
+      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
+      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
+      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
+      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
+      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
+      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
+      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
+      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
+      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
+      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
+      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
+      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
+      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
+      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
+      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
+      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
+      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
+      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
+    },
+
+    .dk = {
+      0x00, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
+      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
+      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
+      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
+      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
+      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
+      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
+      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
+      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
+      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
+      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
+      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
+      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
+      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
+      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
+      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
+      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
+      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
+      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
+      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
+      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
+      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
+      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
+      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
+      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
+      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
+      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
+      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
+      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
+      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
+      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
+      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
+      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
+      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
+      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
+      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
+      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
+      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
+      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
+      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
+      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
+      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
+      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
+      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
+      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
+      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
+      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
+      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
+      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
+      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
+      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
+      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
+      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
+      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
+      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
+      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
+      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
+      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
+      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
+      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
+      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
+      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
+      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
+      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
+      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
+      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
+      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
+      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
+      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
+      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
+      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
+      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
+      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
+      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
+      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
+      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
+      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
+      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
+      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
+      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
+      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
+      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
+      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
+      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
+      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
+      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
+      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
+      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
+      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
+      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
+      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
+      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
+      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
+      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
+      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
+      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
+      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
+      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
+      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
+      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
+      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
+      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
+      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
+      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
+      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
+      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
+      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
+      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
+      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
+      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
+      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
+      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
+      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
+      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
+      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
+      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
+      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
+      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
+      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
+      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
+      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
+      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
+      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
+      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
+      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
+      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
+      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
+      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
+      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
+      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
+      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
+      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
+      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
+      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
+    },
+  }, {
+    .name = "2-fail-implicit-rejection-1: dk[0] = 0x01",
+
+    .ct = {
+      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
+      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
+      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
+      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
+      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
+      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
+      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
+      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
+      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
+      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
+      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
+      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
+      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
+      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
+      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
+      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
+      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
+      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
+      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
+      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
+      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
+      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
+      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
+      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
+      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
+      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
+      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
+      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
+      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
+      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
+      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
+      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
+      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
+      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
+      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
+      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
+      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
+      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
+      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
+      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
+      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
+      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
+      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
+      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
+      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
+      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
+      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
+      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
+      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
+      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
+      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
+      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
+      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
+      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
+      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
+      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
+      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
+      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
+      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
+      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
+      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
+      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
+      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
+      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
+      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
+      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
+      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
+      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
+      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
+      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
+      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
+      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
+      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
+      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
+      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
+      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
+      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
+      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
+      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
+      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
+      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
+      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
+      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
+      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
+      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
+      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
+      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
+      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
+      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
+      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
+      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
+      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
+      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
+      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
+      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
+      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
+      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
+      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
+      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
+      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
+      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
+      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
+      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
+      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
+      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
+      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
+      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
+      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
+      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
+      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
+      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
+      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
+      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
+      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
+      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
+      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
+      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
+      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
+      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
+      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
+      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
+      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
+      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
+      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
+      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
+      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
+      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
+      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
+      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
+      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
+      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
+    },
+
+    .dk = {
+      0x00, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
+      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
+      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
+      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
+      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
+      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
+      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
+      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
+      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
+      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
+      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
+      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
+      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
+      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
+      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
+      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
+      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
+      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
+      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
+      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
+      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
+      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
+      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
+      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
+      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
+      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
+      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
+      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
+      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
+      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
+      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
+      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
+      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
+      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
+      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
+      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
+      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
+      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
+      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
+      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
+      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
+      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
+      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
+      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
+      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
+      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
+      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
+      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
+      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
+      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
+      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
+      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
+      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
+      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
+      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
+      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
+      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
+      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
+      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
+      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
+      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
+      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
+      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
+      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
+      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
+      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
+      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
+      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
+      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
+      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
+      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
+      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
+      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
+      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
+      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
+      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
+      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
+      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
+      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
+      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
+      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
+      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
+      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
+      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
+      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
+      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
+      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
+      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
+      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
+      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
+      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
+      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
+      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
+      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
+      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
+      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
+      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
+      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
+      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
+      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
+      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
+      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
+      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
+      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
+      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
+      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
+      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
+      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
+      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
+      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
+      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
+      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
+      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
+      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
+      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
+      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
+      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
+      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
+      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
+      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
+      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
+      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
+      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
+      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
+      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
+      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
+      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
+      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
+      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
+      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
+      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
+      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
+      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
+      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
+    },
+  }, {
+    .name = "3-fail-implicit-rejection-2: dk[0] = 0xff",
+
+    .ct = {
+      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
+      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
+      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
+      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
+      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
+      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
+      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
+      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
+      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
+      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
+      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
+      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
+      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
+      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
+      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
+      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
+      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
+      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
+      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
+      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
+      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
+      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
+      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
+      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
+      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
+      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
+      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
+      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
+      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
+      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
+      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
+      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
+      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
+      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
+      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
+      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
+      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
+      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
+      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
+      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
+      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
+      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
+      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
+      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
+      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
+      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
+      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
+      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
+      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
+      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
+      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
+      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
+      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
+      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
+      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
+      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
+      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
+      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
+      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
+      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
+      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
+      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
+      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
+      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
+      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
+      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
+      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
+      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
+      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
+      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
+      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
+      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
+      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
+      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
+      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
+      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
+      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
+      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
+      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
+      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
+      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
+      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
+      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
+      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
+      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
+      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
+      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
+      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
+      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
+      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
+      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
+      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
+      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
+      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
+      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
+      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
+      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
+      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
+      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
+      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
+      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
+      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
+      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
+      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
+      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
+      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
+      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
+      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
+      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
+      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
+      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
+      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
+      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
+      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
+      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
+      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
+      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
+      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
+      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
+      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
+      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
+      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
+      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
+      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
+      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
+      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
+      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
+      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
+      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
+      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
+      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
+    },
+
+    .dk = {
+      0xff, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
+      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
+      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
+      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
+      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
+      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
+      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
+      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
+      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
+      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
+      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
+      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
+      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
+      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
+      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
+      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
+      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
+      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
+      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
+      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
+      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
+      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
+      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
+      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
+      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
+      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
+      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
+      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
+      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
+      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
+      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
+      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
+      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
+      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
+      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
+      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
+      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
+      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
+      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
+      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
+      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
+      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
+      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
+      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
+      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
+      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
+      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
+      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
+      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
+      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
+      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
+      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
+      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
+      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
+      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
+      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
+      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
+      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
+      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
+      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
+      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
+      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
+      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
+      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
+      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
+      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
+      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
+      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
+      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
+      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
+      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
+      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
+      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
+      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
+      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
+      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
+      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
+      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
+      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
+      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
+      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
+      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
+      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
+      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
+      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
+      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
+      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
+      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
+      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
+      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
+      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
+      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
+      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
+      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
+      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
+      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
+      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
+      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
+      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
+      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
+      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
+      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
+      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
+      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
+      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
+      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
+      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
+      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
+      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
+      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
+      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
+      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
+      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
+      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
+      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
+      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
+      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
+      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
+      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
+      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
+      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
+      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
+      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
+      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
+      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
+      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
+      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
+      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
+      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
+      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
+      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
+      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
+      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
+      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
+      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
+      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
+      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
+      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
+      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
+      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
+      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
+      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
+      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
+      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
+      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
+      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
+      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
+      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
+      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
+      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
+      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
+      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
+      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
+      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
+      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
+      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
+      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
+      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
+      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
+      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
+      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
+      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
+      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
+      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
+      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
+      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
+      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
+      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
+      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
+      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
+      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
+      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
+      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
+      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
+      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
+      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
+      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
+      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
+      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
+      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
+      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
+      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
+      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
+      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
+      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
+      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
+      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
+      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
+      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
+      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
+      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
+      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
+      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
+      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
+      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
+      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
+      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
+      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
+      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
+      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
+      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
+      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
+      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
+      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
+      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
+      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
+      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
+      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
+      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
+      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
+      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
+      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
+      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
+      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
+      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
+      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
+      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
+      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
+      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
+      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
+      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
+      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
+      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
+      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
+      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
+      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
+      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
+      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
+      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
+      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
+      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
+      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
+      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
+      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
+      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
+      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
+      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
+      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
+      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
+      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
+      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
+      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
+      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
+      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
+      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
+      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
+      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
+      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
+      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
+      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
+      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
+      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
+      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
+      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
+      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
+      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
+      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
+      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
+      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
+      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
+      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
+      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    },
+
+    .exp = {
+      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
+      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
+      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
+      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
+    },
+  }};
+
+  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
+    // decapsulate shared key from ciphertext `ct` using KEM768
+    // decapsulation key `dk`, then store result in buffer `got`.
+    uint8_t got[32] = { 0 };
+    fips203ipd_kem1024_decaps(got, TESTS[i].ct, TESTS[i].dk);
+
+    // check for expected value
+    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
+      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
+    }
+  }
+}
+
+static void test_fips203ipd_kem1024_roundtrip(void) {
+  uint8_t buf[96] = { 0 };
+
+  for (size_t i = 0; i < NUM_ROUNDTRIP_TIMES; i++) {
+    rand_bytes(buf, sizeof(buf));
+    const uint8_t * const keygen_seed = buf; // 64 bytes
+    const uint8_t * const encaps_seed = buf + 64; // 32 bytes
+
+    // generate encapsulation and decapsulation keys
+    uint8_t ek[FIPS203IPD_KEM1024_EK_SIZE] = { 0 };
+    uint8_t dk[FIPS203IPD_KEM1024_DK_SIZE] = { 0 };
+    fips203ipd_kem1024_keygen(ek, dk, keygen_seed);
+
+    // encapsulate, get key and ciphertext
+    uint8_t k0[32] = { 0 };
+    uint8_t ct[FIPS203IPD_KEM1024_CT_SIZE] = { 0 };
+    fips203ipd_kem1024_encaps(k0, ct, ek, encaps_seed);
+
+    // decapsulate key from ciphertext
+    uint8_t k1[32] = { 0 };
+    fips203ipd_kem1024_decaps(k1, ct, dk);
+
+    // verify that k0 == k1
+    compare_keys(__func__, k0, k1, keygen_seed, encaps_seed);
+  }
+}
+
+// generate check_pkeX_{keygen_encrypt}_sample_result() functions, which
+// use the given seed to generate the expected polynomials and then
+// checks the given polynomials against the expected polynomials
+#define DEF_CHECK_SAMPLE_FNS(ID, K, ETA1, ETA2) \
+  static void check_pke ## ID ## _keygen_sample_result(const char *func, const size_t t, const uint8_t seed[static 64], const poly_t got[static K*(K+2)]) { \
+    /* populate expected polynomials */ \
+    poly_t exp[K*(K+2)] = { 0 }; \
+    { \
+      /* populate expected Ahat elements */ \
+      for (size_t i = 0; i < K; i++) { \
+        for (size_t j = 0; j < K; j++) { \
+          poly_sample_ntt(exp + (K * i + j), seed, j, i); \
+        } \
+      } \
+      \
+      /* populate expected s and e elements */ \
+      for (size_t i = 0; i < 2 * K; i++) { \
+        poly_sample_cbd ## ETA1 (exp + (K * K) + i, seed + 32, i); \
+      } \
+    } \
+    \
+    /* check for expected value */ \
+    for (size_t i = 0; i < K*(K + 2); i++) { \
+      if (memcmp(got + i, exp + i, sizeof(poly_t))) { \
+        /* build test name */ \
+        char name[32] = { 0 }; \
+        snprintf(name, sizeof(name), "test %zu, poly %zu", t, i); \
+    \
+        /* fail test */ \
+        fail_poly_test(func, name, got + i, exp + i); \
+      } \
+    } \
+  } \
+  \
+  static void check_pke ## ID ## _encrypt_sample_result(const char *func, const size_t t, const uint8_t seed[static 64], const poly_t got[static K*(K+2)+1]) { \
+    /* populate expected polynomials */ \
+    poly_t exp[K*(K+2)+1] = { 0 }; \
+    { \
+      /* populate expected Ahat elements */ \
+      for (size_t i = 0; i < K; i++) { \
+        for (size_t j = 0; j < K; j++) { \
+          poly_sample_ntt(exp + (K * i + j), seed, i, j); \
+        } \
+      } \
+      \
+      /* populate expected r elements */ \
+      for (size_t i = 0; i < K; i++) { \
+        poly_sample_cbd ## ETA1 (exp + (K * K) + i, seed + 32, i); \
+      } \
+      \
+      /* populate expected e1 elements */ \
+      for (size_t i = 0; i < K; i++) { \
+        poly_sample_cbd ## ETA2 (exp + (K*K + 1*K) + i, seed + 32, K + i); \
+      } \
+      \
+      /* populate expected e2 */ \
+      poly_sample_cbd ## ETA2 (exp + (K*K + 2*K), seed + 32, 2*K); \
+    } \
+    \
+    /* check for expected value */ \
+    for (size_t i = 0; i < K*(K + 2) + 1; i++) { \
+      if (memcmp(got + i, exp + i, sizeof(poly_t))) { \
+        /* build test name */ \
+        char name[32] = { 0 }; \
+        snprintf(name, sizeof(name), "test %zu, poly %zu", t, i); \
+    \
+        /* fail test */ \
+        fail_poly_test(func, name, got + i, exp + i); \
+      } \
+    } \
+  }
+
+DEF_CHECK_SAMPLE_FNS(512, 2, 3, 2)
+DEF_CHECK_SAMPLE_FNS(768, 3, 2, 2)
+DEF_CHECK_SAMPLE_FNS(1024, 4, 2, 2)
+
+static const struct {
+  const uint8_t seed[64];
+} SAMPLE_TESTS[] = {
+  { .seed = { 0 } },
+  { .seed = { 1, 2, 3, 4, 5 } },
+  { .seed = {
+      0x54, 0x0b, 0xd9, 0xb2, 0x1c, 0xd3, 0x37, 0xd5, 0xc6, 0x33, 0x22, 0x39, 0x03, 0x54, 0xe2, 0xfb,
+      0x81, 0x3a, 0x36, 0xaa, 0xce, 0xcf, 0x3c, 0x57, 0xbf, 0xb2, 0x3a, 0x9b, 0x7b, 0x64, 0x14, 0xce,
+      0xec, 0xf5, 0x93, 0xcd, 0x5f, 0x76, 0x3f, 0x45, 0xef, 0xad, 0xf7, 0x73, 0xab, 0x5a, 0x65, 0x50,
+      0xce, 0xed, 0x15, 0xf8, 0xb7, 0x36, 0x6e, 0x29, 0x6b, 0x4d, 0xcc, 0xbf, 0xde, 0xf0, 0x82, 0x7f,
+  } },
+  { .seed = {
+    0x40, 0xe8, 0x0d, 0x72, 0xe1, 0x22, 0x15, 0x00, 0x70, 0x3b, 0x00, 0x91, 0xd9, 0xbb, 0x99, 0xeb,
+    0xda, 0x1a, 0x80, 0x9b, 0x77, 0xf5, 0x5d, 0xf3, 0x06, 0xe0, 0x77, 0x35, 0xd9, 0x07, 0x24, 0x78,
+    0xc3, 0x82, 0x94, 0x08, 0x9c, 0x8b, 0x50, 0x27, 0xe7, 0x08, 0x72, 0xf4, 0x02, 0x98, 0xc1, 0x24,
+    0x41, 0x03, 0xf2, 0x1f, 0x89, 0xd9, 0x99, 0x2f, 0x1e, 0x13, 0x91, 0xd1, 0x35, 0x15, 0xea, 0xb9,
+  } },
+};
+
+static void test_pke512_keygen_sample_scalar(void) {
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements in parallel
+    poly_t got[8] = { 0 };
+    pke512_keygen_sample_scalar(got, seed);
+
+    // check for expected value
+    check_pke512_keygen_sample_result(__func__, t, seed, got);
+  }
+}
+
+static void test_pke512_keygen_sample_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements in parallel
+    poly_t got[8] = { 0 };
+    pke512_keygen_sample_avx512(got, seed);
+
+    // check for expected value
+    check_pke512_keygen_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke512_keygen_sample_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements in parallel
+    poly_t got[8] = { 0 };
+    pke512_keygen_sample_neon(got, seed);
+
+    // check for expected value
+    check_pke512_keygen_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke512_encrypt_sample_scalar(void) {
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements in parallel
+    poly_t got[9] = { 0 };
+    pke512_encrypt_sample_scalar(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke512_encrypt_sample_result(__func__, t, seed, got);
+  }
+}
+
+static void test_pke512_encrypt_sample_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[9] = { 0 };
+    pke512_encrypt_sample_avx512(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke512_encrypt_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke512_encrypt_sample_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[9] = { 0 };
+    pke512_encrypt_sample_neon(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke512_encrypt_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static void test_pke768_keygen_sample_scalar(void) {
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements
+    poly_t got[15] = { 0 };
+    pke768_keygen_sample_scalar(got, seed);
+
+    // check for expected value
+    check_pke768_keygen_sample_result(__func__, t, seed, got);
+  }
+}
+
+static void test_pke768_keygen_sample_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements
+    poly_t got[15] = { 0 };
+    pke768_keygen_sample_avx512(got, seed);
+
+    // check for expected value
+    check_pke768_keygen_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke768_keygen_sample_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements
+    poly_t got[15] = { 0 };
+    pke768_keygen_sample_neon(got, seed);
+
+    // check for expected value
+    check_pke768_keygen_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static void test_pke768_encrypt_sample_scalar(void) {
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[16] = { 0 };
+    pke768_encrypt_sample_scalar(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke768_encrypt_sample_result(__func__, t, seed, got);
+  }
+}
+
+static void test_pke768_encrypt_sample_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[16] = { 0 };
+    pke768_encrypt_sample_avx512(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke768_encrypt_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke768_encrypt_sample_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[16] = { 0 };
+    pke768_encrypt_sample_neon(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke768_encrypt_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_NEON */
+}
+
+static void test_pke1024_keygen_sample_scalar(void) {
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements
+    poly_t got[24] = { 0 };
+    pke1024_keygen_sample_scalar(got, seed);
+
+    // check for expected value
+    check_pke1024_keygen_sample_result(__func__, t, seed, got);
+  }
+}
+
+static void test_pke1024_keygen_sample_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements
+    poly_t got[24] = { 0 };
+    pke1024_keygen_sample_avx512(got, seed);
+
+    // check for expected value
+    check_pke1024_keygen_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke1024_keygen_sample_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, s, and e elements
+    poly_t got[24] = { 0 };
+    pke1024_keygen_sample_neon(got, seed);
+
+    // check for expected value
+    check_pke1024_keygen_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke1024_encrypt_sample_scalar(void) {
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[25] = { 0 };
+    pke1024_encrypt_sample_scalar(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke1024_encrypt_sample_result(__func__, t, seed, got);
+  }
+}
+
+static void test_pke1024_encrypt_sample_avx512(void) {
+#if BACKEND == BACKEND_AVX512
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[25] = { 0 };
+    pke1024_encrypt_sample_avx512(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke1024_encrypt_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+static void test_pke1024_encrypt_sample_neon(void) {
+#if BACKEND == BACKEND_NEON
+  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
+    // get seed
+    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
+
+    // generate A, r, e1, and e2 elements
+    poly_t got[25] = { 0 };
+    pke1024_encrypt_sample_neon(got, seed, seed + 32);
+
+    // check for expected value
+    check_pke1024_encrypt_sample_result(__func__, t, seed, got);
+  }
+#endif /* BACKEND == BACKEND_AVX512 */
+}
+
+int main(void) {
+  // note: sha3 and shake tests copied from sha3.c.  a much more
+  // extensive set of tests from CAVP is available there.
+  test_sha3_256();
+  test_sha3_512();
+  test_shake128_ctx();
+  test_shake256();
+
+  test_poly_ntt_scalar_roundtrip();
+  test_poly_ntt_avx512_roundtrip();
+  test_poly_ntt_neon_roundtrip();
+  test_poly_sample_ntt();
+  test_poly_add_scalar();
+  test_poly_add_avx512();
+  test_poly_add_neon();
+  test_poly_add2_scalar();
+  test_poly_add2_avx512();
+  test_poly_add2_neon();
+  test_poly_sub_scalar();
+  test_poly_sub_avx512();
+  test_poly_sub_neon();
+  test_poly_mul_scalar();
+  test_poly_mul_avx512();
+  test_poly_mul_neon();
+  test_prf();
+  test_poly_sample_cbd3();
+  test_poly_sample_cbd2();
+  test_poly_encode_scalar();
+  test_poly_encode_avx512();
+  test_poly_encode_neon();
+  test_poly_encode_11bit_scalar();
+  test_poly_encode_11bit_avx512();
+  test_poly_encode_11bit_neon();
+  test_poly_encode_10bit_scalar();
+  test_poly_encode_10bit_avx512();
+  test_poly_encode_10bit_neon();
+  test_poly_encode_5bit_scalar();
+  test_poly_encode_5bit_avx512();
+  test_poly_encode_5bit_neon();
+  test_poly_encode_4bit_scalar();
+  test_poly_encode_4bit_avx512();
+  test_poly_encode_4bit_neon();
+  test_poly_encode_1bit_scalar();
+  test_poly_encode_1bit_avx512();
+  test_poly_encode_1bit_neon();
+  test_poly_decode_11bit_scalar();
+  test_poly_decode_11bit_avx512();
+  test_poly_decode_11bit_neon();
+  test_poly_decode_10bit_scalar();
+  test_poly_decode_10bit_avx512();
+  test_poly_decode_10bit_neon();
+  test_poly_decode_5bit_scalar();
+  test_poly_decode_5bit_avx512();
+  test_poly_decode_5bit_neon();
+  test_poly_decode_4bit_scalar();
+  test_poly_decode_4bit_avx512();
+  test_poly_decode_4bit_neon();
+  test_poly_decode_1bit_scalar();
+  test_poly_decode_1bit_avx512();
+  test_poly_decode_1bit_neon();
+  test_mat2_mul();
+  test_vec2_add();
+  test_vec2_dot();
+  test_vec2_ntt();
+  test_vec2_encode();
+  test_vec2_decode();
+  test_vec2_encode_10bit();
+  test_vec2_decode_10bit();
+  test_pke512_keygen();
+  test_pke512_encrypt();
+  test_pke512_decrypt();
+  test_fips203ipd_kem512_keygen();
+  test_fips203ipd_kem512_encaps();
+  test_fips203ipd_kem512_decaps();
+  test_fips203ipd_kem512_roundtrip();
+  test_mat3_mul();
+  test_vec3_add();
+  test_vec3_dot();
+  test_vec3_ntt();
+  test_vec3_encode();
+  test_vec3_decode();
+  test_vec3_encode_10bit();
+  test_vec3_decode_10bit();
+  test_pke768_keygen();
+  test_pke768_encrypt();
+  test_pke768_decrypt();
+  test_fips203ipd_kem768_keygen();
+  test_fips203ipd_kem768_encaps();
+  test_fips203ipd_kem768_decaps();
+  test_fips203ipd_kem768_roundtrip();
+  test_mat4_mul();
+  test_vec4_add();
+  test_vec4_dot();
+  test_vec4_ntt();
+  test_vec4_encode();
+  test_vec4_decode();
+  test_vec4_encode_11bit();
+  test_vec4_decode_11bit();
+  test_pke1024_keygen();
+  test_pke1024_encrypt();
+  test_pke1024_decrypt();
+  test_fips203ipd_kem1024_keygen();
+  test_fips203ipd_kem1024_encaps();
+  test_fips203ipd_kem1024_decaps();
+  test_fips203ipd_kem1024_roundtrip();
+  test_pke512_keygen_sample_scalar();
+  test_pke512_keygen_sample_avx512();
+  test_pke512_keygen_sample_neon();
+  test_pke512_encrypt_sample_scalar();
+  test_pke512_encrypt_sample_avx512();
+  test_pke512_encrypt_sample_neon();
+  test_pke768_keygen_sample_scalar();
+  test_pke768_keygen_sample_avx512();
+  test_pke768_keygen_sample_neon();
+  test_pke768_encrypt_sample_scalar();
+  test_pke768_encrypt_sample_avx512();
+  test_pke768_encrypt_sample_neon();
+  test_pke1024_keygen_sample_scalar();
+  test_pke1024_keygen_sample_avx512();
+  test_pke1024_keygen_sample_neon();
+  test_pke1024_encrypt_sample_scalar();
+  test_pke1024_encrypt_sample_avx512();
+  test_pke1024_encrypt_sample_neon();
+}
+#endif // TEST_FIPS203IPD
+
+/** @endcond INTERNAL */
diff --git a/library/fips203ipd.h b/library/fips203ipd.h
new file mode 100644
index 000000000000..10ecba782b2b
--- /dev/null
+++ b/library/fips203ipd.h
@@ -0,0 +1,397 @@
+/**
+ * @file fips203ipd.h
+ * @author Paul Duncan
+ * @copyright 2023-2024 Paul Duncan
+ * @brief C11 implementation of ML-KEM from the FIPS 203 initial public draft.
+ *
+ * fips203ipd
+ * https://pablotron.org/fips203ipd
+ *
+ * Copyright (c) 2023-2024 Paul Duncan
+ * SPDX-License-Identifier: MIT-0
+ *
+ * C11 implementation of ML-KEM from the FIPS 203 initial public draft.
+ */
+#ifndef FIPS203IPD_H
+#define FIPS203IPD_H
+
+#include <stdint.h> // uint8_t
+
+/**
+ * @defgroup sizes Sizes
+ * @brief Seed and key sizes.
+ */
+
+/**
+ * @brief Size of random seed value for `keygen()`, in bytes.
+ * @ingroup sizes
+ *
+ * @warning **Must** be 64 random bytes generated by a [cryptographically
+ * secure pseudorandom number generator (CSPRNG)][csprng]. Specifically,
+ * section 3.3 of the [FIPS 203 initial public draft][fips203ipd]
+ * requires that source is an **approved** random bit generator (RBG).
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+#define FIPS203IPD_KEYGEN_SEED_SIZE 64
+
+/**
+ * @brief Size of random seed value for `encaps()`, in bytes.
+ * @ingroup sizes
+ *
+ * @warning **Must** be 64 random bytes generated by a [cryptographically
+ * secure pseudorandom number generator (CSPRNG)][csprng]. Specifically,
+ * section 3.3 of the [FIPS 203 initial public draft][fips203ipd]
+ * requires that source is an **approved** random bit generator (RBG).
+ *
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+#define FIPS203IPD_ENCAPS_SEED_SIZE 32
+
+/**
+ * @brief Size of shared secret key returned by `encaps()` and `decaps()`, in bytes.
+ * @ingroup sizes
+ */
+#define FIPS203IPD_KEY_SIZE 32
+
+/**
+ * @defgroup kem512 KEM512
+ * @brief KEM512 constants and functions.
+ */
+
+/**
+ * @brief Size of KEM512 encapsulation key, in bytes (384 * K + 32).
+ * @ingroup kem512
+ */
+#define FIPS203IPD_KEM512_EK_SIZE 800
+
+/**
+ * @brief Size of KEM512 decapsulation key, in bytes (768 * K + 96).
+ * @ingroup kem512
+ */
+#define FIPS203IPD_KEM512_DK_SIZE 1632
+
+/**
+ * @brief Size of KEM512 ciphertext, in bytes (32 * (DU * K + DV)).
+ * @ingroup kem512
+ */
+#define FIPS203IPD_KEM512_CT_SIZE 768
+
+/**
+ * @brief Generate KEM512 encapsulation key `ek` and decapsulation key
+ * `dk` from 64 byte random seed `seed`.
+ * @ingroup kem512
+ *
+ * @warning `seed` **must** be 64 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 128 bits of strength.
+ *
+ * @param[out] ek KEM512 encapsulation key (800 bytes).
+ * @param[out] dk KEM512 decapsulation key (1632 bytes).
+ * @param[in] seed Random seed (64 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem512-keygen
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem512_keygen(uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]);
+
+/**
+ * @brief Generate KEM512 shared key `key` and ciphertext `ct` from given
+ * encapsulation key `ek` and randomness `seed`.
+ * @ingroup kem512
+ *
+ * @warning `seed` **must** be 32 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 128 bits of strength.
+ *
+ * @note Encapsulation key polynomial coefficients are reduced modulo Q
+ * during deserialization, as per [option #2 in this `pqc-forum`
+ * discussion][poly-decode].
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (768 bytes).
+ * @param[in] ek KEM512 encapsulation key (800 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem512-encaps
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ * [poly-decode]: https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
+ */
+void fips203ipd_kem512_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]);
+
+/**
+ * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM512
+ * decapsulation key `dk` with implicit rejection.
+ * @ingroup kem512
+ *
+ * @note Implicit rejection means that when this function is given an
+ * invalid ciphertext, it will return a key which is unpredictable to
+ * the attacker rather than an error.  This is intended to provide
+ * [IND-CCA2][] security, as discussed in section 3.2 of the [FIPS 203
+ * initial public draft][fips203ipd].
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (768 bytes).
+ * @param[in] dk KEM512 decapsulation key (1632 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem512-decaps
+ *
+ * [IND-CCA2]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability#IND-CCA2
+ *   "indistinguishable under adaptive chosen ciphertext attack (IND-CCA2)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem512_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE]);
+
+/**
+ * @defgroup kem768 KEM768
+ * @brief KEM768 constants and functions.
+ */
+
+/**
+ * @brief Size of KEM768 encapsulation key, in bytes (384 * K + 32).
+ * @ingroup kem768
+ */
+#define FIPS203IPD_KEM768_EK_SIZE 1184
+
+/**
+ * @brief Size of KEM768 decapsulation key, in bytes (768 * K + 96).
+ * @ingroup kem768
+ */
+#define FIPS203IPD_KEM768_DK_SIZE 2400
+
+/**
+ * @brief Size of KEM768 ciphertext, in bytes (32 * (DU * K + DV)).
+ * @ingroup kem768
+ */
+#define FIPS203IPD_KEM768_CT_SIZE 1088
+
+/**
+ * @brief Generate KEM768 encapsulation key `ek` and decapsulation key
+ * `dk` from 64 byte random seed `seed`.
+ * @ingroup kem768
+ *
+ * @warning `seed` **must** be 64 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 192 bits of strength.
+ *
+ * @param[out] ek KEM768 encapsulation key (1184 bytes).
+ * @param[out] dk KEM768 decapsulation key (2400 bytes).
+ * @param[in] seed Random seed (64 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem768-keygen
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem768_keygen(uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]);
+
+/**
+ * @brief Generate KEM768 shared key `key` and ciphertext `ct` from given
+ * encapsulation key `ek` and randomness `seed`.
+ * @ingroup kem768
+ *
+ * @warning `seed` **must** be 32 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 192 bits of strength.
+ *
+ * @note Encapsulation key polynomial coefficients are reduced modulo Q
+ * during deserialization, as per [option #2 in this `pqc-forum`
+ * discussion][poly-decode].
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1088 bytes).
+ * @param[in] ek KEM768 encapsulation key (1184 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem768-encaps
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ * [poly-decode]: https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
+ */
+void fips203ipd_kem768_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]);
+
+/**
+ * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM768
+ * decapsulation key `dk` with implicit rejection.
+ * @ingroup kem768
+ *
+ * @note Implicit rejection means that when this function is given an
+ * invalid ciphertext, it will return a key which is unpredictable to
+ * the attacker rather than an error.  This is intended to provide
+ * [IND-CCA2][] security, as discussed in section 3.2 of the [FIPS 203
+ * initial public draft][fips203ipd].
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1088 bytes).
+ * @param[in] dk KEM768 decapsulation key (2400 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem768-decaps
+ *
+ * [IND-CCA2]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability#IND-CCA2
+ *   "indistinguishable under adaptive chosen ciphertext attack (IND-CCA2)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem768_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE]);
+
+/**
+ * @defgroup kem1024 KEM1024
+ * @brief KEM1024 constants and functions.
+ */
+
+/**
+ * @brief Size of KEM1024 encapsulation key, in bytes (384 * K + 32).
+ * @ingroup kem1024
+ */
+#define FIPS203IPD_KEM1024_EK_SIZE 1568
+
+/**
+ * @brief Size of KEM1024 decapsulation key, in bytes (768 * K + 96).
+ * @ingroup kem1024
+ */
+#define FIPS203IPD_KEM1024_DK_SIZE 3168
+
+/**
+ * @brief Size of KEM1024 ciphertext, in bytes (32 * (DU * K + DV)).
+ * @ingroup kem1024
+ */
+#define FIPS203IPD_KEM1024_CT_SIZE 1568
+
+/**
+ * @brief Generate KEM1024 encapsulation key `ek` and decapsulation key
+ * `dk` from 64 byte random seed `seed`.
+ * @ingroup kem1024
+ *
+ * @warning `seed` **must** be 64 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 256 bits of strength.
+ *
+ * @param[out] ek KEM1024 encapsulation key (1568 bytes).
+ * @param[out] dk KEM1024 decapsulation key (3168 bytes).
+ * @param[in] seed Random seed (64 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem1024-keygen
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem1024_keygen(uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]);
+
+/**
+ * @brief Generate KEM1024 shared key `key` and ciphertext `ct` from given
+ * encapsulation key `ek` and randomness `seed`.
+ * @ingroup kem1024
+ *
+ * @warning `seed` **must** be 32 random bytes generated by a
+ * [cryptographically secure pseudorandom number generator
+ * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
+ * initial public draft][fips203ipd] requires an **approved** random bit
+ * generator (RBG) with at least 256 bits of strength.
+ *
+ * @note Encapsulation key polynomial coefficients are reduced modulo Q
+ * during deserialization, as per [option #2 in this `pqc-forum`
+ * discussion][poly-decode].
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1568 bytes).
+ * @param[in] ek KEM1024 encapsulation key (1568 bytes).
+ * @param[in] seed Random seed (32 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem1024-encaps
+ *
+ * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
+ *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ * [poly-decode]: https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
+ */
+void fips203ipd_kem1024_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]);
+
+/**
+ * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM1024
+ * decapsulation key `dk` with implicit rejection.
+ * @ingroup kem1024
+ *
+ * @note Implicit rejection means that when this function is given an
+ * invalid ciphertext, it will return a key which is unpredictable to
+ * the attacker rather than an error.  This is intended to provide
+ * [IND-CCA2][] security, as discussed in section 3.2 of the [FIPS 203
+ * initial public draft][fips203ipd].
+ *
+ * @param[out] key Shared key (32 bytes).
+ * @param[out] ct Ciphertext (1568 bytes).
+ * @param[in] dk KEM1024 decapsulation key (3168 bytes).
+ *
+ * Example:
+ * @snippet{trimleft} 1-all-three/all-three.c kem1024-decaps
+ *
+ * [IND-CCA2]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability#IND-CCA2
+ *   "indistinguishable under adaptive chosen ciphertext attack (IND-CCA2)"
+ * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
+ *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
+ */
+void fips203ipd_kem1024_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE]);
+
+/**
+ * @defgroup misc Miscellaneous
+ * @brief Miscellaneous functions.
+ */
+
+/**
+ * @brief Get name of backend.
+ * @ingroup misc
+ *
+ * @note Returns a read-only string which must not be freed by the
+ * caller.
+ */
+const char *fips203ipd_backend(void);
+
+struct X25519Kyber768_ctx
+{
+	uint8_t fips203ipd_ss[32];
+	uint8_t fips203ipd_ek[FIPS203IPD_KEM768_EK_SIZE]; // encapsulation key
+	uint8_t fips203ipd_dk[FIPS203IPD_KEM768_DK_SIZE]; // decapsulation key
+};
+
+#endif /* FIPS203IPD_H */
diff --git a/library/hex.h b/library/hex.h
new file mode 100644
index 000000000000..246aeed478bd
--- /dev/null
+++ b/library/hex.h
@@ -0,0 +1,15 @@
+#ifndef HEX_H
+#define HEX_H
+
+#include <stdio.h> // fprintf()
+#include <stdint.h> // uint8_t
+
+// print hex-encoded buffer to given file handle.
+// (used by top-level main.c)
+static void hex_write(FILE *fh, const uint8_t * const buf, const size_t len) {
+  for (size_t i = 0; i < len; i++) {
+    fprintf(fh, "%02x", buf[i]);
+  }
+}
+
+#endif /* HEX_H */
diff --git a/library/rand-bytes.h b/library/rand-bytes.h
new file mode 100644
index 000000000000..4000b4ca8f22
--- /dev/null
+++ b/library/rand-bytes.h
@@ -0,0 +1,21 @@
+#ifndef RAND_BYTES_H
+#define RAND_BYTES_H
+
+#include <stddef.h> // size_t
+#include <sys/random.h> // getentropy()
+#include "esp_random.h"
+//#include <err.h> // errx()
+
+// Fill `buf` with `len` random bytes using `getentropy()`.
+//
+// Prints an error message to standard error and exits with a non-zero
+// error code if `len` random bytes could not be read.
+static void rand_bytes(void * const buf, size_t len) {
+  uint8_t *u8 = (uint8_t*) buf;
+    //int i;
+    //for(i=0; i<len; i++) u8[i] = (uint8_t)i;
+    esp_fill_random(u8, len);
+    return;
+}
+
+#endif /* RAND_BYTES_H */
diff --git a/library/ssl_client.c b/library/ssl_client.c
index 345e60893829..47dac01847e7 100644
--- a/library/ssl_client.c
+++ b/library/ssl_client.c
@@ -283,7 +283,11 @@ static int ssl_write_supported_groups_ext(mbedtls_ssl_context *ssl,
                                       *group_list));
         }
     }
-
+	
+	MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
+	MBEDTLS_PUT_UINT16_BE(MBEDTLS_SSL_TLS_GROUP_X25519KYBER768, p, 0);
+	p += 2;
+	
     /* Length of named_group_list */
     named_group_list_len = (size_t) (p - named_group_list);
     if (named_group_list_len == 0) {
diff --git a/library/ssl_misc.h b/library/ssl_misc.h
index 98668798a876..4b321457645d 100644
--- a/library/ssl_misc.h
+++ b/library/ssl_misc.h
@@ -2199,6 +2199,13 @@ int mbedtls_ssl_tls13_generate_and_write_xxdh_key_exchange(
     size_t *out_len);
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
 
+int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
+    mbedtls_ssl_context *ssl,
+    uint16_t named_group,
+    unsigned char *buf,
+    unsigned char *end,
+    size_t *out_len);
+
 #if defined(MBEDTLS_SSL_EARLY_DATA)
 int mbedtls_ssl_tls13_write_early_data_ext(mbedtls_ssl_context *ssl,
                                            int in_new_session_ticket,
diff --git a/library/ssl_tls.c b/library/ssl_tls.c
index c773365bf61a..9d8495c1f1d9 100644
--- a/library/ssl_tls.c
+++ b/library/ssl_tls.c
@@ -5632,6 +5632,7 @@ static const uint16_t ssl_preset_default_groups[] = {
     MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE6144,
     MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE8192,
 #endif
+	MBEDTLS_SSL_TLS_GROUP_X25519KYBER768,
     MBEDTLS_SSL_IANA_TLS_GROUP_NONE
 };
 
@@ -6295,6 +6296,7 @@ static const struct {
 #if defined(MBEDTLS_ECP_HAVE_CURVE448)
     { 30, MBEDTLS_ECP_DP_CURVE448, PSA_ECC_FAMILY_MONTGOMERY, 448 },
 #endif
+	{0x6399, MBEDTLS_ECP_DP_NONE, 0, 1216},
     { 0, MBEDTLS_ECP_DP_NONE, 0, 0 },
 };
 
@@ -6359,6 +6361,7 @@ static const struct {
     { MBEDTLS_SSL_IANA_TLS_GROUP_SECP192K1, "secp192k1" },
     { MBEDTLS_SSL_IANA_TLS_GROUP_X25519, "x25519" },
     { MBEDTLS_SSL_IANA_TLS_GROUP_X448, "x448" },
+	{ MBEDTLS_SSL_TLS_GROUP_X25519KYBER768, "X25519Kyber768Draft00" },
     { 0, NULL },
 };
 
diff --git a/library/ssl_tls13_client.c b/library/ssl_tls13_client.c
index b63b5e63c5b4..d4ac590d899e 100644
--- a/library/ssl_tls13_client.c
+++ b/library/ssl_tls13_client.c
@@ -291,6 +291,7 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
         MBEDTLS_SSL_PROC_CHK(ssl_tls13_get_default_group_id(ssl,
                                                             &group_id));
     }
+	group_id = MBEDTLS_SSL_TLS_GROUP_X25519KYBER768;//SM I have forced it to use this X25519KYBER76Draft00
 
     /*
      * Dispatch to type-specific key generation function.
@@ -326,7 +327,22 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
         MBEDTLS_PUT_UINT16_BE(group_id, group, 0);
         /* Write key_exchange_length */
         MBEDTLS_PUT_UINT16_BE(key_exchange_len, group, 2);
-    } else
+    }  
+	else if((group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768))
+	{
+		MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: adding key share extension for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
+		unsigned char *group = p;
+		size_t key_exchange_len = 0;
+		MBEDTLS_SSL_CHK_BUF_PTR(p, end, 4);
+        p += 4;
+		mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
+            ssl, group_id, p, end, &key_exchange_len);
+		p += key_exchange_len;
+		/* Write group */
+        MBEDTLS_PUT_UINT16_BE(group_id, group, 0);
+        /* Write key_exchange_length */
+        MBEDTLS_PUT_UINT16_BE(key_exchange_len, group, 2);
+	} else
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
     if (0 /* other KEMs? */) {
         /* Do something */
@@ -448,7 +464,9 @@ static int ssl_tls13_parse_hrr_key_share_ext(mbedtls_ssl_context *ssl,
     return MBEDTLS_ERR_SSL_BAD_CONFIG;
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
 }
-
+#include "fips203ipd.h"
+#include "fips202.h"
+extern struct X25519Kyber768_ctx *fips203ipd_kem;
 /*
  * ssl_tls13_parse_key_share_ext()
  *      Parse key_share extension in Server Hello
@@ -502,7 +520,35 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
 #endif /* MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED */
     if (0 /* other KEMs? */) {
         /* Do something */
-    } else {
+    }
+	else if(group == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
+	{
+		ret = MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER;
+		
+		p += 2;//length
+		const unsigned char *x25519key = p;
+		p += 32;//KEM public key start position
+		
+		fips203ipd_kem768_decaps(fips203ipd_kem->fips203ipd_ss, p, fips203ipd_kem->fips203ipd_dk);
+		
+		uint8_t k_and_cthash[64];
+		uint8_t kem_ss[32];
+		memcpy(k_and_cthash, fips203ipd_kem->fips203ipd_ss, 32);
+		
+		ret = mbedtls_sha3(MBEDTLS_SHA3_256, p, end-p, &k_and_cthash[32], 32);
+		shake256(kem_ss, 32, k_and_cthash, 64);
+		
+		mbedtls_ssl_handshake_params *handshake = ssl->handshake;
+		
+		memcpy(handshake->xxdh_psa_peerkey, x25519key, 32);
+		memcpy(&handshake->xxdh_psa_peerkey[32], kem_ss, 32);
+		handshake->xxdh_psa_peerkey_len = 64;
+		mbedtls_zeroize_and_free(fips203ipd_kem, sizeof(struct X25519Kyber768_ctx));//free(fips203ipd_kem);
+
+		return 0;
+
+	} 
+	else {
         return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
     }
 
diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index b6d09788ba05..4b9499ee6339 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1532,6 +1532,100 @@ static psa_status_t  mbedtls_ssl_get_psa_ffdh_info_from_tls_id(
 }
 #endif /* PSA_WANT_ALG_FFDH */
 
+#include "rand-bytes.h"
+#include "fips203ipd.h"
+#define X25519_KEY_SIZE_BYTES 32
+
+struct X25519Kyber768_ctx *fips203ipd_kem;
+void fips203ipd_genkemkey(void);
+void fips203ipd_genkemkey(void)
+{
+    uint8_t keygen_seed[64] = { 0 };
+	fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));//malloc(sizeof(struct X25519Kyber768_ctx));
+    rand_bytes(keygen_seed, 32);
+    rand_bytes(&keygen_seed[32], 32);
+    fips203ipd_kem768_keygen(fips203ipd_kem->fips203ipd_ek, fips203ipd_kem->fips203ipd_dk, keygen_seed);
+}
+
+int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
+    mbedtls_ssl_context *ssl,
+    uint16_t named_group,
+    unsigned char *buf,
+    unsigned char *end,
+    size_t *out_len)
+{
+	mbedtls_ssl_handshake_params *handshake = ssl->handshake;
+    size_t bits = 0;
+    size_t buf_size = (size_t) (end - buf);
+	psa_status_t status = PSA_ERROR_GENERIC_ERROR;
+    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
+    psa_key_attributes_t key_attributes;
+    size_t own_pubkey_len;
+	psa_algorithm_t alg = PSA_ALG_ECDH;
+	psa_key_type_t key_type = PSA_KEY_TYPE_NONE;
+	unsigned char x25519_pubkey[X25519_KEY_SIZE_BYTES];
+	
+	//ML-KEM768 bytes
+	if(buf_size < FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES) 
+    {
+        MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: Not enough memory for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
+        return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
+    }
+	else 
+    {		
+		fips203ipd_genkemkey();
+		//ECDSA public key
+		if (mbedtls_ssl_get_psa_curve_info_from_tls_id(
+				MBEDTLS_SSL_IANA_TLS_GROUP_X25519, &key_type, &bits) == PSA_SUCCESS)
+		{
+			alg = PSA_ALG_ECDH;
+		}
+		if (key_type == PSA_KEY_TYPE_NONE) {
+			return MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE;
+		}
+
+		if (buf_size < PSA_BITS_TO_BYTES(bits)) {
+			return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
+		}
+
+		handshake->xxdh_psa_type = key_type;
+		ssl->handshake->xxdh_psa_bits = bits;
+
+		key_attributes = psa_key_attributes_init();
+		psa_set_key_usage_flags(&key_attributes, PSA_KEY_USAGE_DERIVE);
+		psa_set_key_algorithm(&key_attributes, alg);
+		psa_set_key_type(&key_attributes, handshake->xxdh_psa_type);
+		psa_set_key_bits(&key_attributes, handshake->xxdh_psa_bits);
+		
+		//Generate ECDH private key.
+		status = psa_generate_key(&key_attributes,
+								  &handshake->xxdh_psa_privkey);
+		if (status != PSA_SUCCESS) {
+			ret = PSA_TO_MBEDTLS_ERR(status);
+			MBEDTLS_SSL_DEBUG_RET(1, "psa_generate_key", ret);
+			return ret;
+
+		}
+
+		//Export the public part of the ECDH private key from PSA.
+		status = psa_export_public_key(handshake->xxdh_psa_privkey,
+									   x25519_pubkey, X25519_KEY_SIZE_BYTES,
+									   &own_pubkey_len);
+
+		if (status != PSA_SUCCESS) {
+			ret = PSA_TO_MBEDTLS_ERR(status);
+			MBEDTLS_SSL_DEBUG_RET(1, "psa_export_public_key", ret);
+			return ret;
+		}
+		
+		*out_len = FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES;
+
+		memcpy(buf, x25519_pubkey, X25519_KEY_SIZE_BYTES);
+        memcpy(&buf[X25519_KEY_SIZE_BYTES], fips203ipd_kem->fips203ipd_ek, FIPS203IPD_KEM768_EK_SIZE);
+    }
+    return 0;	
+}
+
 int mbedtls_ssl_tls13_generate_and_write_xxdh_key_exchange(
     mbedtls_ssl_context *ssl,
     uint16_t named_group,
diff --git a/library/ssl_tls13_keys.c b/library/ssl_tls13_keys.c
index 739414ea2fe8..825d52c64232 100644
--- a/library/ssl_tls13_keys.c
+++ b/library/ssl_tls13_keys.c
@@ -1522,7 +1522,54 @@ static int ssl_tls13_key_schedule_stage_handshake(mbedtls_ssl_context *ssl)
 
             handshake->xxdh_psa_privkey = MBEDTLS_SVC_KEY_ID_INIT;
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
-        } else {
+        } 
+		else if(handshake->offered_group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
+		{
+			psa_algorithm_t alg = PSA_ALG_ECDH;
+			psa_status_t status = PSA_ERROR_GENERIC_ERROR;
+            psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
+
+            status = psa_get_key_attributes(handshake->xxdh_psa_privkey,
+                                            &key_attributes);
+            if (status != PSA_SUCCESS) {
+                ret = PSA_TO_MBEDTLS_ERR(status);
+            }
+
+            shared_secret_len = 64;
+            shared_secret = mbedtls_calloc(1, shared_secret_len);
+            if (shared_secret == NULL) {
+                return MBEDTLS_ERR_SSL_ALLOC_FAILED;
+            }
+			
+			//Need to retrieve the KEM768's SS as it is reset by psa_raw_key_agreement().
+			uint8_t tmp_kem768_ss[32];
+			memcpy(tmp_kem768_ss, &handshake->xxdh_psa_peerkey[32], 32);
+            status = psa_raw_key_agreement(
+                alg, handshake->xxdh_psa_privkey,
+                handshake->xxdh_psa_peerkey, 32,
+                shared_secret, 32, &shared_secret_len);
+			memcpy(&shared_secret[32], tmp_kem768_ss, 32);
+			shared_secret_len += 32;
+			int i;
+			printf("\nFinal result at end of handshake of X25519MLKEM768draft00 SS with length of %u\n", shared_secret_len);
+			for(i=0; i<64; i++) printf("%02x", shared_secret[i]);
+			printf("\n");
+            if (status != PSA_SUCCESS) {
+                ret = PSA_TO_MBEDTLS_ERR(status);
+                MBEDTLS_SSL_DEBUG_RET(1, "psa_raw_key_agreement", ret);
+                goto cleanup;
+            }
+
+            status = psa_destroy_key(handshake->xxdh_psa_privkey);
+            if (status != PSA_SUCCESS) {
+                ret = PSA_TO_MBEDTLS_ERR(status);
+                MBEDTLS_SSL_DEBUG_RET(1, "psa_destroy_key", ret);
+                goto cleanup;
+            }
+
+            handshake->xxdh_psa_privkey = MBEDTLS_SVC_KEY_ID_INIT;			
+		} 
+		else {
             MBEDTLS_SSL_DEBUG_MSG(1, ("Group not supported."));
             return MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
         }

From 7b01faa888635d544c5fa31487eca0d931000180 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Tue, 15 Oct 2024 12:07:43 +0100
Subject: [PATCH 02/10] code cleanup

---
 library/ssl_client.c        |   6 +-
 library/ssl_tls.c           |   6 +-
 library/ssl_tls13_client.c  |  69 +++++++++++----------
 library/ssl_tls13_generic.c | 119 ++++++++++++++++++------------------
 library/ssl_tls13_keys.c    |  35 +++++------
 5 files changed, 117 insertions(+), 118 deletions(-)

diff --git a/library/ssl_client.c b/library/ssl_client.c
index 47dac01847e7..41886a9f0b22 100644
--- a/library/ssl_client.c
+++ b/library/ssl_client.c
@@ -284,9 +284,9 @@ static int ssl_write_supported_groups_ext(mbedtls_ssl_context *ssl,
         }
     }
 	
-	MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
-	MBEDTLS_PUT_UINT16_BE(MBEDTLS_SSL_TLS_GROUP_X25519KYBER768, p, 0);
-	p += 2;
+    MBEDTLS_SSL_CHK_BUF_PTR(p, end, 2);
+    MBEDTLS_PUT_UINT16_BE(MBEDTLS_SSL_TLS_GROUP_X25519KYBER768, p, 0);
+    p += 2;
 	
     /* Length of named_group_list */
     named_group_list_len = (size_t) (p - named_group_list);
diff --git a/library/ssl_tls.c b/library/ssl_tls.c
index 9d8495c1f1d9..282b6dacabdd 100644
--- a/library/ssl_tls.c
+++ b/library/ssl_tls.c
@@ -5632,7 +5632,7 @@ static const uint16_t ssl_preset_default_groups[] = {
     MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE6144,
     MBEDTLS_SSL_IANA_TLS_GROUP_FFDHE8192,
 #endif
-	MBEDTLS_SSL_TLS_GROUP_X25519KYBER768,
+    MBEDTLS_SSL_TLS_GROUP_X25519KYBER768,
     MBEDTLS_SSL_IANA_TLS_GROUP_NONE
 };
 
@@ -6296,7 +6296,7 @@ static const struct {
 #if defined(MBEDTLS_ECP_HAVE_CURVE448)
     { 30, MBEDTLS_ECP_DP_CURVE448, PSA_ECC_FAMILY_MONTGOMERY, 448 },
 #endif
-	{0x6399, MBEDTLS_ECP_DP_NONE, 0, 1216},
+    {0x6399, MBEDTLS_ECP_DP_NONE, 0, 1216},
     { 0, MBEDTLS_ECP_DP_NONE, 0, 0 },
 };
 
@@ -6361,7 +6361,7 @@ static const struct {
     { MBEDTLS_SSL_IANA_TLS_GROUP_SECP192K1, "secp192k1" },
     { MBEDTLS_SSL_IANA_TLS_GROUP_X25519, "x25519" },
     { MBEDTLS_SSL_IANA_TLS_GROUP_X448, "x448" },
-	{ MBEDTLS_SSL_TLS_GROUP_X25519KYBER768, "X25519Kyber768Draft00" },
+    { MBEDTLS_SSL_TLS_GROUP_X25519KYBER768, "X25519Kyber768Draft00" },
     { 0, NULL },
 };
 
diff --git a/library/ssl_tls13_client.c b/library/ssl_tls13_client.c
index d4ac590d899e..d64a6367039e 100644
--- a/library/ssl_tls13_client.c
+++ b/library/ssl_tls13_client.c
@@ -291,7 +291,7 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
         MBEDTLS_SSL_PROC_CHK(ssl_tls13_get_default_group_id(ssl,
                                                             &group_id));
     }
-	group_id = MBEDTLS_SSL_TLS_GROUP_X25519KYBER768;//SM I have forced it to use this X25519KYBER76Draft00
+    group_id = MBEDTLS_SSL_TLS_GROUP_X25519KYBER768;//SM I have forced it to use this X25519KYBER76Draft00
 
     /*
      * Dispatch to type-specific key generation function.
@@ -328,17 +328,17 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
         /* Write key_exchange_length */
         MBEDTLS_PUT_UINT16_BE(key_exchange_len, group, 2);
     }  
-	else if((group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768))
-	{
-		MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: adding key share extension for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
-		unsigned char *group = p;
-		size_t key_exchange_len = 0;
-		MBEDTLS_SSL_CHK_BUF_PTR(p, end, 4);
+    else if((group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768))
+    {
+        MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: adding key share extension for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
+        unsigned char *group = p;
+        size_t key_exchange_len = 0;
+        MBEDTLS_SSL_CHK_BUF_PTR(p, end, 4);
         p += 4;
-		mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
+        mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
             ssl, group_id, p, end, &key_exchange_len);
-		p += key_exchange_len;
-		/* Write group */
+        p += key_exchange_len;
+        /* Write group */
         MBEDTLS_PUT_UINT16_BE(group_id, group, 0);
         /* Write key_exchange_length */
         MBEDTLS_PUT_UINT16_BE(key_exchange_len, group, 2);
@@ -464,6 +464,7 @@ static int ssl_tls13_parse_hrr_key_share_ext(mbedtls_ssl_context *ssl,
     return MBEDTLS_ERR_SSL_BAD_CONFIG;
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
 }
+
 #include "fips203ipd.h"
 #include "fips202.h"
 extern struct X25519Kyber768_ctx *fips203ipd_kem;
@@ -523,29 +524,31 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
     }
 	else if(group == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
 	{
-		ret = MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER;
-		
-		p += 2;//length
-		const unsigned char *x25519key = p;
-		p += 32;//KEM public key start position
-		
-		fips203ipd_kem768_decaps(fips203ipd_kem->fips203ipd_ss, p, fips203ipd_kem->fips203ipd_dk);
-		
-		uint8_t k_and_cthash[64];
-		uint8_t kem_ss[32];
-		memcpy(k_and_cthash, fips203ipd_kem->fips203ipd_ss, 32);
-		
-		ret = mbedtls_sha3(MBEDTLS_SHA3_256, p, end-p, &k_and_cthash[32], 32);
-		shake256(kem_ss, 32, k_and_cthash, 64);
-		
-		mbedtls_ssl_handshake_params *handshake = ssl->handshake;
-		
-		memcpy(handshake->xxdh_psa_peerkey, x25519key, 32);
-		memcpy(&handshake->xxdh_psa_peerkey[32], kem_ss, 32);
-		handshake->xxdh_psa_peerkey_len = 64;
-		mbedtls_zeroize_and_free(fips203ipd_kem, sizeof(struct X25519Kyber768_ctx));//free(fips203ipd_kem);
-
-		return 0;
+        ret = MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER;
+
+        p += 2;//length
+        const unsigned char *x25519key = p;
+        p += 32;//KEM public key start position
+
+        fips203ipd_kem768_decaps(fips203ipd_kem->fips203ipd_ss, p, fips203ipd_kem->fips203ipd_dk);
+
+        uint8_t k_and_cthash[64];
+        uint8_t kem_ss[32];
+        memcpy(k_and_cthash, fips203ipd_kem->fips203ipd_ss, 32);
+
+        ret = mbedtls_sha3(MBEDTLS_SHA3_256, p, end-p, &k_and_cthash[32], 32);
+        if(ret != 0) 
+            return ret;
+        shake256(kem_ss, 32, k_and_cthash, 64);
+
+        mbedtls_ssl_handshake_params *handshake = ssl->handshake;
+
+        memcpy(handshake->xxdh_psa_peerkey, x25519key, 32);
+        memcpy(&handshake->xxdh_psa_peerkey[32], kem_ss, 32);
+        handshake->xxdh_psa_peerkey_len = 64;
+        mbedtls_zeroize_and_free(fips203ipd_kem, sizeof(struct X25519Kyber768_ctx));//free(fips203ipd_kem);
+
+        return 0;
 
 	} 
 	else {
diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index 4b9499ee6339..4f714ef4106c 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1541,7 +1541,7 @@ void fips203ipd_genkemkey(void);
 void fips203ipd_genkemkey(void)
 {
     uint8_t keygen_seed[64] = { 0 };
-	fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));//malloc(sizeof(struct X25519Kyber768_ctx));
+    fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));//malloc(sizeof(struct X25519Kyber768_ctx));
     rand_bytes(keygen_seed, 32);
     rand_bytes(&keygen_seed[32], 32);
     fips203ipd_kem768_keygen(fips203ipd_kem->fips203ipd_ek, fips203ipd_kem->fips203ipd_dk, keygen_seed);
@@ -1554,73 +1554,74 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
     unsigned char *end,
     size_t *out_len)
 {
-	mbedtls_ssl_handshake_params *handshake = ssl->handshake;
+    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
     size_t bits = 0;
     size_t buf_size = (size_t) (end - buf);
-	psa_status_t status = PSA_ERROR_GENERIC_ERROR;
+    psa_status_t status = PSA_ERROR_GENERIC_ERROR;
     int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
     psa_key_attributes_t key_attributes;
     size_t own_pubkey_len;
-	psa_algorithm_t alg = PSA_ALG_ECDH;
-	psa_key_type_t key_type = PSA_KEY_TYPE_NONE;
-	unsigned char x25519_pubkey[X25519_KEY_SIZE_BYTES];
-	
-	//ML-KEM768 bytes
-	if(buf_size < FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES) 
+    psa_algorithm_t alg = PSA_ALG_ECDH;
+    psa_key_type_t key_type = PSA_KEY_TYPE_NONE;
+    unsigned char x25519_pubkey[X25519_KEY_SIZE_BYTES];
+
+    //ML-KEM768 bytes
+    if(buf_size < FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES) 
     {
         MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: Not enough memory for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
         return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
     }
-	else 
-    {		
-		fips203ipd_genkemkey();
-		//ECDSA public key
-		if (mbedtls_ssl_get_psa_curve_info_from_tls_id(
-				MBEDTLS_SSL_IANA_TLS_GROUP_X25519, &key_type, &bits) == PSA_SUCCESS)
-		{
-			alg = PSA_ALG_ECDH;
-		}
-		if (key_type == PSA_KEY_TYPE_NONE) {
-			return MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE;
-		}
-
-		if (buf_size < PSA_BITS_TO_BYTES(bits)) {
-			return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
-		}
-
-		handshake->xxdh_psa_type = key_type;
-		ssl->handshake->xxdh_psa_bits = bits;
-
-		key_attributes = psa_key_attributes_init();
-		psa_set_key_usage_flags(&key_attributes, PSA_KEY_USAGE_DERIVE);
-		psa_set_key_algorithm(&key_attributes, alg);
-		psa_set_key_type(&key_attributes, handshake->xxdh_psa_type);
-		psa_set_key_bits(&key_attributes, handshake->xxdh_psa_bits);
-		
-		//Generate ECDH private key.
-		status = psa_generate_key(&key_attributes,
-								  &handshake->xxdh_psa_privkey);
-		if (status != PSA_SUCCESS) {
-			ret = PSA_TO_MBEDTLS_ERR(status);
-			MBEDTLS_SSL_DEBUG_RET(1, "psa_generate_key", ret);
-			return ret;
-
-		}
-
-		//Export the public part of the ECDH private key from PSA.
-		status = psa_export_public_key(handshake->xxdh_psa_privkey,
-									   x25519_pubkey, X25519_KEY_SIZE_BYTES,
-									   &own_pubkey_len);
-
-		if (status != PSA_SUCCESS) {
-			ret = PSA_TO_MBEDTLS_ERR(status);
-			MBEDTLS_SSL_DEBUG_RET(1, "psa_export_public_key", ret);
-			return ret;
-		}
-		
-		*out_len = FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES;
-
-		memcpy(buf, x25519_pubkey, X25519_KEY_SIZE_BYTES);
+    else 
+    {
+        //X25519KYBER768Dreaft00 key		
+        fips203ipd_genkemkey();
+        //ECDSA public key
+        if (mbedtls_ssl_get_psa_curve_info_from_tls_id(
+                MBEDTLS_SSL_IANA_TLS_GROUP_X25519, &key_type, &bits) == PSA_SUCCESS)
+        {
+            alg = PSA_ALG_ECDH;
+        }
+        if (key_type == PSA_KEY_TYPE_NONE) {
+            return MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE;
+        }
+
+        if (buf_size < PSA_BITS_TO_BYTES(bits)) {
+            return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
+        }
+
+        handshake->xxdh_psa_type = key_type;
+        ssl->handshake->xxdh_psa_bits = bits;
+
+        key_attributes = psa_key_attributes_init();
+        psa_set_key_usage_flags(&key_attributes, PSA_KEY_USAGE_DERIVE);
+        psa_set_key_algorithm(&key_attributes, alg);
+        psa_set_key_type(&key_attributes, handshake->xxdh_psa_type);
+        psa_set_key_bits(&key_attributes, handshake->xxdh_psa_bits);
+
+        //Generate ECDH private key.
+        status = psa_generate_key(&key_attributes,
+                                    &handshake->xxdh_psa_privkey);
+        if (status != PSA_SUCCESS) {
+            ret = PSA_TO_MBEDTLS_ERR(status);
+            MBEDTLS_SSL_DEBUG_RET(1, "psa_generate_key", ret);
+            return ret;
+
+        }
+
+        //Export the public part of the ECDH private key from PSA.
+        status = psa_export_public_key(handshake->xxdh_psa_privkey,
+                                        x25519_pubkey, X25519_KEY_SIZE_BYTES,
+                                        &own_pubkey_len);
+
+        if (status != PSA_SUCCESS) {
+            ret = PSA_TO_MBEDTLS_ERR(status);
+            MBEDTLS_SSL_DEBUG_RET(1, "psa_export_public_key", ret);
+            return ret;
+        }
+
+        *out_len = FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES;
+
+        memcpy(buf, x25519_pubkey, X25519_KEY_SIZE_BYTES);
         memcpy(&buf[X25519_KEY_SIZE_BYTES], fips203ipd_kem->fips203ipd_ek, FIPS203IPD_KEM768_EK_SIZE);
     }
     return 0;	
diff --git a/library/ssl_tls13_keys.c b/library/ssl_tls13_keys.c
index 825d52c64232..077480a01b80 100644
--- a/library/ssl_tls13_keys.c
+++ b/library/ssl_tls13_keys.c
@@ -1523,14 +1523,14 @@ static int ssl_tls13_key_schedule_stage_handshake(mbedtls_ssl_context *ssl)
             handshake->xxdh_psa_privkey = MBEDTLS_SVC_KEY_ID_INIT;
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
         } 
-		else if(handshake->offered_group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
-		{
-			psa_algorithm_t alg = PSA_ALG_ECDH;
-			psa_status_t status = PSA_ERROR_GENERIC_ERROR;
+        else if(handshake->offered_group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
+        {
+            psa_algorithm_t alg = PSA_ALG_ECDH;
+            psa_status_t status = PSA_ERROR_GENERIC_ERROR;
             psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;
 
             status = psa_get_key_attributes(handshake->xxdh_psa_privkey,
-                                            &key_attributes);
+                                        &key_attributes);
             if (status != PSA_SUCCESS) {
                 ret = PSA_TO_MBEDTLS_ERR(status);
             }
@@ -1540,25 +1540,20 @@ static int ssl_tls13_key_schedule_stage_handshake(mbedtls_ssl_context *ssl)
             if (shared_secret == NULL) {
                 return MBEDTLS_ERR_SSL_ALLOC_FAILED;
             }
-			
-			//Need to retrieve the KEM768's SS as it is reset by psa_raw_key_agreement().
-			uint8_t tmp_kem768_ss[32];
-			memcpy(tmp_kem768_ss, &handshake->xxdh_psa_peerkey[32], 32);
-            status = psa_raw_key_agreement(
-                alg, handshake->xxdh_psa_privkey,
-                handshake->xxdh_psa_peerkey, 32,
-                shared_secret, 32, &shared_secret_len);
-			memcpy(&shared_secret[32], tmp_kem768_ss, 32);
-			shared_secret_len += 32;
-			int i;
-			printf("\nFinal result at end of handshake of X25519MLKEM768draft00 SS with length of %u\n", shared_secret_len);
-			for(i=0; i<64; i++) printf("%02x", shared_secret[i]);
-			printf("\n");
+
+            //Need to retrieve the KEM768's SS as it is reset by psa_raw_key_agreement().
+            uint8_t tmp_kem768_ss[32];
+            memcpy(tmp_kem768_ss, &handshake->xxdh_psa_peerkey[32], 32);
+            status = psa_raw_key_agreement(alg, handshake->xxdh_psa_privkey,handshake->xxdh_psa_peerkey, 32, shared_secret, 32, &shared_secret_len);
             if (status != PSA_SUCCESS) {
                 ret = PSA_TO_MBEDTLS_ERR(status);
                 MBEDTLS_SSL_DEBUG_RET(1, "psa_raw_key_agreement", ret);
                 goto cleanup;
             }
+            else{
+                memcpy(&shared_secret[32], tmp_kem768_ss, 32);
+                shared_secret_len += 32;
+            }
 
             status = psa_destroy_key(handshake->xxdh_psa_privkey);
             if (status != PSA_SUCCESS) {
@@ -1568,7 +1563,7 @@ static int ssl_tls13_key_schedule_stage_handshake(mbedtls_ssl_context *ssl)
             }
 
             handshake->xxdh_psa_privkey = MBEDTLS_SVC_KEY_ID_INIT;			
-		} 
+        } 
 		else {
             MBEDTLS_SSL_DEBUG_MSG(1, ("Group not supported."));
             return MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

From 002a135e53ae8ff9d230d28373ccf65b8630232e Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Tue, 15 Oct 2024 14:11:42 +0100
Subject: [PATCH 03/10] code cleanup

---
 library/ssl_tls13_client.c  |  2 +-
 library/ssl_tls13_generic.c | 25 +++++++++++++++++--------
 2 files changed, 18 insertions(+), 9 deletions(-)

diff --git a/library/ssl_tls13_client.c b/library/ssl_tls13_client.c
index d64a6367039e..d5cc4d101868 100644
--- a/library/ssl_tls13_client.c
+++ b/library/ssl_tls13_client.c
@@ -342,7 +342,7 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
         MBEDTLS_PUT_UINT16_BE(group_id, group, 0);
         /* Write key_exchange_length */
         MBEDTLS_PUT_UINT16_BE(key_exchange_len, group, 2);
-	} else
+    } else
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
     if (0 /* other KEMs? */) {
         /* Do something */
diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index 4f714ef4106c..05ebcc96c871 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1537,14 +1537,21 @@ static psa_status_t  mbedtls_ssl_get_psa_ffdh_info_from_tls_id(
 #define X25519_KEY_SIZE_BYTES 32
 
 struct X25519Kyber768_ctx *fips203ipd_kem;
-void fips203ipd_genkemkey(void);
-void fips203ipd_genkemkey(void)
+int fips203ipd_genkemkey(void);
+int fips203ipd_genkemkey(void)
 {
     uint8_t keygen_seed[64] = { 0 };
-    fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));//malloc(sizeof(struct X25519Kyber768_ctx));
-    rand_bytes(keygen_seed, 32);
-    rand_bytes(&keygen_seed[32], 32);
-    fips203ipd_kem768_keygen(fips203ipd_kem->fips203ipd_ek, fips203ipd_kem->fips203ipd_dk, keygen_seed);
+    fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));
+    if(fips203ipd_kem != NULL)
+    {
+        rand_bytes(keygen_seed, 32);
+        rand_bytes(&keygen_seed[32], 32);
+        fips203ipd_kem768_keygen(fips203ipd_kem->fips203ipd_ek, fips203ipd_kem->fips203ipd_dk, keygen_seed);
+        return 0;
+    }
+    else{
+        return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
+    }
 }
 
 int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
@@ -1573,8 +1580,10 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
     }
     else 
     {
-        //X25519KYBER768Dreaft00 key		
-        fips203ipd_genkemkey();
+        //X25519KYBER768Dreaft00 key
+        ret = fips203ipd_genkemkey();	
+        if(ret != 0)
+            return ret;
         //ECDSA public key
         if (mbedtls_ssl_get_psa_curve_info_from_tls_id(
                 MBEDTLS_SSL_IANA_TLS_GROUP_X25519, &key_type, &bits) == PSA_SUCCESS)

From 8a22184459f68930f601f0ce0be10e2b0ee27ab9 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Tue, 15 Oct 2024 14:16:08 +0100
Subject: [PATCH 04/10] code cleanup

---
 library/ssl_tls13_client.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/library/ssl_tls13_client.c b/library/ssl_tls13_client.c
index d5cc4d101868..fe187e8c4e0f 100644
--- a/library/ssl_tls13_client.c
+++ b/library/ssl_tls13_client.c
@@ -522,8 +522,8 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
     if (0 /* other KEMs? */) {
         /* Do something */
     }
-	else if(group == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
-	{
+    else if(group == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
+    {
         ret = MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER;
 
         p += 2;//length
@@ -551,7 +551,7 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
         return 0;
 
 	} 
-	else {
+    else {
         return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
     }
 

From 2cfa771e8ca50ea5d802cd40f1d52e596f721379 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Tue, 15 Oct 2024 14:30:31 +0100
Subject: [PATCH 05/10] code cleanup

---
 library/ssl_tls13_generic.c | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index 05ebcc96c871..6d259d0edcfb 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1535,10 +1535,8 @@ static psa_status_t  mbedtls_ssl_get_psa_ffdh_info_from_tls_id(
 #include "rand-bytes.h"
 #include "fips203ipd.h"
 #define X25519_KEY_SIZE_BYTES 32
-
 struct X25519Kyber768_ctx *fips203ipd_kem;
-int fips203ipd_genkemkey(void);
-int fips203ipd_genkemkey(void)
+static int fips203ipd_genkemkey(void)
 {
     uint8_t keygen_seed[64] = { 0 };
     fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));

From 50103c83f5c5db57618904a7b32e4ce4f7dc61b9 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Wed, 16 Oct 2024 10:14:06 +0100
Subject: [PATCH 06/10] code cleanup

---
 library/hex.h | 15 ---------------
 1 file changed, 15 deletions(-)
 delete mode 100644 library/hex.h

diff --git a/library/hex.h b/library/hex.h
deleted file mode 100644
index 246aeed478bd..000000000000
--- a/library/hex.h
+++ /dev/null
@@ -1,15 +0,0 @@
-#ifndef HEX_H
-#define HEX_H
-
-#include <stdio.h> // fprintf()
-#include <stdint.h> // uint8_t
-
-// print hex-encoded buffer to given file handle.
-// (used by top-level main.c)
-static void hex_write(FILE *fh, const uint8_t * const buf, const size_t len) {
-  for (size_t i = 0; i < len; i++) {
-    fprintf(fh, "%02x", buf[i]);
-  }
-}
-
-#endif /* HEX_H */

From 6298216f9e6a26982eb6df60f7edaa30a94d3ab2 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Thu, 17 Oct 2024 09:21:49 +0100
Subject: [PATCH 07/10] correct way of RNG

---
 library/ssl_tls13_generic.c | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index 6d259d0edcfb..998d45c229f9 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1532,23 +1532,25 @@ static psa_status_t  mbedtls_ssl_get_psa_ffdh_info_from_tls_id(
 }
 #endif /* PSA_WANT_ALG_FFDH */
 
-#include "rand-bytes.h"
 #include "fips203ipd.h"
 #define X25519_KEY_SIZE_BYTES 32
 struct X25519Kyber768_ctx *fips203ipd_kem;
 static int fips203ipd_genkemkey(void)
 {
     uint8_t keygen_seed[64] = { 0 };
+    int ret;
     fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));
     if(fips203ipd_kem != NULL)
     {
-        rand_bytes(keygen_seed, 32);
-        rand_bytes(&keygen_seed[32], 32);
-        fips203ipd_kem768_keygen(fips203ipd_kem->fips203ipd_ek, fips203ipd_kem->fips203ipd_dk, keygen_seed);
+        ret = psa_generate_random(keygen_seed, sizeof(keygen_seed));
+        if(ret != 0)
+            return ret;
+        else
+            fips203ipd_kem768_keygen(fips203ipd_kem->fips203ipd_ek, fips203ipd_kem->fips203ipd_dk, keygen_seed);
         return 0;
     }
     else{
-        return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
+        return PSA_ERROR_INSUFFICIENT_MEMORY;
     }
 }
 

From 57952c9a5189392cb206b4f857987eff3d86458b Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Tue, 22 Oct 2024 12:30:16 +0100
Subject: [PATCH 08/10] PQClean lib added

---
 library/CMakeLists.txt      |     3 +-
 library/Makefile            |     3 +-
 library/api.h               |    18 +
 library/cbd.c               |    83 +
 library/cbd.h               |    11 +
 library/fips203ipd.c        | 25767 ----------------------------------
 library/fips203ipd.h        |   397 -
 library/indcpa.c            |   327 +
 library/indcpa.h            |    22 +
 library/kem.c               |   164 +
 library/kem.h               |    30 +
 library/ntt.c               |   146 +
 library/ntt.h               |    14 +
 library/params.h            |    36 +
 library/poly.c              |   299 +
 library/poly.h              |    37 +
 library/polyvec.c           |   188 +
 library/polyvec.h           |    26 +
 library/rand-bytes.h        |    21 -
 library/randombytes.c       |   357 +
 library/randombytes.h       |    27 +
 library/reduce.c            |    41 +
 library/reduce.h            |    13 +
 library/ssl_tls13_client.c  |    13 +-
 library/ssl_tls13_generic.c |    21 +-
 library/symmetric-shake.c   |    71 +
 library/symmetric.h         |    30 +
 library/verify.c            |    66 +
 library/verify.h            |    13 +
 29 files changed, 2039 insertions(+), 26205 deletions(-)
 create mode 100644 library/api.h
 create mode 100644 library/cbd.c
 create mode 100644 library/cbd.h
 delete mode 100644 library/fips203ipd.c
 delete mode 100644 library/fips203ipd.h
 create mode 100644 library/indcpa.c
 create mode 100644 library/indcpa.h
 create mode 100644 library/kem.c
 create mode 100644 library/kem.h
 create mode 100644 library/ntt.c
 create mode 100644 library/ntt.h
 create mode 100644 library/params.h
 create mode 100644 library/poly.c
 create mode 100644 library/poly.h
 create mode 100644 library/polyvec.c
 create mode 100644 library/polyvec.h
 delete mode 100644 library/rand-bytes.h
 create mode 100644 library/randombytes.c
 create mode 100644 library/randombytes.h
 create mode 100644 library/reduce.c
 create mode 100644 library/reduce.h
 create mode 100644 library/symmetric-shake.c
 create mode 100644 library/symmetric.h
 create mode 100644 library/verify.c
 create mode 100644 library/verify.h

diff --git a/library/CMakeLists.txt b/library/CMakeLists.txt
index 21c37a03f193..c32446056ee9 100644
--- a/library/CMakeLists.txt
+++ b/library/CMakeLists.txt
@@ -81,6 +81,7 @@ set(src_crypto
     psa_crypto_storage.c
     psa_its_file.c
     psa_util.c
+	cbd.c indcpa.c kem.c ntt.c poly.c polyvec.c reduce.c symmetric-shake.c verify.c randombytes.c fips202.c
     ripemd160.c
     rsa.c
     rsa_alt_helpers.c
@@ -108,8 +109,6 @@ set(src_x509
 
 set(src_tls
     debug.c
-	fips202.c
-	fips203ipd.c
     mps_reader.c
     mps_trace.c
     net_sockets.c
diff --git a/library/Makefile b/library/Makefile
index 4818779ef38e..bea07f8db2fe 100644
--- a/library/Makefile
+++ b/library/Makefile
@@ -173,6 +173,7 @@ OBJS_CRYPTO= \
 	     psa_crypto_storage.o \
 	     psa_its_file.o \
 	     psa_util.o \
+		 cbd.o indcpa.o kem.o ntt.o poly.o polyvec.o reduce.o symmetric-shake.o verify.o randombytes.o fips202.o \
 	     ripemd160.o \
 	     rsa.o \
 	     rsa_alt_helpers.o \
@@ -204,8 +205,6 @@ OBJS_X509= \
 
 OBJS_TLS= \
 	  debug.o \
-	  fips202.o \
-	  fips203ipd.o \
 	  mps_reader.o \
 	  mps_trace.o \
 	  net_sockets.o \
diff --git a/library/api.h b/library/api.h
new file mode 100644
index 000000000000..4d2fe6b4c5ed
--- /dev/null
+++ b/library/api.h
@@ -0,0 +1,18 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_API_H
+#define PQCLEAN_MLKEM768_CLEAN_API_H
+
+#include <stdint.h>
+
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_SECRETKEYBYTES  2400
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_PUBLICKEYBYTES  1184
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_CIPHERTEXTBYTES 1088
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_BYTES           32
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_ALGNAME "ML-KEM-768"
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair(uint8_t *pk, uint8_t *sk);
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc(uint8_t *ct, uint8_t *ss, const uint8_t *pk);
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const uint8_t *sk);
+
+#endif
diff --git a/library/cbd.c b/library/cbd.c
new file mode 100644
index 000000000000..4cbafa60dad5
--- /dev/null
+++ b/library/cbd.c
@@ -0,0 +1,83 @@
+#include "cbd.h"
+#include "params.h"
+#include <stdint.h>
+
+/*************************************************
+* Name:        load32_littleendian
+*
+* Description: load 4 bytes into a 32-bit integer
+*              in little-endian order
+*
+* Arguments:   - const uint8_t *x: pointer to input byte array
+*
+* Returns 32-bit unsigned integer loaded from x
+**************************************************/
+static uint32_t load32_littleendian(const uint8_t x[4]) {
+    uint32_t r;
+    r  = (uint32_t)x[0];
+    r |= (uint32_t)x[1] << 8;
+    r |= (uint32_t)x[2] << 16;
+    r |= (uint32_t)x[3] << 24;
+    return r;
+}
+
+/*************************************************
+* Name:        load24_littleendian
+*
+* Description: load 3 bytes into a 32-bit integer
+*              in little-endian order.
+*              This function is only needed for Kyber-512
+*
+* Arguments:   - const uint8_t *x: pointer to input byte array
+*
+* Returns 32-bit unsigned integer loaded from x (most significant byte is zero)
+**************************************************/
+
+
+/*************************************************
+* Name:        cbd2
+*
+* Description: Given an array of uniformly random bytes, compute
+*              polynomial with coefficients distributed according to
+*              a centered binomial distribution with parameter eta=2
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const uint8_t *buf: pointer to input byte array
+**************************************************/
+static void cbd2(poly *r, const uint8_t buf[2 * KYBER_N / 4]) {
+    unsigned int i, j;
+    uint32_t t, d;
+    int16_t a, b;
+
+    for (i = 0; i < KYBER_N / 8; i++) {
+        t  = load32_littleendian(buf + 4 * i);
+        d  = t & 0x55555555;
+        d += (t >> 1) & 0x55555555;
+
+        for (j = 0; j < 8; j++) {
+            a = (d >> (4 * j + 0)) & 0x3;
+            b = (d >> (4 * j + 2)) & 0x3;
+            r->coeffs[8 * i + j] = a - b;
+        }
+    }
+}
+
+/*************************************************
+* Name:        cbd3
+*
+* Description: Given an array of uniformly random bytes, compute
+*              polynomial with coefficients distributed according to
+*              a centered binomial distribution with parameter eta=3.
+*              This function is only needed for Kyber-512
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const uint8_t *buf: pointer to input byte array
+**************************************************/
+
+void PQCLEAN_MLKEM768_CLEAN_poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1 * KYBER_N / 4]) {
+    cbd2(r, buf);
+}
+
+void PQCLEAN_MLKEM768_CLEAN_poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2 * KYBER_N / 4]) {
+    cbd2(r, buf);
+}
diff --git a/library/cbd.h b/library/cbd.h
new file mode 100644
index 000000000000..235acfa181f1
--- /dev/null
+++ b/library/cbd.h
@@ -0,0 +1,11 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_CBD_H
+#define PQCLEAN_MLKEM768_CLEAN_CBD_H
+#include "params.h"
+#include "poly.h"
+#include <stdint.h>
+
+void PQCLEAN_MLKEM768_CLEAN_poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1 * KYBER_N / 4]);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2 * KYBER_N / 4]);
+
+#endif
diff --git a/library/fips203ipd.c b/library/fips203ipd.c
deleted file mode 100644
index 9a9ae99cbba9..000000000000
--- a/library/fips203ipd.c
+++ /dev/null
@@ -1,25767 +0,0 @@
-//
-// Copyright (c) 2023-2024 Paul Duncan
-// SPDX-License-Identifier: MIT-0
-//
-// C11 implementation of the KEM512, KEM768, and KEM1024 parameter sets
-// from the FIPS 203 initial public draft (IPD).
-//
-// This file is organized as follows:
-//
-// 1. Internal SHA3 and SHAKE structures (copied from `sha3.h`).
-// 2. Internal Keccak permutation functions (copied from `sha3.c`
-//    with minor changes, see notes below for details).
-// 3. Internal hash and XOF functions (copied from `sha3.c` with minor
-//    changes).
-// 4. SHA3-256, SHA3-512, SHAKE128, and SHAKE256 definitions (copied
-//    from `sha3.c` with minor changes).
-// 5. PKE512, PKE768, and PKE1024 parameter definitions.
-// 6. Internal NTT and polynomial multiplication lookup tables.
-// 7. Internal utility functions.  In particular, the constant-time
-//    Barrett reduction function `ct_mod_q()` is here.
-// 8. Internal polynomial functions.  Many of these functions have
-//    scalar and AVX-512 implementations.
-// 9. Matrix functions.
-// 10. Internal PKE512 keygen, encrypt, and decrypt functions.
-// 11. Public KEM512 keygen, encapsulation, and decapsulation functions.
-// 12. Internal PKE768 keygen, encrypt, and decrypt functions.
-// 13. Public KEM768 keygen, encapsulation, and decapsulation functions.
-// 14. Internal PKE1024 keygen, encrypt, and decrypt functions.
-// 15. Public KEM1024 keygen, encapsulation, and decapsulation functions.
-// 16. Internal testing utility functions and tests.  This section is
-//     only compiled if `TEST_FIPS203IPD` is defined).
-//
-// The source for `sha3.h` and `sha3.c` is my FIPS 202, SP 800-185,
-// TurboSHAKE and KangarooTwelve implementation, which is available at
-// the following URL:
-//
-//   https://github.com/pablotron/sha3
-
-/** @cond INTERNAL */
-
-#include <stdbool.h> // bool
-#include <stddef.h> // size_t
-#include <stdint.h> // uint8_t
-#include <string.h> // memcpy()
-#include "fips203ipd.h" // fips203ipd_*()
-
-// available backends
-#define BACKEND_AUTO 0        // auto-detect (default)
-#define BACKEND_SCALAR 1      // scalar backend
-#define BACKEND_AVX512 2      // AVX-512 backend
-#define BACKEND_NEON 3        // Neon backend
-
-// if BACKEND is defined and set to 0 (the default), then
-// unset it and auto-detect the appropriate backend
-#if defined(BACKEND) && BACKEND == BACKEND_AUTO
-#undef BACKEND
-#endif /* defined(BACKEND) && BACKEND == 0 */
-
-// detect backend
-#ifndef BACKEND
-#if defined(__AVX512F__)
-#define BACKEND BACKEND_AVX512
-#elif defined(__ARM_ARCH_ISA_A64) && defined(__ARM_NEON)
-#define BACKEND BACKEND_NEON
-#else
-// no optimized backend detected, fall back to scalar
-#define BACKEND BACKEND_SCALAR
-#endif
-#endif /* !BACKEND */
-
-// begin sha3.h
-// note: typedefs copied from sha3.h
-
-/**
- * @brief Internal [SHA-3][] state (all members are private).
- * @ingroup sha3
- *
- * [SHA-3]: https://en.wikipedia.org/wiki/SHA-3
- *   "Secure Hash Algorithm 3"
- */
-typedef union {
-  uint8_t u8[200]; /**< 8-bit unsigned integers. */
-  uint64_t u64[25]; /**< 64-bit unsigned integers. */
-} sha3_state_t;
-
-/**
- * @brief Iterative [XOF][] context (all members are private).
- * @ingroup shake
- *
- * [xof]: https://en.wikipedia.org/wiki/Extendable-output_function
- *   "Extendable-Output Function (XOF)"
- */
-typedef struct {
-  size_t num_bytes; /**< number of bytes absorbed */
-  sha3_state_t a; /**< internal state */
-  _Bool squeezing; /**< mode (absorbing or squeezing) */
-} sha3_xof_t;
-
-// end sha3.h
-
-// begin sha3.c
-// note: copied from `sha3.c` with the following changes:
-//
-// 1. sha3-224 and sha3-384 removed (unused by fips203).
-// 2. iterative hash functions removed (unused by fips203).
-// 3. one-shot shake128 removed (unused by fips203).
-// 4. iterative shake256 functions removed (unused by fips203).
-// 5. visibility for hash and xof functions set to `static inline`.
-// 6. removed "defined(SHA3_TEST)" (unused by fips203).
-// 7. add ALIGN() macro (backport to sha3.c).
-// 8. moved RCS to static global (backport to sha3.c).
-// 9. only build xof_absorb(), xof_squeeze(), and shake128 context
-//    functions if __AVX512F__ is not defined or TEST_FIPS203IPD is
-//    defined.
-// 10. lots of changes to avx512 permute() based on output
-//     of `bench` and `perf`.
-// 11. num_rounds removed from permute() and calls to it.
-// 12. rename avx512 permute() to permute_avx512() and scalar permute()
-//     to permute_scalar().
-
-// 64-bit rotate left
-#define ROL(v, n) (((v) << (n)) | ((v) >> (64-(n))))
-
-// minimum of two values
-#define MIN(a, b) (((a) < (b)) ? (a) : (b))
-
-// number of rounds for permute()
-#define SHA3_NUM_ROUNDS 24
-
-// align memory to N bytes
-#define ALIGN(N) __attribute__((aligned(N)))
-
-// iota step round constants
-static const uint64_t RCS[] ALIGN(64) = {
-  0x0000000000000001ULL, 0x0000000000008082ULL, 0x800000000000808aULL, 0x8000000080008000ULL,
-  0x000000000000808bULL, 0x0000000080000001ULL, 0x8000000080008081ULL, 0x8000000000008009ULL,
-  0x000000000000008aULL, 0x0000000000000088ULL, 0x0000000080008009ULL, 0x000000008000000aULL,
-  0x000000008000808bULL, 0x800000000000008bULL, 0x8000000000008089ULL, 0x8000000000008003ULL,
-  0x8000000000008002ULL, 0x8000000000000080ULL, 0x000000000000800aULL, 0x800000008000000aULL,
-  0x8000000080008081ULL, 0x8000000000008080ULL, 0x0000000080000001ULL, 0x8000000080008008ULL,
-};
-
-#if BACKEND == BACKEND_SCALAR || BACKEND == BACKEND_NEON
-// Note: Only compile the scalar Keccak step functions if the scalar or
-// neon backends are active.
-
-// theta step of keccak permutation (scalar implementation)
-static inline void theta(uint64_t a[static 25]) {
-  const uint64_t c[5] = {
-    a[0] ^ a[5] ^ a[10] ^ a[15] ^ a[20],
-    a[1] ^ a[6] ^ a[11] ^ a[16] ^ a[21],
-    a[2] ^ a[7] ^ a[12] ^ a[17] ^ a[22],
-    a[3] ^ a[8] ^ a[13] ^ a[18] ^ a[23],
-    a[4] ^ a[9] ^ a[14] ^ a[19] ^ a[24],
-  };
-
-  const uint64_t d[5] = {
-    c[4] ^ ROL(c[1], 1),
-    c[0] ^ ROL(c[2], 1),
-    c[1] ^ ROL(c[3], 1),
-    c[2] ^ ROL(c[4], 1),
-    c[3] ^ ROL(c[0], 1),
-  };
-
-  a[ 0] ^= d[0]; a[ 1] ^= d[1]; a[ 2] ^= d[2]; a[ 3] ^= d[3]; a[ 4] ^= d[4];
-  a[ 5] ^= d[0]; a[ 6] ^= d[1]; a[ 7] ^= d[2]; a[ 8] ^= d[3]; a[ 9] ^= d[4];
-  a[10] ^= d[0]; a[11] ^= d[1]; a[12] ^= d[2]; a[13] ^= d[3]; a[14] ^= d[4];
-  a[15] ^= d[0]; a[16] ^= d[1]; a[17] ^= d[2]; a[18] ^= d[3]; a[19] ^= d[4];
-  a[20] ^= d[0]; a[21] ^= d[1]; a[22] ^= d[2]; a[23] ^= d[3]; a[24] ^= d[4];
-}
-
-// rho step of keccak permutation (scalar implementation)
-static inline void rho(uint64_t a[static 25]) {
-  a[1] = ROL(a[1], 1); // 1 % 64 = 1
-  a[2] = ROL(a[2], 62); // 190 % 64 = 62
-  a[3] = ROL(a[3], 28); // 28 % 64 = 28
-  a[4] = ROL(a[4], 27); // 91 % 64 = 27
-  a[5] = ROL(a[5], 36); // 36 % 64 = 36
-  a[6] = ROL(a[6], 44); // 300 % 64 = 44
-  a[7] = ROL(a[7], 6); // 6 % 64 = 6
-  a[8] = ROL(a[8], 55); // 55 % 64 = 55
-  a[9] = ROL(a[9], 20); // 276 % 64 = 20
-  a[10] = ROL(a[10], 3); // 3 % 64 = 3
-  a[11] = ROL(a[11], 10); // 10 % 64 = 10
-  a[12] = ROL(a[12], 43); // 171 % 64 = 43
-  a[13] = ROL(a[13], 25); // 153 % 64 = 25
-  a[14] = ROL(a[14], 39); // 231 % 64 = 39
-  a[15] = ROL(a[15], 41); // 105 % 64 = 41
-  a[16] = ROL(a[16], 45); // 45 % 64 = 45
-  a[17] = ROL(a[17], 15); // 15 % 64 = 15
-  a[18] = ROL(a[18], 21); // 21 % 64 = 21
-  a[19] = ROL(a[19], 8); // 136 % 64 = 8
-  a[20] = ROL(a[20], 18); // 210 % 64 = 18
-  a[21] = ROL(a[21], 2); // 66 % 64 = 2
-  a[22] = ROL(a[22], 61); // 253 % 64 = 61
-  a[23] = ROL(a[23], 56); // 120 % 64 = 56
-  a[24] = ROL(a[24], 14); // 78 % 64 = 14
-}
-
-// pi step of keccak permutation (scalar implementation)
-static inline void pi(uint64_t dst[static 25], const uint64_t src[static 25]) {
-  dst[0] = src[0];
-  dst[1] = src[6];
-  dst[2] = src[12];
-  dst[3] = src[18];
-  dst[4] = src[24];
-  dst[5] = src[3];
-  dst[6] = src[9];
-  dst[7] = src[10];
-  dst[8] = src[16];
-  dst[9] = src[22];
-  dst[10] = src[1];
-  dst[11] = src[7];
-  dst[12] = src[13];
-  dst[13] = src[19];
-  dst[14] = src[20];
-  dst[15] = src[4];
-  dst[16] = src[5];
-  dst[17] = src[11];
-  dst[18] = src[17];
-  dst[19] = src[23];
-  dst[20] = src[2];
-  dst[21] = src[8];
-  dst[22] = src[14];
-  dst[23] = src[15];
-  dst[24] = src[21];
-}
-
-// chi step of keccak permutation (scalar implementation)
-static inline void chi(uint64_t dst[static 25], const uint64_t src[static 25]) {
-  dst[0] = src[0] ^ (~src[1] & src[2]);
-  dst[1] = src[1] ^ (~src[2] & src[3]);
-  dst[2] = src[2] ^ (~src[3] & src[4]);
-  dst[3] = src[3] ^ (~src[4] & src[0]);
-  dst[4] = src[4] ^ (~src[0] & src[1]);
-  dst[5] = src[5] ^ (~src[6] & src[7]);
-  dst[6] = src[6] ^ (~src[7] & src[8]);
-  dst[7] = src[7] ^ (~src[8] & src[9]);
-  dst[8] = src[8] ^ (~src[9] & src[5]);
-  dst[9] = src[9] ^ (~src[5] & src[6]);
-  dst[10] = src[10] ^ (~src[11] & src[12]);
-  dst[11] = src[11] ^ (~src[12] & src[13]);
-  dst[12] = src[12] ^ (~src[13] & src[14]);
-  dst[13] = src[13] ^ (~src[14] & src[10]);
-  dst[14] = src[14] ^ (~src[10] & src[11]);
-  dst[15] = src[15] ^ (~src[16] & src[17]);
-  dst[16] = src[16] ^ (~src[17] & src[18]);
-  dst[17] = src[17] ^ (~src[18] & src[19]);
-  dst[18] = src[18] ^ (~src[19] & src[15]);
-  dst[19] = src[19] ^ (~src[15] & src[16]);
-  dst[20] = src[20] ^ (~src[21] & src[22]);
-  dst[21] = src[21] ^ (~src[22] & src[23]);
-  dst[22] = src[22] ^ (~src[23] & src[24]);
-  dst[23] = src[23] ^ (~src[24] & src[20]);
-  dst[24] = src[24] ^ (~src[20] & src[21]);
-}
-
-// iota step of keccak permutation (scalar implementation)
-static inline void iota(uint64_t a[static 25], const int i) {
-  a[0] ^= RCS[i];
-}
-
-// keccak permutation (scalar implementation)
-static inline void permute_scalar(uint64_t a[static 25]) {
-  uint64_t tmp[25] = { 0 };
-
-  for (int i = 0; i < SHA3_NUM_ROUNDS; i++) {
-    theta(a);
-    rho(a);
-    pi(tmp, a);
-    chi(a, tmp);
-    iota(a, i);
-  }
-}
-#endif /* BACKEND == BACKEND_SCALAR || BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_AVX512
-#include <immintrin.h>
-
-// keccak permutation (avx512 implementation).
-//
-// copied from `permute_avx512_fast()` in `tests/permute/permute.c`. all
-// steps are inlined as blocks. ~3x faster than scalar implementation,
-// but could be sped up more.
-//
-// how it operates (roughly):
-//
-// 1. load rows from state `s` into the first 5 64-bit lanes of AVX-512
-// registers r0-r4, like so:
-//
-//   -----------------------------------------------------------------
-//   |     |                         Lanes                           |
-//   |-----|---------------------------------------------------------|
-//   | Reg |   0   |   1   |   2   |   3   |   4   |  5  |  6  |  7  |
-//   |-----|-------|-------|-------|-------|-------|-----|-----|-----|
-//   | r0  | s[ 0] | s[ 1] | s[ 2] | s[ 3] | s[ 4] | n/a | n/a | n/a |
-//   | r0  | s[ 0] | s[ 1] | s[ 2] | s[ 3] | s[ 4] | n/a | n/a | n/a |
-//   | r1  | s[ 5] | s[ 6] | s[ 7] | s[ 8] | s[ 9] | n/a | n/a | n/a |
-//   | r2  | s[10] | s[11] | s[12] | s[13] | s[14] | n/a | n/a | n/a |
-//   | r3  | s[15] | s[16] | s[17] | s[18] | s[19] | n/a | n/a | n/a |
-//   | r4  | s[20] | s[21] | s[22] | s[23] | s[24] | n/a | n/a | n/a |
-//   -----------------------------------------------------------------
-//
-// 2. For each round of 24 rounds:
-//   a. Perform theta, rho, pi, and chi steps.  pi, in particular, has
-//      a large number of permutation registers (so it may spill).
-//   b. Load round constant for current round and perform iota step.
-//
-// 3. store the rows first 5 64-bit lanes of registers r0-r4 back to the
-// state `s`.
-//
-static inline void permute_avx512(uint64_t s[static 25]) {
-  // load rows (r0-r4)
-  __m512i r0 = _mm512_maskz_loadu_epi64(0x1f, s +  0), // row 0
-          r1 = _mm512_maskz_loadu_epi64(0x1f, s +  5), // row 1
-          r2 = _mm512_maskz_loadu_epi64(0x1f, s + 10), // row 2
-          r3 = _mm512_maskz_loadu_epi64(0x1f, s + 15), // row 3
-          r4 = _mm512_maskz_loadu_epi64(0x1f, s + 20); // row 4
-
-  // 24 rounds
-  for (size_t i = 0; i < SHA3_NUM_ROUNDS; i++) {
-    // theta
-    {
-      // permute ids
-      static const __m512i I0 = { 4, 0, 1, 2, 3 },
-                           I1 = { 1, 2, 3, 4, 0 };
-
-      // c = xor(r0, r1, r2, r3, r4)
-      const __m512i r01 = _mm512_maskz_xor_epi64(0x1f, r0, r1),
-                    r23 = _mm512_maskz_xor_epi64(0x1f, r2, r3),
-                    c = _mm512_maskz_ternarylogic_epi64(0x1f, r01, r23, r4, 0x96);
-
-      // d = xor(permute(i0, c), permute(i1, rol(c, 1)))
-      const __m512i d0 = _mm512_permutexvar_epi64(I0, c),
-                    d1 = _mm512_permutexvar_epi64(I1, _mm512_rol_epi64(c, 1)),
-                    d = _mm512_xor_epi64(d0, d1);
-
-      // row = xor(row, d)
-      r0 = _mm512_xor_epi64(r0, d);
-      r1 = _mm512_xor_epi64(r1, d);
-      r2 = _mm512_xor_epi64(r2, d);
-      r3 = _mm512_xor_epi64(r3, d);
-      r4 = _mm512_xor_epi64(r4, d);
-    }
-
-    // rho
-    {
-      // rotate values
-      //
-      // note: switching from maskz_load_epi64()s to static const
-      // __m512i incurs a 500 cycle penalty; leaving them for now
-      static const uint64_t V0_VALS[5] ALIGN(64) = { 0, 1, 62, 28, 27 },
-                            V1_VALS[5] ALIGN(64) = { 36, 44, 6, 55, 20 },
-                            V2_VALS[5] ALIGN(64) = { 3, 10, 43, 25, 39 },
-                            V3_VALS[5] ALIGN(64) = { 41, 45, 15, 21, 8 },
-                            V4_VALS[5] ALIGN(64) = { 18, 2, 61, 56, 14 };
-
-      // rotate rows
-      r0 = _mm512_rolv_epi64(r0, _mm512_maskz_load_epi64(0x1f, V0_VALS));
-      r1 = _mm512_rolv_epi64(r1, _mm512_maskz_load_epi64(0x1f, V1_VALS));
-      r2 = _mm512_rolv_epi64(r2, _mm512_maskz_load_epi64(0x1f, V2_VALS));
-      r3 = _mm512_rolv_epi64(r3, _mm512_maskz_load_epi64(0x1f, V3_VALS));
-      r4 = _mm512_rolv_epi64(r4, _mm512_maskz_load_epi64(0x1f, V4_VALS));
-    }
-
-    // pi
-    //
-    // The cells are permuted across all rows of the state array.  each
-    // output row is the combination of three permutations:
-    //
-    // - e0: row 0 and row 1
-    // - e2: row 2 and row 3
-    // - e4: row 4 and row 0
-    //
-    // the IDs for each permutation are merged into a single array
-    // (T*_IDS) to reduce register pressure, and the permute operations
-    // are masked so that each permutation only uses the relevant IDs.
-    //
-    // afterwards, the permutations are combined to form a temporary
-    // row:
-    //
-    //   t0 = t0e0 | t0e2 | t0e4
-    //
-    // once the permutations for all rows are complete, the temporary
-    // rows are saved to the actual row registers:
-    //
-    //   r0 = t0
-    //
-    {
-      // permute ids
-      static const __m512i T0_IDS = { 0, 8 + 1, 2, 8 + 3, 4 },
-                           T1_IDS = { 3, 8 + 4, 0, 8 + 1, 2 },
-                           T2_IDS = { 1, 8 + 2, 3, 8 + 4, 0 },
-                           T3_IDS = { 4, 8 + 0, 1, 8 + 2, 3 },
-                           T4_IDS = { 2, 8 + 3, 4, 8 + 0, 1 };
-
-      __m512i t0, t1, t2, t3, t4;
-      {
-        // permute r0
-        const __m512i t0e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T0_IDS, r1),
-                      t0e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T0_IDS, r3),
-                      t0e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T0_IDS, r0);
-
-        // permute r1
-        const __m512i t1e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T1_IDS, r1),
-                      t1e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T1_IDS, r3),
-                      t1e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T1_IDS, r0);
-
-        // permute r2
-        const __m512i t2e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T2_IDS, r1),
-                      t2e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T2_IDS, r3),
-                      t2e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T2_IDS, r0);
-
-        // permute r3
-        const __m512i t3e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T3_IDS, r1),
-                      t3e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T3_IDS, r3),
-                      t3e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T3_IDS, r0);
-
-        // permute r4
-        const __m512i t4e0 = _mm512_maskz_permutex2var_epi64(0x03, r0, T4_IDS, r1),
-                      t4e2 = _mm512_maskz_permutex2var_epi64(0x0c, r2, T4_IDS, r3),
-                      t4e4 = _mm512_maskz_permutex2var_epi64(0x10, r4, T4_IDS, r0);
-
-        // combine permutes: tN = e0 | e2 | e4
-        t0 = _mm512_maskz_ternarylogic_epi64(0x1f, t0e0, t0e2, t0e4, 0xfe);
-        t1 = _mm512_maskz_ternarylogic_epi64(0x1f, t1e0, t1e2, t1e4, 0xfe);
-        t2 = _mm512_maskz_ternarylogic_epi64(0x1f, t2e0, t2e2, t2e4, 0xfe);
-        t3 = _mm512_maskz_ternarylogic_epi64(0x1f, t3e0, t3e2, t3e4, 0xfe);
-        t4 = _mm512_maskz_ternarylogic_epi64(0x1f, t4e0, t4e2, t4e4, 0xfe);
-      }
-
-      // store rows
-      r0 = t0;
-      r1 = t1;
-      r2 = t2;
-      r3 = t3;
-      r4 = t4;
-    }
-
-    // chi
-    {
-      // permute ids
-      static const __m512i P0 = { 1, 2, 3, 4, 0 },
-                           P1 = { 2, 3, 4, 0, 1 };
-
-      {
-        // r0 ^= ~e0 & e1
-        const __m512i t0_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r0),
-                      t0_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r0);
-        r0 = _mm512_maskz_ternarylogic_epi64(0x1f, r0, t0_e0, t0_e1, 0xd2);
-      }
-
-      {
-        // r1 ^= ~e0 & e1
-        const __m512i t1_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r1),
-                      t1_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r1);
-        r1 = _mm512_maskz_ternarylogic_epi64(0x1f, r1, t1_e0, t1_e1, 0xd2);
-      }
-
-      {
-        // r2 ^= ~e0 & e1
-        const __m512i t2_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r2),
-                      t2_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r2);
-        r2 = _mm512_maskz_ternarylogic_epi64(0x1f, r2, t2_e0, t2_e1, 0xd2);
-      }
-
-      {
-        // r3 ^= ~e0 & e1
-        const __m512i t3_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r3),
-                      t3_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r3);
-        r3 = _mm512_maskz_ternarylogic_epi64(0x1f, r3, t3_e0, t3_e1, 0xd2);
-      }
-
-      {
-        // r4 ^= ~e0 & e1
-        const __m512i t4_e0 = _mm512_maskz_permutexvar_epi64(0x1f, P0, r4),
-                      t4_e1 = _mm512_maskz_permutexvar_epi64(0x1f, P1, r4);
-        r4 = _mm512_maskz_ternarylogic_epi64(0x1f, r4, t4_e0, t4_e1, 0xd2);
-      }
-    }
-
-    // iota
-    {
-      // xor round constant to first cell
-      r0 = _mm512_mask_xor_epi64(r0, 1, r0, _mm512_maskz_loadu_epi64(1, RCS + i));
-    }
-  }
-
-  // store rows
-  _mm512_mask_storeu_epi64(s + 5 * 0, 0x1f, r0);
-  _mm512_mask_storeu_epi64(s + 5 * 1, 0x1f, r1);
-  _mm512_mask_storeu_epi64(s + 5 * 2, 0x1f, r2);
-  _mm512_mask_storeu_epi64(s + 5 * 3, 0x1f, r3);
-  _mm512_mask_storeu_epi64(s + 5 * 4, 0x1f, r4);
-}
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_AVX512
-#define permute permute_avx512
-#elif BACKEND == BACKEND_SCALAR
-#define permute permute_scalar
-#elif BACKEND == BACKEND_NEON
-// use scalar permute() for neon
-#define permute permute_scalar
-#else
-#error "unknown backend"
-#endif /* BACKEND */
-
-// absorb message into state, return updated byte count
-// used by `hash_absorb()`, `hash_once()`, and `xof_absorb_raw()`
-static inline size_t absorb(sha3_state_t * const a, size_t num_bytes, const size_t rate, const uint8_t *m, size_t m_len) {
-  // absorb aligned chunks
-  if ((num_bytes & 7) == 0 && (((uintptr_t) m) & 7) == 0) {
-    // absorb 32 byte chunks (4 x uint64)
-    while (m_len >= 32 && num_bytes <= rate - 32) {
-      // xor chunk into state
-      // (FIXME: does not vectorize for some reason, even when unrolled)
-      for (size_t i = 0; i < 4; i++) {
-        a->u64[num_bytes/8 + i] ^= ((uint64_t*) m)[i];
-      }
-
-      // update counters
-      num_bytes += 32;
-      m += 32;
-      m_len -= 32;
-
-      if (num_bytes == rate) {
-        // permute state
-        permute(a->u64);
-        num_bytes = 0;
-      }
-    }
-
-    // absorb 8 byte chunks (1 x uint64)
-    while (m_len >= 8 && num_bytes <= rate - 8) {
-      // xor chunk into state
-      a->u64[num_bytes/8] ^= *((uint64_t*) m);
-
-      // update counters
-      num_bytes += 8;
-      m += 8;
-      m_len -= 8;
-
-      if (num_bytes == rate) {
-        // permute state
-        permute(a->u64);
-        num_bytes = 0;
-      }
-    }
-  }
-
-  // absorb remaining bytes
-  for (size_t i = 0; i < m_len; i++) {
-    // xor byte into state
-    a->u8[num_bytes++] ^= m[i];
-
-    if (num_bytes == rate) {
-      // permute state
-      permute(a->u64);
-      num_bytes = 0;
-    }
-  }
-
-  // return byte count
-  return num_bytes;
-}
-
-// Get rate (number of bytes that can be absorbed before the internal
-// state is permuted).
-//
-// For hash functions, the capacity is always 2 times the output length
-// of the hash, and the rate is the total state size (200 bytes) minus
-// the capacity (FIPS 202, Section 5.2).
-//
-// XOFs do not have fixed-length output, but the capacity is 2 times the
-// named strength, and the rate is the total state size (200 bytes)
-// minus the capacity.
-//
-// The table below shows the output size, capacity, and rate for each
-// FIPS 202 function.  All values are in bytes.
-//
-//   ---------------------------------------
-//   | Function | Output | Capacity | Rate |
-//   |----------|--------|----------|------|
-//   | SHA3-224 |     28 |       56 |  144 |
-//   | SHA3-256 |     32 |       64 |  136 |
-//   | SHA3-384 |     48 |       96 |  104 |
-//   | SHA3-512 |     64 |      128 |   72 |
-//   | SHAKE128 |    n/a |       32 |  168 |
-//   | SHAKE256 |    n/a |       64 |  136 |
-//   ---------------------------------------
-//
-#define RATE(len) (200 - 2 * (len))
-
-// one-shot sha3 hash.
-static inline void hash_once(const uint8_t *m, size_t m_len, uint8_t * const dst, const size_t dst_len) {
-  // init state
-  sha3_state_t a = { .u64 = { 0 } };
-
-  // absorb message, get new internal length
-  const size_t len = absorb(&a, 0, RATE(dst_len), m, m_len);
-
-  // append suffix and padding
-  // (note: suffix and padding are ambiguous in spec)
-  a.u8[len] ^= 0x06;
-  a.u8[RATE(dst_len)-1] ^= 0x80;
-
-  // final permutation
-  permute(a.u64);
-
-  // copy to destination
-  memcpy(dst, a.u8, dst_len);
-}
-
-// define hash one-shot hash functions
-#define DEF_HASH(BITS, OUT_LEN) \
-  /* one-shot hash */ \
-  static inline void sha3_ ## BITS(const uint8_t *m, size_t m_len, uint8_t dst[static OUT_LEN]) { \
-    hash_once(m, m_len, dst, OUT_LEN); \
-  }
-
-// declare hash functions
-DEF_HASH(256, 32) // sha3-256
-DEF_HASH(512, 64) // sha3-512
-
-// initialize xof context
-static inline void xof_init(sha3_xof_t * const xof) {
-  memset(xof, 0, sizeof(sha3_xof_t));
-}
-
-// Absorb data into XOF context without checking to see if the
-// context has already been squeezed.
-//
-// Called by `xof_absorb()` and `xof_once()`.
-static inline void xof_absorb_raw(sha3_xof_t * const xof, const size_t rate, const uint8_t *m, size_t m_len) {
-  xof->num_bytes = absorb(&(xof->a), xof->num_bytes, rate, m, m_len);
-}
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-// Absorb data into XOF context.
-//
-// Returns `false` if this context has already been squeezed.
-static inline _Bool xof_absorb(sha3_xof_t * const xof, const size_t rate, const uint8_t * const m, size_t m_len) {
-  // check context state
-  if (xof->squeezing) {
-    // xof has already been squeezed, return error
-    return false;
-  }
-
-  // absorb, return success
-  xof_absorb_raw(xof, rate, m, m_len);
-  return true;
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-// Finalize absorb, switch mode of XOF context to squeezing.
-static inline void xof_absorb_done(sha3_xof_t * const xof, const size_t rate, const uint8_t pad) {
-  // append suffix (s6.2) and padding
-  // (note: suffix and padding are ambiguous in spec)
-  xof->a.u8[xof->num_bytes] ^= pad;
-  xof->a.u8[rate - 1] ^= 0x80;
-
-  // permute
-  permute(xof->a.u64);
-
-  // switch to squeeze mode
-  xof->num_bytes = 0;
-  xof->squeezing = true;
-}
-
-// Squeeze data without checking mode (used by `xof_once()`).
-static inline void xof_squeeze_raw(sha3_xof_t * const xof, const size_t rate, uint8_t *dst, size_t dst_len) {
-  if (!xof->num_bytes) {
-    // num_bytes is zero, so we are reading from the start of the
-    // internal state buffer.  while `dst_len` is greater than rate,
-    // copy `rate` sized chunks directly from the internal state buffer
-    // to the destination, then permute the internal state.  squeeze
-    // rate-sized chunks to destination
-    while (dst_len >= rate) {
-      memcpy(dst, xof->a.u8, rate); // copy rate-sized chunk
-      permute(xof->a.u64); // permute state
-
-      // update destination pointer and length
-      dst += rate;
-      dst_len -= rate;
-    }
-
-    if (dst_len > 0) {
-      // the remaining destination length is less than `rate`, so copy a
-      // `dst_len`-sized chunk from the internal state to the
-      // destination buffer, then update the read byte count.
-
-      // squeeze dst_len-sized block to destination
-      memcpy(dst, xof->a.u8, dst_len); // copy dst_len-sized chunk
-      xof->num_bytes = dst_len; // update read byte count
-    }
-  } else {
-    // fall back to squeezing one byte at a time
-
-    // squeeze bytes to destination
-    for (size_t i = 0; i < dst_len; i++) {
-      dst[i] = xof->a.u8[xof->num_bytes++]; // squeeze byte to destination
-
-      if (xof->num_bytes == rate) {
-        permute(xof->a.u64); // permute state
-        xof->num_bytes = 0; // clear read bytes count
-      }
-    }
-  }
-}
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-// squeeze data from xof
-static inline void xof_squeeze(sha3_xof_t * const xof, const size_t rate, const uint8_t pad, uint8_t * const dst, const size_t dst_len) {
-  // check state
-  if (!xof->squeezing) {
-    // finalize absorb
-    xof_absorb_done(xof, rate, pad);
-  }
-
-  xof_squeeze_raw(xof, rate, dst, dst_len);
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-// one-shot xof absorb and squeeze
-static inline void xof_once(const size_t rate, const uint8_t pad, const uint8_t * const src, const size_t src_len, uint8_t * const dst, const size_t dst_len) {
-  // init
-  sha3_xof_t xof;
-  xof_init(&xof);
-
-  // absorb
-  xof_absorb_raw(&xof, rate, src, src_len);
-  xof_absorb_done(&xof, rate, pad);
-
-  // squeeze
-  xof_squeeze_raw(&xof, rate, dst, dst_len);
-}
-
-// define shake iterative context and one-shot functions
-#define DEF_SHAKE_CONTEXT(BITS) \
-  /* init shake context */ \
-  static inline void shake ## BITS ## _init(sha3_xof_t * const xof) { \
-    xof_init(xof); \
-  } \
-  \
-  /* absorb bytes into shake context */ \
-  static inline _Bool shake ## BITS ## _absorb(sha3_xof_t * const xof, const uint8_t * const m, const size_t len) { \
-    return xof_absorb(xof, SHAKE ## BITS ## _RATE, m, len); \
-  } \
-  \
-  /* squeeze bytes from shake context */ \
-  static inline void shake ## BITS ## _squeeze(sha3_xof_t * const xof, uint8_t * const dst, const size_t dst_len) { \
-    xof_squeeze(xof, SHAKE ## BITS ## _RATE, SHAKE_PAD, dst, dst_len); \
-  } \
-
-#define DEF_SHAKE_ONCE(BITS) \
-  /* one-shot shake absorb and squeeze */ \
-  static inline void shake ## BITS(const uint8_t * const src, const size_t src_len, uint8_t * const dst, const size_t dst_len) { \
-    xof_once(SHAKE ## BITS ## _RATE, SHAKE_PAD, src, src_len, dst, dst_len); \
-  }
-
-// shake padding byte and rates
-#define SHAKE_PAD 0x1f
-#define SHAKE128_RATE RATE(16) // shake128 input rate, in bytes
-#define SHAKE256_RATE RATE(32) // shake256 input rate, in bytes
-
-// declare shake functions
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-// SHAKE128 context functions.  Only built if one of the following
-// conditions is true:
-//
-// 1. The scalar backend is active.
-// 2. We are building the test suite.
-//
-// These functions are not needed when AVX-512 is enabled because the
-// AVX-512 backend has it's own implementation which keeps several
-// SHAKE128 and SHAKE256 contexts in AVX-512 registers and operates on
-// them in parallel.
-//
-// See pke{512,768,1024}_{keygen,encrypt}_sample_avx512()
-DEF_SHAKE_CONTEXT(128) // shake128_{init,absorb,squeeze}()
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-DEF_SHAKE_ONCE(256) // shake256()
-// end sha3.c
-
-#define Q 3329 // modulus (13*2^8 + 1)
-
-// PKE512 parameters
-#define PKE512_K 2
-#define PKE512_ETA1 3
-#define PKE512_ETA2 2
-#define PKE512_DU 10
-#define PKE512_DV 4
-#define PKE512_EK_SIZE (384 * PKE512_K + 32)
-#define PKE512_DK_SIZE (384 * PKE512_K)
-#define PKE512_CT_SIZE (32 * (PKE512_DU * PKE512_K + PKE512_DV))
-
-// PKE768 parameters
-#define PKE768_K 3
-#define PKE768_ETA1 2
-#define PKE768_ETA2 2
-#define PKE768_DU 10
-#define PKE768_DV 4
-#define PKE768_EK_SIZE (384 * PKE768_K + 32)
-#define PKE768_DK_SIZE (384 * PKE768_K)
-#define PKE768_CT_SIZE (32 * (PKE768_DU * PKE768_K + PKE768_DV))
-
-// PKE1024 parameters
-#define PKE1024_K 4
-#define PKE1024_ETA1 2
-#define PKE1024_ETA2 2
-#define PKE1024_DU 11
-#define PKE1024_DV 5
-#define PKE1024_EK_SIZE (384 * PKE1024_K + 32)
-#define PKE1024_DK_SIZE (384 * PKE1024_K)
-#define PKE1024_CT_SIZE (32 * (PKE1024_DU * PKE1024_K + PKE1024_DV))
-
-// Returns 1 if `x` is between `lo` and `hi` (inclusive).
-// (used by poly_encode_*() and poly_decode_*() functions)
-//
-// note: use bitwise AND instead of logical AND to encourage
-// constant-time logic by compiler.
-#define IN_RANGE(x, lo, hi) (((x) >= (lo)) & ((x) <= (hi)))
-
-// number-theoretic transform (NTT) lookup table
-// (used by poly_ntt() and poly_inv_ntt())
-static const uint16_t NTT_LUT[] = {
-  1, // n = 0, bitrev(0) = 0, (17**0)%3329 = 1
-  1729, // n = 1, bitrev(1) = 64, (17**64)%3329 = 1729
-  2580, // n = 2, bitrev(2) = 32, (17**32)%3329 = 2580
-  3289, // n = 3, bitrev(3) = 96, (17**96)%3329 = 3289
-  2642, // n = 4, bitrev(4) = 16, (17**16)%3329 = 2642
-  630, // n = 5, bitrev(5) = 80, (17**80)%3329 = 630
-  1897, // n = 6, bitrev(6) = 48, (17**48)%3329 = 1897
-  848, // n = 7, bitrev(7) = 112, (17**112)%3329 = 848
-  1062, // n = 8, bitrev(8) = 8, (17**8)%3329 = 1062
-  1919, // n = 9, bitrev(9) = 72, (17**72)%3329 = 1919
-  193, // n = 10, bitrev(10) = 40, (17**40)%3329 = 193
-  797, // n = 11, bitrev(11) = 104, (17**104)%3329 = 797
-  2786, // n = 12, bitrev(12) = 24, (17**24)%3329 = 2786
-  3260, // n = 13, bitrev(13) = 88, (17**88)%3329 = 3260
-  569, // n = 14, bitrev(14) = 56, (17**56)%3329 = 569
-  1746, // n = 15, bitrev(15) = 120, (17**120)%3329 = 1746
-  296, // n = 16, bitrev(16) = 4, (17**4)%3329 = 296
-  2447, // n = 17, bitrev(17) = 68, (17**68)%3329 = 2447
-  1339, // n = 18, bitrev(18) = 36, (17**36)%3329 = 1339
-  1476, // n = 19, bitrev(19) = 100, (17**100)%3329 = 1476
-  3046, // n = 20, bitrev(20) = 20, (17**20)%3329 = 3046
-  56, // n = 21, bitrev(21) = 84, (17**84)%3329 = 56
-  2240, // n = 22, bitrev(22) = 52, (17**52)%3329 = 2240
-  1333, // n = 23, bitrev(23) = 116, (17**116)%3329 = 1333
-  1426, // n = 24, bitrev(24) = 12, (17**12)%3329 = 1426
-  2094, // n = 25, bitrev(25) = 76, (17**76)%3329 = 2094
-  535, // n = 26, bitrev(26) = 44, (17**44)%3329 = 535
-  2882, // n = 27, bitrev(27) = 108, (17**108)%3329 = 2882
-  2393, // n = 28, bitrev(28) = 28, (17**28)%3329 = 2393
-  2879, // n = 29, bitrev(29) = 92, (17**92)%3329 = 2879
-  1974, // n = 30, bitrev(30) = 60, (17**60)%3329 = 1974
-  821, // n = 31, bitrev(31) = 124, (17**124)%3329 = 821
-  289, // n = 32, bitrev(32) = 2, (17**2)%3329 = 289
-  331, // n = 33, bitrev(33) = 66, (17**66)%3329 = 331
-  3253, // n = 34, bitrev(34) = 34, (17**34)%3329 = 3253
-  1756, // n = 35, bitrev(35) = 98, (17**98)%3329 = 1756
-  1197, // n = 36, bitrev(36) = 18, (17**18)%3329 = 1197
-  2304, // n = 37, bitrev(37) = 82, (17**82)%3329 = 2304
-  2277, // n = 38, bitrev(38) = 50, (17**50)%3329 = 2277
-  2055, // n = 39, bitrev(39) = 114, (17**114)%3329 = 2055
-  650, // n = 40, bitrev(40) = 10, (17**10)%3329 = 650
-  1977, // n = 41, bitrev(41) = 74, (17**74)%3329 = 1977
-  2513, // n = 42, bitrev(42) = 42, (17**42)%3329 = 2513
-  632, // n = 43, bitrev(43) = 106, (17**106)%3329 = 632
-  2865, // n = 44, bitrev(44) = 26, (17**26)%3329 = 2865
-  33, // n = 45, bitrev(45) = 90, (17**90)%3329 = 33
-  1320, // n = 46, bitrev(46) = 58, (17**58)%3329 = 1320
-  1915, // n = 47, bitrev(47) = 122, (17**122)%3329 = 1915
-  2319, // n = 48, bitrev(48) = 6, (17**6)%3329 = 2319
-  1435, // n = 49, bitrev(49) = 70, (17**70)%3329 = 1435
-  807, // n = 50, bitrev(50) = 38, (17**38)%3329 = 807
-  452, // n = 51, bitrev(51) = 102, (17**102)%3329 = 452
-  1438, // n = 52, bitrev(52) = 22, (17**22)%3329 = 1438
-  2868, // n = 53, bitrev(53) = 86, (17**86)%3329 = 2868
-  1534, // n = 54, bitrev(54) = 54, (17**54)%3329 = 1534
-  2402, // n = 55, bitrev(55) = 118, (17**118)%3329 = 2402
-  2647, // n = 56, bitrev(56) = 14, (17**14)%3329 = 2647
-  2617, // n = 57, bitrev(57) = 78, (17**78)%3329 = 2617
-  1481, // n = 58, bitrev(58) = 46, (17**46)%3329 = 1481
-  648, // n = 59, bitrev(59) = 110, (17**110)%3329 = 648
-  2474, // n = 60, bitrev(60) = 30, (17**30)%3329 = 2474
-  3110, // n = 61, bitrev(61) = 94, (17**94)%3329 = 3110
-  1227, // n = 62, bitrev(62) = 62, (17**62)%3329 = 1227
-  910, // n = 63, bitrev(63) = 126, (17**126)%3329 = 910
-  17, // n = 64, bitrev(64) = 1, (17**1)%3329 = 17
-  2761, // n = 65, bitrev(65) = 65, (17**65)%3329 = 2761
-  583, // n = 66, bitrev(66) = 33, (17**33)%3329 = 583
-  2649, // n = 67, bitrev(67) = 97, (17**97)%3329 = 2649
-  1637, // n = 68, bitrev(68) = 17, (17**17)%3329 = 1637
-  723, // n = 69, bitrev(69) = 81, (17**81)%3329 = 723
-  2288, // n = 70, bitrev(70) = 49, (17**49)%3329 = 2288
-  1100, // n = 71, bitrev(71) = 113, (17**113)%3329 = 1100
-  1409, // n = 72, bitrev(72) = 9, (17**9)%3329 = 1409
-  2662, // n = 73, bitrev(73) = 73, (17**73)%3329 = 2662
-  3281, // n = 74, bitrev(74) = 41, (17**41)%3329 = 3281
-  233, // n = 75, bitrev(75) = 105, (17**105)%3329 = 233
-  756, // n = 76, bitrev(76) = 25, (17**25)%3329 = 756
-  2156, // n = 77, bitrev(77) = 89, (17**89)%3329 = 2156
-  3015, // n = 78, bitrev(78) = 57, (17**57)%3329 = 3015
-  3050, // n = 79, bitrev(79) = 121, (17**121)%3329 = 3050
-  1703, // n = 80, bitrev(80) = 5, (17**5)%3329 = 1703
-  1651, // n = 81, bitrev(81) = 69, (17**69)%3329 = 1651
-  2789, // n = 82, bitrev(82) = 37, (17**37)%3329 = 2789
-  1789, // n = 83, bitrev(83) = 101, (17**101)%3329 = 1789
-  1847, // n = 84, bitrev(84) = 21, (17**21)%3329 = 1847
-  952, // n = 85, bitrev(85) = 85, (17**85)%3329 = 952
-  1461, // n = 86, bitrev(86) = 53, (17**53)%3329 = 1461
-  2687, // n = 87, bitrev(87) = 117, (17**117)%3329 = 2687
-  939, // n = 88, bitrev(88) = 13, (17**13)%3329 = 939
-  2308, // n = 89, bitrev(89) = 77, (17**77)%3329 = 2308
-  2437, // n = 90, bitrev(90) = 45, (17**45)%3329 = 2437
-  2388, // n = 91, bitrev(91) = 109, (17**109)%3329 = 2388
-  733, // n = 92, bitrev(92) = 29, (17**29)%3329 = 733
-  2337, // n = 93, bitrev(93) = 93, (17**93)%3329 = 2337
-  268, // n = 94, bitrev(94) = 61, (17**61)%3329 = 268
-  641, // n = 95, bitrev(95) = 125, (17**125)%3329 = 641
-  1584, // n = 96, bitrev(96) = 3, (17**3)%3329 = 1584
-  2298, // n = 97, bitrev(97) = 67, (17**67)%3329 = 2298
-  2037, // n = 98, bitrev(98) = 35, (17**35)%3329 = 2037
-  3220, // n = 99, bitrev(99) = 99, (17**99)%3329 = 3220
-  375, // n = 100, bitrev(100) = 19, (17**19)%3329 = 375
-  2549, // n = 101, bitrev(101) = 83, (17**83)%3329 = 2549
-  2090, // n = 102, bitrev(102) = 51, (17**51)%3329 = 2090
-  1645, // n = 103, bitrev(103) = 115, (17**115)%3329 = 1645
-  1063, // n = 104, bitrev(104) = 11, (17**11)%3329 = 1063
-  319, // n = 105, bitrev(105) = 75, (17**75)%3329 = 319
-  2773, // n = 106, bitrev(106) = 43, (17**43)%3329 = 2773
-  757, // n = 107, bitrev(107) = 107, (17**107)%3329 = 757
-  2099, // n = 108, bitrev(108) = 27, (17**27)%3329 = 2099
-  561, // n = 109, bitrev(109) = 91, (17**91)%3329 = 561
-  2466, // n = 110, bitrev(110) = 59, (17**59)%3329 = 2466
-  2594, // n = 111, bitrev(111) = 123, (17**123)%3329 = 2594
-  2804, // n = 112, bitrev(112) = 7, (17**7)%3329 = 2804
-  1092, // n = 113, bitrev(113) = 71, (17**71)%3329 = 1092
-  403, // n = 114, bitrev(114) = 39, (17**39)%3329 = 403
-  1026, // n = 115, bitrev(115) = 103, (17**103)%3329 = 1026
-  1143, // n = 116, bitrev(116) = 23, (17**23)%3329 = 1143
-  2150, // n = 117, bitrev(117) = 87, (17**87)%3329 = 2150
-  2775, // n = 118, bitrev(118) = 55, (17**55)%3329 = 2775
-  886, // n = 119, bitrev(119) = 119, (17**119)%3329 = 886
-  1722, // n = 120, bitrev(120) = 15, (17**15)%3329 = 1722
-  1212, // n = 121, bitrev(121) = 79, (17**79)%3329 = 1212
-  1874, // n = 122, bitrev(122) = 47, (17**47)%3329 = 1874
-  1029, // n = 123, bitrev(123) = 111, (17**111)%3329 = 1029
-  2110, // n = 124, bitrev(124) = 31, (17**31)%3329 = 2110
-  2935, // n = 125, bitrev(125) = 95, (17**95)%3329 = 2935
-  885, // n = 126, bitrev(126) = 63, (17**63)%3329 = 885
-  2154, // n = 127, bitrev(127) = 127, (17**127)%3329 = 2154
-};
-
-// polynomial base case multiply lookup table
-// (used by poly_mul())
-static const uint16_t MUL_LUT[] = {
-  17, // n = 0, 2*bitrev(0)+1 = 1, (17**1)%3329) = 17
-  3312, // n = 1, 2*bitrev(1)+1 = 129, (17**129)%3329) = 3312
-  2761, // n = 2, 2*bitrev(2)+1 = 65, (17**65)%3329) = 2761
-  568, // n = 3, 2*bitrev(3)+1 = 193, (17**193)%3329) = 568
-  583, // n = 4, 2*bitrev(4)+1 = 33, (17**33)%3329) = 583
-  2746, // n = 5, 2*bitrev(5)+1 = 161, (17**161)%3329) = 2746
-  2649, // n = 6, 2*bitrev(6)+1 = 97, (17**97)%3329) = 2649
-  680, // n = 7, 2*bitrev(7)+1 = 225, (17**225)%3329) = 680
-  1637, // n = 8, 2*bitrev(8)+1 = 17, (17**17)%3329) = 1637
-  1692, // n = 9, 2*bitrev(9)+1 = 145, (17**145)%3329) = 1692
-  723, // n = 10, 2*bitrev(10)+1 = 81, (17**81)%3329) = 723
-  2606, // n = 11, 2*bitrev(11)+1 = 209, (17**209)%3329) = 2606
-  2288, // n = 12, 2*bitrev(12)+1 = 49, (17**49)%3329) = 2288
-  1041, // n = 13, 2*bitrev(13)+1 = 177, (17**177)%3329) = 1041
-  1100, // n = 14, 2*bitrev(14)+1 = 113, (17**113)%3329) = 1100
-  2229, // n = 15, 2*bitrev(15)+1 = 241, (17**241)%3329) = 2229
-  1409, // n = 16, 2*bitrev(16)+1 = 9, (17**9)%3329) = 1409
-  1920, // n = 17, 2*bitrev(17)+1 = 137, (17**137)%3329) = 1920
-  2662, // n = 18, 2*bitrev(18)+1 = 73, (17**73)%3329) = 2662
-  667, // n = 19, 2*bitrev(19)+1 = 201, (17**201)%3329) = 667
-  3281, // n = 20, 2*bitrev(20)+1 = 41, (17**41)%3329) = 3281
-  48, // n = 21, 2*bitrev(21)+1 = 169, (17**169)%3329) = 48
-  233, // n = 22, 2*bitrev(22)+1 = 105, (17**105)%3329) = 233
-  3096, // n = 23, 2*bitrev(23)+1 = 233, (17**233)%3329) = 3096
-  756, // n = 24, 2*bitrev(24)+1 = 25, (17**25)%3329) = 756
-  2573, // n = 25, 2*bitrev(25)+1 = 153, (17**153)%3329) = 2573
-  2156, // n = 26, 2*bitrev(26)+1 = 89, (17**89)%3329) = 2156
-  1173, // n = 27, 2*bitrev(27)+1 = 217, (17**217)%3329) = 1173
-  3015, // n = 28, 2*bitrev(28)+1 = 57, (17**57)%3329) = 3015
-  314, // n = 29, 2*bitrev(29)+1 = 185, (17**185)%3329) = 314
-  3050, // n = 30, 2*bitrev(30)+1 = 121, (17**121)%3329) = 3050
-  279, // n = 31, 2*bitrev(31)+1 = 249, (17**249)%3329) = 279
-  1703, // n = 32, 2*bitrev(32)+1 = 5, (17**5)%3329) = 1703
-  1626, // n = 33, 2*bitrev(33)+1 = 133, (17**133)%3329) = 1626
-  1651, // n = 34, 2*bitrev(34)+1 = 69, (17**69)%3329) = 1651
-  1678, // n = 35, 2*bitrev(35)+1 = 197, (17**197)%3329) = 1678
-  2789, // n = 36, 2*bitrev(36)+1 = 37, (17**37)%3329) = 2789
-  540, // n = 37, 2*bitrev(37)+1 = 165, (17**165)%3329) = 540
-  1789, // n = 38, 2*bitrev(38)+1 = 101, (17**101)%3329) = 1789
-  1540, // n = 39, 2*bitrev(39)+1 = 229, (17**229)%3329) = 1540
-  1847, // n = 40, 2*bitrev(40)+1 = 21, (17**21)%3329) = 1847
-  1482, // n = 41, 2*bitrev(41)+1 = 149, (17**149)%3329) = 1482
-  952, // n = 42, 2*bitrev(42)+1 = 85, (17**85)%3329) = 952
-  2377, // n = 43, 2*bitrev(43)+1 = 213, (17**213)%3329) = 2377
-  1461, // n = 44, 2*bitrev(44)+1 = 53, (17**53)%3329) = 1461
-  1868, // n = 45, 2*bitrev(45)+1 = 181, (17**181)%3329) = 1868
-  2687, // n = 46, 2*bitrev(46)+1 = 117, (17**117)%3329) = 2687
-  642, // n = 47, 2*bitrev(47)+1 = 245, (17**245)%3329) = 642
-  939, // n = 48, 2*bitrev(48)+1 = 13, (17**13)%3329) = 939
-  2390, // n = 49, 2*bitrev(49)+1 = 141, (17**141)%3329) = 2390
-  2308, // n = 50, 2*bitrev(50)+1 = 77, (17**77)%3329) = 2308
-  1021, // n = 51, 2*bitrev(51)+1 = 205, (17**205)%3329) = 1021
-  2437, // n = 52, 2*bitrev(52)+1 = 45, (17**45)%3329) = 2437
-  892, // n = 53, 2*bitrev(53)+1 = 173, (17**173)%3329) = 892
-  2388, // n = 54, 2*bitrev(54)+1 = 109, (17**109)%3329) = 2388
-  941, // n = 55, 2*bitrev(55)+1 = 237, (17**237)%3329) = 941
-  733, // n = 56, 2*bitrev(56)+1 = 29, (17**29)%3329) = 733
-  2596, // n = 57, 2*bitrev(57)+1 = 157, (17**157)%3329) = 2596
-  2337, // n = 58, 2*bitrev(58)+1 = 93, (17**93)%3329) = 2337
-  992, // n = 59, 2*bitrev(59)+1 = 221, (17**221)%3329) = 992
-  268, // n = 60, 2*bitrev(60)+1 = 61, (17**61)%3329) = 268
-  3061, // n = 61, 2*bitrev(61)+1 = 189, (17**189)%3329) = 3061
-  641, // n = 62, 2*bitrev(62)+1 = 125, (17**125)%3329) = 641
-  2688, // n = 63, 2*bitrev(63)+1 = 253, (17**253)%3329) = 2688
-  1584, // n = 64, 2*bitrev(64)+1 = 3, (17**3)%3329) = 1584
-  1745, // n = 65, 2*bitrev(65)+1 = 131, (17**131)%3329) = 1745
-  2298, // n = 66, 2*bitrev(66)+1 = 67, (17**67)%3329) = 2298
-  1031, // n = 67, 2*bitrev(67)+1 = 195, (17**195)%3329) = 1031
-  2037, // n = 68, 2*bitrev(68)+1 = 35, (17**35)%3329) = 2037
-  1292, // n = 69, 2*bitrev(69)+1 = 163, (17**163)%3329) = 1292
-  3220, // n = 70, 2*bitrev(70)+1 = 99, (17**99)%3329) = 3220
-  109, // n = 71, 2*bitrev(71)+1 = 227, (17**227)%3329) = 109
-  375, // n = 72, 2*bitrev(72)+1 = 19, (17**19)%3329) = 375
-  2954, // n = 73, 2*bitrev(73)+1 = 147, (17**147)%3329) = 2954
-  2549, // n = 74, 2*bitrev(74)+1 = 83, (17**83)%3329) = 2549
-  780, // n = 75, 2*bitrev(75)+1 = 211, (17**211)%3329) = 780
-  2090, // n = 76, 2*bitrev(76)+1 = 51, (17**51)%3329) = 2090
-  1239, // n = 77, 2*bitrev(77)+1 = 179, (17**179)%3329) = 1239
-  1645, // n = 78, 2*bitrev(78)+1 = 115, (17**115)%3329) = 1645
-  1684, // n = 79, 2*bitrev(79)+1 = 243, (17**243)%3329) = 1684
-  1063, // n = 80, 2*bitrev(80)+1 = 11, (17**11)%3329) = 1063
-  2266, // n = 81, 2*bitrev(81)+1 = 139, (17**139)%3329) = 2266
-  319, // n = 82, 2*bitrev(82)+1 = 75, (17**75)%3329) = 319
-  3010, // n = 83, 2*bitrev(83)+1 = 203, (17**203)%3329) = 3010
-  2773, // n = 84, 2*bitrev(84)+1 = 43, (17**43)%3329) = 2773
-  556, // n = 85, 2*bitrev(85)+1 = 171, (17**171)%3329) = 556
-  757, // n = 86, 2*bitrev(86)+1 = 107, (17**107)%3329) = 757
-  2572, // n = 87, 2*bitrev(87)+1 = 235, (17**235)%3329) = 2572
-  2099, // n = 88, 2*bitrev(88)+1 = 27, (17**27)%3329) = 2099
-  1230, // n = 89, 2*bitrev(89)+1 = 155, (17**155)%3329) = 1230
-  561, // n = 90, 2*bitrev(90)+1 = 91, (17**91)%3329) = 561
-  2768, // n = 91, 2*bitrev(91)+1 = 219, (17**219)%3329) = 2768
-  2466, // n = 92, 2*bitrev(92)+1 = 59, (17**59)%3329) = 2466
-  863, // n = 93, 2*bitrev(93)+1 = 187, (17**187)%3329) = 863
-  2594, // n = 94, 2*bitrev(94)+1 = 123, (17**123)%3329) = 2594
-  735, // n = 95, 2*bitrev(95)+1 = 251, (17**251)%3329) = 735
-  2804, // n = 96, 2*bitrev(96)+1 = 7, (17**7)%3329) = 2804
-  525, // n = 97, 2*bitrev(97)+1 = 135, (17**135)%3329) = 525
-  1092, // n = 98, 2*bitrev(98)+1 = 71, (17**71)%3329) = 1092
-  2237, // n = 99, 2*bitrev(99)+1 = 199, (17**199)%3329) = 2237
-  403, // n = 100, 2*bitrev(100)+1 = 39, (17**39)%3329) = 403
-  2926, // n = 101, 2*bitrev(101)+1 = 167, (17**167)%3329) = 2926
-  1026, // n = 102, 2*bitrev(102)+1 = 103, (17**103)%3329) = 1026
-  2303, // n = 103, 2*bitrev(103)+1 = 231, (17**231)%3329) = 2303
-  1143, // n = 104, 2*bitrev(104)+1 = 23, (17**23)%3329) = 1143
-  2186, // n = 105, 2*bitrev(105)+1 = 151, (17**151)%3329) = 2186
-  2150, // n = 106, 2*bitrev(106)+1 = 87, (17**87)%3329) = 2150
-  1179, // n = 107, 2*bitrev(107)+1 = 215, (17**215)%3329) = 1179
-  2775, // n = 108, 2*bitrev(108)+1 = 55, (17**55)%3329) = 2775
-  554, // n = 109, 2*bitrev(109)+1 = 183, (17**183)%3329) = 554
-  886, // n = 110, 2*bitrev(110)+1 = 119, (17**119)%3329) = 886
-  2443, // n = 111, 2*bitrev(111)+1 = 247, (17**247)%3329) = 2443
-  1722, // n = 112, 2*bitrev(112)+1 = 15, (17**15)%3329) = 1722
-  1607, // n = 113, 2*bitrev(113)+1 = 143, (17**143)%3329) = 1607
-  1212, // n = 114, 2*bitrev(114)+1 = 79, (17**79)%3329) = 1212
-  2117, // n = 115, 2*bitrev(115)+1 = 207, (17**207)%3329) = 2117
-  1874, // n = 116, 2*bitrev(116)+1 = 47, (17**47)%3329) = 1874
-  1455, // n = 117, 2*bitrev(117)+1 = 175, (17**175)%3329) = 1455
-  1029, // n = 118, 2*bitrev(118)+1 = 111, (17**111)%3329) = 1029
-  2300, // n = 119, 2*bitrev(119)+1 = 239, (17**239)%3329) = 2300
-  2110, // n = 120, 2*bitrev(120)+1 = 31, (17**31)%3329) = 2110
-  1219, // n = 121, 2*bitrev(121)+1 = 159, (17**159)%3329) = 1219
-  2935, // n = 122, 2*bitrev(122)+1 = 95, (17**95)%3329) = 2935
-  394, // n = 123, 2*bitrev(123)+1 = 223, (17**223)%3329) = 394
-  885, // n = 124, 2*bitrev(124)+1 = 63, (17**63)%3329) = 885
-  2444, // n = 125, 2*bitrev(125)+1 = 191, (17**191)%3329) = 2444
-  2154, // n = 126, 2*bitrev(126)+1 = 127, (17**127)%3329) = 2154
-  1175, // n = 127, 2*bitrev(127)+1 = 255, (17**255)%3329) = 1175
-};
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Initialize SHAKE256 XOF as a pseudo-random function (PRF) by
- * absorbing 32-byte `seed` and byte `b`, then read `len` bytes of data
- * from the PRF into the buffer pointed to by `out`.
- *
- * Used by `poly_sample_cbdN()` functions to sample polynomial
- * coefficients.
- *
- * @param[in] seed 32 bytes.
- * @param[in] b 1 byte.
- * @param[out] out Output buffer of length `len`.
- * @param[in] len Output buffer length.
- */
-static inline void prf(const uint8_t seed[static 32], const uint8_t b, uint8_t * const out, const size_t len) {
-  // populate `buf` with `seed` and byte `b`
-  uint8_t buf[33] = { 0 };
-  memcpy(buf, seed, 32);
-  buf[32] = b;
-
-  // absorb `buf` into SHAKE256 XOF, write `len` bytes to `out`
-  shake256(buf, sizeof(buf), out, len);
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-/**
- * Constant-time difference.  Returns true if `a` and `b` differ and
- * false they are the identical.
- *
- * Used by `fips203ipd_kem512_decaps()`.
- *
- * @param[in] a Input value of length `len`.
- * @param[in] b Input value of length `len`.
- * @param[in] len Length of input values, in bytes.
- *
- * @return true if `a` and `b differ, and false if they are identical.
- */
-static inline bool ct_diff(const uint8_t * const restrict a, const uint8_t * const restrict b, const size_t len) {
-  uint8_t r = 0;
-  for (size_t i = 0; i < len; i++) {
-    r |= (a[i] ^ b[i]);
-  }
-
-  return r == 0;
-}
-
-/**
- * Constant-time copy. Copy `a` to `c` if `sel is `false` or copy `b` to
- * `c` if `sel` is `true`.
- *
- * Used by `fips203ipd_kem512_decaps()`.
- *
- * @param[out] c 32-byte output buffer.
- * @param[in] sel Selection condition.
- * @param[in] a 32-byte input value.
- * @param[in] b 32-byte input value.
- */
-static inline void ct_copy(uint8_t c[static 32], const bool sel, const uint8_t a[static 32], const uint8_t b[static 32]) {
-  const uint8_t mask = sel ? 0xff : 0x00;
-  for (size_t i = 0; i < 32; i++) {
-    c[i] = (a[i] & mask) ^ (b[i] & ~mask);
-  }
-}
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Constant-time mod Q (Barrett reduction).
- *
- * @param[in] v Input value.
- * @return Value reduced modulo Q.
- */
-static inline uint16_t ct_mod_q(const uint32_t v) {
-  // notes:
-  // - the exponent is set to 32 to encourage compilers to elide the
-  //   right shift in the reduction step by using a mulhi
-  // - the type of the multiplier is uint64_t, because one of `v` or
-  //   `M` must be 64-bit in the reduction step or compilers will
-  //   complain about overflow
-  // - the return value of reduce is uint16_t, because after the
-  //   reduction the maximum value is 2*Q, so it will fit in 16 bits.
-  static const uint8_t E = 32; // exponent
-  static const uint64_t M = 1290167; // multiplier: (1<<E)/Q
-  const uint16_t r = v - ((v * M) >> E) * Q; // reduce
-  const uint16_t mask = (r < Q) ? 0 : 0xFFFF; // adjustment mask
-  return r - (Q & mask); // adjust (constant-time)
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-// Polynomial with 256 12-bit coefficients.
-typedef struct {
-  uint16_t cs[256]; // coefficients
-} poly_t;
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Initialize polynomial `a` by sampling coefficients in the NTT domain
- * from SHAKE128 extendable output function (XOF) seeded by 32-byte
- * value `rho`, byte `i`, and byte `j`.
- *
- * @note Only used by scalar functions; the AVX-512 functions sample
- * coefficients for multiple NTT polynomials inline in parallel.
- *
- * @param[out] a Output polynomial with coefficients in the NTT domain.
- * @param[in] rho 32-byte input value used as XOF seed.
- * @param[in] i One byte input value used as XOF seed.
- * @param[in] j One byte input value used as XOF seed.
- */
-static inline void poly_sample_ntt(poly_t * const a, const uint8_t rho[static 32], const uint8_t i, const uint8_t j) {
-  // init shake128 xof by absorbing rho, i, and j
-  sha3_xof_t xof = { 0 };
-  {
-    const uint8_t ij[2] = { i, j }; // combine i and j
-    shake128_init(&xof); // init shake128 xof
-    shake128_absorb(&xof, rho, 32); // absorb rho
-    shake128_absorb(&xof, ij, 2); // absorb i and j
-  }
-
-  for (size_t x = 0; x < 256;) {
-    // read 3 bytes from xof
-    uint8_t ds[3] = { 0 };
-    shake128_squeeze(&xof, ds, 3);
-
-    // split 3 bytes into two 12-bit samples
-    const uint16_t d1 = ((uint16_t) ds[0]) | (((uint16_t) (ds[1] & 0xF)) << 8),
-                   d2 = ((uint16_t) ds[1] >> 4) | (((uint16_t) ds[2]) << 4);
-
-    // sample d1
-    if (d1 < Q) {
-      a->cs[x++] = d1;
-    }
-
-    // sample d2
-    if (d2 < Q && x < 256) {
-      a->cs[x++] = d2;
-    }
-  }
-}
-
-/**
- * Define function which reads `64 * ETA` bytes from a pseudo-random
- * function (PRF) seeded by 32-byte value `seed` and one byte value `b`,
- * then samples values from the PRF output using the centered binomial
- * distribution (CBD) with error `ETA` and writes the values as the
- * coefficients of output polynomial `p`.
- *
- * @note Only used by scalar functions; the AVX-512 functions sample
- * coefficients for multiple CBD polynomials inline in parallel.
- *
- * @param[out] p Output polynomial with CBD(ETA) distributed coefficients.
- * @param[in] seed 32-byte input value used as PRF seed.
- * @param[in] b 1 byte input value used as PRF seed.
- */
-#define DEF_POLY_SAMPLE_CBD(ETA) \
-  static inline void poly_sample_cbd ## ETA (poly_t * const p, const uint8_t seed[static 32], const uint8_t b) { \
-    /* read 64 * eta bytes of data from prf */ \
-    uint8_t buf[64 * ETA] = { 0 }; \
-    prf(seed, b, buf, sizeof(buf)); \
-    \
-    for (size_t i = 0; i < 256; i++) { \
-      uint16_t x = 0; \
-      for (size_t j = 0; j < ETA; j++) { \
-        const size_t ofs = 2 * i * ETA + j; \
-        x += (buf[ofs / 8] >> (ofs % 8)) & 0x01; \
-      } \
-      \
-      uint16_t y = 0; \
-      for (size_t j = 0; j < ETA; j++) { \
-        const size_t ofs = 2 * i * ETA + ETA + j; \
-        y += (buf[ofs / 8] >> (ofs % 8)) & 0x01; \
-      } \
-      \
-      const uint16_t t = x + (Q - y), /* t = x - y */ \
-                     m = (t >= Q) ? 0xfff : 0; \
-      p->cs[i] = t - (Q & m); /* cs[i] = t % Q */ \
-    } \
-  }
-
-// define poly_sample_cbd3() (PKE512_ETA1)
-DEF_POLY_SAMPLE_CBD(3)
-
-// define poly_sample_cbd2() (PKE512_ETA2, PKE768_ETA{1,2}, // PKE1024_ETA{1,2})
-DEF_POLY_SAMPLE_CBD(2)
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-// AVX512 polynomial functions
-
-// permute IDs (last 6 lanes are masked to zero)
-//
-// zero-extended into 64-bit values in a 512-bit register and used by
-// NTT_MUL() macro in poly_ntt_avx512() and poly_inv_ntt_avx512() to
-// extract 32 12-bit values stored in the 16-bit lanes of 1 512-bit
-// register and store them in the 64-bit lanes of 4 512-bit registers.
-static const __m512i NTT_MUL_T1_IDS = { 2, 3, 0, 0 },
-                     NTT_MUL_T2_IDS = { 4, 5, 0, 0 },
-                     NTT_MUL_T3_IDS = { 6, 7, 0, 0 };
-
-// Q in 8 64-bit lanes
-static const __m512i Q64 = { Q, Q, Q, Q, Q, Q, Q, Q };
-
-// Q in 16 32-bit lanes
-static const __m512i Q32 = {
-  0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL,
-  0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL, 0x00000D0100000D01ULL,
-};
-
-// Q in 32 16-bit lanes
-static const __m512i Q16 = {
-  0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL,
-  0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL,
-};
-
-// NTT_MUL() multiplier: floor((1<<39)/Q)
-static const __m512i NTT_MM = {
-  165141428ULL, 165141428ULL, 165141428ULL, 165141428ULL,
-  165141428ULL, 165141428ULL, 165141428ULL, 165141428ULL,
-};
-
-// t_lo/t_hi join ids
-// permute IDs used to combine 32 12-bit values stored in 64-bit lanes
-// of four 512-bit registers into 32 16-bit lanes of a single 512-bit
-// register.
-//
-// the same set of permute IDs are used for both the low and the high
-// half of the join; for the low half (t_lo) the upper 16 lanes are
-// masked to zero (e.g., mask = 0x0000ffff), and for the high half
-// (t_hi) the lower 16 lanes are masked to zero (mask = 0xffff0000).
-//
-// here are the unencoded values:
-//
-//   static const uint8_t NTT_MUL_T_JOIN_ID_VALS[32] ALIGN(32) = {
-//      0,  4,  8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, // t_lo ids
-//      0,  4,  8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, // t_hi ids
-//   };
-//
-static const __m512i NTT_T_JOIN_IDS = {
-  0x000C000800040000ULL, 0x001C001800140010ULL, 0x002c002800240020ULL, 0x003c003800340030ULL,
-  0x000C000800040000ULL, 0x001C001800140010ULL, 0x002c002800240020ULL, 0x003c003800340030ULL,
-};
-
-// low coef permute ids (len = 16)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L16_LO_ID_VALS[32] ALIGN(32) = {
-//      0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
-//     32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
-//   };
-static const __m512i NTT_L16_LO_IDS = {
-  0x0003000200010000ULL, 0x0007000600050004ULL, 0x000B000A00090008ULL, 0x000F000E000D000CULL,
-  0x0023002200210020ULL, 0x0027002600250024ULL, 0x002B002A00290028ULL, 0x002F002E002D002CULL,
-};
-
-// high coef permute ids (len = 16)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L16_HI_ID_VALS[32] ALIGN(32) = {
-//     16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
-//     48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
-//   };
-static const __m512i NTT_L16_HI_IDS = {
-  0x0013001200110010ULL, 0x0017001600150014ULL, 0x001B001A00190018ULL, 0x001F001E001D001CULL,
-  0x0033003200310030ULL, 0x0037003600350034ULL, 0x003B003A00390038ULL, 0x003F003E003D003CULL,
-};
-
-// low coef load permute ids (len = 8)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L08_LO_LOAD_ID_VALS[32] ALIGN(32) = {
-//      0,  1,  2,  3,  4,  5,  6,  7, 16, 17, 18, 19, 20, 21, 22, 23,
-//     32, 33, 34, 35, 36, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55,
-//   };
-static const __m512i NTT_L08_LO_LOAD_IDS = {
-  0x0003000200010000ULL, 0x0007000600050004ULL, 0x0013001200110010ULL, 0x0017001600150014ULL,
-  0x0023002200210020ULL, 0x0027002600250024ULL, 0x0033003200310030ULL, 0x0037003600350034ULL,
-};
-
-// high coef load permute ids (len = 8)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L08_HI_LOAD_ID_VALS[32] ALIGN(32) = {
-//      8,  9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 30, 31,
-//     40, 41, 42, 43, 44, 45, 46, 47, 56, 57, 58, 59, 60, 61, 62, 63,
-//   };
-static const __m512i NTT_L08_HI_LOAD_IDS = {
-  0x000B000A00090008ULL, 0x000F000E000D000CULL, 0x001B001A00190018ULL, 0x001F001E001D001CULL,
-  0x002B002A00290028ULL, 0x002F002E002D002CULL, 0x003B003A00390038ULL, 0x003F003E003D003CULL,
-};
-
-// low coef store permute ids (len = 8)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L08_LO_STORE_ID_VALS[32] ALIGN(32) = {
-//      0,  1,  2,  3,  4,  5,  6,  7, 32, 33, 34, 35, 36, 37, 38, 39,
-//      8,  9, 10, 11, 12, 13, 14, 15, 40, 41, 42, 43, 44, 45, 46, 47,
-//   };
-static const __m512i NTT_L08_LO_STORE_IDS = {
-  0x0003000200010000ULL, 0x0007000600050004ULL, 0x0023002200210020ULL, 0x0027002600250024ULL,
-  0x000B000A00090008ULL, 0x000F000E000D000CULL, 0x002B002A00290028ULL, 0x002F002E002D002CULL,
-};
-
-// high coef store permute ids (len = 8)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L08_HI_STORE_ID_VALS[32] ALIGN(32) = {
-//     16, 17, 18, 19, 20, 21, 22, 23, 48, 49, 50, 51, 52, 53, 54, 55,
-//     24, 25, 26, 27, 28, 29, 30, 31, 56, 57, 58, 59, 60, 61, 62, 63,
-//   };
-static const __m512i NTT_L08_HI_STORE_IDS = {
-  0x0013001200110010ULL, 0x0017001600150014ULL, 0x0033003200310030ULL, 0x0037003600350034ULL,
-  0x001B001A00190018ULL, 0x001F001E001D001CULL, 0x003B003A00390038ULL, 0x003F003E003D003CULL,
-};
-
-// low coef load permute ids (len = 4)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L04_LO_LOAD_ID_VALS[32] ALIGN(32) = {
-//      0,  1,  2,  3,  8,  9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27,
-//     32, 33, 34, 35, 40, 41, 42, 43, 48, 49, 50, 51, 56, 57, 58, 59,
-//   };
-static const __m512i NTT_L04_LO_LOAD_IDS = {
-  0x0003000200010000ULL, 0x000B000A00090008ULL, 0x0013001200110010ULL, 0x001B001A00190018ULL,
-  0x0023002200210020ULL, 0x002B002A00290028ULL, 0x0033003200310030ULL, 0x003B003A00390038ULL,
-};
-
-// high coef load permute ids (len = 4)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L04_HI_LOAD_ID_VALS[32] ALIGN(32) = {
-//      4,  5,  6,  7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31,
-//     36, 37, 38, 39, 44, 45, 46, 47, 52, 53, 54, 55, 60, 61, 62, 63,
-//   };
-static const __m512i NTT_L04_HI_LOAD_IDS = {
-  0x0007000600050004ULL, 0x000F000E000D000CULL, 0x0017001600150014ULL, 0x001F001E001D001CULL,
-  0x0027002600250024ULL, 0x002F002E002D002CULL, 0x0037003600350034ULL, 0x003F003E003D003CULL,
-};
-
-// low coef store permute ids (len = 4)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L04_LO_STORE_ID_VALS[32] ALIGN(32) = {
-//      0,  1,  2,  3, 32, 33, 34, 35,  4,  5,  6,  7, 36, 37, 38, 39,
-//      8,  9, 10, 11, 40, 41, 42, 43, 12, 13, 14, 15, 44, 45, 46, 47,
-//   };
-static const __m512i NTT_L04_LO_STORE_IDS = {
-  0x0003000200010000ULL, 0x0023002200210020ULL, 0x0007000600050004ULL, 0x0027002600250024ULL,
-  0x000B000A00090008ULL, 0x002B002A00290028ULL, 0x000F000E000D000CULL, 0x002F002E002D002CULL,
-};
-
-// high coef store permute ids (len = 4)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L04_HI_STORE_ID_VALS[32] ALIGN(32) = {
-//     16, 17, 18, 19, 48, 49, 50, 51, 20, 21, 22, 23, 52, 53, 54, 55,
-//     24, 25, 26, 27, 56, 57, 58, 59, 28, 29, 30, 31, 60, 61, 62, 63,
-//   };
-static const __m512i NTT_L04_HI_STORE_IDS = {
-  0x0013001200110010ULL, 0x0033003200310030ULL, 0x0017001600150014ULL, 0x0037003600350034ULL,
-  0x001B001A00190018ULL, 0x003B003A00390038ULL, 0x001F001E001D001CULL, 0x003F003E003D003CULL,
-};
-
-// low coef load permute ids (len = 2)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L02_LO_LOAD_ID_VALS[32] ALIGN(32) = {
-//      0,  1,  4,  5,  8,  9, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29,
-//     32, 33, 36, 37, 40, 41, 44, 45, 48, 49, 52, 53, 56, 57, 60, 61,
-//   };
-static const __m512i NTT_L02_LO_LOAD_IDS = {
-  0x0005000400010000ULL, 0x000D000C00090008ULL, 0x0015001400110010ULL, 0x001D001C00190018ULL,
-  0x0025002400210020ULL, 0x002D002C00290028ULL, 0x0035003400310030ULL, 0x003D003C00390038ULL,
-};
-
-// high coef load permute ids (len = 2)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L02_HI_LOAD_ID_VALS[32] ALIGN(32) = {
-//      2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31,
-//     34, 35, 38, 39, 42, 43, 46, 47, 50, 51, 54, 55, 58, 59, 62, 63,
-//   };
-static const __m512i NTT_L02_HI_LOAD_IDS = {
-  0x0007000600030002ULL, 0x000F000E000B000AULL, 0x0017001600130012ULL, 0x001F001E001B001AULL,
-  0x0027002600230022ULL, 0x002F002E002B002AULL, 0x0037003600330032ULL, 0x003F003E003B003AULL,
-};
-
-// low coef store permute ids (len = 2)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L02_LO_STORE_ID_VALS[32] ALIGN(32) = {
-//      0,  1, 32, 33,  2,  3, 34, 35,  4,  5, 36, 37,  6,  7, 38, 39,
-//      8,  9, 40, 41, 10, 11, 42, 43, 12, 13, 44, 45, 14, 15, 46, 47,
-//   };
-static const __m512i NTT_L02_LO_STORE_IDS = {
-  0x0021002000010000ULL, 0x0023002200030002ULL, 0x0025002400050004ULL, 0x0027002600070006ULL,
-  0x0029002800090008ULL, 0x002B002A000B000AULL, 0x002D002C000D000CULL, 0x002F002E000F000EULL,
-};
-
-// high coef store permute ids (len = 2)
-//
-// original values (which were zero-extended to u16s):
-//   static const uint8_t NTT_L02_HI_STORE_ID_VALS[32] ALIGN(32) = {
-//     16, 17, 48, 49, 18, 19, 50, 51, 20, 21, 52, 53, 22, 23, 54, 55,
-//     24, 25, 56, 57, 26, 27, 58, 59, 28, 29, 60, 61, 30, 31, 62, 63,
-//   };
-static const __m512i NTT_L02_HI_STORE_IDS = {
-  0x0031003000110010ULL, 0x0033003200130012ULL, 0x0035003400150014ULL, 0x0037003600170016ULL,
-  0x0039003800190018ULL, 0x003B003A001B001AULL, 0x003D003C001D001CULL, 0x003F003E001F001EULL,
-};
-
-// multiply 32 12-bit values in 16-bit lanes of 512-bit register `in` by
-// 32 12-bit values stored in 64-bit lanes of 512-bit registers Z0-Z3,
-// partially reduce the products (to the range [0, 2Q]), merge the
-// products into a single 512-bit register, finish the reduction mod Q,
-// and store the result in the output register `T`.
-#define NTT_MUL(t, in, z0, z1, z2, z3) do { \
-  /* convert 32 12-bit values in register `hi` into 4 registers of eight u64s */ \
-  /* multiply each by zetas in z0-z3, then store the product in t0-t3 */ \
-  __m512i t0 = _mm512_mul_epu32(z0, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(in))), \
-          t1 = _mm512_mul_epu32(z1, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(_mm512_maskz_permutexvar_epi64(3, NTT_MUL_T1_IDS, in)))), \
-          t2 = _mm512_mul_epu32(z2, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(_mm512_maskz_permutexvar_epi64(3, NTT_MUL_T2_IDS, in)))), \
-          t3 = _mm512_mul_epu32(z3, _mm512_cvtepu16_epi64(_mm512_castsi512_si128(_mm512_maskz_permutexvar_epi64(3, NTT_MUL_T3_IDS, in)))); \
-  \
-  /* t %= 2Q: partial barrett reduction into range [0, 2Q] */ \
-  t0 = _mm512_sub_epi64(t0, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t0, NTT_MM), 39))); \
-  t1 = _mm512_sub_epi64(t1, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t1, NTT_MM), 39))); \
-  t2 = _mm512_sub_epi64(t2, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t2, NTT_MM), 39))); \
-  t3 = _mm512_sub_epi64(t3, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(t3, NTT_MM), 39))); \
-  \
-  /* permute 32 partially-reduced 13-bit values stored in 64-bit lanes of */ \
-  /* registers `t0-t3` into 32 16-bit lanes of register `t` */ \
-  const __m512i t_lo = _mm512_maskz_permutex2var_epi16(0x0000ffff, t0, NTT_T_JOIN_IDS, t1), \
-                t_hi = _mm512_maskz_permutex2var_epi16(0xffff0000, t2, NTT_T_JOIN_IDS, t3); \
-  t = _mm512_or_si512(t_lo, t_hi); /* t = t_lo | t_hi */ \
-  \
-  /* t %= Q: final reduction */ \
-  t = _mm512_mask_sub_epi16(t, _mm512_cmpge_epu16_mask(t, Q16), t, Q16); \
-} while (0)
-
-/**
- * Compute in-place number-theoretic transform (NTT) of polynomial `p`.
- *
- * @note AVX-512 implementation.
- *
- * @param[in,out] p Polynomial.
- */
-static inline void poly_ntt_avx512(poly_t * const p) {
-  // load poly coefs (8 registers, 32 coefs apiece)
-  __m512i cs[8] = {
-    _mm512_loadu_epi16(p->cs),
-    _mm512_loadu_epi16(p->cs + 32),
-    _mm512_loadu_epi16(p->cs + 64),
-    _mm512_loadu_epi16(p->cs + 96),
-    _mm512_loadu_epi16(p->cs + 128),
-    _mm512_loadu_epi16(p->cs + 160),
-    _mm512_loadu_epi16(p->cs + 192),
-    _mm512_loadu_epi16(p->cs + 224),
-  };
-
-  // len = 128
-  {
-    // load zeta
-    const __m512i z = _mm512_set1_epi64(NTT_LUT[1]);
-
-    // adjust coefs in groups of 64 (32 high, 32 low)
-    for (size_t j = 0; j < 4; j++) {
-      // calculate register offsets
-      const size_t hi_id = j + 4,
-                   lo_id = j + 0;
-
-      // load hi/lo coefs
-      __m512i hi = cs[hi_id],
-              lo = cs[lo_id];
-
-      // t = (hi * z) % Q
-      __m512i t = _mm512_setzero_si512();
-      NTT_MUL(t, hi, z, z, z, z);
-
-      // adjust coefs (note: order matters; adjust `hi` first)
-      hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
-      lo = _mm512_add_epi16(lo, t); // lo += t
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
-      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
-
-      // store coefs
-      cs[hi_id] = hi;
-      cs[lo_id] = lo;
-    }
-  }
-
-  // len = 64
-  for (size_t i = 0; i < 2; i++) {
-    // load zeta
-    const __m512i z = _mm512_set1_epi64(NTT_LUT[2 + i]);
-
-    // adjust coefs in groups of 64 (32 high, 32 low)
-    for (size_t j = 0; j < 2; j++) {
-      // calculate register offsets
-      const size_t hi_id = 4*i + j + 2,
-                   lo_id = 4*i + j + 0;
-
-      // load hi/lo coefs
-      __m512i hi = cs[hi_id],
-              lo = cs[lo_id];
-
-      // t = (hi * z) % Q
-      __m512i t = _mm512_setzero_si512();
-      NTT_MUL(t, hi, z, z, z, z);
-
-      // adjust coefs (note: order matters; adjust `hi` first)
-      hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
-      lo = _mm512_add_epi16(lo, t); // lo += t
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
-      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
-
-      // store coefs
-      cs[hi_id] = hi;
-      cs[lo_id] = lo;
-    }
-  }
-
-  // len = 32
-  for (size_t i = 0; i < 4; i++) {
-    // load zeta
-    const __m512i z = _mm512_set1_epi64(NTT_LUT[4 + i]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i hi = cs[hi_id],
-            lo = cs[lo_id];
-
-    // t = (hi * z) % Q
-    __m512i t = _mm512_setzero_si512();
-    NTT_MUL(t, hi, z, z, z, z);
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
-    lo = _mm512_add_epi16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
-
-    // store coefs
-    cs[hi_id] = hi;
-    cs[lo_id] = lo;
-  }
-
-  // len = 16
-  for (size_t i = 0; i < 4; i++) {
-    // load zetas
-    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[8 + 2*i]),
-                  z1 = _mm512_set1_epi64(NTT_LUT[8 + 2*i + 1]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_LO_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_HI_IDS, cs[hi_id]);
-
-    // t = (hi * z) % Q
-    __m512i t = _mm512_setzero_si512();
-    NTT_MUL(t, hi, z0, z0, z1, z1);
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
-    lo = _mm512_add_epi16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L16_HI_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L16_LO_IDS, hi);
-  }
-
-  // len = 8
-  for (size_t i = 0; i < 4; i++) {
-    // load zetas
-    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 0]),
-                  z1 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 1]),
-                  z2 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 2]),
-                  z3 = _mm512_set1_epi64(NTT_LUT[16 + 4*i + 3]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_LO_LOAD_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_HI_LOAD_IDS, cs[hi_id]);
-
-    // t = (hi * z) % Q
-    __m512i t = _mm512_setzero_si512();
-    NTT_MUL(t, hi, z0, z1, z2, z3);
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
-    lo = _mm512_add_epi16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L08_HI_STORE_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L08_LO_STORE_IDS, hi);
-  }
-
-  // len = 4
-  for (size_t i = 0; i < 4; i++) {
-    // get pointer to next 8 zetas
-    const uint16_t *zs = NTT_LUT + 32 + 8*i;
-
-    // load zetas into 64-bit lanes of 4 512-bit registers
-    const __m512i z0 = _mm512_setr_epi64(zs[0], zs[0], zs[0], zs[0], zs[1], zs[1], zs[1], zs[1]),
-                  z1 = _mm512_setr_epi64(zs[2], zs[2], zs[2], zs[2], zs[3], zs[3], zs[3], zs[3]),
-                  z2 = _mm512_setr_epi64(zs[4], zs[4], zs[4], zs[4], zs[5], zs[5], zs[5], zs[5]),
-                  z3 = _mm512_setr_epi64(zs[6], zs[6], zs[6], zs[6], zs[7], zs[7], zs[7], zs[7]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_LO_LOAD_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_HI_LOAD_IDS, cs[hi_id]);
-
-    // t = (hi * z) % Q
-    __m512i t = _mm512_setzero_si512();
-    NTT_MUL(t, hi, z0, z1, z2, z3);
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
-    lo = _mm512_add_epi16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L04_HI_STORE_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L04_LO_STORE_IDS, hi);
-  }
-
-  // len = 2
-  for (size_t i = 0; i < 4; i++) {
-    // get pointer to next 16 zetas
-    const uint16_t *zs = NTT_LUT + 64 + 16*i;
-
-    // load zetas into 64-bit lanes of 4 512-bit registers
-    const __m512i z0 = _mm512_setr_epi64(zs[0], zs[0], zs[1], zs[1], zs[2], zs[2], zs[3], zs[3]),
-                  z1 = _mm512_setr_epi64(zs[4], zs[4], zs[5], zs[5], zs[6], zs[6], zs[7], zs[7]),
-                  z2 = _mm512_setr_epi64(zs[8], zs[8], zs[9], zs[9], zs[10], zs[10], zs[11], zs[11]),
-                  z3 = _mm512_setr_epi64(zs[12], zs[12], zs[13], zs[13], zs[14], zs[14], zs[15], zs[15]);
-
-    // calculate register offsets
-    const size_t lo_id = 2*i + 0,
-                 hi_id = 2*i + 1;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_LO_LOAD_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_HI_LOAD_IDS, cs[hi_id]);
-
-    // t = (hi * z) % Q
-    __m512i t = _mm512_setzero_si512();
-    NTT_MUL(t, hi, z0, z1, z2, z3);
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = _mm512_add_epi16(lo, _mm512_sub_epi16(Q16, t)); // hi = lo - t
-    lo = _mm512_add_epi16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    hi = _mm512_mask_sub_epi16(hi, _mm512_cmpge_epi16_mask(hi, Q16), hi, Q16);
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16);
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L02_HI_STORE_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L02_LO_STORE_IDS, hi);
-  }
-
-  // store coefs to poly
-  for (size_t i = 0; i < 8; i++) {
-    _mm512_storeu_epi16(p->cs + 32*i, cs[i]);
-  }
-}
-
-/**
- * Compute in-place inverse number-theoretic transform (NTT) of
- * polynomial `p`.
- *
- * @note AVX-512 implementation.
- *
- * @param[in,out] p Polynomial.
- */
-static inline void poly_inv_ntt_avx512(poly_t * const p) {
-  // inverse of q in 8 64-bit lanes
-  static const __m512i Q_INV = { 3303, 3303, 3303, 3303, 3303, 3303, 3303, 3303 };
-
-  // load poly coefs (8 registers, 32 coefs apiece)
-  __m512i cs[8] = {
-    _mm512_loadu_epi16(p->cs),
-    _mm512_loadu_epi16(p->cs + 32),
-    _mm512_loadu_epi16(p->cs + 64),
-    _mm512_loadu_epi16(p->cs + 96),
-    _mm512_loadu_epi16(p->cs + 128),
-    _mm512_loadu_epi16(p->cs + 160),
-    _mm512_loadu_epi16(p->cs + 192),
-    _mm512_loadu_epi16(p->cs + 224),
-  };
-
-  // len = 2
-  for (size_t i = 0; i < 4; i++) {
-    const uint16_t *zs = NTT_LUT + 128 - 16*(i + 1);
-
-    // load zetas
-    const __m512i z0 = _mm512_setr_epi64(zs[15], zs[15], zs[14], zs[14], zs[13], zs[13], zs[12], zs[12]),
-                  z1 = _mm512_setr_epi64(zs[11], zs[11], zs[10], zs[10], zs[9], zs[9], zs[8], zs[8]),
-                  z2 = _mm512_setr_epi64(zs[7], zs[7], zs[6], zs[6], zs[5], zs[5], zs[4], zs[4]),
-                  z3 = _mm512_setr_epi64(zs[3], zs[3], zs[2], zs[2], zs[1], zs[1], zs[0], zs[0]);
-
-    // calculate register offsets
-    const size_t lo_id = 2*i + 0,
-                 hi_id = 2*i + 1;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_LO_LOAD_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L02_HI_LOAD_IDS, cs[hi_id]),
-            t = lo;
-
-    // adjust coefs
-    lo = _mm512_add_epi16(t, hi); // lo = t + hi
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
-    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
-    NTT_MUL(hi, hi, z0, z1, z2, z3); // hi = (zeta * hi) % Q
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L02_HI_STORE_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L02_LO_STORE_IDS, hi);
-  }
-
-  // len = 4
-  for (size_t i = 0; i < 4; i++) {
-    const uint16_t *zs = NTT_LUT + 64 - 8*(i + 1);
-
-    // load zetas
-    const __m512i z0 = _mm512_setr_epi64(zs[7], zs[7], zs[7], zs[7], zs[6], zs[6], zs[6], zs[6]),
-                  z1 = _mm512_setr_epi64(zs[5], zs[5], zs[5], zs[5], zs[4], zs[4], zs[4], zs[4]),
-                  z2 = _mm512_setr_epi64(zs[3], zs[3], zs[3], zs[3], zs[2], zs[2], zs[2], zs[2]),
-                  z3 = _mm512_setr_epi64(zs[1], zs[1], zs[1], zs[1], zs[0], zs[0], zs[0], zs[0]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_LO_LOAD_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L04_HI_LOAD_IDS, cs[hi_id]),
-            t = lo;
-
-    // adjust coefs
-    lo = _mm512_add_epi16(t, hi); // lo = t + hi
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
-    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
-    NTT_MUL(hi, hi, z0, z1, z2, z3); // hi = (zeta * hi) % Q
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L04_HI_STORE_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L04_LO_STORE_IDS, hi);
-  }
-
-  // len = 8
-  for (size_t i = 0; i < 4; i++) {
-    // load zetas
-    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 3]),
-                  z1 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 2]),
-                  z2 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 1]),
-                  z3 = _mm512_set1_epi64(NTT_LUT[32 - 4*(i + 1) + 0]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_LO_LOAD_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L08_HI_LOAD_IDS, cs[hi_id]),
-            t = lo;
-
-    // adjust coefs
-    lo = _mm512_add_epi16(t, hi); // lo = t + hi
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
-    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
-    NTT_MUL(hi, hi, z0, z1, z2, z3); // hi = (zeta * hi) % Q
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L08_HI_STORE_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L08_LO_STORE_IDS, hi);
-  }
-
-  // len = 16
-  for (size_t i = 0; i < 4; i++) {
-    // load zetas
-    const __m512i z0 = _mm512_set1_epi64(NTT_LUT[16 - 2*(i + 1) + 1]),
-                  z1 = _mm512_set1_epi64(NTT_LUT[16 - 2*(i + 1) + 0]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i lo = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_LO_IDS, cs[hi_id]),
-            hi = _mm512_permutex2var_epi16(cs[lo_id], NTT_L16_HI_IDS, cs[hi_id]),
-            t = lo;
-
-    // adjust coefs
-    lo = _mm512_add_epi16(t, hi); // lo = t + hi
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
-    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
-    NTT_MUL(hi, hi, z0, z0, z1, z1); // hi = (zeta * hi) % Q
-
-    // store coefs
-    cs[hi_id] = _mm512_permutex2var_epi16(lo, NTT_L16_HI_IDS, hi);
-    cs[lo_id] = _mm512_permutex2var_epi16(lo, NTT_L16_LO_IDS, hi);
-  }
-
-  // len = 32
-  for (size_t i = 0; i < 4; i++) {
-    // load zeta
-    const __m512i z = _mm512_set1_epi64(NTT_LUT[8 - (i + 1)]);
-
-    // calculate register offsets
-    const size_t hi_id = 2*i + 1,
-                 lo_id = 2*i + 0;
-
-    // load hi/lo coefs
-    __m512i lo = cs[lo_id],
-            hi = cs[hi_id],
-            t = lo;
-
-    // adjust coefs
-    lo = _mm512_add_epi16(t, hi); // lo = t + hi
-    lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
-    hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
-    NTT_MUL(hi, hi, z, z, z, z); // hi = (zeta * hi) % Q
-
-    // store coefs
-    cs[hi_id] = hi;
-    cs[lo_id] = lo;
-  }
-
-  // len = 64
-  for (size_t i = 0; i < 2; i++) {
-    // load zeta
-    const __m512i z = _mm512_set1_epi64(NTT_LUT[4 - (i + 1)]);
-
-    // adjust coefs in groups of 64 (32 high, 32 low)
-    for (size_t j = 0; j < 2; j++) {
-      // calculate register offsets
-      const size_t hi_id = 4*i + j + 2,
-                   lo_id = 4*i + j + 0;
-
-      // load hi/lo coefs
-      __m512i lo = cs[lo_id],
-              hi = cs[hi_id],
-              t = lo;
-
-      // adjust coefs
-      lo = _mm512_add_epi16(t, hi); // lo = t + hi
-      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
-      hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
-      NTT_MUL(hi, hi, z, z, z, z); // hi = (zeta * hi) % Q
-
-      // store coefs
-      cs[hi_id] = hi;
-      cs[lo_id] = lo;
-    }
-  }
-
-  // len = 128
-  {
-    // load zeta
-    const __m512i z = _mm512_set1_epi64(NTT_LUT[1]);
-
-    // adjust coefs in groups of 64 (32 high, 32 low)
-    for (size_t j = 0; j < 4; j++) {
-      // calculate register offsets
-      const size_t hi_id = j + 4,
-                   lo_id = j + 0;
-
-      // load hi/lo coefs
-      __m512i lo = cs[lo_id],
-              hi = cs[hi_id],
-              t = lo;
-
-      // adjust coefs
-      lo = _mm512_add_epi16(t, hi); // lo = t + hi
-      lo = _mm512_mask_sub_epi16(lo, _mm512_cmpge_epi16_mask(lo, Q16), lo, Q16); // lo %= Q
-      hi = _mm512_add_epi16(hi, _mm512_sub_epi16(Q16, t)); // hi += (Q - t)
-      NTT_MUL(hi, hi, z, z, z, z); // hi = (zeta * hi) % Q
-
-      // store coefs
-      cs[hi_id] = hi;
-      cs[lo_id] = lo;
-    }
-  }
-
-  // multiply coefs by inverse of Q
-  for (size_t i = 0; i < 8; i++) {
-    NTT_MUL(cs[i], cs[i], Q_INV, Q_INV, Q_INV, Q_INV);
-  }
-
-  // store coefs to poly
-  for (size_t i = 0; i < 8; i++) {
-    _mm512_storeu_epi16(p->cs + 32*i, cs[i]);
-  }
-}
-
-/**
- * Add polynomial `a` to polynomial `b` component-wise, and store the
- * sum in `a`.
- *
- * @note AVX-512 implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- */
-static inline void poly_add_avx512(poly_t * const restrict a, const poly_t * const restrict b) {
-  for (size_t i = 0; i < 8; i++) {
-    // load operands
-    const __m512i bb = _mm512_loadu_epi16(b->cs + 32*i);
-    __m512i aa = _mm512_loadu_epi16(a->cs + 32*i);
-
-    aa = _mm512_add_epi16(aa, bb); // a += b
-
-    // a -= (a >= Q) ? Q : 0
-    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
-
-    // store
-    _mm512_storeu_epi16(a->cs + 32*i, aa);
-  }
-}
-
-/**
- * Add polynomial `a` to polynomials `b` and `c` component-wise, and
- * store the sum in `a`.
- *
- * @note AVX-512 implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- * @param[in] c Polynomial.
- */
-static inline void poly_add2_avx512(poly_t * const restrict a, const poly_t * const restrict b, const poly_t * const restrict c) {
-  // load operands
-  for (size_t i = 0; i < 8; i++) {
-    const __m512i bb = _mm512_loadu_epi16(b->cs + 32*i),
-                  cc = _mm512_loadu_epi16(c->cs + 32*i);
-
-    // a += b
-    __m512i aa = _mm512_add_epi16(_mm512_loadu_epi16(a->cs + 32*i), bb);
-
-    // a -= (a >= Q) ? Q : 0
-    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
-
-    // a += c
-    aa = _mm512_add_epi16(aa, cc);
-
-    // a -= (a >= Q) ? Q : 0
-    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
-
-    // store
-    _mm512_storeu_epi16(a->cs + 32*i, aa);
-  }
-}
-
-/**
- * Subtract polynomial `b` from polynomial `a` component-wise, and store the
- * result in `a`.
- *
- * @note AVX-512 implementation.
- *
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- */
-static inline void poly_sub_avx512(poly_t * const restrict a, const poly_t * const restrict b) {
-  for (size_t i = 0; i < 8; i++) {
-    // load operands
-    __m512i aa = _mm512_loadu_epi16(a->cs + 32*i),
-            bb = _mm512_loadu_epi16(b->cs + 32*i);
-
-    // a += (Q - b)
-    aa = _mm512_add_epi16(aa, _mm512_sub_epi16(Q16, bb));
-
-    // a -= (a >= Q) ? Q : 0
-    aa = _mm512_mask_sub_epi16(aa, _mm512_cmpge_epu16_mask(aa, Q16), aa, Q16);
-
-    // store
-    _mm512_storeu_epi16((void*) (a->cs + 32*i), aa);
-  }
-}
-
-/**
- * Multiply `a` and `b` and store the product in `c`.
- *
- * @note `a` and `b` are assumed to be in the NTT domain.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] c Product polynomial, in the NTT domain.
- * @param[in] a Input polynomial, in the NTT domain.
- * @param[in] b Input polynomial, in the NTT domain.
- */
-static inline void poly_mul_avx512(poly_t * const restrict c, const poly_t * const restrict a, const poly_t * const restrict b) {
-  // Q in 16 u16 lanes
-  static const __m256i Q16 = {
-    0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL, 0x0D010D010D010D01ULL,
-  };
-
-  // permute ids
-  // - EVEN_IDS: low/high u64x8 registers -> even lanes register
-  // - ODD_IDS: low/high u64x8 registers -> odd lanes register
-  static const __m512i EVEN_IDS = { 0, 2, 4, 6, 8, 10, 12, 14 }, // even lanes
-                       ODD_IDS = { 1, 3, 5, 7, 9, 11, 13, 15 }; // odd lanes
-
-  // permute even/odd u64x8 registers into combined output register
-  //
-  // original values:
-  //   static const uint16_t C_ID_VALS[32] ALIGN(64) = {
-  //      0, 32,  4, 36,  8, 40, 12, 44, 16, 48, 20, 52, 24, 56, 28, 60,
-  //      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
-  //   };
-  static const __m512i C_IDS = {
-    0x0024000400200000ULL, 0x002C000C00280008ULL, 0x0034001400300010ULL, 0x003C001C00380018ULL,
-    0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // Loop over coefficients of `a` and `b`, multiply them in groups of
-  // 16, then write the results to output polynomial `c`
-  //
-  // In each iteration, we load:
-  //
-  // - 8 zeta values of zeta from the `MUL_LUT` lookup table into a zetas
-  //   register `z`.
-  // - 8 coefficients of `a` into a "low" register `a0`.
-  // - the next 8 coefficients of `a` into a "high" register `a1`.
-  // - 8 coefficients of `b` into a "low" register `b0`.
-  // - the next 8 coefficients of `b` into a "high" register `b1`.
-  //
-  // Next we convert the loaded values of zeta and the coefficients of
-  // `a` and `b` from 16-bit to 64-bit.
-  //
-  // Then we use the permutation indices in the `EVEN_IDS` and `ODD_IDS`
-  // registers to permute from the "low" and "high" registers above into
-  // the following "even" and "odd" registers:
-  //
-  // - ae: even lanes from a0 and a1
-  // - ao: odd lanes from a0 and a1
-  // - be: even lanes from b0 and b1
-  // - bo: odd lanes from b0 and b1
-  //
-  // Graphically the permutation looks like this:
-  //
-  //   // low/high registers of `a`
-  //   a0 = [v0, v1, v2, v3, v4, v5, v6, v7]
-  //   a1 = [v8, v9, v10, v11, v12, v13, v14, v15]
-  //
-  //   // even/odd registers of `a`
-  //   ae = [v0, v2, v4, v6, v8, v10, v12, v14]
-  //   ao = [v1, v3, v5, v7, v9, v11, v13, v15]
-  //
-  // Next we calculate the even and odd results, reduced mod Q, like so:
-  //
-  //   ce = ((ae * be) + (ao * bo * z)) % Q
-  //   co = ((ae * bo) + (ao * be)) % Q
-  //
-  // Note: the reduction mod Q is done using constant-time Barrett
-  // reduction.  The numerator for the Barrett reduction multiplier is
-  // 1<<39 because we are using signed 64-bit multiplications; anything
-  // less than 1<<37 is too small, and anything greater than 1<<39 will
-  // overflow into the sign bit.
-  //
-  // Finally, we permute the even and odd results back into "low" and
-  // "high" groups, convert the values from 64-bit to 16-bit (after
-  // reduction the values are all 12-bit, so this conversion is safe),
-  // and write the coefficients to the output polynomial `c`.
-  for (size_t i = 0; i < 16; i++) {
-    // load 8 zetas, convert from u16 to i64
-    const __m512i z = _mm512_cvtepu16_epi64(_mm_load_epi32(MUL_LUT + (8 * i)));
-
-    // load low a (a0) and high a (a1), low b (b0) and high b (b1),
-    // convert from u16x8 to u64x8, then permute lanes into the
-    // following registers:
-    // - ae: even lanes from a0 and a1
-    // - ao: odd lanes from a0 and a1
-    // - be: even lanes from b0 and b1
-    // - bo: odd lanes from b0 and b1
-    const __m512i a0 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(a->cs + (16 * i))),
-                  a1 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(a->cs + (16 * i + 8))),
-                  b0 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(b->cs + (16 * i))),
-                  b1 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(b->cs + (16 * i + 8))),
-                  ae = _mm512_permutex2var_epi64(a0, EVEN_IDS, a1),
-                  ao = _mm512_permutex2var_epi64(a0, ODD_IDS, a1),
-                  be = _mm512_permutex2var_epi64(b0, EVEN_IDS, b1),
-                  bo = _mm512_permutex2var_epi64(b0, ODD_IDS, b1);
-
-    // even results: ce = ((ae * be) + (ao * bo * z)) % 2Q (partial reduction)
-    __m512i ce = _mm512_add_epi64(_mm512_mul_epu32(ae, be), _mm512_mul_epu32(ao, _mm512_mul_epu32(bo, z)));
-    ce = _mm512_sub_epi64(ce, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(ce, NTT_MM), 39)));
-
-    // odd results: co = ((ae * bo) + (ao * be)) % 2Q (partial reduction)
-    __m512i co = _mm512_add_epi64(_mm512_mul_epu32(ae, bo), _mm512_mul_epu32(ao, be));
-    co = _mm512_sub_epi64(co, _mm512_mul_epu32(Q64, _mm512_srli_epi64(_mm512_mullo_epi64(co, NTT_MM), 39)));
-
-    // combine, reduce, store
-    __m256i cs = _mm512_castsi512_si256(_mm512_maskz_permutex2var_epi16(0xffff, ce, C_IDS, co));
-    cs = _mm256_mask_sub_epi16(cs, _mm256_cmpge_epu16_mask(cs, Q16), cs, Q16); // cs %= Q
-    _mm256_storeu_epi16(c->cs + (16 * i), cs); // store
-  }
-}
-
-/**
- * Pack 12-bit coefficients of polynomial `p` and serialize them into
- * 384 bytes of the output buffer `out`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out Output buffer (384 bytes).
- * @param[in] Input polynomial.
- */
-static inline void poly_encode_avx512(uint8_t out[static 384], const poly_t * const a) {
-  // low value indices
-  //
-  // original values:
-  //   static const uint16_t LO_ID_VALS[32] ALIGN(64) = {
-  //      0,  1,  2,  4,  5,  6,  8,  9, 10, 12, 13, 14, 16, 17, 18, 20,
-  //     21, 22, 24, 25, 26, 28, 29, 30,  0,  0,  0,  0,  0,  0,  0,  0,
-  //   };
-  static const __m512i LO_IDS = {
-    0x0004000200010000ULL, 0x0009000800060005ULL, 0x000E000D000C000AULL, 0x0014001200110010ULL,
-    0x0019001800160015ULL, 0x001E001D001C001AULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // low value right shift value
-  //
-  // original values:
-  //   static const uint16_t LO_SHIFT_VALS[32] ALIGN(64) = {
-  //      0,  4,  8,  0,  4,  8,  0,  4,  8,  0,  4,  8,  0,  4,  8,  0,
-  //      4,  8,  0,  4,  8,  0,  4,  8,  0,  0,  0,  0,  0,  0,  0,  0,
-  //   };
-  static const __m512i LO_SHIFTS = {
-    0x0000000800040000ULL, 0x0004000000080004ULL, 0x0008000400000008ULL, 0x0000000800040000ULL,
-    0x0004000000080004ULL, 0x0008000400000008ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // high value indices
-  //
-  // original values:
-  //   static const uint16_t HI_ID_VALS[32] ALIGN(64) = {
-  //      1,  2,  3,  5,  6,  7,  9, 10, 11, 13, 14, 15, 17, 18, 19, 21,
-  //     22, 23, 25, 26, 27, 29, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,
-  //   };
-  static const __m512i HI_IDS = {
-    0x0005000300020001ULL, 0x000A000900070006ULL, 0x000F000E000D000BULL, 0x0015001300120011ULL,
-    0x001A001900170016ULL, 0x001F001E001D001BULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // high value left shift value
-  //
-  // original values:
-  //   static const uint16_t HI_SHIFT_VALS[32] ALIGN(64) = {
-  //     12,  8,  4, 12,  8,  4, 12,  8,  4, 12,  8,  4, 12,  8,  4, 12,
-  //      8,  4, 12,  8,  4, 12,  8,  4,  0,  0,  0,  0,  0,  0,  0,  0,
-  //   };
-  static const __m512i HI_SHIFTS = {
-    0x000C00040008000CULL, 0x0008000C00040008ULL, 0x00040008000C0004ULL, 0x000C00040008000CULL,
-    0x0008000C00040008ULL, 0x00040008000C0004ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  for (size_t i = 0; i < 8; i++) {
-    // load 32 values
-    const __m512i cs = _mm512_loadu_epi16(a->cs + 32*i);
-
-    // permute into lo/hi
-    const __m512i lo = _mm512_srlv_epi16(_mm512_permutexvar_epi16(LO_IDS, cs), LO_SHIFTS),
-                  hi = _mm512_sllv_epi16(_mm512_permutexvar_epi16(HI_IDS, cs), HI_SHIFTS);
-
-    // pack as 48 bytes and store
-    _mm512_mask_compressstoreu_epi16(out + 48*i, 0xffffff, _mm512_or_si512(lo, hi));
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 11 bits and then serialize
- * them as 352 bytes in output buffer `out`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out Output buffer (352 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_11bit_avx512(uint8_t out[static 352], const poly_t * const p) {
-  // low permute ids
-  // orig: lo_id_vals[16] ALIGN(32) = { 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 0, 0, 0, 0, 0 },
-  static const __m256i LO_IDS = {
-    0x0002000100000000ULL, 0x0005000400030002ULL, 0x0000000700060005ULL, 0x0000000000000000ULL,
-  };
-
-  // low right shift amounts
-  // orig: lo_shift_vals[16] ALIGN(32) = { 0, 8, 5, 2, 10, 7, 4, 1, 9, 6, 3, 0, 0, 0, 0, 0 },
-  static const __m256i LO_SHIFTS = {
-    0x0002000500080000ULL, 0x000100040007000AULL, 0x0000000300060009ULL, 0x0000000000000000ULL,
-  };
-
-  // low masks
-  // orig: lo_mask_vals[16] ALIGN(32) = { 0xff, 7, 0x3f, 0xff, 1, 0xf, 0x7f, 0xff, 3, 0x1f, 0xff, 0, 0, 0, 0, 0 },
-  static const __m256i LO_MASKS = {
-    0x00FF003F000700FFULL, 0x00FF007F000F0001ULL, 0x000000FF001F0003ULL, 0x0000000000000000ULL,
-  };
-
-  // high permute ids
-  // orig: hi_id_vals[16] ALIGN(32) = { 0, 1, 2, 0, 3, 4, 5, 0, 6, 7, 0, 0, 0, 0, 0, 0 },
-  static const __m256i HI_IDS = {
-    0x0000000200010000ULL, 0x0000000500040003ULL, 0x0000000000070006ULL, 0x0000000000000000ULL,
-  };
-
-  // high masks
-  // orig: hi_mask_vals[16] ALIGN(32) = { 0, 0x1f, 3, 0, 0x7f, 0xf, 1, 0, 0x3f, 7, 0, 0, 0, 0, 0, 0 },
-  static const __m256i HI_MASKS = {
-    0x00000003001F0000ULL, 0x00000001000F007FULL, 0x000000000007003FULL, 0x0000000000000000ULL,
-  };
-
-  // high left shift amounts
-  // orig: hi_shift_vals[16] ALIGN(32) = { 0, 3, 6, 0, 1, 4, 7, 0, 2, 5, 0, 0, 0, 0, 0, 0 };
-  static const __m256i HI_SHIFTS = {
-    0x0000000600030000ULL, 0x0000000700040001ULL, 0x0000000000050002ULL, 0x0000000000000000ULL,
-  };
-
-  // 16 ones in u16 lanes of 256-bit register
-  static const __m256i ONES = {
-    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
-  };
-
-  // multiplier: (1<<44)/Q in 64-bit lanes of 512-bit register
-  static const __m512i M = {
-    5284525696, 5284525696, 5284525696, 5284525696,
-    5284525696, 5284525696, 5284525696, 5284525696,
-  };
-
-  // process batches of 8 coefficients:
-  // 1. convert to u64
-  // 2. convert to 12-bit values by multiplying by multiplier and shifting right
-  // 3. round to 11-bit values
-  // 4. convert to 8 u16s in 256-bit register
-  // 5. permute, shift, and mask into 11 16-bit low part
-  // 6. permute, mask, and shift into 11 16-bit high part
-  // 7. combine low and high parts, convert to 11 8-bit bytes
-  // 8. write to output buffer
-  for (size_t i = 0; i < 32; i++) {
-    const __m256i vs = _mm256_castsi128_si256(_mm512_cvtepi64_epi16(_mm512_srli_epi64(_mm512_mullo_epi64(_mm512_cvtepi16_epi64(_mm_loadu_epi16(p->cs + 8*i)), M), 32))),
-                  rs = _mm256_add_epi16(_mm256_srli_epi16(vs, 1), _mm256_and_si256(vs, ONES)),
-                  lo = _mm256_and_si256(_mm256_srlv_epi16(_mm256_permutexvar_epi16(LO_IDS, rs), LO_SHIFTS), LO_MASKS),
-                  hi = _mm256_sllv_epi16(_mm256_and_si256(_mm256_permutexvar_epi16(HI_IDS, rs), HI_MASKS), HI_SHIFTS);
-    _mm_mask_storeu_epi8(out + 11 * i, 0x7ff, _mm256_cvtepi16_epi8(_mm256_or_si256(lo, hi)));
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 10 bits and then serialize
- * them as 320 bytes in output buffer `out`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out Output buffer (320 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_10bit_avx512(uint8_t out[static 320], const poly_t * const p) {
-  // vs low and high join indices
-  // (lo/hi ids combined into single set to save a register)
-  //
-  // - lo: extract first 16 bits of high 32 bits of multiply;
-  //   combined shift, truncate, and join
-  // - hi: extract first 16 bits of high 32 bits of multiply;
-  //   combined shift, truncate, and join
-  //
-  // original value:
-  //   static const uint16_t vs_join_id_vals[32] ALIGN(64) = {
-  //      2,  6, 10, 14, 18, 22, 26, 30,
-  //     34, 38, 42, 46, 50, 54, 58, 62,
-  //      2,  6, 10, 14, 18, 22, 26, 30,
-  //     34, 38, 42, 46, 50, 54, 58, 62,
-  //   };
-  static const __m512i VS_JOIN_IDS = {
-    0x000E000A00060002ULL, 0x001E001A00160012ULL, 0x002E002A00260022ULL, 0x003E003A00360032ULL,
-    0x000E000A00060002ULL, 0x001E001A00160012ULL, 0x002E002A00260022ULL, 0x003E003A00360032ULL,
-  };
-
-  // u16 lane index for low part of byte
-  //
-  // original value:
-  //   static const uint16_t lo_id_vals[32] ALIGN(64) = {
-  //      0 + 0,  0 + 0,  0 + 1,  0 + 2,  0 + 3,
-  //      4 + 0,  4 + 0,  4 + 1,  4 + 2,  4 + 3,
-  //      8 + 0,  8 + 0,  8 + 1,  8 + 2,  8 + 3,
-  //     12 + 0, 12 + 0, 12 + 1, 12 + 2, 12 + 3,
-  //     16 + 0, 16 + 0, 16 + 1, 16 + 2, 16 + 3,
-  //     20 + 0, 20 + 0, 20 + 1, 20 + 2, 20 + 3,
-  //     0, 0,
-  //   };
-  static const __m512i LO_IDS = {
-    0x0002000100000000ULL, 0x0005000400040003ULL, 0x0008000800070006ULL, 0x000C000B000A0009ULL,
-    0x000F000E000D000CULL, 0x0012001100100010ULL, 0x0015001400140013ULL, 0x0000000000170016ULL,
-  };
-
-  // right shift amount for low part of byte
-  //
-  // original value:
-  //   static const uint16_t lo_shift_vals[32] ALIGN(64) = {
-  //     0, 8, 6, 4, 2,
-  //     0, 8, 6, 4, 2,
-  //     0, 8, 6, 4, 2,
-  //     0, 8, 6, 4, 2,
-  //     0, 8, 6, 4, 2,
-  //     0, 8, 6, 4, 2,
-  //     0, 0,
-  //   };
-  static const __m512i LO_SHIFTS = {
-    0x0004000600080000ULL, 0x0006000800000002ULL, 0x0008000000020004ULL, 0x0000000200040006ULL,
-    0x0002000400060008ULL, 0x0004000600080000ULL, 0x0006000800000002ULL, 0x0000000000020004ULL,
-  };
-
-  // mask for low part of byte
-  //
-  // original value:
-  //   static const uint16_t lo_mask_vals[32] ALIGN(64) = {
-  //     0xff, 3, 0xf, 0x3f, 0xff,
-  //     0xff, 3, 0xf, 0x3f, 0xff,
-  //     0xff, 3, 0xf, 0x3f, 0xff,
-  //     0xff, 3, 0xf, 0x3f, 0xff,
-  //     0xff, 3, 0xf, 0x3f, 0xff,
-  //     0xff, 3, 0xf, 0x3f, 0xff,
-  //     0, 0,
-  //   };
-  static const __m512i LO_MASKS = {
-    0x003F000F000300FFULL, 0x000F000300FF00FFULL, 0x000300FF00FF003FULL, 0x00FF00FF003F000FULL,
-    0x00FF003F000F0003ULL, 0x003F000F000300FFULL, 0x000F000300FF00FFULL, 0x0000000000FF003FULL,
-  };
-
-  // u16 lane index for high part of byte
-  //
-  // original value:
-  //   static const uint16_t hi_id_vals[32] ALIGN(64) = {
-  //     0,  0 + 1,  0 + 2,  0 + 3, 0,
-  //     0,  4 + 1,  4 + 2,  4 + 3, 0,
-  //     0,  8 + 1,  8 + 2,  8 + 3, 0,
-  //     0, 12 + 1, 12 + 2, 12 + 3, 0,
-  //     0, 16 + 1, 16 + 2, 16 + 3, 0,
-  //     0, 20 + 1, 20 + 2, 20 + 3, 0,
-  //     0, 0,
-  //   };
-  static const __m512i HI_IDS = {
-    0x0003000200010000ULL, 0x0006000500000000ULL, 0x0009000000000007ULL, 0x00000000000B000AULL,
-    0x0000000F000E000DULL, 0x0013001200110000ULL, 0x0016001500000000ULL, 0x0000000000000017ULL,
-  };
-
-  // mask for high part of byte
-  //
-  // original value:
-  //   static const uint16_t hi_mask_vals[32] ALIGN(64) = {
-  //     0, 0x3f, 0xf, 3, 0,
-  //     0, 0x3f, 0xf, 3, 0,
-  //     0, 0x3f, 0xf, 3, 0,
-  //     0, 0x3f, 0xf, 3, 0,
-  //     0, 0x3f, 0xf, 3, 0,
-  //     0, 0x3f, 0xf, 3, 0,
-  //     0, 0,
-  //   };
-  static const __m512i HI_MASKS = {
-    0x0003000F003F0000ULL, 0x000F003F00000000ULL, 0x003F000000000003ULL, 0x000000000003000FULL,
-    0x00000003000F003FULL, 0x0003000F003F0000ULL, 0x000F003F00000000ULL, 0x0000000000000003ULL,
-  };
-
-  // left shift amount for high part of byte
-  //
-  // original value:
-  //   static const uint16_t hi_shift_vals[32] ALIGN(64) = {
-  //     0, 2, 4, 6, 0,
-  //     0, 2, 4, 6, 0,
-  //     0, 2, 4, 6, 0,
-  //     0, 2, 4, 6, 0,
-  //     0, 2, 4, 6, 0,
-  //     0, 2, 4, 6, 0,
-  //     0, 0,
-  //   };
-  static const __m512i HI_SHIFTS = {
-    0x0006000400020000ULL, 0x0004000200000000ULL, 0x0002000000000006ULL, 0x0000000000060004ULL,
-    0x0000000600040002ULL, 0x0006000400020000ULL, 0x0004000200000000ULL, 0x0000000000000006ULL,
-  };
-
-  // permutation indices for `t1` to shift the last 8 coefficients to
-  // the lower 8 lanes.  represented as u64 lane indices for brevity.
-  static const __m512i T1_IDS = { 6, 7, 0, 0, 0, 0, 0, 0 };
-
-  // u8 permutation indices to combine two registers that contain output
-  // bytes in 16-bit lanes by storing the low half of the first 30 u16
-  // lanes from the first register in the first 30 u8 lanes of the
-  // output register and storing the low half of the first 10 u16 lanes
-  // from the second register in u8 lanes 31-40 of the output register
-  //
-  // original value:
-  //   static const uint8_t join_id_vals[64] ALIGN(64) = {
-  //     0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
-  //     32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 64, 66,
-  //     68, 70, 72, 74, 76, 78, 80, 82, 0, 0, 0, 0, 0, 0, 0, 0,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i JOIN_IDS = {
-    0x0E0C0A0806040200ULL, 0x1E1C1A1816141210ULL, 0x2E2C2A2826242220ULL, 0x42403A3836343230ULL,
-    0x52504E4C4A484644ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // multipler notes:
-  //
-  // the multiplier (1<<27)/Q = 40317 fails for 29 values:
-  //
-  //   >> def real_round(n); (n*1024.0/Q).round; end
-  //   => :real_round
-  //   >> def fake_round(n); v = (n*40317) >> 16; (v >> 1) + (v & 1); end
-  //   => :fake_round
-  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
-  //   => "395, 408, 1185, 1198, 1211, 1224, 1237, 1975, 1988, 2001, 2014, 2027, 2040, 2053, 2066, 2079, 2752, 2765, 2778, 2791, 2804, 2817, 2830, 2843, 2856, 2869, 2882, 2895, 2908"
-  //
-  // i also tried (1<<27)/Q+1 = 40318, but it still fails for 12 values:
-  //
-  //   >> def fake_round(n); v = (n*40318) >> 16; (v >> 1) + (v & 1); end
-  //   => :fake_round
-  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
-  //   => "421, 1250, 1263, 1276, 2092, 2105, 2118, 2921, 2934, 2947, 2960, 2973"
-  //
-  // other nearby multipliers have even larger failure rates.  the
-  // closest i've gotten is (1<<29)/Q+1 = 161271, which has one failure:
-  //
-  //   >> (1<<29)/Q+1
-  //   => 161271
-  //   >> def fake_round(n); v = (n*161271) >> 18; (v >> 1) + (v & 1); end
-  //   => :fake_round
-  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
-  //   => "1250"
-  //
-  // i finally settled on the following:
-  //
-  // 1. convert 4 batches of 8 u16s to u64s
-  // 2. multiply by (1<<43)/Q (the multiplier from encode_10bit_scalar())
-  // 3. use permutex2var to extract the low 16 bits from the high half
-  //    of the result (e.g., a combined right shift, truncate, and
-  //    merge).
-  // 4. continue as before.
-  //
-  // multiplier: (1<<43)/Q
-  static const __m512i MM = {
-    2642262848, 2642262848, 2642262848, 2642262848,
-    2642262848, 2642262848, 2642262848, 2642262848,
-  };
-
-  // 32 ones in u16 lanes
-  static const __m512i ONES = {
-    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
-    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
-  };
-
-  // 32 clamp values (0x3ff) in u16 lanes
-  static const __m512i MASK = {
-    0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL,
-    0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL, 0x03FF03FF03FF03FFULL,
-  };
-
-  // read batches of 32 coefficients, write 40 byte chunks
-  for (size_t i = 0; i < 8; i++) {
-    // load 32 16-bit coefficients, then multiply them by the multiplier
-    // ((1<<27)/Q) and get the high 16 bits (equivalent to a right shift
-    // by 16).  this leaves 32 11-bit values for the rounding step.
-    const __m512i v0 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 0)), MM),
-                  v1 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 8)), MM),
-                  v2 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 16)), MM),
-                  v3 = _mm512_mul_epu32(_mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 32 * i + 24)), MM),
-                  vs_lo = _mm512_maskz_permutex2var_epi16(0x0000ffff, v0, VS_JOIN_IDS, v1),
-                  vs_hi = _mm512_maskz_permutex2var_epi16(0xffff0000, v2, VS_JOIN_IDS, v3),
-                  vs = _mm512_or_si512(vs_lo, vs_hi);
-
-    // round all 32 values by calculating `v = (v >> 1) + (v & 1)`
-    // this leaves 32 10-bit values in 16-bit lanes
-    const __m512i t0 = _mm512_and_si512(_mm512_add_epi16(_mm512_srli_epi16(vs, 1), _mm512_and_si512(vs, ONES)), MASK);
-
-    // permute the last 8 rounded 16-bit values stored in the last 8
-    // 16-bit lanes (e.g., the last 2 64-bit lanes) into the low 8
-    // 16-bit lanes (e.g., the first 2 64-bit lanes) of a separate
-    // register.
-    const __m512i t1 = _mm512_maskz_permutexvar_epi64(3, T1_IDS, t0);
-
-    // permute, shift, and mask to get the low and high parts of the
-    // first 30-byte output chunk (24 10-bit values = 240/8 = 30 bytes).
-    const __m512i c0_lo = _mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi16(LO_IDS, t0), LO_SHIFTS), LO_MASKS),
-                  c0_hi = _mm512_sllv_epi16(_mm512_and_si512(_mm512_permutexvar_epi16(HI_IDS, t0), HI_MASKS), HI_SHIFTS);
-
-    // permute, shift, and mask to get the low and high parts of the
-    // second 10-byte output chunk (8 10-bit values = 80/8 = 10 bytes).
-    const __m512i c1_lo = _mm512_and_si512(_mm512_srlv_epi16(_mm512_maskz_permutexvar_epi16(0x3ff, LO_IDS, t1), LO_SHIFTS), LO_MASKS),
-                  c1_hi = _mm512_sllv_epi16(_mm512_and_si512(_mm512_maskz_permutexvar_epi16(0x3ff, HI_IDS, t1), HI_MASKS), HI_SHIFTS);
-
-    // merge the low and high parts of the first chunk into the first 30
-    // bytes (stored in the low half of 16-bit lanes), then merge the
-    // low and high parts of the second chunk into the final 10 bytes
-    // (stored in the low half of 16-bit lanes), then permute across
-    // both registers to merge both chunks into a single register
-    // containing 40 output bytes.
-    const __m512i bs = _mm512_maskz_permutex2var_epi8(0xffffffffff, _mm512_or_si512(c0_lo, c0_hi), JOIN_IDS, _mm512_or_si512(c1_lo, c1_hi));
-
-    // write 40 bytes to output
-    _mm512_mask_storeu_epi8(out + 40*i, 0xffffffffff, bs);
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 5 bits and then serialize
- * them as 160 bytes in output buffer `out`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] Output buffer (160 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_5bit_avx512(uint8_t out[static 160], const poly_t * const p) {
-  // u16 lane index for low part of byte
-  //
-  // original value:
-  //   static const uint16_t lo_id_vals[32] ALIGN(64) = {
-  //      0 + 0,  0 + 1,  0 + 3,  0 + 4,  0 + 6,
-  //      8 + 0,  8 + 1,  8 + 3,  8 + 4,  8 + 6,
-  //     16 + 0, 16 + 1, 16 + 3, 16 + 4, 16 + 6,
-  //     24 + 0, 24 + 1, 24 + 3, 24 + 4, 24 + 6,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i LO_IDS = {
-    0x0004000300010000ULL, 0x000B000900080006ULL, 0x00110010000E000CULL, 0x0018001600140013ULL,
-    0x001E001C001B0019ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // right shift amount for low part of byte
-  //
-  // original value:
-  //   static const uint16_t lo_shift_vals[32] ALIGN(64) = {
-  //     0, 3, 1, 4, 2,
-  //     0, 3, 1, 4, 2,
-  //     0, 3, 1, 4, 2,
-  //     0, 3, 1, 4, 2,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i LO_SHIFTS = {
-    0x0004000100030000ULL, 0x0001000300000002ULL, 0x0003000000020004ULL, 0x0000000200040001ULL,
-    0x0002000400010003ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // u16 lane index for middle part of byte
-  //
-  // original value:
-  //   static const uint16_t md_id_vals[32] ALIGN(64) = {
-  //      0 + 1,  0 + 2,  0 + 4,  0 + 5,  0 + 7,
-  //      8 + 1,  8 + 2,  8 + 4,  8 + 5,  8 + 7,
-  //     16 + 1, 16 + 2, 16 + 4, 16 + 5, 16 + 7,
-  //     24 + 1, 24 + 2, 24 + 4, 24 + 5, 24 + 7,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i MD_IDS = {
-    0x0005000400020001ULL, 0x000C000A00090007ULL, 0x00120011000F000DULL, 0x0019001700150014ULL,
-    0x001F001D001C001AULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // mask for middle part of byte
-  //
-  // original value:
-  //   static const uint16_t md_mask_vals[32] ALIGN(64) = {
-  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
-  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
-  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
-  //     0x7, 0xffffU, 0xf, 0xffffU, 0xffffU,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i MD_MASKS = {
-    0xFFFF000FFFFF0007ULL, 0x000FFFFF0007FFFFULL, 0xFFFF0007FFFFFFFFULL, 0x0007FFFFFFFF000FULL,
-    0xFFFFFFFF000FFFFFULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // left shift amount for middle part of byte
-  //
-  // original value:
-  //   static const uint16_t md_shift_vals[32] ALIGN(64) = {
-  //     5, 2, 4, 1, 3,
-  //     5, 2, 4, 1, 3,
-  //     5, 2, 4, 1, 3,
-  //     5, 2, 4, 1, 3,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i MD_SHIFTS = {
-    0x0001000400020005ULL, 0x0004000200050003ULL, 0x0002000500030001ULL, 0x0005000300010004ULL,
-    0x0003000100040002ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // u16 lane index for high part of byte
-  //
-  // original value:
-  //   static const uint16_t hi_id_vals[32] ALIGN(64) = {
-  //     0,  0 + 3, 0,  0 + 6, 0,
-  //     0,  8 + 3, 0,  8 + 6, 0,
-  //     0, 16 + 3, 0, 16 + 6, 0,
-  //     0, 24 + 3, 0, 24 + 6, 0,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i HI_IDS = {
-    0x0006000000030000ULL, 0x0000000B00000000ULL, 0x001300000000000EULL, 0x0000000000160000ULL,
-    0x0000001E0000001BULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // mask for high part of byte
-  //
-  // original value:
-  //   static const uint16_t hi_mask_vals[32] ALIGN(64) = {
-  //     0, 1, 0, 3, 0,
-  //     0, 1, 0, 3, 0,
-  //     0, 1, 0, 3, 0,
-  //     0, 1, 0, 3, 0,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i HI_MASKS = {
-    0x0003000000010000ULL, 0x0000000100000000ULL, 0x0001000000000003ULL, 0x0000000000030000ULL,
-    0x0000000300000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // left shift amount for high part of byte
-  //
-  // original value:
-  //   static const uint16_t hi_shift_vals[32] ALIGN(64) = {
-  //     0, 7, 0, 6, 0,
-  //     0, 7, 0, 6, 0,
-  //     0, 7, 0, 6, 0,
-  //     0, 7, 0, 6, 0,
-  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  //   };
-  static const __m512i HI_SHIFTS = {
-    0x0006000000070000ULL, 0x0000000700000000ULL, 0x0007000000000006ULL, 0x0000000000060000ULL,
-    0x0000000600000007ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // multiplier determined emperically:
-  //   >> def real_round(n); (n*32.0/Q).round; end
-  //   => :real_round
-  //   >> def fake_round(n); v = (n*((1<<22)/Q+1)) >> 16; (v >> 1) + (v & 1); end
-  //   => :fake_round
-  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
-  //   => ""
-  //
-  // multiplier: (1 << 22)/Q+1 (1260 in 32 u16 lanes)
-  static const __m512i MM = {
-    0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL,
-    0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL, 0x04EC04EC04EC04ECULL,
-  };
-
-  // 32 ones in 16-bit lanes
-  static const __m512i ONES = {
-    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
-    0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL, 0x0001000100010001ULL,
-  };
-
-  // 32 0x1f in 16-bit lanes
-  static const __m512i MASK = {
-    0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL,
-    0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL, 0x001F001F001F001FULL,
-  };
-
-  for (size_t i = 0; i < 8; i++) {
-    // load, multiply, round, and mask 32 coefficients
-    const __m512i cs = _mm512_mulhi_epu16(_mm512_loadu_epi16(p->cs + 32 * i), MM),
-                  vs = _mm512_and_si512(_mm512_add_epi16(_mm512_srli_epi16(cs, 1), _mm512_and_si512(cs, ONES)), MASK);
-
-    // permute into low, middle, and high parts of output byte
-    const __m512i lo = _mm512_srlv_epi16(_mm512_maskz_permutexvar_epi16(0xfffff, LO_IDS, vs), LO_SHIFTS),
-                  md = _mm512_sllv_epi16(_mm512_and_si512(_mm512_maskz_permutexvar_epi16(0xfffff, MD_IDS, vs), MD_MASKS), MD_SHIFTS),
-                  hi = _mm512_sllv_epi16(_mm512_and_si512(_mm512_maskz_permutexvar_epi16(0xfffff, HI_IDS, vs), HI_MASKS), HI_SHIFTS);
-
-    // combine low, middle, and high parts into 20 output bytes in u16 lanes
-    // then convert u16 to u8 and store to result
-    const __m512i bs = _mm512_or_si512(_mm512_or_si512(lo, md), hi);
-    _mm512_mask_cvtepi16_storeu_epi8(out + 20*i, 0xfffff, bs);
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 4 bits and then serialize
- * them as 128 bytes in output buffer `out`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] Output buffer (128 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_4bit_avx512(uint8_t out[static 128], const poly_t * const p) {
-  // even/odd permute ids, ones in 16-bit lanes, nibbles in 16-bit lanes
-  //
-  // original values:
-  //   static const uint16_t even_vals[8] ALIGN(16) = { 0, 2, 4, 6, 8, 10, 12, 14 },
-  //                         odd_vals[8] ALIGN(16) = { 1, 3, 5, 7, 9, 11, 13, 15 };
-  //   const __m128i ones = _mm_set1_epi16(1),
-  //                 nibbles = _mm_set1_epi16(0xf),
-  static const __m128i EVENS = { 0x0006000400020000ULL, 0x000E000C000A0008ULL },
-                       ODDS =  { 0x0007000500030001ULL, 0x000F000D000B0009ULL },
-                       ONES = { 0x0001000100010001ULL, 0x0001000100010001ULL },
-                       NIBBLES = { 0x000F000F000F000FULL, 0x000F000F000F000FULL };
-
-  // multiplier (1<<37)/Q
-  static const __m512i M = { 41285357, 41285357, 41285357, 41285357, 41285357, 41285357, 41285357, 41285357 };
-
-  for (size_t i = 0; i < 16; i++) {
-    // load two sets of 8 16-bit coefficients, convert both to 64-bit
-    const __m512i c0 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 16*i + 0)),
-                  c1 = _mm512_cvtepu16_epi64(_mm_loadu_epi16(p->cs + 16*i + 8));
-
-    // multiply/shift/mask, convert to 16-bit, and write to temp vars
-    const __m128i t0 = _mm512_cvtepi64_epi16(_mm512_srli_epi64(_mm512_mullo_epi64(c0, M), 32)),
-                  t1 = _mm512_cvtepi64_epi16(_mm512_srli_epi64(_mm512_mullo_epi64(c1, M), 32));
-
-    // permute to evens and odds
-    const __m128i es = _mm_permutex2var_epi16(t0, EVENS, t1),
-                  os = _mm_permutex2var_epi16(t0, ODDS, t1);
-
-    // round values
-    const __m128i res = _mm_and_si128(_mm_add_epi16(_mm_srli_epi16(es, 1), _mm_and_si128(es, ONES)), NIBBLES),
-                  ros = _mm_and_si128(_mm_add_epi16(_mm_srli_epi16(os, 1), _mm_and_si128(os, ONES)), NIBBLES);
-
-    // merge into combined 8-bit values in 16-bit lanes
-    const __m128i vs = _mm_or_si128(res, _mm_slli_epi16(ros, 4));
-
-    // convert to 8-bit values, write to output
-    _mm_mask_cvtepi16_storeu_epi8(out + 8*i, 0xff, vs);
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 1 bit and then serialize
- * them as 32 bytes in output buffer `out`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] Output buffer (32 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_1bit_avx512(uint8_t out[static 32], const poly_t * const p) {
-  // range lower bound (inclusive): 833 in 32 16-bit lanes of 512-bit register
-  static const __m512i LO = {
-    0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL,
-    0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL, 0x0341034103410341ULL,
-  };
-
-  // range upper bound (inclusive): 2496 in 32 16-bit lanes of 512-bit register
-  static const __m512i HI = {
-    0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL,
-    0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL, 0x09C009C009C009C0ULL,
-  };
-
-  // process batches of 32 coefficients
-  //
-  // note: if we don't write to `masks` and then memcpy(), gcc generates
-  // incorrect code.  clang works fine though.
-  uint32_t masks[8];
-  for (size_t i = 0; i < 8; i++) {
-    const __m512i v = _mm512_loadu_epi16(p->cs + 32*i); // load 32 coefficients
-    const uint32_t lo = _mm512_cmpge_epu16_mask(v, LO), // v >= lo
-                   hi = _mm512_cmple_epu16_mask(v, HI); // v <= hi
-    masks[i] = lo & hi; // store mask of ((v >= lo) & (v <= hi))
-  }
-
-  // copy masks to output
-  // (if we write to `out` in the loop, gcc blows up)
-  memcpy(out, masks, sizeof(masks));
-}
-
-/**
- * Read 384 bytes from input buffer `b`, parse bytes as 256 packed
- * 12-bit integers, and then save the integers as coefficients of output
- * polynomial `p`.
- *
- * @note Input integers are reduced modulo 3329.  The draft standard
- * says values in the range [3329, 4095] should be rejected as an
- * error, but doing so introduces an ambiguous error state not present
- * in Kyber.  According to a discussion on the pqc-forum mailing list,
- * implicit reduction modulo 3329 is a better option.  See the
- * discussion here:
- *
- * https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
- *
- * @note AVX-512 implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (384 bytes).
- */
-static inline void poly_decode_avx512(poly_t * const p, const uint8_t b[static 384]) {
-  // permute ids
-  //
-  // original values:
-  //   static const uint8_t id_vals[64] ALIGN(64) = {
-  //      0,  1,  1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10, 10, 11,
-  //     12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23,
-  //     24, 25, 25, 26, 27, 28, 28, 29, 30, 31, 31, 32, 33, 34, 34, 35,
-  //     36, 37, 37, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 46, 47,
-  //   };
-  static const __m512i IDS = {
-    0x0504040302010100ULL, 0x0B0A0A0908070706ULL, 0x1110100F0E0D0D0CULL, 0x1716161514131312ULL,
-    0x1D1C1C1B1A191918ULL, 0x23222221201F1F1EULL, 0x2928282726252524ULL, 0x2F2E2E2D2C2B2B2AULL,
-  };
-
-  // right shift amounts
-  static const __m512i SHIFTS = {
-    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
-    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
-  };
-
-  // 12-bit mask in 32 16-bit lanes
-  static const __m512i MASKS = {
-    0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
-    0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
-  };
-
-  for (size_t i = 0; i < 8; i++) {
-    // load and permute chunks of 48-byte containing 32 values
-    const __m512i v = _mm512_permutexvar_epi8(IDS, _mm512_maskz_loadu_epi64(0x3f, b + 48*i));
-
-    // shift and mask to get unreduced coefficient value
-    const __m512i r = _mm512_and_si512(_mm512_srlv_epi16(v, SHIFTS), MASKS);
-
-    // reduce/store 32 coefficients
-    _mm512_storeu_epi16(p->cs + 32*i, _mm512_mask_sub_epi16(r, _mm512_cmpge_epi16_mask(r, Q16), r, Q16));
-  }
-}
-
-/**
- * Decode packed 11-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (352 bytes).
- */
-static inline void poly_decode_11bit_avx512(poly_t * const p, const uint8_t b[static 352]) {
-
-  // low permute ids
-  // orig: uint32_t lo_id_vals[16] ALIGN(64) = { 0, 1, 2, 4, 5, 6, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20 },
-  static const __m512i LO_IDS = {
-    0x0000000100000000ULL, 0x0000000400000002ULL, 0x0000000600000005ULL, 0x0000000900000008ULL,
-    0x0000000C0000000BULL, 0x0000000F0000000DULL, 0x0000001100000010ULL, 0x0000001400000013ULL,
-  };
-
-  // low right shift amounts
-  // orig: uint32_t lo_shift_vals[16] ALIGN(64) = { 0, 3, 6, 1, 4, 7, 2, 5, 0, 3, 6, 1, 4, 7, 2, 5 },
-  static const __m512i LO_SHIFTS = {
-    0x0000000300000000ULL, 0x0000000100000006ULL, 0x0000000700000004ULL, 0x0000000500000002ULL,
-    0x0000000300000000ULL, 0x0000000100000006ULL, 0x0000000700000004ULL, 0x0000000500000002ULL,
-  };
-
-  // medium permute ids
-  // orig: uint32_t md_id_vals[16] ALIGN(64) = { 1, 2, 3, 5, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21 },
-  static const __m512i MD_IDS = {
-    0x0000000200000001ULL, 0x0000000500000003ULL, 0x0000000700000006ULL, 0x0000000A00000009ULL,
-    0x0000000D0000000CULL, 0x000000100000000EULL, 0x0000001200000011ULL, 0x0000001500000014ULL,
-  };
-
-  // medium masks
-  // orig: uint32_t md_mask_vals[16] ALIGN(64) = { 7, 0x3f, 0xff, 0xf, 0x7f, 0xff, 0x1f, 0xff, 7, 0x3f, 0xff, 0xf, 0x7f, 0xff, 0x1f, 0xff },
-  static const __m512i MD_MASKS = {
-    0x0000003F00000007ULL, 0x0000000F000000FFULL, 0x000000FF0000007FULL, 0x000000FF0000001FULL,
-    0x0000003F00000007ULL, 0x0000000F000000FFULL, 0x000000FF0000007FULL, 0x000000FF0000001FULL,
-  };
-
-  // medium left shift amounts
-  // orig: uint32_t md_shift_vals[16] ALIGN(64) = { 8, 5, 2, 7, 4, 1, 6, 3, 8, 5, 2, 7, 4, 1, 6, 3 },
-  static const __m512i MD_SHIFTS = {
-    0x0000000500000008ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
-    0x0000000500000008ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
-  };
-
-  // high permute ids
-  // orig: uint32_t hi_id_vals[16] ALIGN(64) = { 0, 0, 4, 0, 0, 8, 0, 0, 0, 0, 15, 0, 0, 19, 0, 0 },
-  static const __m512i HI_IDS = {
-    0x0000000000000000ULL, 0x0000000000000004ULL, 0x0000000800000000ULL, 0x0000000000000000ULL,
-    0x0000000000000000ULL, 0x000000000000000FULL, 0x0000001300000000ULL, 0x0000000000000000ULL,
-  };
-
-  // high masks
-  // orig: uint32_t hi_mask_vals[16] ALIGN(64) = { 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0 },
-  static const __m512i HI_MASKS = {
-    0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000300000000ULL, 0x0000000000000000ULL,
-    0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000300000000ULL, 0x0000000000000000ULL,
-  };
-
-  // high left shift amounts
-  // orig: uint32_t hi_shift_vals[16] ALIGN(64) = { 0, 0, 10, 0, 0, 9, 0, 0, 0, 0, 10, 0, 0, 9, 0, 0 };
-  static const __m512i HI_SHIFTS = {
-    0x0000000000000000ULL, 0x000000000000000AULL, 0x0000000900000000ULL, 0x0000000000000000ULL,
-    0x0000000000000000ULL, 0x000000000000000AULL, 0x0000000900000000ULL, 0x0000000000000000ULL,
-  };
-
-  // mask: 16 0xfff in u32 lanes
-  static const __m512i MASK = {
-    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
-    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
-  };
-
-  // 16 (1<<10) in u32 lanes
-  static const __m512i K1024 = {
-    0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL,
-    0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL, 0x0000040000000400ULL,
-  };
-
-  for (size_t i = 0; i < 16; i++) {
-    // load 22 bytes, convert to i32 values.  store the first 16 values
-    // in register b0 and the remaining 6 values in register b1
-    const __m512i b0 = _mm512_cvtepu8_epi32(_mm_loadu_epi8(b + 22 * i)),
-                  b1 = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x3f, b + 22 * i + 16));
-
-    // permute b0 and b1 into low, medium, and high parts, then shift
-    // and mask each part
-    const __m512i lo = _mm512_srlv_epi32(_mm512_permutex2var_epi32(b0, LO_IDS, b1), LO_SHIFTS),
-                  md = _mm512_sllv_epi32(_mm512_and_si512(_mm512_permutex2var_epi32(b0, MD_IDS, b1), MD_MASKS), MD_SHIFTS),
-                  hi = _mm512_sllv_epi32(_mm512_and_si512(_mm512_permutex2var_epi32(b0, HI_IDS, b1), HI_MASKS), HI_SHIFTS);
-
-    // combine parts into 16 11-bit values, then convert values to
-    // coefficients by multiplying by Q, adding 1<<10, shifting right by
-    // 11 (rounding), then masking to the lower 12 bits.
-    const __m512i cs = _mm512_and_si512(_mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(_mm512_or_si512(lo, md), hi), Q32), K1024), 11), MASK);
-
-    // store 16 coefficients to output polynomial
-    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 16 * i, 0xffff, cs);
-  }
-}
-
-/**
- * Decode packed 10-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (320 bytes).
- */
-static inline void poly_decode_10bit_avx512(poly_t * const p, const uint8_t b[static 320]) {
-  // low permute ids
-  //
-  // original value:
-  //   static const uint32_t LO_ID_VALS[16] ALIGN(64) = {
-  //     0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 0, 0, 0, 0,
-  //   };
-  static const __m512i LO_IDS = {
-    0x0000000100000000ULL, 0x0000000300000002ULL, 0x0000000600000005ULL, 0x0000000800000007ULL,
-    0x0000000B0000000AULL, 0x0000000D0000000CULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // low right shift amounts
-  //
-  // original value:
-  //   static const uint32_t LO_SHIFT_VALS[16] ALIGN(64) = {
-  //     0, 2, 4, 6, 0, 2, 4, 6, 0, 2, 4, 6, 0, 0, 0, 0,
-  //   },
-  static const __m512i LO_SHIFTS = {
-    0x0000000200000000ULL, 0x0000000600000004ULL, 0x0000000200000000ULL, 0x0000000600000004ULL,
-    0x0000000200000000ULL, 0x0000000600000004ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // high permute ids
-  //
-  // original value:
-  //   static const uint32_t HI_ID_VALS[16] ALIGN(64) = {
-  //     1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 0, 0, 0, 0,
-  //   };
-  static const __m512i HI_IDS = {
-    0x0000000200000001ULL, 0x0000000400000003ULL, 0x0000000700000006ULL, 0x0000000900000008ULL,
-    0x0000000C0000000BULL, 0x0000000E0000000DULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // high masks
-  //
-  // original value:
-  //   static const uint32_t HI_MASK_VALS[16] ALIGN(64) = {
-  //     3, 0xf, 0x3f, 0xff, 3, 0xf, 0x3f, 0xff, 3, 0xf, 0x3f, 0xff, 0, 0, 0, 0,
-  //   };
-  static const __m512i HI_MASKS = {
-    0x0000000F00000003ULL, 0x000000FF0000003FULL, 0x0000000F00000003ULL, 0x000000FF0000003FULL,
-    0x0000000F00000003ULL, 0x000000FF0000003FULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // high left shift amounts
-  //
-  // original value:
-  //   static const uint32_t HI_SHIFT_VALS[16] ALIGN(64) = {
-  //     8, 6, 4, 2, 8, 6, 4, 2, 8, 6, 4, 2, 0, 0, 0, 0,
-  //   };
-  static const __m512i HI_SHIFTS = {
-    0x0000000600000008ULL, 0x0000000200000004ULL, 0x0000000600000008ULL, 0x0000000200000004ULL,
-    0x0000000600000008ULL, 0x0000000200000004ULL, 0x0000000000000000ULL, 0x0000000000000000ULL,
-  };
-
-  // mask for lower 12 bits
-  // orig: const __m512i MASK = _mm512_set1_epi32(0xfff);
-  static const __m512i MASK = {
-    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
-    0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL, 0x00000FFF00000FFFULL,
-  };
-
-  // rounding adjustment
-  // orig: const __m512i K512 = _mm512_set1_epi32(1ULL<<9);
-  static const __m512i K512 = {
-    0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL,
-    0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL, 0x0000020000000200ULL,
-  };
-
-  // loop and convert batches of 15 bytes to 12 coefficients
-  for (size_t i = 0; i < 21; i++) {
-    // load 15 bytes, convert to 15 i32 values
-    const __m512i bs = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x7fff, b + 15 * i));
-
-    // permute into low and high parts, then shift and mask each part
-    const __m512i lo = _mm512_srlv_epi32(_mm512_maskz_permutexvar_epi32(0xfff, LO_IDS, bs), LO_SHIFTS),
-                  hi = _mm512_sllv_epi32(_mm512_and_si512(_mm512_maskz_permutexvar_epi32(0xfff, HI_IDS, bs), HI_MASKS), HI_SHIFTS);
-
-    // combine parts into 12 10-bit values, then convert values to
-    // coefficients by multiplying by Q, adding 1<<9, shifting right by
-    // 10 (rounding), then masking to the lower 12 bits.
-    const __m512i cs = _mm512_and_si512(_mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(lo, hi), Q32), K512), 10), MASK);
-
-    // store 12 coefficients to output polynomial
-    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 12 * i, 0xfff, cs);
-  }
-
-  // convert last 5 bytes to 4 coefficients
-  {
-    // load 5 bytes, convert to 5 i32 values
-    const __m512i bs = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x1f, b + 315));
-
-    // permute into low and high parts, then shift and mask each part
-    const __m512i lo = _mm512_srlv_epi32(_mm512_maskz_permutexvar_epi32(0xf, LO_IDS, bs), LO_SHIFTS),
-                  hi = _mm512_sllv_epi32(_mm512_and_si512(_mm512_maskz_permutexvar_epi32(0xf, HI_IDS, bs), HI_MASKS), HI_SHIFTS);
-
-    // combine parts into 4 10-bit values, then convert values to
-    // coefficients by multiplying by Q, adding 1<<9, shifting right by
-    // 10 (rounding), then masking to the lower 12 bits.
-    const __m512i cs = _mm512_and_si512(_mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(lo, hi), Q32), K512), 10), MASK);
-
-    // store 4 coefficients to output polynomial
-    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 252, 0xf, cs);
-  }
-}
-
-/**
- * Decode packed 5-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (160 bytes).
- */
-static inline void poly_decode_5bit_avx512(poly_t * const p, const uint8_t b[static 160]) {
-  // low permute ids
-  // orig: uint32_t lo_id_vals[16] ALIGN(64) = { 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9 },
-  static const __m512i LO_IDS = {
-    0x0000000000000000ULL, 0x0000000100000001ULL, 0x0000000300000002ULL, 0x0000000400000003ULL,
-    0x0000000500000005ULL, 0x0000000600000006ULL, 0x0000000800000007ULL, 0x0000000900000008ULL,
-  };
-
-  // low left shift amounts
-  // orig: uint32_t lo_shift_vals[16] ALIGN(64) = { 0, 5, 2, 7, 4, 1, 6, 3, 0, 5, 2, 7, 4, 1, 6, 3 },
-  static const __m512i LO_SHIFTS = {
-    0x0000000500000000ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
-    0x0000000500000000ULL, 0x0000000700000002ULL, 0x0000000100000004ULL, 0x0000000300000006ULL,
-  };
-
-  // low masks
-  // orig: lo_mask_vals[16] ALIGN(64) = { 0x1f, 7, 0x1f, 1, 0xf, 0x1f, 3, 0x1f, 0x1f, 7, 0x1f, 1, 0xf, 0x1f, 3, 0x1f },
-  static const __m512i LO_MASKS = {
-    0x000000070000001FULL, 0x000000010000001FULL, 0x0000001F0000000FULL, 0x0000001F00000003ULL,
-    0x000000070000001FULL, 0x000000010000001FULL, 0x0000001F0000000FULL, 0x0000001F00000003ULL,
-  };
-
-  // high permute ids
-  // orig: uint32_t hi_id_vals[16] ALIGN(64) = { 0, 1, 0, 2, 3, 0, 4, 0, 0, 6, 0, 7, 8, 0, 9, 0 },
-  static const __m512i HI_IDS = {
-    0x0000000100000000ULL, 0x0000000200000000ULL, 0x0000000000000003ULL, 0x0000000000000004ULL,
-    0x0000000600000000ULL, 0x0000000700000000ULL, 0x0000000000000008ULL, 0x0000000000000009ULL,
-  };
-
-  // high masks
-  // orig: uint32_t hi_mask_vals[16] ALIGN(64) = { 0, 3, 0, 15, 1, 0, 7, 0, 0, 3, 0, 15, 1, 0, 7, 0 },
-  static const __m512i HI_MASKS = {
-    0x0000000300000000ULL, 0x0000000F00000000ULL, 0x0000000000000001ULL, 0x0000000000000007ULL,
-    0x0000000300000000ULL, 0x0000000F00000000ULL, 0x0000000000000001ULL, 0x0000000000000007ULL,
-  };
-
-  // high left shift amounts
-  // orig: hi_shift_vals[16] ALIGN(64) = { 0, 3, 0, 1, 4, 0, 2, 0, 0, 3, 0, 1, 4, 0, 2, 0 };
-  static const __m512i HI_SHIFTS = {
-    0x0000000300000000ULL, 0x0000000100000000ULL, 0x0000000000000004ULL, 0x0000000000000002ULL,
-    0x0000000300000000ULL, 0x0000000100000000ULL, 0x0000000000000004ULL, 0x0000000000000002ULL,
-  };
-
-  // 16 sixteens in u32 lanes
-  // (used for
-  static const __m512i K16 = {
-    0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL,
-    0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL, 0x0000001000000010ULL,
-  };
-
-  for (size_t i = 0; i < 16; i++) {
-    const __m512i bs = _mm512_cvtepu8_epi32(_mm_maskz_loadu_epi8(0x3ff, b + 10 * i)),
-                  lo_bs = _mm512_permutexvar_epi32(LO_IDS, bs),
-                  hi_bs = _mm512_permutexvar_epi32(HI_IDS, bs),
-                  lo = _mm512_and_si512(_mm512_srlv_epi32(lo_bs, LO_SHIFTS), LO_MASKS),
-                  hi = _mm512_sllv_epi32(_mm512_and_si512(hi_bs, HI_MASKS), HI_SHIFTS),
-                  cs = _mm512_srli_epi32(_mm512_add_epi32(_mm512_mullo_epi32(_mm512_or_si512(lo, hi), Q32), K16), 5);
-    _mm512_mask_cvtepi32_storeu_epi16(p->cs + 16 * i, 0xffff, cs);
-  }
-}
-
-/**
- * Decode packed 4-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (128 bytes).
- */
-static inline void poly_decode_4bit_avx512(poly_t * const p, const uint8_t b[static 128]) {
-  // permute ids
-  // orig: { 0, 0x00010001, 0x00020002, 0x00030003, 0x00040004, 0x00050005, 0x00060006, 0x00070007, 0x00080008, 0x00090009, 0x000a000a, 0x000b000b, 0x000c000c, 0x000d000d, 0x000e000e, 0x000f000f }
-  static const __m512i IDS = {
-    0x0001000100000000ULL, 0x0003000300020002ULL, 0x0005000500040004ULL, 0x0007000700060006ULL,
-    0x0009000900080008ULL, 0x000B000B000A000AULL, 0x000D000D000C000CULL, 0x000F000F000E000EULL,
-  };
-
-  // left shift amounts (16 0x00040000 in u32 lanes)
-  // orig: _mm512_set1_epi32(0x00040000)
-  static const __m512i SHIFTS = {
-    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
-    0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
-  };
-
-  // masks (32 0xf in u16 lanes)
-  // orig: _mm512_set1_epi32(0x000f000f),
-  static const __m512i MASKS = {
-    0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL,
-    0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL, 0x000f000f000f000fULL,
-  };
-
-  // masks (32 eights in u16 lanes)
-  // orig: eights = _mm512_set1_epi32(0x00080008);
-  static const __m512i EIGHTS = {
-    0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL,
-    0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL, 0x0008000800080008ULL,
-  };
-
-  // 1. load 16 byte chunks
-  // 2. cast, permute, shift, and mask into 32 4-bit values in 16-bit lanes
-  // 3. multiply by Q, add 8 (rounding), and shift by 4 to convert to coefs
-  // 3. store 32 coefs to output poly
-  for (size_t i = 0; i < 8; i++) {
-    _mm512_storeu_epi16(p->cs + 32*i, _mm512_srli_epi16(_mm512_add_epi16(_mm512_mullo_epi16(_mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi8(IDS, _mm512_castsi128_si512(_mm_loadu_epi8(b + 16*i))), SHIFTS), MASKS), Q16), EIGHTS), 4));
-  }
-}
-
-/**
- * Decode packed 1-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (32 bytes).
- */
-static inline void poly_decode_1bit_avx512(poly_t * const p, const uint8_t b[static 32]) {
-  // 32 1665 in u16 lanes
-  // orig: _mm512_set1_epi16(1665)
-  static const __m512i VALS = {
-    0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL,
-    0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL, 0x0681068106810681ULL,
-  };
-
-  const uint32_t * const masks = (uint32_t*) b;
-  for (size_t i = 0; i < 8; i++) {
-    _mm512_storeu_epi16(p->cs + 32*i, _mm512_maskz_expand_epi16(masks[i], VALS));
-  }
-}
-
-// define avx512 vector operations
-#define DEF_AVX512_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_avx512(poly_t v[static N], const uint8_t b[static 384*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_avx512(v + i, b + 384*i); \
-    } \
-  } \
-  \
-  static inline void vec ## N ## _encode_avx512(uint8_t out[static N*384], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_avx512(out + 384*i, v + i); \
-    } \
-  }
-
-#define DEF_AVX512_10BIT_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_10bit_avx512(poly_t v[static N], const uint8_t b[static 320*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_10bit_avx512(v + i, b + 320*i); \
-    } \
-  } \
-  \
-  static inline void vec ## N ## _encode_10bit_avx512(uint8_t out[static 320*N], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_10bit_avx512(out + 320*i, v + i); \
-    } \
-  }
-
-#define DEF_AVX512_11BIT_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_11bit_avx512(poly_t v[static N], const uint8_t b[static 352*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_11bit_avx512(v + i, b + 352*i); \
-    } \
-  } \
-  static inline void vec ## N ## _encode_11bit_avx512(uint8_t out[static 352*N], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_11bit_avx512(out + 352*i, v + i); \
-    } \
-  }
-
-// declare avx512 vector ops
-DEF_AVX512_VEC_OPS(2)
-DEF_AVX512_VEC_OPS(3)
-DEF_AVX512_VEC_OPS(4)
-
-// declare avx512 10-bit vector ops
-DEF_AVX512_10BIT_VEC_OPS(2)
-DEF_AVX512_10BIT_VEC_OPS(3)
-
-// declare avx512 11-bit vector ops
-DEF_AVX512_11BIT_VEC_OPS(4)
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_NEON
-#include <arm_neon.h>
-
-// Q in 8 16-bit lanes
-static const uint16x8_t Q16 = { Q, Q, Q, Q, Q, Q, Q, Q };
-
-/**
- * @brief Partially reduce a group of values.
- * @param[in] a Group of 4 24-bit values.
- * @return 4 partially reduced values (e.g., mod 2Q).
- */
-static inline uint32x4_t ntt_mod_2q(const uint32x4_t a) {
-  // barrett reduction multiplier: floor((1<<39)/Q)
-  static const uint32_t M = 165141428;
-
-  // b = (a * M) >> 39 (calculate quotient)
-  //
-  // steps:
-  // 1. split the input value into low and high u32 pairs.
-  // 2. scalar multiply each pair by M.  this produces 2 u64x2 results.
-  // 3. reinterpret each of results as u32x4.
-  // 4. unzip the odd lanes of the results into a combined u32x4.  this
-  //    and the previous step are an implicit 32-bit right shift and
-  //    narrow.
-  // 5. right the combined result by 7.  this plus the implicit right
-  //    shift in the previous step add up to 39 bits.
-  //
-  // (doing things this way saves a few instructions)
-  const uint32x4_t b0 = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(a), M)),
-                   b1 = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(a), M));
-  const uint32x4_t b = vshrq_n_u32(vuzp2q_u32(b0, b1), 7);
-
-  // c = a - Q * b (reduce mod 2Q)
-  const uint32x4_t c = vsubq_u32(a, vmulq_n_u32(b, Q));
-
-  return c;
-}
-
-/**
- * @brief Multiply two groups of coefficients element-wise and partially
- * reduce the product.
- *
- * @param[in] a 8 12-bit coefficients.
- * @param[in] b 8 12-bit coefficients.
- * @return 8 partially reduced (e.g., mod 2Q) element-wise products.
- */
-static inline uint16x8_t ntt_mul_u16(const uint16x8_t a, const uint16x8_t b) {
-  // c = a * b % 2Q (store as 8 u32x8)
-  const uint32x4_t c0 = ntt_mod_2q(vmull_u16(vget_low_u16(a), vget_low_u16(b))), // low products mod 2Q
-                   c1 = ntt_mod_2q(vmull_u16(vget_high_u16(a), vget_high_u16(b))); // high products mod 2Q
-
-  // narrow/join, return u16x8 (mod 2Q)
-  return vuzp1q_u16(vreinterpretq_u16_u32(c0), vreinterpretq_u16_u32(c1));
-}
-
-/**
- * Compute in-place number-theoretic transform (NTT) of polynomial `p`.
- *
- * @note Neon implementation.
- *
- * @param[in,out] p Polynomial.
- */
-static inline void poly_ntt_neon(poly_t * const p) {
-  // barrett multiplier and pointer type punnion union
-  static const uint32_t M = 165141428; // multiplier: floor((1<<39)/Q)
-  union { uint16_t *u16; uint32_t *u32; uint64_t *u64; } ps = { .u16 = p->cs };
-  // poly_t op = *p; // test copy of original poly
-
-  // len = 128
-  {
-    // load zeta
-    const uint16_t z = NTT_LUT[1];
-
-    // adjust coefs in groups of 16 (8 high, 8 low)
-    for (size_t j = 0; j < 16; j++) {
-      const size_t lo_id = 8 * j,
-                   hi_id = 128 + 8 * j;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi * z) % Q
-      uint16x8_t t;
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
-                   p1 = vmull_n_u16(vget_high_u16(hi), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // t %= Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
-      }
-
-      // adjust coefs (note: order matters; adjust `hi` first)
-      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
-      lo = vaddq_u16(lo, t); // lo += t
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_ntt_neon(p, op, 128);
-
-  // len = 64
-  for (size_t i = 0; i < 2; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[2 + i];
-
-    // adjust coefs in groups of 16 (8 high, 8 low)
-    for (size_t j = 0; j < 8; j++) {
-      const size_t lo_id = 128*i + 8*j + 0,
-                   hi_id = 128*i + 8*j + 64;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi * z) % Q
-      uint16x8_t t;
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
-                   p1 = vmull_n_u16(vget_high_u16(hi), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // t %= Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
-      }
-
-      // adjust coefs (note: order matters; adjust `hi` first)
-      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
-      lo = vaddq_u16(lo, t); // lo += t
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_ntt_neon(p, op, 64);
-
-  // len = 32
-  for (size_t i = 0; i < 4; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[4 + i];
-
-    for (size_t j = 0; j < 4; j++) {
-      const size_t lo_id = 64*i + 8*j + 0,
-                   hi_id = 64*i + 8*j + 32;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi * z) % Q
-      uint16x8_t t;
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
-                   p1 = vmull_n_u16(vget_high_u16(hi), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // t %= Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
-      }
-
-      // adjust coefs (note: order matters; adjust `hi` first)
-      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
-      lo = vaddq_u16(lo, t); // lo += t
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_ntt_neon(p, op, 32);
-
-  // len = 16
-  for (size_t i = 0; i < 8; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[8 + i];
-
-    for (size_t j = 0; j < 2; j++) {
-      const size_t lo_id = 32*i + 8*j + 0,
-                   hi_id = 32*i + 8*j + 16;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi * z) % Q
-      uint16x8_t t;
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
-                   p1 = vmull_n_u16(vget_high_u16(hi), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // t %= Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
-      }
-
-      // adjust coefs (note: order matters; adjust `hi` first)
-      hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
-      lo = vaddq_u16(lo, t); // lo += t
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_ntt_neon(p, op, 16);
-
-  // len = 8
-  for (size_t i = 0; i < 16; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[16 + i];
-
-    // calculate offsets
-    const size_t lo_id = 16*i + 0,
-                 hi_id = 16*i + 8;
-
-    // load coefs
-    uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-               hi = vld1q_u16(p->cs + hi_id);
-
-    // t = (hi * z) % Q
-    uint16x8_t t;
-    {
-      // p * hi * z
-      uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z),
-                 p1 = vmull_n_u16(vget_high_u16(hi), z);
-
-      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-      // t %= Q (merge, reduce)
-      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-      t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
-    }
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
-    lo = vaddq_u16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-    // store coefs
-    vst1q_u16(p->cs + lo_id, lo);
-    vst1q_u16(p->cs + hi_id, hi);
-  }
-
-  // check_poly_ntt_neon(p, op, 8);
-
-  // len = 4
-  for (size_t i = 0; i < 16; i++) {
-    // load next two zetas into z0 and z1
-    const uint16_t z0 = NTT_LUT[32 + 2*i + 0],
-                   z1 = NTT_LUT[32 + 2*i + 1];
-
-    // load coefs
-    // l0 l0 l0 l0 h0 h0 h0 h0 l1 l1 l1 l1 h1 h1 h1 h1
-    const uint64x2x2_t cs = vld2q_u64(ps.u64 + 4*i);
-    uint16x8_t lo = vreinterpretq_u16_u64(cs.val[0]),
-               hi = vreinterpretq_u16_u64(cs.val[1]);
-
-    // t = (hi * z) % Q
-    uint16x8_t t;
-    {
-      // p * hi * z
-      uint32x4_t p0 = vmull_n_u16(vget_low_u16(hi), z0),
-                 p1 = vmull_n_u16(vget_high_u16(hi), z1);
-
-      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-      // t %= Q (merge, reduce)
-      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-      t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
-    }
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
-    lo = vaddq_u16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-    // store coefs
-    // reinterpret each register as a pair of u64s, then store the
-    // values interleaved so they are permuted into the correct position
-    uint64x2x2_t s = { .val = { vreinterpretq_u64_u16(lo), vreinterpretq_u64_u16(hi) } };
-    vst2q_u64(ps.u64 + 4*i, s);
-  }
-
-  // check_poly_ntt_neon(p, op, 4);
-
-  // len = 2
-  for (size_t i = 0; i < 16; i++) {
-    // load next four zetas into z0, z1, z2, z3
-    // FIXME: find faster way to do this
-    const uint16_t z0 = NTT_LUT[64 + 4*i + 0],
-                   z1 = NTT_LUT[64 + 4*i + 1],
-                   z2 = NTT_LUT[64 + 4*i + 2],
-                   z3 = NTT_LUT[64 + 4*i + 3];
-    const uint16x8_t z = { z0, z0, z1, z1, z2, z2, z3, z3 };
-
-    // load coefs
-    // l0 l0 h0 h0 l1 l1 h1 h1 l2 l2 h2 h2 l3 l3 h3 h3
-    const uint32x4x2_t cs = vld2q_u32(ps.u32 + 8*i);
-    uint16x8_t lo = vreinterpretq_u16_u32(cs.val[0]),
-               hi = vreinterpretq_u16_u32(cs.val[1]);
-
-    // t = (hi * z) % Q
-    uint16x8_t t;
-    {
-      // p * hi * z
-      uint32x4_t p0 = vmull_u16(vget_low_u16(hi), vget_low_u16(z)),
-                 p1 = vmull_u16(vget_high_u16(hi), vget_high_u16(z));
-
-      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-      // t %= Q (merge, reduce)
-      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-      t = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // t %= Q
-    }
-
-    // adjust coefs (note: order matters; adjust `hi` first)
-    hi = vaddq_u16(lo, vsubq_u16(Q16, t)); // hi = lo - t
-    lo = vaddq_u16(lo, t); // lo += t
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-    // store coefs
-    // reinterpret each register as a u32x4, then store the values
-    // interleaved so they are permuted into the correct position
-    uint32x4x2_t s = { .val = { vreinterpretq_u32_u16(lo), vreinterpretq_u32_u16(hi) } };
-    vst2q_u32(ps.u32 + 8*i, s);
-  }
-
-  // check_poly_ntt_neon(p, op, 2);
-}
-
-/**
- * Compute in-place inverse number-theoretic transform (NTT) of
- * polynomial `p`.
- *
- * @note Neon implementation.
- *
- * @param[in,out] p Polynomial.
- */
-static inline void poly_inv_ntt_neon(poly_t * const p) {
-  // barrett multiplier and pointer type punnion union
-  static const uint32_t M = 165141428; // multiplier: floor((1<<39)/Q)
-  union { uint16_t *u16; uint32_t *u32; uint64_t *u64; } ps = { .u16 = p->cs };
-  // poly_t op = *p; // test copy of original poly
-
-  // len = 2
-  for (size_t i = 0; i < 16; i++) {
-    // load next four zetas into z0, z1, z2, z3
-    // FIXME: find faster way to do this
-    const uint16_t z0 = NTT_LUT[128 - 4*(i + 1) + 3],
-                   z1 = NTT_LUT[128 - 4*(i + 1) + 2],
-                   z2 = NTT_LUT[128 - 4*(i + 1) + 1],
-                   z3 = NTT_LUT[128 - 4*(i + 1) + 0];
-    const uint16x8_t z = { z0, z0, z1, z1, z2, z2, z3, z3 };
-
-    // load coefs
-    // l0 l0 h0 h0 l1 l1 h1 h1 l2 l2 h2 h2 l3 l3 h3 h3
-    const uint32x4x2_t cs = vld2q_u32(ps.u32 + 8*i);
-    uint16x8_t lo = vreinterpretq_u16_u32(cs.val[0]),
-               hi = vreinterpretq_u16_u32(cs.val[1]);
-
-    // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
-    uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
-    lo = vaddq_u16(hi, lo);
-
-    // hi = (t * z) % Q (adjust hi)
-    {
-      // p * hi * z
-      uint32x4_t p0 = vmull_u16(vget_low_u16(t), vget_low_u16(z)),
-                 p1 = vmull_u16(vget_high_u16(t), vget_high_u16(z));
-
-      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-      // hi = t % Q (merge, reduce)
-      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-      hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
-    }
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-    // store coefs
-    // reinterpret each register as a u32x4, then store the values
-    // interleaved so they are permuted into the correct position
-    uint32x4x2_t s = { .val = { vreinterpretq_u32_u16(lo), vreinterpretq_u32_u16(hi) } };
-    vst2q_u32(ps.u32 + 8*i, s);
-  }
-
-  // check_poly_inv_ntt_neon(p, op, 2);
-
-  // len = 4
-  for (size_t i = 0; i < 16; i++) {
-    // load next two zetas into z0 and z1
-    const uint16_t z0 = NTT_LUT[64 - 2*(i + 1) + 1],
-                   z1 = NTT_LUT[64 - 2*(i + 1) + 0];
-
-    // load coefs
-    // l0 l0 l0 l0 h0 h0 h0 h0 l1 l1 l1 l1 h1 h1 h1 h1
-    const uint64x2x2_t cs = vld2q_u64(ps.u64 + 4*i);
-    uint16x8_t lo = vreinterpretq_u16_u64(cs.val[0]),
-               hi = vreinterpretq_u16_u64(cs.val[1]);
-
-    // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
-    uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
-    lo = vaddq_u16(hi, lo);
-
-    // hi = (t * z) % Q (adjust hi)
-    {
-      // p * hi * z
-      uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z0),
-                 p1 = vmull_n_u16(vget_high_u16(t), z1);
-
-      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-      // hi = t % Q (merge, reduce)
-      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-      hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
-    }
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-    // store coefs
-    // reinterpret each register as a pair of u64s, then store the
-    // values interleaved so they are permuted into the correct position
-    uint64x2x2_t s = { .val = { vreinterpretq_u64_u16(lo), vreinterpretq_u64_u16(hi) } };
-    vst2q_u64(ps.u64 + 4*i, s);
-  }
-
-  // check_poly_inv_ntt_neon(p, op, 4);
-
-  // len = 8
-  for (size_t i = 0; i < 16; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[32 - (i + 1)];
-
-    // calculate offsets
-    const size_t lo_id = 16*i + 0,
-                 hi_id = 16*i + 8;
-
-    // load coefs
-    uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-               hi = vld1q_u16(p->cs + hi_id);
-
-    // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
-    uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
-    lo = vaddq_u16(hi, lo);
-
-    // hi = (t * z) % Q (adjust hi)
-    {
-      // p * hi * z
-      uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
-                 p1 = vmull_n_u16(vget_high_u16(t), z);
-
-      // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-      const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                       t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                       t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                       t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                       t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                       t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-      // hi = t % Q (merge, reduce)
-      t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-      hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
-    }
-
-    // reduce coefs (hi %= Q, lo %= Q)
-    lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-    hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-    // store coefs
-    vst1q_u16(p->cs + lo_id, lo);
-    vst1q_u16(p->cs + hi_id, hi);
-  }
-
-  // check_poly_inv_ntt_neon(p, op, 8);
-
-  // len = 16
-  for (size_t i = 0; i < 8; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[16 - (i + 1)];
-
-    for (size_t j = 0; j < 2; j++) {
-      const size_t lo_id = 32*i + 8*j + 0,
-                   hi_id = 32*i + 8*j + 16;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
-      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
-      lo = vaddq_u16(hi, lo);
-
-      // hi = (t * z) % Q (adjust hi)
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
-                   p1 = vmull_n_u16(vget_high_u16(t), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // hi = t % Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
-      }
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_inv_ntt_neon(p, op, 16);
-
-  // len = 32
-  for (size_t i = 0; i < 4; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[8 - (i + 1)];
-
-    for (size_t j = 0; j < 4; j++) {
-      const size_t lo_id = 64*i + 8*j + 0,
-                   hi_id = 64*i + 8*j + 32;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
-      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
-      lo = vaddq_u16(hi, lo);
-
-      // hi = (t * z) % Q (adjust hi)
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
-                   p1 = vmull_n_u16(vget_high_u16(t), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // hi = t % Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
-      }
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_inv_ntt_neon(p, op, 32);
-
-  // len = 64
-  for (size_t i = 0; i < 2; i++) {
-    // load zeta
-    const uint16_t z = NTT_LUT[4 - (i + 1)];
-
-    // adjust coefs in groups of 16 (8 high, 8 low)
-    for (size_t j = 0; j < 8; j++) {
-      const size_t lo_id = 128*i + 8*j + 0,
-                   hi_id = 128*i + 8*j + 64;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
-      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
-      lo = vaddq_u16(hi, lo);
-
-      // hi = (t * z) % Q (adjust hi)
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
-                   p1 = vmull_n_u16(vget_high_u16(t), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // hi = t % Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
-      }
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_inv_ntt_neon(p, op, 64);
-
-  // len = 128
-  {
-    // load zeta
-    const uint16_t z = NTT_LUT[1];
-
-    // adjust coefs in groups of 16 (8 high, 8 low)
-    for (size_t j = 0; j < 16; j++) {
-      const size_t lo_id = 8 * j,
-                   hi_id = 128 + 8 * j;
-
-      // load coefs
-      uint16x8_t lo = vld1q_u16(p->cs + lo_id),
-                 hi = vld1q_u16(p->cs + hi_id);
-
-      // t = (hi - lo), lo = hi + lo (adjust coefs, order matters)
-      uint16x8_t t = vaddq_u16(hi, vsubq_u16(Q16, lo));
-      lo = vaddq_u16(hi, lo);
-
-      // hi = (t * z) % Q (adjust hi)
-      {
-        // p * hi * z
-        uint32x4_t p0 = vmull_n_u16(vget_low_u16(t), z),
-                   p1 = vmull_n_u16(vget_high_u16(t), z);
-
-        // t = p - Q * ((p * M) >> 39): partial reduction into range [0, 2Q)
-        const uint32x4_t t0_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p0), M)),
-                         t0_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p0), M)),
-                         t1_lo = vreinterpretq_u32_u64(vmull_n_u32(vget_low_u32(p1), M)),
-                         t1_hi = vreinterpretq_u32_u64(vmull_n_u32(vget_high_u32(p1), M)),
-                         t0 = vsubq_u32(p0, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t0_lo, t0_hi), 7), Q)),
-                         t1 = vsubq_u32(p1, vmulq_n_u32(vshrq_n_u32(vuzp2q_u32(t1_lo, t1_hi), 7), Q));
-
-        // hi = t % Q (merge, reduce)
-        t = vuzp1q_u16(vreinterpretq_u16_u32(t0), vreinterpretq_u16_u32(t1)); // merge
-        hi = vsubq_u16(t, vandq_u16(vcgeq_u16(t, Q16), Q16)); // hi = t % Q
-      }
-
-      // reduce coefs (hi %= Q, lo %= Q)
-      lo = vsubq_u16(lo, vandq_u16(vcgeq_u16(lo, Q16), Q16)); // lo %= Q
-      hi = vsubq_u16(hi, vandq_u16(vcgeq_u16(hi, Q16), Q16)); // hi %= Q
-
-      // store coefs
-      vst1q_u16(p->cs + lo_id, lo);
-      vst1q_u16(p->cs + hi_id, hi);
-    }
-  }
-
-  // check_poly_inv_ntt_neon(p, op, 128);
-
-  // inverse of Q as u16x8
-  static const uint16x8_t Q_INV = { 3303, 3303, 3303, 3303, 3303, 3303, 3303, 3303 };
-
-  // multiply all coefficients by 3309
-  for (size_t i = 0; i < 32; i++) {
-    // load coefficients
-    uint16x8_t cs = vld1q_u16(p->cs + (8 * i));
-
-    // cs = (cs * Q_INV) % Q (multiply, reduce)
-    cs = ntt_mul_u16(cs, Q_INV); // multiply, partial reduction
-    cs = vsubq_u16(cs, vandq_u16(vcgeq_u16(cs, Q16), Q16)); // reduce
-
-    // store coefficients
-    vst1q_u16(p->cs + (8 * i), cs);
-  }
-}
-
-/**
- * Add polynomial `a` to polynomial `b` component-wise, and store the
- * sum in `a`.
- *
- * @note Neon implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- */
-static inline void poly_add_neon(poly_t * const restrict a, const poly_t * const restrict b) {
-  for (size_t i = 0; i < 32; i++) {
-    // load operands
-    const uint16x8_t bb = vld1q_u16(b->cs + 8*i);
-    uint16x8_t aa = vld1q_u16(a->cs + 8*i);
-
-    aa = vaddq_u16(aa, bb); // a += b
-
-    // a -= (a >= Q) ? Q : 0
-    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16));
-
-    // store
-    vst1q_u16(a->cs + 8*i, aa);
-  }
-}
-
-/**
- * Add polynomial `a` to polynomials `b` and `c` component-wise, and
- * store the sum in `a`.
- *
- * @note Neon implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- * @param[in] c Polynomial.
- */
-static inline void poly_add2_neon(poly_t * const restrict a, const poly_t * const restrict b, const poly_t * const restrict c) {
-  for (size_t i = 0; i < 32; i++) {
-    // load operands
-    const uint16x8_t bb = vld1q_u16(b->cs + 8*i),
-                     cc = vld1q_u16(c->cs + 8*i);
-
-    uint16x8_t aa = vaddq_u16(vld1q_u16(a->cs + 8*i), bb);  // a += b
-    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16)); // a %= Q
-    aa = vaddq_u16(aa, cc);                                 // a += c
-    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16)); // a %= Q
-
-    // store
-    vst1q_u16(a->cs + 8*i, aa);
-  }
-}
-
-/**
- * Subtract polynomial `b` from polynomial `a` component-wise, and store the
- * result in `a`.
- *
- * @note Neon implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- */
-static inline void poly_sub_neon(poly_t * const restrict a, const poly_t * const restrict b) {
-  for (size_t i = 0; i < 32; i++) {
-    // load operands
-    uint16x8_t aa = vld1q_u16(a->cs + 8*i),
-               bb = vld1q_u16(b->cs + 8*i);
-
-    aa = vaddq_u16(aa, vsubq_u16(Q16, bb)); // a -= b
-    aa = vsubq_u16(aa, vandq_u16(vcgeq_u16(aa, Q16), Q16)); // a %= Q
-
-    // store
-    vst1q_u16(a->cs + 8*i, aa);
-  }
-}
-
-/**
- * Multiply `a` and `b` and store the product in `c`.
- *
- * @note `a` and `b` are assumed to be in the NTT domain.
- *
- * @note Neon implementation.
- *
- * @param[out] c Product polynomial, in the NTT domain.
- * @param[in] a Input polynomial, in the NTT domain.
- * @param[in] b Input polynomial, in the NTT domain.
- */
-static inline void poly_mul_neon(poly_t * const restrict c, const poly_t * const restrict a, const poly_t * const restrict b) {
-  // loop and process coefficients in groups of 16
-  for (size_t i = 0; i < 16; i++) {
-    // load 8 zetas from MUL_LUT
-    const uint16x8_t z = vld1q_u16(MUL_LUT + (8 * i));
-
-    // load 16 interleaved coefficients from polynomial `a` and 16
-    // interleaved coefficients from polynomial `b`.
-    const uint16x8x2_t aa = vld2q_u16(a->cs + 16*i),
-                       bb = vld2q_u16(b->cs + 16*i);
-
-    // deinterleave coefficients into a sets of even coefficients (`ae`
-    // and `be`) and sets of odd coefficients (`ao` and `bo`)
-    const uint16x8_t ae = aa.val[0], ao = aa.val[1],
-                     be = bb.val[0], bo = bb.val[1];
-
-    // bo_z = (bo * z) % 2Q (partial reduction)
-    const uint16x8_t bo_z = ntt_mul_u16(bo, z);
-
-    // split sets into low and high sets of u16x4
-    const uint16x4_t ae_lo = vget_low_u16(ae), ae_hi = vget_high_u16(ae),
-                     ao_lo = vget_low_u16(ao), ao_hi = vget_high_u16(ao),
-                     be_lo = vget_low_u16(be), be_hi = vget_high_u16(be),
-                     bo_lo = vget_low_u16(bo), bo_hi = vget_high_u16(bo),
-                     bo_z_lo = vget_low_u16(bo_z), bo_z_hi = vget_high_u16(bo_z);
-
-    // even results: ce = ((ae * be) + (ao * bo * z)) % 2Q (partial reduction)
-    const uint32x4_t ce0 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_lo, be_lo), vmull_u16(ao_lo, bo_z_lo))),
-                     ce1 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_hi, be_hi), vmull_u16(ao_hi, bo_z_hi)));
-
-    // ce %= Q (final reduction)
-    uint16x8_t ce = vuzp1q_u16(vreinterpretq_u16_u32(ce0), vreinterpretq_u16_u32(ce1));
-    ce = vsubq_u16(ce, vandq_u16(vcgeq_u16(ce, Q16), Q16));
-
-    // odd results: co = ((ae * bo) + (ao * be)) % 2Q (partial reduction)
-    const uint32x4_t co0 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_lo, bo_lo), vmull_u16(ao_lo, be_lo))),
-                     co1 = ntt_mod_2q(vaddq_u32(vmull_u16(ae_hi, bo_hi), vmull_u16(ao_hi, be_hi)));
-
-    // co %= Q (final reduction)
-    uint16x8_t co = vuzp1q_u16(vreinterpretq_u16_u32(co0), vreinterpretq_u16_u32(co1));
-    co = vsubq_u16(co, vandq_u16(vcgeq_u16(co, Q16), Q16));
-
-    // interleave and store coefficients
-    const uint16x8x2_t cc = { .val = { ce, co } };
-    vst2q_u16(c->cs + (16*i), cc);
-  }
-}
-
-/**
- * Pack 12-bit coefficients of polynomial `p` and serialize them into
- * 384 bytes of the output buffer `out`.
- *
- * @note Neon implementation.
- *
- * @param[out] out Output buffer (384 bytes).
- * @param[in] Input polynomial.
- */
-static inline void poly_encode_neon(uint8_t out[static 384], const poly_t * const a) {
-  // TODO: scalar implementation
-
-  for (size_t i = 0; i < 128; i++) {
-    const uint16_t a0 = a->cs[2 * i],
-                   a1 = a->cs[2 * i + 1];
-    out[3 * i] = a0 & 0x0ff;
-    out[3 * i + 1] = ((a0 & 0xf00) >> 8) | ((a1 & 0x0f) << 4);
-    out[3 * i + 2] = (a1 & 0xff0) >> 4;
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 11 bits and then serialize
- * them as 352 bytes in output buffer `out`.
- *
- * @note Neon implementation.
- *
- * @param[out] out Output buffer (352 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_11bit_neon(uint8_t out[static 352], const poly_t * const p) {
-  // TODO: scalar implementation
-
-  static const uint64_t M = 5284525696; // (1<<44)/Q
-
-  for (size_t i = 0; i < 32; i++) {
-    uint16_t y[8] = { 0 };
-    for (size_t j = 0; j < 8; j++) {
-      const uint32_t x = (p->cs[8 * i + j] * M) >> 32; // 44 - 12
-      y[j] = 0x7ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^11/Q)))
-    }
-
-    // 00000000 11111000 22111111 22222222
-    // 33333332 44443333 54444444 55555555
-    // 66666655 77766666 77777777
-    out[11 * i + 0] = y[0] & 0xff;
-    out[11 * i + 1] = ((y[0] >> 8) & 7) | ((y[1] & 0x1f) << 3);
-    out[11 * i + 2] = ((y[1] >> 5) & 0x3f) | ((y[2] & 3) << 6);
-    out[11 * i + 3] = (y[2] >> 2) & 0xff;
-    out[11 * i + 4] = ((y[2] >> 10) & 1) | ((y[3] & 0x7f) << 1);
-    out[11 * i + 5] = ((y[3] >> 7) & 0xf) | ((y[4] & 0xf) << 4);
-    out[11 * i + 6] = ((y[4] >> 4) & 0x7f) | ((y[5] & 1) << 7);
-    out[11 * i + 7] = (y[5] >> 1) & 0xff;
-    out[11 * i + 8] = ((y[5] >> 9) & 3) | ((y[6] & 0x3f) << 2);
-    out[11 * i + 9] = ((y[6] >> 6) & 0x1f) | ((y[7] & 7) << 5);
-    out[11 * i + 10] = (y[7] >> 3) & 0xff;
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 10 bits and then serialize
- * them as 320 bytes in output buffer `out`.
- *
- * @note Neon implementation.
- *
- * @param[out] out Output buffer (320 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_10bit_neon(uint8_t out[static 320], const poly_t * const p) {
-  // TODO: scalar implementation
-
-  static const uint64_t M = 2642262848; // (1<<43)/Q
-
-  for (size_t i = 0; i < 64; i++) {
-    uint16_t y[4] = { 0 };
-    for (size_t j = 0; j < 4; j++) {
-      const uint32_t x = (p->cs[4 * i + j] * M) >> 32; // 43 - 11
-      y[j] ^= 0x3ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^10/Q)))
-    }
-
-    out[5 * i + 0] = y[0] & 0xff;
-    out[5 * i + 1] = ((y[0] >> 8) & 0x03) | ((y[1] & 0x3f) << 2);
-    out[5 * i + 2] = ((y[1] >> 6) & 0xf) | ((y[2] & 0xf) << 4);
-    out[5 * i + 3] = ((y[2] >> 4) & 0x3f) | ((y[3] & 0x3) << 6);
-    out[5 * i + 4] = (y[3] >> 2) & 0xff;
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 5 bits and then serialize
- * them as 160 bytes in output buffer `out`.
- *
- * @note Neon implementation.
- *
- * @param[out] Output buffer (160 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_5bit_neon(uint8_t out[static 160], const poly_t * const p) {
-  // TODO: scalar implementation
-
-  // multiplier determined emperically:
-  //   >> def real_round(n); (n*32.0/Q).round; end
-  //   => :real_round
-  //   >> def fake_round(n); v = (n*((1<<22)/Q+1)) >> 16; (v >> 1) + (v & 1); end
-  //   => :fake_round
-  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
-  //   => ""
-  static const uint16_t M = 1260; // multiplier: (1 << 22)/Q+1
-
-  for (size_t i = 0; i < 32; i++) {
-    uint16_t y[8] = { 0 };
-
-    for (size_t j = 0; j < 8; j++) {
-      const uint16_t x = (p->cs[8 * i + j] * M) >> 16; // x = c*(1<<6)/Q
-      y[j] = 0x1f & ((x >> 1) + (x & 1)); // round
-    }
-
-    out[5 * i + 0] = y[0] | ((y[1] & 0x07) << 5);                   // 11100000
-    out[5 * i + 1] = (y[1] >> 3) | (y[2] << 2) | ((y[3] & 1) << 7); // 32222211
-    out[5 * i + 2] = (y[3] >> 1) | ((y[4] & 0xf) << 4);             // 44443333
-    out[5 * i + 3] = (y[4] >> 4) | (y[5] << 1) | ((y[6] & 3) << 6); // 66555554
-    out[5 * i + 4] = (y[6] >> 2) | (y[7] << 3);                     // 77777666
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 4 bits and then serialize
- * them as 128 bytes in output buffer `out`.
- *
- * @note Neon implementation.
- *
- * @param[out] Output buffer (128 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_4bit_neon(uint8_t out[static 128], const poly_t * const p) {
-  // TODO: scalar implementation
-
-  static const uint64_t M = 41285357; // (1 << 37)/Q
-
-  for (size_t i = 0; i < 128; i++) {
-    uint16_t y[2] = { 0 };
-
-    for (size_t j = 0; j < 2; j++) {
-      const uint16_t x = (p->cs[2 * i + j] * M) >> 32; // 37 - 5
-      y[j] = 0xf & ((x >> 1) + (x & 1)); // mask(round(x*(2^4/Q)))
-    }
-
-    out[i] = y[0] | (y[1] << 4);
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 1 bit and then serialize
- * them as 32 bytes in output buffer `out`.
- *
- * @note Neon implementation.
- *
- * @param[out] Output buffer (32 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_1bit_neon(uint8_t out[static 32], const poly_t * const p) {
-  for (size_t i = 0; i < 32; i++) {
-    out[i] = (IN_RANGE(p->cs[8 * i + 0], 833, 2496)) |
-             (IN_RANGE(p->cs[8 * i + 1], 833, 2496) << 1) |
-             (IN_RANGE(p->cs[8 * i + 2], 833, 2496) << 2) |
-             (IN_RANGE(p->cs[8 * i + 3], 833, 2496) << 3) |
-             (IN_RANGE(p->cs[8 * i + 4], 833, 2496) << 4) |
-             (IN_RANGE(p->cs[8 * i + 5], 833, 2496) << 5) |
-             (IN_RANGE(p->cs[8 * i + 6], 833, 2496) << 6) |
-             (IN_RANGE(p->cs[8 * i + 7], 833, 2496) << 7);
-  }
-}
-
-/**
- * Read 384 bytes from input buffer `b`, parse bytes as 256 packed
- * 12-bit integers, and then save the integers as coefficients of output
- * polynomial `p`.
- *
- * @note Input integers are reduced modulo 3329.  The draft standard
- * says values in the range [3329, 4095] should be rejected as an
- * error, but doing so introduces an ambiguous error state not present
- * in Kyber.  According to a discussion on the pqc-forum mailing list,
- * implicit reduction modulo 3329 is a better option.  See the
- * discussion here:
- *
- * https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
- *
- * @note Neon implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (384 bytes).
- */
-static inline void poly_decode_neon(poly_t * const p, const uint8_t b[static 384]) {
-  static const uint8x16_t
-    C0_IDS = {  0,  1,  1,  2,   3,  4,  4,  5,   6,  7,  7,  8,   9, 10, 10, 11 },
-    C1_IDS = { 12, 13, 13, 14,  15, 16, 16, 17,  18, 19, 19, 20,  21, 22, 22, 23 },
-    C2_IDS = { 24, 25, 25, 26,  27, 28, 28, 29,  30, 31, 31, 32,  33, 34, 34, 35 },
-    C3_IDS = { 36, 37, 37, 38,  39, 40, 40, 41,  42, 43, 43, 44,  45, 46, 46, 47 };
-  static const uint16x8_t SHIFTS = { 0, 4, 0, 4, 0, 4, 0, 4 },
-                          MASK = { 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff, 0xfff };
-
-  // load batches of 48 bytes (32 coefficients)
-  for (size_t i = 0; i < 8; i++) {
-    // load 48 bytes
-    const uint8x16x3_t c = vld1q_u8_x3(b + 48*i);
-
-    // decode 32 values
-    uint16x8_t c0 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C0_IDS)) >> SHIFTS) & MASK,
-               c1 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C1_IDS)) >> SHIFTS) & MASK,
-               c2 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C2_IDS)) >> SHIFTS) & MASK,
-               c3 = (vreinterpretq_u16_u8(vqtbl3q_u8(c, C3_IDS)) >> SHIFTS) & MASK;
-
-    // reduce values
-    c0 = vsubq_u16(c0, vandq_u16(vcgeq_u16(c0, Q16), Q16)); // c0 %= Q
-    c1 = vsubq_u16(c1, vandq_u16(vcgeq_u16(c1, Q16), Q16)); // c1 %= Q
-    c2 = vsubq_u16(c2, vandq_u16(vcgeq_u16(c3, Q16), Q16)); // c2 %= Q
-    c3 = vsubq_u16(c3, vandq_u16(vcgeq_u16(c3, Q16), Q16)); // c3 %= Q
-
-    // store values
-    vst1q_u16_x4(p->cs + 32*i, ((uint16x8x4_t) { .val = { c0, c1, c2, c3 } }));
-  }
-}
-
-/**
- * Decode packed 11-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Neon implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (352 bytes).
- */
-static inline void poly_decode_11bit_neon(poly_t * const p, const uint8_t b[static 352]) {
-  // TODO: scalar implementation
-
-  for (size_t i = 0; i < 32; i++) {
-    const uint16_t b0 = b[11 * i + 0],
-                   b1 = b[11 * i + 1],
-                   b2 = b[11 * i + 2],
-                   b3 = b[11 * i + 3],
-                   b4 = b[11 * i + 4],
-                   b5 = b[11 * i + 5],
-                   b6 = b[11 * i + 6],
-                   b7 = b[11 * i + 7],
-                   b8 = b[11 * i + 8],
-                   b9 = b[11 * i + 9],
-                   b10 = b[11 * i + 10];
-
-    // 00000000 11111000 22111111 22222222
-    // 33333332 44443333 54444444 55555555
-    // 66666655 77766666 77777777
-    const uint16_t x[8] = {
-      b0 | ((b1 & 7) << 8),
-      (b1 >> 3) | ((b2 & 0x3f) << 5),
-      (b2 >> 6) | (b3 << 2) | ((b4 & 1) << 10),
-      (b4 >> 1) | ((b5 & 0xf) << 7),
-      (b5 >> 4) | ((b6 & 0x7f) << 4),
-      (b6 >> 7) | (b7 << 1) | ((b8 & 3) << 9),
-      (b8 >> 2) | ((b9 & 0x1f) << 6),
-      (b9 >> 5) | (b10 << 3),
-    };
-
-    // decode, round, write to result
-    for (size_t j = 0; j < 8; j++) {
-      p->cs[8 * i + j] = (x[j] * Q + (1 << 10)) >> 11;
-    }
-  }
-}
-
-/**
- * Decode packed 10-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Neon implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (320 bytes).
- */
-static inline void poly_decode_10bit_neon(poly_t * const p, const uint8_t b[static 320]) {
-  // TODO: scalar implementation
-
-  for (size_t i = 0; i < 64; i++) {
-    const uint8_t b0 = b[5 * i + 0],
-                  b1 = b[5 * i + 1],
-                  b2 = b[5 * i + 2],
-                  b3 = b[5 * i + 3],
-                  b4 = b[5 * i + 4];
-    const uint16_t x[4] = {
-      b0 | ((b1 & 3) << 8),
-      (b1 >> 2) | ((b2 & 0xf) << 6),
-      (b2 >> 4) | ((b3 & 0x3f) << 4),
-      (b3 >> 6) | (b4 << 2),
-    };
-
-    // decode, round, write to result
-    for (size_t j = 0; j < 4; j++) {
-      p->cs[4 * i + j] = (x[j] * Q + (1 << 9)) >> 10;
-    }
-  }
-}
-
-/**
- * Decode packed 5-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Neon implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (160 bytes).
- */
-static inline void poly_decode_5bit_neon(poly_t * const p, const uint8_t b[static 160]) {
-  // TODO: scalar implementation
-
-  for (size_t i = 0; i < 32; i++) {
-    const uint16_t b0 = b[5 * i + 0],
-                   b1 = b[5 * i + 1],
-                   b2 = b[5 * i + 2],
-                   b3 = b[5 * i + 3],
-                   b4 = b[5 * i + 4];
-
-    // 11100000 32222211 44443333 66555554 77777666
-    const uint16_t x[8] = {
-      b0 & 0x1f,
-      (b0 >> 5) | ((b1 & 3) << 3),
-      (b1 >> 2) & 0x1f,
-      (b1 >> 7) | ((b2 & 0xf) << 1),
-      (b2 >> 4) | ((b3 & 1) << 4),
-      (b3 >> 1) & 0x1f,
-      (b3 >> 6) | ((b4 & 7) << 2),
-      (b4 >> 3),
-    };
-
-    // decode, round, write to result
-    for (size_t j = 0; j < 8; j++) {
-      p->cs[8 * i + j] = (x[j] * Q + (1 << 4)) >> 5;
-    }
-  }
-}
-
-/**
- * Decode packed 4-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Neon implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (128 bytes).
- */
-static inline void poly_decode_4bit_neon(poly_t * const p, const uint8_t b[static 128]) {
-  static const uint8x8_t LO_MASK = { 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf, 0xf };
-  static const uint16x8_t EIGHTS = { 8, 8, 8, 8, 8, 8, 8, 8};
-
-  // 1. load 16 byte chunks
-  // 2. shift and mask into 32 4-bit values in 16-bit lanes
-  // 3. multiply by Q, add 8 (rounding), and shift by 4 to convert to coefs
-  // 3. store 32 coefs to output poly
-  for (size_t i = 0; i < 8; i++) {
-    const uint8x16_t t = vld1q_u8(b + 16*i);
-    const uint8x8_t lo = vget_low_u8(t),
-                    hi = vget_high_u8(t);
-    const uint16x8_t t0 = (vmovl_u8(lo & LO_MASK) * Q16 + EIGHTS) >> 4,
-                     t1 = (vmovl_u8(lo >> 4) * Q16 + EIGHTS) >> 4,
-                     t2 = (vmovl_u8(hi & LO_MASK) * Q16 + EIGHTS) >> 4,
-                     t3 = (vmovl_u8(hi >> 4) * Q16 + EIGHTS) >> 4;
-    vst2q_u16(p->cs + (32 * i), ((uint16x8x2_t) { .val = { t0, t1 } }));
-    vst2q_u16(p->cs + (32 * i + 16), ((uint16x8x2_t) { .val = { t2, t3 } }));
-  }
-}
-
-/**
- * Decode packed 1-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Neon implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (32 bytes).
- */
-static inline void poly_decode_1bit_neon(poly_t * const p, const uint8_t b[static 32]) {
-  // TODO: scalar implementation
-
-  for (size_t i = 0; i < 32; i++) {
-    p->cs[8 * i + 0] = ((b[i] & 0x01) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 1] = ((b[i] & 0x02) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 2] = ((b[i] & 0x04) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 3] = ((b[i] & 0x08) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 4] = ((b[i] & 0x10) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 5] = ((b[i] & 0x20) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 6] = ((b[i] & 0x40) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 7] = ((b[i] & 0x80) ? 0xfff : 0) & 1665;
-  }
-}
-
-// define neon vector operations
-#define DEF_NEON_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_neon(poly_t v[static N], const uint8_t b[static 384*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_neon(v + i, b + (384 * i)); \
-    } \
-  } \
-  \
-  static inline void vec ## N ## _encode_neon(uint8_t out[static N*384], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_neon(out + 384*i, v + i); \
-    } \
-  }
-
-// define neon 10-bit vector operations
-#define DEF_NEON_10BIT_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_10bit_neon(poly_t v[static N], const uint8_t b[static 320*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_10bit_neon(v + i, b + 320*i); \
-    } \
-  } \
-  \
-  static inline void vec ## N ## _encode_10bit_neon(uint8_t out[static 320*N], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_10bit_neon(out + 320*i, v + i); \
-    } \
-  }
-
-#define DEF_NEON_11BIT_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_11bit_neon(poly_t v[static N], const uint8_t b[static 352*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_11bit_neon(v + i, b + 352*i); \
-    } \
-  } \
-  static inline void vec ## N ## _encode_11bit_neon(uint8_t out[static 352*N], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_11bit_neon(out + 352*i, v + i); \
-    } \
-  }
-
-// declare neon vector ops
-DEF_NEON_VEC_OPS(2)
-DEF_NEON_VEC_OPS(3)
-DEF_NEON_VEC_OPS(4)
-
-// declare neon 10-bit vector ops
-DEF_NEON_10BIT_VEC_OPS(2)
-DEF_NEON_10BIT_VEC_OPS(3)
-
-// declare neon 11-bit vector ops
-DEF_NEON_11BIT_VEC_OPS(4)
-#endif /* BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-// Scalar polynomial functions; only built if one of the following
-// conditions is met:
-//
-// 1. AVX-512 is not supported
-// 2. We are building the test suite
-
-/**
- * Compute in-place number-theoretic transform (NTT) of polynomial `p`.
- *
- * @note Scalar implementation.
- *
- * @param[in,out] p Polynomial.
- */
-static inline void poly_ntt_scalar(poly_t * const p) {
-  uint8_t k = 1;
-  for (uint16_t len = 128; len >= 2; len /= 2) {
-    for (uint16_t start = 0; start < 256; start += 2 * len) {
-      const uint16_t zeta = NTT_LUT[k++];
-
-      for (uint16_t j = start; j < start + len; j++) {
-        const uint16_t t = ct_mod_q(zeta * p->cs[j + len]),
-                       hi = p->cs[j] + (Q - t), // p[j] - t
-                       hi_mask = (hi >= Q) ? 0xfff : 0,
-                       lo = p->cs[j] + t, // p[j] + t
-                       lo_mask = (lo >= Q) ? 0xfff : 0;
-        p->cs[j + len] = hi - (Q & hi_mask); // hi % Q
-        p->cs[j] = lo - (Q & lo_mask); // lo % Q
-      }
-    }
-  }
-}
-
-/**
- * Compute in-place inverse number-theoretic transform (NTT) of
- * polynomial `p`.
- *
- * @note Scalar implementation.
- *
- * @param[in,out] p Polynomial.
- */
-static inline void poly_inv_ntt_scalar(poly_t * const p) {
-  uint8_t k = 127;
-  for (uint16_t len = 2; len <= 128; len *= 2) {
-    for (uint16_t start = 0; start < 256; start += 2 * len) {
-      const uint16_t zeta = NTT_LUT[k--];
-
-      for (uint16_t j = start; j < start + len; j++) {
-        const uint16_t t = p->cs[j],
-              lo = p->cs[j + len] + t, // p[j + len] + t
-              lo_mask = (lo >= Q) ? 0xfff : 0;
-        p->cs[j] = lo - (Q & lo_mask); // lo % Q
-        p->cs[j + len] = ct_mod_q(zeta * ((p->cs[j + len] + (Q - t))));
-      }
-    }
-  }
-
-  for (size_t i = 0; i < 256; i++) {
-    p->cs[i] = ct_mod_q((uint32_t) p->cs[i] * 3303);
-  }
-}
-
-/**
- * Add polynomial `a` to polynomial `b` component-wise, and store the
- * sum in `a`.
- *
- * @note Scalar implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- */
-static inline void poly_add_scalar(poly_t * const restrict a, const poly_t * const restrict b) {
-  for (size_t i = 0; i < 256; i++) {
-    const uint16_t t = a->cs[i] + b->cs[i],
-                   m = (t >= Q) ? 0xffff : 0;
-    a->cs[i] = t - (Q & m);
-  }
-}
-
-/**
- * Add polynomial `a` to polynomials `b` and `c` component-wise, and
- * store the sum in `a`.
- *
- * @note Scalar implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- * @param[in] c Polynomial.
- */
-static inline void poly_add2_scalar(poly_t * const restrict a, const poly_t * const restrict b, const poly_t * const restrict c) {
-  for (size_t i = 0; i < 256; i++) {
-    const uint16_t t0 = a->cs[i] + b->cs[i],
-                   m0 = (t0 >= Q) ? 0xffff : 0,
-                   t1 = t0 - (Q & m0) + c->cs[i],
-                   m1 = (t1 >= Q) ? 0xffff : 0;
-    a->cs[i] = t1 - (Q & m1);
-  }
-}
-
-/**
- * Subtract polynomial `b` from polynomial `a` component-wise, and store the
- * result in `a`.
- *
- * @note Scalar implementation.
- *
- * @param[in,out] a Polynomial.
- * @param[in] b Polynomial.
- */
-static inline void poly_sub_scalar(poly_t * const restrict a, const poly_t * const restrict b) {
-  for (size_t i = 0; i < 256; i++) {
-    const uint16_t t = a->cs[i] + (Q - b->cs[i]),
-                   m = (t >= Q) ? 0xfff : 0;
-    a->cs[i] = t - (m & Q);
-  }
-}
-
-/**
- * Multiply `a` and `b` and store the product in `c`.
- *
- * @note `a` and `b` are assumed to be in the NTT domain.
- *
- * @note Scalar implementation.
- *
- * @param[out] c Product polynomial, in the NTT domain.
- * @param[in] a Input polynomial, in the NTT domain.
- * @param[in] b Input polynomial, in the NTT domain.
- */
-static inline void poly_mul_scalar(poly_t * const restrict c, const poly_t * const restrict a, const poly_t * const restrict b) {
-  for (size_t i = 0; i < 128; i++) {
-    const uint32_t a0 = a->cs[2 * i],
-                   a1 = a->cs[2 * i + 1],
-                   b0 = b->cs[2 * i],
-                   b1 = b->cs[2 * i + 1],
-                   b1z = ct_mod_q(b1 * MUL_LUT[i]);
-    c->cs[2 * i] = ct_mod_q(a0 * b0 + a1 * b1z);
-    c->cs[2 * i + 1] = ct_mod_q(a0 * b1 + a1 * b0);
-  }
-}
-
-/**
- * Pack 12-bit coefficients of polynomial `p` and serialize them into
- * 384 bytes of the output buffer `out`.
- *
- * @note Scalar implementation.
- *
- * @param[out] out Output buffer (384 bytes).
- * @param[in] Input polynomial.
- */
-static inline void poly_encode_scalar(uint8_t out[static 384], const poly_t * const a) {
-  for (size_t i = 0; i < 128; i++) {
-    const uint16_t a0 = a->cs[2 * i],
-                   a1 = a->cs[2 * i + 1];
-    out[3 * i] = a0 & 0x0ff;
-    out[3 * i + 1] = ((a0 & 0xf00) >> 8) | ((a1 & 0x0f) << 4);
-    out[3 * i + 2] = (a1 & 0xff0) >> 4;
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 11 bits and then serialize
- * them as 352 bytes in output buffer `out`.
- *
- * @note Scalar implementation.
- *
- * @param[out] out Output buffer (352 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_11bit_scalar(uint8_t out[static 352], const poly_t * const p) {
-  static const uint64_t M = 5284525696; // (1<<44)/Q
-
-  for (size_t i = 0; i < 32; i++) {
-    uint16_t y[8] = { 0 };
-    for (size_t j = 0; j < 8; j++) {
-      const uint32_t x = (p->cs[8 * i + j] * M) >> 32; // 44 - 12
-      y[j] = 0x7ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^11/Q)))
-    }
-
-    // 00000000 11111000 22111111 22222222
-    // 33333332 44443333 54444444 55555555
-    // 66666655 77766666 77777777
-    out[11 * i + 0] = y[0] & 0xff;
-    out[11 * i + 1] = ((y[0] >> 8) & 7) | ((y[1] & 0x1f) << 3);
-    out[11 * i + 2] = ((y[1] >> 5) & 0x3f) | ((y[2] & 3) << 6);
-    out[11 * i + 3] = (y[2] >> 2) & 0xff;
-    out[11 * i + 4] = ((y[2] >> 10) & 1) | ((y[3] & 0x7f) << 1);
-    out[11 * i + 5] = ((y[3] >> 7) & 0xf) | ((y[4] & 0xf) << 4);
-    out[11 * i + 6] = ((y[4] >> 4) & 0x7f) | ((y[5] & 1) << 7);
-    out[11 * i + 7] = (y[5] >> 1) & 0xff;
-    out[11 * i + 8] = ((y[5] >> 9) & 3) | ((y[6] & 0x3f) << 2);
-    out[11 * i + 9] = ((y[6] >> 6) & 0x1f) | ((y[7] & 7) << 5);
-    out[11 * i + 10] = (y[7] >> 3) & 0xff;
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 10 bits and then serialize
- * them as 320 bytes in output buffer `out`.
- *
- * @note Scalar implementation.
- *
- * @param[out] out Output buffer (320 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_10bit_scalar(uint8_t out[static 320], const poly_t * const p) {
-  static const uint64_t M = 2642262848; // (1<<43)/Q
-
-  for (size_t i = 0; i < 64; i++) {
-    uint16_t y[4] = { 0 };
-    for (size_t j = 0; j < 4; j++) {
-      const uint32_t x = (p->cs[4 * i + j] * M) >> 32; // 43 - 11
-      y[j] ^= 0x3ff & ((x >> 1) + (x & 1)); // mask(round(x*(2^10/Q)))
-    }
-
-    out[5 * i + 0] = y[0] & 0xff;
-    out[5 * i + 1] = ((y[0] >> 8) & 0x03) | ((y[1] & 0x3f) << 2);
-    out[5 * i + 2] = ((y[1] >> 6) & 0xf) | ((y[2] & 0xf) << 4);
-    out[5 * i + 3] = ((y[2] >> 4) & 0x3f) | ((y[3] & 0x3) << 6);
-    out[5 * i + 4] = (y[3] >> 2) & 0xff;
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 5 bits and then serialize
- * them as 160 bytes in output buffer `out`.
- *
- * @note Scalar implementation.
- *
- * @param[out] Output buffer (160 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_5bit_scalar(uint8_t out[static 160], const poly_t * const p) {
-  // multiplier determined emperically:
-  //   >> def real_round(n); (n*32.0/Q).round; end
-  //   => :real_round
-  //   >> def fake_round(n); v = (n*((1<<22)/Q+1)) >> 16; (v >> 1) + (v & 1); end
-  //   => :fake_round
-  //   >> (0..3328).select { real_round(_1) != fake_round(_1) }.join(', ')
-  //   => ""
-  static const uint16_t M = 1260; // multiplier: (1 << 22)/Q+1
-
-  for (size_t i = 0; i < 32; i++) {
-    uint16_t y[8] = { 0 };
-
-    for (size_t j = 0; j < 8; j++) {
-      const uint16_t x = (p->cs[8 * i + j] * M) >> 16; // x = c*(1<<6)/Q
-      y[j] = 0x1f & ((x >> 1) + (x & 1)); // round
-    }
-
-    out[5 * i + 0] = y[0] | ((y[1] & 0x07) << 5);                   // 11100000
-    out[5 * i + 1] = (y[1] >> 3) | (y[2] << 2) | ((y[3] & 1) << 7); // 32222211
-    out[5 * i + 2] = (y[3] >> 1) | ((y[4] & 0xf) << 4);             // 44443333
-    out[5 * i + 3] = (y[4] >> 4) | (y[5] << 1) | ((y[6] & 3) << 6); // 66555554
-    out[5 * i + 4] = (y[6] >> 2) | (y[7] << 3);                     // 77777666
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 4 bits and then serialize
- * them as 128 bytes in output buffer `out`.
- *
- * @note Scalar implementation.
- *
- * @param[out] Output buffer (128 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_4bit_scalar(uint8_t out[static 128], const poly_t * const p) {
-  static const uint64_t M = 41285357; // (1 << 37)/Q
-
-  for (size_t i = 0; i < 128; i++) {
-    uint16_t y[2] = { 0 };
-
-    for (size_t j = 0; j < 2; j++) {
-      const uint16_t x = (p->cs[2 * i + j] * M) >> 32; // 37 - 5
-      y[j] = 0xf & ((x >> 1) + (x & 1)); // mask(round(x*(2^4/Q)))
-    }
-
-    out[i] = y[0] | (y[1] << 4);
-  }
-}
-
-/**
- * Compress coefficients of polynomial `p` to 1 bit and then serialize
- * them as 32 bytes in output buffer `out`.
- *
- * @note Scalar implementation.
- *
- * @param[out] Output buffer (32 bytes).
- * @param[in] p Input polynomial.
- */
-static inline void poly_encode_1bit_scalar(uint8_t out[static 32], const poly_t * const p) {
-  for (size_t i = 0; i < 32; i++) {
-    out[i] = (IN_RANGE(p->cs[8 * i + 0], 833, 2496)) |
-             (IN_RANGE(p->cs[8 * i + 1], 833, 2496) << 1) |
-             (IN_RANGE(p->cs[8 * i + 2], 833, 2496) << 2) |
-             (IN_RANGE(p->cs[8 * i + 3], 833, 2496) << 3) |
-             (IN_RANGE(p->cs[8 * i + 4], 833, 2496) << 4) |
-             (IN_RANGE(p->cs[8 * i + 5], 833, 2496) << 5) |
-             (IN_RANGE(p->cs[8 * i + 6], 833, 2496) << 6) |
-             (IN_RANGE(p->cs[8 * i + 7], 833, 2496) << 7);
-  }
-}
-
-/**
- * Read 384 bytes from input buffer `b`, parse bytes as 256 packed
- * 12-bit integers, and then save the integers as coefficients of output
- * polynomial `p`.
- *
- * @note Input integers are reduced modulo 3329.  The draft standard
- * says values in the range [3329, 4095] should be rejected as an
- * error, but doing so introduces an ambiguous error state not present
- * in Kyber.  According to a discussion on the pqc-forum mailing list,
- * implicit reduction modulo 3329 is a better option.  See the
- * discussion here:
- *
- * https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
- *
- * @note Scalar implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (384 bytes).
- */
-static inline void poly_decode_scalar(poly_t * const p, const uint8_t b[static 384]) {
-  for (size_t i = 0; i < 128; i++) {
-    const uint8_t b0 = b[3 * i],
-                  b1 = b[3 * i + 1],
-                  b2 = b[3 * i + 2];
-
-    // decode raw lo and hi, calculate adjustments
-    const uint16_t lo = ((uint16_t) b0) | ((((uint16_t) b1) & 0xf) << 8),
-                   hi = (((uint16_t) b1 & 0xf0) >> 4) | (((uint16_t) b2) << 4),
-                   lo_adj = (lo >= Q) ? Q : 0, // lo adjustment
-                   hi_adj = (hi >= Q) ? Q : 0; // hi adjustment
-
-    // store adjusted coefficients
-    p->cs[2 * i] = lo - lo_adj;
-    p->cs[2 * i + 1] = hi - hi_adj;
-  }
-}
-
-/**
- * Decode packed 11-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Scalar implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (352 bytes).
- */
-static inline void poly_decode_11bit_scalar(poly_t * const p, const uint8_t b[static 352]) {
-  for (size_t i = 0; i < 32; i++) {
-    const uint16_t b0 = b[11 * i + 0],
-                   b1 = b[11 * i + 1],
-                   b2 = b[11 * i + 2],
-                   b3 = b[11 * i + 3],
-                   b4 = b[11 * i + 4],
-                   b5 = b[11 * i + 5],
-                   b6 = b[11 * i + 6],
-                   b7 = b[11 * i + 7],
-                   b8 = b[11 * i + 8],
-                   b9 = b[11 * i + 9],
-                   b10 = b[11 * i + 10];
-
-    // 00000000 11111000 22111111 22222222
-    // 33333332 44443333 54444444 55555555
-    // 66666655 77766666 77777777
-    const uint16_t x[8] = {
-      b0 | ((b1 & 7) << 8),
-      (b1 >> 3) | ((b2 & 0x3f) << 5),
-      (b2 >> 6) | (b3 << 2) | ((b4 & 1) << 10),
-      (b4 >> 1) | ((b5 & 0xf) << 7),
-      (b5 >> 4) | ((b6 & 0x7f) << 4),
-      (b6 >> 7) | (b7 << 1) | ((b8 & 3) << 9),
-      (b8 >> 2) | ((b9 & 0x1f) << 6),
-      (b9 >> 5) | (b10 << 3),
-    };
-
-    // decode, round, write to result
-    for (size_t j = 0; j < 8; j++) {
-      p->cs[8 * i + j] = (x[j] * Q + (1 << 10)) >> 11;
-    }
-  }
-}
-
-/**
- * Decode packed 10-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Scalar implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (320 bytes).
- */
-static inline void poly_decode_10bit_scalar(poly_t * const p, const uint8_t b[static 320]) {
-  for (size_t i = 0; i < 64; i++) {
-    const uint8_t b0 = b[5 * i + 0],
-                  b1 = b[5 * i + 1],
-                  b2 = b[5 * i + 2],
-                  b3 = b[5 * i + 3],
-                  b4 = b[5 * i + 4];
-    const uint16_t x[4] = {
-      b0 | ((b1 & 3) << 8),
-      (b1 >> 2) | ((b2 & 0xf) << 6),
-      (b2 >> 4) | ((b3 & 0x3f) << 4),
-      (b3 >> 6) | (b4 << 2),
-    };
-
-    // decode, round, write to result
-    for (size_t j = 0; j < 4; j++) {
-      p->cs[4 * i + j] = (x[j] * Q + (1 << 9)) >> 10;
-    }
-  }
-}
-
-/**
- * Decode packed 5-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Scalar implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (160 bytes).
- */
-static inline void poly_decode_5bit_scalar(poly_t * const p, const uint8_t b[static 160]) {
-  for (size_t i = 0; i < 32; i++) {
-    const uint16_t b0 = b[5 * i + 0],
-                   b1 = b[5 * i + 1],
-                   b2 = b[5 * i + 2],
-                   b3 = b[5 * i + 3],
-                   b4 = b[5 * i + 4];
-
-    // 11100000 32222211 44443333 66555554 77777666
-    const uint16_t x[8] = {
-      b0 & 0x1f,
-      (b0 >> 5) | ((b1 & 3) << 3),
-      (b1 >> 2) & 0x1f,
-      (b1 >> 7) | ((b2 & 0xf) << 1),
-      (b2 >> 4) | ((b3 & 1) << 4),
-      (b3 >> 1) & 0x1f,
-      (b3 >> 6) | ((b4 & 7) << 2),
-      (b4 >> 3),
-    };
-
-    // decode, round, write to result
-    for (size_t j = 0; j < 8; j++) {
-      p->cs[8 * i + j] = (x[j] * Q + (1 << 4)) >> 5;
-    }
-  }
-}
-
-/**
- * Decode packed 4-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Scalar implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (128 bytes).
- */
-static inline void poly_decode_4bit_scalar(poly_t * const p, const uint8_t b[static 128]) {
-  for (size_t i = 0; i < 128; i++) {
-    p->cs[2 * i + 0] = ((b[i] & 15) * Q + (1 << 3)) >> 4;
-    p->cs[2 * i + 1] = ((b[i] >> 4) * Q + (1 << 3)) >> 4;
-  }
-}
-
-/**
- * Decode packed 1-bit coefficients from input buffer `b` into output
- * polynomial `p`.
- *
- * @note Scalar implementation.
- *
- * @param[out] p Output polynomial.
- * @param[in] b Input buffer (32 bytes).
- */
-static inline void poly_decode_1bit_scalar(poly_t * const p, const uint8_t b[static 32]) {
-  for (size_t i = 0; i < 32; i++) {
-    p->cs[8 * i + 0] = ((b[i] & 0x01) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 1] = ((b[i] & 0x02) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 2] = ((b[i] & 0x04) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 3] = ((b[i] & 0x08) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 4] = ((b[i] & 0x10) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 5] = ((b[i] & 0x20) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 6] = ((b[i] & 0x40) ? 0xfff : 0) & 1665;
-    p->cs[8 * i + 7] = ((b[i] & 0x80) ? 0xfff : 0) & 1665;
-  }
-}
-
-/**
- * Read 768 bytes from input buffer `b`, parse bytes as 2 packed
- * polynomials with 12-bit coefficients, and then save the decoded
- * polynomials to output vector `v`.
- *
- * @note Scalar implementation.
- *
- * @param[out] v Output vector.
- * @param[in] b Input buffer (768 bytes).
- */
-
-// define scalar vector operations
-#define DEF_SCALAR_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_scalar(poly_t v[static N], const uint8_t b[static 384*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_scalar(v + i, b + (384 * i)); \
-    } \
-  } \
-  \
-  static inline void vec ## N ## _encode_scalar(uint8_t out[static N*384], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_scalar(out + 384*i, v + i); \
-    } \
-  }
-
-// define scalar 10-bit vector operations
-#define DEF_SCALAR_10BIT_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_10bit_scalar(poly_t v[static N], const uint8_t b[static 320*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_10bit_scalar(v + i, b + 320*i); \
-    } \
-  } \
-  \
-  static inline void vec ## N ## _encode_10bit_scalar(uint8_t out[static 320*N], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_10bit_scalar(out + 320*i, v + i); \
-    } \
-  }
-
-#define DEF_SCALAR_11BIT_VEC_OPS(N) \
-  static inline void vec ## N ## _decode_11bit_scalar(poly_t v[static N], const uint8_t b[static 352*N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_decode_11bit_scalar(v + i, b + 352*i); \
-    } \
-  } \
-  static inline void vec ## N ## _encode_11bit_scalar(uint8_t out[static 352*N], const poly_t v[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_encode_11bit_scalar(out + 352*i, v + i); \
-    } \
-  }
-
-// declare scalar vector ops
-DEF_SCALAR_VEC_OPS(2)
-DEF_SCALAR_VEC_OPS(3)
-DEF_SCALAR_VEC_OPS(4)
-
-// declare scalar 10-bit vector ops
-DEF_SCALAR_10BIT_VEC_OPS(2)
-DEF_SCALAR_10BIT_VEC_OPS(3)
-
-// declare scalar 11-bit vector ops
-DEF_SCALAR_11BIT_VEC_OPS(4)
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-// use avx512 backend
-#define poly_ntt poly_ntt_avx512
-#define poly_inv_ntt poly_inv_ntt_avx512
-#define poly_add poly_add_avx512
-#define poly_add2 poly_add2_avx512
-#define poly_sub poly_sub_avx512
-#define poly_mul poly_mul_avx512
-#define poly_encode poly_encode_avx512
-#define poly_encode_11bit poly_encode_11bit_avx512
-#define poly_encode_10bit poly_encode_10bit_avx512
-#define poly_encode_5bit poly_encode_5bit_avx512
-#define poly_encode_4bit poly_encode_4bit_avx512
-#define poly_encode_1bit poly_encode_1bit_avx512
-#define poly_decode poly_decode_avx512
-#define poly_decode_11bit poly_decode_11bit_avx512
-#define poly_decode_10bit poly_decode_10bit_avx512
-#define poly_decode_5bit poly_decode_5bit_avx512
-#define poly_decode_4bit poly_decode_4bit_avx512
-#define poly_decode_1bit poly_decode_1bit_avx512
-#define vec2_decode vec2_decode_avx512
-#define vec3_decode vec3_decode_avx512
-#define vec4_decode vec4_decode_avx512
-#define vec2_encode vec2_encode_avx512
-#define vec3_encode vec3_encode_avx512
-#define vec4_encode vec4_encode_avx512
-#define vec2_decode_10bit vec2_decode_10bit_avx512
-#define vec3_decode_10bit vec3_decode_10bit_avx512
-#define vec2_encode_10bit vec2_encode_10bit_avx512
-#define vec3_encode_10bit vec3_encode_10bit_avx512
-#define vec4_decode_11bit vec4_decode_11bit_avx512
-#define vec4_encode_11bit vec4_encode_11bit_avx512
-#elif BACKEND == BACKEND_NEON
-// use neon backend
-#define poly_ntt poly_ntt_neon
-#define poly_inv_ntt poly_inv_ntt_neon
-#define poly_add poly_add_neon
-#define poly_add2 poly_add2_neon
-#define poly_sub poly_sub_neon
-#define poly_mul poly_mul_neon
-#define poly_encode poly_encode_neon
-#define poly_encode_11bit poly_encode_11bit_neon
-#define poly_encode_10bit poly_encode_10bit_neon
-#define poly_encode_5bit poly_encode_5bit_neon
-#define poly_encode_4bit poly_encode_4bit_neon
-#define poly_encode_1bit poly_encode_1bit_neon
-#define poly_decode poly_decode_neon
-#define poly_decode_11bit poly_decode_11bit_neon
-#define poly_decode_10bit poly_decode_10bit_neon
-#define poly_decode_5bit poly_decode_5bit_neon
-#define poly_decode_4bit poly_decode_4bit_neon
-#define poly_decode_1bit poly_decode_1bit_neon
-#define vec2_decode vec2_decode_neon
-#define vec3_decode vec3_decode_neon
-#define vec4_decode vec4_decode_neon
-#define vec2_encode vec2_encode_neon
-#define vec3_encode vec3_encode_neon
-#define vec4_encode vec4_encode_neon
-#define vec2_decode_10bit vec2_decode_10bit_neon
-#define vec3_decode_10bit vec3_decode_10bit_neon
-#define vec2_encode_10bit vec2_encode_10bit_neon
-#define vec3_encode_10bit vec3_encode_10bit_neon
-#define vec4_decode_11bit vec4_decode_11bit_neon
-#define vec4_encode_11bit vec4_encode_11bit_neon
-#elif BACKEND == BACKEND_SCALAR
-// use scalar backend
-#define poly_ntt poly_ntt_scalar
-#define poly_inv_ntt poly_inv_ntt_scalar
-#define poly_add poly_add_scalar
-#define poly_add2 poly_add2_scalar
-#define poly_sub poly_sub_scalar
-#define poly_mul poly_mul_scalar
-#define poly_encode poly_encode_scalar
-#define poly_encode_11bit poly_encode_11bit_scalar
-#define poly_encode_10bit poly_encode_10bit_scalar
-#define poly_encode_5bit poly_encode_5bit_scalar
-#define poly_encode_4bit poly_encode_4bit_scalar
-#define poly_encode_1bit poly_encode_1bit_scalar
-#define poly_decode poly_decode_scalar
-#define poly_decode_11bit poly_decode_11bit_scalar
-#define poly_decode_10bit poly_decode_10bit_scalar
-#define poly_decode_5bit poly_decode_5bit_scalar
-#define poly_decode_4bit poly_decode_4bit_scalar
-#define poly_decode_1bit poly_decode_1bit_scalar
-#define vec2_decode vec2_decode_scalar
-#define vec3_decode vec3_decode_scalar
-#define vec4_decode vec4_decode_scalar
-#define vec2_encode vec2_encode_scalar
-#define vec3_encode vec3_encode_scalar
-#define vec4_encode vec4_encode_scalar
-#define vec2_decode_10bit vec2_decode_10bit_scalar
-#define vec3_decode_10bit vec3_decode_10bit_scalar
-#define vec2_encode_10bit vec2_encode_10bit_scalar
-#define vec3_encode_10bit vec3_encode_10bit_scalar
-#define vec4_decode_11bit vec4_decode_11bit_scalar
-#define vec4_encode_11bit vec4_encode_11bit_scalar
-#else
-#error "unknown backend"
-#endif /* BACKEND */
-
-// define operations for NxN matrices and N-dim vectors.
-#define DEF_MAT_VEC_OPS(N) \
-  /* multiply NxN matrix of polynomials in `mat` by vector of */ \
-  /* polynomials in `vec` and store the product in vector `out`. */ \
-  static inline void mat ## N ## _mul(poly_t out[static N], const poly_t mat[static N*N], const poly_t vec[static N]) { \
-    /* clear result */ \
-    memset(out, 0, N * sizeof(poly_t)); \
-    for (size_t y = 0; y < N; y++) { \
-      for (size_t x = 0; x < N; x++) { \
-        poly_t prod = { 0 }; \
-        poly_mul(&prod, mat + (N * y + x), vec + x); \
-        poly_add(out + y, &prod); \
-      } \
-    } \
-  } \
-  \
-  /* add coefficients in vectors `a` and `b` and store the results in `a`. */ \
-  static inline void vec ## N ## _add(poly_t a[static N], const poly_t b[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_add(a + i, b + i); \
-    } \
-  } \
-  \
-  /* Calculate dot product of vectors `a` and `b` and store result in polynomial `c`. */ \
-  static inline void vec ## N ## _dot(poly_t * const restrict c, const poly_t a[static N], const poly_t b[static N]) { \
-    /* clear result */ \
-    memset(c, 0, sizeof(poly_t)); \
-    for (size_t i = 0; i < N; i++) { \
-      poly_t prod = { 0 }; \
-      poly_mul(&prod, a + i, b + i); \
-      poly_add(c, &prod); \
-    } \
-  } \
-  \
-  /* apply NTT to vector */ \
-  static inline void vec ## N ## _ntt(poly_t vec[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_ntt(vec + i); \
-    } \
-  } \
-  \
-  /* apply inverse NTT to vector */ \
-  static inline void vec ## N ## _inv_ntt(poly_t vec[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      poly_inv_ntt(vec + i); \
-    } \
-  }
-
-// define mat2 and vec2 functions
-DEF_MAT_VEC_OPS(2)
-
-// define mat3 and vec3 functions
-DEF_MAT_VEC_OPS(3)
-
-// define mat4 and vec4 functions
-DEF_MAT_VEC_OPS(4)
-
-#if BACKEND == BACKEND_AVX512
-// clang does not support _bit_scan_reverse(), so emulate it with
-// _lzcnt_u32() (slower)
-#ifndef _bit_scan_reverse
-#define _bit_scan_reverse(x) (31 - _lzcnt_u32(x))
-#endif /* _bit_scan_reverse */
-
-// permute 8 keccak states stored in avx512 registers a0-a24
-#define PERMUTE_STATES_AVX512() do { \
-  /* 24 keccak rounds */ \
-  for (size_t j = 0; j < 24; j++) { \
-    /* theta */ \
-    { \
-      /* c0 = a0 ^ a1 ^ a2 ^ a3 ^ a4 */ \
-      const __m512i c0 = _mm512_ternarylogic_epi64(a0, a5, _mm512_ternarylogic_epi64(a10, a15, a20, 0x96), 0x96), \
-                    c1 = _mm512_ternarylogic_epi64(a1, a6, _mm512_ternarylogic_epi64(a11, a16, a21, 0x96), 0x96), \
-                    c2 = _mm512_ternarylogic_epi64(a2, a7, _mm512_ternarylogic_epi64(a12, a17, a22, 0x96), 0x96), \
-                    c3 = _mm512_ternarylogic_epi64(a3, a8, _mm512_ternarylogic_epi64(a13, a18, a23, 0x96), 0x96), \
-                    c4 = _mm512_ternarylogic_epi64(a4, a9, _mm512_ternarylogic_epi64(a14, a19, a24, 0x96), 0x96), \
-                    d0 = _mm512_xor_epi64(c4, _mm512_rol_epi64(c1, 1)), \
-                    d1 = _mm512_xor_epi64(c0, _mm512_rol_epi64(c2, 1)), \
-                    d2 = _mm512_xor_epi64(c1, _mm512_rol_epi64(c3, 1)), \
-                    d3 = _mm512_xor_epi64(c2, _mm512_rol_epi64(c4, 1)), \
-                    d4 = _mm512_xor_epi64(c3, _mm512_rol_epi64(c0, 1)); \
-      \
-      a0 = _mm512_xor_epi64(a0, d0); \
-      a1 = _mm512_xor_epi64(a1, d1); \
-      a2 = _mm512_xor_epi64(a2, d2); \
-      a3 = _mm512_xor_epi64(a3, d3); \
-      a4 = _mm512_xor_epi64(a4, d4); \
-      \
-      a5 = _mm512_xor_epi64(a5, d0); \
-      a6 = _mm512_xor_epi64(a6, d1); \
-      a7 = _mm512_xor_epi64(a7, d2); \
-      a8 = _mm512_xor_epi64(a8, d3); \
-      a9 = _mm512_xor_epi64(a9, d4); \
-      \
-      a10 = _mm512_xor_epi64(a10, d0); \
-      a11 = _mm512_xor_epi64(a11, d1); \
-      a12 = _mm512_xor_epi64(a12, d2); \
-      a13 = _mm512_xor_epi64(a13, d3); \
-      a14 = _mm512_xor_epi64(a14, d4); \
-      \
-      a15 = _mm512_xor_epi64(a15, d0); \
-      a16 = _mm512_xor_epi64(a16, d1); \
-      a17 = _mm512_xor_epi64(a17, d2); \
-      a18 = _mm512_xor_epi64(a18, d3); \
-      a19 = _mm512_xor_epi64(a19, d4); \
-      \
-      a20 = _mm512_xor_epi64(a20, d0); \
-      a21 = _mm512_xor_epi64(a21, d1); \
-      a22 = _mm512_xor_epi64(a22, d2); \
-      a23 = _mm512_xor_epi64(a23, d3); \
-      a24 = _mm512_xor_epi64(a24, d4); \
-    } \
-    \
-    /* rho (TODO: combine with theta and/or pi) */ \
-    a1 = _mm512_rol_epi64(a1, 1); /* 1 % 64 = 1 */ \
-    a2 = _mm512_rol_epi64(a2, 62); /* 190 % 64 = 62 */ \
-    a3 = _mm512_rol_epi64(a3, 28); /* 28 % 64 = 28 */ \
-    a4 = _mm512_rol_epi64(a4, 27); /* 91 % 64 = 27 */ \
-    a5 = _mm512_rol_epi64(a5, 36); /* 36 % 64 = 36 */ \
-    a6 = _mm512_rol_epi64(a6, 44); /* 300 % 64 = 44 */ \
-    a7 = _mm512_rol_epi64(a7, 6); /* 6 % 64 = 6 */ \
-    a8 = _mm512_rol_epi64(a8, 55); /* 55 % 64 = 55 */ \
-    a9 = _mm512_rol_epi64(a9, 20); /* 276 % 64 = 20 */ \
-    a10 = _mm512_rol_epi64(a10, 3); /* 3 % 64 = 3 */ \
-    a11 = _mm512_rol_epi64(a11, 10); /* 10 % 64 = 10 */ \
-    a12 = _mm512_rol_epi64(a12, 43); /* 171 % 64 = 43 */ \
-    a13 = _mm512_rol_epi64(a13, 25); /* 153 % 64 = 25 */ \
-    a14 = _mm512_rol_epi64(a14, 39); /* 231 % 64 = 39 */ \
-    a15 = _mm512_rol_epi64(a15, 41); /* 105 % 64 = 41 */ \
-    a16 = _mm512_rol_epi64(a16, 45); /* 45 % 64 = 45 */ \
-    a17 = _mm512_rol_epi64(a17, 15); /* 15 % 64 = 15 */ \
-    a18 = _mm512_rol_epi64(a18, 21); /* 21 % 64 = 21 */ \
-    a19 = _mm512_rol_epi64(a19, 8); /* 136 % 64 = 8 */ \
-    a20 = _mm512_rol_epi64(a20, 18); /* 210 % 64 = 18 */ \
-    a21 = _mm512_rol_epi64(a21, 2); /* 66 % 64 = 2 */ \
-    a22 = _mm512_rol_epi64(a22, 61); /* 253 % 64 = 61 */ \
-    a23 = _mm512_rol_epi64(a23, 56); /* 120 % 64 = 56 */ \
-    a24 = _mm512_rol_epi64(a24, 14); /* 78 % 64 = 14 */ \
-    \
-    /* pi */ \
-    /* use two temporary registers to temporarily cache intermediate */ \
-    /* values, then do the assignments in an odd sequence in order to */ \
-    /* prevent register spill */ \
-    { \
-      __m512i t0, t1; \
-      t0 = a1; a1 = a6; /* a1 = a6 */ \
-      t1 = a10; a10 = t0; /* a10 = a1 */ \
-      t0 = a7; a7 = t1; /* a7 = a10 */ \
-      t1 = a11; a11 = t0; /* a11 = a7 */ \
-      t0 = a17; a17 = t1; /* a17 = a11 */ \
-      t1 = a18; a18 = t0; /* a18 = a17 */ \
-      t0 = a3; a3 = t1; /* a3 = a18 */ \
-      t1 = a5; a5 = t0; /* a5 = a3 */ \
-      t0 = a16; a16 = t1; /* a16 = a5 */ \
-      t1 = a8; a8 = t0; /* a8 = a16 */ \
-      t0 = a21; a21 = t1; /* a21 = a8 */ \
-      t1 = a24; a24 = t0; /* a24 = a21 */ \
-      t0 = a4; a4 = t1; /* a4 = a24 */ \
-      t1 = a15; a15 = t0; /* a15 = a4 */ \
-      t0 = a23; a23 = t1; /* a23 = a15 */ \
-      t1 = a19; a19 = t0; /* a19 = a23 */ \
-      t0 = a13; a13 = t1; /* a13 = a19 */ \
-      t1 = a12; a12 = t0; /* a12 = a13 */ \
-      t0 = a2; a2 = t1; /* a2 = a12 */ \
-      t1 = a20; a20 = t0; /* a20 = a2 */ \
-      t0 = a14; a14 = t1; /* a14 = a20 */ \
-      t1 = a22; a22 = t0; /* a22 = a14 */ \
-      t0 = a9; a9 = t1; /* a9 = a22 */ \
-      t1 = a6; a6 = t0; /* a6 = a9 */ \
-    } \
-    \
-    /* chi */ \
-    /* use two temporary registers to cache first two keccak columns of */ \
-    /* each row, then use the cached values for the calculations of the */ \
-    /* last two columns of each row.  done this way to prevent register */ \
-    /* spill */ \
-    { \
-      __m512i t0 = a0, t1 = a1; \
-      a0 = _mm512_ternarylogic_epi64(a0, a1, a2, 0xd2); /* a0 ^= (~a1 & a2) */ \
-      a1 = _mm512_ternarylogic_epi64(a1, a2, a3, 0xd2); /* a1 ^= (~a2 & a3) */ \
-      a2 = _mm512_ternarylogic_epi64(a2, a3, a4, 0xd2); /* a2 ^= (~a3 & a4) */ \
-      a3 = _mm512_ternarylogic_epi64(a3, a4, t0, 0xd2); /* a3 ^= (~a4 & t0) */ \
-      a4 = _mm512_ternarylogic_epi64(a4, t0, t1, 0xd2); /* a4 ^= (~t0 & t1) */ \
-      t0 = a5; t1 = a6; \
-      a5 = _mm512_ternarylogic_epi64(a5, a6, a7, 0xd2); /* a5 ^= (~a6 & a7) */ \
-      a6 = _mm512_ternarylogic_epi64(a6, a7, a8, 0xd2); /* a6 ^= (~a7 & a8) */ \
-      a7 = _mm512_ternarylogic_epi64(a7, a8, a9, 0xd2); /* a7 ^= (~a8 & a9) */ \
-      a8 = _mm512_ternarylogic_epi64(a8, a9, t0, 0xd2); /* a8 ^= (~a9 & t0) */ \
-      a9 = _mm512_ternarylogic_epi64(a9, t0, t1, 0xd2); /* a9 ^= (~t0 & t1) */ \
-      t0 = a10; t1 = a11; \
-      a10 = _mm512_ternarylogic_epi64(a10, a11, a12, 0xd2); /* a10 ^= (~a11 & a12) */ \
-      a11 = _mm512_ternarylogic_epi64(a11, a12, a13, 0xd2); /* a11 ^= (~a12 & a13) */ \
-      a12 = _mm512_ternarylogic_epi64(a12, a13, a14, 0xd2); /* a12 ^= (~a13 & a14) */ \
-      a13 = _mm512_ternarylogic_epi64(a13, a14, t0, 0xd2); /* a13 ^= (~a14 & t0) */ \
-      a14 = _mm512_ternarylogic_epi64(a14, t0, t1, 0xd2); /* a14 ^= (~t0 & t1) */ \
-      t0 = a15; t1 = a16; \
-      a15 = _mm512_ternarylogic_epi64(a15, a16, a17, 0xd2); /* a15 ^= (~a16 & a17) */ \
-      a16 = _mm512_ternarylogic_epi64(a16, a17, a18, 0xd2); /* a16 ^= (~a17 & a18) */ \
-      a17 = _mm512_ternarylogic_epi64(a17, a18, a19, 0xd2); /* a17 ^= (~a18 & a19) */ \
-      a18 = _mm512_ternarylogic_epi64(a18, a19, t0, 0xd2); /* a18 ^= (~a19 & t0) */ \
-      a19 = _mm512_ternarylogic_epi64(a19, t0, t1, 0xd2); /* a19 ^= (~t0 & t1) */ \
-      t0 = a20; t1 = a21; \
-      a20 = _mm512_ternarylogic_epi64(a20, a21, a22, 0xd2); /* a20 ^= (~a21 & a22) */ \
-      a21 = _mm512_ternarylogic_epi64(a21, a22, a23, 0xd2); /* a21 ^= (~a22 & a23) */ \
-      a22 = _mm512_ternarylogic_epi64(a22, a23, a24, 0xd2); /* a22 ^= (~a23 & a24) */ \
-      a23 = _mm512_ternarylogic_epi64(a23, a24, t0, 0xd2); /* a23 ^= (~a24 & t0) */ \
-      a24 = _mm512_ternarylogic_epi64(a24, t0, t1, 0xd2); /* a24 ^= (~t0 & t1) */ \
-    } \
-    \
-    /* iota */ \
-    a0 = _mm512_xor_epi64(a0, _mm512_set1_epi64(RCS[j])); \
-  } \
-} while (0)
-
-// original value:
-//   static const uint8_t u8_id_vals[64] ALIGN(64) = {
-//     0,   1,  1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  9, 10, 10, 11,
-//     12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23,
-//     24, 25, 25, 26, 27, 28, 28, 29, 30, 31, 31, 32, 33, 34, 34, 35,
-//     36, 37, 37, 38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 46, 47,
-//   };
-static const __m512i SAMPLE_32_IDS = {
-  0x0504040302010100ULL, 0x0B0A0A0908070706ULL, 0x1110100F0E0D0D0CULL, 0x1716161514131312ULL,
-  0x1D1C1C1B1A191918ULL, 0x23222221201F1F1EULL, 0x2928282726252524ULL, 0x2F2E2E2D2C2B2B2AULL,
-};
-
-// orig: _mm512_set1_epi32(0x40000)
-static const __m512i SAMPLE_32_SHIFTS = {
-  0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
-  0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL, 0x0004000000040000ULL,
-};
-
-// orig: _mm512_set1_epi16(0xfff)
-static const __m512i SAMPLE_32_MASKS = {
-  0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
-  0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL, 0x0fff0fff0fff0fffULL,
-};
-
-// sample up to 32 12-bit polynomial coefficients
-#define SAMPLE_32_COEFS(REG, OFS) do { \
-  if (lens[OFS] < 256) { \
-    /* expand 32 packed u12s into 32 u16s */ \
-    const __m512i u16s = _mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi8(SAMPLE_32_IDS, REG), SAMPLE_32_SHIFTS), SAMPLE_32_MASKS); \
-    \
-    /* build rejection sampling mask, then clamp to valid range */ \
-    __mmask32 mask = _mm512_cmplt_epi16_mask(u16s, Q16); \
-    while (_mm_popcnt_u32(mask) > 0 && (lens[OFS] + _mm_popcnt_u32(mask)) > 256) { \
-      mask ^= 1UL << _bit_scan_reverse(mask); \
-    } \
-    \
-    /* store coefficients, add to coefficient count */ \
-    _mm512_mask_compressstoreu_epi16(out[OFS].cs + lens[OFS], mask, u16s); \
-    lens[OFS] += _mm_popcnt_u32(mask); \
-  } \
-} while (0)
-
-// sample up to 16 12-bit polynomial coefficients
-#define SAMPLE_16_COEFS(REG, OFS) do { \
-  if (lens[OFS] < 256) { \
-    /* expand 16 packed u12s into 16 u16s */ \
-    const __m512i u16s = _mm512_and_si512(_mm512_srlv_epi16(_mm512_permutexvar_epi8(SAMPLE_32_IDS, REG), SAMPLE_32_SHIFTS), SAMPLE_32_MASKS); \
-    \
-    /* build rejection sampling mask, then clamp to valid range */ \
-    __mmask32 mask = _mm512_cmplt_epi16_mask(u16s, Q16) & 0xffff; \
-    while (_mm_popcnt_u32(mask) > 0 && (lens[OFS] + _mm_popcnt_u32(mask)) > 256) { \
-      mask ^= 1UL << _bit_scan_reverse(mask); \
-    } \
-    \
-    /* store coefficients, add to coefficient count */ \
-    _mm512_mask_compressstoreu_epi16(out[OFS].cs + lens[OFS], mask, u16s); \
-    lens[OFS] += _mm_popcnt_u32(mask); \
-  } \
-} while (0)
-
-// transpose permute ids
-static const __m512i TRANSPOSE_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
-                     TRANSPOSE_S0_B_IDS = { 12, 13, 14, 15, 4, 5, 6, 7 },
-                     TRANSPOSE_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
-                     TRANSPOSE_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
-                     TRANSPOSE_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
-                     TRANSPOSE_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
-
-// Transpose 8 input registers R0-R7 into 8 output registers t0-t7.
-//
-// Input:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | R0  | v00 | v01 | v02 | v03 | v04 | v05 | v06 | v07 |
-//   | R1  | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 |
-//   | R2  | v20 | v21 | v22 | v23 | v24 | v25 | v26 | v27 |
-//   | R3  | v30 | v31 | v32 | v33 | v34 | v35 | v36 | v37 |
-//   | R4  | v40 | v41 | v42 | v43 | v44 | v45 | v46 | v47 |
-//   | R5  | v50 | v51 | v52 | v53 | v54 | v55 | v56 | v57 |
-//   | R6  | v60 | v61 | v62 | v63 | v64 | v65 | v66 | v67 |
-//   | R7  | v70 | v71 | v72 | v73 | v74 | v75 | v76 | v77 |
-//   -------------------------------------------------------
-//
-// Output:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
-//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
-//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
-//   | t3  | v03 | v13 | v23 | v33 | v43 | v53 | v63 | v73 |
-//   | t4  | v04 | v14 | v24 | v34 | v44 | v54 | v64 | v74 |
-//   | t5  | v05 | v15 | v25 | v35 | v45 | v55 | v65 | v75 |
-//   | t6  | v06 | v16 | v26 | v36 | v46 | v56 | v66 | v76 |
-//   | t7  | v70 | v17 | v27 | v37 | v47 | v57 | v67 | v77 |
-//   -------------------------------------------------------
-//
-#define TRANSPOSE_8(R0, R1, R2, R3, R4, R5, R6, R7) \
-  const __m512i \
-    /* step 0 */ \
-    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_S0_A_IDS, R4), \
-    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_S0_A_IDS, R5), \
-    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_S0_A_IDS, R6), \
-    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_S0_A_IDS, R7), \
-    s0_t4 = _mm512_permutex2var_epi64(R4, TRANSPOSE_S0_B_IDS, R0), \
-    s0_t5 = _mm512_permutex2var_epi64(R5, TRANSPOSE_S0_B_IDS, R1), \
-    s0_t6 = _mm512_permutex2var_epi64(R6, TRANSPOSE_S0_B_IDS, R2), \
-    s0_t7 = _mm512_permutex2var_epi64(R7, TRANSPOSE_S0_B_IDS, R3), \
-    \
-    /* step 1 */ \
-    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2), \
-    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3), \
-    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0), \
-    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1), \
-    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6), \
-    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7), \
-    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4), \
-    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5), \
-    \
-    /* step 2 */ \
-    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1), \
-    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0), \
-    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3), \
-    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2), \
-    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5), \
-    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4), \
-    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7), \
-    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6)
-
-// transpose 8 to 7 permutation ids
-static const __m512i TRANSPOSE_8_TO_7_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
-                     TRANSPOSE_8_TO_7_S0_B_IDS = { 12, 13, 14, 15, 4, 5, 6, 7 },
-                     TRANSPOSE_8_TO_7_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
-                     TRANSPOSE_8_TO_7_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
-                     TRANSPOSE_8_TO_7_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
-                     TRANSPOSE_8_TO_7_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
-
-// Transpose 8 input registers R0-R7 into 7 output registers t0-t6.
-//
-// Input:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | R0  | v00 | v01 | v02 | v03 | v04 | v05 | v06 | n/a |
-//   | R1  | v10 | v11 | v12 | v13 | v14 | v15 | v16 | n/a |
-//   | R2  | v20 | v21 | v22 | v23 | v24 | v25 | v26 | n/a |
-//   | R3  | v30 | v31 | v32 | v33 | v34 | v35 | v36 | n/a |
-//   | R4  | v40 | v41 | v42 | v43 | v44 | v45 | v46 | n/a |
-//   | R5  | v50 | v51 | v52 | v53 | v54 | v55 | v56 | n/a |
-//   | R6  | v60 | v61 | v62 | v63 | v64 | v65 | v66 | n/a |
-//   | R7  | v70 | v71 | v72 | v73 | v74 | v75 | v76 | n/a |
-//   -------------------------------------------------------
-//
-// Output:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
-//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
-//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
-//   | t3  | v03 | v13 | v23 | v33 | v43 | v53 | v63 | v73 |
-//   | t4  | v04 | v14 | v24 | v34 | v44 | v54 | v64 | v74 |
-//   | t5  | v05 | v15 | v25 | v35 | v45 | v55 | v65 | v75 |
-//   | t6  | v06 | v16 | v26 | v36 | v46 | v56 | v66 | v76 |
-//   -------------------------------------------------------
-//
-#define TRANSPOSE_8_TO_7(R0, R1, R2, R3, R4, R5, R6, R7) \
-  const __m512i \
-    /* step 0 */ \
-    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_7_S0_A_IDS, R4), \
-    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_7_S0_A_IDS, R5), \
-    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_7_S0_A_IDS, R6), \
-    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_7_S0_A_IDS, R7), \
-    s0_t4 = _mm512_permutex2var_epi64(R4, TRANSPOSE_8_TO_7_S0_B_IDS, R0), \
-    s0_t5 = _mm512_permutex2var_epi64(R5, TRANSPOSE_8_TO_7_S0_B_IDS, R1), \
-    s0_t6 = _mm512_permutex2var_epi64(R6, TRANSPOSE_8_TO_7_S0_B_IDS, R2), \
-    s0_t7 = _mm512_permutex2var_epi64(R7, TRANSPOSE_8_TO_7_S0_B_IDS, R3), \
-    \
-    /* step 1 */ \
-    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t2), \
-    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t3), \
-    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t0), \
-    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t1), \
-    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t6), \
-    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_8_TO_7_S1_A_IDS, s0_t7), \
-    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t4), \
-    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_8_TO_7_S1_B_IDS, s0_t5), \
-    \
-    /* step 2 */ \
-    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t1), \
-    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_8_TO_7_S2_B_IDS, s1_t0), \
-    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t3), \
-    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_8_TO_7_S2_B_IDS, s1_t2), \
-    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t5), \
-    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_8_TO_7_S2_B_IDS, s1_t4), \
-    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_8_TO_7_S2_A_IDS, s1_t7)
-
-// transpose 8 to 6 permute ids
-static const __m512i TRANSPOSE_8_TO_6_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
-                     TRANSPOSE_8_TO_6_S0_B_IDS = { 12, 13, 14, 15, 4, 5, 6, 7 },
-                     TRANSPOSE_8_TO_6_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
-                     TRANSPOSE_8_TO_6_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
-                     TRANSPOSE_8_TO_6_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
-                     TRANSPOSE_8_TO_6_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
-
-// Transpose 8 input registers (R0-R7) into 6 output registers (t0-t5).
-//
-// Input:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | R0  | v00 | v01 | v02 | v03 | v04 | v05 | n/a | n/a |
-//   | R1  | v10 | v11 | v12 | v13 | v14 | v15 | n/a | n/a |
-//   | R2  | v20 | v21 | v22 | v23 | v24 | v25 | n/a | n/a |
-//   | R3  | v30 | v31 | v32 | v33 | v34 | v35 | n/a | n/a |
-//   | R4  | v40 | v41 | v42 | v43 | v44 | v45 | n/a | n/a |
-//   | R5  | v50 | v51 | v52 | v53 | v54 | v55 | n/a | n/a |
-//   | R6  | v60 | v61 | v62 | v63 | v64 | v65 | n/a | n/a |
-//   | R7  | v70 | v71 | v72 | v73 | v74 | v75 | n/a | n/a |
-//   -------------------------------------------------------
-//
-// Output:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
-//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
-//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
-//   | t3  | v03 | v13 | v23 | v33 | v43 | v53 | v63 | v73 |
-//   | t4  | v04 | v14 | v24 | v34 | v44 | v54 | v64 | v74 |
-//   | t5  | v05 | v15 | v25 | v35 | v45 | v55 | v65 | v75 |
-//   -------------------------------------------------------
-//
-#define TRANSPOSE_8_TO_6(R0, R1, R2, R3, R4, R5, R6, R7) \
-  const __m512i \
-    /* step 0 */ \
-    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_6_S0_A_IDS, R4), \
-    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_6_S0_A_IDS, R5), \
-    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_6_S0_A_IDS, R6), \
-    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_6_S0_A_IDS, R7), \
-    s0_t4 = _mm512_permutex2var_epi64(R4, TRANSPOSE_8_TO_6_S0_B_IDS, R0), \
-    s0_t5 = _mm512_permutex2var_epi64(R5, TRANSPOSE_8_TO_6_S0_B_IDS, R1), \
-    s0_t6 = _mm512_permutex2var_epi64(R6, TRANSPOSE_8_TO_6_S0_B_IDS, R2), \
-    s0_t7 = _mm512_permutex2var_epi64(R7, TRANSPOSE_8_TO_6_S0_B_IDS, R3), \
-    \
-    /* step 1 */ \
-    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t2), \
-    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t3), \
-    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_6_S1_B_IDS, s0_t0), \
-    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_6_S1_B_IDS, s0_t1), \
-    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t6), \
-    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_8_TO_6_S1_A_IDS, s0_t7), \
-    \
-    /* step 2 */ \
-    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_6_S2_A_IDS, s1_t1), \
-    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_8_TO_6_S2_B_IDS, s1_t0), \
-    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_8_TO_6_S2_A_IDS, s1_t3), \
-    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_8_TO_6_S2_B_IDS, s1_t2), \
-    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_8_TO_6_S2_A_IDS, s1_t5), \
-    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_8_TO_6_S2_B_IDS, s1_t4)
-
-// transpose ids
-static const __m512i TRANSPOSE_8_TO_3_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
-                     TRANSPOSE_8_TO_3_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
-                     TRANSPOSE_8_TO_3_S1_B_IDS = { 10, 11, 2, 3, 14, 15, 6, 7 },
-                     TRANSPOSE_8_TO_3_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 },
-                     TRANSPOSE_8_TO_3_S2_B_IDS = { 9, 1, 11, 3, 13, 5, 15, 7 };
-
-// Transpose 8 input registers R0-R7 into 3 output registers t0-t2.
-//
-// Input:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | R0  | v00 | v01 | v02 | n/a | n/a | n/a | n/a | n/a |
-//   | R1  | v10 | v11 | v12 | n/a | n/a | n/a | n/a | n/a |
-//   | R2  | v20 | v21 | v22 | n/a | n/a | n/a | n/a | n/a |
-//   | R3  | v30 | v31 | v32 | n/a | n/a | n/a | n/a | n/a |
-//   | R4  | v40 | v41 | v42 | n/a | n/a | n/a | n/a | n/a |
-//   | R5  | v50 | v51 | v52 | n/a | n/a | n/a | n/a | n/a |
-//   | R6  | v60 | v61 | v62 | n/a | n/a | n/a | n/a | n/a |
-//   | R7  | v70 | v71 | v72 | n/a | n/a | n/a | n/a | n/a |
-//   -------------------------------------------------------
-//
-// Output:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
-//   | t1  | v01 | v11 | v21 | v31 | v41 | v51 | v61 | v71 |
-//   | t2  | v02 | v12 | v22 | v32 | v42 | v52 | v62 | v72 |
-//   -------------------------------------------------------
-//
-#define TRANSPOSE_8_TO_3(R0, R1, R2, R3, R4, R5, R6, R7) \
-  const __m512i \
-    /* step 0 */ \
-    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_3_S0_A_IDS, R4), \
-    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_3_S0_A_IDS, R5), \
-    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_3_S0_A_IDS, R6), \
-    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_3_S0_A_IDS, R7), \
-    \
-    /* step 1 */ \
-    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_3_S1_A_IDS, s0_t2), \
-    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_3_S1_A_IDS, s0_t3), \
-    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_3_S1_B_IDS, s0_t0), \
-    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_3_S1_B_IDS, s0_t1), \
-    \
-    /* step 2 */ \
-    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_3_S2_A_IDS, s1_t1), \
-    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_8_TO_3_S2_B_IDS, s1_t0), \
-    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_8_TO_3_S2_A_IDS, s1_t3)
-
-// transpose 8 to 1 permute ids
-static const __m512i TRANSPOSE_8_TO_1_S0_A_IDS = { 0, 1, 2, 3, 8, 9, 10, 11 },
-                     TRANSPOSE_8_TO_1_S1_A_IDS = { 0, 1, 8, 9, 4, 5, 12, 13 },
-                     TRANSPOSE_8_TO_1_S2_A_IDS = { 0, 8, 2, 10, 4, 12, 6, 14 };
-
-// Transpose 8 input registers R0-R7 into 1 output register t0.
-//
-// Input:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | R0  | v00 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   | R1  | v10 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   | R2  | v20 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   | R3  | v30 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   | R4  | v40 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   | R5  | v50 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   | R6  | v60 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   | R7  | v70 | n/a | n/a | n/a | n/a | n/a | n/a | n/a |
-//   -------------------------------------------------------
-//
-// Output:
-//   -------------------------------------------------------
-//   |     |                     Lanes                     |
-//   |-----|-----------------------------------------------|
-//   | Reg |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
-//   |-----|-----|-----|-----|-----|-----|-----|-----|-----|
-//   | t0  | v00 | v10 | v20 | v30 | v40 | v50 | v60 | v70 |
-//   -------------------------------------------------------
-//
-#define TRANSPOSE_8_TO_1(R0, R1, R2, R3, R4, R5, R6, R7) \
-  const __m512i \
-    /* step 0 */ \
-    s0_t0 = _mm512_permutex2var_epi64(R0, TRANSPOSE_8_TO_1_S0_A_IDS, R4), \
-    s0_t1 = _mm512_permutex2var_epi64(R1, TRANSPOSE_8_TO_1_S0_A_IDS, R5), \
-    s0_t2 = _mm512_permutex2var_epi64(R2, TRANSPOSE_8_TO_1_S0_A_IDS, R6), \
-    s0_t3 = _mm512_permutex2var_epi64(R3, TRANSPOSE_8_TO_1_S0_A_IDS, R7), \
-    \
-    /* step 1 */ \
-    s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_1_S1_A_IDS, s0_t2), \
-    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_1_S1_A_IDS, s0_t3), \
-    \
-    /* step 2 */ \
-    t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_8_TO_1_S2_A_IDS, s1_t1)
-
-// cbd3 low permute ids
-//
-// bit offsets:
-//   i%4 = 0: i%3 = 1  i%3 = 2
-//   xxxyyyxx xyyyxxxy yyxxxyyy
-//
-// original value:
-//   static const uint8_t cbd3_lo_id_vals[64] ALIGN(64) = {
-//      0,    0,    0,    1,    1,    1,    2,    2,
-//      3,    3,    3,    4,    4,    4,    5,    5,
-//      6,    6,    6,    7,    7,    7,    8,    8,
-//      9,    9,    9,   10,   10,   10,   11,   11,
-//     12,   12,   12,   13,   13,   13,   14,   14,
-//     15,   15,   15,   16,   16,   16,   17,   17,
-//     18,   18,   18,   19,   19,   19,   20,   20,
-//     21,   21,   21,   22,   22,   22,   23,   23,
-//   };
-static const __m512i CBD3_LO_IDS = {
-  0x0202010101000000ULL, 0x0505040404030303ULL, 0x0808070707060606ULL, 0x0B0B0A0A0A090909ULL,
-  0x0E0E0D0D0D0C0C0CULL, 0x11111010100F0F0FULL, 0x1414131313121212ULL, 0x1717161616151515ULL,
-};
-
-// cbd3 low masks
-//
-// >> [7, 7<<3, 3<<6, 7<<1, 7<<4, 1<<7, 7<<2, 7<<5].reverse.map { '%02x' % [_1] }.join
-// => "e01c80700ec03807"
-static const __m512i CBD3_LO_MASKS = {
-  0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL,
-  0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL, 0xe01c80700ec03807ULL,
-};
-
-// cbd3 high permute ids
-//
-// original value:
-//   static const uint8_t cbd3_hi_id_vals[64] ALIGN(64) = {
-//      0,    0,    1,    1,    1,    2,    2,    2,
-//      3,    3,    4,    4,    4,    5,    5,    5,
-//      6,    6,    7,    7,    7,    8,    8,    8,
-//      9,    9,   10,   10,   10,   11,   11,   11,
-//     12,   12,   13,   13,   13,   14,   14,   14,
-//     15,   15,   16,   16,   16,   17,   17,   17,
-//     18,   18,   19,   19,   19,   20,   20,   20,
-//     21,   21,   22,   22,   22,   23,   23,   23,
-//   };
-static const __m512i CBD3_HI_IDS = {
-  0x0202020101010000ULL, 0x0505050404040303ULL, 0x0808080707070606ULL, 0x0B0B0B0A0A0A0909ULL,
-  0x0E0E0E0D0D0D0C0CULL, 0x1111111010100F0FULL, 0x1414141313131212ULL, 0x1717171616161515ULL,
-};
-
-// cbd3 high masks
-//
-// >> [0, 0, 1, 0, 0, 3, 0, 0].reverse.map { '%02x' % [_1] }.join
-// => "0000030000010000"
-static const __m512i CBD3_HI_MASKS = {
-  0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL,
-  0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL, 0x0000030000010000ULL,
-};
-
-// orig: _mm512_set1_epi16(0xff);
-static const __m512i CBD3_X_MASK = {
-  0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL,
-  0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL, 0x00ff00ff00ff00ffULL,
-};
-
-// sample bytes for cbd3 polynomial
-//
-// used in:
-// - pke512 keygen for elements of s and e
-// - pke512 encrypt for elements of r
-//
-// (note: OFS is specific to pke512 because of `192 * (OFS - 4)`)
-#define SAMPLE_CBD3_BYTES(REG, OFS, LIMIT) do {\
-  if (lens[OFS] < 192) { \
-    /* build/clamp mask (up to 48 bytes) */ \
-    const __mmask64 mask = (1ULL << MIN(192 - lens[OFS], LIMIT)) - 1; \
-    \
-    /* store bytes, increment length */ \
-    _mm512_mask_storeu_epi8(cbd3_buf + 192 * (OFS - 4) + lens[OFS], mask, REG); \
-    lens[OFS] += _mm_popcnt_u64(mask); \
-  } \
-} while (0)
-
-// cbd2 x expand mask (orig: _mm512_set1_epi32(0x00300003UL))
-static const __m512i CBD2_X_MASKS = {
-  0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL,
-  0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL, 0x0030000300300003ULL,
-};
-
-// cbd2 y expand mask (orig: _mm512_set1_epi32(0x00c0000cUL))
-static const __m512i CBD2_Y_MASKS = {
-  0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL,
-  0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL, 0x00c0000c00c0000cULL,
-};
-
-// cbd2 permute byte ids
-//
-// original value:
-//   static const uint8_t u8_id_vals[64] ALIGN(64) = {
-//      0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
-//      4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,
-//      8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,
-//     12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,
-//   };
-static const __m512i CBD2_ID_VALS = {
-  0x0101010100000000ULL, 0x0303030302020202ULL, 0x0505050504040404ULL, 0x0707070706060606ULL,
-  0x0909090908080808ULL, 0x0B0B0B0B0A0A0A0AULL, 0x0D0D0D0D0C0C0C0CULL, 0x0F0F0F0F0E0E0E0EULL,
-};
-
-// cbd2 increment (orig: _mm512_set1_epi8(16))
-static const __m512i CBD2_STEP = {
-  0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL,
-  0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL, 0x1010101010101010ULL,
-};
-
-// Sample 32 CBD2 coefficients
-//
-// params:
-// - REG: input register
-// - POLY_OFS: output polynomial offset
-// - COEF_POS: coefficient position within polynomial
-#define SAMPLE_32_CBD2_COEFS(REG, POLY_OFS, COEF_POS) do { \
-  /* cbd2: expand 32 nibbles into into 32 unsigned 16-bit integers */ \
-  const __m512i b = _mm512_permutexvar_epi8(cbd2_ids, REG), \
-                x = _mm512_popcnt_epi16(_mm512_and_si512(b, CBD2_X_MASKS)), \
-                y = _mm512_popcnt_epi16(_mm512_and_si512(b, CBD2_Y_MASKS)); \
-  \
-  /* cs = (x + (Q - y)) % Q */ \
-  __m512i cs = _mm512_add_epi16(x, _mm512_sub_epi16(Q16, y)); /* cs = x + (Q - y) */ \
-  cs = _mm512_mask_sub_epi16(cs, _mm512_cmpge_epi16_mask(cs, Q16), cs, Q16); /* cs %= Q */ \
-  \
-  /* store */ \
-  _mm512_storeu_epi16(out[POLY_OFS].cs + (COEF_POS), cs); \
-} while (0)
-
-// Sample 32 CBD2 coefficients if the output polynomial does not
-// already have 256 coefficients (used by PKE768).
-//
-// params:
-// - REG: input register
-// - POLY_OFS: output polynomial offset
-// - COEF_POS: coefficient position within polynomial
-#define MAYBE_SAMPLE_32_CBD2_COEFS(REG, POLY_OFS, COEF_POS) do { \
-  if (lens[POLY_OFS] < 256) { \
-    /* sample coefficients */ \
-    SAMPLE_32_CBD2_COEFS(REG, POLY_OFS, COEF_POS); \
-    \
-    /* increment length */ \
-    lens[POLY_OFS] += 32; \
-  } \
-} while (0)
-
-// Permute ids to move lanes 4-7 to lanes 0-3.  We don't care about the
-// high lane values (they are masked to zero in the permute).
-static const __m512i HI_SWAP_IDS = { 4, 5, 6, 7, 0, 0, 0, 0 };
-
-// 256 in 4 32-bit lanes of 128-bit register
-static const __m128i K256x4 = { 0x0000010000000100ULL, 0x0000010000000100ULL };
-
-// 256 in 8 32-bit lanes of 256-bit register
-static const __m256i K256x8 = { 0x0000010000000100ULL, 0x0000010000000100ULL, 0x0000010000000100ULL, 0x0000010000000100ULL };
-
-/**
- * Sample polynomials for pke512_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[1,0], A[1,1], s[0],
- * s[1], e[0], and e[1].
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out 8 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke512_keygen_sample_avx512(poly_t out[static 8], const uint8_t seed[static 64]) {
-  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
-
-  // lens:
-  // - indices 0-3: number of coefficients for Ahat entries
-  // - indices 4-7: number of bytes squeezed for s and e entries (192
-  //   bytes each)
-  uint32_t lens[8] ALIGN(64) = { 0 }; // polynomial lengths
-
-  // bytes used for CBD3 calculation for elements of s and e
-  // (48 * 4 = 192 bytes per polynomial)
-  uint8_t cbd3_buf[192*4] = { 0 };
-
-  // keccak state:
-  //   -------------------------------------
-  //   | Row |          Registers          |
-  //   |-----|-----------------------------|
-  //   |  2  | a13 | a14 | a10 | a11 | a12 |
-  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
-  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
-  //   |  4  | a23 | a24 | a20 | a21 | a22 |
-  //   |  3  | a18 | a19 | a15 | a16 | a17 |
-  //   -------------------------------------
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-3: rho for a
-  // - lanes 4-7: rho for s and e
-  __m512i a0 = _mm512_setr_epi64(ap[0], ap[0], ap[0], ap[0], sp[0], sp[0], sp[0], sp[0]),
-          a1 = _mm512_setr_epi64(ap[1], ap[1], ap[1], ap[1], sp[1], sp[1], sp[1], sp[1]),
-          a2 = _mm512_setr_epi64(ap[2], ap[2], ap[2], ap[2], sp[2], sp[2], sp[2], sp[2]),
-          a3 = _mm512_setr_epi64(ap[3], ap[3], ap[3], ap[3], sp[3], sp[3], sp[3], sp[3]);
-
-  // keccak state, row 0, column 4
-  // lanes 0-3: A matrix element coordinates (j, i) and shake padding (0x1f)
-  // lanes 4-7: s, e vector element index and shake padding (0x1f)
-  //
-  // NOTE: the A element coordinates are transposed here versus
-  // pke512_encrypt() and pke512_decrypt(), because this code is
-  // sampling A and pke512_encrypt() and pke512_decrypt() are sampling
-  // the transpose of A.
-  static const __m512i a4_vals = { 0x1f0000, 0x1f0001, 0x1f0100, 0x1f0101, 0x1f00, 0x1f01, 0x1f02, 0x1f03 };
-  __m512i a4 = a4_vals;
-
-  // keccak state, rows 1-2 (all zero)
-  __m512i a5 = _mm512_setzero_si512(),
-          a6 = _mm512_setzero_si512(),
-          a7 = _mm512_setzero_si512(),
-          a8 = _mm512_setzero_si512(),
-          a9 = _mm512_setzero_si512(),
-          a10 = _mm512_setzero_si512(),
-          a11 = _mm512_setzero_si512(),
-          a12 = _mm512_setzero_si512(),
-          a13 = _mm512_setzero_si512(),
-          a14 = _mm512_setzero_si512();
-
-  // keccak state, row 3
-  // a16 (column 1), lanes 4-7: set high bit in last byte of shake256 rate
-  // all other cells: all zero
-  __m512i a15 = _mm512_setzero_si512(),
-          a16 = _mm512_maskz_set1_epi64(0xf0, 0x8000000000000000ULL),
-          a17 = _mm512_setzero_si512(),
-          a18 = _mm512_setzero_si512(),
-          a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // a20 (column 0), lanes 0-3: set high bit in last byte of shake128 rate
-  // all other cells: all zero
-  __m512i a20 = _mm512_maskz_set1_epi64(0x0f, 0x8000000000000000ULL),
-          a21 = _mm512_setzero_si512(),
-          a22 = _mm512_setzero_si512(),
-          a23 = _mm512_setzero_si512(),
-          a24 = _mm512_setzero_si512();
-
-  // loop until all Ahat polynomials have 256 coefficients
-  // (e.g., len[0..3] == 256)
-  //
-  // note: once this happens then 192 bytes will also have been squeezed
-  // for all s/e polynomials (e.g. len[4..7] == 192)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-3: permuted shake128 state for 4 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    // - lanes 4-8: permuted shake256 state for 2 s vector elements and
-    //   2 e vector coefficients (have 17*8 = 136 bytes, need 64*eta1 =
-    //   64*3 = 192 bytes per poly, or 2 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t4: 64 bytes of SHAKE256 output for s[0]
-    //    - t5: 64 bytes of SHAKE256 output for s[1]
-    //    - t6: 64 bytes of SHAKE256 output for e[0]
-    //    - t7: 64 bytes of SHAKE256 output for s[1]
-    //
-    // 2. For t0-t3, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. For t4-t7, we do the following:
-    //    a. Append up to 48 bytes into the XOF byte stream buffer
-    //       (`cbd3_buf`).
-    //    b. Increment the buffer length.
-    //
-    // 4. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t3 as per step #2, and registers
-    //    t4-t7 as per step #3.
-    //
-    // 5. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t3 as per step #2.  Registers t4-t7
-    //    are processed as per step #3, *except* that only up to 40
-    //    bytes are sampled instead of 48 (the last 8 bytes are part of
-    //    the SHAKE256 rate).
-    //
-    // 6. Transpose the 4x4 matrix in registers a18-a21.  This organizes
-    //    the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[1, 1]
-    //
-    // 7. For t0-t3, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
-
-      // sample bytes
-      SAMPLE_CBD3_BYTES(t4, 4, 48); // s[0]
-      SAMPLE_CBD3_BYTES(t5, 5, 48); // s[1]
-      SAMPLE_CBD3_BYTES(t6, 6, 48); // e[0]
-      SAMPLE_CBD3_BYTES(t7, 7, 48); // e[1]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
-
-      // sample bytes
-      SAMPLE_CBD3_BYTES(t4, 4, 48); // s[0]
-      SAMPLE_CBD3_BYTES(t5, 5, 48); // s[1]
-      SAMPLE_CBD3_BYTES(t6, 6, 48); // e[0]
-      SAMPLE_CBD3_BYTES(t7, 7, 48); // e[1]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
-
-      // sample bytes (40)
-      SAMPLE_CBD3_BYTES(t4, 4, 40); // s[0]
-      SAMPLE_CBD3_BYTES(t5, 5, 40); // s[1]
-      SAMPLE_CBD3_BYTES(t6, 6, 40); // e[0]
-      SAMPLE_CBD3_BYTES(t7, 7, 40); // e[1]
-    }
-
-    // a18-a21 transpose
-    {
-      // note: 4x transpose step 0 and step 1 are 8x transpose step 1
-      // and step 2, respectively
-
-      // transpose step 0
-      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_S1_A_IDS, a20),
-                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_S1_A_IDS, a21),
-                    s0_t2 = _mm512_permutex2var_epi64(a20, TRANSPOSE_S1_B_IDS, a18),
-                    s0_t3 = _mm512_permutex2var_epi64(a21, TRANSPOSE_S1_B_IDS, a19);
-
-      // transpose step 1
-      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S2_A_IDS, s0_t1),
-                    t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S2_B_IDS, s0_t0),
-                    t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S2_A_IDS, s0_t3),
-                    t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S2_B_IDS, s0_t2);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_16_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_16_COEFS(t2, 2); // Ahat[1, 0]
-      SAMPLE_16_COEFS(t3, 3); // Ahat[1, 1]
-    }
-  } while (_mm_cmpneq_epi32_mask(_mm_load_epi32(lens), K256x4));
-
-  // at this point cbd3_buf has 192 bytes for each element of s and e.
-  // sample 24 bytes at a time, expand to 32 coefficients, and write
-  // coefficients to output polynomials
-
-  // loop 4 times (2 elements in `s` + 2 elements in `e` = 4)
-  for (size_t i = 0; i < 4; i++) {
-    for (size_t j = 0; j < 8; j++) {
-      const __m512i b = _mm512_maskz_loadu_epi8(0xffffff, cbd3_buf + 192 * i + 24 * j),
-                    // count low bits
-                    lo_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_LO_IDS, b), CBD3_LO_MASKS)),
-                    // count high bits
-                    hi_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_HI_IDS, b), CBD3_HI_MASKS)),
-                    sums = _mm512_add_epi8(lo_sums, hi_sums),
-                    x = _mm512_and_si512(sums, CBD3_X_MASK),
-                    y = _mm512_srli_epi16(sums, 8);
-
-      // vals = (x + (Q - y)) % Q
-      __m512i vals = _mm512_add_epi16(x, _mm512_sub_epi16(Q16, y));
-      vals = _mm512_mask_sub_epi16(vals, _mm512_cmpge_epu16_mask(vals, Q16), vals, Q16);
-
-      // store coefficients
-      _mm512_storeu_epi16(out[4 + i].cs + 32 * j, vals);
-    }
-  }
-}
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_NEON
-
-// zeros and shake hi bits
-// used to initialize shake contexts
-static const uint64x2_t ZZ = { 0, 0 },
-                        II = { 0x8000000000000000ULL, 0x8000000000000000ULL };
-
-// rotate elements in uint64x2_t left by N bits
-// note: want vrax1q_u64(), but it's not supported on systems w/o sha3
-// extension (lemon, pizza, etc)
-#define VROLQ(A, N) vsriq_n_u64(vshlq_n_u64((A), (N)), (A), 64-(N))
-
-// permute 2 keccak states stored in neon registers a0-a24
-//
-// keccak state layout (1 context per u64 lane):
-//   -------------------------------------
-//   | Row |          Registers          |
-//   |-----|-----------------------------|
-//   |  2  | a13 | a14 | a10 | a11 | a12 |
-//   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
-//   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
-//   |  4  | a23 | a24 | a20 | a21 | a22 |
-//   |  3  | a18 | a19 | a15 | a16 | a17 |
-//   -------------------------------------
-#define PERMUTE_STATES_NEON() do { \
-  /* 24 keccak rounds */ \
-  for (size_t j = 0; j < 24; j++) { \
-    /* theta */ \
-    { \
-      /* c0 = a0 ^ a1 ^ a2 ^ a3 ^ a4 */ \
-      const uint64x2_t c0 = a0 ^ a5 ^ a10 ^ a15 ^ a20, \
-                       c1 = a1 ^ a6 ^ a11 ^ a16 ^ a21, \
-                       c2 = a2 ^ a7 ^ a12 ^ a17 ^ a22, \
-                       c3 = a3 ^ a8 ^ a13 ^ a18 ^ a23, \
-                       c4 = a4 ^ a9 ^ a14 ^ a19 ^ a24; \
-      const uint64x2_t d0 = c4 ^ VROLQ(c1, 1), \
-                       d1 = c0 ^ VROLQ(c2, 1), \
-                       d2 = c1 ^ VROLQ(c3, 1), \
-                       d3 = c2 ^ VROLQ(c4, 1), \
-                       d4 = c3 ^ VROLQ(c0, 1); \
-      \
-      a0 ^= d0; a1 ^= d1; a2 ^= d2; a3 ^= d3; a4 ^= d4;\
-      a5 ^= d0; a6 ^= d1; a7 ^= d2; a8 ^= d3; a9 ^= d4; \
-      a10 ^= d0; a11 ^= d1; a12 ^= d2; a13 ^= d3; a14 ^= d4; \
-      a15 ^= d0; a16 ^= d1; a17 ^= d2; a18 ^= d3; a19 ^= d4; \
-      a20 ^= d0; a21 ^= d1; a22 ^= d2; a23 ^= d3; a24 ^= d4; \
-    } \
-    \
-    /* rho (TODO: combine with theta and/or pi) */ \
-    a1 = VROLQ(a1, 1); /* 1 % 64 = 1 */ \
-    a2 = VROLQ(a2, 62); /* 190 % 64 = 62 */ \
-    a3 = VROLQ(a3, 28); /* 28 % 64 = 28 */ \
-    a4 = VROLQ(a4, 27); /* 91 % 64 = 27 */ \
-    a5 = VROLQ(a5, 36); /* 36 % 64 = 36 */ \
-    a6 = VROLQ(a6, 44); /* 300 % 64 = 44 */ \
-    a7 = VROLQ(a7, 6); /* 6 % 64 = 6 */ \
-    a8 = VROLQ(a8, 55); /* 55 % 64 = 55 */ \
-    a9 = VROLQ(a9, 20); /* 276 % 64 = 20 */ \
-    a10 = VROLQ(a10, 3); /* 3 % 64 = 3 */ \
-    a11 = VROLQ(a11, 10); /* 10 % 64 = 10 */ \
-    a12 = VROLQ(a12, 43); /* 171 % 64 = 43 */ \
-    a13 = VROLQ(a13, 25); /* 153 % 64 = 25 */ \
-    a14 = VROLQ(a14, 39); /* 231 % 64 = 39 */ \
-    a15 = VROLQ(a15, 41); /* 105 % 64 = 41 */ \
-    a16 = VROLQ(a16, 45); /* 45 % 64 = 45 */ \
-    a17 = VROLQ(a17, 15); /* 15 % 64 = 15 */ \
-    a18 = VROLQ(a18, 21); /* 21 % 64 = 21 */ \
-    a19 = VROLQ(a19, 8); /* 136 % 64 = 8 */ \
-    a20 = VROLQ(a20, 18); /* 210 % 64 = 18 */ \
-    a21 = VROLQ(a21, 2); /* 66 % 64 = 2 */ \
-    a22 = VROLQ(a22, 61); /* 253 % 64 = 61 */ \
-    a23 = VROLQ(a23, 56); /* 120 % 64 = 56 */ \
-    a24 = VROLQ(a24, 14); /* 78 % 64 = 14 */ \
-    \
-    /* pi */ \
-    /* use two temporary registers to temporarily cache intermediate */ \
-    /* values, then do the assignments in an odd sequence in order to */ \
-    /* prevent register spill */ \
-    { \
-      uint64x2_t t0, t1; \
-      t0 = a1; a1 = a6; /* a1 = a6 */ \
-      t1 = a10; a10 = t0; /* a10 = a1 */ \
-      t0 = a7; a7 = t1; /* a7 = a10 */ \
-      t1 = a11; a11 = t0; /* a11 = a7 */ \
-      t0 = a17; a17 = t1; /* a17 = a11 */ \
-      t1 = a18; a18 = t0; /* a18 = a17 */ \
-      t0 = a3; a3 = t1; /* a3 = a18 */ \
-      t1 = a5; a5 = t0; /* a5 = a3 */ \
-      t0 = a16; a16 = t1; /* a16 = a5 */ \
-      t1 = a8; a8 = t0; /* a8 = a16 */ \
-      t0 = a21; a21 = t1; /* a21 = a8 */ \
-      t1 = a24; a24 = t0; /* a24 = a21 */ \
-      t0 = a4; a4 = t1; /* a4 = a24 */ \
-      t1 = a15; a15 = t0; /* a15 = a4 */ \
-      t0 = a23; a23 = t1; /* a23 = a15 */ \
-      t1 = a19; a19 = t0; /* a19 = a23 */ \
-      t0 = a13; a13 = t1; /* a13 = a19 */ \
-      t1 = a12; a12 = t0; /* a12 = a13 */ \
-      t0 = a2; a2 = t1; /* a2 = a12 */ \
-      t1 = a20; a20 = t0; /* a20 = a2 */ \
-      t0 = a14; a14 = t1; /* a14 = a20 */ \
-      t1 = a22; a22 = t0; /* a22 = a14 */ \
-      t0 = a9; a9 = t1; /* a9 = a22 */ \
-      t1 = a6; a6 = t0; /* a6 = a9 */ \
-    } \
-    \
-    /* chi */ \
-    /* notes: */ \
-    /* - use two temporary registers to cache first two keccak columns of */ \
-    /*   each row, then use the cached values for the calculations of the */ \
-    /*   last two columns of each row.  done this way to prevent spill */ \
-    /* - represent (~a & b) as vbicq_u64(b, a) (e.g. b & ~a) */ \
-    { \
-      uint64x2_t t0 = a0, t1 = a1; \
-      a0 ^= vbicq_u64(a2, a1); /* a0 ^= (~a1 & a2) */ \
-      a1 ^= vbicq_u64(a3, a2); /* a1 ^= (~a2 & a3) */ \
-      a2 ^= vbicq_u64(a4, a3); /* a2 ^= (~a3 & a4) */ \
-      a3 ^= vbicq_u64(t0, a4); /* a3 ^= (~a4 & t0) */ \
-      a4 ^= vbicq_u64(t1, t0); /* a4 ^= (~t0 & t1) */ \
-      t0 = a5; t1 = a6; \
-      a5 ^= vbicq_u64(a7, a6); /* a5 ^= (~a6 & a7) */ \
-      a6 ^= vbicq_u64(a8, a7); /* a6 ^= (~a7 & a8) */ \
-      a7 ^= vbicq_u64(a9, a8); /* a7 ^= (~a8 & a9) */ \
-      a8 ^= vbicq_u64(t0, a9); /* a8 ^= (~a9 & t0) */ \
-      a9 ^= vbicq_u64(t1, t0); /* a9 ^= (~t0 & t1) */ \
-      t0 = a10; t1 = a11; \
-      a10 ^= vbicq_u64(a12, a11); /* a10 ^= (~a11 & a12) */ \
-      a11 ^= vbicq_u64(a13, a12); /* a11 ^= (~a12 & a13) */ \
-      a12 ^= vbicq_u64(a14, a13); /* a12 ^= (~a13 & a14) */ \
-      a13 ^= vbicq_u64(t0, a14); /* a13 ^= (~a14 & t0) */ \
-      a14 ^= vbicq_u64(t1, t0); /* a14 ^= (~t0 & t1) */ \
-      t0 = a15; t1 = a16; \
-      a15 ^= vbicq_u64(a17, a16); /* a15 ^= (~a16 & a17) */ \
-      a16 ^= vbicq_u64(a18, a17); /* a16 ^= (~a17 & a18) */ \
-      a17 ^= vbicq_u64(a19, a18); /* a17 ^= (~a18 & a19) */ \
-      a18 ^= vbicq_u64(t0, a19); /* a18 ^= (~a19 & t0) */ \
-      a19 ^= vbicq_u64(t1, t0); /* a19 ^= (~t0 & t1) */ \
-      t0 = a20; t1 = a21; \
-      a20 ^= vbicq_u64(a22, a21); /* a20 ^= (~a21 & a22) */ \
-      a21 ^= vbicq_u64(a23, a22); /* a21 ^= (~a22 & a23) */ \
-      a22 ^= vbicq_u64(a24, a23); /* a22 ^= (~a23 & a24) */ \
-      a23 ^= vbicq_u64(t0, a24); /* a23 ^= (~a24 & t0) */ \
-      a24 ^= vbicq_u64(t1, t0); /* a24 ^= (~t0 & t1) */ \
-    } \
-    \
-    /* iota */ \
-    a0 ^= vld1q_dup_u64(RCS + j); \
-  } \
-} while (0)
-
-// squeeze bytes from two shake128 contexts in registers a0-a24 and
-// store them in buffer as interleaved u64s
-#define SQUEEZE_AHATS_NEON(BUF) do { \
-  vst1q_u64_x4((BUF) +  0, ((uint64x2x4_t) { .val = {  a0,  a1,  a2,  a3 } })); \
-  vst1q_u64_x4((BUF) +  8, ((uint64x2x4_t) { .val = {  a4,  a5,  a6,  a7 } })); \
-  vst1q_u64_x4((BUF) + 16, ((uint64x2x4_t) { .val = {  a8,  a9, a10, a11 } })); \
-  vst1q_u64_x4((BUF) + 24, ((uint64x2x4_t) { .val = { a12, a13, a14, a15 } })); \
-  vst1q_u64_x4((BUF) + 32, ((uint64x2x4_t) { .val = { a16, a17, a18, a19 } })); \
-  vst1q_u64((BUF) + 40, a20); \
-} while (0)
-
-// squeeze bytes from two shake256 contexts in registers a0-a24
-// and store them to buffer as interleaved u64s
-#define SQUEEZE_CBD2S_NEON(BUF) do { \
-  vst1q_u64_x4((BUF) +  0, ((uint64x2x4_t) { .val = {  a0,  a1,  a2,  a3 } })); \
-  vst1q_u64_x4((BUF) +  8, ((uint64x2x4_t) { .val = {  a4,  a5,  a6,  a7 } })); \
-  vst1q_u64_x4((BUF) + 16, ((uint64x2x4_t) { .val = {  a8,  a9, a10, a11 } })); \
-  vst1q_u64_x4((BUF) + 24, ((uint64x2x4_t) { .val = { a12, a13, a14, a15 } })); \
-  vst1q_u64((BUF) + 32, a16); \
-} while (0)
-
-/**
- * @brief Sample 16 12-bit values from 24 bytes, then append valid
- * values (<Q) to the output polynomial.
- *
- * @param[out] out Output polynomial.
- * @param[in] out Polynomial coefficient count.
- * @param[in] d0 First input chunk (8 bytes).
- * @param[in] d1 Second input chunk (8 bytes).
- * @param[in] d2 Third input chunk (8 bytes).
- *
- * @return Updated polynomial coefficient count.
- */
-static inline uint32_t neon_ahat_coefs(poly_t * const out, uint32_t len, const uint64_t d0, const uint64_t d1, const uint64_t d2) {
-  static const uint8x8_t C0_LO_IDS = { 0, 1, 3, 4, 6, 7, 9, 10 },
-                         C0_HI_IDS = { 1, 2, 4, 5, 7, 8, 10, 11 },
-                         C1_LO_IDS = { 12, 13, 15, 16, 18, 19, 21, 22 },
-                         C1_HI_IDS = { 13, 14, 16, 17, 19, 20, 22, 23 },
-                         LO_MASK = { 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0xf0 },
-                         HI_MASK = { 0x0f, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0x0f, 0xff };
-  static const uint16x8_t LO_SHIFT = { 0, 4, 0, 4, 0, 4, 0, 4 },
-                          HI_SHIFT = { 8, 4, 8, 4, 8, 4, 8, 4 };
-
-  if (len >= 256) {
-    return len;
-  }
-
-  // get next 16 raw values
-  uint16_t raw[16] = { 0 };
-  {
-    // convert u64s to u8x8,
-    const uint8x8x3_t d = { .val = { vreinterpret_u8_u64(vcreate_u64(d0)), vreinterpret_u8_u64(vcreate_u64(d1)), vreinterpret_u8_u64(vcreate_u64(d2)) } };
-
-    // decode u12s values
-    uint16x8x2_t s;
-    s.val[0] = (vmovl_u8(vtbl3_u8(d, C0_LO_IDS) & LO_MASK) >> LO_SHIFT) | (vmovl_u8(vtbl3_u8(d, C0_HI_IDS) & HI_MASK) << HI_SHIFT);
-    s.val[1] = (vmovl_u8(vtbl3_u8(d, C1_LO_IDS) & LO_MASK) >> LO_SHIFT) | (vmovl_u8(vtbl3_u8(d, C1_HI_IDS) & HI_MASK) << HI_SHIFT);
-
-    // store decoded values
-    vst1q_u16_x2(raw, s);
-  }
-
-  // rejection sample, count valid values
-  //
-  // the body of this for loop looks weird (copying on every iteration,
-  // but only conditionally incrementing num_valid); writing it this way
-  // saves thousands of median cycles on a76
-  //
-  //   set,function,before,after
-  //   kem512,keygen,58161,53711
-  //   kem512,encaps,64703,61321
-  //   kem512,decaps,74760,73648
-  //   kem768,keygen,102172,92516
-  //   kem768,encaps,111784,104887
-  //   kem768,decaps,124956,121530
-  //   kem1024,keygen,156951,140309
-  //   kem1024,encaps,169322,155216
-  //   kem1024,decaps,184719,176220
-  //
-  uint16_t valid[16];
-  size_t num_valid = 0;
-  for (size_t i = 0; i < 16; i++) {
-    valid[num_valid] = raw[i];
-    num_valid += (__builtin_expect(raw[i] < Q, 1)) ? 1 : 0;
-  }
-
-  // store coefficients, return updated length
-  const size_t num = MIN(256 - len, num_valid);
-  memcpy(out->cs + len, valid, num * sizeof(uint16_t));
-  return len + num;
-}
-
-/**
- * @brief Sample poly from buffer containing 41 interleaved u64s.
- *
- * @param[out] out Output polynomial.
- * @param[in] buf 41 interleaved u64s (21 u64s x 2 polys - 1.  Only even
- * u64s are used.
- * @return Updated polynomial coefficient count.
- */
-static inline uint32_t neon_sample_ahat_poly(poly_t * const out, uint32_t len, const uint64_t buf[static 41]) {
-  // loop over chunks and sample coefficients
-  for (size_t ci = 0; (len < 256) && ci < 21; ci += 3) {
-    len = neon_ahat_coefs(out, len, buf[2*ci + 0],buf[2*ci + 2], buf[2*ci + 4]);
-  }
-
-  // return updated length
-  return len;
-}
-
-/**
- * @brief Sample 2 polys from buffer containing 42 interleaved u64s.
- *
- * @param[out] out Pointer to 2 output polynomials.
- * @param[in,out] lens Number of coefficients for output polynomials.
- * @param[in] buf 42 interleaved u64s (21 u64s per polynomial x 2 polynomials)
- */
-static inline void neon_sample_ahat_polys(poly_t out[static 2], uint32_t lens[static 2], const uint64_t buf[static 42]) {
-  // loop over polys
-  for (size_t pi = 0; pi < 2; pi++) {
-    lens[pi] = neon_sample_ahat_poly(out + pi, lens[pi], buf + pi);
-  }
-}
-
-/**
- * @brief Sample coefs for two CBD3 polys from buffer containing interleaved u64s.
- *
- * @param[out] out Output polynomials.
- * @param[in,out] lens Number of coefficients for output polynomials.
- * @param[in] buf 48 interleaved u64s (24 u64s per polynomial x 2 polynomials)
- */
-static inline void neon_sample_cbd3_polys(poly_t out[static 2], const uint64_t u64s[static 48]) {
-  static const uint8x8_t X0_IDS = { 0, 0, 1, 2, 3, 3, 4, 5 },
-                         X1_IDS = { 0, 1, 1, 2, 3, 4, 4, 5 },
-                         Y0_IDS = { 0, 1, 1, 2, 3, 4, 4, 5 },
-                         Y1_IDS = { 0, 1, 2, 2, 3, 4, 5, 5 },
-                         X0_MASK = { 7<<0, 3<<6, 7<<4, 7<<2, 7<<0, 3<<6, 7<<4, 7<<2 },
-                         X1_MASK = { 0, 1, 0, 0, 0, 1, 0, 0 },
-                         Y0_MASK = { 7<<3, 7<<1, 1<<7, 7<<5, 7<<3, 7<<1, 1<<7, 7<<5 },
-                         Y1_MASK = { 0, 0, 3<<0, 0, 0, 0, 3<<0, 0 },
-                         STEP = { 6, 6, 6, 6, 6, 6, 6, 6 };
-
-  // process 8 chunks of 6 u64s (3 u64s per poly)
-  for (size_t bi = 0; bi < 8; bi++) {
-    // load 6 u64s (6*8 = 48 bytes, 24 bytes per poly)
-    const uint64x2x3_t b = vld1q_u64_x3(u64s + (6*bi));
-    const uint64x2_t b0 = b.val[0],
-                     b1 = b.val[1],
-                     b2 = b.val[2];
-
-    // poly 0 data (low lanes)
-    const uint8x8x3_t d0 = { .val =  { vreinterpret_u8_u64(vget_low_u64(b0)), vreinterpret_u8_u64(vget_low_u64(b1)), vreinterpret_u8_u64(vget_low_u64(b2)) } };
-
-    // poly 1 data (high lanes)
-    uint8x8x3_t d1 = { .val = { vreinterpret_u8_u64(vget_high_u64(b0)), vreinterpret_u8_u64(vget_high_u64(b1)), vreinterpret_u8_u64(vget_high_u64(b2)) } };
-
-    // loop over 4 chunks of 6 bytes
-    uint8x8_t x0 = X0_IDS, x1 = X1_IDS, y0 = Y0_IDS, y1 = Y1_IDS;
-    for (size_t ci = 0; ci < 4; ci++) {
-      // sample 8 poly 0 coefs
-      {
-        const uint16x8_t xs = vmovl_u8(vcnt_u8(vtbl3_u8(d0, x0) & X0_MASK) + vcnt_u8(vtbl3_u8(d0, x1) & X1_MASK)),
-                         ys = vmovl_u8(vcnt_u8(vtbl3_u8(d0, y0) & Y0_MASK) + vcnt_u8(vtbl3_u8(d0, y1) & Y1_MASK));
-        uint16x8_t cs = xs + Q16 - ys; // get coefs
-        cs = vsubq_u16(cs, vandq_u16(vcgeq_u16(cs, Q16), Q16)); // cs %= Q
-        vst1q_u16(out[0].cs + 32*bi + 8*ci, cs); // store
-      }
-
-      // sample 8 poly 1 coefs
-      {
-        const uint16x8_t xs = vmovl_u8(vcnt_u8(vtbl3_u8(d1, x0) & X0_MASK) + vcnt_u8(vtbl3_u8(d1, x1) & X1_MASK)),
-                         ys = vmovl_u8(vcnt_u8(vtbl3_u8(d1, y0) & Y0_MASK) + vcnt_u8(vtbl3_u8(d1, y1) & Y1_MASK));
-        uint16x8_t cs = xs + Q16 - ys; // get coefs
-        cs = vsubq_u16(cs, vandq_u16(vcgeq_u16(cs, Q16), Q16)); // cs %= Q
-        vst1q_u16(out[1].cs + 32*bi + 8*ci, cs); // store
-      }
-
-      // increment byte ids
-      x0 += STEP; x1 += STEP; y0 += STEP; y1 += STEP;
-    }
-  }
-}
-
-/**
- * @brief Sample 1 CBD2 poly from buffer containing interleaved u64s.
- *
- * @param[out] out Output polynomial.
- * @param[in] buf 32 interleaved u64s (16 u64s per polynomial).  Only
- * the even u64s are sampled by this function.
- */
-static inline void neon_sample_cbd2_poly(poly_t * const out, const uint64_t buf[static 31]) {
-  static const uint8x8_t X_EVENS = { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 },
-                         Y_EVENS = { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c },
-                         X_ODDS = { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 },
-                         Y_ODDS = { 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0 };
-
-  for (size_t ci = 0; ci < 16; ci++) {
-    const uint8x8_t b = vreinterpret_u8_u64(vld1_u64(buf + (2*ci)));
-    uint16x8_t es = (vmovl_u8(vcnt_u8(b & X_EVENS)) + Q16) - vmovl_u8(vcnt_u8(b & Y_EVENS)),
-               os = (vmovl_u8(vcnt_u8(b & X_ODDS)) + Q16) - vmovl_u8(vcnt_u8(b & Y_ODDS));
-    es = vsubq_u16(es, vandq_u16(vcgeq_u16(es, Q16), Q16)); // es %= Q
-    os = vsubq_u16(os, vandq_u16(vcgeq_u16(os, Q16), Q16)); // os %= Q
-
-    const uint16x8x2_t s = { .val = { es, os } };
-    vst2q_u16(out->cs + (16*ci + 0), s); // store
-  }
-}
-
-/**
- * @brief Sample coefs for 2 CBD2 polys from buffer of interleaved u64s.
- *
- * @param[out] out Output polynomials.
- * @param[in] buf 32 interleaved u64s (16 u64s per polynomial)
- */
-static inline void neon_sample_cbd2_polys(poly_t out[static 2], const uint64_t buf[static 32]) {
-  for (size_t pi = 0; pi < 2; pi++) {
-    neon_sample_cbd2_poly(out + pi, buf + pi);
-  }
-}
-
-/**
- * @brief Generate coefficients for a pair of A elements.
- *
- * @param[out] out Output polynomials.
- * @param[in] ap 32 byte seed, represented as 4 u64s.
- * @param[in] c0 Coordinates of first element.
- * @param[in] c1 Coordinates of second element.
- */
-static inline void neon_ahat_polys(poly_t out[static 2], const uint64_t ap[static 4], const uint64_t c0, const uint64_t c1) {
-  // keccak state, row 0:
-  // - a0-a3 (cols 0-3): rho for A (both lanes)
-  // - a4 (col 4): A element coords and shake pad (0x1f)
-  uint64x2_t a0 = { ap[0], ap[0] },
-             a1 = { ap[1], ap[1] },
-             a2 = { ap[2], ap[2] },
-             a3 = { ap[3], ap[3] },
-             a4 = { 0x1f0000 | c0, 0x1f0000 | c1 };
-
-  // keccak state, rows 1-4:
-  // - a20 (row 4, col 0): set high bit of shake128 rate
-  // - all other cells: zero
-  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
-             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
-             a15 = ZZ, a16 = ZZ, a17 = ZZ, a18 = ZZ, a19 = ZZ,
-             a20 = II, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
-
-  // squeeze 63 u64s (21 u64 * 3 rounds) from each shake128 context and
-  // write them interleaved to buffer.
-  uint64_t buf[21 * 2 * 3]; // squeeze buffer
-  for (size_t i = 0; i < 3; i++) {
-    PERMUTE_STATES_NEON(); // permute states
-    SQUEEZE_AHATS_NEON(buf + (42 * i)); // squeeze to buf
-  }
-
-  // sample polys
-  uint32_t lens[2] = { 0 }; // poly coef counts
-  for (size_t i = 0; i < 3; i++) {
-    neon_sample_ahat_polys(out, lens, buf + (42 * i));
-  }
-
-  // loop until both polys have 256 coefficients
-  // (note: most of the time this loop won't be necessary)
-  while (__builtin_expect(lens[0] < 256 || lens[1] < 256, 0)) {
-    PERMUTE_STATES_NEON(); // permute states
-    SQUEEZE_AHATS_NEON(buf); // squeeze to buf
-    neon_sample_ahat_polys(out, lens, buf); // sample polys
-  }
-}
-
-/**
- * @brief Generate coefficients for a single element of A.
- *
- * @param[out] out Output polynomials.
- * @param[in] ap 32 byte seed, represented as 4 u64s.
- * @param[in] c0 Element coordinates.
- */
-static inline void neon_ahat_poly(poly_t * const out, const uint64_t ap[static 4], const uint64_t c0) {
-  // keccak state, row 0:
-  // - a0-a3 (cols 0-3): rho for a (both lanes)
-  // - a4 (col 4): A element coords and shake pad (0x1f)
-  uint64x2_t a0 = { ap[0], ap[0] },
-             a1 = { ap[1], ap[1] },
-             a2 = { ap[2], ap[2] },
-             a3 = { ap[3], ap[3] },
-             a4 = { 0x1f0000 | c0, 0 };
-
-  // keccak state, rows 1-4:
-  // - a20 (row 4, col 0): set shake128 rate high bit
-  // - all other cells: zero
-  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
-             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
-             a15 = ZZ, a16 = ZZ, a17 = ZZ, a18 = ZZ, a19 = ZZ,
-             a20 = II, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
-
-  // squeeze 63 u64s (21 u64s * 3 rounds) from each shake128 context and
-  // write them interleaved to buffer.
-  uint64_t buf[21 * 2 * 3]; // squeeze buffer
-  for (size_t i = 0; i < 3; i++) {
-    PERMUTE_STATES_NEON(); // permute states
-    SQUEEZE_AHATS_NEON(buf + (42 * i)); // squeeze to buf
-  }
-
-  // sample poly
-  uint32_t len = 0; // poly coefficient count
-  for (size_t i = 0; i < 3; i++) {
-    len = neon_sample_ahat_poly(out, len, buf + (42 * i));
-  }
-
-  // loop until poly has 256 coefficients
-  // (note: most of the time this loop won't be necessary)
-  while (__builtin_expect(len < 256, 0)) {
-    PERMUTE_STATES_NEON(); // permute states
-    SQUEEZE_AHATS_NEON(buf); // squeeze to buf
-    len = neon_sample_ahat_poly(out, len, buf); // sample poly
-  }
-}
-
-/**
- * @brief Generate coefficients for two elements of a CBD3 vector.
- *
- * @param[out] out Output polynomials.
- * @param[in] sp 32 byte seed, represented as 4 u64s.
- * @param[in] c0 Index of first element.
- * @param[in] c1 Index of second element.
- */
-static inline void neon_cbd3_polys(poly_t out[static 2], const uint64_t sp[static 4], const uint64_t c0, const uint64_t c1) {
-  // keccak state, row 0:
-  // - a0-a3 (cols 0-3): rho for s (both lanes)
-  // - a4 (col 4): s element coords and shake pad (0x1f)
-  uint64x2_t a0 = { sp[0], sp[0] },
-             a1 = { sp[1], sp[1] },
-             a2 = { sp[2], sp[2] },
-             a3 = { sp[3], sp[3] },
-             a4 = { 0x1f00 | c0, 0x1f00 | c1 };
-
-  // keccak state, rows 1-4:
-  // - a16 (row 3, col 1): set shake256 rate high bit
-  // - all other cells: zero
-  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
-             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
-             a15 = ZZ, a16 = II, a17 = ZZ, a18 = ZZ, a19 = ZZ,
-             a20 = ZZ, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
-
-  // squeeze 34 (2x17) u64s from each shake256 context and write them
-  // interleaved to buffer (note: only need 192 bytes).
-  uint64_t buf[68]; // squeeze buffer
-  for (size_t i = 0; i < 2; i++) {
-    PERMUTE_STATES_NEON();
-
-    const uint64x2x4_t s0 = { .val = {  a0,  a1,  a2,  a3 } },
-                       s1 = { .val = {  a4,  a5,  a6,  a7 } },
-                       s2 = { .val = {  a8,  a9, a10, a11 } },
-                       s3 = { .val = { a12, a13, a14, a15 } };
-
-    // store to buffer
-    vst1q_u64_x4(buf + (34 * i +  0), s0);
-    vst1q_u64_x4(buf + (34 * i +  8), s1);
-    vst1q_u64_x4(buf + (34 * i + 16), s2);
-    vst1q_u64_x4(buf + (34 * i + 24), s3);
-    vst1q_u64(buf + (34 * i + 32), a16);
-  }
-
-  // sample polys from buffer
-  neon_sample_cbd3_polys(out, buf);
-}
-
-/**
- * @brief Generate coefficients for two elements of a CBD2 vector.
- *
- * @param[out] out Output polynomials.
- * @param[in] sp 32 byte seed, represented as 4 u64s.
- * @param[in] c0 Index of first element.
- * @param[in] c1 Index of second element.
- */
-static inline void neon_cbd2_polys(poly_t out[static 2], const uint64_t sp[static 4], const uint64_t c0, const uint64_t c1) {
-  // keccak state, row 0:
-  // - a0-a3 (cols 0-3): rho (both lanes)
-  // - a4 (col 4): element coords and shake pad (0x1f)
-  uint64x2_t a0 = { sp[0], sp[0] },
-             a1 = { sp[1], sp[1] },
-             a2 = { sp[2], sp[2] },
-             a3 = { sp[3], sp[3] },
-             a4 = { 0x1f00 | c0, 0x1f00 | c1 };
-
-  // keccak state, rows 1-4:
-  // - a16 (row 3, col 1): set shake256 rate high bit
-  // - all other cells: zero
-  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
-             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
-             a15 = ZZ, a16 = II, a17 = ZZ, a18 = ZZ, a19 = ZZ,
-             a20 = ZZ, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
-
-  // permute keccak states, then squeeze 17 u64s from each shake256
-  // context and write them interleaved to buffer (note: only need 128
-  // bytes for cbd2).
-  uint64_t buf[34]; // squeeze buffer
-  PERMUTE_STATES_NEON(); // permute states
-  SQUEEZE_CBD2S_NEON(buf); // squeeze to buffer
-  neon_sample_cbd2_polys(out, buf); // sample polys
-}
-
-/**
- * @brief Generate coefficients for element of a CBD2 vector.
- *
- * @param[out] out Output polynomial.
- * @param[in] sp 32 byte seed, represented as 4 u64s.
- * @param[in] c0 Element index.
- */
-static inline void neon_cbd2_poly(poly_t * const out, const uint64_t sp[static 4], const uint64_t c0) {
-  // keccak state, row 0:
-  // - a0-a3 (cols 0-3): rho (both lanes)
-  // - a4 (col 4): element coords and shake pad (0x1f)
-  uint64x2_t a0 = { sp[0], 0 },
-             a1 = { sp[1], 0 },
-             a2 = { sp[2], 0 },
-             a3 = { sp[3], 0 },
-             a4 = { 0x1f00 | c0, 0x0000 };
-
-  // keccak state, rows 1-4:
-  // - a16 (row 3, col 1): set shake256 rate high bit
-  // - all other cells: zero
-  uint64x2_t  a5 = ZZ,  a6 = ZZ,  a7 = ZZ,  a8 = ZZ,  a9 = ZZ,
-             a10 = ZZ, a11 = ZZ, a12 = ZZ, a13 = ZZ, a14 = ZZ,
-             a15 = ZZ, a16 = II, a17 = ZZ, a18 = ZZ, a19 = ZZ,
-             a20 = ZZ, a21 = ZZ, a22 = ZZ, a23 = ZZ, a24 = ZZ;
-
-  // permute keccak states, then squeeze 17 u64s from each shake256
-  // context and write them interleaved to buffer (note: only need 128
-  // bytes for cbd2).
-  //
-  // FIXME: this would be faster if we only squeezed a single lane
-  uint64_t buf[34]; // squeeze buffer
-  PERMUTE_STATES_NEON(); // permute states
-  SQUEEZE_CBD2S_NEON(buf); // squeeze to buffer
-  neon_sample_cbd2_poly(out, buf); // sample poly
-}
-
-/**
- * Sample polynomials for pke512_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[1,0], A[1,1], s[0],
- * s[1], e[0], and e[1].
- *
- * @note Neon implementation.
- *
- * @param[out] out 8 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke512_keygen_sample_neon(poly_t out[static 8], const uint8_t seed[static 64]) {
-  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
-
-  neon_ahat_polys(out + 0, ap, 0x0000, 0x0001); // A[0,0], A[0,1]
-  neon_ahat_polys(out + 2, ap, 0x0100, 0x0101); // A[1,0], A[1,1]
-  neon_cbd3_polys(out + 4, sp, 0x00, 0x01); // s[0], s[1]
-  neon_cbd3_polys(out + 6, sp, 0x02, 0x03); // e[0], e[1]
-}
-#endif /* BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Sample polynomials for pke512_keygen().
- *
- * @note Scalar implementation.
- *
- * The output polynomials are: A[0,0], A[0,1], A[1,0], A[1,1], s[0],
- * s[1], e[0], and e[1].
- *
- * @param[out] out 8 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke512_keygen_sample_scalar(poly_t out[static 8], const uint8_t seed[static 64]) {
-  const uint8_t * const sigma = seed + 32; // sigma
-
-  // sample A hat matrix polynomial coefficients from T_q (NTT)
-  for (size_t i = 0; i < PKE512_K; i++) {
-    for (size_t j = 0; j < PKE512_K; j++) {
-      poly_sample_ntt(out + (PKE512_K * i + j), seed, j, i);
-    }
-  }
-
-  // sample poly coefs for vectors s and e from CBD(3) (PKE512_ETA1)
-  // (note: sampling is done in R_q, not in NTT domain)
-  for (size_t i = 0; i < 2 * PKE512_K; i++) {
-    poly_sample_cbd3(out + 2 * PKE512_K + i, sigma, i);
-  }
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-/**
- * Sample polynomials for pke512_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[0,1], A[1,1], r[0],
- * r[1], e1[0], e1[1], and e2.
- *
- * @note AVX-512 implementation
- *
- * @param[out] out 9 output polynomials.
- * @param[in] a_seed Seed for A (32 bytes).
- * @param[in] s_seed Seed for r, e1, and e2 (32 bytes).
- */
-static inline void pke512_encrypt_sample_avx512(poly_t out[static 9], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
-  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, e2 seed
-
-  // lens:
-  // - indices 0-3: number of coefficients for Ahat entries
-  // - indices 4-5: number of bytes squeezed for elements of r (192
-  //   bytes each)
-  uint32_t lens[6] ALIGN(32) = { 0 }; // polynomial and cbd3 sample lengths
-
-  // bytes used for CBD3 calculation for elements of r (48 * 4 = 192
-  // bytes per polynomial)
-  uint8_t cbd3_buf[192*2] = { 0 };
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-3: rho for A
-  // - lanes 4-5: rho for r
-  __m512i a0 = _mm512_setr_epi64(ap[0], ap[0], ap[0], ap[0], sp[0], sp[0], 0, 0),
-          a1 = _mm512_setr_epi64(ap[1], ap[1], ap[1], ap[1], sp[1], sp[1], 0, 0),
-          a2 = _mm512_setr_epi64(ap[2], ap[2], ap[2], ap[2], sp[2], sp[2], 0, 0),
-          a3 = _mm512_setr_epi64(ap[3], ap[3], ap[3], ap[3], sp[3], sp[3], 0, 0);
-
-  // keccak state, row 0, column 4
-  // - lanes 0-3: A matrix element coordinates (i, j) and shake padding (0x1f)
-  // - lanes 4-5: r vector element index and shake padding (0x1f)
-  // - other lanes: unused
-  //
-  // NOTE: the A element coordinates are swapped here versus
-  // pke512_keygen(), because this code is sampling the transpose of A
-  // and pke512_keygen() is sampling A.
-  static const __m512i a4_vals = { 0x1f0000, 0x1f0100, 0x1f0001, 0x1f0101, 0x1f00, 0x1f01, 0, 0 };
-  __m512i a4 = a4_vals;
-
-  // keccak state, rows 1-2 (all zero)
-  __m512i a5 = _mm512_setzero_si512(),
-          a6 = _mm512_setzero_si512(),
-          a7 = _mm512_setzero_si512(),
-          a8 = _mm512_setzero_si512(),
-          a9 = _mm512_setzero_si512(),
-          a10 = _mm512_setzero_si512(),
-          a11 = _mm512_setzero_si512(),
-          a12 = _mm512_setzero_si512(),
-          a13 = _mm512_setzero_si512(),
-          a14 = _mm512_setzero_si512();
-
-  // keccak state, row 3
-  // - a16 (column 1), lanes 4-5: set high bit in last byte of shake256 rate
-  // - a16 (column 1), other lanes: all zero
-  // - other columns: all zero
-  __m512i a15 = _mm512_setzero_si512(),
-          a16 = _mm512_maskz_set1_epi64(0x30, 0x8000000000000000ULL),
-          a17 = _mm512_setzero_si512(),
-          a18 = _mm512_setzero_si512(),
-          a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - a20 (column 0), lanes 0-3: set high bit in last byte of shake128 rate
-  // - a20 (column 0), other lanes: all zero
-  // - other columns: all zero
-  __m512i a20 = _mm512_maskz_set1_epi64(0x0f, 0x8000000000000000ULL),
-          a21 = _mm512_setzero_si512(),
-          a22 = _mm512_setzero_si512(),
-          a23 = _mm512_setzero_si512(),
-          a24 = _mm512_setzero_si512();
-
-  // loop until all Ahat polynomials have 256 coefficients (lens[0..3] == 256)
-  // (we don't need to check lens[4..5] because they will both be full
-  // before lens[0..3])
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-3: permuted shake128 state for 4 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    // - lanes 4-5: permuted shake256 state for 2 r vector elements
-    //   (have 17*8 = 136 bytes, need 64*eta1 = 64*3 = 192 bytes per
-    //   poly, or 2 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t4: 64 bytes of SHAKE256 output for r[0]
-    //    - t5: 64 bytes of SHAKE256 output for r[1]
-    //
-    // 2. For t0-t3, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. For t4-t5, we do the following:
-    //    a. Append up to 48 bytes into the XOF byte stream buffer
-    //       (`cbd3_buf`).
-    //    b. Increment the buffer length.
-    //
-    // 4. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t3 as per step #2, and registers
-    //    t4-t5 as per step #3.
-    //
-    // 5. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t3 as per step #2.  Registers t4-t5
-    //    are processed as per step #3, *except* that only up to 40
-    //    bytes are sampled instead of 48 (the last 8 bytes are part of
-    //    the SHAKE256 rate).
-    //
-    // 6. Transpose the 4x4 matrix in registers a18-a21.  This organizes
-    //    the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[1, 1]
-    //
-    // 7. For t0-t3, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8_TO_6(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
-
-      // sample r bytes
-      SAMPLE_CBD3_BYTES(t4, 4, 48); // r[0]
-      SAMPLE_CBD3_BYTES(t5, 5, 48); // r[1]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8_TO_6(a6, a7, a8, a9, a10, a11, a13, a13);
-
-      // sample Ahat coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
-
-      // sample r bytes
-      SAMPLE_CBD3_BYTES(t4, 4, 48); // r[0]
-      SAMPLE_CBD3_BYTES(t5, 5, 48); // r[1]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8_TO_6(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample Ahat coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 1]
-
-      // sample r bytes
-      SAMPLE_CBD3_BYTES(t4, 4, 40); // r[0]
-      SAMPLE_CBD3_BYTES(t5, 5, 40); // r[1]
-    }
-
-    // a18-a21 transpose
-    {
-      // note: 4x transpose step 0 and step 1 are 8x transpose step 1
-      // and step 2, respectively
-
-      // transpose step 0
-      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_8_TO_6_S1_A_IDS, a20),
-                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_8_TO_6_S1_A_IDS, a21),
-                    s0_t2 = _mm512_permutex2var_epi64(a20, TRANSPOSE_8_TO_6_S1_B_IDS, a18),
-                    s0_t3 = _mm512_permutex2var_epi64(a21, TRANSPOSE_8_TO_6_S1_B_IDS, a19);
-
-      // transpose step 1
-      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_6_S2_A_IDS, s0_t1),
-                    t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_8_TO_6_S2_B_IDS, s0_t0),
-                    t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_8_TO_6_S2_A_IDS, s0_t3),
-                    t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_8_TO_6_S2_B_IDS, s0_t2);
-
-      // sample Ahat coefficients
-      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_16_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_16_COEFS(t2, 2); // Ahat[0, 1]
-      SAMPLE_16_COEFS(t3, 3); // Ahat[1, 1]
-    }
-  } while (_mm_cmpneq_epi32_mask(_mm_load_epi32(lens), K256x4));
-
-  // at this point cbd3_buf has 192 bytes for each element of r.
-  // sample 24 bytes at a time, expand to 32 coefficients, and write
-  // coefficients to output polynomials
-
-  // loop over 2 elements in vector `r`
-  for (size_t i = 0; i < 2; i++) {
-    for (size_t j = 0; j < 8; j++) {
-      const __m512i b = _mm512_maskz_loadu_epi8(0xffffff, cbd3_buf + 192 * i + 24 * j),
-                    // count low bits
-                    lo_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_LO_IDS, b), CBD3_LO_MASKS)),
-                    // count high bits
-                    hi_sums = _mm512_popcnt_epi8(_mm512_and_si512(_mm512_permutexvar_epi8(CBD3_HI_IDS, b), CBD3_HI_MASKS)),
-                    sums = _mm512_add_epi8(lo_sums, hi_sums),
-                    x = _mm512_and_si512(sums, CBD3_X_MASK),
-                    y = _mm512_srli_epi16(sums, 8);
-
-      // vals = (x + (Q - y)) % Q
-      __m512i vals = _mm512_add_epi16(x, _mm512_sub_epi16(Q16, y));
-      vals = _mm512_mask_sub_epi16(vals, _mm512_cmpge_epu16_mask(vals, Q16), vals, Q16);
-
-      // store coefficients
-      _mm512_storeu_epi16(out[4 + i].cs + 32 * j, vals);
-    }
-  }
-
-  // at this point we have the coefficients for A and r, but we still
-  // need them for e1 and e2. so we init the keccak state for 3 shake256
-  // prf instances, do a single keccak permutation, then squeeze 128
-  // bytes and sample them using CBD2 to generate the coefficients for
-  // e1[0], e1[1], and e2
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-2: rho for e1 and e2
-  // - other lanes: unused
-  a0 = _mm512_setr_epi64(sp[0], sp[0], sp[0], 0, 0, 0, 0, 0);
-  a1 = _mm512_setr_epi64(sp[1], sp[1], sp[1], 0, 0, 0, 0, 0);
-  a2 = _mm512_setr_epi64(sp[2], sp[2], sp[2], 0, 0, 0, 0, 0);
-  a3 = _mm512_setr_epi64(sp[3], sp[3], sp[3], 0, 0, 0, 0, 0);
-
-  // keccak state, row 0, column 4
-  // - lanes 0-2: e1/e2 element index and shake padding (0x1f)
-  // - other lanes: unused
-  static const __m512i e_a4_vals = { 0x1f02, 0x1f03, 0x1f04, 0, 0, 0, 0, 0 };
-  a4 = e_a4_vals;
-
-  // keccak state, rows 1-2: all zero
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-
-  // keccak state, row 3
-  // - a16 (column 1), lanes 0-2: set high bit in last byte of shake256 rate
-  // - a16 (column 1), other lanes: unused
-  // - other columns: all zero
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_maskz_set1_epi64(0x07, 0x8000000000000000ULL);
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4: all zero
-  a20 = _mm512_setzero_si512();
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  PERMUTE_STATES_AVX512();
-
-  // At this point the keccak permutation is finished and we have the
-  // permuted shake256 state for the polynomials e1[0], e1[1], and e2 in
-  // lanes 0-2 of 25 avx512 registers (a0-a24).
-  //
-  // We proceed as follows:
-  //
-  // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-  //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-  //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-  //
-  //    This organizes the registers as follows:
-  //    - t0: 64 bytes of SHAKE256 output for e1[0]
-  //    - t1: 64 bytes of SHAKE256 output for e1[1]
-  //    - t2: 64 bytes of SHAKE256 output for e2
-  //
-  // 2. Expand the first 16 bytes in t0-t2 into 32 16-bit unsigned
-  //    integers representing coefficients for e1[0], e1[1], and e2 by
-  //    dividing each byte into a pair of nibbles and then sampling each
-  //    nibble with CBD2.
-  //
-  // 3. Expand the second 16 bytes in t0-t2 into 32 polynomial
-  //    coefficients as per step #2.
-  //
-  // 3. Expand the third 16 bytes in t0-t2 into 32 polynomial
-  //    coefficients as per step #2.
-  //
-  // 4. Expand the last 16 bytes in t0-t2 into 32 polynomial
-  //    coefficients as per step #2.
-  //
-  // 5. Transpose the 8x8 matrix in registers a8-a15 as per step #1,
-  //    then process registers t0-t2 as per steps #2-#4.
-  //
-  // At this point we have 256 coefficients for e1[0], e1[1], and e2, so
-  // we are done.
-
-  {
-    // a0-a7 transpose
-    TRANSPOSE_8_TO_3(a0, a1, a2, a3, a4, a5, a6, a7);
-
-    // loop over 4 16-byte chunks in t0-t2 and expand into 32 coefficients
-    // of e1[0], e1[1], and e2 polynomials
-    __m512i cbd2_ids = CBD2_ID_VALS;
-    for (size_t i = 0; i < 4; i++) {
-      // sample coefficients
-      SAMPLE_32_CBD2_COEFS(t0, 6, 32 * i); // e1[0]
-      SAMPLE_32_CBD2_COEFS(t1, 7, 32 * i); // e1[1]
-      SAMPLE_32_CBD2_COEFS(t2, 8, 32 * i); // e2
-
-      // increment byte ids
-      cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-    }
-  }
-
-  {
-    // a8-a15 transpose
-    TRANSPOSE_8_TO_3(a8, a9, a10, a11, a12, a13, a14, a15);
-
-    // loop over 4 16-byte chunks in t0-t2 and expand into 32 coefficients
-    // of e1[0], e1[1], and e2 polynomials
-    __m512i cbd2_ids = CBD2_ID_VALS;
-    for (size_t i = 0; i < 4; i++) {
-      // sample coefficients
-      SAMPLE_32_CBD2_COEFS(t0, 6, 128 + 32 * i); // e1[0]
-      SAMPLE_32_CBD2_COEFS(t1, 7, 128 + 32 * i); // e1[1]
-      SAMPLE_32_CBD2_COEFS(t2, 8, 128 + 32 * i); // e2
-
-      // increment byte ids
-      cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-    }
-  }
-}
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_NEON
-/**
- * Sample polynomials for pke512_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[0,1], A[1,1], r[0],
- * r[1], e1[0], e1[1], and e2.
- *
- * @note Neon implementation
- *
- * @param[out] out 9 output polynomials.
- * @param[in] a_seed Seed for A (32 bytes).
- * @param[in] s_seed Seed for r, e1, and e2 (32 bytes).
- */
-static inline void pke512_encrypt_sample_neon(poly_t out[static 9], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
-  const uint64_t * const ap = (uint64_t*) a_seed; // A hat seed
-  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, e2 seed
-
-  neon_ahat_polys(out + 0, ap, 0x0000, 0x0100); // A[0,0], A[1,0]
-  neon_ahat_polys(out + 2, ap, 0x0001, 0x0101); // A[0,1], A[1,1]
-  neon_cbd3_polys(out + 4, sp, 0x00, 0x01); // r[0], r[1]
-  neon_cbd2_polys(out + 6, sp, 0x02, 0x03); // e1[0], e1[1]
-  neon_cbd2_poly(out + 8, sp, 0x04); // e2
-}
-#endif /* BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Sample polynomials for pke512_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[0,1], A[1,1], r[0],
- * r[1], e1[0], e1[1], and e2.
- *
- * @note Scalar implementation
- *
- * @param[out] out 9 output polynomials.
- * @param[in] a_seed Seed for A (32 bytes).
- * @param[in] s_seed Seed for r, e1, and e2 (32 bytes).
- */
-static inline void pke512_encrypt_sample_scalar(poly_t out[static 9], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
-  // sample A hat transposed matrix polynomial coefficients from T_q (NTT)
-  // (note: i and j are positions are swapped vs `pke512_keygen()`)
-  for (size_t i = 0; i < PKE512_K; i++) {
-    for (size_t j = 0; j < PKE512_K; j++) {
-      poly_sample_ntt(out + (PKE512_K * i + j), a_seed, i, j);
-    }
-  }
-
-  // sample r vector from CBD(3) (PKE512_ETA1)
-  for (size_t i = 0; i < PKE512_K; i++) {
-    poly_sample_cbd3(out + 4 + i, s_seed, i);
-  }
-
-  // sample e1 vector from CBD(2) (PKE512_ETA2)
-  for (size_t i = 0; i < PKE512_K; i++) {
-    poly_sample_cbd2(out + 6 + i, s_seed, PKE512_K + i);
-  }
-
-  // sample e2 polynomial from CBD(2) (PKE512_ETA2)
-  poly_sample_cbd2(out + 8, s_seed, 2 * PKE512_K);
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-#define pke512_keygen_sample pke512_keygen_sample_avx512
-#define pke512_encrypt_sample pke512_encrypt_sample_avx512
-#elif BACKEND == BACKEND_NEON
-#define pke512_keygen_sample pke512_keygen_sample_neon
-#define pke512_encrypt_sample pke512_encrypt_sample_neon
-#elif BACKEND == BACKEND_SCALAR
-#define pke512_keygen_sample pke512_keygen_sample_scalar
-#define pke512_encrypt_sample pke512_encrypt_sample_scalar
-#else
-#error "unkown backend"
-#endif /* BACKEND */
-
-/**
- * Generate PKE512 encryption and decryption key from given 32-byte
- * seed.
- *
- * @param[out] ek PKE512 encryption key (800 bytes).
- * @param[out] dk PKE512 decryption key (768 bytes).
- * @param[in] seed Random seed (32 bytes).
- */
-static inline void pke512_keygen(uint8_t ek[static PKE512_EK_SIZE], uint8_t dk[static PKE512_DK_SIZE], const uint8_t seed[static 32]) {
-  // get sha3-512 hash of seed, get rho and sigma (each 32 bytes)
-  uint8_t rs[64] = { 0 }; // rho = rs[0,31], sigma = rs[32,63]
-  sha3_512(seed, 32, rs); // rho, sigma = sha3-512(seed)
-
-  // sample A, s, and e polynomials
-  poly_t ps[PKE512_K * PKE512_K + 2 * PKE512_K] = { 0 }; // A, s, e
-  pke512_keygen_sample(ps, rs); // sample
-  poly_t *a = ps, *se = ps + PKE512_K * PKE512_K;
-
-  // apply NTT to polynomial coefficients (R_q -> T_q)
-  vec2_ntt(se);
-  vec2_ntt(se + PKE512_K);
-
-  // t = As + e (NTT)
-  poly_t t[PKE512_K] = { 0 }, *s = se, *e = se + PKE512_K;
-  mat2_mul(t, a, s); // t = As
-  vec2_add(t, e); // t += e
-
-  // encode t (NTT)
-  vec2_encode(ek, t);
-
-  // ek <- t || rho
-  memcpy(ek + (PKE512_K * 384), rs, 32);
-
-  // dk <- s (NTT)
-  vec2_encode(dk, se);
-}
-
-/**
- * Encrypt 32-byte message `m` using PKE512 encryption key `ek` and
- * randomness `enc_rand` and store the PKE512 ciphertext in output
- * buffer `ct`.
- *
- * @param[out] ct Output PKE512 ciphertext buffer (768 bytes).
- * @param[in] ek PKE512 encryption key (800 bytes).
- * @param[in] m Plaintext message (32 bytes).
- * @param[in] enc_rand Randomness seed (32 bytes).
- */
-static inline void pke512_encrypt(uint8_t ct[static PKE512_CT_SIZE], const uint8_t ek[static PKE512_EK_SIZE], const uint8_t m[static 32], const uint8_t enc_rand[static 32]) {
-  // decode t from first 768 bytes of ek
-  poly_t t[PKE512_K] = { 0 };
-  vec2_decode(t, ek);
-
-  // read rho from ek (32 bytes)
-  const uint8_t * const rho = ek + 384 * PKE512_K;
-
-  // sample A, r, e1, and e2
-  poly_t ps[9] = { 0 };
-  pke512_encrypt_sample(ps, rho, enc_rand);
-  poly_t *a = ps, *r = ps + 4, *e1 = ps + 6, *e2 = ps + 8;
-
-  vec2_ntt(r); // r = NTT(r)
-
-  poly_t u[PKE512_K] = { 0 };
-  mat2_mul(u, a, r);  // u = (A*r)
-  vec2_inv_ntt(u);    // u = InvNTT(u)
-  vec2_add(u, e1);    // u += e1
-
-  // encode u, append to ct
-  vec2_encode_10bit(ct, u);
-
-  // decode message `m` into polynomial `mu`
-  //
-  // each bit of message `m` set to 1 is decoded as a coefficient of
-  // value 1665 in polynomial `mu`, and each bit set to 0 is decoded as
-  // a coefficient of value 0 in polynomial `mu`.
-  poly_t mu = { 0 };
-  poly_decode_1bit(&mu, m);
-
-  poly_t v = { 0 };
-  vec2_dot(&v, t, r);     // v = t * r
-  poly_inv_ntt(&v);       // v = InvNTT(v)
-  poly_add2(&v, e2, &mu); // v += e2 + mu
-
-  // encode v, append to ct
-  poly_encode_4bit(ct + 32 * PKE512_DU * PKE512_K, &v);
-}
-
-/**
- * Decrypt 32-byte plaintext message from PKE512 ciphertext `ct` using
- * PKE512 decryption key `dk` and store the result in output buffer `m`.
- *
- * @param[out] m Output plaintext message (32 bytes).
- * @param[in] dk PKE512 decryption key (768 bytes).
- * @param[in] ct Input ciphertext buffer (768 bytes).
- */
-static inline void pke512_decrypt(uint8_t m[static 32], const uint8_t dk[static PKE512_DK_SIZE], const uint8_t ct[PKE512_CT_SIZE]) {
-  // decode u
-  poly_t u[PKE512_K] = { 0 };
-  vec2_decode_10bit(u, ct);
-
-  // decode v
-  poly_t v = { 0 };
-  poly_decode_4bit(&v, ct + 32 * PKE512_DU * PKE512_K);
-
-  // decode ŝ
-  poly_t s[PKE512_K] = { 0 };
-  vec2_decode(s, dk);
-
-  poly_t su = { 0 }; // su = s * u
-  vec2_ntt(u); // u = NTT(u)
-  vec2_dot(&su, s, u); // su = s * u
-  poly_inv_ntt(&su); // su = InvNTT(su)
-
-  poly_t w = v;
-  poly_sub(&w, &su); // w -= su
-
-  // encode w coefficients as 1-bit, write to output
-  poly_encode_1bit(m, &w);
-}
-
-/**
- * @brief Generate KEM512 encapsulation key `ek` and decapsulation key
- * `dk` from 64 byte random seed `seed`.
- * @ingroup kem512
- *
- * @warning `seed` **must** be 64 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 128 bits of strength.
- *
- * @param[out] ek KEM512 encapsulation key (800 bytes).
- * @param[out] dk KEM512 decapsulation key (1632 bytes).
- * @param[in] seed Random seed (64 bytes).
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem512_keygen(uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]) {
-  const uint8_t * const z = seed; // random implicit rejection seed (32 bytes)
-  const uint8_t * const d = seed + 32; // pke512_keygen() random seed (32 bytes)
-
-  // generate ek and dk
-  pke512_keygen(ek, dk, d);
-
-  // KEM: append ek, sha3-256(ek), and z to dk
-  memcpy(dk + PKE512_DK_SIZE, ek, PKE512_EK_SIZE);
-  sha3_256(ek, PKE512_EK_SIZE, dk + PKE512_DK_SIZE + PKE512_EK_SIZE);
-  memcpy(dk + PKE512_DK_SIZE + PKE512_EK_SIZE + 32, z, 32);
-}
-
-/**
- * @brief Generate KEM512 shared key `key` and ciphertext `ct` from given
- * encapsulation key `ek` and randomness `seed`.
- * @ingroup kem512
- *
- * @warning `seed` **must** be 32 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 128 bits of strength.
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (768 bytes).
- * @param[in] ek KEM512 encapsulation key (800 bytes).
- * @param[in] seed Random seed (32 bytes).
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem512_encaps(uint8_t k[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]) {
-  uint8_t data[64] = { 0 };
-  memcpy(data, seed, 32); // append seed
-  sha3_256(ek, PKE512_EK_SIZE, data + 32); // append sha3-256(ek)
-
-  uint8_t kr[64] = { 0 };
-  sha3_512(data, 64, kr); // (K, r) <- sha3-512(data)
-  const uint8_t * const r = kr + 32; // get r
-
-  memcpy(k, kr, 32); // copy shared key to output
-  pke512_encrypt(ct, ek, seed, r); // ct <- pke.encrypt(ek, seed, r)
-}
-
-/**
- * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM512
- * decapsulation key `dk` with implicit rejection.
- * @ingroup kem512
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (768 bytes).
- * @param[in] dk KEM512 decapsulation key (1632 bytes).
- */
-void fips203ipd_kem512_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE]) {
-  const uint8_t * const dk_pke = dk;
-  const uint8_t * const ek_pke = dk + 384 * PKE512_K;
-  const uint8_t * const h = dk + (2 * 384 * PKE512_K + 32);
-  const uint8_t * const z = dk + (2 * 384 * PKE512_K + 64);
-
-  uint8_t mh[64] = { 0 };
-  pke512_decrypt(mh, dk_pke, ct); // decrypt ct into mh
-  memcpy(mh + 32, h, 32); // copy hash
-
-  uint8_t kr[64] = { 0 };
-  sha3_512(mh, 64, kr); // (K', r') <- sha3-512(m || r)
-
-  // zc = z || ct
-  uint8_t zc[32 + PKE512_CT_SIZE] = { 0 };
-  memcpy(zc, z, 32);
-  memcpy(zc + 32, ct, PKE512_CT_SIZE);
-
-  // rk: generate implicit rejection key from z and ciphertext
-  uint8_t k_rej[32] = { 0 };
-  shake256(zc, sizeof(zc), k_rej, sizeof(k_rej)); // K_rej = J(z||c)
-
-  // re-encrypt `k` with PKE512 key `ek_pke`
-  // (ct2 is used for implicit rejection check below)
-  uint8_t ct2[PKE512_CT_SIZE] = { 0 };
-  pke512_encrypt(ct2, ek_pke, mh, kr + 32); // ct2 <- pke.encrypt(ek, m', r')
-
-  // compare ct and ct2 using constant-time comparison.  if they match,
-  // then copy decapsulated key to output buffer `key`.  if `ct` and `ct2`
-  // don't match, then copy the implicit rejection key `k_rej` to the
-  // output buffer `key`.
-  ct_copy(key, ct_diff(ct, ct2, PKE512_CT_SIZE), kr, k_rej);
-}
-
-#if BACKEND == BACKEND_AVX512
-/**
- * Sample polynomials for pke768_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[0,2], A[1,0], A[1,1],
- * A[1,2], A[2,0], A[2,1], A[2,2], s[0], s[1], s[2], e[0], e[1], and
- * e[2].
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out 15 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke768_keygen_sample_avx512(poly_t out[static 15], const uint8_t seed[static 64]) {
-  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
-
-  // lens:
-  // - indices 0-8: number of coefficients for Ahat elements
-  // - indices 9-14: number of bytes squeezed for s and e elements (192
-  //   bytes per entry)
-  uint32_t lens[15] ALIGN(32) = { 0 }; // polynomial lengths
-
-  // keccak state:
-  //   -------------------------------------
-  //   | Row |          Registers          |
-  //   |-----|-----------------------------|
-  //   |  2  | a13 | a14 | a10 | a11 | a12 |
-  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
-  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
-  //   |  4  | a23 | a24 | a20 | a21 | a22 |
-  //   |  3  | a18 | a19 | a15 | a16 | a17 |
-  //   -------------------------------------
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for a
-  __m512i a0 = _mm512_set1_epi64(ap[0]),
-          a1 = _mm512_set1_epi64(ap[1]),
-          a2 = _mm512_set1_epi64(ap[2]),
-          a3 = _mm512_set1_epi64(ap[3]);
-
-  // keccak state, row 0, column 4
-  // lanes 0-7: A matrix element coordinates (j, i) and shake padding (0x1f)
-  //
-  // NOTE: the A element coordinates are swapped here versus
-  // pke768_{encrypt,decrypt}(), because this code is sampling A and
-  // pke768_{encrypt,decrypt}() are sampling the transpose of A.
-  __m512i a4 = { 0x1f0000, 0x1f0001, 0x1f0002, 0x1f0100, 0x1f0101, 0x1f0102, 0x1f0200, 0x1f0201 };
-
-  // keccak state, rows 1-3 (all zero)
-  __m512i a5 = _mm512_setzero_si512(),
-          a6 = _mm512_setzero_si512(),
-          a7 = _mm512_setzero_si512(),
-          a8 = _mm512_setzero_si512(),
-          a9 = _mm512_setzero_si512(),
-          a10 = _mm512_setzero_si512(),
-          a11 = _mm512_setzero_si512(),
-          a12 = _mm512_setzero_si512(),
-          a13 = _mm512_setzero_si512(),
-          a14 = _mm512_setzero_si512(),
-          a15 = _mm512_setzero_si512(),
-          a16 = _mm512_setzero_si512(),
-          a17 = _mm512_setzero_si512(),
-          a18 = _mm512_setzero_si512(),
-          a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - a20 (column 0): set high bit in last byte of shake128 rate
-  // - all other columns: all zero
-  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
-          a21 = _mm512_setzero_si512(),
-          a22 = _mm512_setzero_si512(),
-          a23 = _mm512_setzero_si512(),
-          a24 = _mm512_setzero_si512();
-
-  // loop until the first 8 Ahat polynomials have 256 coefficients
-  // (e.g., lens[0..7] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t4: 64 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 2]
-    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t7: 64 bytes of SHAKE128 output for Ahat[2, 1]
-    //
-    // 2. For t0-t7, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 5. (FIXME: explain this better) Transpose the 4x8 matrix in
-    //    registers a18-a21.  This organizes the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t4: 24 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 2]
-    //    - t6: 24 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t7: 24 bytes of SHAKE128 output for Ahat[2, 1]
-    //
-    // 6. For t0-t7, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[2, 1]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[2, 1]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[2, 1]
-    }
-
-    // a18-a21 transpose
-    {
-      // before:
-      //   a0 = a00.0, a01.0, a02.0, a10.0, a11.0, a12.0, a20.0, a21.0
-      //   a1 = a00.1, a01.1, a02.1, a10.1, a11.1, a12.1, a20.1, a21.1
-      //   a2 = a00.2, a01.2, a02.2, a10.2, a11.2, a12.2, a20.2, a21.2
-      //   a3 = a00.3, a01.3, a02.3, a10.3, a11.3, a12.3, a20.3, a21.3
-      //
-      // after:
-      //   t0 = a00.0, a00.1, a00.2, a00.3
-      //   t1 = a01.0, a01.1, a01.2, a01.3
-      //   t2 = a02.0, a02.1, a02.2, a02.3
-      //   t3 = a10.0, a10.1, a10.2, a10.3
-      //   t4 = a11.0, a11.1, a11.2, a11.3
-      //   t5 = a12.0, a12.1, a12.2, a12.3
-      //   t6 = a20.0, a20.1, a20.2, a20.3
-      //   t7 = a21.0, a21.1, a21.2, a21.3
-
-      // transpose step 0
-      const __m512i s0_t0 = a18,
-                    s0_t1 = a19,
-                    s0_t2 = a20,
-                    s0_t3 = a21,
-                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
-                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
-                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
-                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
-
-      // transpose step 1
-      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
-                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
-                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
-                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
-                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
-                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
-                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
-                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
-
-      // transpose step 2
-      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
-                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
-                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
-                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
-                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
-                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
-                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
-                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
-
-      // sample/store polynomial coefficients
-      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_16_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_16_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_16_COEFS(t3, 3); // Ahat[1, 0]
-      SAMPLE_16_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_16_COEFS(t5, 5); // Ahat[1, 2]
-      SAMPLE_16_COEFS(t6, 6); // Ahat[2, 0]
-      SAMPLE_16_COEFS(t7, 7); // Ahat[2, 1]
-    }
-  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
-
-  // set up another keccak permutation for the following items:
-  // - lane 0: A[2, 2]
-  // - lanes 1-3: s[0]-s[2] (cbd2)
-  // - lanes 4-6: e[0]-e[2] (cbd2)
-  // - lane 7: unused
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for a
-  a0 = _mm512_setr_epi64(ap[0], sp[0], sp[0], sp[0], sp[0], sp[0], sp[0], 0);
-  a1 = _mm512_setr_epi64(ap[1], sp[1], sp[1], sp[1], sp[1], sp[1], sp[1], 0);
-  a2 = _mm512_setr_epi64(ap[2], sp[2], sp[2], sp[2], sp[2], sp[2], sp[2], 0);
-  a3 = _mm512_setr_epi64(ap[3], sp[3], sp[3], sp[3], sp[3], sp[3], sp[3], 0);
-
-  // keccak state, row 0, column 4
-  // - lane 0: A[2, 2] element coordinates (j, i) and shake padding (0x1f)
-  // - lanes 1-3: s[0]-s[2] element index and shake padding (0x1f)
-  // - lanes 4-6: e[0]-e[2] element index and shake padding (0x1f)
-  // - lane 7: unused
-  static const __m512i ase_a4_vals = { 0x1f0202, 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0 };
-  a4 = ase_a4_vals;
-
-  // keccak state, rows 1-2 (all zero)
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-
-  // keccak state, rows 3:
-  // - column 1 (a16), lane 0: all zero
-  // - column 1 (a16), lanes 1-6: set high bit of last byte of shake256 rate
-  // - column 1 (a16), lane 7: unused (zero)
-  // - other columns: all zero
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_maskz_set1_epi64(0x7e, 0x8000000000000000ULL);
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - column 0 (a20), lane 0: set high bit in last byte of shake128 rate
-  // - column 0 (a20), lanes 1-7: all zero
-  // - all other columns: all zero
-  a20 = _mm512_maskz_set1_epi64(1, 0x8000000000000000ULL);
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  // loop until final Ahat polynomial has 256 coefficients
-  // (e.g., lens[8] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a24):
-    //
-    // - lane 0: permuted shake128 state for A[2, 2] elements.
-    // - lanes 1-3: permuted shake256 state for s[0]-s[2].
-    // - lanes 4-6: permuted shake256 state for e[0]-e[2].
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8_TO_7(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
-
-      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
-      // of s[0], s[1], s[2], e[0], e[1], and e[2] polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 3; i++) {
-        // sample coefficients
-        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 32 * i); // s[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 32 * i); // s[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 32 * i); // s[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 32 * i); // e[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 32 * i); // e[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 32 * i); // e[2]
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8_TO_7(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
-
-      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
-      // of s[0], s[1], s[2], e[0], e[1], and e[2] polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 3; i++) {
-        // sample coefficients
-        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 96 + 32 * i); // s[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 96 + 32 * i); // s[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 96 + 32 * i); // s[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 96 + 32 * i); // e[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 96 + 32 * i); // e[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 96 + 32 * i); // e[2]
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8_TO_7(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
-
-      // loop over 2 16-byte chunks in t1-t6 and expand into 32 coefficients
-      // of s[0], s[1], s[2], e[0], e[1], and e[2] polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 2; i++) {
-        // sample coefficients
-        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 192 + 32 * i); // s[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 192 + 32 * i); // s[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 192 + 32 * i); // s[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 192 + 32 * i); // e[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 192 + 32 * i); // e[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 192 + 32 * i); // e[2]
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    // a18-a21 transpose
-    {
-      // transpose step 0
-      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_8_TO_7_S1_A_IDS, a20),
-                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_8_TO_7_S1_A_IDS, a21);
-
-      // transpose step 1
-      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_8_TO_7_S2_A_IDS, s0_t1);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_16_COEFS(t0, 8); // Ahat[2, 2]
-    }
-  } while (lens[8] != 256);
-}
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_NEON
-/**
- * Sample polynomials for pke768_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[0,2], A[1,0], A[1,1],
- * A[1,2], A[2,0], A[2,1], A[2,2], s[0], s[1], s[2], e[0], e[1], and
- * e[2].
- *
- * @note Neon implementation.
- *
- * @param[out] out 15 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke768_keygen_sample_neon(poly_t out[static 15], const uint8_t seed[static 64]) {
-  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
-
-  neon_ahat_polys(out + 0, ap, 0x0000, 0x0001); // A[0,0], A[0,1]
-  neon_ahat_polys(out + 2, ap, 0x0002, 0x0100); // A[0,2], A[1,0]
-  neon_ahat_polys(out + 4, ap, 0x0101, 0x0102); // A[1,1], A[1,2]
-  neon_ahat_polys(out + 6, ap, 0x0200, 0x0201); // A[2,0], A[2,1]
-  neon_ahat_poly(out + 8, ap, 0x0202); // A[2,2]
-  neon_cbd2_polys(out + 9, sp, 0x00, 0x01); // s[0], s[1]
-  neon_cbd2_polys(out + 11, sp, 0x02, 0x03); // s[2], e[0]
-  neon_cbd2_polys(out + 13, sp, 0x04, 0x05); // e[1], e[2]
-}
-#endif /* BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Sample polynomials for pke768_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[0,2], A[1,0], A[1,1],
- * A[1,2], A[2,0], A[2,1], A[2,2], s[0], s[1], s[2], e[0], e[1], and
- * e[2].
- *
- * @note Scalar implementation.
- *
- * @param[out] out 15 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke768_keygen_sample_scalar(poly_t out[static 15], const uint8_t seed[static 64]) {
-  const uint8_t * const sigma = seed + 32; // sigma
-
-  for (size_t i = 0; i < PKE768_K; i++) {
-    for (size_t j = 0; j < PKE768_K; j++) {
-      poly_sample_ntt(out + (PKE768_K * i + j), seed, j, i);
-    }
-  }
-
-  // sample poly coefs for vectors s and e from CBD(2) (PKE768_ETA1)
-  // (note: sampling is done in R_q, not in NTT domain)
-  for (size_t i = 0; i < 2 * PKE768_K; i++) {
-    poly_sample_cbd2(out + 9 + i, sigma, i);
-  }
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-/**
- * Sample polynomials for pke768_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[2,0], A[0,1], A[1,1],
- * A[2,1], A[0,2], A[1,2], A[2,2], r[0], r[1], r[2], e1[0], e1[1],
- * e1[2], and e2.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out 16 output polynomials.
- * @param[in] a_seed A seed (32 bytes).
- * @param[in] s_seed r, e1, and e2 seed (32 bytes).
- */
-static inline void pke768_encrypt_sample_avx512(poly_t out[static 16], const uint8_t a_seed[32], const uint8_t s_seed[static 32]) {
-  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, and e1 seed
-
-  // lens:
-  // - indices 0-8: number of coefficients for Ahat elements
-  // - indices 9-16: number of coefficients for r, e1, and e2
-  uint32_t lens[16] ALIGN(32) = { 0 }; // polynomial lengths
-
-  // keccak state:
-  //   -------------------------------------
-  //   | Row |          Registers          |
-  //   |-----|-----------------------------|
-  //   |  2  | a13 | a14 | a10 | a11 | a12 |
-  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
-  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
-  //   |  4  | a23 | a24 | a20 | a21 | a22 |
-  //   |  3  | a18 | a19 | a15 | a16 | a17 |
-  //   -------------------------------------
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for a
-  __m512i a0 = _mm512_set1_epi64(ap[0]),
-          a1 = _mm512_set1_epi64(ap[1]),
-          a2 = _mm512_set1_epi64(ap[2]),
-          a3 = _mm512_set1_epi64(ap[3]);
-
-  // keccak state, row 0, column 4
-  // lanes 0-7: A matrix element coordinates (j, i) and shake padding (0x1f)
-  //
-  // NOTE: the A element coordinates are swapped because this code is
-  // sampling the transpose of A.
-  __m512i a4 = { 0x1f0000, 0x1f0100, 0x1f0200, 0x1f0001, 0x1f0101, 0x1f0201, 0x1f0002, 0x1f0102 };
-
-  // keccak state, rows 1-3 (all zero)
-  __m512i a5 = _mm512_setzero_si512(),
-          a6 = _mm512_setzero_si512(),
-          a7 = _mm512_setzero_si512(),
-          a8 = _mm512_setzero_si512(),
-          a9 = _mm512_setzero_si512(),
-          a10 = _mm512_setzero_si512(),
-          a11 = _mm512_setzero_si512(),
-          a12 = _mm512_setzero_si512(),
-          a13 = _mm512_setzero_si512(),
-          a14 = _mm512_setzero_si512(),
-          a15 = _mm512_setzero_si512(),
-          a16 = _mm512_setzero_si512(),
-          a17 = _mm512_setzero_si512(),
-          a18 = _mm512_setzero_si512(),
-          a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - a20 (column 0): set high bit in last byte of shake128 rate
-  // - all other columns: all zero
-  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
-          a21 = _mm512_setzero_si512(),
-          a22 = _mm512_setzero_si512(),
-          a23 = _mm512_setzero_si512(),
-          a24 = _mm512_setzero_si512();
-
-  // loop until the first 8 Ahat polynomials have 256 coefficients
-  // (e.g., lens[0..7] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t4: 64 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 2]
-    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t7: 64 bytes of SHAKE128 output for Ahat[2, 1]
-    //
-    // 2. For t0-t7, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
-    //    registers a18-a21.  This organizes the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t4: 24 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t5: 24 bytes of SHAKE128 output for Ahat[2, 1]
-    //    - t6: 24 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t7: 24 bytes of SHAKE128 output for Ahat[1, 2]
-    //
-    // 6. For t0-t7, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 2]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 2]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 2]
-    }
-
-    // a18-a21 transpose
-    {
-      // transpose step 0
-      const __m512i s0_t0 = a18,
-                    s0_t1 = a19,
-                    s0_t2 = a20,
-                    s0_t3 = a21,
-                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
-                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
-                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
-                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
-
-      // transpose step 1
-      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
-                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
-                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
-                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
-                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
-                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
-                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
-                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
-
-      // transpose step 2
-      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
-                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
-                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
-                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
-                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
-                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
-                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
-                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
-
-      // sample/store polynomial coefficients
-      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_16_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_16_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_16_COEFS(t3, 3); // Ahat[0, 1]
-      SAMPLE_16_COEFS(t4, 4); // Ahat[1, 1]
-      SAMPLE_16_COEFS(t5, 5); // Ahat[2, 1]
-      SAMPLE_16_COEFS(t6, 6); // Ahat[0, 2]
-      SAMPLE_16_COEFS(t7, 7); // Ahat[1, 2]
-    }
-  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
-
-  // set up another keccak permutation for the following items:
-  // - lane 0: A[2, 2]
-  // - lanes 1-3: r[0]-r[2] (cbd2)
-  // - lanes 4-6: e1[0]-e1[2] (cbd2)
-  // - lane 7: e2 (cbd2)
-
-  // keccak state, row 0, columns 0-3
-  // - lane 0: rho for Ahat[2, 2]
-  // - lanes 1-7: rho for r, e1, and e2
-  a0 = _mm512_setr_epi64(ap[0], sp[0], sp[0], sp[0], sp[0], sp[0], sp[0], sp[0]);
-  a1 = _mm512_setr_epi64(ap[1], sp[1], sp[1], sp[1], sp[1], sp[1], sp[1], sp[1]);
-  a2 = _mm512_setr_epi64(ap[2], sp[2], sp[2], sp[2], sp[2], sp[2], sp[2], sp[2]);
-  a3 = _mm512_setr_epi64(ap[3], sp[3], sp[3], sp[3], sp[3], sp[3], sp[3], sp[3]);
-
-  // keccak state, row 0, column 4
-  // - lane 0: A[2, 2] element coordinates and shake padding (0x1f)
-  // - lanes 1-3: r[0]-r[2] element index and shake padding (0x1f)
-  // - lanes 4-6: e1[0]-e1[2] element index and shake padding (0x1f)
-  // - lane 7: e2 element index and shake padding (0x1f)
-  static const __m512i are_a4_vals = { 0x1f0202, 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0x1f06 };
-  a4 = are_a4_vals;
-
-  // keccak state, rows 1-2 (all zero)
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-
-  // keccak state, rows 3:
-  // - column 1 (a16), lane 0: all zero
-  // - column 1 (a16), lanes 1-7: set high bit of last byte of shake256 rate
-  // - other columns: all zero
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_maskz_set1_epi64(0xfe, 0x8000000000000000ULL);
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - column 0 (a20), lane 0: set high bit in last byte of shake128 rate
-  // - column 0 (a20), lanes 1-7: all zero
-  // - all other columns: all zero
-  a20 = _mm512_maskz_set1_epi64(1, 0x8000000000000000ULL);
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  // loop until final Ahat polynomial has 256 coefficients
-  // (e.g., lens[8] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a24):
-    //
-    // - lane 0: permuted shake128 state for A[2, 2] elements.
-    // - lanes 1-3: permuted shake256 state for r[0]-r[2].
-    // - lanes 4-6: permuted shake256 state for e1[0]-e1[2].
-    // - lane 7: permuted shake256 state for e2.
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample Ahat[2, 2] polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
-
-      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
-      // of r, e1, and e2 polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS; // load byte ids
-      for (size_t i = 0; i < 3; i++) {
-        // sample coefficients
-        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 32 * i); // r[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 32 * i); // r[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 32 * i); // r[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 32 * i); // e1[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 32 * i); // e1[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 32 * i); // e1[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t7, 15, 32 * i); // e2
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample Ahat[2, 2] polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
-
-      // loop over 3 16-byte chunks in t1-t6 and expand into 32 coefficients
-      // of r, e1, and e2
-      __m512i cbd2_ids = CBD2_ID_VALS; // load byte ids
-      for (size_t i = 0; i < 3; i++) {
-        // sample coefficients
-        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 96 + 32 * i); // r[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 96 + 32 * i); // r[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 96 + 32 * i); // r[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 96 + 32 * i); // e1[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 96 + 32 * i); // e1[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 96 + 32 * i); // e1[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t7, 15, 96 + 32 * i); // e2
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample Ahat polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 2]
-
-      // loop over 2 16-byte chunks in t1-t6 and expand into 32 coefficients
-      // of r, e1, and e2
-      __m512i cbd2_ids = CBD2_ID_VALS; // load byte ids
-      for (size_t i = 0; i < 2; i++) {
-        // sample coefficients
-        MAYBE_SAMPLE_32_CBD2_COEFS(t1, 9, 192 + 32 * i); // r[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t2, 10, 192 + 32 * i); // r[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t3, 11, 192 + 32 * i); // r[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t4, 12, 192 + 32 * i); // e1[0]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t5, 13, 192 + 32 * i); // e1[1]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t6, 14, 192 + 32 * i); // e1[2]
-        MAYBE_SAMPLE_32_CBD2_COEFS(t7, 15, 192 + 32 * i); // e2
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    // a18-a21 transpose
-    {
-      // transpose step 0
-      const __m512i s0_t0 = _mm512_permutex2var_epi64(a18, TRANSPOSE_S1_A_IDS, a20),
-                    s0_t1 = _mm512_permutex2var_epi64(a19, TRANSPOSE_S1_A_IDS, a21);
-
-      // transpose step 1
-      const __m512i t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S2_A_IDS, s0_t1);
-
-      // sample Ahat[2, 2] polynomial coefficients
-      SAMPLE_16_COEFS(t0, 8); // Ahat[2, 2]
-    }
-  } while (lens[8] != 256);
-}
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_NEON
-/**
- * Sample polynomials for pke768_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[2,0], A[0,1], A[1,1],
- * A[2,1], A[0,2], A[1,2], A[2,2], r[0], r[1], r[2], e1[0], e1[1],
- * e1[2], and e2.
- *
- * @note Neon implementation.
- *
- * @param[out] out 16 output polynomials.
- * @param[in] a_seed A seed (32 bytes).
- * @param[in] s_seed r, e1, and e2 seed (32 bytes).
- */
-static inline void pke768_encrypt_sample_neon(poly_t out[static 16], const uint8_t a_seed[32], const uint8_t s_seed[static 32]) {
-  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, and e1 seed
-
-  neon_ahat_polys(out + 0, ap, 0x0000, 0x0100); // A[0,0], A[1,0]
-  neon_ahat_polys(out + 2, ap, 0x0200, 0x0001); // A[2,0], A[0,1]
-  neon_ahat_polys(out + 4, ap, 0x0101, 0x0201); // A[1,1], A[2,1]
-  neon_ahat_polys(out + 6, ap, 0x0002, 0x0102); // A[0,2], A[1,2]
-  neon_ahat_poly(out + 8, ap, 0x0202); // A[2,2]
-  neon_cbd2_polys(out + 9, sp, 0x00, 0x01); // r[0], r[1]
-  neon_cbd2_polys(out + 11, sp, 0x02, 0x03); // r[2], e1[0]
-  neon_cbd2_polys(out + 13, sp, 0x04, 0x05); // e1[1], e1[2]
-  neon_cbd2_poly(out + 15, sp, 0x06); // e2
-}
-#endif /* BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Sample polynomials for pke768_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[2,0], A[0,1], A[1,1],
- * A[2,1], A[0,2], A[1,2], A[2,2], r[0], r[1], r[2], e1[0], e1[1],
- * e1[2], and e2.
- *
- * @note Scalar implementation.
- *
- * @param[out] out 16 output polynomials.
- * @param[in] a_seed A seed (32 bytes).
- * @param[in] s_seed r, e1, and e2 seed (32 bytes).
- */
-static inline void pke768_encrypt_sample_scalar(poly_t out[static 16], const uint8_t a_seed[32], const uint8_t s_seed[static 32]) {
-  for (size_t i = 0; i < PKE768_K; i++) {
-    for (size_t j = 0; j < PKE768_K; j++) {
-      poly_sample_ntt(out + (PKE768_K * i + j), a_seed, i, j);
-    }
-  }
-
-  // sample r vector from CBD(2) (PKE768_ETA1)
-  for (size_t i = 0; i < PKE768_K; i++) {
-    poly_sample_cbd2(out + 9 + i, s_seed, i);
-  }
-
-  // sample e1 vector from CBD(2) (PKE768_ETA2)
-  for (size_t i = 0; i < PKE768_K; i++) {
-    poly_sample_cbd2(out + 12 + i, s_seed, PKE768_K + i);
-  }
-
-  // sample e2 polynomial from CBD(2) (PKE768_ETA2)
-  poly_sample_cbd2(out + 15, s_seed, 2 * PKE768_K);
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-#define pke768_keygen_sample pke768_keygen_sample_avx512
-#define pke768_encrypt_sample pke768_encrypt_sample_avx512
-#elif BACKEND == BACKEND_NEON
-#define pke768_keygen_sample pke768_keygen_sample_neon
-#define pke768_encrypt_sample pke768_encrypt_sample_neon
-#elif BACKEND == BACKEND_SCALAR
-#define pke768_keygen_sample pke768_keygen_sample_scalar
-#define pke768_encrypt_sample pke768_encrypt_sample_scalar
-#else
-#error "unknown backend"
-#endif /* BACKEND */
-
-/**
- * Generate PKE768 encryption and decryption key from given 32-byte
- * seed.
- *
- * @param[out] ek PKE768 encryption key (1184 bytes).
- * @param[out] dk PKE768 decryption key (1152 bytes).
- * @param[in] seed Random seed (32 bytes).
- */
-static inline void pke768_keygen(uint8_t ek[static PKE768_EK_SIZE], uint8_t dk[static PKE768_DK_SIZE], const uint8_t seed[static 32]) {
-  // get sha3-512 hash of seed, get rho and sigma (each 32 bytes)
-  uint8_t rs[64] = { 0 }; // rho = rs[0,31], sigma = rs[32,63]
-  sha3_512(seed, 32, rs); // rho, sigma = sha3-512(seed)
-
-  // sample A, s, and e polynomial coefficients
-  poly_t ps[PKE768_K * PKE768_K + 2 * PKE768_K] = { 0 };
-  pke768_keygen_sample(ps, rs);
-  poly_t *a = ps, *s = ps + 9, *e = ps + 12;
-
-  // s = NTT(s), e = NTT(e) (R_q -> T_q)
-  vec3_ntt(s);
-  vec3_ntt(e);
-
-  // t = As + e (NTT)
-  poly_t t[PKE768_K] = { 0 };
-  mat3_mul(t, a, s); // t = As
-  vec3_add(t, e); // t += e
-
-  // ek <- t (NTT)
-  vec3_encode(ek, t);
-
-  // ek <- t || rho
-  memcpy(ek + (PKE768_K * 384), rs, 32);
-
-  // dk <- s (NTT)
-  vec3_encode(dk, s);
-}
-
-/**
- * Encrypt 32-byte message `m` using PKE768 encryption key `ek` and
- * randomness `enc_rand` and store the PKE768 ciphertext in output
- * buffer `ct`.
- *
- * @param[out] ct Output PKE768 ciphertext buffer (1088 bytes).
- * @param[in] ek PKE768 encryption key (1184 bytes).
- * @param[in] m Plaintext message (32 bytes).
- * @param[in] enc_rand Randomness seed (32 bytes).
- */
-static inline void pke768_encrypt(uint8_t ct[static PKE768_CT_SIZE], const uint8_t ek[static PKE768_EK_SIZE], const uint8_t m[static 32], const uint8_t enc_rand[static 32]) {
-  // decode t from first 768 bytes of ek
-  poly_t t[PKE768_K] = { 0 };
-  vec3_decode(t, ek);
-
-  // read rho from ek (32 bytes)
-  const uint8_t * const rho = ek + 384 * PKE768_K;
-
-  // sample A, r, e1, and e2 polynomial coefficients
-  poly_t ps[16] = { 0 };
-  pke768_encrypt_sample(ps, rho, enc_rand);
-  poly_t *a = ps, *r = ps + 9, *e1 = ps + 12, *e2 = ps + 15;
-
-  vec3_ntt(r); // r = NTT(r)
-
-  poly_t u[PKE768_K] = { 0 };
-  mat3_mul(u, a, r);  // u = (A*r)
-  vec3_inv_ntt(u);    // u = InvNTT(u)
-  vec3_add(u, e1);    // u += e1
-
-  // encode u, append to ct
-  vec3_encode_10bit(ct, u);
-
-  // decode message `m` into polynomial `mu`
-  //
-  // each bit of message `m` set to 1 is decoded as a coefficient of
-  // value 1665 in polynomial `mu`, and each bit set to 0 is decoded as
-  // a coefficient of value 0 in polynomial `mu`.
-  poly_t mu = { 0 };
-  poly_decode_1bit(&mu, m);
-
-  poly_t v = { 0 };
-  vec3_dot(&v, t, r);     // v = t * r
-  poly_inv_ntt(&v);       // v = InvNTT(v)
-  poly_add2(&v, e2, &mu); // v += e2 + mu
-
-  // encode v, append to ct
-  poly_encode_4bit(ct + 32 * PKE768_DU * PKE768_K, &v);
-}
-
-/**
- * Decrypt 32-byte plaintext message from PKE768 ciphertext `ct` using
- * PKE768 decryption key `dk` and store the result in output buffer `m`.
- *
- * @param[out] m Output plaintext message (32 bytes).
- * @param[in] dk PKE768 decryption key (1152 bytes).
- * @param[in] ct Input ciphertext buffer (1088 bytes).
- */
-static inline void pke768_decrypt(uint8_t m[static FIPS203IPD_KEY_SIZE], const uint8_t dk[static PKE768_DK_SIZE], const uint8_t ct[PKE768_CT_SIZE]) {
-  // decode u
-  poly_t u[PKE768_K] = { 0 };
-  vec3_decode_10bit(u, ct);
-
-  // decode v
-  poly_t v = { 0 };
-  poly_decode_4bit(&v, ct + 32 * PKE768_DU * PKE768_K);
-
-  // decode ŝ
-  poly_t s[PKE768_K] = { 0 };
-  vec3_decode(s, dk);
-
-  poly_t su = { 0 }; // su = s * u
-  vec3_ntt(u); // u = NTT(u)
-  vec3_dot(&su, s, u); // su = s * u
-  poly_inv_ntt(&su); // su = InvNTT(su)
-
-  poly_t w = v;
-  poly_sub(&w, &su); // w -= su
-
-  // encode w coefficients as 1-bit, write to output
-  poly_encode_1bit(m, &w);
-}
-
-/**
- * @brief Generate KEM768 encapsulation key `ek` and decapsulation key
- * `dk` from 64 byte random seed `seed`.
- * @ingroup kem768
- *
- * @warning `seed` **must** be 64 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 192 bits of strength.
- *
- * @param[out] ek KEM768 encapsulation key (1184 bytes).
- * @param[out] dk KEM768 decapsulation key (2400 bytes).
- * @param[in] seed Random seed (64 bytes).
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem768_keygen(uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]) {
-  const uint8_t * const z = seed; // random implicit rejection seed (32 bytes)
-  const uint8_t * const d = seed + 32; // pke768_keygen() random seed (32 bytes)
-
-  // generate ek and dk
-  pke768_keygen(ek, dk, d);
-
-  // KEM: append ek, sha3-256(ek), and z to dk
-  memcpy(dk + PKE768_DK_SIZE, ek, PKE768_EK_SIZE);
-  sha3_256(ek, PKE768_EK_SIZE, dk + PKE768_DK_SIZE + PKE768_EK_SIZE);
-  memcpy(dk + PKE768_DK_SIZE + PKE768_EK_SIZE + 32, z, 32);
-}
-
-/**
- * @brief Generate KEM768 shared key `key` and ciphertext `ct` from given
- * encapsulation key `ek` and randomness `seed`.
- * @ingroup kem768
- *
- * @warning `seed` **must** be 32 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 192 bits of strength.
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1088 bytes).
- * @param[in] ek KEM768 encapsulation key (1184 bytes).
- * @param[in] seed Random seed (32 bytes).
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem768_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]) {
-  uint8_t data[64] = { 0 };
-  memcpy(data, seed, 32); // append seed
-  sha3_256(ek, PKE768_EK_SIZE, data + 32); // append sha3-256(ek)
-
-  uint8_t kr[64] = { 0 };
-  sha3_512(data, 64, kr); // (K, r) <- sha3-512(data)
-  const uint8_t * const r = kr + 32; // get r
-
-  memcpy(key, kr, 32); // copy shared key to output
-  pke768_encrypt(ct, ek, seed, r); // ct <- pke.encrypt(ek, seed, r)
-}
-
-/**
- * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM768
- * decapsulation key `dk` with implicit rejection.
- * @ingroup kem768
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1088 bytes).
- * @param[in] dk KEM768 decapsulation key (2400 bytes).
- */
-void fips203ipd_kem768_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE]) {
-  const uint8_t * const dk_pke = dk;
-  const uint8_t * const ek_pke = dk + 384 * PKE768_K;
-  const uint8_t * const h = dk + (2 * 384 * PKE768_K + 32);
-  const uint8_t * const z = dk + (2 * 384 * PKE768_K + 64);
-
-  uint8_t mh[64] = { 0 };
-  pke768_decrypt(mh, dk_pke, ct); // decrypt ct into mh
-  memcpy(mh + 32, h, 32); // copy hash
-
-  uint8_t kr[64] = { 0 };
-  sha3_512(mh, 64, kr); // (K', r') <- sha3-512(m || r)
-
-  // zc = z || ct
-  uint8_t zc[32 + PKE768_CT_SIZE] = { 0 };
-  memcpy(zc, z, 32);
-  memcpy(zc + 32, ct, PKE768_CT_SIZE);
-
-  // rk: generate implicit rejection key from z and ciphertext
-  uint8_t k_rej[32] = { 0 };
-  shake256(zc, sizeof(zc), k_rej, sizeof(k_rej)); // K_rej = J(z||c)
-
-  // re-encrypt `k` with PKE768 key `ek_pke`
-  // (ct2 is used for implicit rejection check below)
-  uint8_t ct2[PKE768_CT_SIZE] = { 0 };
-  pke768_encrypt(ct2, ek_pke, mh, kr + 32); // ct2 <- pke.encrypt(ek, m', r')
-
-  // compare ct and ct2 using constant-time comparison.  if they match,
-  // then copy decapsulated key to output buffer `key`.  if `ct` and `ct2`
-  // don't match, then copy the implicit rejection key `k_rej` to the
-  // output buffer `key`.
-  ct_copy(key, ct_diff(ct, ct2, PKE768_CT_SIZE), kr, k_rej);
-}
-
-#if BACKEND == BACKEND_AVX512
-/**
- * Sample polynomials for pke1024_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[0,2], A[0,3], A[1,0],
- * A[1,1], A[1,2], A[1,3], A[2,0], A[2,1], A[2,2], A[2,3], A[3,0],
- * A[3,1], A[3,2], A[3,3], s[0], s[1], s[2], s[3], e[0], e[1], e[2], and
- * e[3].
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out 24 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke1024_keygen_sample_avx512(poly_t out[static 24], const uint8_t seed[static 64]) {
-  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
-
-  // lens:
-  // - indices 0-15: number of coefficients for Ahat elements
-  uint32_t lens[16] ALIGN(64) = { 0 }; // polynomial lengths
-
-  // keccak state:
-  //   -------------------------------------
-  //   | Row |          Registers          |
-  //   |-----|-----------------------------|
-  //   |  2  | a13 | a14 | a10 | a11 | a12 |
-  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
-  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
-  //   |  4  | a23 | a24 | a20 | a21 | a22 |
-  //   |  3  | a18 | a19 | a15 | a16 | a17 |
-  //   -------------------------------------
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for a
-  __m512i a0 = _mm512_set1_epi64(ap[0]),
-          a1 = _mm512_set1_epi64(ap[1]),
-          a2 = _mm512_set1_epi64(ap[2]),
-          a3 = _mm512_set1_epi64(ap[3]);
-
-  // keccak state, row 0, column 4
-  // lanes 0-7: A element coordinates (j, i) and shake padding (0x1f)
-  //
-  // NOTE: the A element coordinates are swapped here versus
-  // encrypt/decrypt, because this code samples A and encrypt/decrypt
-  // sample the transpose of A.
-  __m512i a4 = { 0x1f0000, 0x1f0001, 0x1f0002, 0x1f0003, 0x1f0100, 0x1f0101, 0x1f0102, 0x1f0103 };
-
-  // keccak state, rows 1-3 (all zero)
-  __m512i a5 = _mm512_setzero_si512(),
-          a6 = _mm512_setzero_si512(),
-          a7 = _mm512_setzero_si512(),
-          a8 = _mm512_setzero_si512(),
-          a9 = _mm512_setzero_si512(),
-          a10 = _mm512_setzero_si512(),
-          a11 = _mm512_setzero_si512(),
-          a12 = _mm512_setzero_si512(),
-          a13 = _mm512_setzero_si512(),
-          a14 = _mm512_setzero_si512(),
-          a15 = _mm512_setzero_si512(),
-          a16 = _mm512_setzero_si512(),
-          a17 = _mm512_setzero_si512(),
-          a18 = _mm512_setzero_si512(),
-          a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - a20 (column 0): set high bit in last byte of shake128 rate
-  // - all other columns: all zero
-  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
-          a21 = _mm512_setzero_si512(),
-          a22 = _mm512_setzero_si512(),
-          a23 = _mm512_setzero_si512(),
-          a24 = _mm512_setzero_si512();
-
-  // loop until the first 8 Ahat polynomials have 256 coefficients
-  // (e.g., lens[0..7] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[0, 3]
-    //    - t4: 64 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t6: 64 bytes of SHAKE128 output for Ahat[1, 2]
-    //    - t7: 64 bytes of SHAKE128 output for Ahat[1, 3]
-    //
-    // 2. For t0-t7, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
-    //    registers a18-a21.  This organizes the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[0, 3]
-    //    - t4: 24 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t6: 24 bytes of SHAKE128 output for Ahat[1, 2]
-    //    - t7: 24 bytes of SHAKE128 output for Ahat[1, 3]
-    //
-    // 6. For t0-t7, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 3]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 3]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 3]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 3]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[0, 3]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[1, 3]
-    }
-
-    // a18-a21 transpose
-    {
-      // transpose step 0
-      const __m512i s0_t0 = a18,
-                    s0_t1 = a19,
-                    s0_t2 = a20,
-                    s0_t3 = a21,
-                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
-                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
-                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
-                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
-
-      // transpose step 1
-      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
-                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
-                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
-                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
-                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
-                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
-                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
-                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
-
-      // transpose step 2
-      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
-                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
-                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
-                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
-                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
-                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
-                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
-                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
-
-      // sample/store polynomial coefficients
-      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_16_COEFS(t1, 1); // Ahat[0, 1]
-      SAMPLE_16_COEFS(t2, 2); // Ahat[0, 2]
-      SAMPLE_16_COEFS(t3, 3); // Ahat[0, 3]
-      SAMPLE_16_COEFS(t4, 4); // Ahat[1, 0]
-      SAMPLE_16_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_16_COEFS(t6, 6); // Ahat[1, 2]
-      SAMPLE_16_COEFS(t7, 7); // Ahat[1, 3]
-    }
-  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
-
-  // init keccak state for the following items:
-  // - lanes 0-7: A[2,0]-A[3,3]
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for a
-  a0 = _mm512_set1_epi64(ap[0]);
-  a1 = _mm512_set1_epi64(ap[1]);
-  a2 = _mm512_set1_epi64(ap[2]);
-  a3 = _mm512_set1_epi64(ap[3]);
-
-  // keccak state, row 0, column 4
-  // lanes 0-7: A element coordinates (j, i) and shake padding (0x1f)
-  //
-  // NOTE: the A element coordinates are swapped here versus
-  // encrypt/decrypt, because this code samples A and encrypt/decrypt
-  // sample the transpose of A.
-  static const __m512i a_tail_a4_vals = { 0x1f0200, 0x1f0201, 0x1f0202, 0x1f0203, 0x1f0300, 0x1f0301, 0x1f0302, 0x1f0303 };
-  a4 = a_tail_a4_vals;
-
-  // keccak state, rows 1-3 (all zero)
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_setzero_si512();
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - a20 (column 0): set high bit in last byte of shake128 rate
-  // - all other columns: all zero
-  a20 = _mm512_set1_epi64(0x8000000000000000ULL);
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  // loop until the second 8 Ahat polynomials have 256 coefficients
-  // (e.g., lens[8..15] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[2, 1]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[2, 2]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[2, 3]
-    //    - t4: 64 bytes of SHAKE128 output for Ahat[3, 0]
-    //    - t5: 64 bytes of SHAKE128 output for Ahat[3, 1]
-    //    - t6: 64 bytes of SHAKE128 output for Ahat[3, 2]
-    //    - t7: 64 bytes of SHAKE128 output for Ahat[3, 3]
-    //
-    // 2. For t0-t7, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
-    //    registers a18-a21.  This organizes the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[2, 1]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 2]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[2, 3]
-    //    - t4: 24 bytes of SHAKE128 output for Ahat[3, 0]
-    //    - t5: 24 bytes of SHAKE128 output for Ahat[3, 1]
-    //    - t6: 24 bytes of SHAKE128 output for Ahat[3, 2]
-    //    - t7: 24 bytes of SHAKE128 output for Ahat[3, 3]
-    //
-    // 6. For t0-t7, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t1, 9); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_32_COEFS(t3, 11); // Ahat[2, 3]
-      SAMPLE_32_COEFS(t4, 12); // Ahat[3, 0]
-      SAMPLE_32_COEFS(t5, 13); // Ahat[3, 1]
-      SAMPLE_32_COEFS(t6, 14); // Ahat[3, 2]
-      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t1, 9); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_32_COEFS(t3, 11); // Ahat[2, 3]
-      SAMPLE_32_COEFS(t4, 12); // Ahat[3, 0]
-      SAMPLE_32_COEFS(t5, 13); // Ahat[3, 1]
-      SAMPLE_32_COEFS(t6, 14); // Ahat[3, 2]
-      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t1, 9); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_32_COEFS(t3, 11); // Ahat[2, 3]
-      SAMPLE_32_COEFS(t4, 12); // Ahat[3, 0]
-      SAMPLE_32_COEFS(t5, 13); // Ahat[3, 1]
-      SAMPLE_32_COEFS(t6, 14); // Ahat[3, 2]
-      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
-    }
-
-    // a18-a21 transpose
-    {
-      // transpose step 0
-      const __m512i s0_t0 = a18,
-                    s0_t1 = a19,
-                    s0_t2 = a20,
-                    s0_t3 = a21,
-                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
-                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
-                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
-                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
-
-      // transpose step 1
-      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
-                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
-                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
-                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
-                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
-                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
-                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
-                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
-
-      // transpose step 2
-      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
-                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
-                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
-                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
-                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
-                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
-                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
-                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
-
-      // sample/store polynomial coefficients
-      SAMPLE_16_COEFS(t0, 8); // Ahat[2, 0]
-      SAMPLE_16_COEFS(t1, 9); // Ahat[2, 1]
-      SAMPLE_16_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_16_COEFS(t3, 11); // Ahat[2, 3]
-      SAMPLE_16_COEFS(t4, 12); // Ahat[3, 0]
-      SAMPLE_16_COEFS(t5, 13); // Ahat[3, 1]
-      SAMPLE_16_COEFS(t6, 14); // Ahat[3, 2]
-      SAMPLE_16_COEFS(t7, 15); // Ahat[3, 3]
-    }
-  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens + 8), K256x8));
-
-  // set up another keccak permutation for the following items:
-  // - lane 0-3: s[0]-s[3] (cbd2)
-  // - lanes 4-7: e[0]-e[3] (cbd2)
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for s, e
-  a0 = _mm512_set1_epi64(sp[0]);
-  a1 = _mm512_set1_epi64(sp[1]);
-  a2 = _mm512_set1_epi64(sp[2]);
-  a3 = _mm512_set1_epi64(sp[3]);
-
-  // keccak state, row 0, column 4
-  // - lane 0: A[2, 2] element coordinates (j, i) and shake padding (0x1f)
-  // - lanes 0-3: s[0]-s[3] element index and shake padding (0x1f)
-  // - lanes 4-7: e[0]-e[3] element index and shake padding (0x1f)
-  static const __m512i ase_a4_vals = { 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0x1f06, 0x1f07 };
-  a4 = ase_a4_vals;
-
-  // keccak state, rows 1-2 (all zero)
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-
-  // keccak state, rows 3:
-  // - column 1 (a16), lanes 0-7: set high bit of last byte of shake256 rate
-  // - other columns: all zero
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_set1_epi64(0x8000000000000000ULL);
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4 (all zero)
-  a20 = _mm512_setzero_si512();
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a24):
-    //
-    // - lanes 0-3: permuted shake256 state for s[0]-s[3].
-    // - lanes 4-7: permuted shake256 state for e[0]-e[3].
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
-      // of s[0..3] and e[0..3] polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 4; i++) {
-        // sample coefficients
-        SAMPLE_32_CBD2_COEFS(t0, 16, 32 * i); // s[0]
-        SAMPLE_32_CBD2_COEFS(t1, 17, 32 * i); // s[1]
-        SAMPLE_32_CBD2_COEFS(t2, 18, 32 * i); // s[2]
-        SAMPLE_32_CBD2_COEFS(t3, 19, 32 * i); // s[3]
-        SAMPLE_32_CBD2_COEFS(t4, 20, 32 * i); // e[0]
-        SAMPLE_32_CBD2_COEFS(t5, 21, 32 * i); // e[1]
-        SAMPLE_32_CBD2_COEFS(t6, 22, 32 * i); // e[2]
-        SAMPLE_32_CBD2_COEFS(t7, 23, 32 * i); // e[3]
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    {
-      // a8-a15 transpose
-      TRANSPOSE_8(a8, a9, a10, a11, a12, a13, a14, a15);
-
-      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
-      // of s[0..3] and e[0..3] polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 4; i++) {
-        // sample coefficients
-        SAMPLE_32_CBD2_COEFS(t0, 16, 128 + 32 * i); // s[0]
-        SAMPLE_32_CBD2_COEFS(t1, 17, 128 + 32 * i); // s[1]
-        SAMPLE_32_CBD2_COEFS(t2, 18, 128 + 32 * i); // s[2]
-        SAMPLE_32_CBD2_COEFS(t3, 19, 128 + 32 * i); // s[3]
-        SAMPLE_32_CBD2_COEFS(t4, 20, 128 + 32 * i); // e[0]
-        SAMPLE_32_CBD2_COEFS(t5, 21, 128 + 32 * i); // e[1]
-        SAMPLE_32_CBD2_COEFS(t6, 22, 128 + 32 * i); // e[2]
-        SAMPLE_32_CBD2_COEFS(t7, 23, 128 + 32 * i); // e[3]
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-  }
-}
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_NEON
-/**
- * Sample polynomials for pke1024_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[0,2], A[0,3], A[1,0],
- * A[1,1], A[1,2], A[1,3], A[2,0], A[2,1], A[2,2], A[2,3], A[3,0],
- * A[3,1], A[3,2], A[3,3], s[0], s[1], s[2], s[3], e[0], e[1], e[2], and
- * e[3].
- *
- * @note Neon implementation.
- *
- * @param[out] out 24 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke1024_keygen_sample_neon(poly_t out[static 24], const uint8_t seed[static 64]) {
-  const uint64_t * const ap = (uint64_t*) seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) (seed + 32); // s and e vector seed
-
-  neon_ahat_polys(out +  0, ap, 0x0000, 0x0001); // A[0,0], A[0,1]
-  neon_ahat_polys(out +  2, ap, 0x0002, 0x0003); // A[0,2], A[0,3]
-  neon_ahat_polys(out +  4, ap, 0x0100, 0x0101); // A[1,0], A[1,1]
-  neon_ahat_polys(out +  6, ap, 0x0102, 0x0103); // A[1,2], A[1,3]
-  neon_ahat_polys(out +  8, ap, 0x0200, 0x0201); // A[2,0], A[2,1]
-  neon_ahat_polys(out + 10, ap, 0x0202, 0x0203); // A[2,2], A[2,3]
-  neon_ahat_polys(out + 12, ap, 0x0300, 0x0301); // A[3,0], A[3,1]
-  neon_ahat_polys(out + 14, ap, 0x0302, 0x0303); // A[3,2], A[3,3]
-  neon_cbd2_polys(out + 16, sp, 0x00, 0x01); // s[0], s[1]
-  neon_cbd2_polys(out + 18, sp, 0x02, 0x03); // s[2], s[3]
-  neon_cbd2_polys(out + 20, sp, 0x04, 0x05); // e[0], e[1]
-  neon_cbd2_polys(out + 22, sp, 0x06, 0x07); // e[2], e[3]
-}
-#endif /* BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Sample polynomials for pke1024_keygen().
- *
- * The output polynomials are: A[0,0], A[0,1], A[0,2], A[0,3], A[1,0],
- * A[1,1], A[1,2], A[1,3], A[2,0], A[2,1], A[2,2], A[2,3], A[3,0],
- * A[3,1], A[3,2], A[3,3], s[0], s[1], s[2], s[3], e[0], e[1], e[2], and
- * e[3].
- *
- * @note Scalar implementation.
- *
- * @param[out] out 24 output polynomials.
- * @param[in] seed Random seed (64 bytes).
- */
-static inline void pke1024_keygen_sample_scalar(poly_t out[static 24], const uint8_t seed[static 64]) {
-  const uint8_t * const sigma = seed + 32; // sigma
-
-  // sample A hat matrix polynomial coefficients from T_q (NTT)
-  for (size_t i = 0; i < PKE1024_K; i++) {
-    for (size_t j = 0; j < PKE1024_K; j++) {
-      poly_sample_ntt(out + (PKE1024_K * i + j), seed, j, i);
-    }
-  }
-
-  // sample poly coefs for vectors s and e from CBD(2) (PKE1024_ETA1)
-  // (note: sampling is done in R_q, not in NTT domain)
-  for (size_t i = 0; i < 2 * PKE1024_K; i++) {
-    poly_sample_cbd2(out + 16 + i, sigma, i);
-  }
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-/**
- * Sample polynomials for pke1024_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[2,0], A[3,0], A[0,1],
- * A[1,1], A[2,1], A[3,1], A[0,2], A[1,2], A[2,2], A[3,2], A[0,3],
- * A[1,3], A[2,3], A[3,3], r[0], r[1], r[2], r[3], e1[0], e1[1], e1[2],
- * e1[3], and e2.
- *
- * @note AVX-512 implementation.
- *
- * @param[out] out 25 output polynomials.
- * @param[in] a_seed A seed (32 bytes).
- * @param[in] s_seed r, e1, and e2 seed (32 bytes).
- */
-static inline void pke1024_encrypt_sample_avx512(poly_t out[static 25], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
-  const uint64_t * const ap = (uint64_t*) a_seed; // A seed
-  const uint64_t * const sp = (uint64_t*) s_seed; // r, e1, e2 seed
-
-  // lens:
-  // - indices 0-15: number of coefficients for Ahat elements
-  uint32_t lens[16] ALIGN(32) = { 0 }; // polynomial lengths
-
-  // keccak state:
-  //   -------------------------------------
-  //   | Row |          Registers          |
-  //   |-----|-----------------------------|
-  //   |  2  | a13 | a14 | a10 | a11 | a12 |
-  //   |  1  |  a8 |  a9 |  a5 |  a6 |  a7 |
-  //   |  0  |  a3 |  a4 |  a0 |  a1 |  a2 |
-  //   |  4  | a23 | a24 | a20 | a21 | a22 |
-  //   |  3  | a18 | a19 | a15 | a16 | a17 |
-  //   -------------------------------------
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for a
-  __m512i a0 = _mm512_set1_epi64(ap[0]),
-          a1 = _mm512_set1_epi64(ap[1]),
-          a2 = _mm512_set1_epi64(ap[2]),
-          a3 = _mm512_set1_epi64(ap[3]);
-
-  // keccak state, row 0, column 4
-  // lanes 0-7: A element coordinates and shake padding (0x1f)
-  //
-  // NOTE: the A element coordinates are swapped here versus keygen,
-  // because this samples the transpose of A and keygen samples A.
-  __m512i a4 = { 0x1f0000, 0x1f0100, 0x1f0200, 0x1f0300, 0x1f0001, 0x1f0101, 0x1f0201, 0x1f0301 };
-
-  // keccak state, rows 1-3 (all zero)
-  __m512i a5 = _mm512_setzero_si512(),
-          a6 = _mm512_setzero_si512(),
-          a7 = _mm512_setzero_si512(),
-          a8 = _mm512_setzero_si512(),
-          a9 = _mm512_setzero_si512(),
-          a10 = _mm512_setzero_si512(),
-          a11 = _mm512_setzero_si512(),
-          a12 = _mm512_setzero_si512(),
-          a13 = _mm512_setzero_si512(),
-          a14 = _mm512_setzero_si512(),
-          a15 = _mm512_setzero_si512(),
-          a16 = _mm512_setzero_si512(),
-          a17 = _mm512_setzero_si512(),
-          a18 = _mm512_setzero_si512(),
-          a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - a20 (column 0): set high bit in last byte of shake128 rate
-  // - all other columns: all zero
-  __m512i a20 = _mm512_set1_epi64(0x8000000000000000ULL),
-          a21 = _mm512_setzero_si512(),
-          a22 = _mm512_setzero_si512(),
-          a23 = _mm512_setzero_si512(),
-          a24 = _mm512_setzero_si512();
-
-  // loop until the first 8 Ahat polynomials have 256 coefficients
-  // (e.g., lens[0..7] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[3, 0]
-    //    - t4: 64 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 1]
-    //    - t7: 64 bytes of SHAKE128 output for Ahat[3, 1]
-    //
-    // 2. For t0-t7, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
-    //    registers a18-a21.  This organizes the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 0]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 0]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 0]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[3, 0]
-    //    - t4: 24 bytes of SHAKE128 output for Ahat[0, 1]
-    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 1]
-    //    - t6: 24 bytes of SHAKE128 output for Ahat[2, 1]
-    //    - t7: 24 bytes of SHAKE128 output for Ahat[3, 1]
-    //
-    // 6. For t0-t7, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[3, 0]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[3, 1]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[3, 0]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[3, 1]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_32_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_32_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_32_COEFS(t3, 3); // Ahat[3, 0]
-      SAMPLE_32_COEFS(t4, 4); // Ahat[0, 1]
-      SAMPLE_32_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_32_COEFS(t6, 6); // Ahat[2, 1]
-      SAMPLE_32_COEFS(t7, 7); // Ahat[3, 1]
-    }
-
-    // a18-a21 transpose
-    {
-      // transpose step 0
-      const __m512i s0_t0 = a18,
-                    s0_t1 = a19,
-                    s0_t2 = a20,
-                    s0_t3 = a21,
-                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
-                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
-                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
-                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
-
-      // transpose step 1
-      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
-                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
-                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
-                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
-                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
-                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
-                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
-                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
-
-      // transpose step 2
-      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
-                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
-                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
-                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
-                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
-                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
-                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
-                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
-
-      // sample/store polynomial coefficients
-      SAMPLE_16_COEFS(t0, 0); // Ahat[0, 0]
-      SAMPLE_16_COEFS(t1, 1); // Ahat[1, 0]
-      SAMPLE_16_COEFS(t2, 2); // Ahat[2, 0]
-      SAMPLE_16_COEFS(t3, 3); // Ahat[3, 0]
-      SAMPLE_16_COEFS(t4, 4); // Ahat[0, 1]
-      SAMPLE_16_COEFS(t5, 5); // Ahat[1, 1]
-      SAMPLE_16_COEFS(t6, 6); // Ahat[2, 1]
-      SAMPLE_16_COEFS(t7, 7); // Ahat[3, 1]
-    }
-  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens), K256x8));
-
-  // init keccak state for the following items:
-  // - lanes 0-7: A[0,2]-A[3,3]
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for a
-  a0 = _mm512_set1_epi64(ap[0]);
-  a1 = _mm512_set1_epi64(ap[1]);
-  a2 = _mm512_set1_epi64(ap[2]);
-  a3 = _mm512_set1_epi64(ap[3]);
-
-  // keccak state, row 0, column 4
-  // lanes 0-7: A element coordinates and shake padding (0x1f)
-  //
-  // NOTE: the A element coordinates are swapped here versus keygen,
-  // because this samples the transpose of A and keygen samples A.
-  static const __m512i a_tail_a4_vals = { 0x1f0002, 0x1f0102, 0x1f0202, 0x1f0302, 0x1f0003, 0x1f0103, 0x1f0203, 0x1f0303 };
-  a4 = a_tail_a4_vals;
-
-  // keccak state, rows 1-3 (all zero)
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_setzero_si512();
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4
-  // - a20 (column 0): set high bit in last byte of shake128 rate
-  // - all other columns: all zero
-  a20 = _mm512_set1_epi64(0x8000000000000000ULL);
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  // loop until the second 8 Ahat polynomials have 256 coefficients
-  // (e.g., lens[8..15] == 256)
-  do {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a25):
-    //
-    // - lanes 0-7: permuted shake128 state for 8 Ahat elements (have
-    //   21*8 = 168 bytes, need >504 bytes per poly, or 3 permutes)
-    //
-    // We proceed as follows:
-    //
-    // 1. Transpose the 8x8 matrix in registers a0-a7 using the
-    //    "Big-to-little" method from "Intel AVX-512 - Permuting Data
-    //    Within and Between AVX Registers", Section 4.1 (https://networkbuilders.intel.com/docs/networkbuilders/intel-avx-512-permuting-data-within-and-between-avx-registers-technology-guide-1668169807.pdf).
-    //
-    //    This organizes the registers as follows:
-    //    - t0: 64 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t1: 64 bytes of SHAKE128 output for Ahat[1, 2]
-    //    - t2: 64 bytes of SHAKE128 output for Ahat[2, 2]
-    //    - t3: 64 bytes of SHAKE128 output for Ahat[3, 2]
-    //    - t4: 64 bytes of SHAKE128 output for Ahat[0, 3]
-    //    - t5: 64 bytes of SHAKE128 output for Ahat[1, 3]
-    //    - t6: 64 bytes of SHAKE128 output for Ahat[2, 3]
-    //    - t7: 64 bytes of SHAKE128 output for Ahat[3, 3]
-    //
-    // 2. For t0-t7, we do the following:
-    //    a. Expand 48 bytes containing 32 12-bit unsigned integers into
-    //       32 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-    //
-    // 3. Transpose the 8x8 matrix in registers a6-a13 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 4. Transpose the 8x8 matrix in registers a12-a19 as per step #1,
-    //    then process registers t0-t7 as per step #2.
-    //
-    // 5. (FIXME: explain this better) Transpose the 8x8 matrix in
-    //    registers a18-a21.  This organizes the registers as follows:
-    //
-    //    - t0: 24 bytes of SHAKE128 output for Ahat[0, 2]
-    //    - t1: 24 bytes of SHAKE128 output for Ahat[1, 2]
-    //    - t2: 24 bytes of SHAKE128 output for Ahat[2, 2]
-    //    - t3: 24 bytes of SHAKE128 output for Ahat[3, 2]
-    //    - t4: 24 bytes of SHAKE128 output for Ahat[0, 3]
-    //    - t5: 24 bytes of SHAKE128 output for Ahat[1, 3]
-    //    - t6: 24 bytes of SHAKE128 output for Ahat[2, 3]
-    //    - t7: 24 bytes of SHAKE128 output for Ahat[3, 3]
-    //
-    // 6. For t0-t7, do the following:
-    //    a. Expand 24 bytes containing 16 12-bit unsigned integers into
-    //       16 16-bit unsigned integers.
-    //    b. Build a rejection sampling mask to exclude integers >= Q.
-    //    c. Use the mask to store coefficients and increment the
-    //       polynomial's coefficient count.
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t1, 9); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_32_COEFS(t3, 11); // Ahat[3, 2]
-      SAMPLE_32_COEFS(t4, 12); // Ahat[0, 3]
-      SAMPLE_32_COEFS(t5, 13); // Ahat[1, 3]
-      SAMPLE_32_COEFS(t6, 14); // Ahat[2, 3]
-      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
-    }
-
-    {
-      // a6-a13 transpose
-      TRANSPOSE_8(a6, a7, a8, a9, a10, a11, a12, a13);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t1, 9); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_32_COEFS(t3, 11); // Ahat[3, 2]
-      SAMPLE_32_COEFS(t4, 12); // Ahat[0, 3]
-      SAMPLE_32_COEFS(t5, 13); // Ahat[1, 3]
-      SAMPLE_32_COEFS(t6, 14); // Ahat[2, 3]
-      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
-    }
-
-    {
-      // a12-a19 transpose
-      TRANSPOSE_8(a12, a13, a14, a15, a16, a17, a18, a19);
-
-      // sample polynomial coefficients
-      SAMPLE_32_COEFS(t0, 8); // Ahat[0, 2]
-      SAMPLE_32_COEFS(t1, 9); // Ahat[1, 2]
-      SAMPLE_32_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_32_COEFS(t3, 11); // Ahat[3, 2]
-      SAMPLE_32_COEFS(t4, 12); // Ahat[0, 3]
-      SAMPLE_32_COEFS(t5, 13); // Ahat[1, 3]
-      SAMPLE_32_COEFS(t6, 14); // Ahat[2, 3]
-      SAMPLE_32_COEFS(t7, 15); // Ahat[3, 3]
-    }
-
-    // a18-a21 transpose
-    {
-      // transpose step 0
-      const __m512i s0_t0 = a18,
-                    s0_t1 = a19,
-                    s0_t2 = a20,
-                    s0_t3 = a21,
-                    s0_t4 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a18),
-                    s0_t5 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a19),
-                    s0_t6 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a20),
-                    s0_t7 = _mm512_maskz_permutexvar_epi64(0xf, HI_SWAP_IDS, a21);
-
-      // transpose step 1
-      const __m512i s1_t0 = _mm512_permutex2var_epi64(s0_t0, TRANSPOSE_S1_A_IDS, s0_t2),
-                    s1_t1 = _mm512_permutex2var_epi64(s0_t1, TRANSPOSE_S1_A_IDS, s0_t3),
-                    s1_t2 = _mm512_permutex2var_epi64(s0_t2, TRANSPOSE_S1_B_IDS, s0_t0),
-                    s1_t3 = _mm512_permutex2var_epi64(s0_t3, TRANSPOSE_S1_B_IDS, s0_t1),
-                    s1_t4 = _mm512_permutex2var_epi64(s0_t4, TRANSPOSE_S1_A_IDS, s0_t6),
-                    s1_t5 = _mm512_permutex2var_epi64(s0_t5, TRANSPOSE_S1_A_IDS, s0_t7),
-                    s1_t6 = _mm512_permutex2var_epi64(s0_t6, TRANSPOSE_S1_B_IDS, s0_t4),
-                    s1_t7 = _mm512_permutex2var_epi64(s0_t7, TRANSPOSE_S1_B_IDS, s0_t5);
-
-      // transpose step 2
-      const __m512i t0 = _mm512_permutex2var_epi64(s1_t0, TRANSPOSE_S2_A_IDS, s1_t1),
-                    t1 = _mm512_permutex2var_epi64(s1_t1, TRANSPOSE_S2_B_IDS, s1_t0),
-                    t2 = _mm512_permutex2var_epi64(s1_t2, TRANSPOSE_S2_A_IDS, s1_t3),
-                    t3 = _mm512_permutex2var_epi64(s1_t3, TRANSPOSE_S2_B_IDS, s1_t2),
-                    t4 = _mm512_permutex2var_epi64(s1_t4, TRANSPOSE_S2_A_IDS, s1_t5),
-                    t5 = _mm512_permutex2var_epi64(s1_t5, TRANSPOSE_S2_B_IDS, s1_t4),
-                    t6 = _mm512_permutex2var_epi64(s1_t6, TRANSPOSE_S2_A_IDS, s1_t7),
-                    t7 = _mm512_permutex2var_epi64(s1_t7, TRANSPOSE_S2_B_IDS, s1_t6);
-
-      // sample/store polynomial coefficients
-      SAMPLE_16_COEFS(t0, 8); // Ahat[0, 2]
-      SAMPLE_16_COEFS(t1, 9); // Ahat[1, 2]
-      SAMPLE_16_COEFS(t2, 10); // Ahat[2, 2]
-      SAMPLE_16_COEFS(t3, 11); // Ahat[3, 2]
-      SAMPLE_16_COEFS(t4, 12); // Ahat[0, 2]
-      SAMPLE_16_COEFS(t5, 13); // Ahat[1, 2]
-      SAMPLE_16_COEFS(t6, 14); // Ahat[2, 2]
-      SAMPLE_16_COEFS(t7, 15); // Ahat[3, 2]
-    }
-  } while (_mm256_cmpneq_epi32_mask(_mm256_load_epi32(lens + 8), K256x8));
-
-  // set up another keccak permutation for the following items:
-  // - lane 0-3: r[0]-r[3] (cbd2)
-  // - lanes 4-7: e1[0]-e1[3] (cbd2)
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0-7: rho for r, e1
-  a0 = _mm512_set1_epi64(sp[0]);
-  a1 = _mm512_set1_epi64(sp[1]);
-  a2 = _mm512_set1_epi64(sp[2]);
-  a3 = _mm512_set1_epi64(sp[3]);
-
-  // keccak state, row 0, column 4
-  // - lanes 0-3: r[0]-r[3] element index and shake padding (0x1f)
-  // - lanes 4-7: e1[0]-e1[3] element index and shake padding (0x1f)
-  static const __m512i re_a4_vals = { 0x1f00, 0x1f01, 0x1f02, 0x1f03, 0x1f04, 0x1f05, 0x1f06, 0x1f07 };
-  a4 = re_a4_vals;
-
-  // keccak state, rows 1-2 (all zero)
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-
-  // keccak state, rows 3:
-  // - column 1 (a16), lanes 0-7: set high bit of last byte of shake256 rate
-  // - other columns: all zero
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_set1_epi64(0x8000000000000000ULL);
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4 (all zero)
-  a20 = _mm512_setzero_si512();
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a24):
-    //
-    // - lanes 0-3: permuted shake256 state for r[0]-r[3].
-    // - lanes 4-7: permuted shake256 state for e1[0]-e2[3].
-
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
-      // of s[0..3] and e[0..3] polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 4; i++) {
-        // sample coefficients
-        SAMPLE_32_CBD2_COEFS(t0, 16, 32 * i); // r[0]
-        SAMPLE_32_CBD2_COEFS(t1, 17, 32 * i); // r[1]
-        SAMPLE_32_CBD2_COEFS(t2, 18, 32 * i); // r[2]
-        SAMPLE_32_CBD2_COEFS(t3, 19, 32 * i); // r[3]
-        SAMPLE_32_CBD2_COEFS(t4, 20, 32 * i); // e1[0]
-        SAMPLE_32_CBD2_COEFS(t5, 21, 32 * i); // e1[1]
-        SAMPLE_32_CBD2_COEFS(t6, 22, 32 * i); // e1[2]
-        SAMPLE_32_CBD2_COEFS(t7, 23, 32 * i); // e1[3]
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    {
-      // a8-a15 transpose
-      TRANSPOSE_8(a8, a9, a10, a11, a12, a13, a14, a15);
-
-      // loop over 16-byte chunks in t0-t7 and expand into 32 coefficients
-      // of s[0..3] and e[0..3] polynomials
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 4; i++) {
-        // sample coefficients
-        SAMPLE_32_CBD2_COEFS(t0, 16, 128 + 32 * i); // r[0]
-        SAMPLE_32_CBD2_COEFS(t1, 17, 128 + 32 * i); // r[1]
-        SAMPLE_32_CBD2_COEFS(t2, 18, 128 + 32 * i); // r[2]
-        SAMPLE_32_CBD2_COEFS(t3, 19, 128 + 32 * i); // r[3]
-        SAMPLE_32_CBD2_COEFS(t4, 20, 128 + 32 * i); // e1[0]
-        SAMPLE_32_CBD2_COEFS(t5, 21, 128 + 32 * i); // e1[1]
-        SAMPLE_32_CBD2_COEFS(t6, 22, 128 + 32 * i); // e1[2]
-        SAMPLE_32_CBD2_COEFS(t7, 23, 128 + 32 * i); // e1[3]
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-  }
-
-  // set up final keccak permutation for the following items:
-  // - lane 0: e2 (cbd2)
-
-  // keccak state, row 0, columns 0-3
-  // - lanes 0: rho for e2
-  // - other lanes: unused
-  a0 = _mm512_maskz_set1_epi64(1, sp[0]);
-  a1 = _mm512_maskz_set1_epi64(1, sp[1]);
-  a2 = _mm512_maskz_set1_epi64(1, sp[2]);
-  a3 = _mm512_maskz_set1_epi64(1, sp[3]);
-
-  // keccak state, row 0, column 4
-  // - lanes 0: e2 element index and shake padding (0x1f)
-  // - other lanes: unused
-  a4 = _mm512_maskz_set1_epi64(1, 0x1f08);
-
-  // keccak state, rows 1-2 (all zero)
-  a5 = _mm512_setzero_si512();
-  a6 = _mm512_setzero_si512();
-  a7 = _mm512_setzero_si512();
-  a8 = _mm512_setzero_si512();
-  a9 = _mm512_setzero_si512();
-  a10 = _mm512_setzero_si512();
-  a11 = _mm512_setzero_si512();
-  a12 = _mm512_setzero_si512();
-  a13 = _mm512_setzero_si512();
-  a14 = _mm512_setzero_si512();
-
-  // keccak state, rows 3:
-  // - column 1 (a16), lane 0: set high bit of last byte of shake256 rate
-  // - column 1 (a16), other lanes: unused (all zero)
-  // - other columns: all zero
-  a15 = _mm512_setzero_si512();
-  a16 = _mm512_maskz_set1_epi64(1, 0x8000000000000000ULL);
-  a17 = _mm512_setzero_si512();
-  a18 = _mm512_setzero_si512();
-  a19 = _mm512_setzero_si512();
-
-  // keccak state, row 4 (all zero)
-  a20 = _mm512_setzero_si512();
-  a21 = _mm512_setzero_si512();
-  a22 = _mm512_setzero_si512();
-  a23 = _mm512_setzero_si512();
-  a24 = _mm512_setzero_si512();
-
-  {
-    PERMUTE_STATES_AVX512();
-
-    // At this point the keccak permutation is finished and we have the
-    // following in 25 avx512 registers (a0-a24):
-    //
-    // - lanes 0: permuted shake256 state for e2
-    {
-      // a0-a7 transpose
-      TRANSPOSE_8_TO_1(a0, a1, a2, a3, a4, a5, a6, a7);
-
-      // loop over 16-byte chunks in t0 and expand into 32 e2 coefficients
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 4; i++) {
-        // sample coefficients
-        SAMPLE_32_CBD2_COEFS(t0, 24, 32 * i); // e2
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-
-    {
-      // a8-a15 transpose
-      TRANSPOSE_8_TO_1(a8, a9, a10, a11, a12, a13, a14, a15);
-
-      // loop over 16-byte chunks in t0 and expand into 32 e2 coefficients
-      __m512i cbd2_ids = CBD2_ID_VALS;
-      for (size_t i = 0; i < 4; i++) {
-        // sample coefficients
-        SAMPLE_32_CBD2_COEFS(t0, 24, 128 + 32 * i); // e2
-
-        // increment byte ids
-        cbd2_ids = _mm512_add_epi8(cbd2_ids, CBD2_STEP);
-      }
-    }
-  }
-}
-#endif /* BACKEND == BACKEND_AVX512 */
-
-#if BACKEND == BACKEND_NEON
-/**
- * Sample polynomials for pke1024_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[2,0], A[3,0], A[0,1],
- * A[1,1], A[2,1], A[3,1], A[0,2], A[1,2], A[2,2], A[3,2], A[0,3],
- * A[1,3], A[2,3], A[3,3], r[0], r[1], r[2], r[3], e1[0], e1[1], e1[2],
- * e1[3], and e2.
- *
- * @note Neon implementation.
- *
- * @param[out] out 25 output polynomials.
- * @param[in] a_seed A seed (32 bytes).
- * @param[in] s_seed r, e1, and e2 seed (32 bytes).
- */
-static inline void pke1024_encrypt_sample_neon(poly_t out[static 25], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
-  const uint64_t * const ap = (uint64_t*) a_seed; // A hat matrix seed
-  const uint64_t * const sp = (uint64_t*) s_seed; // s and e vector seed
-
-  neon_ahat_polys(out +  0, ap, 0x0000, 0x0100); // A[0,0], A[1,0]
-  neon_ahat_polys(out +  2, ap, 0x0200, 0x0300); // A[2,0], A[3,0]
-  neon_ahat_polys(out +  4, ap, 0x0001, 0x0101); // A[0,1], A[1,1]
-  neon_ahat_polys(out +  6, ap, 0x0201, 0x0301); // A[2,1], A[3,1]
-  neon_ahat_polys(out +  8, ap, 0x0002, 0x0102); // A[0,2], A[1,2]
-  neon_ahat_polys(out + 10, ap, 0x0202, 0x0302); // A[2,2], A[3,2]
-  neon_ahat_polys(out + 12, ap, 0x0003, 0x0103); // A[0,3], A[1,3]
-  neon_ahat_polys(out + 14, ap, 0x0203, 0x0303); // A[2,3], A[3,3]
-  neon_cbd2_polys(out + 16, sp, 0x00, 0x01); // r[0], r[1]
-  neon_cbd2_polys(out + 18, sp, 0x02, 0x03); // r[2], r[3]
-  neon_cbd2_polys(out + 20, sp, 0x04, 0x05); // e1[0], e1[1]
-  neon_cbd2_polys(out + 22, sp, 0x06, 0x07); // e1[2], e1[3]
-  neon_cbd2_poly(out + 24, sp, 0x08); // e2
-}
-#endif /* BACKEND == BACKEND_NEON */
-
-#if BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD)
-/**
- * Sample polynomials for pke1024_encrypt().
- *
- * The output polynomials are: A[0,0], A[1,0], A[2,0], A[3,0], A[0,1],
- * A[1,1], A[2,1], A[3,1], A[0,2], A[1,2], A[2,2], A[3,2], A[0,3],
- * A[1,3], A[2,3], A[3,3], r[0], r[1], r[2], r[3], e1[0], e1[1], e1[2],
- * e1[3], and e2.
- *
- * @note Scalar implementation.
- *
- * @param[out] out 25 output polynomials.
- * @param[in] a_seed A seed (32 bytes).
- * @param[in] s_seed r, e1, and e2 seed (32 bytes).
- */
-static inline void pke1024_encrypt_sample_scalar(poly_t out[static 25], const uint8_t a_seed[static 32], const uint8_t s_seed[static 32]) {
-  // sample A hat transposed matrix polynomial coefficients from T_q (NTT)
-  // (note: i and j are positions are swapped vs `pke1024_keygen()`)
-  for (size_t i = 0; i < PKE1024_K; i++) {
-    for (size_t j = 0; j < PKE1024_K; j++) {
-      poly_sample_ntt(out + (PKE1024_K * i + j), a_seed, i, j);
-    }
-  }
-
-  // sample r vector from CBD(2) (PKE1024_ETA1)
-  for (size_t i = 0; i < PKE1024_K; i++) {
-    poly_sample_cbd2(out + 16 + i, s_seed, i);
-  }
-
-  // sample e1 vector from CBD(2) (PKE1024_ETA2)
-  for (size_t i = 0; i < PKE1024_K; i++) {
-    poly_sample_cbd2(out + 20 + i, s_seed, PKE1024_K + i);
-  }
-
-  // sample e2 polynomial from CBD(2) (PKE1024_ETA2)
-  poly_sample_cbd2(out + 24, s_seed, 2 * PKE1024_K);
-}
-#endif /* BACKEND == BACKEND_SCALAR || defined(TEST_FIPS203IPD) */
-
-#if BACKEND == BACKEND_AVX512
-#define pke1024_keygen_sample pke1024_keygen_sample_avx512
-#define pke1024_encrypt_sample pke1024_encrypt_sample_avx512
-#elif BACKEND == BACKEND_NEON
-#define pke1024_keygen_sample pke1024_keygen_sample_neon
-#define pke1024_encrypt_sample pke1024_encrypt_sample_neon
-#elif BACKEND == BACKEND_SCALAR
-#define pke1024_keygen_sample pke1024_keygen_sample_scalar
-#define pke1024_encrypt_sample pke1024_encrypt_sample_scalar
-#else
-#error "unknown backend"
-#endif /* BACKEND */
-
-/**
- * Generate PKE1024 encryption and decryption key from given 32-byte
- * seed.
- *
- * @param[out] ek PKE1024 encryption key (1184 bytes).
- * @param[out] dk PKE1024 decryption key (1152 bytes).
- * @param[in] seed Random seed (32 bytes).
- */
-static inline void pke1024_keygen(uint8_t ek[static PKE1024_EK_SIZE], uint8_t dk[static PKE1024_DK_SIZE], const uint8_t seed[static 32]) {
-  // get sha3-512 hash of seed, get rho and sigma (each 32 bytes)
-  uint8_t rs[64] = { 0 }; // rho = rs[0,31], sigma = rs[32,63]
-  sha3_512(seed, 32, rs); // rho, sigma = sha3-512(seed)
-
-  // sample A, s, and e polynomial coefficients
-  poly_t ps[24] = { 0 };
-  pke1024_keygen_sample(ps, rs);
-  poly_t *a = ps, *s = ps + 16, *e = ps + 20;
-
-  // apply NTT to polynomial coefficients (R_q -> T_q)
-  vec4_ntt(s);
-  vec4_ntt(e);
-
-  // t = As + e (NTT)
-  poly_t t[PKE1024_K] = { 0 };
-  mat4_mul(t, a, s); // t = As
-  vec4_add(t, e); // t += e
-
-  // ek <- t
-  vec4_encode(ek, t);
-
-  // ek <- t || rho
-  memcpy(ek + (PKE1024_K * 384), rs, 32);
-
-  // dk <- s (NTT)
-  vec4_encode(dk, s);
-}
-
-/**
- * Encrypt 32-byte message `m` using PKE1024 encryption key `ek` and
- * randomness `enc_rand` and store the PKE1024 ciphertext in output
- * buffer `ct`.
- *
- * @param[out] ct Output PKE1024 ciphertext buffer (1568 bytes).
- * @param[in] ek PKE1024 encryption key (1568 bytes).
- * @param[in] m Plaintext message (32 bytes).
- * @param[in] enc_rand Randomness seed (32 bytes).
- */
-static inline void pke1024_encrypt(uint8_t ct[static PKE1024_CT_SIZE], const uint8_t ek[static PKE1024_EK_SIZE], const uint8_t m[static 32], const uint8_t enc_rand[static 32]) {
-  // decode t from first 1536 bytes of ek
-  poly_t t[PKE1024_K] = { 0 };
-  vec4_decode(t, ek);
-
-  // read rho from ek (32 bytes)
-  const uint8_t * const rho = ek + 384 * PKE1024_K;
-
-  // sample A, r, e1, and e2 polynomial coefficients
-  poly_t ps[25] = { 0 };
-  pke1024_encrypt_sample(ps, rho, enc_rand);
-  poly_t *a = ps, *r = ps + 16, *e1 = ps + 20, *e2 = ps + 24;
-
-  vec4_ntt(r); // r = NTT(r)
-
-  // u = Ar + e1
-  poly_t u[PKE1024_K] = { 0 };
-  mat4_mul(u, a, r);  // u = (A*r)
-  vec4_inv_ntt(u);    // u = InvNTT(u)
-  vec4_add(u, e1);    // u += e1
-
-  // encode u, append to ct
-  vec4_encode_11bit(ct, u);
-
-  // decode message `m` into polynomial `mu`
-  //
-  // each bit of message `m` set to 1 is decoded as a coefficient of
-  // value 1665 in polynomial `mu`, and each bit set to 0 is decoded as
-  // a coefficient of value 0 in polynomial `mu`.
-  poly_t mu = { 0 };
-  poly_decode_1bit(&mu, m);
-
-  // v = tr + e2 + mu
-  poly_t v = { 0 };
-  vec4_dot(&v, t, r);     // v = t * r
-  poly_inv_ntt(&v);       // v = InvNTT(v)
-  poly_add2(&v, e2, &mu); // v += e2 + mu
-
-  // encode v, append to ct
-  poly_encode_5bit(ct + 32 * PKE1024_DU * PKE1024_K, &v);
-}
-
-/**
- * Decrypt 32-byte plaintext message from PKE1024 ciphertext `ct` using
- * PKE1024 decryption key `dk` and store the result in output buffer `m`.
- *
- * @param[out] m Output plaintext message (32 bytes).
- * @param[in] dk PKE1024 decryption key (1536 bytes).
- * @param[in] ct Input ciphertext buffer (1568 bytes).
- */
-static inline void pke1024_decrypt(uint8_t m[static 32], const uint8_t dk[static PKE1024_DK_SIZE], const uint8_t ct[PKE1024_CT_SIZE]) {
-  // decode u
-  poly_t u[PKE1024_K] = { 0 };
-  vec4_decode_11bit(u, ct);
-
-  // decode v
-  poly_t v = { 0 };
-  poly_decode_5bit(&v, ct + 32 * PKE1024_DU * PKE1024_K);
-
-  // decode ŝ
-  poly_t s[PKE1024_K] = { 0 };
-  vec4_decode(s, dk);
-
-  poly_t su = { 0 }; // su = s * u
-  vec4_ntt(u); // u = NTT(u)
-  vec4_dot(&su, s, u); // su = s * u
-  poly_inv_ntt(&su); // su = InvNTT(su)
-
-  poly_t w = v;
-  poly_sub(&w, &su); // w -= su
-
-  // encode w coefficients as 1-bit, write to output
-  poly_encode_1bit(m, &w);
-}
-
-/**
- * @brief Generate KEM1024 encapsulation key `ek` and decapsulation key
- * `dk` from 64 byte random seed `seed`.
- * @ingroup kem1024
- *
- * @warning `seed` **must** be 64 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 256 bits of strength.
- *
- * @param[out] ek KEM1024 encapsulation key (1568 bytes).
- * @param[out] dk KEM1024 decapsulation key (3168 bytes).
- * @param[in] seed Random seed (64 bytes).
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem1024_keygen(uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]) {
-  const uint8_t * const z = seed; // random implicit rejection seed (32 bytes)
-  const uint8_t * const d = seed + 32; // pke1024_keygen() random seed (32 bytes)
-
-  // generate ek and dk
-  pke1024_keygen(ek, dk, d);
-
-  // KEM: append ek, sha3-256(ek), and z to dk
-  memcpy(dk + PKE1024_DK_SIZE, ek, PKE1024_EK_SIZE);
-  sha3_256(ek, PKE1024_EK_SIZE, dk + PKE1024_DK_SIZE + PKE1024_EK_SIZE);
-  memcpy(dk + PKE1024_DK_SIZE + PKE1024_EK_SIZE + 32, z, 32);
-}
-
-/**
- * @brief Generate KEM1024 shared key `key` and ciphertext `ct` from given
- * encapsulation key `ek` and randomness `seed`.
- * @ingroup kem1024
- *
- * @warning `seed` **must** be 32 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 256 bits of strength.
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1568 bytes).
- * @param[in] ek KEM1024 encapsulation key (1568 bytes).
- * @param[in] seed Random seed (32 bytes).
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem1024_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]) {
-  uint8_t data[64] = { 0 };
-  memcpy(data, seed, 32); // append seed
-  sha3_256(ek, PKE1024_EK_SIZE, data + 32); // append sha3-256(ek)
-
-  uint8_t kr[64] = { 0 };
-  sha3_512(data, 64, kr); // (K, r) <- sha3-512(data)
-  const uint8_t * const r = kr + 32; // get r
-
-  memcpy(key, kr, 32); // copy shared key to output
-  pke1024_encrypt(ct, ek, seed, r); // ct <- pke.encrypt(ek, seed, r)
-}
-
-/**
- * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM1024
- * decapsulation key `dk` with implicit rejection.
- * @ingroup kem1024
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1568 bytes).
- * @param[in] dk KEM1024 decapsulation key (3168 bytes).
- */
-void fips203ipd_kem1024_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE]) {
-  const uint8_t * const dk_pke = dk;
-  const uint8_t * const ek_pke = dk + 384 * PKE1024_K;
-  const uint8_t * const h = dk + (2 * 384 * PKE1024_K + 32);
-  const uint8_t * const z = dk + (2 * 384 * PKE1024_K + 64);
-
-  uint8_t mh[64] = { 0 };
-  pke1024_decrypt(mh, dk_pke, ct); // decrypt ct into mh
-  memcpy(mh + 32, h, 32); // copy hash
-
-  uint8_t kr[64] = { 0 };
-  sha3_512(mh, 64, kr); // (K', r') <- sha3-512(m || r)
-
-  // zc = z || ct
-  uint8_t zc[32 + PKE1024_CT_SIZE] = { 0 };
-  memcpy(zc, z, 32);
-  memcpy(zc + 32, ct, PKE1024_CT_SIZE);
-
-  // rk: generate implicit rejection key from z and ciphertext
-  uint8_t k_rej[32] = { 0 };
-  shake256(zc, sizeof(zc), k_rej, sizeof(k_rej)); // K_rej = J(z||c)
-
-  // re-encrypt `k` with PKE768 key `ek_pke`
-  // (ct2 is used for implicit rejection check below)
-  uint8_t ct2[PKE1024_CT_SIZE] = { 0 };
-  pke1024_encrypt(ct2, ek_pke, mh, kr + 32); // ct2 <- pke.encrypt(ek, m', r')
-
-  // compare ct and ct2 using constant-time comparison.  if they match,
-  // then copy decapsulated key to output buffer `key`.  if `ct` and `ct2`
-  // don't match, then copy the implicit rejection key `k_rej` to the
-  // output buffer `key`.
-  ct_copy(key, ct_diff(ct, ct2, PKE1024_CT_SIZE), kr, k_rej);
-}
-
-/**
- * @brief Get name of backend.
- * @ingroup misc
- *
- * @note Returns a read-only string which must not be freed by the
- * caller.
- */
-const char *fips203ipd_backend(void) {
-#if BACKEND == BACKEND_AVX512
-  return "avx512";
-#elif BACKEND == BACKEND_NEON
-  return "neon";
-#elif BACKEND == BACKEND_SCALAR
-  return "scalar";
-#else
-#error "unknown backend"
-#endif /* BACKEND */
-}
-
-#ifdef TEST_FIPS203IPD
-#include <stdlib.h> // exit()
-#include <stdio.h> // fprintf()
-#include <stddef.h> // size_t
-#include "rand-bytes.h" // rand_bytes()
-#include "hex.h" // hex_write()
-
-// number of iterations in `test_fips203ipd_*_roundtrip()` tests
-// (keep this relatively low so test suite doesn't take forever)
-#define NUM_ROUNDTRIP_TIMES 10
-
-// Print test function name, test name, and hex-encoded got and expected
-// buffers to standard error.
-static void fail_test(const char * const func, const char * const name, const uint8_t * const got, const size_t got_len, const uint8_t * const exp, const size_t exp_len) {
-  fprintf(stderr, "%s(\"%s\") failed, got:\n", func, name);
-  hex_write(stderr, got, got_len);
-  fputs("\nexp:\n", stderr);
-  hex_write(stderr, exp, exp_len);
-  fputs("\n", stderr);
-}
-
-// Verify that shared keys `k0` and `k1` are equal.
-//
-// Prints an error message and exits with an error code if the keys are
-// not equal.
-//
-// Used by `test_fips203ipd_kem{512,768,1024}_roundtrip()` functions.
-static void compare_keys(const char *func, const uint8_t k0[static 32], const uint8_t k1[static 32], const uint8_t keygen_seed[static 64], const uint8_t encaps_seed[static 32]) {
-  // compare keys
-  if (memcmp(k0, k1, 32)) {
-    fprintf(stderr, "%s: k0 != k1:\nk0 = ", func);
-    hex_write(stderr, k0, 32);
-    fputs("\nk1 = ", stderr);
-    hex_write(stderr, k1, 32);
-    fputs("\nkeygen_seed = ", stderr);
-    hex_write(stderr, keygen_seed, 64);
-    fputs("\nencaps_seed = ", stderr);
-    hex_write(stderr, encaps_seed, 32);
-    fputs("\n", stderr);
-    exit(-1);
-  }
-}
-
-// Write polynomial coefficients to given file handle
-static void poly_write(FILE *fh, const poly_t * const p) {
-  // find index of maximum non-zero coefficient
-  size_t max = 0;
-  for (size_t i = 255; i > max; i--) {
-    if (p->cs[i]) {
-      max = i;
-    }
-  }
-
-  // only truncate output if threshold is met
-  max = (max && max < 250) ? max : 256;
-
-  for (size_t i = 0; i < max; i++) {
-    fprintf(fh, "%s%d", (i ? ", " : ""), p->cs[i]);
-  }
-
-  if (max && max < 250) {
-    fputs(", ...", fh);
-  }
-}
-
-// Print test function name, test name, and got polynomial and expected
-// polynomial to standard error.
-static void fail_poly_test(const char * const func, const char * const name, const poly_t * const got, const poly_t * const exp) {
-  fprintf(stderr, "%s(\"%s\") failed, got:\n", func, name);
-  poly_write(stderr, got);
-  fputs("\nexp:\n", stderr);
-  poly_write(stderr, exp);
-  fputs("\n", stderr);
-
-  // print differences
-  size_t num = 0;
-  for (size_t i = 0; i < 256; i++) {
-    if (got->cs[i] != exp->cs[i]) {
-      const char *p = (num == 0) ? "diffs:" : ",";
-      fprintf(stderr, "%s %zu (got %d exp %d)", p, i, got->cs[i], exp->cs[i]);
-      num++;
-    }
-  }
-  fputs("\n", stderr);
-}
-
-// define fail_vecN_test() and test_vecN_{encode,decode}()
-// TODO: macro should be handle all vector test fns, so each
-// vector is just a series of constant arrays followed by
-// DEF_TEST_VEC_FNS(N)
-#define DEF_TEST_VEC_FNS(N) \
-  static void fail_vec ## N ## _test(const char * const func, const char * const name, const poly_t got[static N], const poly_t exp[static N]) { \
-    fprintf(stderr, "%s(\"%s\") failed:\n", func, name); \
-  \
-    for (size_t i = 0; i < 2; i++) { \
-      fprintf(stderr, "got[%zu] = ", i); \
-      poly_write(stderr, got); \
-      fprintf(stderr, "\nexp[%zu] = ", i); \
-      poly_write(stderr, exp); \
-      fputs("\n", stderr); \
-  \
-      size_t num = 0; \
-      for (size_t j = 0; j < 256; j++) { \
-        if (got[i].cs[j] != exp[i].cs[j]) { \
-          const char *p = (num == 0) ? "diffs:" : ","; \
-          fprintf(stderr, "%s %zu (got %d exp %d)", p, j, got[i].cs[j], exp[i].cs[j]); \
-          num++; \
-        } \
-      } \
-      fputs("\n", stderr); \
-    } \
-  } \
-  \
-  static void test_vec ## N ## _encode(void) { \
-    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
-      /* encode vector */ \
-      uint8_t buf[N*384]; \
-      vec ## N ## _encode(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
-   \
-      /* decode buffer */ \
-      poly_t got[N]; \
-      vec ## N ## _decode_scalar(got, buf); \
-       \
-      /* check for expected value */ \
-      if (memcmp(&got, &(VEC ## N ## _ENCODE_TESTS[i].val), sizeof(got))) { \
-        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, VEC ## N ## _ENCODE_TESTS[i].val); \
-      } \
-    } \
-  } \
-   \
-  static void test_vec ## N ## _decode(void) { \
-    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
-      /* encode vector */ \
-      uint8_t buf[N*384]; \
-      vec ## N ## _encode_scalar(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
-   \
-      /* decode buffer */ \
-      poly_t got[N]; \
-      vec ## N ## _decode(got, buf); \
-       \
-      /* check for expected value */ \
-      if (memcmp(&got, &(VEC ## N ## _ENCODE_TESTS[i].val), sizeof(got))) { \
-        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, VEC ## N ## _ENCODE_TESTS[i].val); \
-      } \
-    } \
-  }
-
-// define test functions for encoding/decoding N-element vectors with
-// B-bit coefficients
-#define DEF_TEST_VEC_BIT_FNS(N, B) \
-  static void test_vec ## N ## _encode_ ## B ## bit(void) { \
-    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
-      /* get expected result */ \
-      poly_t exp[N]; \
-      { \
-        uint8_t exp_buf[N*32*B]; \
-        vec ## N ## _encode_ ## B ## bit_scalar(exp_buf, VEC ## N ## _ENCODE_TESTS[i].val); \
-        vec ## N ## _decode_ ## B ## bit_scalar(exp, exp_buf); \
-      } \
-      \
-      /* encode vector */ \
-      uint8_t buf[N*32*B]; \
-      vec ## N ## _encode_ ## B ## bit(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
-      \
-      /* decode buffer */ \
-      poly_t got[N]; \
-      vec ## N ## _decode_ ## B ## bit_scalar(got, buf); \
-       \
-      /* check for expected value */ \
-      if (memcmp(got, exp, sizeof(got))) { \
-        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, exp); \
-      } \
-    } \
-  } \
-   \
-  static void test_vec ## N ## _decode_ ## B ## bit(void) { \
-    for (size_t i = 0; i < sizeof(VEC ## N ## _ENCODE_TESTS)/sizeof(VEC ## N ## _ENCODE_TESTS[0]); i++) { \
-      /* encode vector */ \
-      uint8_t buf[N*32*B]; \
-      vec ## N ## _encode_ ## B ## bit_scalar(buf, VEC ## N ## _ENCODE_TESTS[i].val); \
-   \
-      /* get expected result */ \
-      poly_t exp[N]; \
-      vec ## N ## _decode_ ## B ## bit_scalar(exp, buf); \
-   \
-      /* decode buffer */ \
-      poly_t got[N]; \
-      vec ## N ## _decode_ ## B ## bit(got, buf); \
-       \
-      /* check for expected value */ \
-      if (memcmp(got, exp, sizeof(got))) { \
-        fail_vec ## N ## _test(__func__, VEC ## N ## _ENCODE_TESTS[i].name, got, exp); \
-      } \
-    } \
-  }
-
-static void test_sha3_256(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t msg[256]; // test message
-    const size_t len; // test message length
-    const uint8_t exp[32]; // expected hash
-  } tests[] = {{
-    .name = "empty",
-    .msg = "",
-    .len = 0,
-    .exp = {
-      0xa7, 0xff, 0xc6, 0xf8, 0xbf, 0x1e, 0xd7, 0x66,
-      0x51, 0xc1, 0x47, 0x56, 0xa0, 0x61, 0xd6, 0x62,
-      0xf5, 0x80, 0xff, 0x4d, 0xe4, 0x3b, 0x49, 0xfa,
-      0x82, 0xd8, 0x0a, 0x4b, 0x80, 0xf8, 0x43, 0x4a,
-    },
-  }, {
-    .name = "asdf",
-    .msg = "asdf",
-    .len = 4,
-    .exp = {
-      0xdd, 0x27, 0x81, 0xf4, 0xc5, 0x1b, 0xcc, 0xdb,
-      0xe2, 0x3e, 0x4d, 0x39, 0x8b, 0x8a, 0x82, 0x26,
-      0x1f, 0x58, 0x5c, 0x27, 0x8d, 0xbb, 0x4b, 0x84,
-      0x98, 0x9f, 0xea, 0x70, 0xe7, 0x67, 0x23, 0xa9,
-    },
-  }, {
-    .name = "a-134",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 134,
-    .exp = {
-      0x58, 0xb9, 0x70, 0xc3, 0x7a, 0xc2, 0xd6, 0x5b,
-      0x59, 0x9b, 0x69, 0x18, 0x68, 0xa6, 0x14, 0x01,
-      0xa5, 0x01, 0xc4, 0x0f, 0x23, 0x5d, 0x55, 0xf0,
-      0x59, 0xd3, 0x9a, 0x94, 0x2f, 0x41, 0xdc, 0xee,
-    },
-  }, {
-    .name = "a-135",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 135,
-    .exp = {
-      0x80, 0x94, 0xbb, 0x53, 0xc4, 0x4c, 0xfb, 0x1e,
-      0x67, 0xb7, 0xc3, 0x04, 0x47, 0xf9, 0xa1, 0xc3,
-      0x36, 0x96, 0xd2, 0x46, 0x3e, 0xcc, 0x1d, 0x9c,
-      0x92, 0x53, 0x89, 0x13, 0x39, 0x28, 0x43, 0xc9,
-    },
-  }, {
-    .name = "a-136",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 136,
-    .exp = {
-      0x3f, 0xc5, 0x55, 0x9f, 0x14, 0xdb, 0x8e, 0x45,
-      0x3a, 0x0a, 0x30, 0x91, 0xed, 0xbd, 0x2b, 0xc2,
-      0x5e, 0x11, 0x52, 0x8d, 0x81, 0xc6, 0x6f, 0xa5,
-      0x70, 0xa4, 0xef, 0xdc, 0xc2, 0x69, 0x5e, 0xe1,
-    },
-  }, {
-    .name = "ff-256",
-    .msg = {
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    },
-    .len = 256,
-    .exp = {
-      0xea, 0xa5, 0x7c, 0x69, 0x9a, 0x7a, 0x61, 0x4f,
-      0x9d, 0x96, 0x1e, 0x42, 0xd8, 0xb1, 0x2a, 0x93,
-      0x54, 0x6e, 0x8e, 0x80, 0xd3, 0x1f, 0x5c, 0xfc,
-      0xc4, 0x3f, 0x95, 0x39, 0xed, 0x06, 0x30, 0x7a,
-    },
-  }, {
-    .name = "a-210",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 210,
-    .exp = {
-      0xb4, 0x12, 0xbd, 0x70, 0xce, 0x67, 0xeb, 0x59,
-      0x0b, 0xb2, 0x25, 0x09, 0xef, 0x4e, 0x68, 0x7e,
-      0x02, 0xb4, 0x8e, 0x07, 0xd2, 0xbb, 0xd7, 0xbb,
-      0x9a, 0xfb, 0x58, 0x70, 0xfd, 0x14, 0xc1, 0x13,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
-    uint8_t got[32] = { 0 };
-    sha3_256(tests[i].msg, tests[i].len, got);
-    if (memcmp(got, tests[i].exp, sizeof(got))) {
-      fail_test(__func__, tests[i].name, got, 32, tests[i].exp, 32);
-    }
-  }
-}
-
-static void test_sha3_512(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t msg[256]; // test message
-    const size_t len; // test message length
-    const uint8_t exp[64]; // expected hash
-  } tests[] = {{
-    .name = "empty",
-    .msg = "",
-    .len = 0,
-    .exp = {
-      0xa6, 0x9f, 0x73, 0xcc, 0xa2, 0x3a, 0x9a, 0xc5,
-      0xc8, 0xb5, 0x67, 0xdc, 0x18, 0x5a, 0x75, 0x6e,
-      0x97, 0xc9, 0x82, 0x16, 0x4f, 0xe2, 0x58, 0x59,
-      0xe0, 0xd1, 0xdc, 0xc1, 0x47, 0x5c, 0x80, 0xa6,
-      0x15, 0xb2, 0x12, 0x3a, 0xf1, 0xf5, 0xf9, 0x4c,
-      0x11, 0xe3, 0xe9, 0x40, 0x2c, 0x3a, 0xc5, 0x58,
-      0xf5, 0x00, 0x19, 0x9d, 0x95, 0xb6, 0xd3, 0xe3,
-      0x01, 0x75, 0x85, 0x86, 0x28, 0x1d, 0xcd, 0x26,
-    },
-  }, {
-    .name = "asdf",
-    .msg = "asdf",
-    .len = 4,
-    .exp = {
-      0x8d, 0x88, 0xcf, 0x5b, 0x20, 0xf5, 0x3a, 0xcd,
-      0x7a, 0xe1, 0x47, 0x9b, 0x5b, 0x36, 0xdc, 0x20,
-      0x21, 0x75, 0x3b, 0x04, 0x99, 0x02, 0xc7, 0x72,
-      0x47, 0xbb, 0x27, 0xb1, 0x31, 0xb3, 0x00, 0xbd,
-      0x3c, 0xa8, 0xbe, 0xef, 0x28, 0x75, 0x6d, 0xce,
-      0x27, 0xb8, 0x99, 0x08, 0x67, 0xc4, 0x57, 0x7a,
-      0x25, 0x35, 0xe7, 0xe3, 0xb7, 0x51, 0x41, 0x39,
-      0x9c, 0xa1, 0xa9, 0x4c, 0xc8, 0x4b, 0x0e, 0xb9,
-    },
-  }, {
-    .name = "a-134",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 134,
-    .exp = {
-      0x4e, 0x72, 0xa4, 0xf6, 0x55, 0x99, 0xa2, 0x47,
-      0x2a, 0x66, 0xf8, 0xa8, 0xd6, 0xcf, 0xb3, 0x84,
-      0xb7, 0xd3, 0x4f, 0x52, 0xec, 0xaa, 0x00, 0xe9,
-      0xf0, 0x66, 0x82, 0x0b, 0x0e, 0xdc, 0x1f, 0xcc,
-      0x9c, 0xf3, 0x12, 0x0b, 0x81, 0x46, 0x89, 0xbc,
-      0x62, 0xb7, 0x72, 0x0f, 0x4e, 0x4c, 0x99, 0x3d,
-      0xa0, 0x84, 0x08, 0x27, 0xf6, 0x95, 0x03, 0x8a,
-      0x82, 0x18, 0x69, 0xe8, 0xa6, 0x27, 0x60, 0xe8,
-    },
-  }, {
-    .name = "a-135",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 135,
-    .exp = {
-      0x4b, 0xe1, 0xe7, 0x02, 0x76, 0xf9, 0x12, 0x2f,
-      0x47, 0x0a, 0x54, 0xc2, 0x72, 0x40, 0xc7, 0xd0,
-      0x70, 0x9d, 0xab, 0x74, 0x69, 0x95, 0x8b, 0x48,
-      0xa9, 0x50, 0xd6, 0x9d, 0xa6, 0xdd, 0x07, 0xca,
-      0x13, 0x58, 0x26, 0xd9, 0xd2, 0x3e, 0x97, 0x5c,
-      0xb9, 0x28, 0x3e, 0x7d, 0x23, 0x6e, 0xf9, 0x8a,
-      0x80, 0x45, 0x1d, 0xca, 0x8e, 0x31, 0x1f, 0x52,
-      0x09, 0x63, 0x08, 0xb2, 0xc8, 0xd7, 0x0c, 0xc7,
-    },
-  }, {
-    .name = "a-136",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 136,
-    .exp = {
-      0xe5, 0x03, 0x92, 0xc9, 0x1e, 0xd9, 0x57, 0x68,
-      0xc8, 0xdc, 0xf5, 0x2a, 0x12, 0xe5, 0xdb, 0x1e,
-      0xcd, 0x03, 0x47, 0xfb, 0x99, 0x5f, 0x7f, 0xf4,
-      0xea, 0x06, 0x99, 0x46, 0x49, 0xbb, 0xd1, 0xa0,
-      0xde, 0x7a, 0xe3, 0x6a, 0x62, 0xaa, 0xdc, 0x00,
-      0xa7, 0x04, 0xd7, 0x30, 0xb5, 0x2b, 0xda, 0x19,
-      0x1b, 0x72, 0x95, 0x1e, 0x2a, 0xfc, 0x9b, 0x6f,
-      0xb6, 0x82, 0x47, 0x87, 0xb2, 0x08, 0x62, 0x57,
-    },
-  }, {
-    .name = "ff-256",
-    .msg = {
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    },
-    .len = 256,
-    .exp = {
-      0x02, 0x3a, 0x91, 0x27, 0xcf, 0x29, 0x6d, 0x01,
-      0x12, 0x0e, 0x3d, 0xaa, 0x92, 0x76, 0x15, 0x23,
-      0x8e, 0x97, 0xdd, 0xb6, 0x33, 0x26, 0xe2, 0x89,
-      0xb3, 0x31, 0xe2, 0x25, 0xbe, 0x41, 0xea, 0xd5,
-      0x90, 0xf1, 0xdd, 0x5c, 0x80, 0x1d, 0x91, 0x03,
-      0xfe, 0x65, 0x7d, 0x23, 0x63, 0xbd, 0xb2, 0x66,
-      0xe7, 0x90, 0xb1, 0x89, 0x0b, 0x3d, 0xd5, 0x79,
-      0xdc, 0xa7, 0xf9, 0x1f, 0x5f, 0x4d, 0x98, 0x49,
-    },
-  }, {
-    .name = "a-210",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 210,
-    .exp = {
-      0x47, 0xfa, 0xd7, 0x8d, 0x72, 0x35, 0xe5, 0xcd,
-      0xb9, 0xd7, 0x23, 0x6c, 0xfc, 0xf2, 0x79, 0xdb,
-      0x0f, 0x8a, 0xcd, 0x5b, 0xf1, 0x7b, 0xdc, 0x74,
-      0x18, 0xe4, 0x29, 0xb7, 0x1a, 0x0a, 0x21, 0xb7,
-      0xed, 0xe8, 0x54, 0x64, 0xcf, 0x69, 0x44, 0x63,
-      0xff, 0x0e, 0x56, 0xf2, 0x8f, 0x04, 0xbf, 0x85,
-      0xc0, 0x85, 0xe1, 0x17, 0x6a, 0x47, 0xd7, 0x3b,
-      0xf2, 0x8b, 0xdb, 0xa0, 0x4f, 0x4a, 0xe7, 0x61,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
-    uint8_t got[64] = { 0 };
-    sha3_512(tests[i].msg, tests[i].len, got);
-    if (memcmp(got, tests[i].exp, sizeof(got))) {
-      fail_test(__func__, tests[i].name, got, 64, tests[i].exp, 64);
-    }
-  }
-}
-
-static void test_shake128_ctx(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t msg[256]; // test message
-    const size_t len; // test message length
-    const uint8_t exp[16]; // expected hash
-  } tests[] = {{
-    .name = "empty",
-    .msg = "",
-    .len = 0,
-    .exp = {
-      0x7f, 0x9c, 0x2b, 0xa4, 0xe8, 0x8f, 0x82, 0x7d,
-      0x61, 0x60, 0x45, 0x50, 0x76, 0x05, 0x85, 0x3e,
-    },
-  }, {
-    .name = "asdf",
-    .msg = "asdf",
-    .len = 4,
-    .exp = {
-      0xef, 0x02, 0x2c, 0xc5, 0x3c, 0x74, 0xb3, 0x28,
-      0x43, 0xf9, 0xc1, 0xf1, 0x14, 0x13, 0xd5, 0x9c,
-    },
-  }, {
-    .name = "a-134",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 134,
-    .exp = {
-      0xc8, 0x73, 0x5e, 0x5f, 0x6f, 0x15, 0xaf, 0xe5,
-      0x1a, 0x8c, 0x3b, 0x07, 0xc4, 0xc6, 0x8d, 0x86,
-    },
-  }, {
-    .name = "a-135",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 135,
-    .exp = {
-      0xa5, 0xe2, 0xb2, 0x27, 0x8d, 0x1b, 0x75, 0x86,
-      0x6c, 0x78, 0x77, 0xa0, 0xff, 0xa2, 0x47, 0x37,
-    },
-  }, {
-    .name = "a-136",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 136,
-    .exp = {
-      0x0d, 0x01, 0x58, 0xd4, 0x46, 0x78, 0x3a, 0x9b,
-      0x18, 0xa6, 0x90, 0x8c, 0x08, 0xbb, 0x5d, 0xe6,
-    },
-  }, {
-    .name = "ff-256",
-    .msg = {
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    },
-    .len = 256,
-    .exp = {
-      0xf3, 0x06, 0x93, 0x04, 0x16, 0x5c, 0x0e, 0xad,
-      0x13, 0x25, 0xb5, 0x26, 0x76, 0x05, 0x95, 0xed,
-    },
-  }, {
-    .name = "a-210",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 210,
-    .exp = {
-      0xb1, 0xb4, 0xf3, 0xad, 0x3a, 0x1f, 0x67, 0x60,
-      0xe3, 0x08, 0x67, 0xdd, 0x71, 0xb3, 0x49, 0xfa,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
-    for (size_t len = 1; len < tests[i].len; len++) {
-      // init xof
-      sha3_xof_t xof;
-      shake128_init(&xof);
-
-      // absorb
-      for (size_t ofs = 0; ofs < tests[i].len; ofs += len) {
-        const size_t absorb_len = MIN(tests[i].len - ofs, len);
-        if (!shake128_absorb(&xof, tests[i].msg + ofs, absorb_len)) {
-          fprintf(stderr, "%s(\"%s\", %zu) failed: shake128_absorb()\n", __func__, tests[i].name, len);
-          return;
-        }
-      }
-
-      // squeeze
-      uint8_t got[16] = { 0 };
-      shake128_squeeze(&xof, got, sizeof(got));
-
-      // check
-      if (memcmp(got, tests[i].exp, sizeof(got))) {
-        // build test name
-        char name[64];
-        snprintf(name, sizeof(name), "%s (%zu)", tests[i].name, len);
-
-        // fail test
-        fail_test(__func__, name, got, 16, tests[i].exp, 16);
-      }
-    }
-  }
-}
-
-static void test_shake256(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t msg[256]; // test message
-    const size_t len; // test message length
-    const uint8_t exp[32]; // expected hash
-  } tests[] = {{
-    .name = "empty",
-    .msg = "",
-    .len = 0,
-    .exp = {
-      0x46, 0xb9, 0xdd, 0x2b, 0x0b, 0xa8, 0x8d, 0x13,
-      0x23, 0x3b, 0x3f, 0xeb, 0x74, 0x3e, 0xeb, 0x24,
-      0x3f, 0xcd, 0x52, 0xea, 0x62, 0xb8, 0x1b, 0x82,
-      0xb5, 0x0c, 0x27, 0x64, 0x6e, 0xd5, 0x76, 0x2f,
-    },
-  }, {
-    .name = "asdf",
-    .msg = "asdf",
-    .len = 4,
-    .exp = {
-      0xf0, 0x0c, 0x15, 0x64, 0x33, 0x96, 0x61, 0x6a,
-      0x89, 0xa0, 0xcb, 0x79, 0x03, 0x9f, 0x74, 0x05,
-      0x75, 0xde, 0xfe, 0x9d, 0xbe, 0x30, 0x7c, 0xcc,
-      0xda, 0xf8, 0xae, 0x21, 0x0e, 0x1c, 0x9c, 0xc6,
-    },
-  }, {
-    .name = "a-134",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 134,
-    .exp = {
-      0xf1, 0xe0, 0x3f, 0x37, 0x8e, 0xb7, 0x79, 0x04,
-      0xba, 0x15, 0xbb, 0x64, 0x2a, 0x84, 0xb9, 0x0d,
-      0xe5, 0x2e, 0x29, 0x3e, 0xaf, 0xc2, 0x7c, 0xef,
-      0x05, 0x88, 0x3b, 0x16, 0x56, 0xae, 0xc3, 0x41,
-    },
-  }, {
-    .name = "a-135",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 135,
-    .exp = {
-      0x55, 0xb9, 0x91, 0xec, 0xe1, 0xe5, 0x67, 0xb6,
-      0xe7, 0xc2, 0xc7, 0x14, 0x44, 0x4d, 0xd2, 0x01,
-      0xcd, 0x51, 0xf4, 0xf3, 0x83, 0x2d, 0x08, 0xe1,
-      0xd2, 0x6b, 0xeb, 0xc6, 0x3e, 0x07, 0xa3, 0xd7,
-    },
-  }, {
-    .name = "a-136",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 136,
-    .exp = {
-      0x8f, 0xcc, 0x5a, 0x08, 0xf0, 0xa1, 0xf6, 0x82,
-      0x7c, 0x9c, 0xf6, 0x4e, 0xe8, 0xd1, 0x6e, 0x04,
-      0x43, 0x10, 0x63, 0x59, 0xca, 0x6c, 0x8e, 0xfd,
-      0x23, 0x07, 0x59, 0x25, 0x6f, 0x44, 0x99, 0x6a,
-    },
-  }, {
-    .name = "ff-256",
-    .msg = {
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    },
-    .len = 256,
-    .exp = {
-      0x3f, 0x25, 0xdf, 0x0e, 0x37, 0x17, 0x14, 0xdf,
-      0xb0, 0xcc, 0x3d, 0x96, 0x17, 0xe1, 0xa0, 0x71,
-      0x75, 0xa0, 0xf0, 0x84, 0xc7, 0x00, 0x29, 0x23,
-      0x5c, 0x72, 0x7c, 0x5a, 0x68, 0x5e, 0xf0, 0x14,
-    },
-  }, {
-    .name = "a-210",
-    .msg = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
-    .len = 210,
-    .exp = {
-      0xc9, 0xe2, 0xd9, 0x58, 0xf2, 0xdd, 0x3d, 0x97,
-      0x53, 0x8a, 0x1b, 0xac, 0x1b, 0x4e, 0xb3, 0x2e,
-      0x28, 0x23, 0x6b, 0x5d, 0xfc, 0xe0, 0x29, 0xfc,
-      0xc8, 0x73, 0xc0, 0xf2, 0x70, 0xe1, 0x3e, 0x9f,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(tests) / sizeof(tests[0]); i++) {
-    for (size_t len = 1; len < tests[i].len; len++) {
-      // run shake256
-      uint8_t got[32];
-      shake256(tests[i].msg, tests[i].len, got, sizeof(got));
-
-      // check
-      if (memcmp(got, tests[i].exp, sizeof(got))) {
-        // build test name
-        char name[64];
-        snprintf(name, sizeof(name), "%s (%zu)", tests[i].name, len);
-
-        // fail test
-        fail_test(__func__, name, got, 16, tests[i].exp, 16);
-      }
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t poly; // test polynomial
-} POLY_NTT_TESTS[] = {{
-  .name = "0-255",
-  .poly = {
-    .cs = {
-      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
-    },
-  },
-}, {
-  .name = "256-511",
-  .poly = {
-    .cs = {
-      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
-    },
-  },
-}, {
-  .name = "512-767",
-  .poly = {
-    .cs = {
-      512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
-    },
-  },
-}, {
-  .name = "3000-3255",
-  .poly = {
-    .cs = {
-      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,
-    },
-  },
-}, {
-  .name = "3073-3328",
-  .poly = {
-    .cs = {
-      3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328,
-    },
-  },
-}};
-
-static void test_poly_ntt_scalar_roundtrip(void) {
-  for (size_t i = 0; i < sizeof(POLY_NTT_TESTS)/sizeof(POLY_NTT_TESTS[0]); i++) {
-    // copy poly
-    poly_t got = POLY_NTT_TESTS[i].poly;
-
-    // calculate InvNTT(NTT(poly))
-    poly_ntt_scalar(&got);
-    poly_inv_ntt_scalar(&got);
-
-    // check for expected value
-    if (memcmp(&got, &POLY_NTT_TESTS[i].poly, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_NTT_TESTS[i].name, &got, &(POLY_NTT_TESTS[i].poly));
-    }
-  }
-}
-
-static void test_poly_ntt_avx512_roundtrip(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_NTT_TESTS)/sizeof(POLY_NTT_TESTS[0]); i++) {
-    // copy poly
-    poly_t got = POLY_NTT_TESTS[i].poly;
-
-    // calculate InvNTT(NTT(poly))
-    poly_ntt_avx512(&got);
-    poly_inv_ntt_avx512(&got);
-
-    // check for expected value
-    if (memcmp(&got, &POLY_NTT_TESTS[i].poly, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_NTT_TESTS[i].name, &got, &(POLY_NTT_TESTS[i].poly));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_ntt_neon_roundtrip(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_NTT_TESTS)/sizeof(POLY_NTT_TESTS[0]); i++) {
-    // copy poly
-    poly_t got = POLY_NTT_TESTS[i].poly;
-
-    // calculate InvNTT(NTT(poly))
-    poly_ntt_neon(&got);
-    poly_inv_ntt_neon(&got);
-
-    // check for expected value
-    if (memcmp(&got, &POLY_NTT_TESTS[i].poly, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_NTT_TESTS[i].name, &got, &(POLY_NTT_TESTS[i].poly));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static void test_poly_sample_ntt(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t x, y; // coordinates
-    const poly_t exp; // expected polynomial
-  } TESTS[] = {{
-    .name = "0, 0",
-    .x = 0,
-    .y = 0,
-    .exp = {
-      .cs = {
-        // expected coefficients, seed = { 0 }, x = 0, y = 0
-        0xb80, 0xbc9, 0x154, 0x4a0, 0xcab, 0x6ac, 0x99a, 0x8ed, 0xad4, 0x957, 0x19d, 0x102, 0x729, 0x601, 0x89b, 0xa78, 0xc62, 0x6d5, 0xaa9, 0x10a, 0x42e, 0x2e3, 0x4d5, 0x419, 0x556, 0x8b8, 0xb9c, 0x5bc, 0x5f7, 0x799, 0x59f, 0xa16, 0xa97, 0x8a1, 0x0bc, 0xc7c, 0xc9e, 0x529, 0x98b, 0x466, 0x056, 0x11e, 0x06b, 0x376, 0x075, 0xa95, 0xb2a, 0x541, 0x652, 0x182, 0xc5a, 0x6c6, 0x2c8, 0x9f4, 0x2c5, 0xb10, 0xc85, 0x825, 0xb55, 0x245, 0x9a4, 0x893, 0x95b, 0x82d, 0x747, 0xbd4, 0x617, 0xc6c, 0x7f3, 0x924, 0x90d, 0x4a5, 0x508, 0x505, 0x899, 0x17c, 0x9b5, 0x92c, 0xb7c, 0x916, 0x2d4, 0x4be, 0x1db, 0xc50, 0x48d, 0xc20, 0x015, 0x7e2, 0x643, 0x348, 0xa50, 0x1fb, 0x0a9, 0x4c1, 0x3ea, 0xb5d, 0x07f, 0x309, 0x73d, 0x138, 0x8ac, 0x51f, 0x643, 0x9ba, 0x574, 0xcdc, 0x2d5, 0x1a1, 0x84c, 0x363, 0x597, 0xc01, 0x29d, 0x536, 0x0c8, 0x52c, 0xa23, 0x72f, 0x6ae, 0x2ad, 0xc82, 0x105, 0x572, 0x1af, 0xb8f, 0x5a8, 0x112, 0x9b6, 0x176, 0x690, 0x42c, 0x007, 0x37a, 0xbb4, 0x7d9, 0x594, 0x0bc, 0x141, 0x25c, 0x7bf, 0x970, 0x168, 0x295, 0x4ce, 0xb07, 0x180, 0x13d, 0x94e, 0xbaa, 0xa54, 0x2fd, 0x7b1, 0xb07, 0x50a, 0x903, 0x244, 0x14b, 0xa15, 0xbb0, 0xb9f, 0x961, 0xc13, 0x885, 0xbdf, 0x71c, 0xcbb, 0x398, 0x666, 0x712, 0x21a, 0x6c9, 0xbc7, 0x834, 0x929, 0x6aa, 0xa2c, 0xac0, 0x480, 0x1f3, 0x3dd, 0x229, 0xc54, 0x13a, 0x979, 0x9d4, 0x7ef, 0x0c7, 0x7f5, 0xb6a, 0x233, 0xa8e, 0x09f, 0x973, 0xb0d, 0x91b, 0xc55, 0x3c7, 0x8a3, 0x958, 0x0fd, 0x786, 0x57e, 0x5e9, 0xac1, 0x5ec, 0x866, 0x0bc, 0xa64, 0x543, 0x808, 0x18f, 0xa6e, 0x755, 0x93a, 0x481, 0x4f2, 0x012, 0x53f, 0xb4a, 0xb03, 0x826, 0x54c, 0x101, 0x968, 0x3f2, 0xa87, 0x188, 0x8e2, 0x625, 0x8ce, 0x9de, 0xcda, 0x040, 0x60c, 0xb93, 0x078, 0xc7b, 0xb50, 0x53b, 0x9a1, 0x66d, 0xc5e, 0x996, 0x7c7, 0x7b3, 0x71d, 0x347, 0x6b9, 0x702, 0x3df, 0x7aa, 0x7bd, 0xc97, 0xac1, 0x163, 0x813
-      },
-    },
-  }, {
-    .name = "2, 3",
-    .x = 2,
-    .y = 3,
-    .exp = {
-      .cs = {
-        // expected coefficients, seed = { 0 }, x = 2, y = 3
-        0x2ef, 0x75d, 0xbf1, 0x4a4, 0x09b, 0x4bd, 0x58d, 0x1d8, 0x996, 0x82c, 0x0f3, 0x6b7, 0x32a, 0x9ad, 0x4f4, 0xb18, 0xab9, 0x4d3, 0xa96, 0x676, 0x742, 0x4cc, 0x3bb, 0x145, 0x5e3, 0x591, 0xb34, 0x82e, 0x670, 0x84a, 0x76b, 0x273, 0xb0b, 0x0f9, 0x5c2, 0x9bd, 0x7ef, 0xa1c, 0x161, 0xc5a, 0xc22, 0x87b, 0x9a1, 0x9b2, 0x797, 0x6a5, 0xb41, 0x635, 0xa0b, 0x60c, 0x859, 0x833, 0x991, 0xa92, 0xc80, 0x762, 0x826, 0xc75, 0x831, 0xcfe, 0x3b3, 0x435, 0x7eb, 0x3f4, 0x148, 0xa0b, 0x3f4, 0x27a, 0x930, 0x4be, 0x4a1, 0x6ac, 0xa36, 0x45d, 0x751, 0x018, 0x799, 0x785, 0x697, 0xc7e, 0x0aa, 0xcb3, 0xc12, 0x72d, 0x5bf, 0x8bc, 0x8e3, 0x0d1, 0xb60, 0x162, 0x86c, 0xb19, 0x084, 0x4aa, 0xad2, 0x0ef, 0x00c, 0xc08, 0x95c, 0x4df, 0x233, 0x705, 0x573, 0x090, 0x500, 0x7b8, 0xafa, 0x829, 0x0f0, 0xa32, 0x556, 0xcf6, 0x2ab, 0x7a2, 0x5a7, 0x325, 0x39a, 0x265, 0xb9c, 0xa33, 0x218, 0x593, 0x16d, 0x2e2, 0x316, 0x134, 0x1fd, 0x443, 0xc93, 0x1f7, 0x3aa, 0xb65, 0x17d, 0x8f0, 0x12e, 0x624, 0x7f6, 0xc22, 0xca3, 0x21f, 0xbb5, 0x48d, 0x3eb, 0x00a, 0x8e5, 0xb6a, 0x687, 0x745, 0x415, 0x4e7, 0x422, 0x2c8, 0x3e3, 0x1a3, 0x67e, 0x3ce, 0x582, 0x106, 0x79e, 0x1c6, 0x7cb, 0x165, 0x199, 0x959, 0x987, 0xb55, 0x95e, 0x71f, 0xcf6, 0x8c1, 0x98d, 0x966, 0x847, 0x7b0, 0x0ea, 0x3d2, 0x256, 0x195, 0x554, 0xb00, 0x101, 0x2dc, 0xba7, 0x55b, 0x477, 0x575, 0x978, 0xaa1, 0x3df, 0x5ac, 0xc44, 0x8a5, 0xc85, 0x00f, 0x130, 0xa49, 0x9ea, 0x92e, 0x9aa, 0x43d, 0x047, 0x34a, 0x97c, 0x4b8, 0xa62, 0x2c2, 0x926, 0x1ea, 0xa8e, 0xcac, 0xcac, 0x509, 0x222, 0x7ff, 0x545, 0x44a, 0x5f3, 0x8a2, 0x22e, 0x4f1, 0x53a, 0x5ac, 0x9e3, 0x0bf, 0x3b5, 0x943, 0x6cb, 0x3a3, 0xc7e, 0xc27, 0xa2e, 0x79f, 0x7d9, 0x1ac, 0xbfe, 0x84d, 0x67e, 0x5e2, 0x497, 0x5b9, 0x873, 0x21e, 0x7e9, 0xb18, 0x25b, 0x0de, 0x5d6, 0x837, 0x135, 0x88a, 0xc27, 0x017, 0x090, 0x0ed, 0x3e9, 0xc5c
-      },
-    },
-  }};
-
-  const uint8_t SEED[32] = { 0 };
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // sample polynomial from NTT
-    poly_t got = { 0 };
-    poly_sample_ntt(&got, SEED, TESTS[i].x, TESTS[i].y);
-
-    // check for expected value
-    if (memcmp(&got, &TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t a, b, // operands
-               exp; // expected result
-} POLY_ADD_TESTS[] = {{
-  .name = "0-255 + 256-511",
-  .a = {
-    .cs = {
-      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
-    },
-  },
-
-  .b = {
-    .cs = {
-      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
-    },
-  },
-
-  .exp = {
-    .cs = {
-      256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766,
-    },
-  },
-}, {
-  .name = "1000-1255 + 3000-3255 (test modulus)",
-  .a = {
-    .cs = {
-      1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255
-    },
-  },
-
-  .b = {
-    .cs = {
-      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255
-    },
-  },
-
-  .exp = {
-    .cs = {
-      671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181
-    },
-  },
-}};
-
-static void test_poly_add_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_ADD_TESTS)/sizeof(POLY_ADD_TESTS[0]); i++) {
-    // add
-    poly_t got = POLY_ADD_TESTS[i].a;
-    poly_add_scalar(&got, &(POLY_ADD_TESTS[i].b));
-
-    // check for expected value
-    if (memcmp(&got, &POLY_ADD_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ADD_TESTS[i].name, &got, &(POLY_ADD_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_add_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_ADD_TESTS)/sizeof(POLY_ADD_TESTS[0]); i++) {
-    // add
-    poly_t got = POLY_ADD_TESTS[i].a;
-    poly_add_avx512(&got, &(POLY_ADD_TESTS[i].b));
-
-    // check for expected value
-    if (memcmp(&got, &POLY_ADD_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ADD_TESTS[i].name, &got, &(POLY_ADD_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_add_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_ADD_TESTS)/sizeof(POLY_ADD_TESTS[0]); i++) {
-    // add
-    poly_t got = POLY_ADD_TESTS[i].a;
-    poly_add_neon(&got, &(POLY_ADD_TESTS[i].b));
-
-    // check for expected value
-    if (memcmp(&got, &POLY_ADD_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ADD_TESTS[i].name, &got, &(POLY_ADD_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name;     // test name
-  const poly_t a, b, c, // operands
-               exp;     // expected result
-} POLY_ADD2_TESTS[] = {{
-  .name = "nines",
-  .a = { .cs = { 1, 2, 3, 4, 5 } },
-  .b = { .cs = { 5, 4, 3, 2, 1 } },
-  .c = { .cs = { 3, 3, 3, 3, 3 } },
-  .exp = { .cs = { 9, 9, 9, 9, 9 } },
-}};
-
-static void test_poly_add2_scalar(void) {
-  for (size_t i =0 ; i < sizeof(POLY_ADD2_TESTS)/sizeof(POLY_ADD2_TESTS[0]); i++) {
-    // add polys
-    poly_t got = POLY_ADD2_TESTS[i].a;
-    poly_add2_scalar(&got, &POLY_ADD2_TESTS[i].b, &POLY_ADD2_TESTS[i].c);
-
-    // check for expected value
-    if (memcmp(&got, &POLY_ADD2_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ADD2_TESTS[i].name, &got, &(POLY_ADD2_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_add2_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i =0 ; i < sizeof(POLY_ADD2_TESTS)/sizeof(POLY_ADD2_TESTS[0]); i++) {
-    // add polys
-    poly_t got = POLY_ADD2_TESTS[i].a;
-    poly_add2_avx512(&got, &POLY_ADD2_TESTS[i].b, &POLY_ADD2_TESTS[i].c);
-
-    // check for expected value
-    if (memcmp(&got, &POLY_ADD2_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ADD2_TESTS[i].name, &got, &(POLY_ADD2_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_add2_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i =0 ; i < sizeof(POLY_ADD2_TESTS)/sizeof(POLY_ADD2_TESTS[0]); i++) {
-    // add polys
-    poly_t got = POLY_ADD2_TESTS[i].a;
-    poly_add2_neon(&got, &POLY_ADD2_TESTS[i].b, &POLY_ADD2_TESTS[i].c);
-
-    // check for expected value
-    if (memcmp(&got, &POLY_ADD2_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ADD2_TESTS[i].name, &got, &(POLY_ADD2_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t a, b, // operands
-               exp; // expected result
-} POLY_SUB_TESTS[] = {{
-  .name = "256-766 - 256-511 = 0-255",
-  .a = {
-    .cs = {
-      256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766,
-    },
-  },
-
-  .b = {
-    .cs = {
-      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
-    },
-  },
-
-  .exp = {
-    .cs = {
-      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
-    },
-  },
-}, {
-  .name = "Z - 3000-3255 = 1000-1255 (test modulus)",
-  .a = {
-    .cs = {
-      671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181
-    },
-  },
-
-  .b = {
-    .cs = {
-      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255
-    },
-  },
-
-  .exp = {
-    .cs = {
-      1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255
-    },
-  },
-}};
-
-static void test_poly_sub_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_SUB_TESTS)/sizeof(POLY_SUB_TESTS[0]); i++) {
-    // sample polynomial from NTT
-    poly_t got = POLY_SUB_TESTS[i].a;
-    poly_sub_scalar(&got, &(POLY_SUB_TESTS[i].b));
-
-    // check for expected value
-    if (memcmp(&got, &POLY_SUB_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_SUB_TESTS[i].name, &got, &(POLY_SUB_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_sub_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_SUB_TESTS)/sizeof(POLY_SUB_TESTS[0]); i++) {
-    // sample polynomial from NTT
-    poly_t got = POLY_SUB_TESTS[i].a;
-    poly_sub_avx512(&got, &(POLY_SUB_TESTS[i].b));
-
-    // check for expected value
-    if (memcmp(&got, &POLY_SUB_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_SUB_TESTS[i].name, &got, &(POLY_SUB_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_sub_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_SUB_TESTS)/sizeof(POLY_SUB_TESTS[0]); i++) {
-    // sample polynomial from NTT
-    poly_t got = POLY_SUB_TESTS[i].a;
-    poly_sub_neon(&got, &(POLY_SUB_TESTS[i].b));
-
-    // check for expected value
-    if (memcmp(&got, &POLY_SUB_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_SUB_TESTS[i].name, &got, &(POLY_SUB_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t a, b, // operands (not in NTT)
-               exp; // expected result
-} POLY_MUL_TESTS[] = {{
-  .name = "1 * 1 = 1",
-  .a = {
-    .cs = {
-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-
-  .b = {
-    .cs = {
-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-
-  .exp = {
-    .cs = {
-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-}, {
-  .name = "x * x = x^2",
-  .a = {
-    .cs = {
-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-
-  .b = {
-    .cs = {
-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-
-  .exp = {
-    .cs = {
-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-}, {
-  .name = "x^2 * x^3 = x^5",
-  .a = {
-    .cs = {
-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-
-  .b = {
-    .cs = {
-      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-
-  .exp = {
-    .cs = {
-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-}, {
-  .name = "x^255 * x = 3328 (test poly reduction and coefficient modulus)",
-  .a = {
-    .cs = {
-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
-    },
-  },
-
-  .b = {
-    .cs = {
-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-
-  .exp = {
-    .cs = {
-      3328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-    },
-  },
-}, {
-  .name = "x^2 * x^4 = x^6",
-  .a = { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-  .b = { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
-  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } },
-}, {
-  .name = "x^3 * x^5 = x^8",
-  .a = { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-  .b = { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
-  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
-}};
-
-static void test_poly_mul_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_MUL_TESTS)/sizeof(POLY_MUL_TESTS[0]); i++) {
-    poly_t a = POLY_MUL_TESTS[i].a, b = POLY_MUL_TESTS[i].b, got = { 0 };
-
-    poly_ntt(&a); // a = NTT(a)
-    poly_ntt(&b); // b = NTT(b)
-    poly_mul_scalar(&got, &a, &b); // got = a * b
-    poly_inv_ntt(&got); // a = InvNTT(a)
-
-    // check for expected value
-    if (memcmp(&got, &POLY_MUL_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_MUL_TESTS[i].name, &got, &(POLY_MUL_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_mul_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_MUL_TESTS)/sizeof(POLY_MUL_TESTS[0]); i++) {
-    poly_t a = POLY_MUL_TESTS[i].a, b = POLY_MUL_TESTS[i].b, got = { 0 };
-
-    poly_ntt(&a); // a = NTT(a)
-    poly_ntt(&b); // b = NTT(b)
-    poly_mul_avx512(&got, &a, &b); // got = a * b
-    poly_inv_ntt(&got); // a = InvNTT(a)
-
-    // check for expected value
-    if (memcmp(&got, &POLY_MUL_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_MUL_TESTS[i].name, &got, &(POLY_MUL_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_mul_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_MUL_TESTS)/sizeof(POLY_MUL_TESTS[0]); i++) {
-    poly_t a = POLY_MUL_TESTS[i].a, b = POLY_MUL_TESTS[i].b, got = { 0 };
-
-    poly_ntt(&a); // a = NTT(a)
-    poly_ntt(&b); // b = NTT(b)
-    poly_mul_neon(&got, &a, &b); // got = a * b
-    poly_inv_ntt(&got); // a = InvNTT(a)
-
-    // check for expected value
-    if (memcmp(&got, &POLY_MUL_TESTS[i].exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_MUL_TESTS[i].name, &got, &(POLY_MUL_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static void test_prf(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t b; // seed byte
-    const uint8_t exp[16]; // expected bytes
-  } TESTS[] = {
-    { .name = "0", .b = 0, .exp = { 0xc0, 0x3f, 0xcc, 0x81, 0xe7, 0x36, 0x09, 0x87, 0x5b, 0x3b, 0x98, 0xcb, 0x94, 0x1c, 0x78, 0x06 } },
-    { .name = "1", .b = 1, .exp = { 0xd3, 0x59, 0x3e, 0x6f, 0xc4, 0x0e, 0x08, 0xfc, 0x4c, 0xa6, 0xcf, 0x6b, 0x52, 0xa0, 0x9e, 0x57 } },
-    { .name = "2", .b = 2, .exp = { 0x14, 0xe3, 0x2e, 0xd1, 0x28, 0x90, 0xf7, 0x6b, 0x44, 0x73, 0x3e, 0xac, 0xae, 0x8b, 0xf4, 0x24 } },
-    { .name = "3", .b = 3, .exp = { 0x3d, 0xc2, 0x37, 0x5a, 0xf3, 0xaa, 0x2b, 0x4c, 0xa0, 0xe5, 0xf4, 0x7c, 0xf0, 0x01, 0xf0, 0x81 } },
-    { .name = "4", .b = 4, .exp = { 0x82, 0x8c, 0x57, 0x66, 0xbc, 0xac, 0xd5, 0x4e, 0x7d, 0x5b, 0xe1, 0x8c, 0x05, 0xa5, 0x2e, 0x49 } },
-    { .name = "5", .b = 5, .exp = { 0x16, 0xe0, 0x17, 0x73, 0xa8, 0x7b, 0x13, 0x8b, 0xb8, 0x0b, 0x4f, 0x7d, 0xfa, 0xee, 0x53, 0x53 } },
-    { .name = "6", .b = 6, .exp = { 0xcd, 0xe8, 0xb7, 0xb9, 0x85, 0xb6, 0xe7, 0xd1, 0x1a, 0x4a, 0x4a, 0x5d, 0xcf, 0xfd, 0x53, 0xdf } },
-    { .name = "7", .b = 7, .exp = { 0x3c, 0x9a, 0x19, 0x36, 0x84, 0x9f, 0x50, 0xb8, 0x4a, 0xe6, 0x1c, 0x6e, 0x36, 0xd6, 0xf2, 0xfc } },
-    { .name = "8", .b = 8, .exp = { 0x9a, 0xa1, 0x15, 0xa4, 0x8e, 0x91, 0xae, 0xdb, 0x1d, 0xd3, 0x1f, 0xd2, 0x1f, 0x60, 0xf6, 0x8a } },
-    { .name = "9", .b = 9, .exp = { 0x1a, 0xca, 0x42, 0x42, 0x3f, 0x01, 0xc8, 0x7c, 0xb1, 0x90, 0x8c, 0xb4, 0xaa, 0x19, 0x78, 0x8b } },
-    { .name = "10", .b = 10, .exp = { 0x44, 0x34, 0x2b, 0xec, 0x7a, 0xd9, 0xff, 0x47, 0x31, 0x3e, 0xc6, 0xbc, 0x06, 0x30, 0xbd, 0xe8 } },
-    { .name = "11", .b = 11, .exp = { 0xe2, 0xad, 0x17, 0xef, 0xdb, 0xa8, 0x9b, 0x76, 0x41, 0x53, 0xaf, 0x36, 0xa5, 0xcd, 0x82, 0x8e } },
-    { .name = "12", .b = 12, .exp = { 0x1f, 0x1b, 0x87, 0x37, 0xb0, 0x3a, 0x1c, 0xb5, 0x44, 0x38, 0xc5, 0x2a, 0x7c, 0x9d, 0x31, 0xc1 } },
-    { .name = "13", .b = 13, .exp = { 0xc1, 0xc5, 0x63, 0xdf, 0x29, 0x41, 0x9d, 0x40, 0xb8, 0xbf, 0xca, 0x6f, 0xbd, 0xb7, 0x8a, 0x3b } },
-    { .name = "14", .b = 14, .exp = { 0x00, 0xff, 0xc3, 0xe2, 0xf1, 0x88, 0x3d, 0x38, 0xd5, 0x18, 0x1a, 0xa5, 0x0d, 0xfc, 0x7b, 0xcc } },
-    { .name = "15", .b = 15, .exp = { 0x3f, 0xa0, 0x1f, 0x3d, 0x9f, 0x2d, 0x47, 0x1a, 0x46, 0xd4, 0xaa, 0x68, 0x2b, 0x8a, 0x94, 0x96 } },
-    { .name = "16", .b = 16, .exp = { 0x59, 0xb1, 0xde, 0xc0, 0xf0, 0x02, 0xe4, 0x9b, 0xfe, 0xed, 0x95, 0x3f, 0x5e, 0xd9, 0xb1, 0x4e } },
-    { .name = "17", .b = 17, .exp = { 0x43, 0x86, 0xc6, 0x3f, 0x1b, 0x97, 0xcd, 0xff, 0x3e, 0xaa, 0x36, 0xf3, 0xf2, 0x28, 0x66, 0xd2 } },
-    { .name = "18", .b = 18, .exp = { 0x1d, 0x44, 0xf2, 0xdd, 0x47, 0x2b, 0x9f, 0xcc, 0xe5, 0x6c, 0xea, 0x24, 0x7c, 0x7d, 0xcc, 0x2b } },
-    { .name = "19", .b = 19, .exp = { 0x78, 0x51, 0xf9, 0x0b, 0x58, 0x53, 0x3a, 0xd8, 0x3f, 0x8f, 0xe4, 0xa9, 0x5e, 0x8f, 0x64, 0x1b } },
-    { .name = "20", .b = 20, .exp = { 0x0d, 0x53, 0x3e, 0xc1, 0x21, 0xf3, 0xb8, 0x8b, 0xb7, 0x04, 0x4a, 0xfa, 0xce, 0x40, 0xd5, 0xc3 } },
-    { .name = "21", .b = 21, .exp = { 0x82, 0xe2, 0x8a, 0xb1, 0xa1, 0x41, 0xa2, 0x97, 0x18, 0xc7, 0x59, 0xa3, 0xf7, 0x3e, 0x4c, 0xb8 } },
-    { .name = "22", .b = 22, .exp = { 0x82, 0x74, 0xde, 0x61, 0x21, 0x03, 0x67, 0x89, 0x82, 0x07, 0xb5, 0xd9, 0x6e, 0xbf, 0x54, 0x32 } },
-    { .name = "23", .b = 23, .exp = { 0x4b, 0x27, 0x12, 0xd0, 0xec, 0xc4, 0xb5, 0xb9, 0x69, 0xdf, 0x88, 0xdc, 0xb0, 0x14, 0x76, 0x6b } },
-    { .name = "24", .b = 24, .exp = { 0x82, 0x28, 0xdb, 0x36, 0x81, 0x35, 0xa5, 0x89, 0xe9, 0xb7, 0x7f, 0x00, 0xf8, 0x1f, 0xaa, 0xe3 } },
-    { .name = "25", .b = 25, .exp = { 0x93, 0xef, 0xa3, 0x9c, 0xc5, 0x45, 0x85, 0xc6, 0xee, 0x58, 0xad, 0xba, 0x49, 0x5b, 0x90, 0xd7 } },
-    { .name = "26", .b = 26, .exp = { 0x5a, 0x22, 0x8d, 0xf1, 0x28, 0xeb, 0x19, 0xd0, 0x61, 0xfe, 0x6e, 0x9b, 0x1a, 0xd1, 0xcb, 0xd7 } },
-    { .name = "27", .b = 27, .exp = { 0x22, 0x29, 0xda, 0x4a, 0xc2, 0xce, 0x59, 0x29, 0x62, 0x7c, 0xab, 0x0c, 0x6d, 0x81, 0x3b, 0x49 } },
-    { .name = "28", .b = 28, .exp = { 0x70, 0x7c, 0x3f, 0x61, 0x05, 0x62, 0x89, 0x4b, 0xb4, 0x0b, 0x5c, 0x7b, 0x01, 0x0c, 0x30, 0x17 } },
-    { .name = "29", .b = 29, .exp = { 0xdd, 0x79, 0x2a, 0x96, 0xb4, 0xb0, 0x8e, 0x83, 0x8f, 0xa6, 0xba, 0x7f, 0x01, 0x75, 0x20, 0x46 } },
-    { .name = "30", .b = 30, .exp = { 0xd5, 0xcf, 0x68, 0x94, 0x8c, 0x20, 0x61, 0x5d, 0x87, 0x77, 0x62, 0x17, 0xaa, 0x04, 0x85, 0xb7 } },
-    { .name = "31", .b = 31, .exp = { 0xc6, 0xef, 0xb1, 0x54, 0x29, 0x80, 0xbd, 0x33, 0x76, 0x0f, 0x8f, 0x51, 0x36, 0x8d, 0xa6, 0x85 } },
-    { .name = "32", .b = 32, .exp = { 0x19, 0x17, 0xfc, 0x54, 0x17, 0x28, 0x3d, 0xdb, 0x90, 0x57, 0x9c, 0x72, 0x1b, 0x87, 0x2c, 0xc7 } },
-    { .name = "33", .b = 33, .exp = { 0xf6, 0xad, 0xbd, 0x15, 0x4f, 0xa6, 0x73, 0xca, 0x48, 0x32, 0xa1, 0x3b, 0xeb, 0x85, 0x5c, 0x66 } },
-    { .name = "34", .b = 34, .exp = { 0x93, 0x97, 0xaf, 0x0e, 0x5c, 0x02, 0x74, 0x65, 0x96, 0x25, 0x38, 0x78, 0x86, 0x5f, 0xea, 0x0e } },
-    { .name = "35", .b = 35, .exp = { 0x4d, 0xb4, 0x5e, 0x25, 0x19, 0x02, 0x5a, 0xbf, 0xea, 0x9b, 0x35, 0xa5, 0xef, 0xe0, 0x29, 0x00 } },
-    { .name = "36", .b = 36, .exp = { 0x6c, 0xcf, 0x6b, 0xa9, 0x8a, 0x41, 0xcb, 0x37, 0xde, 0x3d, 0x9a, 0x70, 0x34, 0x92, 0x22, 0xca } },
-    { .name = "37", .b = 37, .exp = { 0x51, 0x46, 0x3d, 0x93, 0xf4, 0x73, 0x42, 0x13, 0xd5, 0x1e, 0x22, 0x2e, 0x26, 0x7d, 0x40, 0xa0 } },
-    { .name = "38", .b = 38, .exp = { 0xf0, 0x05, 0x25, 0x23, 0xf1, 0x4f, 0xb1, 0x3e, 0xac, 0xd0, 0x2c, 0x0c, 0xba, 0x18, 0xa1, 0xa5 } },
-    { .name = "39", .b = 39, .exp = { 0x60, 0xa4, 0x46, 0x72, 0x00, 0xe8, 0xc2, 0xa8, 0x46, 0xea, 0x03, 0x2c, 0x56, 0x66, 0xae, 0x24 } },
-    { .name = "40", .b = 40, .exp = { 0x7f, 0x46, 0xff, 0xeb, 0xb5, 0x27, 0x90, 0x32, 0xde, 0x2a, 0x46, 0xcd, 0x46, 0x1e, 0xbe, 0x40 } },
-    { .name = "41", .b = 41, .exp = { 0x75, 0x00, 0xa8, 0x41, 0xe9, 0x6d, 0x91, 0x21, 0xe0, 0xc6, 0x8e, 0x1e, 0x5e, 0xcd, 0x18, 0x75 } },
-    { .name = "42", .b = 42, .exp = { 0x6f, 0x15, 0x54, 0xcb, 0xad, 0x8a, 0xed, 0x51, 0x49, 0x83, 0xb9, 0xcb, 0xa4, 0x33, 0xb7, 0x24 } },
-    { .name = "43", .b = 43, .exp = { 0xcf, 0x6c, 0x09, 0xab, 0x34, 0x45, 0xed, 0x0d, 0xce, 0x45, 0xec, 0xac, 0x54, 0x51, 0xd2, 0x6e } },
-    { .name = "44", .b = 44, .exp = { 0xff, 0xac, 0xd9, 0x88, 0x30, 0xfa, 0x19, 0x67, 0xb4, 0x26, 0xe6, 0x5a, 0x72, 0x90, 0xa3, 0x31 } },
-    { .name = "45", .b = 45, .exp = { 0xc5, 0xef, 0x23, 0xc9, 0x22, 0x9a, 0x10, 0xf8, 0xd7, 0x7a, 0xeb, 0x4e, 0x07, 0x4a, 0xf6, 0x8a } },
-    { .name = "46", .b = 46, .exp = { 0x32, 0x9c, 0xd5, 0xcb, 0x50, 0x3f, 0x96, 0x9e, 0x49, 0xca, 0x2a, 0xd4, 0x8d, 0x88, 0x43, 0x15 } },
-    { .name = "47", .b = 47, .exp = { 0xcf, 0x4c, 0x31, 0x38, 0xf3, 0xbb, 0xcf, 0x95, 0x0d, 0x62, 0xe9, 0xa6, 0xe7, 0x2f, 0xd3, 0x64 } },
-    { .name = "48", .b = 48, .exp = { 0x58, 0x1e, 0xea, 0x5e, 0xb2, 0x53, 0x36, 0xb9, 0xe7, 0xdc, 0xa2, 0xd3, 0x4e, 0x23, 0x37, 0x9e } },
-    { .name = "49", .b = 49, .exp = { 0x2e, 0xec, 0x01, 0xf6, 0x4c, 0xbd, 0xa0, 0x7d, 0xe0, 0x73, 0x00, 0x83, 0x6a, 0x09, 0x59, 0xd6 } },
-    { .name = "50", .b = 50, .exp = { 0x66, 0xd7, 0x1b, 0x0a, 0x54, 0xd3, 0x78, 0xec, 0xf3, 0x91, 0x06, 0xe1, 0xbd, 0x1c, 0x7c, 0x52 } },
-    { .name = "51", .b = 51, .exp = { 0xc3, 0xbf, 0x9e, 0xc9, 0x3f, 0x37, 0xf9, 0x88, 0x4c, 0x4a, 0x71, 0x7e, 0xb1, 0x69, 0x54, 0x06 } },
-    { .name = "52", .b = 52, .exp = { 0xc5, 0x89, 0x30, 0xf0, 0x1e, 0x2b, 0xd1, 0x4d, 0xaf, 0xd4, 0x45, 0x20, 0x3b, 0xa2, 0xd6, 0xe3 } },
-    { .name = "53", .b = 53, .exp = { 0x23, 0x0a, 0xe3, 0xaf, 0xdf, 0xcb, 0x77, 0xea, 0x71, 0x20, 0x8e, 0x31, 0xd1, 0x85, 0x36, 0x9a } },
-    { .name = "54", .b = 54, .exp = { 0x82, 0x50, 0xb4, 0x90, 0xc3, 0x9e, 0xbf, 0x4e, 0x57, 0x37, 0x38, 0x18, 0x07, 0xdb, 0x09, 0xe8 } },
-    { .name = "55", .b = 55, .exp = { 0x7e, 0x89, 0xa8, 0x99, 0x14, 0x01, 0x73, 0x4b, 0x74, 0xad, 0x87, 0x33, 0x12, 0xcd, 0xce, 0xbe } },
-    { .name = "56", .b = 56, .exp = { 0xc1, 0xdb, 0xd7, 0xcd, 0x4e, 0x0f, 0x73, 0x9e, 0x75, 0x95, 0x31, 0xb6, 0x81, 0xe7, 0x4b, 0x8c } },
-    { .name = "57", .b = 57, .exp = { 0xc8, 0x11, 0x20, 0x76, 0x73, 0x13, 0xf1, 0x39, 0xc3, 0x45, 0xfe, 0x91, 0x77, 0x3f, 0x6c, 0x2f } },
-    { .name = "58", .b = 58, .exp = { 0xf7, 0xc8, 0x51, 0x2e, 0x32, 0x77, 0xa8, 0x57, 0x6a, 0xa8, 0x08, 0x39, 0x3d, 0x9f, 0x17, 0x8e } },
-    { .name = "59", .b = 59, .exp = { 0x24, 0xdc, 0xb9, 0x95, 0x5f, 0x39, 0xd6, 0x82, 0x39, 0xf8, 0x93, 0x6c, 0x9c, 0x15, 0xe7, 0xa0 } },
-    { .name = "60", .b = 60, .exp = { 0x16, 0xaa, 0x80, 0x11, 0x8c, 0x5a, 0xfb, 0x5d, 0x3e, 0x81, 0x36, 0x48, 0xb5, 0x07, 0x46, 0xb2 } },
-    { .name = "61", .b = 61, .exp = { 0xbe, 0xd4, 0x72, 0xdd, 0x88, 0xf3, 0x7d, 0x94, 0x66, 0x1a, 0x00, 0x34, 0x9d, 0xaa, 0xc2, 0x66 } },
-    { .name = "62", .b = 62, .exp = { 0x47, 0x2d, 0x77, 0x8d, 0x2f, 0xd9, 0x0b, 0x45, 0x0b, 0xb7, 0x1b, 0x03, 0x13, 0xbf, 0x00, 0xeb } },
-    { .name = "63", .b = 63, .exp = { 0xb4, 0xa2, 0x6d, 0x2b, 0x18, 0xe1, 0x96, 0xd7, 0x02, 0x04, 0x06, 0x29, 0x44, 0x6b, 0x1e, 0x9e } },
-    { .name = "64", .b = 64, .exp = { 0x63, 0x11, 0xb5, 0xe5, 0x8b, 0x88, 0x1b, 0x5d, 0xa4, 0x5c, 0x20, 0x29, 0x46, 0xa7, 0x2b, 0x7e } },
-    { .name = "65", .b = 65, .exp = { 0x64, 0x50, 0x9f, 0x60, 0xe7, 0x26, 0x4d, 0x15, 0x57, 0x20, 0x02, 0x01, 0x20, 0x27, 0x0c, 0x3d } },
-    { .name = "66", .b = 66, .exp = { 0xf2, 0xa7, 0x5e, 0x98, 0x55, 0x10, 0xb0, 0xb9, 0xa7, 0x6d, 0xcb, 0x5c, 0xdd, 0x24, 0x72, 0xb8 } },
-    { .name = "67", .b = 67, .exp = { 0x83, 0x6b, 0x23, 0xd6, 0x38, 0x4c, 0x33, 0x9b, 0xc3, 0x6d, 0x63, 0xbb, 0xb1, 0x25, 0x2e, 0xb1 } },
-    { .name = "68", .b = 68, .exp = { 0x4f, 0x3a, 0x82, 0x3a, 0x0f, 0x7a, 0xd5, 0x8b, 0x60, 0xbc, 0x33, 0x1a, 0x74, 0x15, 0x39, 0x7b } },
-    { .name = "69", .b = 69, .exp = { 0xc2, 0xa7, 0x8d, 0xd2, 0x30, 0x4e, 0x55, 0x0f, 0x23, 0xe0, 0x03, 0x78, 0xec, 0xc4, 0xb8, 0xc1 } },
-    { .name = "70", .b = 70, .exp = { 0x35, 0xe2, 0xb3, 0x48, 0xd2, 0x8e, 0xed, 0x77, 0x05, 0xe8, 0xd3, 0x6d, 0x3e, 0xae, 0x20, 0x38 } },
-    { .name = "71", .b = 71, .exp = { 0x57, 0x27, 0xb8, 0x82, 0x33, 0x0c, 0xe7, 0xc9, 0x59, 0x81, 0x6b, 0xfd, 0x90, 0x10, 0x9e, 0x41 } },
-    { .name = "72", .b = 72, .exp = { 0xdc, 0xe6, 0x36, 0xf4, 0x68, 0xdc, 0x2e, 0xd4, 0xc2, 0xb2, 0x5f, 0xdb, 0xfa, 0xf5, 0x57, 0xdd } },
-    { .name = "73", .b = 73, .exp = { 0x32, 0x78, 0xfa, 0xd3, 0x58, 0x85, 0x07, 0xe3, 0x97, 0xa3, 0xc0, 0x88, 0xe8, 0x2a, 0x2c, 0x9c } },
-    { .name = "74", .b = 74, .exp = { 0xf3, 0x50, 0x40, 0xd5, 0xf2, 0x32, 0xe4, 0x59, 0x21, 0xa1, 0x4e, 0x38, 0xb9, 0x24, 0xe3, 0x88 } },
-    { .name = "75", .b = 75, .exp = { 0x33, 0xa8, 0xfc, 0x54, 0x9e, 0x3b, 0xb4, 0xf1, 0x0a, 0x63, 0x15, 0xd7, 0xab, 0x1b, 0x9d, 0xf3 } },
-    { .name = "76", .b = 76, .exp = { 0x1d, 0x39, 0x98, 0xe3, 0x85, 0xfe, 0x9a, 0xff, 0xdf, 0x93, 0x5c, 0x17, 0xf5, 0x02, 0x21, 0xa7 } },
-    { .name = "77", .b = 77, .exp = { 0xc1, 0x7c, 0xb1, 0xa9, 0xc6, 0xbb, 0x12, 0x9a, 0xf7, 0x8f, 0xa4, 0xe0, 0xe5, 0x22, 0x97, 0x6f } },
-    { .name = "78", .b = 78, .exp = { 0x5f, 0x02, 0x38, 0x35, 0x20, 0x70, 0xde, 0x84, 0xb5, 0xc0, 0x78, 0x3f, 0xaa, 0xee, 0x21, 0x95 } },
-    { .name = "79", .b = 79, .exp = { 0xe1, 0x2e, 0xdd, 0x35, 0xf1, 0xa1, 0x4d, 0x56, 0xf4, 0x91, 0xd7, 0x0b, 0xdb, 0x7e, 0xc0, 0xf3 } },
-    { .name = "80", .b = 80, .exp = { 0x50, 0x48, 0xaa, 0xf5, 0x52, 0x79, 0x8e, 0x86, 0x58, 0x9f, 0x92, 0x2b, 0x2d, 0x71, 0xd2, 0x91 } },
-    { .name = "81", .b = 81, .exp = { 0x51, 0x39, 0x60, 0xa5, 0x51, 0x17, 0x86, 0x98, 0x28, 0x73, 0x47, 0xf9, 0xb0, 0x49, 0x74, 0xcd } },
-    { .name = "82", .b = 82, .exp = { 0xaf, 0x7e, 0xe9, 0xfd, 0x89, 0xf1, 0xbc, 0x84, 0xef, 0xfe, 0xbc, 0xe8, 0xfb, 0x78, 0x02, 0x9b } },
-    { .name = "83", .b = 83, .exp = { 0x2f, 0xeb, 0x87, 0x4e, 0xbc, 0xc9, 0xaf, 0xc3, 0xdc, 0x12, 0x61, 0x1a, 0x61, 0xee, 0x9c, 0xb6 } },
-    { .name = "84", .b = 84, .exp = { 0x2d, 0x25, 0x9a, 0xc0, 0xf6, 0x31, 0x57, 0xb7, 0x6f, 0x6a, 0xde, 0xa8, 0xd7, 0x60, 0x91, 0x8f } },
-    { .name = "85", .b = 85, .exp = { 0x37, 0xd2, 0x6b, 0xa7, 0x85, 0xd5, 0x24, 0x13, 0x35, 0x85, 0xb6, 0xa0, 0x94, 0xff, 0xab, 0xd9 } },
-    { .name = "86", .b = 86, .exp = { 0x2b, 0xc6, 0x7e, 0xf8, 0x7e, 0x4e, 0x0a, 0x88, 0xa5, 0xbc, 0xae, 0x12, 0x6a, 0x0b, 0x3a, 0x98 } },
-    { .name = "87", .b = 87, .exp = { 0x6e, 0x63, 0xf4, 0xcb, 0x01, 0x23, 0xb6, 0xf5, 0x6a, 0x5f, 0x27, 0x9c, 0x13, 0x74, 0x27, 0xfd } },
-    { .name = "88", .b = 88, .exp = { 0x61, 0xc3, 0x22, 0x73, 0x61, 0x8e, 0xb4, 0x7e, 0x12, 0xce, 0xf5, 0x18, 0x34, 0x66, 0xd2, 0xa4 } },
-    { .name = "89", .b = 89, .exp = { 0xe9, 0xde, 0x25, 0x24, 0xac, 0xf8, 0x68, 0x38, 0x4f, 0xc1, 0x7c, 0x42, 0xeb, 0xe0, 0xf7, 0xa9 } },
-    { .name = "90", .b = 90, .exp = { 0x49, 0x9e, 0x84, 0x99, 0xca, 0x98, 0xd0, 0x3b, 0x55, 0xe2, 0xe4, 0x29, 0xbb, 0x7c, 0x50, 0x17 } },
-    { .name = "91", .b = 91, .exp = { 0xd6, 0x0c, 0x16, 0xd0, 0xd9, 0xdd, 0x5b, 0x6b, 0x0d, 0x4a, 0xff, 0x65, 0x5c, 0x74, 0x7f, 0x10 } },
-    { .name = "92", .b = 92, .exp = { 0x99, 0x2d, 0x88, 0x36, 0xf1, 0xc7, 0x37, 0x48, 0xdd, 0x71, 0x49, 0x04, 0x23, 0x14, 0xe7, 0xb4 } },
-    { .name = "93", .b = 93, .exp = { 0xa2, 0x4d, 0x33, 0x79, 0xc8, 0x9c, 0x80, 0x9b, 0x87, 0xf2, 0x0c, 0x01, 0x1d, 0xa9, 0xb9, 0x4b } },
-    { .name = "94", .b = 94, .exp = { 0xdc, 0x47, 0x27, 0x02, 0x25, 0x16, 0xe6, 0xcf, 0x33, 0x9a, 0x4f, 0x2f, 0x0a, 0xdf, 0x65, 0xf7 } },
-    { .name = "95", .b = 95, .exp = { 0xd5, 0xaa, 0x35, 0xc8, 0x9e, 0x92, 0xab, 0xc8, 0x20, 0xc3, 0xdd, 0x5a, 0x97, 0x91, 0xad, 0xe7 } },
-    { .name = "96", .b = 96, .exp = { 0x42, 0xb3, 0x98, 0xdb, 0x67, 0xbe, 0x3f, 0xb8, 0xf7, 0xa0, 0xa5, 0x83, 0x89, 0x84, 0x9a, 0xe9 } },
-    { .name = "97", .b = 97, .exp = { 0xe8, 0x93, 0x10, 0x5a, 0x4c, 0xc1, 0xe5, 0x3c, 0xc8, 0x88, 0xc6, 0xf0, 0xbd, 0x79, 0x37, 0xc4 } },
-    { .name = "98", .b = 98, .exp = { 0x36, 0x42, 0x1a, 0x43, 0xf2, 0x55, 0x1f, 0x3f, 0x85, 0xf8, 0xff, 0x18, 0x51, 0xa8, 0xf9, 0x18 } },
-    { .name = "99", .b = 99, .exp = { 0x9e, 0x30, 0xb5, 0x5f, 0x1a, 0x5c, 0xef, 0x15, 0xc6, 0xd1, 0x1a, 0xe3, 0x45, 0x82, 0x8e, 0xbc } },
-    { .name = "100", .b = 100, .exp = { 0x07, 0x4b, 0x15, 0xf5, 0x9d, 0x4a, 0x3c, 0xc7, 0x02, 0x11, 0x5d, 0x67, 0x3f, 0x7a, 0xab, 0x15 } },
-    { .name = "101", .b = 101, .exp = { 0x4c, 0xe0, 0x74, 0x3e, 0x7e, 0x61, 0xdd, 0xcd, 0x95, 0x11, 0xd4, 0x5d, 0x84, 0x37, 0x8c, 0x42 } },
-    { .name = "102", .b = 102, .exp = { 0x57, 0x98, 0x1e, 0xca, 0x98, 0xb9, 0x8a, 0x11, 0x8d, 0xb0, 0x6d, 0xcc, 0xea, 0x53, 0x09, 0x40 } },
-    { .name = "103", .b = 103, .exp = { 0x21, 0xb2, 0x27, 0x6c, 0xde, 0xee, 0x52, 0x99, 0xb8, 0xc9, 0x5c, 0xe3, 0x0f, 0x13, 0x0f, 0xa8 } },
-    { .name = "104", .b = 104, .exp = { 0x8e, 0xdd, 0x4c, 0xfe, 0xd4, 0xd3, 0x83, 0x8e, 0x5d, 0xce, 0x49, 0x30, 0xa1, 0x7d, 0x9d, 0x34 } },
-    { .name = "105", .b = 105, .exp = { 0x9c, 0x19, 0x71, 0x77, 0x8d, 0xbd, 0x34, 0x7d, 0xc6, 0x7d, 0xac, 0x24, 0xd5, 0x4c, 0x30, 0x1a } },
-    { .name = "106", .b = 106, .exp = { 0xf4, 0x23, 0x2b, 0xb3, 0x46, 0xb5, 0xae, 0xfc, 0x4e, 0xc6, 0x66, 0xb4, 0x91, 0xe1, 0xca, 0x15 } },
-    { .name = "107", .b = 107, .exp = { 0x09, 0x59, 0x55, 0x86, 0x7b, 0x7f, 0xe1, 0xae, 0xfa, 0x55, 0xcd, 0xa2, 0x28, 0x88, 0xb2, 0x7c } },
-    { .name = "108", .b = 108, .exp = { 0xcb, 0x38, 0xf6, 0x7f, 0x58, 0x05, 0x7b, 0xde, 0x83, 0xf0, 0xe4, 0xd0, 0xb1, 0x00, 0x1b, 0xd8 } },
-    { .name = "109", .b = 109, .exp = { 0xc4, 0xd6, 0x37, 0x2d, 0x4c, 0xa9, 0xdb, 0x18, 0xfb, 0x9e, 0x3c, 0xe5, 0xfc, 0x00, 0xe1, 0xb6 } },
-    { .name = "110", .b = 110, .exp = { 0xf8, 0xb9, 0x4c, 0x62, 0x9e, 0x7b, 0x53, 0xbc, 0x6c, 0xad, 0x0a, 0xc9, 0x15, 0x9e, 0xaf, 0x08 } },
-    { .name = "111", .b = 111, .exp = { 0xff, 0xa5, 0x86, 0x66, 0xf4, 0xaf, 0x7f, 0x86, 0xc8, 0x3e, 0x91, 0x76, 0x18, 0x17, 0x51, 0xed } },
-    { .name = "112", .b = 112, .exp = { 0xc7, 0xf4, 0xb0, 0x21, 0x02, 0x82, 0x70, 0xfa, 0x70, 0xb6, 0x16, 0x0a, 0x8f, 0xae, 0x42, 0x64 } },
-    { .name = "113", .b = 113, .exp = { 0xae, 0x59, 0x15, 0xde, 0x34, 0x3a, 0xd5, 0x4d, 0x48, 0xe0, 0xb8, 0x07, 0xcb, 0x1a, 0x82, 0xeb } },
-    { .name = "114", .b = 114, .exp = { 0xd0, 0xe1, 0xc3, 0xf3, 0xde, 0x6e, 0xed, 0xe0, 0xb8, 0x9a, 0x3f, 0xf5, 0x69, 0x15, 0x31, 0x6f } },
-    { .name = "115", .b = 115, .exp = { 0xec, 0xa0, 0xbb, 0x8a, 0xff, 0x1e, 0xa0, 0x7f, 0x77, 0xbd, 0xb3, 0x58, 0x2e, 0x27, 0x14, 0xa1 } },
-    { .name = "116", .b = 116, .exp = { 0x68, 0x31, 0x4a, 0x8a, 0xbb, 0x79, 0x83, 0x5c, 0xce, 0x2a, 0xb9, 0x54, 0x07, 0x9c, 0x92, 0x7a } },
-    { .name = "117", .b = 117, .exp = { 0x70, 0x37, 0x51, 0xef, 0x04, 0x61, 0x26, 0x25, 0xdb, 0x9b, 0x57, 0x38, 0x9f, 0x1b, 0xf6, 0xa2 } },
-    { .name = "118", .b = 118, .exp = { 0x5c, 0xb2, 0xb2, 0x3e, 0x72, 0x77, 0x94, 0x50, 0xad, 0x90, 0x7f, 0x2a, 0xfb, 0xc9, 0x9c, 0x62 } },
-    { .name = "119", .b = 119, .exp = { 0x9f, 0x1e, 0x13, 0x5e, 0xc0, 0x81, 0x6c, 0x3d, 0xeb, 0x7c, 0xf7, 0xee, 0xdf, 0x07, 0xb1, 0xb3 } },
-    { .name = "120", .b = 120, .exp = { 0x6e, 0x78, 0x1d, 0x14, 0xb6, 0xda, 0x86, 0x7b, 0xac, 0x0a, 0x6c, 0x06, 0x2a, 0x98, 0x21, 0x65 } },
-    { .name = "121", .b = 121, .exp = { 0xf5, 0x77, 0x3c, 0x7c, 0xad, 0x2c, 0x4d, 0x94, 0x10, 0xe1, 0xad, 0x10, 0x24, 0x5c, 0xae, 0xc0 } },
-    { .name = "122", .b = 122, .exp = { 0x90, 0x15, 0x76, 0x4c, 0x5c, 0xc4, 0x0c, 0xca, 0x2b, 0xc8, 0xd0, 0xde, 0x2e, 0xfd, 0xc6, 0xf3 } },
-    { .name = "123", .b = 123, .exp = { 0x49, 0x83, 0x07, 0x88, 0x3e, 0x33, 0xde, 0xfe, 0xde, 0xf7, 0x32, 0x91, 0x3f, 0xfc, 0xce, 0x8e } },
-    { .name = "124", .b = 124, .exp = { 0x85, 0x83, 0xcf, 0x7b, 0x98, 0x88, 0x5a, 0x19, 0xc7, 0x24, 0xab, 0xe7, 0xf5, 0xf0, 0x29, 0x30 } },
-    { .name = "125", .b = 125, .exp = { 0xec, 0x22, 0x55, 0x3b, 0x5d, 0x4d, 0x4e, 0x2b, 0x38, 0x38, 0x02, 0xbe, 0xd9, 0xe7, 0x52, 0x6e } },
-    { .name = "126", .b = 126, .exp = { 0x29, 0xb7, 0x6e, 0x6b, 0xf7, 0xe2, 0xe9, 0x64, 0x1a, 0xf1, 0x5f, 0x11, 0x2f, 0x5e, 0x16, 0xd0 } },
-    { .name = "127", .b = 127, .exp = { 0x54, 0x3b, 0x80, 0x91, 0xe4, 0x28, 0xea, 0xdf, 0xbe, 0xeb, 0xff, 0x00, 0xad, 0x37, 0x68, 0xec } },
-    { .name = "128", .b = 128, .exp = { 0xc0, 0x3b, 0x90, 0x24, 0x7f, 0xcb, 0xe0, 0xee, 0x9d, 0xc6, 0x4e, 0xc3, 0x25, 0x72, 0xff, 0x25 } },
-    { .name = "129", .b = 129, .exp = { 0x47, 0xbc, 0x6f, 0x5b, 0xb8, 0xb5, 0x1d, 0xec, 0xb2, 0x69, 0x93, 0x03, 0xe0, 0x16, 0x01, 0xa2 } },
-    { .name = "130", .b = 130, .exp = { 0x97, 0xdd, 0xc5, 0x31, 0x41, 0x84, 0xfe, 0x91, 0x09, 0x6d, 0x0a, 0xd2, 0x86, 0xf5, 0x2c, 0x1e } },
-    { .name = "131", .b = 131, .exp = { 0x5a, 0xe7, 0x2e, 0x53, 0xba, 0x00, 0x03, 0xa6, 0xb3, 0x36, 0xa0, 0x26, 0xb2, 0x38, 0xb8, 0xbb } },
-    { .name = "132", .b = 132, .exp = { 0x66, 0x1c, 0x32, 0x87, 0x81, 0x86, 0x1b, 0xa7, 0xfa, 0xa1, 0x66, 0xb3, 0x54, 0x75, 0xcc, 0x09 } },
-    { .name = "133", .b = 133, .exp = { 0xa4, 0xca, 0x06, 0x38, 0xfe, 0x18, 0xcd, 0xad, 0xe8, 0x37, 0x96, 0x3c, 0x3d, 0xd5, 0xda, 0x24 } },
-    { .name = "134", .b = 134, .exp = { 0xeb, 0x37, 0x49, 0x4f, 0x7f, 0xac, 0xa2, 0x19, 0x8c, 0x52, 0x12, 0x5b, 0x62, 0x44, 0xb1, 0xa1 } },
-    { .name = "135", .b = 135, .exp = { 0x18, 0x74, 0x2e, 0x73, 0x57, 0x68, 0x2b, 0xfe, 0xdc, 0xb5, 0x6a, 0x79, 0x1b, 0xf5, 0x97, 0x80 } },
-    { .name = "136", .b = 136, .exp = { 0x1c, 0xb0, 0xa4, 0xaf, 0x26, 0x49, 0x8c, 0xe7, 0x90, 0xd6, 0x9f, 0xad, 0x96, 0x06, 0x65, 0x90 } },
-    { .name = "137", .b = 137, .exp = { 0x55, 0x93, 0xe8, 0xb1, 0xed, 0x28, 0x13, 0x2b, 0x15, 0x06, 0x6a, 0xce, 0x9e, 0x53, 0xe7, 0xe6 } },
-    { .name = "138", .b = 138, .exp = { 0x4a, 0x40, 0xc5, 0x5f, 0x57, 0x8f, 0xcd, 0xe0, 0x01, 0xac, 0xfb, 0xaa, 0x8f, 0x3c, 0x30, 0x78 } },
-    { .name = "139", .b = 139, .exp = { 0xd0, 0xd6, 0xff, 0xa9, 0x54, 0x75, 0xcd, 0x07, 0xe2, 0xd3, 0x9e, 0x04, 0x94, 0x46, 0xf5, 0xbc } },
-    { .name = "140", .b = 140, .exp = { 0xa2, 0xbe, 0x80, 0xb4, 0x7a, 0xf8, 0x95, 0xa3, 0xbf, 0x46, 0xf8, 0x6b, 0x81, 0xc6, 0xf3, 0x19 } },
-    { .name = "141", .b = 141, .exp = { 0x8d, 0x88, 0x5d, 0xd9, 0xc5, 0xb8, 0xbf, 0x88, 0x15, 0x2f, 0x75, 0x34, 0xd9, 0x49, 0x2a, 0x76 } },
-    { .name = "142", .b = 142, .exp = { 0xbc, 0x6b, 0xa1, 0xe1, 0x87, 0x65, 0x07, 0x77, 0x77, 0xd3, 0xed, 0xcf, 0x89, 0x7f, 0xa6, 0x83 } },
-    { .name = "143", .b = 143, .exp = { 0x5c, 0x1b, 0x26, 0xcf, 0x1f, 0xef, 0xfa, 0x51, 0x51, 0x74, 0xb3, 0x6e, 0x2c, 0x5c, 0x22, 0x37 } },
-    { .name = "144", .b = 144, .exp = { 0xe3, 0xb7, 0x70, 0x5b, 0x33, 0x4d, 0x61, 0xd8, 0x02, 0x2b, 0xf9, 0xb1, 0xa3, 0xaf, 0x70, 0xd1 } },
-    { .name = "145", .b = 145, .exp = { 0xff, 0x0d, 0x4a, 0xa8, 0x2e, 0x04, 0xfa, 0xfc, 0xf0, 0x71, 0x31, 0xdb, 0x1f, 0x96, 0x97, 0x63 } },
-    { .name = "146", .b = 146, .exp = { 0xf1, 0xf2, 0x24, 0xc7, 0x1a, 0x83, 0xa7, 0x16, 0xba, 0x74, 0x75, 0x31, 0x5b, 0xb1, 0x41, 0x1b } },
-    { .name = "147", .b = 147, .exp = { 0xb8, 0x17, 0xa9, 0x88, 0xb4, 0x9a, 0xe4, 0x4e, 0xff, 0xb8, 0xf9, 0x9e, 0xad, 0xf6, 0x22, 0x56 } },
-    { .name = "148", .b = 148, .exp = { 0xb4, 0x90, 0x7b, 0xec, 0xea, 0xfd, 0xc2, 0x41, 0xa7, 0x71, 0x52, 0xc0, 0x80, 0x3e, 0xbf, 0xab } },
-    { .name = "149", .b = 149, .exp = { 0x26, 0x2d, 0xd5, 0xc2, 0x3d, 0x81, 0x13, 0x66, 0x4a, 0xcf, 0x36, 0xc2, 0x3d, 0x9d, 0xfe, 0x97 } },
-    { .name = "150", .b = 150, .exp = { 0x7f, 0x9d, 0x6c, 0xb1, 0x9e, 0xf7, 0x71, 0x1a, 0x87, 0x88, 0x8d, 0x02, 0xb3, 0xd0, 0x6a, 0xce } },
-    { .name = "151", .b = 151, .exp = { 0xb2, 0x1e, 0xa4, 0x87, 0xb1, 0xc7, 0xb4, 0xf0, 0xce, 0x17, 0xfd, 0xef, 0xe8, 0xc1, 0x6e, 0xd4 } },
-    { .name = "152", .b = 152, .exp = { 0xa9, 0x66, 0x71, 0xcc, 0x30, 0xe1, 0x41, 0xb2, 0x29, 0xda, 0x5a, 0x07, 0xd8, 0xa8, 0xcb, 0x9e } },
-    { .name = "153", .b = 153, .exp = { 0x13, 0x2f, 0x3d, 0xf1, 0x60, 0x73, 0x51, 0xae, 0xfd, 0x12, 0x07, 0x82, 0xa2, 0x31, 0xac, 0x46 } },
-    { .name = "154", .b = 154, .exp = { 0x13, 0x95, 0xd7, 0x8d, 0x23, 0x49, 0x08, 0x8b, 0xc1, 0x14, 0x12, 0xf1, 0xef, 0x72, 0xc7, 0x31 } },
-    { .name = "155", .b = 155, .exp = { 0x33, 0xfd, 0x14, 0x4e, 0xda, 0x3c, 0xf1, 0x02, 0xcc, 0x0c, 0x43, 0x63, 0xbf, 0x77, 0x9d, 0x12 } },
-    { .name = "156", .b = 156, .exp = { 0x8c, 0xa6, 0xed, 0x86, 0x01, 0x66, 0xde, 0x17, 0xbf, 0x14, 0x58, 0x06, 0x8e, 0x0f, 0x40, 0xd1 } },
-    { .name = "157", .b = 157, .exp = { 0xf7, 0x54, 0xa9, 0x5b, 0xb3, 0x8a, 0x0e, 0xa9, 0xcb, 0x43, 0xf9, 0x8b, 0xc4, 0x02, 0x6c, 0x10 } },
-    { .name = "158", .b = 158, .exp = { 0xce, 0xa5, 0x21, 0xb1, 0x27, 0xaf, 0x9c, 0x84, 0x2b, 0xd1, 0x23, 0x3b, 0x17, 0x93, 0xbb, 0x18 } },
-    { .name = "159", .b = 159, .exp = { 0x2b, 0x76, 0x9a, 0x4c, 0x56, 0x5c, 0xd7, 0x99, 0xfd, 0x90, 0x78, 0x0d, 0x9b, 0x8b, 0x06, 0xe3 } },
-    { .name = "160", .b = 160, .exp = { 0xeb, 0x02, 0x31, 0x4d, 0xd9, 0x9e, 0x78, 0xc2, 0x06, 0x05, 0xea, 0xcb, 0x13, 0x2a, 0x93, 0x87 } },
-    { .name = "161", .b = 161, .exp = { 0x88, 0x21, 0x46, 0x4f, 0x1f, 0xfe, 0x01, 0x92, 0x1c, 0x81, 0x51, 0x90, 0xfd, 0x2c, 0x7d, 0x3d } },
-    { .name = "162", .b = 162, .exp = { 0xed, 0x7f, 0xcf, 0x2b, 0x5c, 0x3c, 0x2a, 0x31, 0x3d, 0x65, 0x2f, 0xa5, 0x15, 0xf2, 0xa2, 0x19 } },
-    { .name = "163", .b = 163, .exp = { 0xe4, 0x9b, 0x10, 0x58, 0xcb, 0xc1, 0x92, 0x95, 0x50, 0x22, 0xa1, 0x04, 0x12, 0x3f, 0x6f, 0xc0 } },
-    { .name = "164", .b = 164, .exp = { 0x2d, 0xcc, 0x10, 0x97, 0xe7, 0xa3, 0xd4, 0x7a, 0xb7, 0x86, 0x62, 0x8d, 0xbe, 0x7c, 0xe0, 0xb2 } },
-    { .name = "165", .b = 165, .exp = { 0x70, 0x12, 0x1e, 0x56, 0x3d, 0x3a, 0xaa, 0x2d, 0xf3, 0xa2, 0xf5, 0x4a, 0x4b, 0x24, 0x0a, 0xcb } },
-    { .name = "166", .b = 166, .exp = { 0xd4, 0x56, 0xde, 0x38, 0xf0, 0x31, 0x96, 0x88, 0xa3, 0x85, 0xc3, 0x30, 0x71, 0xb0, 0xbc, 0xf5 } },
-    { .name = "167", .b = 167, .exp = { 0x7e, 0x28, 0x2d, 0x6f, 0x11, 0x20, 0x26, 0x87, 0x88, 0x13, 0x8d, 0xbf, 0x96, 0x76, 0x97, 0xe3 } },
-    { .name = "168", .b = 168, .exp = { 0x68, 0x4f, 0xf3, 0xad, 0x48, 0xdc, 0x10, 0xcd, 0x56, 0xec, 0x82, 0xf7, 0xae, 0x93, 0x49, 0xf1 } },
-    { .name = "169", .b = 169, .exp = { 0x7c, 0x95, 0xf6, 0xc1, 0xa1, 0xc6, 0xe3, 0x2b, 0x46, 0x87, 0x58, 0x6e, 0x6f, 0x35, 0x71, 0x4d } },
-    { .name = "170", .b = 170, .exp = { 0x02, 0xde, 0x26, 0xe5, 0xce, 0x79, 0x3b, 0xa6, 0x7b, 0x45, 0x9b, 0xec, 0x77, 0x61, 0xf2, 0xf4 } },
-    { .name = "171", .b = 171, .exp = { 0x55, 0x25, 0xe1, 0xbb, 0xc8, 0x5f, 0x83, 0xe0, 0xe3, 0x63, 0x7e, 0x51, 0xd3, 0xba, 0x0f, 0x01 } },
-    { .name = "172", .b = 172, .exp = { 0x32, 0xfb, 0xe5, 0x43, 0x46, 0xbe, 0x94, 0xb4, 0x7a, 0xed, 0x1d, 0x2b, 0xf6, 0xeb, 0xec, 0x82 } },
-    { .name = "173", .b = 173, .exp = { 0x1d, 0xbc, 0x47, 0xd7, 0x65, 0x33, 0x7d, 0xd2, 0xe9, 0x4a, 0x24, 0x64, 0x99, 0x03, 0x6c, 0x1e } },
-    { .name = "174", .b = 174, .exp = { 0x8d, 0x32, 0x39, 0xbb, 0x47, 0x59, 0x14, 0x90, 0x4d, 0x52, 0xf3, 0x0d, 0x89, 0x90, 0x56, 0x7b } },
-    { .name = "175", .b = 175, .exp = { 0x5d, 0xa8, 0xf1, 0xe1, 0xf0, 0xe7, 0x73, 0x79, 0x87, 0x96, 0x3f, 0x78, 0xde, 0xe6, 0x90, 0xaa } },
-    { .name = "176", .b = 176, .exp = { 0xd3, 0x44, 0x5c, 0xf9, 0x18, 0xd5, 0xbe, 0x10, 0x35, 0x3c, 0xc3, 0x9b, 0xa4, 0xcb, 0xe1, 0xd9 } },
-    { .name = "177", .b = 177, .exp = { 0x74, 0x1e, 0xa0, 0x7f, 0xe1, 0x5e, 0x39, 0x63, 0xb7, 0xf7, 0x1e, 0x22, 0x0c, 0x80, 0x48, 0x7f } },
-    { .name = "178", .b = 178, .exp = { 0x9d, 0xd9, 0x2f, 0xfc, 0x4b, 0x14, 0x89, 0x1a, 0x4c, 0xeb, 0xa6, 0x63, 0xe2, 0xaa, 0x81, 0x10 } },
-    { .name = "179", .b = 179, .exp = { 0x57, 0x04, 0x46, 0x81, 0xd2, 0x60, 0x8b, 0x4b, 0x5c, 0x95, 0x58, 0x1b, 0xae, 0xb0, 0x2c, 0xa8 } },
-    { .name = "180", .b = 180, .exp = { 0x10, 0x8d, 0xbd, 0x53, 0xae, 0x67, 0xed, 0x6d, 0xfd, 0xe4, 0x6d, 0xed, 0xd9, 0xbf, 0x28, 0x46 } },
-    { .name = "181", .b = 181, .exp = { 0x05, 0x3d, 0x9e, 0x85, 0x9f, 0x6d, 0xbf, 0xe5, 0x78, 0x30, 0x0e, 0x06, 0xbf, 0xa2, 0x14, 0xf7 } },
-    { .name = "182", .b = 182, .exp = { 0x3f, 0x54, 0xbf, 0x67, 0x26, 0x22, 0x3a, 0x12, 0xdf, 0xf2, 0x91, 0x89, 0xa1, 0xf2, 0xf5, 0x64 } },
-    { .name = "183", .b = 183, .exp = { 0xa7, 0x30, 0x31, 0xe7, 0xaa, 0x6b, 0x84, 0x45, 0xb4, 0xd1, 0x40, 0x48, 0x56, 0x6d, 0x58, 0x2c } },
-    { .name = "184", .b = 184, .exp = { 0xa5, 0xff, 0x51, 0x50, 0xc7, 0xdd, 0xec, 0xda, 0x43, 0xea, 0x65, 0x90, 0x58, 0x18, 0xac, 0x44 } },
-    { .name = "185", .b = 185, .exp = { 0xbe, 0x0b, 0x3e, 0x45, 0xda, 0x8b, 0x99, 0x81, 0x48, 0xf0, 0x23, 0x95, 0xe6, 0xc5, 0x1f, 0x24 } },
-    { .name = "186", .b = 186, .exp = { 0x09, 0xe1, 0xb1, 0xc9, 0xf2, 0xb8, 0x2b, 0x51, 0x5b, 0x2c, 0x68, 0x90, 0x6d, 0xb7, 0xd8, 0x03 } },
-    { .name = "187", .b = 187, .exp = { 0x1e, 0x1f, 0x9d, 0x00, 0xff, 0xd3, 0xfe, 0x78, 0xa9, 0xf2, 0x41, 0x07, 0x66, 0xae, 0x50, 0x79 } },
-    { .name = "188", .b = 188, .exp = { 0xb8, 0x1b, 0x78, 0x08, 0x99, 0xc5, 0x2d, 0x40, 0xf8, 0x29, 0x1e, 0x21, 0x1e, 0x95, 0x9f, 0x06 } },
-    { .name = "189", .b = 189, .exp = { 0x2b, 0xdf, 0x7d, 0xba, 0x36, 0xf4, 0x41, 0x61, 0xa9, 0xf5, 0xcc, 0x51, 0x9f, 0x2a, 0xd4, 0x14 } },
-    { .name = "190", .b = 190, .exp = { 0x53, 0x19, 0xa2, 0x64, 0x68, 0x36, 0xee, 0x2c, 0x3c, 0xdf, 0x54, 0x3c, 0x2f, 0x6d, 0x72, 0x62 } },
-    { .name = "191", .b = 191, .exp = { 0x61, 0x9f, 0xd1, 0xa6, 0xe3, 0x5a, 0xb2, 0x16, 0x15, 0x78, 0xce, 0xd7, 0x85, 0x3b, 0x85, 0x49 } },
-    { .name = "192", .b = 192, .exp = { 0x32, 0x32, 0x53, 0x3c, 0x06, 0x0c, 0xb3, 0x4a, 0x34, 0x47, 0xd0, 0xdd, 0x9c, 0x0c, 0x39, 0xdc } },
-    { .name = "193", .b = 193, .exp = { 0xe4, 0xe5, 0xc4, 0x6d, 0xcc, 0x9c, 0x18, 0xba, 0x57, 0x97, 0xdb, 0xbc, 0xdc, 0x57, 0xaf, 0x80 } },
-    { .name = "194", .b = 194, .exp = { 0x0f, 0xe2, 0xe6, 0x11, 0xc0, 0x8f, 0x2e, 0x16, 0xf8, 0xd9, 0xa5, 0x04, 0x4d, 0x14, 0x7a, 0x3d } },
-    { .name = "195", .b = 195, .exp = { 0x04, 0x82, 0x55, 0x6f, 0xed, 0x2d, 0xbf, 0x30, 0x5f, 0x82, 0xed, 0xc6, 0x46, 0x48, 0xa3, 0xae } },
-    { .name = "196", .b = 196, .exp = { 0xb0, 0xf0, 0x40, 0x46, 0x57, 0xb9, 0x00, 0x58, 0xcd, 0x37, 0x88, 0xb8, 0x08, 0x21, 0xfe, 0x48 } },
-    { .name = "197", .b = 197, .exp = { 0x7b, 0x69, 0xe8, 0xda, 0xac, 0xf3, 0xe4, 0x5e, 0x31, 0x3c, 0x54, 0x97, 0xd5, 0xcb, 0x02, 0x92 } },
-    { .name = "198", .b = 198, .exp = { 0x2f, 0x75, 0x41, 0xe0, 0x07, 0x60, 0x20, 0x27, 0xdc, 0x18, 0xb6, 0x55, 0xd6, 0x45, 0xc4, 0x87 } },
-    { .name = "199", .b = 199, .exp = { 0x19, 0xd6, 0x4e, 0x6b, 0x4d, 0xb5, 0x0f, 0xfb, 0x1b, 0x81, 0x59, 0x14, 0xc5, 0x7a, 0x5b, 0x13 } },
-    { .name = "200", .b = 200, .exp = { 0x6b, 0x6f, 0x48, 0xca, 0x3a, 0x74, 0xbf, 0x75, 0x97, 0xbf, 0x93, 0x1a, 0x47, 0xa6, 0x6c, 0xa8 } },
-    { .name = "201", .b = 201, .exp = { 0xc4, 0xba, 0xa0, 0xdd, 0xd2, 0x95, 0x3d, 0xc6, 0x50, 0x7b, 0x3f, 0x4a, 0xa4, 0x0a, 0xb9, 0xee } },
-    { .name = "202", .b = 202, .exp = { 0x03, 0x54, 0x7c, 0xc5, 0xda, 0x9d, 0x5d, 0x8e, 0x95, 0xa0, 0x7d, 0xb4, 0x1a, 0xf7, 0x3d, 0x00 } },
-    { .name = "203", .b = 203, .exp = { 0x1b, 0xd8, 0xfe, 0x9f, 0x11, 0x32, 0x41, 0x32, 0x8b, 0xee, 0xa2, 0xc8, 0xb4, 0xcb, 0x06, 0x47 } },
-    { .name = "204", .b = 204, .exp = { 0x86, 0xa8, 0x39, 0xb7, 0xb9, 0x94, 0xc5, 0x7b, 0x46, 0xb6, 0x32, 0x63, 0x14, 0x47, 0x69, 0x83 } },
-    { .name = "205", .b = 205, .exp = { 0xf5, 0x43, 0x58, 0xd9, 0x53, 0x92, 0xf4, 0xee, 0x6a, 0xe5, 0xce, 0x63, 0x98, 0x2f, 0xfd, 0x9a } },
-    { .name = "206", .b = 206, .exp = { 0xa0, 0x9d, 0xb8, 0xc4, 0x83, 0xc1, 0xf4, 0xce, 0xf4, 0xb5, 0xb9, 0x31, 0xc5, 0x8b, 0x7f, 0x90 } },
-    { .name = "207", .b = 207, .exp = { 0x63, 0xf5, 0x32, 0x9c, 0x6b, 0x29, 0xfa, 0x2c, 0x8b, 0x23, 0xc5, 0xea, 0x91, 0x67, 0xf0, 0x6a } },
-    { .name = "208", .b = 208, .exp = { 0xc5, 0xb5, 0x7c, 0xe6, 0xf6, 0x94, 0x08, 0xad, 0x08, 0x23, 0x97, 0x56, 0xaf, 0x72, 0x6a, 0xa2 } },
-    { .name = "209", .b = 209, .exp = { 0x71, 0xec, 0xc8, 0x0d, 0x53, 0x82, 0x44, 0x71, 0xc7, 0x3e, 0x2d, 0x8d, 0xdf, 0xd1, 0x51, 0x89 } },
-    { .name = "210", .b = 210, .exp = { 0x46, 0x73, 0x14, 0xde, 0x01, 0x83, 0x98, 0x3f, 0x87, 0xd3, 0xd9, 0x1d, 0x03, 0x3f, 0xfb, 0xfb } },
-    { .name = "211", .b = 211, .exp = { 0x9f, 0x4e, 0x00, 0xdc, 0x2a, 0xba, 0x5e, 0x69, 0xd8, 0x5c, 0xcb, 0x06, 0x89, 0x4d, 0xee, 0xb4 } },
-    { .name = "212", .b = 212, .exp = { 0xd2, 0xdd, 0x14, 0xc2, 0xf5, 0x21, 0x57, 0xc1, 0xdd, 0x37, 0xce, 0x89, 0xc3, 0xd3, 0x5c, 0xdd } },
-    { .name = "213", .b = 213, .exp = { 0x7d, 0xfa, 0x20, 0x44, 0xa8, 0xa9, 0x56, 0x0f, 0xe3, 0x4d, 0xee, 0x88, 0x36, 0x7f, 0xd9, 0x19 } },
-    { .name = "214", .b = 214, .exp = { 0x53, 0xd1, 0x14, 0x47, 0x6c, 0x82, 0x04, 0xd5, 0xa2, 0x78, 0x5e, 0x67, 0xe4, 0xd8, 0x4d, 0x68 } },
-    { .name = "215", .b = 215, .exp = { 0x22, 0x92, 0x83, 0xce, 0x9f, 0x98, 0x1c, 0x60, 0x3b, 0xf1, 0xf4, 0xdd, 0xb6, 0x9d, 0xfe, 0xd3 } },
-    { .name = "216", .b = 216, .exp = { 0x81, 0xa6, 0xf5, 0x82, 0x4a, 0xd4, 0x67, 0x1a, 0xbd, 0x41, 0x9d, 0xd9, 0x7b, 0x50, 0x53, 0x4e } },
-    { .name = "217", .b = 217, .exp = { 0x7e, 0x8e, 0x60, 0xc3, 0x92, 0xb9, 0x97, 0x14, 0x53, 0xb7, 0x63, 0x82, 0x76, 0xdf, 0x82, 0xc4 } },
-    { .name = "218", .b = 218, .exp = { 0x7e, 0xbe, 0x47, 0x73, 0x7a, 0x98, 0xa8, 0x45, 0x4f, 0x93, 0x78, 0xaa, 0xbd, 0xa3, 0xb7, 0xf7 } },
-    { .name = "219", .b = 219, .exp = { 0x0f, 0x2b, 0xb9, 0xaf, 0xf8, 0xf5, 0xf4, 0xe5, 0xf3, 0x19, 0xe2, 0x33, 0x36, 0x85, 0x42, 0x5c } },
-    { .name = "220", .b = 220, .exp = { 0x74, 0x9c, 0xf4, 0x8c, 0xd5, 0x27, 0xd1, 0x6e, 0xbc, 0x61, 0xa1, 0xed, 0x87, 0x86, 0xf0, 0x95 } },
-    { .name = "221", .b = 221, .exp = { 0x5e, 0xe0, 0x82, 0x69, 0x04, 0x86, 0x5d, 0x0d, 0x35, 0x3b, 0x77, 0x4d, 0x77, 0xc4, 0x22, 0x18 } },
-    { .name = "222", .b = 222, .exp = { 0x4f, 0x36, 0x86, 0xe5, 0x12, 0xd5, 0xb8, 0x79, 0x70, 0x3b, 0x64, 0x2c, 0x4f, 0x34, 0x6c, 0xbe } },
-    { .name = "223", .b = 223, .exp = { 0xf3, 0xc7, 0x9a, 0x23, 0x91, 0xe6, 0xab, 0x38, 0xe4, 0xc4, 0x29, 0xa2, 0x60, 0xb1, 0x35, 0x27 } },
-    { .name = "224", .b = 224, .exp = { 0x0d, 0xaa, 0xb3, 0x88, 0xfe, 0x38, 0xab, 0x46, 0x4c, 0x62, 0x04, 0x55, 0xc0, 0x89, 0x22, 0x4d } },
-    { .name = "225", .b = 225, .exp = { 0xc0, 0xd5, 0xb0, 0x02, 0x45, 0x49, 0x25, 0x42, 0xd2, 0x24, 0x65, 0xef, 0x29, 0x47, 0x43, 0x61 } },
-    { .name = "226", .b = 226, .exp = { 0x4b, 0x8c, 0x41, 0x27, 0x09, 0xe4, 0xb7, 0x6a, 0x25, 0xb4, 0x4b, 0xbc, 0x3b, 0xb6, 0x71, 0x5e } },
-    { .name = "227", .b = 227, .exp = { 0x3d, 0x12, 0x80, 0x3e, 0x80, 0x2d, 0xa0, 0x40, 0x3a, 0x95, 0xf4, 0x7c, 0xc7, 0x4d, 0xe1, 0x16 } },
-    { .name = "228", .b = 228, .exp = { 0xcd, 0xff, 0xa8, 0xa5, 0xb8, 0x61, 0x87, 0xd9, 0xf2, 0x94, 0xc3, 0x70, 0x6a, 0x43, 0xac, 0xf9 } },
-    { .name = "229", .b = 229, .exp = { 0x60, 0x64, 0x43, 0x7f, 0x64, 0xa6, 0x13, 0xc9, 0xfc, 0xd1, 0x92, 0xb3, 0xbc, 0x9d, 0x77, 0x75 } },
-    { .name = "230", .b = 230, .exp = { 0xd3, 0xd2, 0x79, 0x2a, 0x00, 0x59, 0x6d, 0x01, 0x01, 0x07, 0xf6, 0x78, 0x06, 0xf9, 0x4e, 0x93 } },
-    { .name = "231", .b = 231, .exp = { 0x3f, 0xe0, 0x4e, 0xf1, 0x75, 0x80, 0x21, 0x1d, 0x59, 0x14, 0x39, 0x4f, 0xae, 0x60, 0xf7, 0x69 } },
-    { .name = "232", .b = 232, .exp = { 0xce, 0xa0, 0x6c, 0xb8, 0xc7, 0x27, 0x88, 0xce, 0xbd, 0x71, 0xef, 0xa8, 0xff, 0x40, 0x9b, 0xf4 } },
-    { .name = "233", .b = 233, .exp = { 0xb0, 0x77, 0x70, 0x9a, 0x5e, 0xf0, 0x74, 0xee, 0x98, 0x02, 0xe6, 0x8f, 0xab, 0xc9, 0x87, 0x14 } },
-    { .name = "234", .b = 234, .exp = { 0xe4, 0xa3, 0xd6, 0x1d, 0x62, 0x88, 0x7c, 0x5a, 0xab, 0x3e, 0x16, 0xef, 0x10, 0x88, 0x38, 0xe4 } },
-    { .name = "235", .b = 235, .exp = { 0x3f, 0x2b, 0x2d, 0xa9, 0x98, 0xd3, 0x39, 0x20, 0xc4, 0x69, 0x81, 0x52, 0x84, 0xdc, 0xaa, 0x73 } },
-    { .name = "236", .b = 236, .exp = { 0xdb, 0x3a, 0xd9, 0x4f, 0x4f, 0x93, 0xfd, 0xbc, 0x97, 0x65, 0x1f, 0x72, 0x66, 0x08, 0x26, 0x15 } },
-    { .name = "237", .b = 237, .exp = { 0x31, 0xeb, 0x5f, 0xc0, 0x1b, 0xb6, 0xb3, 0xb0, 0x05, 0x9a, 0x01, 0x6f, 0x9e, 0x26, 0x83, 0xaa } },
-    { .name = "238", .b = 238, .exp = { 0xff, 0xb3, 0x4b, 0x08, 0x07, 0x5a, 0x0a, 0xce, 0x0f, 0x53, 0x79, 0x25, 0xaa, 0x28, 0x4a, 0xe8 } },
-    { .name = "239", .b = 239, .exp = { 0x92, 0x71, 0xa5, 0x58, 0x07, 0x83, 0xf9, 0x78, 0xd1, 0xf3, 0xc2, 0x31, 0x05, 0xe3, 0x5e, 0x54 } },
-    { .name = "240", .b = 240, .exp = { 0x36, 0x54, 0x52, 0xda, 0x7c, 0x3c, 0x26, 0x90, 0x36, 0xcc, 0x30, 0x1c, 0x34, 0xfe, 0x49, 0x26 } },
-    { .name = "241", .b = 241, .exp = { 0x33, 0x97, 0xc0, 0xcf, 0x1e, 0x18, 0x6e, 0x98, 0x88, 0xec, 0xa2, 0xc8, 0xf3, 0x9f, 0x63, 0x92 } },
-    { .name = "242", .b = 242, .exp = { 0x5d, 0xb4, 0x54, 0xec, 0x1a, 0x5e, 0xab, 0xc7, 0x4d, 0xf4, 0x02, 0x11, 0xe3, 0xa5, 0xa3, 0xb9 } },
-    { .name = "243", .b = 243, .exp = { 0xc1, 0x8f, 0x8b, 0x5f, 0x30, 0x95, 0xd4, 0xa4, 0xb4, 0xd6, 0x4d, 0x09, 0x9a, 0x5a, 0xac, 0x0f } },
-    { .name = "244", .b = 244, .exp = { 0xa1, 0x3f, 0x27, 0xc6, 0x18, 0x49, 0x23, 0xa1, 0x50, 0xb0, 0x5d, 0x25, 0xd5, 0x01, 0x9b, 0xcd } },
-    { .name = "245", .b = 245, .exp = { 0x0a, 0x5c, 0x43, 0x3d, 0xfe, 0x7e, 0x78, 0xbb, 0x3f, 0xb4, 0xd7, 0x9e, 0x6a, 0x7c, 0x8e, 0x4d } },
-    { .name = "246", .b = 246, .exp = { 0xdd, 0xe4, 0xfe, 0x64, 0xf1, 0x6a, 0x8c, 0xdc, 0x58, 0x74, 0x4e, 0x51, 0x16, 0xee, 0x60, 0xb3 } },
-    { .name = "247", .b = 247, .exp = { 0x09, 0x1b, 0xde, 0xac, 0x4c, 0x24, 0x98, 0x36, 0x60, 0x81, 0xb2, 0x9c, 0xe8, 0xf0, 0x04, 0x4a } },
-    { .name = "248", .b = 248, .exp = { 0x94, 0x7f, 0x28, 0x74, 0x92, 0xdb, 0x43, 0x0d, 0x49, 0x30, 0x1a, 0x24, 0x7e, 0x34, 0x53, 0x6f } },
-    { .name = "249", .b = 249, .exp = { 0xbd, 0xd5, 0xdd, 0x49, 0x36, 0x13, 0xbd, 0xd6, 0xb8, 0xfc, 0xd9, 0x04, 0x9f, 0xc9, 0x42, 0x3f } },
-    { .name = "250", .b = 250, .exp = { 0x10, 0xd1, 0x7b, 0x97, 0xa5, 0x98, 0x15, 0x89, 0x50, 0x38, 0xa0, 0xbf, 0xdb, 0x0e, 0x3b, 0x54 } },
-    { .name = "251", .b = 251, .exp = { 0xe9, 0x70, 0x29, 0x8c, 0x01, 0xc6, 0x6d, 0xc5, 0x40, 0x0b, 0xe8, 0xd2, 0xf7, 0x51, 0xa1, 0x86 } },
-    { .name = "252", .b = 252, .exp = { 0x3a, 0xc8, 0xbf, 0x92, 0x90, 0x92, 0x0b, 0xb6, 0x90, 0x59, 0x13, 0x62, 0x6a, 0x20, 0xee, 0xbc } },
-    { .name = "253", .b = 253, .exp = { 0xc7, 0x88, 0xde, 0xde, 0xbc, 0x8c, 0x84, 0xad, 0x1c, 0xbc, 0x69, 0x00, 0xaf, 0xa5, 0x0b, 0xd2 } },
-    { .name = "254", .b = 254, .exp = { 0x8b, 0x3a, 0xa9, 0x5d, 0x4a, 0x97, 0xfb, 0x20, 0x78, 0x0a, 0xd2, 0x7c, 0x4c, 0xcb, 0xd9, 0x79 } },
-    { .name = "255", .b = 255, .exp = { 0x73, 0x3d, 0x45, 0x87, 0xa0, 0x39, 0xf5, 0x6c, 0x6c, 0xa0, 0x29, 0x0c, 0x94, 0x60, 0x87, 0xfd } },
-  };
-
-  const uint8_t SEED[32] = { 0 }; // all zero prf seed
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    uint8_t got[16] = { 0 };
-    prf(SEED, TESTS[i].b, got, sizeof(got));
-
-    // check for expected value
-    if (memcmp(&got, &TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-typedef struct {
-  uint16_t val; // coefficient
-  size_t sum;   // expected count
-} dist_t;
-
-// Accumulate polynomial coefficient distribution in `sums` and
-// `sums_len`.
-static void dist_add_poly(dist_t * const sums, size_t * const sums_len, const poly_t * const p) {
-  for (size_t i = 0; i < 256; i++) {
-    const uint16_t val = p->cs[i];
-    bool found = false;
-    for (size_t j = 0; !found && j < *sums_len; j++) {
-      if (sums[j].val == val) {
-        sums[j].sum++;
-        found = true;
-      }
-    }
-
-    if (!found) {
-      sums[*sums_len].val = val;
-      sums[*sums_len].sum = 1;
-      *sums_len = *sums_len + 1;
-    }
-  }
-}
-
-// Check for expected polynomial coefficient distribution.
-static void dist_check(const char * const name, const size_t num_polys, const dist_t * const got, const size_t got_len, const dist_t * const exp, const size_t exp_len) {
-  for (size_t i = 0; i < exp_len; i++) {
-    for (size_t j = 0; j < got_len; j++) {
-      if (exp[i].val == got[j].val) {
-        // get expected sum and delta (abs diff) between sums
-        const size_t exp_sum = num_polys * exp[i].sum,
-                     got_sum = got[j].sum,
-                     delta = (exp_sum > got_sum) ? (exp_sum - got_sum) : (got_sum - exp_sum);
-
-        // check for >1% delta from expected sum
-        if (delta > (exp_sum / 100)) {
-          fprintf(stderr, "%s failed: coef = %d, got = %zu, exp = %zu\n", name, got[j].val, got_sum, exp_sum);
-        }
-      }
-    }
-  }
-}
-
-static void test_poly_sample_cbd3(void) {
-  static const struct {
-    const uint8_t byte; // test byte
-    const poly_t exp; // expected polynomial
-  } TESTS[] = {{
-    .byte = 0,
-    .exp = {
-      .cs = {
-        // expected coefficients, seed = { 0 }, byte = 0
-        0, 0, 2, 0, 1, 0, 0, 1, 0, 3328, 3326, 1, 3328, 3328, 3327, 3328, 0, 3328, 1, 0, 2, 3328, 1, 1, 1, 3328, 3328, 1, 0, 3327, 0, 2, 2, 2, 0, 3328, 1, 3328, 0, 0, 3328, 3327, 2, 3327, 1, 1, 2, 2, 3328, 3328, 1, 0, 0, 3327, 1, 0, 1, 3327, 1, 0, 3328, 0, 3327, 3328, 2, 1, 1, 0, 0, 0, 3328, 2, 0, 0, 3328, 3328, 0, 1, 0, 0, 2, 3328, 0, 1, 1, 3328, 1, 2, 0, 0, 1, 0, 3328, 0, 3328, 0, 2, 3328, 0, 3327, 1, 3328, 3328, 1, 1, 3328, 1, 0, 1, 0, 0, 3328, 3327, 3328, 3328, 2, 0, 1, 0, 0, 3327, 0, 0, 0, 2, 3328, 0, 3328, 0, 0, 1, 0, 1, 0, 3328, 1, 0, 1, 1, 3328, 3328, 2, 1, 0, 2, 0, 1, 3327, 3326, 3327, 0, 1, 1, 3328, 0, 0, 0, 0, 3327, 1, 0, 0, 0, 2, 1, 0, 3326, 1, 3, 2, 1, 0, 3328, 3328, 0, 0, 1, 2, 0, 2, 3328, 2, 0, 2, 3328, 0, 0, 1, 3328, 3328, 0, 1, 1, 0, 3, 0, 3327, 3328, 3327, 3328, 2, 1, 0, 3328, 3328, 0, 3327, 3327, 2, 2, 2, 0, 0, 3328, 3, 2, 3327, 3328, 1, 3327, 2, 0, 1, 3328, 3328, 3328, 3327, 1, 3328, 3328, 0, 1, 3327, 2, 0, 1, 1, 3327, 3327, 0, 1, 0, 1, 0, 2, 0, 3328, 2, 0, 3328, 3328, 1, 3326, 1, 1, 1
-      },
-    },
-  }, {
-    .byte = 1,
-    .exp = {
-      .cs = {
-        // expected coefficients, seed = { 0 }, byte = 1
-        1, 2, 1, 2, 1, 0, 3328, 2, 3328, 3327, 2, 1, 1, 3328, 3327, 3328, 0, 1, 3328, 2, 2, 0, 1, 0, 3327, 0, 1, 0, 1, 3328, 3327, 3327, 1, 1, 3328, 0, 0, 3327, 0, 3327, 3328, 2, 3328, 3328, 2, 3328, 0, 3328, 0, 3328, 0, 3327, 1, 2, 3328, 3327, 3326, 2, 2, 3328, 3327, 1, 3328, 0, 2, 2, 2, 1, 3328, 0, 2, 3328, 0, 0, 0, 0, 2, 3327, 2, 1, 3327, 3328, 0, 3328, 3327, 1, 1, 2, 0, 3326, 1, 0, 3327, 3328, 0, 3328, 2, 0, 0, 3328, 3328, 3328, 1, 3328, 2, 2, 3327, 0, 1, 3327, 3327, 0, 0, 2, 1, 3328, 1, 0, 3328, 0, 3328, 3328, 0, 3328, 1, 0, 0, 3328, 3328, 3328, 0, 2, 0, 1, 0, 0, 1, 0, 2, 3328, 3328, 0, 2, 1, 3327, 3328, 1, 3328, 2, 0, 3327, 3327, 0, 3326, 1, 3328, 0, 0, 3327, 0, 0, 2, 3328, 0, 3328, 1, 0, 3328, 0, 3328, 2, 1, 0, 3328, 2, 1, 0, 1, 0, 3327, 0, 3, 3327, 3328, 0, 3327, 0, 3328, 0, 0, 0, 2, 0, 0, 0, 1, 3328, 1, 0, 1, 0, 3328, 0, 0, 1, 0, 3327, 0, 0, 3327, 3, 2, 0, 3328, 2, 3328, 0, 1, 3326, 0, 0, 3328, 2, 3328, 0, 3328, 1, 3328, 3328, 1, 0, 0, 0, 3328, 1, 1, 0, 2, 0, 3328, 3328, 1, 3328, 0, 0, 3328, 3328, 1, 0, 0, 1, 2, 0, 0, 3327, 3328
-      },
-    },
-  }};
-
-  const uint8_t SEED[32] = { 0 }; // all zero prf seed
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // sample coefficients
-    poly_t got = { 0 };
-    poly_sample_cbd3(&got, SEED, TESTS[i].byte);
-
-    // check for expected value
-    if (memcmp(&got, &TESTS[i].exp, sizeof(poly_t))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%d", TESTS[i].byte);
-      fail_poly_test(__func__, name, &got, &(TESTS[i].exp));
-    }
-  }
-
-  const size_t NUM_POLYS = 10000; // number of samples
-
-  // calculate coefficient distribution for 10k polynomials
-  dist_t sums[32] = { 0 };
-  size_t sums_len = 0;
-  for (size_t i = 0; i < NUM_POLYS; i++) {
-    // init seed (first 4 bytes of 32-byte seed value used for PRF are
-    // treated as an u32)
-    union { uint8_t u8[32]; uint32_t u32[8]; } dist_seed =  { .u8 = { 0 } };
-    dist_seed.u32[0] = i;
-
-    // sample coefficients
-    poly_t got = { 0 };
-    poly_sample_cbd3(&got, dist_seed.u8, 0);
-
-    // accumulate polynomial coefficient distribution
-    dist_add_poly(sums, &sums_len, &got);
-  }
-
-  // expected coefficient distribution for one polynomial
-  const dist_t EXP_DIST[] = {
-    { 3326, 4 },  // -3, 1/64*256 = 4
-    { 3327, 24 }, // -2, 6/64*256 = 24
-    { 3328, 60 }, // -1, 15/64*256 = 60
-    { 0, 80 },    //  0, 20/64*256 = 80
-    { 1, 60 },    // +1, 15/64*256 = 60
-    { 2, 24 },    // +2, 6/64*256 = 24
-    { 3, 4 },     // +3, 1/64*256 = 4
-  };
-
-  // check for expected coefficient distribution
-  dist_check("test_poly_sample_cbd3()", NUM_POLYS, sums, sums_len, EXP_DIST, sizeof(EXP_DIST) / sizeof(EXP_DIST[0]));
-}
-
-static void test_poly_sample_cbd2(void) {
-  static const struct {
-    const uint8_t byte; // test byte
-    const poly_t exp; // expected polynomial
-  } TESTS[] = {{
-    .byte = 0,
-    .exp = {
-      .cs = {
-        // expected coefficients, eta = 2, seed = { 0 }, byte = 0
-        0, 3327, 0, 2, 3327, 3327, 1, 3328, 1, 3328, 0, 2, 0, 0, 1, 3328, 1, 0, 1, 2, 3328, 0, 1, 3327, 3328, 0, 3327, 1, 3328, 1, 0, 0, 3328, 0, 0, 0, 1, 0, 3328, 3327, 0, 2, 0, 1, 3328, 1, 0, 1, 0, 3327, 0, 0, 0, 3328, 0, 0, 3327, 3328, 0, 3328, 3327, 1, 0, 0, 3328, 3328, 0, 0, 0, 0, 3327, 0, 0, 0, 3327, 3328, 3327, 0, 0, 2, 0, 1, 0, 0, 1, 1, 3328, 1, 0, 0, 0, 0, 3328, 3328, 1, 3328, 0, 3327, 3328, 1, 0, 2, 2, 1, 3328, 3328, 0, 0, 0, 1, 3328, 0, 0, 0, 1, 3328, 3328, 0, 2, 0, 0, 3328, 0, 0, 1, 0, 1, 3328, 0, 0, 3328, 0, 0, 1, 3328, 2, 0, 1, 0, 1, 2, 0, 0, 3328, 0, 3328, 0, 1, 0, 3328, 0, 1, 3328, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 3328, 1, 1, 3328, 3328, 0, 0, 3327, 0, 1, 0, 3328, 0, 2, 1, 1, 3327, 1, 1, 3328, 0, 1, 0, 3328, 3327, 0, 0, 3328, 0, 1, 1, 3328, 3328, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 3328, 3328, 3327, 3328, 2, 0, 1, 2, 1, 0, 3328, 0, 0, 3328, 3328, 1, 3328, 3328, 3328, 3328, 3328, 3328, 0, 3328, 0, 3328, 3328, 3328, 3327, 0, 0, 1, 2, 0, 0, 1, 0, 1, 3328, 3328, 1, 3328, 1, 0, 1, 3327, 2, 0
-      },
-    },
-  }, {
-    .byte = 1,
-    .exp = {
-      .cs = {
-        // expected coefficients, eta = 2, seed = { 0 }, byte = 1
-        2, 3328, 0, 0, 3328, 2, 0, 0, 3328, 3327, 3328, 0, 3328, 0, 3327, 0, 3327, 3328, 0, 0, 0, 3327, 1, 0, 1, 0, 0, 0, 3328, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 3328, 3328, 0, 1, 0, 2, 0, 0, 3328, 3328, 1, 1, 1, 3328, 0, 3328, 2, 2, 0, 1, 1, 1, 0, 0, 0, 1, 3328, 3328, 3327, 0, 1, 3328, 1, 3328, 0, 0, 0, 0, 0, 1, 1, 1, 3328, 3328, 0, 0, 1, 1, 3328, 3327, 1, 2, 0, 1, 0, 0, 3328, 1, 1, 3328, 3328, 1, 1, 3328, 1, 1, 1, 0, 3327, 0, 3328, 3328, 0, 0, 0, 0, 0, 3328, 2, 3328, 0, 0, 0, 1, 0, 0, 0, 3328, 3328, 3327, 0, 0, 0, 3328, 1, 0, 0, 0, 0, 3328, 1, 1, 1, 2, 3328, 3328, 0, 1, 0, 3328, 2, 1, 0, 0, 3327, 1, 0, 1, 0, 1, 3328, 0, 1, 0, 0, 0, 0, 0, 3328, 1, 1, 1, 3327, 0, 1, 2, 0, 0, 3328, 1, 2, 3328, 3328, 0, 0, 1, 2, 0, 3327, 0, 1, 3328, 0, 1, 2, 0, 0, 1, 0, 0, 1, 0, 3328, 0, 1, 0, 0, 3328, 3327, 0, 0, 3328, 0, 3327, 1, 0, 2, 1, 0, 0, 3327, 1, 0, 3328, 3328, 1, 0, 0, 0, 3328, 0, 0, 0, 0, 3328, 3328, 3327, 1, 1, 3328, 0, 1, 3328, 1, 1, 0, 3328, 3328, 1, 0, 0, 3328, 0, 0, 0
-      },
-    },
-  }};
-
-  const uint8_t SEED[32] = { 0 }; // all zero prf seed
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // sample coefficients
-    poly_t got = { 0 };
-    poly_sample_cbd2(&got, SEED, TESTS[i].byte);
-
-    // check for expected value
-    if (memcmp(&got, &TESTS[i].exp, sizeof(poly_t))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%d", TESTS[i].byte);
-      fail_poly_test(__func__, name, &got, &(TESTS[i].exp));
-    }
-  }
-
-  const size_t NUM_POLYS = 10000; // number of samples
-
-  // calculate coefficient distribution for 10k polynomials
-  dist_t sums[32] = { 0 };
-  size_t sums_len = 0;
-  for (size_t i = 0; i < NUM_POLYS; i++) {
-    // init seed (first 4 bytes of 32-byte seed value used for PRF are
-    // treated as an u32)
-    union { uint8_t u8[32]; uint32_t u32[8]; } dist_seed =  { .u8 = { 0 } };
-    dist_seed.u32[0] = i;
-
-    // sample coefficients
-    poly_t got = { 0 };
-    poly_sample_cbd2(&got, dist_seed.u8, 0);
-
-    // accumulate polynomial coefficient distribution
-    dist_add_poly(sums, &sums_len, &got);
-  }
-
-  // expected coefficient distribution for one polynomial
-  const dist_t EXP_DIST[] = {
-    { 3327, 16 }, // -2, 1/16*256 = 16
-    { 3328, 64 }, // -1, 4/16*256 = 64
-    { 0, 96 },    //  0, 6/16*256 = 96
-    { 1, 64 },    // +1, 4/16*256 = 64
-    { 2, 16 },    // +2, 1/16*256 = 16
-  };
-
-  // check for expected coefficient distribution
-  dist_check("test_poly_sample_cbd2()", NUM_POLYS, sums, sums_len, EXP_DIST, sizeof(EXP_DIST) / sizeof(EXP_DIST[0]));
-}
-
-// Test cases for poly_encode() and poly_decode(), including
-// coefficients in the range [3329, 4095] (e.g., out of bounds)
-static const struct {
-  const char *name; // test name
-  const poly_t val; // test polynomial for poly_encode()
-  const poly_t exp; // expected polynomial from poly_decode()
-} POLY_ENCODE_TESTS[] = {{
-  .name = "0-255",
-  .val = {
-    .cs = {
-      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
-    },
-  },
-  .exp = {
-    .cs = {
-      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
-    },
-  },
-}, {
-  .name = "256-511",
-  .val = {
-    .cs = {
-      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
-    },
-  },
-  .exp = {
-    .cs = {
-      256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511,
-    },
-  },
-}, {
-  .name = "512-767",
-  .val = {
-    .cs = {
-      512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
-    },
-  },
-  .exp = {
-    .cs = {
-      512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
-    },
-  },
-}, {
-  .name = "3000-3255",
-  .val = {
-    .cs = {
-      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,
-    },
-  },
-  .exp = {
-    .cs = {
-      3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255,
-    },
-  },
-}, {
-  .name = "3073-3328",
-  .val = {
-    .cs = {
-      3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328,
-    },
-  },
-  .exp = {
-    .cs = {
-      3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328,
-    },
-  },
-}, {
-  .name = "3229-3484 (test modulus)",
-  .val = {
-    .cs = {
-      3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584
-    },
-  },
-  .exp = {
-    .cs = {
-      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
-    },
-  },
-}};
-
-// test poly_encode_scalar() and poly_decode_scalar()
-static void test_poly_encode_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_TESTS)/sizeof(POLY_ENCODE_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[384] = { 0 };
-    poly_encode_scalar(buf, &(POLY_ENCODE_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_scalar(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_TESTS[i].name, &got, &(POLY_ENCODE_TESTS[i].exp));
-    }
-  }
-}
-
-// test poly_encode_avx512() and poly_decode_avx512()
-static void test_poly_encode_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_TESTS)/sizeof(POLY_ENCODE_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[384] = { 0 };
-    poly_encode_avx512(buf, &(POLY_ENCODE_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_avx512(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_TESTS[i].name, &got, &(POLY_ENCODE_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-// test poly_encode_neon() and poly_decode_neon()
-static void test_poly_encode_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_TESTS)/sizeof(POLY_ENCODE_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[384] = { 0 };
-    poly_encode_neon(buf, &(POLY_ENCODE_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_neon(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_TESTS[i].name, &got, &(POLY_ENCODE_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val; // test polynomial for poly_encode()
-  const poly_t exp; // expected polynomial from poly_decode()
-} POLY_ENCODE_11BIT_TESTS[] = {{
-  // poly_encode_11bits() tests (0-3315, step=13)
-  .name = "0-3315 (inc by 13)",
-  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
-  .exp = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2716, 2729, 2742, 2755, 2768, 2781, 2794, 2807, 2820, 2833, 2846, 2859, 2872, 2885, 2898, 2911, 2924, 2937, 2950, 2963, 2976, 2989, 3002, 3015, 3028, 3041, 3054, 3067, 3080, 3093, 3106, 3119, 3132, 3145, 3158, 3171, 3184, 3197, 3210, 3223, 3236, 3249, 3262, 3275, 3288, 3301, 3314 } },
-}};
-
-static void test_poly_encode_11bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_11BIT_TESTS)/sizeof(POLY_ENCODE_11BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[352] = { 0 };
-    poly_encode_11bit_scalar(buf, &(POLY_ENCODE_11BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_11bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_11BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_11BIT_TESTS[i].name, &got, &(POLY_ENCODE_11BIT_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_encode_11bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_11BIT_TESTS)/sizeof(POLY_ENCODE_11BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[352] = { 0 };
-    poly_encode_11bit_avx512(buf, &(POLY_ENCODE_11BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_11bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_11BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_11BIT_TESTS[i].name, &got, &(POLY_ENCODE_11BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_encode_11bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_11BIT_TESTS)/sizeof(POLY_ENCODE_11BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[352] = { 0 };
-    poly_encode_11bit_neon(buf, &(POLY_ENCODE_11BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_11bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_11BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_11BIT_TESTS[i].name, &got, &(POLY_ENCODE_11BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val; // test polynomial for poly_encode()
-  const poly_t exp; // expected polynomial from poly_decode()
-} POLY_ENCODE_10BIT_TESTS[] = {{
-  // poly_encode_10bits() tests (0-3315, step=13)
-  .name = "0-3315 (inc by 13)",
-  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
-  .exp = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
-}, {
-  // poly_encode_10bits() tests (0-3315, step=13)
-  .name = "1-3316 (inc by 13)",
-  .val = { .cs = { 1, 14, 27, 40, 53, 66, 79, 92, 105, 118, 131, 144, 157, 170, 183, 196, 209, 222, 235, 248, 261, 274, 287, 300, 313, 326, 339, 352, 365, 378, 391, 404, 417, 430, 443, 456, 469, 482, 495, 508, 521, 534, 547, 560, 573, 586, 599, 612, 625, 638, 651, 664, 677, 690, 703, 716, 729, 742, 755, 768, 781, 794, 807, 820, 833, 846, 859, 872, 885, 898, 911, 924, 937, 950, 963, 976, 989, 1002, 1015, 1028, 1041, 1054, 1067, 1080, 1093, 1106, 1119, 1132, 1145, 1158, 1171, 1184, 1197, 1210, 1223, 1236, 1249, 1262, 1275, 1288, 1301, 1314, 1327, 1340, 1353, 1366, 1379, 1392, 1405, 1418, 1431, 1444, 1457, 1470, 1483, 1496, 1509, 1522, 1535, 1548, 1561, 1574, 1587, 1600, 1613, 1626, 1639, 1652, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
-  .exp = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
-}, {
-  // diffs: 91 (got 1183 exp 1187), 92 (got 1196 exp 1200), 93 (got 1209 exp 1213), 94 (got 1222 exp 1226), 95 (got 1235 exp 1239)
-
-  .name = "2-3317 (inc by 13)",
-  .val = { .cs = { 2, 15, 28, 41, 54, 67, 80, 93, 106, 119, 132, 145, 158, 171, 184, 197, 210, 223, 236, 249, 262, 275, 288, 301, 314, 327, 340, 353, 366, 379, 392, 405, 418, 431, 444, 457, 470, 483, 496, 509, 522, 535, 548, 561, 574, 587, 600, 613, 626, 639, 652, 665, 678, 691, 704, 717, 730, 743, 756, 769, 782, 795, 808, 821, 834, 847, 860, 873, 886, 899, 912, 925, 938, 951, 964, 977, 990, 1003, 1016, 1029, 1042, 1055, 1068, 1081, 1094, 1107, 1120, 1133, 1146, 1159, 1172, 1185, 1198, 1211, 1224, 1237, 1250, 1263, 1276, 1289, 1302, 1315, 1328, 1341, 1354, 1367, 1380, 1393, 1406, 1419, 1432, 1445, 1458, 1471, 1484, 1497, 1510, 1523, 1536, 1549, 1562, 1575, 1588, 1601, 1614, 1627, 1640, 1653, 1666, 1679, 1692, 1705, 1718, 1731, 1744, 1757, 1770, 1783, 1796, 1809, 1822, 1835, 1848, 1861, 1874, 1887, 1900, 1913, 1926, 1939, 1952, 1965, 1978, 1991, 2004, 2017, 2030, 2043, 2056, 2069, 2082, 2095, 2108, 2121, 2134, 2147, 2160, 2173, 2186, 2199, 2212, 2225, 2238, 2251, 2264, 2277, 2290, 2303, 2316, 2329, 2342, 2355, 2368, 2381, 2394, 2407, 2420, 2433, 2446, 2459, 2472, 2485, 2498, 2511, 2524, 2537, 2550, 2563, 2576, 2589, 2602, 2615, 2628, 2641, 2654, 2667, 2680, 2693, 2706, 2719, 2732, 2745, 2758, 2771, 2784, 2797, 2810, 2823, 2836, 2849, 2862, 2875, 2888, 2901, 2914, 2927, 2940, 2953, 2966, 2979, 2992, 3005, 3018, 3031, 3044, 3057, 3070, 3083, 3096, 3109, 3122, 3135, 3148, 3161, 3174, 3187, 3200, 3213, 3226, 3239, 3252, 3265, 3278, 3291, 3304, 3317 } },
-  .exp = { .cs = { 3, 16, 29, 42, 55, 68, 81, 94, 107, 120, 133, 146, 159, 172, 185, 198, 211, 224, 237, 250, 263, 276, 289, 302, 315, 328, 341, 354, 367, 380, 393, 406, 419, 432, 445, 458, 471, 484, 497, 510, 523, 536, 549, 562, 575, 588, 601, 614, 627, 640, 653, 666, 679, 692, 705, 718, 731, 744, 757, 770, 783, 796, 809, 822, 836, 849, 862, 875, 888, 901, 914, 927, 940, 953, 966, 979, 992, 1005, 1018, 1031, 1044, 1057, 1070, 1083, 1096, 1109, 1122, 1135, 1148, 1161, 1174, 1187, 1200, 1213, 1226, 1239, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1665, 1678, 1691, 1704, 1717, 1730, 1743, 1756, 1769, 1782, 1795, 1808, 1821, 1834, 1847, 1860, 1873, 1886, 1899, 1912, 1925, 1938, 1951, 1964, 1977, 1990, 2003, 2016, 2029, 2042, 2055, 2068, 2081, 2094, 2107, 2120, 2133, 2146, 2159, 2172, 2185, 2198, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2302, 2315, 2328, 2341, 2354, 2367, 2380, 2393, 2406, 2419, 2432, 2445, 2458, 2471, 2484, 2497, 2510, 2523, 2536, 2549, 2562, 2575, 2588, 2601, 2614, 2627, 2640, 2653, 2666, 2679, 2692, 2705, 2718, 2731, 2744, 2757, 2770, 2783, 2796, 2809, 2822, 2835, 2848, 2861, 2874, 2887, 2900, 2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030, 3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160, 3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 3277, 3290, 3303, 3316 } },
-}, {
-  .name = "avx512 failures",
-  .val = { .cs = { 1185, 1198, 1211, 1224, 1237, 0 } },
-  .exp = { .cs = { 1187, 1200, 1213, 1226, 1239, 0 } },
-}};
-
-static void test_poly_encode_10bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_10BIT_TESTS)/sizeof(POLY_ENCODE_10BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_10bit_scalar(buf, &(POLY_ENCODE_10BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_10bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_10BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_10BIT_TESTS[i].name, &got, &(POLY_ENCODE_10BIT_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_encode_10bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_10BIT_TESTS)/sizeof(POLY_ENCODE_10BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_10bit_avx512(buf, &(POLY_ENCODE_10BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_10bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_10BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_10BIT_TESTS[i].name, &got, &(POLY_ENCODE_10BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_encode_10bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_10BIT_TESTS)/sizeof(POLY_ENCODE_10BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_10bit_neon(buf, &(POLY_ENCODE_10BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_10bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_10BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_10BIT_TESTS[i].name, &got, &(POLY_ENCODE_10BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val; // test polynomial for poly_encode_5bit()
-  const poly_t exp; // expected polynomial from poly_decode_5bit()
-} POLY_ENCODE_5BIT_TESTS[] = {{
-  .name = "0-3315 (inc by 13)",
-  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
-  .exp = { .cs = { 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 104, 104, 208, 208, 208, 208, 208, 208, 208, 208, 312, 312, 312, 312, 312, 312, 312, 312, 416, 416, 416, 416, 416, 416, 416, 416, 520, 520, 520, 520, 520, 520, 520, 520, 624, 624, 624, 624, 624, 624, 624, 624, 728, 728, 728, 728, 728, 728, 728, 728, 832, 832, 832, 832, 832, 832, 832, 832, 936, 936, 936, 936, 936, 936, 936, 936, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2393, 2393, 2393, 2393, 2393, 2393, 2393, 2393, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2809, 2809, 2809, 2809, 2809, 2809, 2809, 2809, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3017, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 0, 0, 0 } },
-}};
-
-
-static void test_poly_encode_5bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_5BIT_TESTS)/sizeof(POLY_ENCODE_5BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_5bit_scalar(buf, &(POLY_ENCODE_5BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_5bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_5BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_5BIT_TESTS[i].name, &got, &(POLY_ENCODE_5BIT_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_encode_5bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_5BIT_TESTS)/sizeof(POLY_ENCODE_5BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_5bit_avx512(buf, &(POLY_ENCODE_5BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_5bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_5BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_5BIT_TESTS[i].name, &got, &(POLY_ENCODE_5BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_encode_5bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_5BIT_TESTS)/sizeof(POLY_ENCODE_5BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_5bit_neon(buf, &(POLY_ENCODE_5BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_5bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_5BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_5BIT_TESTS[i].name, &got, &(POLY_ENCODE_5BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val; // test polynomial for poly_encode()
-  const poly_t exp; // expected polynomial from poly_decode()
-} POLY_ENCODE_4BIT_TESTS[] = {{
-  // poly_encode_4bits() tests (0-3315, step=13)
-  .name = "0-3315 (inc by 13)",
-  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
-  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 416, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 624, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 832, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 2913, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121, 0, 0, 0, 0, 0, 0, 0 } },
-}};
-
-static void test_poly_encode_4bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_4BIT_TESTS)/sizeof(POLY_ENCODE_4BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_4bit_scalar(buf, &(POLY_ENCODE_4BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_4bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_4BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_4BIT_TESTS[i].name, &got, &(POLY_ENCODE_4BIT_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_encode_4bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_4BIT_TESTS)/sizeof(POLY_ENCODE_4BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_4bit_avx512(buf, &(POLY_ENCODE_4BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_4bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_4BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_4BIT_TESTS[i].name, &got, &(POLY_ENCODE_4BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_encode_4bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_4BIT_TESTS)/sizeof(POLY_ENCODE_4BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_4bit_neon(buf, &(POLY_ENCODE_4BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_4bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_4BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_4BIT_TESTS[i].name, &got, &(POLY_ENCODE_4BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val; // test polynomial for poly_encode()
-  const poly_t exp; // expected polynomial from poly_decode()
-} POLY_ENCODE_1BIT_TESTS[] = {{
-  // poly_encode_1bits() tests (0-3315, step=13)
-  .name = "0-3315 (inc by 13)",
-  .val = { .cs = { 0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 169, 182, 195, 208, 221, 234, 247, 260, 273, 286, 299, 312, 325, 338, 351, 364, 377, 390, 403, 416, 429, 442, 455, 468, 481, 494, 507, 520, 533, 546, 559, 572, 585, 598, 611, 624, 637, 650, 663, 676, 689, 702, 715, 728, 741, 754, 767, 780, 793, 806, 819, 832, 845, 858, 871, 884, 897, 910, 923, 936, 949, 962, 975, 988, 1001, 1014, 1027, 1040, 1053, 1066, 1079, 1092, 1105, 1118, 1131, 1144, 1157, 1170, 1183, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1287, 1300, 1313, 1326, 1339, 1352, 1365, 1378, 1391, 1404, 1417, 1430, 1443, 1456, 1469, 1482, 1495, 1508, 1521, 1534, 1547, 1560, 1573, 1586, 1599, 1612, 1625, 1638, 1651, 1664, 1677, 1690, 1703, 1716, 1729, 1742, 1755, 1768, 1781, 1794, 1807, 1820, 1833, 1846, 1859, 1872, 1885, 1898, 1911, 1924, 1937, 1950, 1963, 1976, 1989, 2002, 2015, 2028, 2041, 2054, 2067, 2080, 2093, 2106, 2119, 2132, 2145, 2158, 2171, 2184, 2197, 2210, 2223, 2236, 2249, 2262, 2275, 2288, 2301, 2314, 2327, 2340, 2353, 2366, 2379, 2392, 2405, 2418, 2431, 2444, 2457, 2470, 2483, 2496, 2509, 2522, 2535, 2548, 2561, 2574, 2587, 2600, 2613, 2626, 2639, 2652, 2665, 2678, 2691, 2704, 2717, 2730, 2743, 2756, 2769, 2782, 2795, 2808, 2821, 2834, 2847, 2860, 2873, 2886, 2899, 2912, 2925, 2938, 2951, 2964, 2977, 2990, 3003, 3016, 3029, 3042, 3055, 3068, 3081, 3094, 3107, 3120, 3133, 3146, 3159, 3172, 3185, 3198, 3211, 3224, 3237, 3250, 3263, 3276, 3289, 3302, 3315 } },
-  .exp = { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-}};
-
-static void test_poly_encode_1bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_1BIT_TESTS)/sizeof(POLY_ENCODE_1BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_1bit_scalar(buf, &(POLY_ENCODE_1BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_1bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_1BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_1BIT_TESTS[i].name, &got, &(POLY_ENCODE_1BIT_TESTS[i].exp));
-    }
-  }
-}
-
-static void test_poly_encode_1bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_1BIT_TESTS)/sizeof(POLY_ENCODE_1BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_1bit_avx512(buf, &(POLY_ENCODE_1BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_1bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_1BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_1BIT_TESTS[i].name, &got, &(POLY_ENCODE_1BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_encode_1bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_ENCODE_1BIT_TESTS)/sizeof(POLY_ENCODE_1BIT_TESTS[0]); i++) {
-    // encode polynomial
-    uint8_t buf[320] = { 0 };
-    poly_encode_1bit_neon(buf, &(POLY_ENCODE_1BIT_TESTS[i].val));
-
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_1bit(&got, buf);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_ENCODE_1BIT_TESTS[i].exp), sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_ENCODE_1BIT_TESTS[i].name, &got, &(POLY_ENCODE_1BIT_TESTS[i].exp));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-
-static const struct {
-  const char *name; // test name
-  const uint8_t val[352]; // test value for poly_decode_11bit()
-} POLY_DECODE_11BIT_TESTS[] = {{
-  .name = "0x00-0xff",
-  .val = {
-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
-    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
-    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
-    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
-    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  },
-}};
-
-static void test_poly_decode_11bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_DECODE_11BIT_TESTS)/sizeof(POLY_DECODE_11BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_11bit_scalar(&poly, POLY_DECODE_11BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[352] = { 0 };
-    poly_encode_11bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_11BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_11BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_11BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-}
-
-static void test_poly_decode_11bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_DECODE_11BIT_TESTS)/sizeof(POLY_DECODE_11BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_11bit_avx512(&poly, POLY_DECODE_11BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[352] = { 0 };
-    poly_encode_11bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_11BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_11BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_11BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_decode_11bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_DECODE_11BIT_TESTS)/sizeof(POLY_DECODE_11BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_11bit_neon(&poly, POLY_DECODE_11BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[352] = { 0 };
-    poly_encode_11bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_11BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_11BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_11BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t val[320]; // test value for poly_decode_10bit()
-} POLY_DECODE_10BIT_TESTS[] = {{
-  .name = "0x00-0xff",
-  .val = {
-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
-    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
-    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
-    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
-    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-  },
-}};
-
-static void test_poly_decode_10bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_DECODE_10BIT_TESTS)/sizeof(POLY_DECODE_10BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_10bit_scalar(&poly, POLY_DECODE_10BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[320] = { 0 };
-    poly_encode_10bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_10BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_10BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_10BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-}
-
-static void test_poly_decode_10bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_DECODE_10BIT_TESTS)/sizeof(POLY_DECODE_10BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_10bit_avx512(&got, POLY_DECODE_10BIT_TESTS[i].val);
-
-    // get expected value
-    poly_t exp = { 0 };
-    poly_decode_10bit_scalar(&exp, POLY_DECODE_10BIT_TESTS[i].val);
-
-    // check for expected value
-    if (memcmp(&got, &exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_DECODE_10BIT_TESTS[i].name, &got, &exp);
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_decode_10bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_DECODE_10BIT_TESTS)/sizeof(POLY_DECODE_10BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t got = { 0 };
-    poly_decode_10bit_neon(&got, POLY_DECODE_10BIT_TESTS[i].val);
-
-    // get expected value
-    poly_t exp = { 0 };
-    poly_decode_10bit_scalar(&exp, POLY_DECODE_10BIT_TESTS[i].val);
-
-    // check for expected value
-    if (memcmp(&got, &exp, sizeof(poly_t))) {
-      fail_poly_test(__func__, POLY_DECODE_10BIT_TESTS[i].name, &got, &exp);
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t val[160]; // test value for poly_decode_5bit()
-} POLY_DECODE_5BIT_TESTS[] = {{
-  .name = "0x00-0x7f",
-  .val = {
-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
-    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
-    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
-    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
-    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
-    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
-    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
-    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
-    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
-    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
-    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
-    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
-    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
-    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
-    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
-    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
-  },
-}, {
-  .name = "0x80-0xff",
-  .val = {
-    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
-    0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
-    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
-    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
-    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
-    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
-    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
-    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
-    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
-    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
-    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
-    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
-    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
-  },
-}};
-
-static void test_poly_decode_5bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_DECODE_5BIT_TESTS)/sizeof(POLY_DECODE_5BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_5bit_scalar(&poly, POLY_DECODE_5BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[160] = { 0 };
-    poly_encode_5bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_5BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_5BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_5BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-}
-
-static void test_poly_decode_5bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_DECODE_5BIT_TESTS)/sizeof(POLY_DECODE_5BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_5bit_avx512(&poly, POLY_DECODE_5BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[160] = { 0 };
-    poly_encode_5bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_5BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_5BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_5BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_decode_5bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_DECODE_5BIT_TESTS)/sizeof(POLY_DECODE_5BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_5bit_neon(&poly, POLY_DECODE_5BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[160] = { 0 };
-    poly_encode_5bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_5BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_5BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_5BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t val[128]; // test value for poly_decode_4bit()
-} POLY_DECODE_4BIT_TESTS[] = {{
-  .name = "0x00-0x7f",
-  .val = {
-    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
-    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
-    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
-    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
-    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
-    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
-    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
-    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
-    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
-    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
-    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
-    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
-    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
-    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
-    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
-    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
-  },
-}, {
-  .name = "0x80-0xff",
-  .val = {
-    0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
-    0x88, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
-    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
-    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
-    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
-    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
-    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
-    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
-    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
-    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
-    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
-    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
-    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
-    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
-    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
-    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
-  },
-}};
-
-static void test_poly_decode_4bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_DECODE_4BIT_TESTS)/sizeof(POLY_DECODE_4BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_4bit_scalar(&poly, POLY_DECODE_4BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[128] = { 0 };
-    poly_encode_4bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_4BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_4BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_4BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-}
-
-static void test_poly_decode_4bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_DECODE_4BIT_TESTS)/sizeof(POLY_DECODE_4BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_4bit_avx512(&poly, POLY_DECODE_4BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[128] = { 0 };
-    poly_encode_4bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_4BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_4BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_4BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_decode_4bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_DECODE_4BIT_TESTS)/sizeof(POLY_DECODE_4BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_4bit_neon(&poly, POLY_DECODE_4BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[128] = { 0 };
-    poly_encode_4bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_4BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_4BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_4BIT_TESTS[i].val, sizeof(got));
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t val[32]; // test value for poly_decode_1bit()
-} POLY_DECODE_1BIT_TESTS[] = {{
-  .name = "0x00 x 32",
-  .val = {
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  },
-}, {
-  .name = "0x0f x 32",
-  .val = {
-    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
-    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
-    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
-    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
-  },
-}, {
-  .name = "0xf0 x 32",
-  .val = {
-    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
-    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
-    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
-    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
-  },
-}, {
-  .name = "0xff x 32",
-  .val = {
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-  },
-}};
-
-
-static void test_poly_decode_1bit_scalar(void) {
-  for (size_t i = 0; i < sizeof(POLY_DECODE_1BIT_TESTS)/sizeof(POLY_DECODE_1BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_1bit_scalar(&poly, POLY_DECODE_1BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[32] = { 0 };
-    poly_encode_1bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_1BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_1BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_1BIT_TESTS[i].val, 32);
-    }
-  }
-}
-
-static void test_poly_decode_1bit_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t i = 0; i < sizeof(POLY_DECODE_1BIT_TESTS)/sizeof(POLY_DECODE_1BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_1bit_avx512(&poly, POLY_DECODE_1BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[32] = { 0 };
-    poly_encode_1bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_1BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_1BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_1BIT_TESTS[i].val, 32);
-    }
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_poly_decode_1bit_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t i = 0; i < sizeof(POLY_DECODE_1BIT_TESTS)/sizeof(POLY_DECODE_1BIT_TESTS[0]); i++) {
-    // decode polynomial
-    poly_t poly = { 0 };
-    poly_decode_1bit_neon(&poly, POLY_DECODE_1BIT_TESTS[i].val);
-
-    // encode polynomial
-    uint8_t got[32] = { 0 };
-    poly_encode_1bit(got, &poly);
-
-    // check for expected value
-    if (memcmp(&got, &(POLY_DECODE_1BIT_TESTS[i].val), sizeof(got))) {
-      fail_test(__func__, POLY_DECODE_1BIT_TESTS[i].name, got, sizeof(got), POLY_DECODE_1BIT_TESTS[i].val, 32);
-    }
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-// define test functions for NxN matrices and N-dim vectors.
-#define DEF_MAT_VEC_TEST_FUNCS(N) \
-  /* apply NTT to NxN matrix */ \
-  static void mat ## N ## _ntt(poly_t mat[static N*N]) { \
-    for (size_t i = 0; i < N*N; i++) { \
-      poly_ntt(mat + i); \
-    } \
-  } \
-  \
-  /* write vecN to file handle */ \
-  static void vec ## N ## _write(FILE *fh, const char *name, const poly_t vec[static N]) { \
-    for (size_t i = 0; i < N; i++) { \
-      fprintf(fh, "%s[%zu] = ", name, i); \
-      poly_write(fh, vec + i); \
-      fputs("\n", fh); \
-    } \
-  }
-
-// define mat2 and vec2 test functions (used by pke512)
-DEF_MAT_VEC_TEST_FUNCS(2)
-
-// define mat3 and vec3 test functions (used by pke768)
-DEF_MAT_VEC_TEST_FUNCS(3)
-
-// define mat4 and vec4 test functions (used by pke1024)
-DEF_MAT_VEC_TEST_FUNCS(4)
-
-static void test_mat2_mul(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t mat[4];
-    const poly_t vec[2];
-    const poly_t exp[2];
-  } TESTS[] = {{
-    .name = "[[(1), (x)], [(x^2), (x^3)]] * [x^4, x^5]^T",
-    .mat = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-    },
-
-    .vec = {
-      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
-    },
-
-    .exp = {
-      { .cs = { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // populate matrix, apply NTT
-    poly_t mat[4] = { 0 };
-    memcpy(mat, TESTS[i].mat, sizeof(mat));
-    mat2_ntt(mat);
-
-    // populate vector, apply NTT
-    poly_t vec[2] = { 0 };
-    memcpy(vec, TESTS[i].vec, sizeof(vec));
-    vec2_ntt(vec);
-
-    poly_t got[2] = { 0 };
-    mat2_mul(got, mat, vec); // got = mat * vec
-    vec2_inv_ntt(got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec2_write(stderr, "got", got);
-      fprintf(stderr, "exp:\n");
-      vec2_write(stderr, "exp", TESTS[i].exp);
-    }
-  }
-}
-
-static void test_vec2_add(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t a[2]; // test value a
-    const poly_t b[2]; // test value b
-    const poly_t exp[2]; // expected value
-  } TESTS[] = {{
-    .name = "[1, x]^T + [x^2, x^3]^T = [1 + x^2, x + x^3]^T",
-    .a = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-    },
-
-    .b = {
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-    },
-
-    .exp = {
-      { .cs = { 1, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t got[2] = { 0 };
-    memcpy(got, TESTS[i].a, sizeof(got)); // got = a
-
-    vec2_add(got, TESTS[i].b); // got += b
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec2_write(stderr, "got", got);
-      fprintf(stderr, "exp:\n");
-      vec2_write(stderr, "exp", TESTS[i].exp);
-    }
-  }
-}
-
-static void test_vec2_dot(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t a[2]; // test value a
-    const poly_t b[2]; // test value b
-    const poly_t exp; // expected value
-  } TESTS[] = {{
-    .name = "[1, x] * [x^2, x^3]^T = (x^2 + x^4)",
-    .a = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-    },
-
-    .b = {
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-    },
-
-    .exp = { .cs = { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 } },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t a[2], b[2];
-
-    memcpy(a, TESTS[i].a, sizeof(a));
-    vec2_ntt(a); // a = NTT(a)
-
-    memcpy(b, TESTS[i].b, sizeof(b));
-    vec2_ntt(b); // b = NTT(b)
-
-    poly_t got = { 0 };
-    vec2_dot(&got, a, b); // got = a * b
-    poly_inv_ntt(&got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
-      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
-    }
-  }
-}
-
-static void test_vec2_ntt(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t exp[2]; // expected value
-  } TESTS[] = {{
-    .name = "[1, x]^T",
-    .exp = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-    },
-  }, {
-    .name = "[x^2, x^3]^T",
-    .exp = {
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t got[2] = { 0 };
-    memcpy(got, TESTS[i].exp, sizeof(got));
-    vec2_ntt(got); // got = NTT(exp)
-    vec2_inv_ntt(got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec2_write(stderr, "got", got);
-      fprintf(stderr, "\nexp:\n");
-      vec2_write(stderr, "exp", TESTS[i].exp);
-      fputs("\n", stderr);
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val[2]; // test vector
-} VEC2_ENCODE_TESTS[] = {{
-  .name = "basic",
-  .val = {
-    { .cs = { 1, 2, 3, 4, 5 } },
-    { .cs = { 3328, 3327, 3326, 3325, 3324 } },
-  },
-}};
-
-DEF_TEST_VEC_FNS(2)
-DEF_TEST_VEC_BIT_FNS(2, 10)
-
-static const struct {
-  const char *name; // test name
-  const uint8_t seed[32]; // test seed
-  const uint8_t exp_ek[PKE512_EK_SIZE]; // expected ek (800 bytes)
-  const uint8_t exp_dk[PKE512_DK_SIZE]; // expected dk (768 bytes)
-} PKE512_KEYGEN_TESTS[] = {{
-  .name = "all-zero",
-  .seed = { 0 },
-  .exp_ek = {
-    0x9c, 0xe5, 0xc6, 0x7e, 0xfc, 0x9c, 0x33, 0x67, 0xa8, 0x3c, 0x7c, 0x42,
-    0xb0, 0xa1, 0x29, 0x37, 0xc9, 0x40, 0xcf, 0x71, 0x1a, 0xa2, 0xa7, 0x7f,
-    0x94, 0x38, 0x92, 0x8d, 0x69, 0x50, 0xea, 0x60, 0x07, 0xc0, 0xb9, 0x02,
-    0xff, 0x19, 0x77, 0x7b, 0x20, 0x93, 0x12, 0x66, 0x06, 0x77, 0x00, 0xb9,
-    0x69, 0xa0, 0x24, 0x92, 0xec, 0xc0, 0x66, 0x73, 0xce, 0xf6, 0xe1, 0xce,
-    0x36, 0x77, 0x3a, 0x4b, 0xdb, 0x95, 0x38, 0xd5, 0x34, 0x58, 0x26, 0x18,
-    0xde, 0xd2, 0x79, 0xe2, 0x99, 0xa1, 0x20, 0x23, 0x18, 0x13, 0x8c, 0xa8,
-    0xd5, 0x49, 0xb6, 0xc6, 0x08, 0x81, 0xee, 0xd2, 0xb7, 0x4a, 0xb8, 0x84,
-    0xb9, 0x30, 0x74, 0x68, 0x53, 0x59, 0x60, 0x35, 0x27, 0xec, 0x63, 0x8b,
-    0xab, 0xb1, 0x3d, 0x98, 0xf2, 0xa7, 0x3e, 0x2a, 0x36, 0x2a, 0x56, 0x62,
-    0xa3, 0x51, 0x53, 0x8d, 0x53, 0x57, 0xec, 0x7c, 0x20, 0xb6, 0x67, 0x40,
-    0x80, 0xc7, 0x6a, 0x53, 0x65, 0xab, 0x9f, 0x48, 0x3f, 0x78, 0x6c, 0x4e,
-    0x2c, 0xdb, 0xca, 0x23, 0xf0, 0xaa, 0x0a, 0x64, 0x58, 0x9e, 0xb8, 0x6e,
-    0xaa, 0x07, 0x37, 0x71, 0xf0, 0x4d, 0x39, 0x80, 0x8e, 0x90, 0x44, 0x37,
-    0x68, 0xaa, 0x0d, 0x09, 0x22, 0xb5, 0xdf, 0xa1, 0x54, 0xe7, 0xe7, 0x09,
-    0x3d, 0x34, 0x22, 0x38, 0x14, 0xba, 0xa1, 0xb6, 0x6d, 0xae, 0x36, 0x53,
-    0xce, 0xa2, 0x15, 0xb3, 0xac, 0x7d, 0x6c, 0x65, 0xb8, 0x2c, 0x31, 0xae,
-    0xdf, 0xc0, 0x3e, 0x3e, 0xf6, 0x1d, 0xd2, 0x93, 0x15, 0xb5, 0xc1, 0x1c,
-    0x10, 0xa5, 0xb9, 0xdf, 0x13, 0x92, 0x17, 0xa0, 0xc2, 0x3e, 0xf4, 0xbf,
-    0x81, 0x41, 0x0e, 0xbf, 0x16, 0x0f, 0x5b, 0xba, 0x4d, 0x3c, 0x67, 0x18,
-    0xb3, 0x56, 0xb1, 0x85, 0x65, 0x5a, 0xbe, 0xd1, 0x42, 0xa3, 0xc4, 0x99,
-    0x05, 0xe2, 0x28, 0x9d, 0xd4, 0xca, 0x05, 0xa0, 0x3a, 0x05, 0x0b, 0xa0,
-    0x08, 0xd3, 0x52, 0xbd, 0x22, 0xba, 0xeb, 0x89, 0x78, 0x4e, 0xfc, 0x29,
-    0x01, 0x0c, 0xa2, 0x78, 0x4a, 0x6c, 0x21, 0xcb, 0x46, 0x93, 0x79, 0x00,
-    0x99, 0xdb, 0x9e, 0xca, 0x93, 0x25, 0x51, 0x69, 0x95, 0x31, 0x64, 0x15,
-    0x88, 0x8c, 0x35, 0xa8, 0x34, 0x61, 0xbb, 0x5a, 0x86, 0xb4, 0x25, 0x17,
-    0xb2, 0xb1, 0x56, 0xd2, 0x85, 0x98, 0xc9, 0x5b, 0x75, 0x4e, 0x1b, 0x37,
-    0x4f, 0x40, 0xa0, 0xae, 0x53, 0x21, 0x69, 0x72, 0x76, 0x88, 0x67, 0xcd,
-    0x45, 0xa7, 0xca, 0xd6, 0xd5, 0xa7, 0x38, 0x2b, 0x2a, 0x5d, 0x7c, 0x16,
-    0x94, 0x49, 0x6e, 0x05, 0x48, 0xad, 0xf4, 0x57, 0x1b, 0x4b, 0x5c, 0x5f,
-    0x5d, 0x21, 0x93, 0x9f, 0xbc, 0x9b, 0xf2, 0x69, 0xcd, 0xaf, 0x53, 0xbe,
-    0x5f, 0x09, 0xbe, 0x61, 0x93, 0xae, 0xba, 0x59, 0x1f, 0x4f, 0xc1, 0xb9,
-    0x43, 0x97, 0x79, 0x8d, 0xb9, 0x42, 0xe7, 0x3a, 0x75, 0x59, 0x00, 0x17,
-    0xbe, 0x4b, 0x46, 0xc1, 0xe9, 0x4d, 0xd0, 0xfb, 0x1b, 0x8a, 0x94, 0x76,
-    0xf2, 0x8a, 0xcf, 0x0b, 0x21, 0x1a, 0xc1, 0xca, 0x80, 0x2c, 0xa8, 0x72,
-    0x3e, 0x7a, 0x6f, 0x61, 0xf1, 0x34, 0x3c, 0x17, 0x45, 0x9e, 0x55, 0xb2,
-    0x73, 0x2c, 0xce, 0xf6, 0x3c, 0x80, 0xbe, 0x43, 0x59, 0xf7, 0xf6, 0x15,
-    0xf9, 0x0c, 0x2e, 0x8c, 0x6c, 0x08, 0x23, 0x85, 0xae, 0xb7, 0x15, 0x18,
-    0x89, 0x2a, 0x1c, 0x87, 0xcb, 0x3f, 0x36, 0x66, 0x81, 0x47, 0xd9, 0x19,
-    0xc1, 0x06, 0x6b, 0xaa, 0x69, 0xb6, 0xe3, 0xf9, 0x99, 0xf9, 0x26, 0x78,
-    0x0d, 0x66, 0x17, 0x70, 0x15, 0x23, 0x40, 0x73, 0x1d, 0x02, 0x76, 0xc4,
-    0x54, 0xa8, 0x6c, 0x82, 0xe0, 0xb7, 0x4c, 0x4b, 0x4c, 0x1b, 0x77, 0x37,
-    0xf2, 0xf9, 0xae, 0x32, 0x22, 0xb7, 0xd0, 0xf2, 0xcb, 0xc0, 0x01, 0xba,
-    0x54, 0x21, 0xcc, 0x6a, 0x1a, 0x22, 0xd0, 0x85, 0x87, 0xa2, 0x58, 0xce,
-    0x42, 0xbc, 0x69, 0xa1, 0x72, 0x44, 0x76, 0xa5, 0xa7, 0x96, 0xb9, 0x7f,
-    0xa1, 0x5c, 0x85, 0x9c, 0x7c, 0x60, 0x6a, 0xe3, 0x2c, 0x81, 0xbc, 0x99,
-    0x39, 0x69, 0x99, 0xd3, 0x45, 0x7b, 0xb4, 0x23, 0x95, 0x63, 0x2a, 0xb6,
-    0x99, 0x53, 0x40, 0xb5, 0x14, 0x80, 0x0f, 0x58, 0x2e, 0x56, 0x95, 0x34,
-    0xd0, 0x1a, 0x27, 0x42, 0xdc, 0x2f, 0x0a, 0x35, 0xbf, 0xad, 0x61, 0x86,
-    0x38, 0xb5, 0x9b, 0xcf, 0xc3, 0x3b, 0xb4, 0xc2, 0x4d, 0x35, 0xe7, 0x65,
-    0x62, 0xfc, 0x4b, 0xdc, 0x44, 0xb4, 0x16, 0x41, 0x31, 0x3b, 0x0c, 0x5f,
-    0xca, 0x92, 0x6c, 0x54, 0xd3, 0xc6, 0x42, 0xe5, 0x2a, 0x62, 0x06, 0x38,
-    0x67, 0xc8, 0xba, 0x3a, 0x0a, 0x79, 0x76, 0x13, 0x5e, 0xfe, 0x3b, 0x6c,
-    0x49, 0xea, 0x26, 0x5d, 0x55, 0xa2, 0xd1, 0xd5, 0x67, 0x7f, 0x49, 0xb0,
-    0x9e, 0xba, 0x38, 0x23, 0x4a, 0xbe, 0x38, 0xb3, 0x95, 0x27, 0xa8, 0x17,
-    0x42, 0x14, 0x4e, 0x93, 0x43, 0x82, 0xb2, 0x75, 0x64, 0x29, 0x2a, 0x24,
-    0xd6, 0xa5, 0x38, 0x91, 0x6b, 0x21, 0x48, 0xd2, 0x3f, 0x78, 0xe7, 0x0a,
-    0x59, 0xe9, 0x80, 0x96, 0xc9, 0x12, 0x03, 0xf7, 0x79, 0x65, 0x21, 0x1f,
-    0x2e, 0xea, 0x2f, 0xc6, 0xfc, 0x1f, 0x59, 0x63, 0x4e, 0x24, 0x6b, 0x0c,
-    0x9e, 0x24, 0x76, 0x9c, 0xe5, 0xa9, 0x4f, 0xc2, 0x7c, 0x33, 0xd5, 0x56,
-    0x50, 0x02, 0x8f, 0x95, 0x1b, 0x2a, 0x30, 0x75, 0xc9, 0x8b, 0x87, 0x87,
-    0x46, 0xe0, 0x3d, 0xc9, 0x1c, 0xbf, 0xdd, 0x97, 0x25, 0xec, 0x09, 0xb4,
-    0x4d, 0xb9, 0x0f, 0x0c, 0x66, 0x2b, 0xa5, 0x09, 0x6e, 0x9d, 0xab, 0x07,
-    0x6a, 0x7b, 0x7b, 0x1a, 0xca, 0xb4, 0xeb, 0x2b, 0x79, 0x5b, 0x65, 0x31,
-    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-  },
-
-  .exp_dk = {
-    0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-    0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-    0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-    0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-    0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-    0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-    0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-    0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-    0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-    0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-    0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-    0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-    0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-    0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-    0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-    0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-    0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-    0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-    0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-    0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-    0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-    0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-    0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-    0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-    0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-    0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-    0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-    0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-    0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-    0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-    0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-    0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-    0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-    0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-    0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-    0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-    0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-    0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-    0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-    0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-    0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-    0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-    0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-    0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-    0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-    0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-    0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-    0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-    0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-    0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-    0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-    0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-    0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-    0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-    0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-    0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-    0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-    0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-    0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-    0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-    0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-    0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-    0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-    0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-  },
-}, {
-  // source: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-  .name = "Key Generation -- ML-KEM-512",
-  .seed = {
-    0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42, 0x42, 0x4A, 0x87, 0xC1,
-    0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88, 0x18, 0x69, 0x07, 0x7E,
-    0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
-  },
-
-  .exp_ek = {
-    0xC6, 0x5A, 0x1D, 0x9D, 0x47, 0x97, 0x77, 0xE6, 0x90, 0x5A, 0x91, 0xA5,
-    0xCB, 0x24, 0x55, 0x1C, 0x8B, 0x1E, 0x52, 0xA3, 0xC7, 0x7B, 0x63, 0x31,
-    0x3F, 0xFC, 0x8B, 0x58, 0x17, 0x81, 0x52, 0x59, 0xA6, 0xAD, 0xB5, 0x96,
-    0x45, 0xDC, 0x4B, 0xB1, 0x43, 0x6D, 0x51, 0xE6, 0x2A, 0x09, 0x68, 0x34,
-    0xAF, 0x43, 0x77, 0x25, 0x10, 0xC4, 0xED, 0xF3, 0x4C, 0xDE, 0x0A, 0x5B,
-    0x57, 0xC1, 0x45, 0xE6, 0x87, 0xCB, 0x87, 0x16, 0x2F, 0x00, 0x1C, 0x21,
-    0xC9, 0xE1, 0x93, 0x4A, 0xC1, 0x1A, 0xAF, 0xA7, 0x0F, 0xF8, 0x10, 0x73,
-    0x26, 0x50, 0xB3, 0x2A, 0x30, 0x18, 0xA7, 0xC5, 0x0C, 0xD7, 0x36, 0x79,
-    0x62, 0x22, 0xC8, 0xAB, 0x82, 0x1A, 0x92, 0x83, 0xBE, 0x1C, 0xC2, 0x04,
-    0xC3, 0xF1, 0x63, 0x0D, 0x3C, 0xCC, 0xDB, 0x0A, 0x9A, 0x3D, 0x17, 0x55,
-    0x2B, 0x91, 0x58, 0xC0, 0x66, 0x4E, 0x5D, 0x6A, 0x04, 0xB0, 0xFA, 0x36,
-    0xDE, 0x45, 0x86, 0x2A, 0x46, 0xA3, 0x9E, 0xC5, 0x97, 0xAE, 0x42, 0xC3,
-    0x11, 0xC4, 0xAC, 0x22, 0x4A, 0x72, 0xD6, 0xF2, 0x53, 0xBB, 0x52, 0x35,
-    0xF7, 0xA2, 0xB8, 0xB0, 0xF2, 0x4D, 0x13, 0x76, 0xAF, 0x58, 0x87, 0x46,
-    0xF3, 0xBB, 0x8E, 0x03, 0x65, 0x07, 0x87, 0x61, 0xCA, 0xB9, 0x83, 0xA4,
-    0xA6, 0xA9, 0x40, 0xA3, 0xD9, 0x97, 0x04, 0x7A, 0x8F, 0x36, 0xA7, 0x31,
-    0xE8, 0x96, 0x52, 0x36, 0xC3, 0x7B, 0xF2, 0x00, 0x08, 0x2F, 0x82, 0x1D,
-    0xCA, 0x77, 0x16, 0xC4, 0x44, 0xA9, 0x0B, 0xEC, 0x53, 0x07, 0x4B, 0xBA,
-    0x58, 0xC1, 0x32, 0xBF, 0xB9, 0xA2, 0xAC, 0xE2, 0xCE, 0xC9, 0xAA, 0x65,
-    0x8E, 0xAC, 0x12, 0x32, 0xCC, 0xCA, 0x3C, 0x81, 0x7A, 0x92, 0xC1, 0x19,
-    0x5C, 0x05, 0xC0, 0xE1, 0xD6, 0x63, 0x9F, 0xD2, 0xAD, 0xE5, 0x31, 0x60,
-    0x7D, 0x48, 0x8B, 0x74, 0xA7, 0x47, 0xCF, 0xF4, 0x7F, 0xCA, 0x5C, 0x8B,
-    0x21, 0x63, 0xCA, 0x03, 0xC5, 0x45, 0xED, 0x10, 0x32, 0x78, 0x43, 0x0C,
-    0x60, 0xB2, 0x38, 0x1A, 0x09, 0x42, 0x7F, 0xD1, 0x30, 0xF8, 0x59, 0xBF,
-    0x5D, 0xB7, 0x76, 0xDA, 0x09, 0x5D, 0xCA, 0x58, 0x04, 0xFA, 0x63, 0xB0,
-    0xD7, 0xD8, 0x7F, 0xA9, 0x41, 0x5C, 0x72, 0xFB, 0x51, 0x87, 0x2A, 0x98,
-    0x9F, 0x46, 0x6C, 0x98, 0x4B, 0xC7, 0x4C, 0x29, 0xB8, 0x63, 0x20, 0x19,
-    0xCA, 0x04, 0x0C, 0x9C, 0xA3, 0x5E, 0x22, 0x60, 0x8D, 0xAA, 0x70, 0x35,
-    0x7A, 0xE2, 0xC3, 0xAD, 0x83, 0x63, 0x1F, 0xAA, 0x17, 0x4E, 0x0A, 0xCD,
-    0xF5, 0xDB, 0xBF, 0x3C, 0xF6, 0x8A, 0x05, 0xB6, 0x54, 0x3A, 0xB6, 0x26,
-    0x8E, 0x1A, 0x51, 0xB0, 0x93, 0x2C, 0x17, 0xB0, 0x0A, 0x13, 0x71, 0xB2,
-    0xDA, 0xB2, 0x41, 0xF9, 0x2A, 0x43, 0xFF, 0xB4, 0x56, 0xD0, 0xA8, 0xC8,
-    0x86, 0x0A, 0x8E, 0x28, 0xA6, 0x1A, 0x21, 0x30, 0x7C, 0xC0, 0x45, 0x6D,
-    0xA4, 0x24, 0x29, 0x05, 0xCB, 0x1D, 0x3D, 0x0B, 0xBD, 0x81, 0xBB, 0x8E,
-    0xE2, 0x74, 0xA4, 0x3C, 0x76, 0xC3, 0x10, 0x01, 0x95, 0x15, 0xFC, 0xC1,
-    0x40, 0x46, 0x7C, 0x33, 0x37, 0x0C, 0x86, 0x80, 0x8E, 0xCA, 0xA5, 0x8E,
-    0x3B, 0xA9, 0x3A, 0x2C, 0x11, 0x90, 0x46, 0x1C, 0x1D, 0xFA, 0x11, 0x30,
-    0x20, 0x01, 0xBB, 0xAB, 0x4C, 0xB1, 0xE3, 0x64, 0x2E, 0xF8, 0xCB, 0x26,
-    0x30, 0x9B, 0x60, 0x52, 0x3B, 0xC2, 0x18, 0x87, 0xB0, 0x7F, 0x89, 0x8C,
-    0xE5, 0x62, 0xA6, 0xCA, 0x77, 0x8E, 0xA0, 0x15, 0x05, 0x85, 0x13, 0x78,
-    0xCE, 0xA8, 0xBB, 0x7F, 0xC0, 0x9D, 0x11, 0x96, 0x1B, 0x6C, 0x59, 0x6F,
-    0x93, 0x54, 0x2A, 0x99, 0x04, 0x86, 0x4E, 0xB1, 0x0C, 0xD0, 0xA7, 0x03,
-    0xDB, 0xA9, 0x89, 0x21, 0x86, 0x1A, 0x87, 0xB0, 0x56, 0x52, 0x5C, 0x71,
-    0xA8, 0x43, 0x55, 0x3E, 0x64, 0x00, 0x77, 0x74, 0x37, 0xC9, 0x5C, 0xCC,
-    0x80, 0x85, 0xCC, 0x0C, 0x47, 0x7D, 0x66, 0x5A, 0x44, 0x79, 0x01, 0x9D,
-    0x4C, 0xD4, 0x42, 0xF7, 0x4A, 0x3C, 0xD8, 0x16, 0x9F, 0x42, 0x62, 0xB8,
-    0x27, 0x1B, 0x5D, 0x5A, 0x67, 0xC8, 0xC1, 0x61, 0x1A, 0xAE, 0x7B, 0x3D,
-    0x05, 0x34, 0xC0, 0x85, 0x97, 0x16, 0xFD, 0xF0, 0xBB, 0x68, 0x94, 0x90,
-    0x94, 0xC0, 0x6A, 0x1B, 0x73, 0xC9, 0xAA, 0x1C, 0xBD, 0xF3, 0x31, 0x54,
-    0x3D, 0xE0, 0x02, 0xA8, 0xC0, 0x6F, 0x94, 0xE8, 0x81, 0x0A, 0x5C, 0xB3,
-    0x73, 0x83, 0x27, 0x45, 0xD7, 0x20, 0x68, 0x3B, 0x57, 0x48, 0x75, 0xA6,
-    0x66, 0x94, 0x6D, 0x02, 0x96, 0x89, 0x3F, 0x2B, 0x59, 0xE9, 0x07, 0x48,
-    0x8D, 0x8C, 0x84, 0x89, 0xD4, 0x74, 0xD9, 0x29, 0xA0, 0x5A, 0x57, 0x3E,
-    0xD6, 0x67, 0x49, 0x03, 0x71, 0xA4, 0x6D, 0x45, 0x56, 0xCB, 0xB6, 0x8A,
-    0xAA, 0x79, 0xCC, 0x3E, 0xC6, 0x65, 0x34, 0x13, 0x57, 0x6C, 0x22, 0x8E,
-    0x37, 0x9A, 0x14, 0xCB, 0x90, 0xB7, 0xB7, 0x59, 0x1B, 0x19, 0xA7, 0xBD,
-    0x37, 0xA1, 0xC4, 0xD3, 0x78, 0x59, 0x89, 0x22, 0x19, 0x44, 0x2B, 0xB0,
-    0xB9, 0xB9, 0xBA, 0x67, 0xBA, 0x3B, 0xC0, 0xD0, 0x95, 0xC8, 0x80, 0x3C,
-    0xEB, 0xE9, 0x7A, 0xFF, 0x0B, 0x1C, 0x15, 0x35, 0x78, 0xA1, 0x30, 0xCD,
-    0x81, 0x57, 0xCF, 0x74, 0x59, 0x46, 0xC2, 0xF5, 0x72, 0x6D, 0x9C, 0x11,
-    0x27, 0x35, 0x75, 0x50, 0x52, 0x91, 0x34, 0x65, 0x28, 0xEE, 0x0B, 0xAC,
-    0x04, 0x7C, 0xC9, 0x84, 0x53, 0x8B, 0x97, 0xBB, 0xAB, 0xFC, 0xC3, 0x57,
-    0xDC, 0xB8, 0xA9, 0x8F, 0xB8, 0x57, 0xC9, 0xC5, 0x2D, 0x1B, 0x78, 0x67,
-    0x49, 0xCA, 0x61, 0x89, 0x2B, 0x09, 0x75, 0x99, 0x80, 0x52, 0x00, 0x91,
-    0xB9, 0xB4, 0x77, 0xC7, 0x0E, 0x6C, 0x46, 0x58, 0x6B, 0x1C, 0xCE, 0xBE,
-    0x87, 0xBC, 0xF6, 0xDF, 0x03, 0xC2, 0xB2, 0x7C, 0xB0, 0x9F, 0xA0, 0x3F,
-    0x63, 0x16, 0x09, 0x58, 0x38, 0x3B, 0xE6, 0x36,
-  },
-
-  .exp_dk = {
-    0x37, 0xEC, 0x47, 0x7E, 0x21, 0x7B, 0xFB, 0x40, 0x38, 0x4C, 0x85, 0x0E,
-    0x51, 0xC1, 0x83, 0x71, 0x58, 0xBD, 0xBC, 0x23, 0xA3, 0x18, 0x32, 0xBC,
-    0x25, 0xC9, 0x1B, 0x31, 0x21, 0x44, 0x4A, 0xD4, 0x53, 0x37, 0x33, 0xBA,
-    0xFF, 0x07, 0xCA, 0x81, 0x7B, 0x64, 0xB2, 0xCA, 0x42, 0x99, 0xAA, 0x26,
-    0x45, 0x4C, 0xBA, 0xFB, 0x35, 0xB6, 0xAB, 0xE1, 0x18, 0x5C, 0xB4, 0x7C,
-    0x4C, 0xD6, 0x1A, 0xF9, 0x83, 0x83, 0xC4, 0x81, 0x4B, 0x20, 0xAB, 0x87,
-    0x54, 0xFC, 0x51, 0x4F, 0x23, 0x07, 0x41, 0x14, 0xC3, 0xE5, 0xA8, 0x10,
-    0xA4, 0x53, 0xB8, 0x55, 0xAA, 0x7F, 0x13, 0x10, 0xC7, 0x4B, 0x0B, 0x01,
-    0xE5, 0xAA, 0xB2, 0xE8, 0x71, 0x73, 0x8F, 0xAC, 0x27, 0x86, 0xC7, 0xA0,
-    0x5D, 0x6B, 0x3B, 0x32, 0xA0, 0x50, 0xD0, 0xFB, 0x22, 0x39, 0x56, 0xC9,
-    0x5C, 0xA0, 0xC2, 0xC1, 0xD5, 0x41, 0x54, 0xA7, 0x7B, 0xD3, 0x37, 0x37,
-    0xA4, 0x9A, 0x00, 0x65, 0xD1, 0x42, 0x4A, 0x2A, 0xBA, 0xFD, 0x52, 0xAA,
-    0x93, 0x4C, 0x98, 0x04, 0x93, 0x92, 0x08, 0xF0, 0x5C, 0xCF, 0x8B, 0x8B,
-    0x80, 0x86, 0x31, 0x6E, 0x09, 0x43, 0xA0, 0x87, 0x10, 0x50, 0x0C, 0x91,
-    0x8A, 0x2B, 0x21, 0x8D, 0x37, 0xB8, 0x5A, 0xE2, 0x80, 0x22, 0xCB, 0x01,
-    0x34, 0xFB, 0x49, 0xF5, 0xC4, 0x5D, 0x98, 0xD3, 0xC0, 0x4B, 0x75, 0x5A,
-    0x60, 0x88, 0x04, 0x22, 0x66, 0x8E, 0x2B, 0x30, 0x1B, 0x18, 0xD5, 0x19,
-    0x4D, 0xE9, 0x91, 0xB2, 0x65, 0xBF, 0x94, 0x69, 0x7E, 0x6A, 0x4B, 0x81,
-    0x50, 0xC8, 0xB8, 0x52, 0x03, 0x39, 0x15, 0x63, 0x5E, 0x30, 0x66, 0x5B,
-    0xDA, 0x21, 0x91, 0xDA, 0xA5, 0x05, 0xD4, 0x33, 0x44, 0xFD, 0x29, 0xC9,
-    0xFC, 0xC1, 0xC5, 0x07, 0x69, 0x1D, 0x47, 0x5B, 0x61, 0x7C, 0x94, 0x8F,
-    0xCC, 0x84, 0xB1, 0xB0, 0x8A, 0x1C, 0x63, 0x8C, 0x3E, 0x13, 0x58, 0x0C,
-    0xE3, 0x59, 0x78, 0x9A, 0x98, 0x60, 0xE5, 0x46, 0x9C, 0xC7, 0x54, 0xB0,
-    0x8E, 0xE3, 0x3F, 0x09, 0x21, 0xBD, 0xEF, 0x15, 0xA9, 0x06, 0x96, 0x9F,
-    0x2D, 0xC5, 0x7A, 0x25, 0xE8, 0x0C, 0xE4, 0xC4, 0x5F, 0x11, 0xE0, 0x4A,
-    0x51, 0x9A, 0xB0, 0x8B, 0x9B, 0x92, 0x7C, 0x3A, 0x13, 0xA0, 0x81, 0xCF,
-    0xFA, 0x11, 0x0F, 0xAC, 0xCC, 0x5E, 0x8D, 0xC2, 0x94, 0x95, 0x97, 0x8B,
-    0x55, 0x53, 0x10, 0x4D, 0x47, 0x3A, 0x17, 0x59, 0x18, 0xAD, 0x5B, 0x54,
-    0x87, 0xBB, 0xA6, 0x97, 0x12, 0xAE, 0x93, 0xF6, 0x15, 0xC6, 0x0A, 0x8D,
-    0x38, 0x7B, 0xCE, 0x3F, 0x65, 0x1E, 0x56, 0x88, 0x0A, 0x52, 0x2B, 0x2D,
-    0xB8, 0x63, 0x51, 0xCA, 0xB6, 0x5D, 0x13, 0xB4, 0x69, 0x3D, 0xB0, 0xB2,
-    0xC8, 0x09, 0x36, 0xFA, 0xD1, 0xCE, 0x67, 0x92, 0x5E, 0x6B, 0xB7, 0xC1,
-    0x10, 0xC4, 0x3E, 0x83, 0x24, 0x7D, 0x22, 0x60, 0x8D, 0x8C, 0x10, 0x23,
-    0x43, 0x1C, 0xB6, 0x92, 0x90, 0xA4, 0xF8, 0xA9, 0x59, 0x3B, 0xF1, 0x24,
-    0x1D, 0x73, 0x7C, 0x0C, 0xD1, 0x6D, 0x75, 0xEB, 0x50, 0xC6, 0x84, 0x2C,
-    0xE0, 0xA2, 0x1D, 0xCE, 0x49, 0x40, 0x36, 0x82, 0x4C, 0xE6, 0x32, 0x52,
-    0xE9, 0x32, 0x5F, 0x05, 0xB7, 0x34, 0x45, 0x2B, 0x12, 0x91, 0x32, 0xB1,
-    0x96, 0x08, 0x4A, 0x37, 0x88, 0xBB, 0xB1, 0xF2, 0x0A, 0x37, 0xD2, 0xC2,
-    0xB3, 0xF9, 0x0E, 0x0D, 0xD7, 0xA2, 0x74, 0xC9, 0xB1, 0xA9, 0xF0, 0x2E,
-    0xC7, 0xE7, 0x21, 0xF4, 0xA4, 0x3D, 0x40, 0x9A, 0x25, 0xFB, 0xC9, 0x9A,
-    0x44, 0xD4, 0x76, 0x31, 0x07, 0xC7, 0x87, 0x62, 0x09, 0x41, 0x76, 0x1E,
-    0xD4, 0x8C, 0x93, 0x29, 0x24, 0xBA, 0x62, 0x09, 0x86, 0xCF, 0x27, 0x7A,
-    0x23, 0x47, 0x1C, 0x7B, 0x13, 0x33, 0x3D, 0x93, 0x6C, 0x0D, 0xD4, 0x9E,
-    0x0F, 0xF3, 0x4C, 0xA3, 0xAB, 0x82, 0x34, 0xC4, 0x2A, 0xEB, 0xE4, 0x59,
-    0xC6, 0x12, 0x05, 0x2B, 0x97, 0x16, 0xE9, 0x6B, 0x20, 0xBE, 0xC7, 0x18,
-    0x12, 0x60, 0x40, 0xA9, 0x09, 0x1F, 0x6B, 0xA9, 0x44, 0x5F, 0x45, 0x80,
-    0x6A, 0xEB, 0x6E, 0x38, 0x16, 0x71, 0x0F, 0x7C, 0xBF, 0xED, 0x11, 0x01,
-    0x46, 0x12, 0x84, 0xDD, 0x96, 0x2B, 0x7B, 0x12, 0x04, 0x7C, 0x0A, 0x0A,
-    0x90, 0x6A, 0x05, 0x89, 0xB4, 0xA9, 0xA4, 0x26, 0x46, 0x9B, 0xDA, 0x39,
-    0x46, 0x09, 0x1A, 0x37, 0x5B, 0x19, 0x52, 0xA9, 0x1C, 0x23, 0x1C, 0x0F,
-    0xE6, 0xB5, 0x7F, 0x7C, 0xC9, 0x7E, 0xFE, 0xD0, 0xBC, 0x10, 0x01, 0x36,
-    0x78, 0x23, 0xBE, 0x18, 0x86, 0x30, 0x8B, 0x3A, 0x21, 0x45, 0x2B, 0x7E,
-    0x45, 0x50, 0x66, 0x71, 0x9C, 0xCC, 0xEA, 0xF6, 0xA7, 0x26, 0xFC, 0x22,
-    0xBC, 0x83, 0x99, 0xF5, 0x4B, 0xBF, 0xCA, 0xF7, 0xCA, 0x63, 0xBA, 0x73,
-    0x17, 0x3C, 0x7A, 0xA8, 0x61, 0x9A, 0x3F, 0x48, 0x5C, 0x3E, 0x33, 0x04,
-    0x21, 0x00, 0x67, 0x66, 0x74, 0x6F, 0x4E, 0xF6, 0x65, 0x3E, 0x44, 0x0E,
-    0x5C, 0xDC, 0x59, 0x53, 0x40, 0x18, 0xC3, 0x52, 0xC0, 0x23, 0x58, 0x4C,
-    0xBB, 0x37, 0x4E, 0xB7, 0xA9, 0xB7, 0x83, 0x68, 0x32, 0xBE, 0x53, 0xAF,
-    0x27, 0x2A, 0x06, 0x97, 0x55, 0xCE, 0x2F, 0xF2, 0x9C, 0xD8, 0xB3, 0x94,
-    0xC5, 0x24, 0x22, 0xB3, 0x47, 0x0E, 0x27, 0x41, 0x5F, 0x41, 0xB3, 0x97,
-    0x53, 0x59, 0x59, 0xF1, 0x60, 0x00, 0x3B, 0x45, 0x2C, 0xF4, 0x96, 0x97,
-    0xB7, 0xA5, 0x36, 0x89, 0x85, 0x2B, 0xBE, 0x6C, 0xCF, 0xDF, 0xB4, 0x0B,
-    0x48, 0xE9, 0x32, 0x8D, 0xE1, 0x15, 0x22, 0xD0, 0xA4, 0x31, 0xB1, 0x15,
-    0xA5, 0xC0, 0xC2, 0xF4, 0x30, 0x7D, 0x98, 0x62, 0xC0, 0xDD, 0x1B, 0x40,
-  },
-}};
-
-static void test_pke512_keygen(void) {
-  for (size_t i = 0; i < sizeof(PKE512_KEYGEN_TESTS)/sizeof(PKE512_KEYGEN_TESTS[0]); i++) {
-    // generate pke512 ek and dk from seed
-    uint8_t got_ek[PKE512_EK_SIZE] = { 0 }, got_dk[PKE512_DK_SIZE] = { 0 };
-    pke512_keygen(got_ek, got_dk, PKE512_KEYGEN_TESTS[i].seed);
-
-    // check for expected ek
-    if (memcmp(&got_ek, &(PKE512_KEYGEN_TESTS[i].exp_ek), sizeof(got_ek))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ek", PKE512_KEYGEN_TESTS[i].name);
-      fail_test(__func__, name, got_ek, sizeof(got_ek), PKE512_KEYGEN_TESTS[i].exp_ek, sizeof(got_ek));
-    }
-
-    // check for expected dk
-    if (memcmp(&got_dk, &(PKE512_KEYGEN_TESTS[i].exp_dk), sizeof(got_dk))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - dk", PKE512_KEYGEN_TESTS[i].name);
-      fail_test(__func__, name, got_dk, sizeof(got_dk), PKE512_KEYGEN_TESTS[i].exp_dk, sizeof(got_dk));
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t ek[PKE512_EK_SIZE]; // test ek (800 bytes)
-  const uint8_t m[32]; // test message (32 bytes)
-  const uint8_t enc_rand[32]; // test randomness (32 bytes)
-  const uint8_t exp[PKE512_CT_SIZE]; // expected ciphertext (768 bytes)
-} PKE512_ENCRYPT_TESTS[] = {{
-  .name = "rand = 0, message = 1",
-  .ek = {
-    0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
-    0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
-    0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
-    0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
-    0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
-    0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
-    0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
-    0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
-    0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
-    0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
-    0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
-    0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
-    0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
-    0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
-    0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
-    0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
-    0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
-    0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
-    0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
-    0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
-    0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
-    0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
-    0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
-    0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
-    0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
-    0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
-    0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
-    0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
-    0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
-    0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
-    0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
-    0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
-    0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
-    0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
-    0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
-    0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
-    0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
-    0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
-    0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
-    0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
-    0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
-    0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
-    0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
-    0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
-    0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
-    0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
-    0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
-    0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
-    0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
-    0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
-    0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
-    0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
-    0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
-    0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
-    0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
-    0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
-    0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
-    0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
-    0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
-    0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
-    0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
-    0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
-    0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
-    0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
-    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-  },
-
-  .m = { 1, 0 },
-  .enc_rand = { 0 },
-
-  .exp = {
-    0x62, 0xab, 0xd0, 0xc6, 0x57, 0x54, 0x84, 0x04, 0x9d, 0x39, 0x85, 0xab,
-    0xed, 0x84, 0x52, 0x30, 0x7d, 0xf6, 0x2a, 0x1a, 0xa0, 0xe6, 0xc7, 0xd3,
-    0x8f, 0x97, 0xff, 0x53, 0x5d, 0xec, 0x9c, 0x18, 0x77, 0x47, 0xf8, 0x1d,
-    0x88, 0x51, 0x39, 0xf5, 0xc3, 0x08, 0x7a, 0x08, 0xff, 0xea, 0xf6, 0x49,
-    0xc7, 0xaa, 0x28, 0xec, 0xe9, 0x1c, 0x65, 0xd0, 0x4c, 0x15, 0x53, 0x10,
-    0x46, 0x82, 0x7c, 0x4e, 0x19, 0xbb, 0xc0, 0xbf, 0xaa, 0x66, 0x53, 0xb7,
-    0x64, 0xb6, 0xbe, 0xd6, 0x15, 0x1e, 0x9a, 0x2e, 0x03, 0x4b, 0x02, 0xa7,
-    0xa3, 0x7b, 0x2d, 0x36, 0x0b, 0x0d, 0xad, 0x0b, 0x64, 0xec, 0x3c, 0x42,
-    0x82, 0xf0, 0xd8, 0x8a, 0x66, 0xf3, 0x16, 0xd7, 0x47, 0xbd, 0x16, 0xa2,
-    0x8f, 0xc8, 0x55, 0xc9, 0x3d, 0xfd, 0x84, 0x86, 0x12, 0x53, 0x33, 0x18,
-    0x5a, 0x19, 0xa7, 0x85, 0x4b, 0xa6, 0x3d, 0xed, 0xea, 0xac, 0xbc, 0x6c,
-    0x5d, 0xf8, 0x9c, 0x19, 0xf0, 0xeb, 0xc1, 0x77, 0x0c, 0x0e, 0xa1, 0xb2,
-    0xec, 0x2a, 0x1c, 0xe2, 0x7e, 0xc4, 0x4f, 0xfd, 0x0a, 0xed, 0xaf, 0x8b,
-    0xf5, 0x37, 0xb0, 0xfc, 0x51, 0x6b, 0x19, 0xd8, 0x14, 0x60, 0xa5, 0xf9,
-    0xed, 0xa3, 0x09, 0x99, 0xe0, 0xb9, 0xdb, 0xef, 0x5d, 0x5f, 0x2e, 0xdb,
-    0x40, 0xb2, 0x96, 0xc5, 0xcc, 0x47, 0x2c, 0xb2, 0xba, 0x83, 0x69, 0x1a,
-    0xd3, 0x60, 0xad, 0xfb, 0x7a, 0xfa, 0x04, 0x51, 0xaa, 0x23, 0x22, 0x5e,
-    0x13, 0xdb, 0x71, 0x88, 0xe7, 0x8b, 0xc0, 0x4f, 0x27, 0x33, 0xd2, 0x74,
-    0x15, 0x6a, 0x06, 0x75, 0x17, 0xaf, 0x71, 0x7c, 0x5d, 0x4b, 0xff, 0x0d,
-    0x5d, 0x63, 0x52, 0x37, 0xdc, 0xd2, 0x22, 0xef, 0x55, 0x50, 0xe9, 0xb1,
-    0xa1, 0x70, 0x41, 0xc0, 0xc1, 0x79, 0xc2, 0x4e, 0x8d, 0xa5, 0x03, 0x0b,
-    0x05, 0x72, 0x94, 0x88, 0x26, 0xe4, 0xc4, 0xd1, 0xb4, 0x8f, 0x06, 0x96,
-    0xa7, 0xc7, 0x32, 0x4f, 0x33, 0x04, 0x1f, 0x1a, 0xff, 0x84, 0x40, 0x11,
-    0x08, 0x95, 0xb8, 0x02, 0x8f, 0x09, 0xae, 0x93, 0xf4, 0x56, 0x1d, 0x82,
-    0xde, 0x2f, 0x77, 0xf4, 0x41, 0x54, 0xcd, 0xe6, 0xc3, 0xf2, 0xb7, 0x69,
-    0x82, 0xe8, 0x37, 0x24, 0x4f, 0x2e, 0xb0, 0x9f, 0xea, 0x99, 0xd1, 0x9b,
-    0x1e, 0x70, 0xa9, 0x26, 0xe4, 0xf5, 0xc6, 0xad, 0x18, 0xac, 0xa7, 0xba,
-    0xe6, 0x98, 0x71, 0x58, 0x30, 0x6c, 0xe4, 0x2d, 0xd6, 0x8f, 0x70, 0xd4,
-    0xb0, 0xca, 0xdb, 0x7b, 0x37, 0xad, 0x0b, 0x5c, 0xe6, 0x40, 0xec, 0x02,
-    0x24, 0x04, 0xec, 0xff, 0x38, 0xb9, 0xfe, 0xa7, 0x9a, 0x3e, 0x02, 0x5c,
-    0x25, 0x6b, 0x3f, 0xd2, 0x8c, 0x85, 0x41, 0x09, 0x28, 0xc0, 0x06, 0xc2,
-    0xb3, 0x93, 0x7d, 0xfa, 0x9f, 0x2c, 0x40, 0x43, 0xa9, 0x2f, 0x9c, 0x25,
-    0x96, 0x15, 0x7b, 0x33, 0x7e, 0xe9, 0xa9, 0xe9, 0x57, 0xe7, 0x05, 0xf7,
-    0xa4, 0x1b, 0x25, 0x07, 0xc8, 0x8d, 0x6e, 0xa1, 0xc7, 0x79, 0x33, 0x9f,
-    0x25, 0x64, 0xe1, 0x9c, 0x88, 0x92, 0x2a, 0xa4, 0xb6, 0x7a, 0x2b, 0x25,
-    0xf3, 0x5b, 0x0f, 0xa3, 0xd1, 0x0c, 0x91, 0xb5, 0xcd, 0x59, 0x73, 0xd8,
-    0xfe, 0x73, 0x3f, 0xf0, 0x21, 0x56, 0x54, 0x2d, 0x25, 0x44, 0x9b, 0x1f,
-    0x15, 0x7a, 0xbf, 0x1b, 0x68, 0xc0, 0x4f, 0xa0, 0xf9, 0xe8, 0xc0, 0x6f,
-    0x86, 0xa5, 0x26, 0x17, 0x5a, 0x20, 0x61, 0x9e, 0x26, 0x6e, 0xd4, 0xca,
-    0xc1, 0xfb, 0xeb, 0x90, 0x40, 0x27, 0x73, 0xb3, 0x3b, 0x09, 0xf5, 0xa9,
-    0xc8, 0xe8, 0xb7, 0xc6, 0x1e, 0x8d, 0xe4, 0x68, 0x60, 0x5b, 0x47, 0x8e,
-    0x05, 0x39, 0x9d, 0x77, 0x0d, 0xfe, 0x6e, 0xe7, 0x90, 0xd6, 0x12, 0xf8,
-    0x2a, 0xcc, 0x03, 0xf2, 0x94, 0x11, 0xdb, 0x4c, 0x75, 0x77, 0x1d, 0xbc,
-    0x0d, 0x0d, 0x63, 0x20, 0xe0, 0xdc, 0xed, 0x64, 0x8f, 0x96, 0x71, 0x90,
-    0xe5, 0xdb, 0xd3, 0xde, 0x6d, 0x27, 0x45, 0x62, 0x30, 0xaa, 0x3d, 0xcf,
-    0x9f, 0xa0, 0x53, 0xdc, 0x9d, 0xb8, 0x7f, 0xd3, 0xad, 0xe8, 0x1b, 0x25,
-    0x21, 0x0e, 0x5c, 0xfc, 0x4f, 0x7c, 0x89, 0x9d, 0x00, 0x27, 0x78, 0xb5,
-    0xdf, 0xff, 0xde, 0x75, 0x2e, 0x08, 0x55, 0x7d, 0x48, 0x4c, 0x05, 0x8c,
-    0x4d, 0x82, 0xa8, 0xfd, 0x2b, 0x90, 0x35, 0x56, 0x5d, 0xc7, 0xdd, 0xa0,
-    0xa5, 0x50, 0x7d, 0xc4, 0x15, 0x7d, 0x12, 0x18, 0xa4, 0x8d, 0xca, 0x26,
-    0xe5, 0x5c, 0xf2, 0x3d, 0x05, 0xd2, 0x27, 0xe9, 0x11, 0x96, 0xee, 0x40,
-    0x18, 0x43, 0xfd, 0x11, 0xa1, 0xde, 0x03, 0x83, 0xae, 0xd7, 0xb3, 0xdc,
-    0xf4, 0x04, 0x70, 0x65, 0xe0, 0x3e, 0xb9, 0xbf, 0x5f, 0x16, 0x71, 0xfb,
-    0x87, 0x34, 0xf0, 0xc4, 0xfb, 0x30, 0x3c, 0x58, 0xe6, 0x55, 0xb6, 0x90,
-    0xb0, 0x72, 0xed, 0xfe, 0xfa, 0x8d, 0xac, 0xc4, 0x4c, 0x78, 0x5c, 0xd4,
-    0x71, 0x34, 0x68, 0xf9, 0x5f, 0x4a, 0xd5, 0x83, 0xc7, 0x9c, 0x19, 0x7c,
-    0x16, 0x87, 0x62, 0x8c, 0x7c, 0x79, 0xcd, 0x4e, 0xe2, 0x3a, 0x55, 0x5e,
-    0xca, 0x3e, 0x46, 0xb4, 0x8f, 0x4e, 0x31, 0x21, 0xd1, 0x98, 0xcc, 0x9d,
-    0xdc, 0x00, 0xa5, 0x60, 0xdc, 0x3e, 0x96, 0x69, 0xc7, 0x3f, 0x05, 0xfd,
-    0x36, 0x6e, 0x49, 0x9f, 0xa2, 0xc9, 0x74, 0x1f, 0x79, 0xe0, 0x25, 0x44,
-    0x76, 0xa9, 0x9c, 0xaa, 0xb9, 0xe1, 0x42, 0x9c, 0x84, 0x15, 0x8f, 0x57,
-    0x86, 0xe3, 0x4c, 0x13, 0xa6, 0xc1, 0xcc, 0x33, 0x72, 0x28, 0x84, 0x95,
-    0xef, 0xcf, 0xa8, 0xa5, 0x41, 0xf6, 0xad, 0x86, 0x01, 0xd7, 0xd8, 0xa8,
-    0xb4, 0x5c, 0xd8, 0x5e, 0x81, 0x71, 0xd3, 0x87, 0x6a, 0xea, 0x11, 0xe6,
-  },
-}};
-
-static void test_pke512_encrypt(void) {
-  for (size_t i = 0; i < sizeof(PKE512_ENCRYPT_TESTS)/sizeof(PKE512_ENCRYPT_TESTS[0]); i++) {
-    // encrypt test message `m` with encryption key `ek` and randomness
-    // `enc_rand`, then store ciphertext to buffer `got`.
-    uint8_t got[PKE512_CT_SIZE] = { 0 };
-    pke512_encrypt(got, PKE512_ENCRYPT_TESTS[i].ek, PKE512_ENCRYPT_TESTS[i].m, PKE512_ENCRYPT_TESTS[i].enc_rand);
-
-    // check for expected ciphertext
-    if (memcmp(got, PKE512_ENCRYPT_TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, PKE512_ENCRYPT_TESTS[i].name, got, sizeof(got), PKE512_ENCRYPT_TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t dk[PKE512_EK_SIZE]; // test decryption key (800 bytes)
-  const uint8_t ct[PKE512_CT_SIZE]; // test ciphertext (32 bytes)
-  const uint8_t exp[32]; // expected message (32 bytes)
-} PKE512_DECRYPT_TESTS[] = {{
-  .name = "rand = 0, message = 1",
-
-  .dk = {
-    0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-    0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-    0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-    0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-    0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-    0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-    0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-    0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-    0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-    0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-    0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-    0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-    0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-    0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-    0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-    0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-    0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-    0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-    0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-    0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-    0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-    0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-    0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-    0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-    0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-    0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-    0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-    0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-    0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-    0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-    0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-    0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-    0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-    0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-    0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-    0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-    0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-    0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-    0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-    0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-    0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-    0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-    0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-    0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-    0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-    0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-    0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-    0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-    0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-    0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-    0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-    0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-    0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-    0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-    0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-    0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-    0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-    0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-    0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-    0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-    0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-    0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-    0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-    0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-  },
-
-  .ct = {
-    0xf8, 0x4a, 0x66, 0x82, 0xed, 0x62, 0xe9, 0x00, 0xf4, 0x10, 0x3e, 0xf4,
-    0x1e, 0x6f, 0x19, 0x37, 0x92, 0xf7, 0x76, 0x6f, 0xcc, 0xd6, 0x77, 0x32,
-    0x92, 0xb1, 0xf6, 0x43, 0xb1, 0x51, 0x0a, 0x25, 0x7c, 0x84, 0x86, 0x35,
-    0x6d, 0x77, 0x12, 0x6c, 0x87, 0x41, 0x8b, 0x4d, 0xac, 0x8e, 0xca, 0x49,
-    0x8b, 0x6c, 0xc2, 0xb1, 0xd3, 0x3f, 0x36, 0x42, 0x4a, 0x21, 0x8d, 0x40,
-    0x68, 0x46, 0x54, 0x2f, 0x36, 0xb7, 0xf1, 0x4e, 0x64, 0xd9, 0xeb, 0xb3,
-    0x30, 0xce, 0xd7, 0x4d, 0x95, 0x22, 0x47, 0x6c, 0xc9, 0x72, 0x9d, 0x91,
-    0x5d, 0xe5, 0xf9, 0x39, 0xb2, 0x0b, 0x35, 0x14, 0xdc, 0x9f, 0x64, 0x60,
-    0x88, 0x1a, 0x29, 0x8c, 0x3e, 0x0e, 0x15, 0x09, 0xdd, 0x0f, 0xdc, 0x7a,
-    0x20, 0xc6, 0x84, 0xa7, 0x03, 0x63, 0x3a, 0x1e, 0xfd, 0x86, 0x9a, 0x3a,
-    0x4c, 0x4e, 0x7b, 0x08, 0x95, 0xe8, 0xe5, 0xd8, 0xaa, 0xcc, 0xbb, 0x42,
-    0x3b, 0xd2, 0x66, 0xf2, 0x7b, 0xf9, 0x06, 0x83, 0x7d, 0xbb, 0xbc, 0x6d,
-    0xf9, 0x7b, 0x09, 0x99, 0xe8, 0xdb, 0x03, 0xd7, 0x56, 0x25, 0x2b, 0x01,
-    0x38, 0x12, 0x92, 0x88, 0xd4, 0xb7, 0xb8, 0x1c, 0x88, 0xe1, 0x73, 0x4f,
-    0x9f, 0x47, 0x19, 0x4c, 0x6a, 0xba, 0x13, 0x54, 0x00, 0x15, 0x91, 0xbc,
-    0xd4, 0x76, 0xab, 0xc3, 0x42, 0xc3, 0x05, 0xab, 0x3e, 0xfa, 0x9a, 0x5e,
-    0xdd, 0x78, 0x2b, 0x59, 0x79, 0x9f, 0xaa, 0x95, 0x52, 0xac, 0x89, 0x1b,
-    0x9c, 0x1f, 0xcb, 0x32, 0x1a, 0x35, 0xf8, 0x0c, 0xcd, 0xe3, 0xae, 0x09,
-    0x50, 0x2a, 0x5b, 0xad, 0x67, 0xce, 0xf2, 0xe3, 0x8d, 0x68, 0x61, 0xfd,
-    0x40, 0x53, 0x7f, 0x8c, 0x72, 0xcd, 0x67, 0x8b, 0x19, 0x66, 0x21, 0x15,
-    0xd2, 0xdd, 0xd8, 0x58, 0xe3, 0xa6, 0x53, 0x43, 0x89, 0x00, 0xdd, 0xe3,
-    0x02, 0xdd, 0x9b, 0xb9, 0xe2, 0xe8, 0x75, 0x73, 0xfe, 0x92, 0x30, 0x3d,
-    0xe4, 0x37, 0x34, 0xb9, 0x7e, 0x4e, 0xa0, 0x2d, 0x2e, 0x61, 0x67, 0x92,
-    0xcb, 0x45, 0x9a, 0x1a, 0x4b, 0xac, 0x9a, 0xee, 0xe6, 0x82, 0x10, 0x18,
-    0x8b, 0x3e, 0x74, 0x15, 0xd1, 0x17, 0x2d, 0x27, 0xa3, 0x70, 0x1e, 0xdd,
-    0x9d, 0x10, 0xb5, 0xf8, 0x68, 0xc4, 0x24, 0x11, 0x4a, 0x59, 0x0f, 0x45,
-    0x06, 0xf5, 0x86, 0x71, 0x05, 0x51, 0xbd, 0xc3, 0x11, 0xa2, 0x17, 0xca,
-    0xae, 0x43, 0x42, 0x07, 0x32, 0x0c, 0x56, 0xf1, 0xef, 0x06, 0x40, 0x80,
-    0xbe, 0x88, 0xc5, 0xbb, 0x54, 0xe6, 0x3a, 0xc8, 0x25, 0x3d, 0x72, 0x08,
-    0x82, 0xda, 0xba, 0x1b, 0xcc, 0x73, 0x24, 0x4c, 0x19, 0x10, 0xd6, 0x00,
-    0xf3, 0xa5, 0xcc, 0x22, 0xce, 0x94, 0x49, 0xe1, 0xdf, 0x8b, 0xc2, 0xba,
-    0xc9, 0x85, 0xff, 0x90, 0xf9, 0xc9, 0xea, 0x3a, 0xfd, 0xb7, 0xcc, 0xcd,
-    0x25, 0x5c, 0x05, 0x96, 0x4e, 0xd9, 0x1c, 0xf6, 0x2a, 0xdc, 0x5d, 0xae,
-    0xfe, 0x53, 0x05, 0xbd, 0xb7, 0xd5, 0xb1, 0xa2, 0xe4, 0xd8, 0x95, 0x85,
-    0xe9, 0x61, 0x8e, 0x62, 0x5b, 0x0d, 0xb3, 0x78, 0x42, 0xc0, 0x62, 0x1d,
-    0xec, 0xb4, 0x7d, 0x30, 0x4e, 0x75, 0xae, 0x2b, 0x9e, 0xd5, 0x9c, 0x48,
-    0xec, 0x40, 0x3f, 0x51, 0x08, 0xb4, 0x92, 0x07, 0x90, 0x50, 0x0b, 0xb0,
-    0x7e, 0x00, 0xfc, 0x6a, 0x1e, 0xb3, 0x49, 0x11, 0x94, 0x63, 0x5a, 0x3f,
-    0x55, 0xf2, 0x1b, 0x23, 0x55, 0x7d, 0x67, 0xa3, 0xf5, 0x35, 0xfa, 0x67,
-    0x3a, 0x87, 0x9c, 0xc7, 0x16, 0x67, 0x6a, 0xf1, 0x4c, 0xfa, 0x76, 0xd4,
-    0xfa, 0xc8, 0xb9, 0xa2, 0xe9, 0x4c, 0x3f, 0x2e, 0x2b, 0xf1, 0xe7, 0xce,
-    0x03, 0xf0, 0x57, 0xaa, 0xcb, 0xb0, 0x81, 0x05, 0xdc, 0x8c, 0x17, 0x7c,
-    0x5a, 0xdf, 0x9d, 0x1c, 0xc5, 0x10, 0x58, 0xcd, 0xa9, 0x55, 0x3d, 0xc9,
-    0x9a, 0x57, 0x46, 0xb5, 0x45, 0x7d, 0x80, 0x7b, 0x37, 0xba, 0x3f, 0x46,
-    0xf1, 0x67, 0x8d, 0x1c, 0xcd, 0x17, 0x0a, 0x5e, 0x25, 0xef, 0x7a, 0x95,
-    0x96, 0x67, 0x75, 0xe2, 0x53, 0xe3, 0x43, 0xda, 0x73, 0x44, 0xf6, 0x41,
-    0x68, 0x48, 0x86, 0x5a, 0x9d, 0x00, 0xa1, 0x0d, 0x10, 0x8e, 0xbf, 0xd7,
-    0x1b, 0x87, 0xc0, 0x86, 0x7e, 0xd1, 0xfc, 0x4d, 0x8a, 0x84, 0xea, 0x17,
-    0x3f, 0x6e, 0xf9, 0xbd, 0xd5, 0x6a, 0xa6, 0x6c, 0x43, 0xfa, 0x90, 0xd2,
-    0x13, 0xcb, 0x03, 0x28, 0x23, 0x10, 0x08, 0x20, 0x4f, 0x9b, 0xed, 0x2f,
-    0x0f, 0x23, 0x1b, 0x0c, 0x6d, 0x8b, 0xed, 0x9e, 0xc2, 0x17, 0xd8, 0x9a,
-    0xa1, 0x31, 0x28, 0x4d, 0xbb, 0x79, 0x3b, 0x02, 0xce, 0xfc, 0x99, 0x1d,
-    0xc7, 0xf2, 0xa8, 0xca, 0x76, 0xbc, 0x55, 0xc0, 0x38, 0x20, 0xdb, 0x1d,
-    0x0b, 0xb0, 0x8e, 0xe5, 0xfb, 0x30, 0x3c, 0x58, 0xe6, 0x55, 0xb6, 0x90,
-    0xb0, 0x72, 0xed, 0xfe, 0xfa, 0x8d, 0xac, 0xc4, 0x4c, 0x78, 0x5c, 0xd4,
-    0x71, 0x34, 0x68, 0xf9, 0x5f, 0x4a, 0xd5, 0x83, 0xc7, 0x9c, 0x19, 0x7c,
-    0x16, 0x87, 0x62, 0x8c, 0x7c, 0x79, 0xcd, 0x4e, 0xe2, 0x3a, 0x55, 0x5e,
-    0xca, 0x3e, 0x46, 0xb4, 0x8f, 0x4e, 0x31, 0x21, 0xd1, 0x98, 0xcc, 0x9d,
-    0xdc, 0x00, 0xa5, 0x60, 0xdc, 0x3e, 0x96, 0x69, 0xc7, 0x3f, 0x05, 0xfd,
-    0x36, 0x6e, 0x49, 0x9f, 0xa2, 0xc9, 0x74, 0x1f, 0x79, 0xe0, 0x25, 0x44,
-    0x76, 0xa9, 0x9c, 0xaa, 0xb9, 0xe1, 0x42, 0x9c, 0x84, 0x15, 0x8f, 0x57,
-    0x86, 0xe3, 0x4c, 0x13, 0xa6, 0xc1, 0xcc, 0x33, 0x72, 0x28, 0x84, 0x95,
-    0xef, 0xcf, 0xa8, 0xa5, 0x41, 0xf6, 0xad, 0x86, 0x01, 0xd7, 0xd8, 0xa8,
-    0xb4, 0x5c, 0xd8, 0x5e, 0x81, 0x71, 0xd3, 0x87, 0x6a, 0xea, 0x11, 0xe6,
-  },
-
-  .exp = { 1, 0 },
-}};
-
-static void test_pke512_decrypt(void) {
-  for (size_t i = 0; i < sizeof(PKE512_DECRYPT_TESTS)/sizeof(PKE512_DECRYPT_TESTS[0]); i++) {
-    // decrypt ciphertext `ct` with decryption key `dk` and store the
-    // plaintext message in output buffer `got`.
-    uint8_t got[32] = { 0 };
-    pke512_decrypt(got, PKE512_DECRYPT_TESTS[i].dk, PKE512_DECRYPT_TESTS[i].ct);
-
-    // check for expected plaintext
-    if (memcmp(got, PKE512_DECRYPT_TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, PKE512_DECRYPT_TESTS[i].name, got, sizeof(got), PKE512_DECRYPT_TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_fips203ipd_kem512_keygen(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t seed[64]; // test seed
-    const uint8_t exp_ek[PKE512_EK_SIZE]; // expected ek (800 bytes)
-    const uint8_t exp_dk[FIPS203IPD_KEM512_DK_SIZE]; // expected dk (1632 bytes)
-  } TESTS[] = {{
-    .name = "all-zero",
-    .seed = { 0 },
-    .exp_ek = {
-      0x9c, 0xe5, 0xc6, 0x7e, 0xfc, 0x9c, 0x33, 0x67, 0xa8, 0x3c, 0x7c, 0x42,
-      0xb0, 0xa1, 0x29, 0x37, 0xc9, 0x40, 0xcf, 0x71, 0x1a, 0xa2, 0xa7, 0x7f,
-      0x94, 0x38, 0x92, 0x8d, 0x69, 0x50, 0xea, 0x60, 0x07, 0xc0, 0xb9, 0x02,
-      0xff, 0x19, 0x77, 0x7b, 0x20, 0x93, 0x12, 0x66, 0x06, 0x77, 0x00, 0xb9,
-      0x69, 0xa0, 0x24, 0x92, 0xec, 0xc0, 0x66, 0x73, 0xce, 0xf6, 0xe1, 0xce,
-      0x36, 0x77, 0x3a, 0x4b, 0xdb, 0x95, 0x38, 0xd5, 0x34, 0x58, 0x26, 0x18,
-      0xde, 0xd2, 0x79, 0xe2, 0x99, 0xa1, 0x20, 0x23, 0x18, 0x13, 0x8c, 0xa8,
-      0xd5, 0x49, 0xb6, 0xc6, 0x08, 0x81, 0xee, 0xd2, 0xb7, 0x4a, 0xb8, 0x84,
-      0xb9, 0x30, 0x74, 0x68, 0x53, 0x59, 0x60, 0x35, 0x27, 0xec, 0x63, 0x8b,
-      0xab, 0xb1, 0x3d, 0x98, 0xf2, 0xa7, 0x3e, 0x2a, 0x36, 0x2a, 0x56, 0x62,
-      0xa3, 0x51, 0x53, 0x8d, 0x53, 0x57, 0xec, 0x7c, 0x20, 0xb6, 0x67, 0x40,
-      0x80, 0xc7, 0x6a, 0x53, 0x65, 0xab, 0x9f, 0x48, 0x3f, 0x78, 0x6c, 0x4e,
-      0x2c, 0xdb, 0xca, 0x23, 0xf0, 0xaa, 0x0a, 0x64, 0x58, 0x9e, 0xb8, 0x6e,
-      0xaa, 0x07, 0x37, 0x71, 0xf0, 0x4d, 0x39, 0x80, 0x8e, 0x90, 0x44, 0x37,
-      0x68, 0xaa, 0x0d, 0x09, 0x22, 0xb5, 0xdf, 0xa1, 0x54, 0xe7, 0xe7, 0x09,
-      0x3d, 0x34, 0x22, 0x38, 0x14, 0xba, 0xa1, 0xb6, 0x6d, 0xae, 0x36, 0x53,
-      0xce, 0xa2, 0x15, 0xb3, 0xac, 0x7d, 0x6c, 0x65, 0xb8, 0x2c, 0x31, 0xae,
-      0xdf, 0xc0, 0x3e, 0x3e, 0xf6, 0x1d, 0xd2, 0x93, 0x15, 0xb5, 0xc1, 0x1c,
-      0x10, 0xa5, 0xb9, 0xdf, 0x13, 0x92, 0x17, 0xa0, 0xc2, 0x3e, 0xf4, 0xbf,
-      0x81, 0x41, 0x0e, 0xbf, 0x16, 0x0f, 0x5b, 0xba, 0x4d, 0x3c, 0x67, 0x18,
-      0xb3, 0x56, 0xb1, 0x85, 0x65, 0x5a, 0xbe, 0xd1, 0x42, 0xa3, 0xc4, 0x99,
-      0x05, 0xe2, 0x28, 0x9d, 0xd4, 0xca, 0x05, 0xa0, 0x3a, 0x05, 0x0b, 0xa0,
-      0x08, 0xd3, 0x52, 0xbd, 0x22, 0xba, 0xeb, 0x89, 0x78, 0x4e, 0xfc, 0x29,
-      0x01, 0x0c, 0xa2, 0x78, 0x4a, 0x6c, 0x21, 0xcb, 0x46, 0x93, 0x79, 0x00,
-      0x99, 0xdb, 0x9e, 0xca, 0x93, 0x25, 0x51, 0x69, 0x95, 0x31, 0x64, 0x15,
-      0x88, 0x8c, 0x35, 0xa8, 0x34, 0x61, 0xbb, 0x5a, 0x86, 0xb4, 0x25, 0x17,
-      0xb2, 0xb1, 0x56, 0xd2, 0x85, 0x98, 0xc9, 0x5b, 0x75, 0x4e, 0x1b, 0x37,
-      0x4f, 0x40, 0xa0, 0xae, 0x53, 0x21, 0x69, 0x72, 0x76, 0x88, 0x67, 0xcd,
-      0x45, 0xa7, 0xca, 0xd6, 0xd5, 0xa7, 0x38, 0x2b, 0x2a, 0x5d, 0x7c, 0x16,
-      0x94, 0x49, 0x6e, 0x05, 0x48, 0xad, 0xf4, 0x57, 0x1b, 0x4b, 0x5c, 0x5f,
-      0x5d, 0x21, 0x93, 0x9f, 0xbc, 0x9b, 0xf2, 0x69, 0xcd, 0xaf, 0x53, 0xbe,
-      0x5f, 0x09, 0xbe, 0x61, 0x93, 0xae, 0xba, 0x59, 0x1f, 0x4f, 0xc1, 0xb9,
-      0x43, 0x97, 0x79, 0x8d, 0xb9, 0x42, 0xe7, 0x3a, 0x75, 0x59, 0x00, 0x17,
-      0xbe, 0x4b, 0x46, 0xc1, 0xe9, 0x4d, 0xd0, 0xfb, 0x1b, 0x8a, 0x94, 0x76,
-      0xf2, 0x8a, 0xcf, 0x0b, 0x21, 0x1a, 0xc1, 0xca, 0x80, 0x2c, 0xa8, 0x72,
-      0x3e, 0x7a, 0x6f, 0x61, 0xf1, 0x34, 0x3c, 0x17, 0x45, 0x9e, 0x55, 0xb2,
-      0x73, 0x2c, 0xce, 0xf6, 0x3c, 0x80, 0xbe, 0x43, 0x59, 0xf7, 0xf6, 0x15,
-      0xf9, 0x0c, 0x2e, 0x8c, 0x6c, 0x08, 0x23, 0x85, 0xae, 0xb7, 0x15, 0x18,
-      0x89, 0x2a, 0x1c, 0x87, 0xcb, 0x3f, 0x36, 0x66, 0x81, 0x47, 0xd9, 0x19,
-      0xc1, 0x06, 0x6b, 0xaa, 0x69, 0xb6, 0xe3, 0xf9, 0x99, 0xf9, 0x26, 0x78,
-      0x0d, 0x66, 0x17, 0x70, 0x15, 0x23, 0x40, 0x73, 0x1d, 0x02, 0x76, 0xc4,
-      0x54, 0xa8, 0x6c, 0x82, 0xe0, 0xb7, 0x4c, 0x4b, 0x4c, 0x1b, 0x77, 0x37,
-      0xf2, 0xf9, 0xae, 0x32, 0x22, 0xb7, 0xd0, 0xf2, 0xcb, 0xc0, 0x01, 0xba,
-      0x54, 0x21, 0xcc, 0x6a, 0x1a, 0x22, 0xd0, 0x85, 0x87, 0xa2, 0x58, 0xce,
-      0x42, 0xbc, 0x69, 0xa1, 0x72, 0x44, 0x76, 0xa5, 0xa7, 0x96, 0xb9, 0x7f,
-      0xa1, 0x5c, 0x85, 0x9c, 0x7c, 0x60, 0x6a, 0xe3, 0x2c, 0x81, 0xbc, 0x99,
-      0x39, 0x69, 0x99, 0xd3, 0x45, 0x7b, 0xb4, 0x23, 0x95, 0x63, 0x2a, 0xb6,
-      0x99, 0x53, 0x40, 0xb5, 0x14, 0x80, 0x0f, 0x58, 0x2e, 0x56, 0x95, 0x34,
-      0xd0, 0x1a, 0x27, 0x42, 0xdc, 0x2f, 0x0a, 0x35, 0xbf, 0xad, 0x61, 0x86,
-      0x38, 0xb5, 0x9b, 0xcf, 0xc3, 0x3b, 0xb4, 0xc2, 0x4d, 0x35, 0xe7, 0x65,
-      0x62, 0xfc, 0x4b, 0xdc, 0x44, 0xb4, 0x16, 0x41, 0x31, 0x3b, 0x0c, 0x5f,
-      0xca, 0x92, 0x6c, 0x54, 0xd3, 0xc6, 0x42, 0xe5, 0x2a, 0x62, 0x06, 0x38,
-      0x67, 0xc8, 0xba, 0x3a, 0x0a, 0x79, 0x76, 0x13, 0x5e, 0xfe, 0x3b, 0x6c,
-      0x49, 0xea, 0x26, 0x5d, 0x55, 0xa2, 0xd1, 0xd5, 0x67, 0x7f, 0x49, 0xb0,
-      0x9e, 0xba, 0x38, 0x23, 0x4a, 0xbe, 0x38, 0xb3, 0x95, 0x27, 0xa8, 0x17,
-      0x42, 0x14, 0x4e, 0x93, 0x43, 0x82, 0xb2, 0x75, 0x64, 0x29, 0x2a, 0x24,
-      0xd6, 0xa5, 0x38, 0x91, 0x6b, 0x21, 0x48, 0xd2, 0x3f, 0x78, 0xe7, 0x0a,
-      0x59, 0xe9, 0x80, 0x96, 0xc9, 0x12, 0x03, 0xf7, 0x79, 0x65, 0x21, 0x1f,
-      0x2e, 0xea, 0x2f, 0xc6, 0xfc, 0x1f, 0x59, 0x63, 0x4e, 0x24, 0x6b, 0x0c,
-      0x9e, 0x24, 0x76, 0x9c, 0xe5, 0xa9, 0x4f, 0xc2, 0x7c, 0x33, 0xd5, 0x56,
-      0x50, 0x02, 0x8f, 0x95, 0x1b, 0x2a, 0x30, 0x75, 0xc9, 0x8b, 0x87, 0x87,
-      0x46, 0xe0, 0x3d, 0xc9, 0x1c, 0xbf, 0xdd, 0x97, 0x25, 0xec, 0x09, 0xb4,
-      0x4d, 0xb9, 0x0f, 0x0c, 0x66, 0x2b, 0xa5, 0x09, 0x6e, 0x9d, 0xab, 0x07,
-      0x6a, 0x7b, 0x7b, 0x1a, 0xca, 0xb4, 0xeb, 0x2b, 0x79, 0x5b, 0x65, 0x31,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-    },
-
-    .exp_dk = {
-      0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-      0x9c, 0xe5, 0xc6, 0x7e, 0xfc, 0x9c, 0x33, 0x67, 0xa8, 0x3c, 0x7c, 0x42,
-      0xb0, 0xa1, 0x29, 0x37, 0xc9, 0x40, 0xcf, 0x71, 0x1a, 0xa2, 0xa7, 0x7f,
-      0x94, 0x38, 0x92, 0x8d, 0x69, 0x50, 0xea, 0x60, 0x07, 0xc0, 0xb9, 0x02,
-      0xff, 0x19, 0x77, 0x7b, 0x20, 0x93, 0x12, 0x66, 0x06, 0x77, 0x00, 0xb9,
-      0x69, 0xa0, 0x24, 0x92, 0xec, 0xc0, 0x66, 0x73, 0xce, 0xf6, 0xe1, 0xce,
-      0x36, 0x77, 0x3a, 0x4b, 0xdb, 0x95, 0x38, 0xd5, 0x34, 0x58, 0x26, 0x18,
-      0xde, 0xd2, 0x79, 0xe2, 0x99, 0xa1, 0x20, 0x23, 0x18, 0x13, 0x8c, 0xa8,
-      0xd5, 0x49, 0xb6, 0xc6, 0x08, 0x81, 0xee, 0xd2, 0xb7, 0x4a, 0xb8, 0x84,
-      0xb9, 0x30, 0x74, 0x68, 0x53, 0x59, 0x60, 0x35, 0x27, 0xec, 0x63, 0x8b,
-      0xab, 0xb1, 0x3d, 0x98, 0xf2, 0xa7, 0x3e, 0x2a, 0x36, 0x2a, 0x56, 0x62,
-      0xa3, 0x51, 0x53, 0x8d, 0x53, 0x57, 0xec, 0x7c, 0x20, 0xb6, 0x67, 0x40,
-      0x80, 0xc7, 0x6a, 0x53, 0x65, 0xab, 0x9f, 0x48, 0x3f, 0x78, 0x6c, 0x4e,
-      0x2c, 0xdb, 0xca, 0x23, 0xf0, 0xaa, 0x0a, 0x64, 0x58, 0x9e, 0xb8, 0x6e,
-      0xaa, 0x07, 0x37, 0x71, 0xf0, 0x4d, 0x39, 0x80, 0x8e, 0x90, 0x44, 0x37,
-      0x68, 0xaa, 0x0d, 0x09, 0x22, 0xb5, 0xdf, 0xa1, 0x54, 0xe7, 0xe7, 0x09,
-      0x3d, 0x34, 0x22, 0x38, 0x14, 0xba, 0xa1, 0xb6, 0x6d, 0xae, 0x36, 0x53,
-      0xce, 0xa2, 0x15, 0xb3, 0xac, 0x7d, 0x6c, 0x65, 0xb8, 0x2c, 0x31, 0xae,
-      0xdf, 0xc0, 0x3e, 0x3e, 0xf6, 0x1d, 0xd2, 0x93, 0x15, 0xb5, 0xc1, 0x1c,
-      0x10, 0xa5, 0xb9, 0xdf, 0x13, 0x92, 0x17, 0xa0, 0xc2, 0x3e, 0xf4, 0xbf,
-      0x81, 0x41, 0x0e, 0xbf, 0x16, 0x0f, 0x5b, 0xba, 0x4d, 0x3c, 0x67, 0x18,
-      0xb3, 0x56, 0xb1, 0x85, 0x65, 0x5a, 0xbe, 0xd1, 0x42, 0xa3, 0xc4, 0x99,
-      0x05, 0xe2, 0x28, 0x9d, 0xd4, 0xca, 0x05, 0xa0, 0x3a, 0x05, 0x0b, 0xa0,
-      0x08, 0xd3, 0x52, 0xbd, 0x22, 0xba, 0xeb, 0x89, 0x78, 0x4e, 0xfc, 0x29,
-      0x01, 0x0c, 0xa2, 0x78, 0x4a, 0x6c, 0x21, 0xcb, 0x46, 0x93, 0x79, 0x00,
-      0x99, 0xdb, 0x9e, 0xca, 0x93, 0x25, 0x51, 0x69, 0x95, 0x31, 0x64, 0x15,
-      0x88, 0x8c, 0x35, 0xa8, 0x34, 0x61, 0xbb, 0x5a, 0x86, 0xb4, 0x25, 0x17,
-      0xb2, 0xb1, 0x56, 0xd2, 0x85, 0x98, 0xc9, 0x5b, 0x75, 0x4e, 0x1b, 0x37,
-      0x4f, 0x40, 0xa0, 0xae, 0x53, 0x21, 0x69, 0x72, 0x76, 0x88, 0x67, 0xcd,
-      0x45, 0xa7, 0xca, 0xd6, 0xd5, 0xa7, 0x38, 0x2b, 0x2a, 0x5d, 0x7c, 0x16,
-      0x94, 0x49, 0x6e, 0x05, 0x48, 0xad, 0xf4, 0x57, 0x1b, 0x4b, 0x5c, 0x5f,
-      0x5d, 0x21, 0x93, 0x9f, 0xbc, 0x9b, 0xf2, 0x69, 0xcd, 0xaf, 0x53, 0xbe,
-      0x5f, 0x09, 0xbe, 0x61, 0x93, 0xae, 0xba, 0x59, 0x1f, 0x4f, 0xc1, 0xb9,
-      0x43, 0x97, 0x79, 0x8d, 0xb9, 0x42, 0xe7, 0x3a, 0x75, 0x59, 0x00, 0x17,
-      0xbe, 0x4b, 0x46, 0xc1, 0xe9, 0x4d, 0xd0, 0xfb, 0x1b, 0x8a, 0x94, 0x76,
-      0xf2, 0x8a, 0xcf, 0x0b, 0x21, 0x1a, 0xc1, 0xca, 0x80, 0x2c, 0xa8, 0x72,
-      0x3e, 0x7a, 0x6f, 0x61, 0xf1, 0x34, 0x3c, 0x17, 0x45, 0x9e, 0x55, 0xb2,
-      0x73, 0x2c, 0xce, 0xf6, 0x3c, 0x80, 0xbe, 0x43, 0x59, 0xf7, 0xf6, 0x15,
-      0xf9, 0x0c, 0x2e, 0x8c, 0x6c, 0x08, 0x23, 0x85, 0xae, 0xb7, 0x15, 0x18,
-      0x89, 0x2a, 0x1c, 0x87, 0xcb, 0x3f, 0x36, 0x66, 0x81, 0x47, 0xd9, 0x19,
-      0xc1, 0x06, 0x6b, 0xaa, 0x69, 0xb6, 0xe3, 0xf9, 0x99, 0xf9, 0x26, 0x78,
-      0x0d, 0x66, 0x17, 0x70, 0x15, 0x23, 0x40, 0x73, 0x1d, 0x02, 0x76, 0xc4,
-      0x54, 0xa8, 0x6c, 0x82, 0xe0, 0xb7, 0x4c, 0x4b, 0x4c, 0x1b, 0x77, 0x37,
-      0xf2, 0xf9, 0xae, 0x32, 0x22, 0xb7, 0xd0, 0xf2, 0xcb, 0xc0, 0x01, 0xba,
-      0x54, 0x21, 0xcc, 0x6a, 0x1a, 0x22, 0xd0, 0x85, 0x87, 0xa2, 0x58, 0xce,
-      0x42, 0xbc, 0x69, 0xa1, 0x72, 0x44, 0x76, 0xa5, 0xa7, 0x96, 0xb9, 0x7f,
-      0xa1, 0x5c, 0x85, 0x9c, 0x7c, 0x60, 0x6a, 0xe3, 0x2c, 0x81, 0xbc, 0x99,
-      0x39, 0x69, 0x99, 0xd3, 0x45, 0x7b, 0xb4, 0x23, 0x95, 0x63, 0x2a, 0xb6,
-      0x99, 0x53, 0x40, 0xb5, 0x14, 0x80, 0x0f, 0x58, 0x2e, 0x56, 0x95, 0x34,
-      0xd0, 0x1a, 0x27, 0x42, 0xdc, 0x2f, 0x0a, 0x35, 0xbf, 0xad, 0x61, 0x86,
-      0x38, 0xb5, 0x9b, 0xcf, 0xc3, 0x3b, 0xb4, 0xc2, 0x4d, 0x35, 0xe7, 0x65,
-      0x62, 0xfc, 0x4b, 0xdc, 0x44, 0xb4, 0x16, 0x41, 0x31, 0x3b, 0x0c, 0x5f,
-      0xca, 0x92, 0x6c, 0x54, 0xd3, 0xc6, 0x42, 0xe5, 0x2a, 0x62, 0x06, 0x38,
-      0x67, 0xc8, 0xba, 0x3a, 0x0a, 0x79, 0x76, 0x13, 0x5e, 0xfe, 0x3b, 0x6c,
-      0x49, 0xea, 0x26, 0x5d, 0x55, 0xa2, 0xd1, 0xd5, 0x67, 0x7f, 0x49, 0xb0,
-      0x9e, 0xba, 0x38, 0x23, 0x4a, 0xbe, 0x38, 0xb3, 0x95, 0x27, 0xa8, 0x17,
-      0x42, 0x14, 0x4e, 0x93, 0x43, 0x82, 0xb2, 0x75, 0x64, 0x29, 0x2a, 0x24,
-      0xd6, 0xa5, 0x38, 0x91, 0x6b, 0x21, 0x48, 0xd2, 0x3f, 0x78, 0xe7, 0x0a,
-      0x59, 0xe9, 0x80, 0x96, 0xc9, 0x12, 0x03, 0xf7, 0x79, 0x65, 0x21, 0x1f,
-      0x2e, 0xea, 0x2f, 0xc6, 0xfc, 0x1f, 0x59, 0x63, 0x4e, 0x24, 0x6b, 0x0c,
-      0x9e, 0x24, 0x76, 0x9c, 0xe5, 0xa9, 0x4f, 0xc2, 0x7c, 0x33, 0xd5, 0x56,
-      0x50, 0x02, 0x8f, 0x95, 0x1b, 0x2a, 0x30, 0x75, 0xc9, 0x8b, 0x87, 0x87,
-      0x46, 0xe0, 0x3d, 0xc9, 0x1c, 0xbf, 0xdd, 0x97, 0x25, 0xec, 0x09, 0xb4,
-      0x4d, 0xb9, 0x0f, 0x0c, 0x66, 0x2b, 0xa5, 0x09, 0x6e, 0x9d, 0xab, 0x07,
-      0x6a, 0x7b, 0x7b, 0x1a, 0xca, 0xb4, 0xeb, 0x2b, 0x79, 0x5b, 0x65, 0x31,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf5, 0xfa, 0x45, 0xab,
-      0xbf, 0xdc, 0xbb, 0x98, 0xdc, 0x4a, 0x17, 0xf6, 0xda, 0xe9, 0x1b, 0x8c,
-      0x74, 0x85, 0x1b, 0x10, 0xb2, 0xa2, 0xeb, 0x1e, 0x51, 0x56, 0xc0, 0x2e,
-      0xcf, 0x56, 0xd9, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-  }, {
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Key Generation -- ML-KEM-512",
-    .seed = {
-      // z
-      0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42, 0x42, 0x4A, 0x87, 0xC1,
-      0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88, 0x18, 0x69, 0x07, 0x7E,
-      0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
-
-      // d
-      0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42, 0x42, 0x4A, 0x87, 0xC1,
-      0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88, 0x18, 0x69, 0x07, 0x7E,
-      0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
-    },
-
-    .exp_ek = {
-      0xC6, 0x5A, 0x1D, 0x9D, 0x47, 0x97, 0x77, 0xE6, 0x90, 0x5A, 0x91, 0xA5,
-      0xCB, 0x24, 0x55, 0x1C, 0x8B, 0x1E, 0x52, 0xA3, 0xC7, 0x7B, 0x63, 0x31,
-      0x3F, 0xFC, 0x8B, 0x58, 0x17, 0x81, 0x52, 0x59, 0xA6, 0xAD, 0xB5, 0x96,
-      0x45, 0xDC, 0x4B, 0xB1, 0x43, 0x6D, 0x51, 0xE6, 0x2A, 0x09, 0x68, 0x34,
-      0xAF, 0x43, 0x77, 0x25, 0x10, 0xC4, 0xED, 0xF3, 0x4C, 0xDE, 0x0A, 0x5B,
-      0x57, 0xC1, 0x45, 0xE6, 0x87, 0xCB, 0x87, 0x16, 0x2F, 0x00, 0x1C, 0x21,
-      0xC9, 0xE1, 0x93, 0x4A, 0xC1, 0x1A, 0xAF, 0xA7, 0x0F, 0xF8, 0x10, 0x73,
-      0x26, 0x50, 0xB3, 0x2A, 0x30, 0x18, 0xA7, 0xC5, 0x0C, 0xD7, 0x36, 0x79,
-      0x62, 0x22, 0xC8, 0xAB, 0x82, 0x1A, 0x92, 0x83, 0xBE, 0x1C, 0xC2, 0x04,
-      0xC3, 0xF1, 0x63, 0x0D, 0x3C, 0xCC, 0xDB, 0x0A, 0x9A, 0x3D, 0x17, 0x55,
-      0x2B, 0x91, 0x58, 0xC0, 0x66, 0x4E, 0x5D, 0x6A, 0x04, 0xB0, 0xFA, 0x36,
-      0xDE, 0x45, 0x86, 0x2A, 0x46, 0xA3, 0x9E, 0xC5, 0x97, 0xAE, 0x42, 0xC3,
-      0x11, 0xC4, 0xAC, 0x22, 0x4A, 0x72, 0xD6, 0xF2, 0x53, 0xBB, 0x52, 0x35,
-      0xF7, 0xA2, 0xB8, 0xB0, 0xF2, 0x4D, 0x13, 0x76, 0xAF, 0x58, 0x87, 0x46,
-      0xF3, 0xBB, 0x8E, 0x03, 0x65, 0x07, 0x87, 0x61, 0xCA, 0xB9, 0x83, 0xA4,
-      0xA6, 0xA9, 0x40, 0xA3, 0xD9, 0x97, 0x04, 0x7A, 0x8F, 0x36, 0xA7, 0x31,
-      0xE8, 0x96, 0x52, 0x36, 0xC3, 0x7B, 0xF2, 0x00, 0x08, 0x2F, 0x82, 0x1D,
-      0xCA, 0x77, 0x16, 0xC4, 0x44, 0xA9, 0x0B, 0xEC, 0x53, 0x07, 0x4B, 0xBA,
-      0x58, 0xC1, 0x32, 0xBF, 0xB9, 0xA2, 0xAC, 0xE2, 0xCE, 0xC9, 0xAA, 0x65,
-      0x8E, 0xAC, 0x12, 0x32, 0xCC, 0xCA, 0x3C, 0x81, 0x7A, 0x92, 0xC1, 0x19,
-      0x5C, 0x05, 0xC0, 0xE1, 0xD6, 0x63, 0x9F, 0xD2, 0xAD, 0xE5, 0x31, 0x60,
-      0x7D, 0x48, 0x8B, 0x74, 0xA7, 0x47, 0xCF, 0xF4, 0x7F, 0xCA, 0x5C, 0x8B,
-      0x21, 0x63, 0xCA, 0x03, 0xC5, 0x45, 0xED, 0x10, 0x32, 0x78, 0x43, 0x0C,
-      0x60, 0xB2, 0x38, 0x1A, 0x09, 0x42, 0x7F, 0xD1, 0x30, 0xF8, 0x59, 0xBF,
-      0x5D, 0xB7, 0x76, 0xDA, 0x09, 0x5D, 0xCA, 0x58, 0x04, 0xFA, 0x63, 0xB0,
-      0xD7, 0xD8, 0x7F, 0xA9, 0x41, 0x5C, 0x72, 0xFB, 0x51, 0x87, 0x2A, 0x98,
-      0x9F, 0x46, 0x6C, 0x98, 0x4B, 0xC7, 0x4C, 0x29, 0xB8, 0x63, 0x20, 0x19,
-      0xCA, 0x04, 0x0C, 0x9C, 0xA3, 0x5E, 0x22, 0x60, 0x8D, 0xAA, 0x70, 0x35,
-      0x7A, 0xE2, 0xC3, 0xAD, 0x83, 0x63, 0x1F, 0xAA, 0x17, 0x4E, 0x0A, 0xCD,
-      0xF5, 0xDB, 0xBF, 0x3C, 0xF6, 0x8A, 0x05, 0xB6, 0x54, 0x3A, 0xB6, 0x26,
-      0x8E, 0x1A, 0x51, 0xB0, 0x93, 0x2C, 0x17, 0xB0, 0x0A, 0x13, 0x71, 0xB2,
-      0xDA, 0xB2, 0x41, 0xF9, 0x2A, 0x43, 0xFF, 0xB4, 0x56, 0xD0, 0xA8, 0xC8,
-      0x86, 0x0A, 0x8E, 0x28, 0xA6, 0x1A, 0x21, 0x30, 0x7C, 0xC0, 0x45, 0x6D,
-      0xA4, 0x24, 0x29, 0x05, 0xCB, 0x1D, 0x3D, 0x0B, 0xBD, 0x81, 0xBB, 0x8E,
-      0xE2, 0x74, 0xA4, 0x3C, 0x76, 0xC3, 0x10, 0x01, 0x95, 0x15, 0xFC, 0xC1,
-      0x40, 0x46, 0x7C, 0x33, 0x37, 0x0C, 0x86, 0x80, 0x8E, 0xCA, 0xA5, 0x8E,
-      0x3B, 0xA9, 0x3A, 0x2C, 0x11, 0x90, 0x46, 0x1C, 0x1D, 0xFA, 0x11, 0x30,
-      0x20, 0x01, 0xBB, 0xAB, 0x4C, 0xB1, 0xE3, 0x64, 0x2E, 0xF8, 0xCB, 0x26,
-      0x30, 0x9B, 0x60, 0x52, 0x3B, 0xC2, 0x18, 0x87, 0xB0, 0x7F, 0x89, 0x8C,
-      0xE5, 0x62, 0xA6, 0xCA, 0x77, 0x8E, 0xA0, 0x15, 0x05, 0x85, 0x13, 0x78,
-      0xCE, 0xA8, 0xBB, 0x7F, 0xC0, 0x9D, 0x11, 0x96, 0x1B, 0x6C, 0x59, 0x6F,
-      0x93, 0x54, 0x2A, 0x99, 0x04, 0x86, 0x4E, 0xB1, 0x0C, 0xD0, 0xA7, 0x03,
-      0xDB, 0xA9, 0x89, 0x21, 0x86, 0x1A, 0x87, 0xB0, 0x56, 0x52, 0x5C, 0x71,
-      0xA8, 0x43, 0x55, 0x3E, 0x64, 0x00, 0x77, 0x74, 0x37, 0xC9, 0x5C, 0xCC,
-      0x80, 0x85, 0xCC, 0x0C, 0x47, 0x7D, 0x66, 0x5A, 0x44, 0x79, 0x01, 0x9D,
-      0x4C, 0xD4, 0x42, 0xF7, 0x4A, 0x3C, 0xD8, 0x16, 0x9F, 0x42, 0x62, 0xB8,
-      0x27, 0x1B, 0x5D, 0x5A, 0x67, 0xC8, 0xC1, 0x61, 0x1A, 0xAE, 0x7B, 0x3D,
-      0x05, 0x34, 0xC0, 0x85, 0x97, 0x16, 0xFD, 0xF0, 0xBB, 0x68, 0x94, 0x90,
-      0x94, 0xC0, 0x6A, 0x1B, 0x73, 0xC9, 0xAA, 0x1C, 0xBD, 0xF3, 0x31, 0x54,
-      0x3D, 0xE0, 0x02, 0xA8, 0xC0, 0x6F, 0x94, 0xE8, 0x81, 0x0A, 0x5C, 0xB3,
-      0x73, 0x83, 0x27, 0x45, 0xD7, 0x20, 0x68, 0x3B, 0x57, 0x48, 0x75, 0xA6,
-      0x66, 0x94, 0x6D, 0x02, 0x96, 0x89, 0x3F, 0x2B, 0x59, 0xE9, 0x07, 0x48,
-      0x8D, 0x8C, 0x84, 0x89, 0xD4, 0x74, 0xD9, 0x29, 0xA0, 0x5A, 0x57, 0x3E,
-      0xD6, 0x67, 0x49, 0x03, 0x71, 0xA4, 0x6D, 0x45, 0x56, 0xCB, 0xB6, 0x8A,
-      0xAA, 0x79, 0xCC, 0x3E, 0xC6, 0x65, 0x34, 0x13, 0x57, 0x6C, 0x22, 0x8E,
-      0x37, 0x9A, 0x14, 0xCB, 0x90, 0xB7, 0xB7, 0x59, 0x1B, 0x19, 0xA7, 0xBD,
-      0x37, 0xA1, 0xC4, 0xD3, 0x78, 0x59, 0x89, 0x22, 0x19, 0x44, 0x2B, 0xB0,
-      0xB9, 0xB9, 0xBA, 0x67, 0xBA, 0x3B, 0xC0, 0xD0, 0x95, 0xC8, 0x80, 0x3C,
-      0xEB, 0xE9, 0x7A, 0xFF, 0x0B, 0x1C, 0x15, 0x35, 0x78, 0xA1, 0x30, 0xCD,
-      0x81, 0x57, 0xCF, 0x74, 0x59, 0x46, 0xC2, 0xF5, 0x72, 0x6D, 0x9C, 0x11,
-      0x27, 0x35, 0x75, 0x50, 0x52, 0x91, 0x34, 0x65, 0x28, 0xEE, 0x0B, 0xAC,
-      0x04, 0x7C, 0xC9, 0x84, 0x53, 0x8B, 0x97, 0xBB, 0xAB, 0xFC, 0xC3, 0x57,
-      0xDC, 0xB8, 0xA9, 0x8F, 0xB8, 0x57, 0xC9, 0xC5, 0x2D, 0x1B, 0x78, 0x67,
-      0x49, 0xCA, 0x61, 0x89, 0x2B, 0x09, 0x75, 0x99, 0x80, 0x52, 0x00, 0x91,
-      0xB9, 0xB4, 0x77, 0xC7, 0x0E, 0x6C, 0x46, 0x58, 0x6B, 0x1C, 0xCE, 0xBE,
-      0x87, 0xBC, 0xF6, 0xDF, 0x03, 0xC2, 0xB2, 0x7C, 0xB0, 0x9F, 0xA0, 0x3F,
-      0x63, 0x16, 0x09, 0x58, 0x38, 0x3B, 0xE6, 0x36,
-    },
-
-    .exp_dk = {
-      0x37, 0xEC, 0x47, 0x7E, 0x21, 0x7B, 0xFB, 0x40, 0x38, 0x4C, 0x85, 0x0E,
-      0x51, 0xC1, 0x83, 0x71, 0x58, 0xBD, 0xBC, 0x23, 0xA3, 0x18, 0x32, 0xBC,
-      0x25, 0xC9, 0x1B, 0x31, 0x21, 0x44, 0x4A, 0xD4, 0x53, 0x37, 0x33, 0xBA,
-      0xFF, 0x07, 0xCA, 0x81, 0x7B, 0x64, 0xB2, 0xCA, 0x42, 0x99, 0xAA, 0x26,
-      0x45, 0x4C, 0xBA, 0xFB, 0x35, 0xB6, 0xAB, 0xE1, 0x18, 0x5C, 0xB4, 0x7C,
-      0x4C, 0xD6, 0x1A, 0xF9, 0x83, 0x83, 0xC4, 0x81, 0x4B, 0x20, 0xAB, 0x87,
-      0x54, 0xFC, 0x51, 0x4F, 0x23, 0x07, 0x41, 0x14, 0xC3, 0xE5, 0xA8, 0x10,
-      0xA4, 0x53, 0xB8, 0x55, 0xAA, 0x7F, 0x13, 0x10, 0xC7, 0x4B, 0x0B, 0x01,
-      0xE5, 0xAA, 0xB2, 0xE8, 0x71, 0x73, 0x8F, 0xAC, 0x27, 0x86, 0xC7, 0xA0,
-      0x5D, 0x6B, 0x3B, 0x32, 0xA0, 0x50, 0xD0, 0xFB, 0x22, 0x39, 0x56, 0xC9,
-      0x5C, 0xA0, 0xC2, 0xC1, 0xD5, 0x41, 0x54, 0xA7, 0x7B, 0xD3, 0x37, 0x37,
-      0xA4, 0x9A, 0x00, 0x65, 0xD1, 0x42, 0x4A, 0x2A, 0xBA, 0xFD, 0x52, 0xAA,
-      0x93, 0x4C, 0x98, 0x04, 0x93, 0x92, 0x08, 0xF0, 0x5C, 0xCF, 0x8B, 0x8B,
-      0x80, 0x86, 0x31, 0x6E, 0x09, 0x43, 0xA0, 0x87, 0x10, 0x50, 0x0C, 0x91,
-      0x8A, 0x2B, 0x21, 0x8D, 0x37, 0xB8, 0x5A, 0xE2, 0x80, 0x22, 0xCB, 0x01,
-      0x34, 0xFB, 0x49, 0xF5, 0xC4, 0x5D, 0x98, 0xD3, 0xC0, 0x4B, 0x75, 0x5A,
-      0x60, 0x88, 0x04, 0x22, 0x66, 0x8E, 0x2B, 0x30, 0x1B, 0x18, 0xD5, 0x19,
-      0x4D, 0xE9, 0x91, 0xB2, 0x65, 0xBF, 0x94, 0x69, 0x7E, 0x6A, 0x4B, 0x81,
-      0x50, 0xC8, 0xB8, 0x52, 0x03, 0x39, 0x15, 0x63, 0x5E, 0x30, 0x66, 0x5B,
-      0xDA, 0x21, 0x91, 0xDA, 0xA5, 0x05, 0xD4, 0x33, 0x44, 0xFD, 0x29, 0xC9,
-      0xFC, 0xC1, 0xC5, 0x07, 0x69, 0x1D, 0x47, 0x5B, 0x61, 0x7C, 0x94, 0x8F,
-      0xCC, 0x84, 0xB1, 0xB0, 0x8A, 0x1C, 0x63, 0x8C, 0x3E, 0x13, 0x58, 0x0C,
-      0xE3, 0x59, 0x78, 0x9A, 0x98, 0x60, 0xE5, 0x46, 0x9C, 0xC7, 0x54, 0xB0,
-      0x8E, 0xE3, 0x3F, 0x09, 0x21, 0xBD, 0xEF, 0x15, 0xA9, 0x06, 0x96, 0x9F,
-      0x2D, 0xC5, 0x7A, 0x25, 0xE8, 0x0C, 0xE4, 0xC4, 0x5F, 0x11, 0xE0, 0x4A,
-      0x51, 0x9A, 0xB0, 0x8B, 0x9B, 0x92, 0x7C, 0x3A, 0x13, 0xA0, 0x81, 0xCF,
-      0xFA, 0x11, 0x0F, 0xAC, 0xCC, 0x5E, 0x8D, 0xC2, 0x94, 0x95, 0x97, 0x8B,
-      0x55, 0x53, 0x10, 0x4D, 0x47, 0x3A, 0x17, 0x59, 0x18, 0xAD, 0x5B, 0x54,
-      0x87, 0xBB, 0xA6, 0x97, 0x12, 0xAE, 0x93, 0xF6, 0x15, 0xC6, 0x0A, 0x8D,
-      0x38, 0x7B, 0xCE, 0x3F, 0x65, 0x1E, 0x56, 0x88, 0x0A, 0x52, 0x2B, 0x2D,
-      0xB8, 0x63, 0x51, 0xCA, 0xB6, 0x5D, 0x13, 0xB4, 0x69, 0x3D, 0xB0, 0xB2,
-      0xC8, 0x09, 0x36, 0xFA, 0xD1, 0xCE, 0x67, 0x92, 0x5E, 0x6B, 0xB7, 0xC1,
-      0x10, 0xC4, 0x3E, 0x83, 0x24, 0x7D, 0x22, 0x60, 0x8D, 0x8C, 0x10, 0x23,
-      0x43, 0x1C, 0xB6, 0x92, 0x90, 0xA4, 0xF8, 0xA9, 0x59, 0x3B, 0xF1, 0x24,
-      0x1D, 0x73, 0x7C, 0x0C, 0xD1, 0x6D, 0x75, 0xEB, 0x50, 0xC6, 0x84, 0x2C,
-      0xE0, 0xA2, 0x1D, 0xCE, 0x49, 0x40, 0x36, 0x82, 0x4C, 0xE6, 0x32, 0x52,
-      0xE9, 0x32, 0x5F, 0x05, 0xB7, 0x34, 0x45, 0x2B, 0x12, 0x91, 0x32, 0xB1,
-      0x96, 0x08, 0x4A, 0x37, 0x88, 0xBB, 0xB1, 0xF2, 0x0A, 0x37, 0xD2, 0xC2,
-      0xB3, 0xF9, 0x0E, 0x0D, 0xD7, 0xA2, 0x74, 0xC9, 0xB1, 0xA9, 0xF0, 0x2E,
-      0xC7, 0xE7, 0x21, 0xF4, 0xA4, 0x3D, 0x40, 0x9A, 0x25, 0xFB, 0xC9, 0x9A,
-      0x44, 0xD4, 0x76, 0x31, 0x07, 0xC7, 0x87, 0x62, 0x09, 0x41, 0x76, 0x1E,
-      0xD4, 0x8C, 0x93, 0x29, 0x24, 0xBA, 0x62, 0x09, 0x86, 0xCF, 0x27, 0x7A,
-      0x23, 0x47, 0x1C, 0x7B, 0x13, 0x33, 0x3D, 0x93, 0x6C, 0x0D, 0xD4, 0x9E,
-      0x0F, 0xF3, 0x4C, 0xA3, 0xAB, 0x82, 0x34, 0xC4, 0x2A, 0xEB, 0xE4, 0x59,
-      0xC6, 0x12, 0x05, 0x2B, 0x97, 0x16, 0xE9, 0x6B, 0x20, 0xBE, 0xC7, 0x18,
-      0x12, 0x60, 0x40, 0xA9, 0x09, 0x1F, 0x6B, 0xA9, 0x44, 0x5F, 0x45, 0x80,
-      0x6A, 0xEB, 0x6E, 0x38, 0x16, 0x71, 0x0F, 0x7C, 0xBF, 0xED, 0x11, 0x01,
-      0x46, 0x12, 0x84, 0xDD, 0x96, 0x2B, 0x7B, 0x12, 0x04, 0x7C, 0x0A, 0x0A,
-      0x90, 0x6A, 0x05, 0x89, 0xB4, 0xA9, 0xA4, 0x26, 0x46, 0x9B, 0xDA, 0x39,
-      0x46, 0x09, 0x1A, 0x37, 0x5B, 0x19, 0x52, 0xA9, 0x1C, 0x23, 0x1C, 0x0F,
-      0xE6, 0xB5, 0x7F, 0x7C, 0xC9, 0x7E, 0xFE, 0xD0, 0xBC, 0x10, 0x01, 0x36,
-      0x78, 0x23, 0xBE, 0x18, 0x86, 0x30, 0x8B, 0x3A, 0x21, 0x45, 0x2B, 0x7E,
-      0x45, 0x50, 0x66, 0x71, 0x9C, 0xCC, 0xEA, 0xF6, 0xA7, 0x26, 0xFC, 0x22,
-      0xBC, 0x83, 0x99, 0xF5, 0x4B, 0xBF, 0xCA, 0xF7, 0xCA, 0x63, 0xBA, 0x73,
-      0x17, 0x3C, 0x7A, 0xA8, 0x61, 0x9A, 0x3F, 0x48, 0x5C, 0x3E, 0x33, 0x04,
-      0x21, 0x00, 0x67, 0x66, 0x74, 0x6F, 0x4E, 0xF6, 0x65, 0x3E, 0x44, 0x0E,
-      0x5C, 0xDC, 0x59, 0x53, 0x40, 0x18, 0xC3, 0x52, 0xC0, 0x23, 0x58, 0x4C,
-      0xBB, 0x37, 0x4E, 0xB7, 0xA9, 0xB7, 0x83, 0x68, 0x32, 0xBE, 0x53, 0xAF,
-      0x27, 0x2A, 0x06, 0x97, 0x55, 0xCE, 0x2F, 0xF2, 0x9C, 0xD8, 0xB3, 0x94,
-      0xC5, 0x24, 0x22, 0xB3, 0x47, 0x0E, 0x27, 0x41, 0x5F, 0x41, 0xB3, 0x97,
-      0x53, 0x59, 0x59, 0xF1, 0x60, 0x00, 0x3B, 0x45, 0x2C, 0xF4, 0x96, 0x97,
-      0xB7, 0xA5, 0x36, 0x89, 0x85, 0x2B, 0xBE, 0x6C, 0xCF, 0xDF, 0xB4, 0x0B,
-      0x48, 0xE9, 0x32, 0x8D, 0xE1, 0x15, 0x22, 0xD0, 0xA4, 0x31, 0xB1, 0x15,
-      0xA5, 0xC0, 0xC2, 0xF4, 0x30, 0x7D, 0x98, 0x62, 0xC0, 0xDD, 0x1B, 0x40,
-      0xC6, 0x5A, 0x1D, 0x9D, 0x47, 0x97, 0x77, 0xE6, 0x90, 0x5A, 0x91, 0xA5,
-      0xCB, 0x24, 0x55, 0x1C, 0x8B, 0x1E, 0x52, 0xA3, 0xC7, 0x7B, 0x63, 0x31,
-      0x3F, 0xFC, 0x8B, 0x58, 0x17, 0x81, 0x52, 0x59, 0xA6, 0xAD, 0xB5, 0x96,
-      0x45, 0xDC, 0x4B, 0xB1, 0x43, 0x6D, 0x51, 0xE6, 0x2A, 0x09, 0x68, 0x34,
-      0xAF, 0x43, 0x77, 0x25, 0x10, 0xC4, 0xED, 0xF3, 0x4C, 0xDE, 0x0A, 0x5B,
-      0x57, 0xC1, 0x45, 0xE6, 0x87, 0xCB, 0x87, 0x16, 0x2F, 0x00, 0x1C, 0x21,
-      0xC9, 0xE1, 0x93, 0x4A, 0xC1, 0x1A, 0xAF, 0xA7, 0x0F, 0xF8, 0x10, 0x73,
-      0x26, 0x50, 0xB3, 0x2A, 0x30, 0x18, 0xA7, 0xC5, 0x0C, 0xD7, 0x36, 0x79,
-      0x62, 0x22, 0xC8, 0xAB, 0x82, 0x1A, 0x92, 0x83, 0xBE, 0x1C, 0xC2, 0x04,
-      0xC3, 0xF1, 0x63, 0x0D, 0x3C, 0xCC, 0xDB, 0x0A, 0x9A, 0x3D, 0x17, 0x55,
-      0x2B, 0x91, 0x58, 0xC0, 0x66, 0x4E, 0x5D, 0x6A, 0x04, 0xB0, 0xFA, 0x36,
-      0xDE, 0x45, 0x86, 0x2A, 0x46, 0xA3, 0x9E, 0xC5, 0x97, 0xAE, 0x42, 0xC3,
-      0x11, 0xC4, 0xAC, 0x22, 0x4A, 0x72, 0xD6, 0xF2, 0x53, 0xBB, 0x52, 0x35,
-      0xF7, 0xA2, 0xB8, 0xB0, 0xF2, 0x4D, 0x13, 0x76, 0xAF, 0x58, 0x87, 0x46,
-      0xF3, 0xBB, 0x8E, 0x03, 0x65, 0x07, 0x87, 0x61, 0xCA, 0xB9, 0x83, 0xA4,
-      0xA6, 0xA9, 0x40, 0xA3, 0xD9, 0x97, 0x04, 0x7A, 0x8F, 0x36, 0xA7, 0x31,
-      0xE8, 0x96, 0x52, 0x36, 0xC3, 0x7B, 0xF2, 0x00, 0x08, 0x2F, 0x82, 0x1D,
-      0xCA, 0x77, 0x16, 0xC4, 0x44, 0xA9, 0x0B, 0xEC, 0x53, 0x07, 0x4B, 0xBA,
-      0x58, 0xC1, 0x32, 0xBF, 0xB9, 0xA2, 0xAC, 0xE2, 0xCE, 0xC9, 0xAA, 0x65,
-      0x8E, 0xAC, 0x12, 0x32, 0xCC, 0xCA, 0x3C, 0x81, 0x7A, 0x92, 0xC1, 0x19,
-      0x5C, 0x05, 0xC0, 0xE1, 0xD6, 0x63, 0x9F, 0xD2, 0xAD, 0xE5, 0x31, 0x60,
-      0x7D, 0x48, 0x8B, 0x74, 0xA7, 0x47, 0xCF, 0xF4, 0x7F, 0xCA, 0x5C, 0x8B,
-      0x21, 0x63, 0xCA, 0x03, 0xC5, 0x45, 0xED, 0x10, 0x32, 0x78, 0x43, 0x0C,
-      0x60, 0xB2, 0x38, 0x1A, 0x09, 0x42, 0x7F, 0xD1, 0x30, 0xF8, 0x59, 0xBF,
-      0x5D, 0xB7, 0x76, 0xDA, 0x09, 0x5D, 0xCA, 0x58, 0x04, 0xFA, 0x63, 0xB0,
-      0xD7, 0xD8, 0x7F, 0xA9, 0x41, 0x5C, 0x72, 0xFB, 0x51, 0x87, 0x2A, 0x98,
-      0x9F, 0x46, 0x6C, 0x98, 0x4B, 0xC7, 0x4C, 0x29, 0xB8, 0x63, 0x20, 0x19,
-      0xCA, 0x04, 0x0C, 0x9C, 0xA3, 0x5E, 0x22, 0x60, 0x8D, 0xAA, 0x70, 0x35,
-      0x7A, 0xE2, 0xC3, 0xAD, 0x83, 0x63, 0x1F, 0xAA, 0x17, 0x4E, 0x0A, 0xCD,
-      0xF5, 0xDB, 0xBF, 0x3C, 0xF6, 0x8A, 0x05, 0xB6, 0x54, 0x3A, 0xB6, 0x26,
-      0x8E, 0x1A, 0x51, 0xB0, 0x93, 0x2C, 0x17, 0xB0, 0x0A, 0x13, 0x71, 0xB2,
-      0xDA, 0xB2, 0x41, 0xF9, 0x2A, 0x43, 0xFF, 0xB4, 0x56, 0xD0, 0xA8, 0xC8,
-      0x86, 0x0A, 0x8E, 0x28, 0xA6, 0x1A, 0x21, 0x30, 0x7C, 0xC0, 0x45, 0x6D,
-      0xA4, 0x24, 0x29, 0x05, 0xCB, 0x1D, 0x3D, 0x0B, 0xBD, 0x81, 0xBB, 0x8E,
-      0xE2, 0x74, 0xA4, 0x3C, 0x76, 0xC3, 0x10, 0x01, 0x95, 0x15, 0xFC, 0xC1,
-      0x40, 0x46, 0x7C, 0x33, 0x37, 0x0C, 0x86, 0x80, 0x8E, 0xCA, 0xA5, 0x8E,
-      0x3B, 0xA9, 0x3A, 0x2C, 0x11, 0x90, 0x46, 0x1C, 0x1D, 0xFA, 0x11, 0x30,
-      0x20, 0x01, 0xBB, 0xAB, 0x4C, 0xB1, 0xE3, 0x64, 0x2E, 0xF8, 0xCB, 0x26,
-      0x30, 0x9B, 0x60, 0x52, 0x3B, 0xC2, 0x18, 0x87, 0xB0, 0x7F, 0x89, 0x8C,
-      0xE5, 0x62, 0xA6, 0xCA, 0x77, 0x8E, 0xA0, 0x15, 0x05, 0x85, 0x13, 0x78,
-      0xCE, 0xA8, 0xBB, 0x7F, 0xC0, 0x9D, 0x11, 0x96, 0x1B, 0x6C, 0x59, 0x6F,
-      0x93, 0x54, 0x2A, 0x99, 0x04, 0x86, 0x4E, 0xB1, 0x0C, 0xD0, 0xA7, 0x03,
-      0xDB, 0xA9, 0x89, 0x21, 0x86, 0x1A, 0x87, 0xB0, 0x56, 0x52, 0x5C, 0x71,
-      0xA8, 0x43, 0x55, 0x3E, 0x64, 0x00, 0x77, 0x74, 0x37, 0xC9, 0x5C, 0xCC,
-      0x80, 0x85, 0xCC, 0x0C, 0x47, 0x7D, 0x66, 0x5A, 0x44, 0x79, 0x01, 0x9D,
-      0x4C, 0xD4, 0x42, 0xF7, 0x4A, 0x3C, 0xD8, 0x16, 0x9F, 0x42, 0x62, 0xB8,
-      0x27, 0x1B, 0x5D, 0x5A, 0x67, 0xC8, 0xC1, 0x61, 0x1A, 0xAE, 0x7B, 0x3D,
-      0x05, 0x34, 0xC0, 0x85, 0x97, 0x16, 0xFD, 0xF0, 0xBB, 0x68, 0x94, 0x90,
-      0x94, 0xC0, 0x6A, 0x1B, 0x73, 0xC9, 0xAA, 0x1C, 0xBD, 0xF3, 0x31, 0x54,
-      0x3D, 0xE0, 0x02, 0xA8, 0xC0, 0x6F, 0x94, 0xE8, 0x81, 0x0A, 0x5C, 0xB3,
-      0x73, 0x83, 0x27, 0x45, 0xD7, 0x20, 0x68, 0x3B, 0x57, 0x48, 0x75, 0xA6,
-      0x66, 0x94, 0x6D, 0x02, 0x96, 0x89, 0x3F, 0x2B, 0x59, 0xE9, 0x07, 0x48,
-      0x8D, 0x8C, 0x84, 0x89, 0xD4, 0x74, 0xD9, 0x29, 0xA0, 0x5A, 0x57, 0x3E,
-      0xD6, 0x67, 0x49, 0x03, 0x71, 0xA4, 0x6D, 0x45, 0x56, 0xCB, 0xB6, 0x8A,
-      0xAA, 0x79, 0xCC, 0x3E, 0xC6, 0x65, 0x34, 0x13, 0x57, 0x6C, 0x22, 0x8E,
-      0x37, 0x9A, 0x14, 0xCB, 0x90, 0xB7, 0xB7, 0x59, 0x1B, 0x19, 0xA7, 0xBD,
-      0x37, 0xA1, 0xC4, 0xD3, 0x78, 0x59, 0x89, 0x22, 0x19, 0x44, 0x2B, 0xB0,
-      0xB9, 0xB9, 0xBA, 0x67, 0xBA, 0x3B, 0xC0, 0xD0, 0x95, 0xC8, 0x80, 0x3C,
-      0xEB, 0xE9, 0x7A, 0xFF, 0x0B, 0x1C, 0x15, 0x35, 0x78, 0xA1, 0x30, 0xCD,
-      0x81, 0x57, 0xCF, 0x74, 0x59, 0x46, 0xC2, 0xF5, 0x72, 0x6D, 0x9C, 0x11,
-      0x27, 0x35, 0x75, 0x50, 0x52, 0x91, 0x34, 0x65, 0x28, 0xEE, 0x0B, 0xAC,
-      0x04, 0x7C, 0xC9, 0x84, 0x53, 0x8B, 0x97, 0xBB, 0xAB, 0xFC, 0xC3, 0x57,
-      0xDC, 0xB8, 0xA9, 0x8F, 0xB8, 0x57, 0xC9, 0xC5, 0x2D, 0x1B, 0x78, 0x67,
-      0x49, 0xCA, 0x61, 0x89, 0x2B, 0x09, 0x75, 0x99, 0x80, 0x52, 0x00, 0x91,
-      0xB9, 0xB4, 0x77, 0xC7, 0x0E, 0x6C, 0x46, 0x58, 0x6B, 0x1C, 0xCE, 0xBE,
-      0x87, 0xBC, 0xF6, 0xDF, 0x03, 0xC2, 0xB2, 0x7C, 0xB0, 0x9F, 0xA0, 0x3F,
-      0x63, 0x16, 0x09, 0x58, 0x38, 0x3B, 0xE6, 0x36, 0xC0, 0xEC, 0xC8, 0xDD,
-      0xAE, 0x8B, 0x59, 0x4A, 0x14, 0x03, 0x78, 0x68, 0xBE, 0xC0, 0xB2, 0x23,
-      0x00, 0xDE, 0xFD, 0xFA, 0xA1, 0xD9, 0x73, 0xAC, 0x5C, 0xEC, 0x84, 0xAE,
-      0x43, 0x86, 0xB8, 0xFB, 0xCD, 0x11, 0x9A, 0xFD, 0xC8, 0x55, 0x94, 0x42,
-      0x42, 0x4A, 0x87, 0xC1, 0x3E, 0xA1, 0x01, 0xE2, 0x9F, 0xCA, 0x11, 0x88,
-      0x18, 0x69, 0x07, 0x7E, 0x40, 0x92, 0xE7, 0x51, 0xBE, 0xDC, 0xA8, 0xBC,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // generate pke512 ek and dk from seed
-    uint8_t got_ek[PKE512_EK_SIZE] = { 0 },
-            got_dk[FIPS203IPD_KEM512_DK_SIZE] = { 0 };
-    fips203ipd_kem512_keygen(got_ek, got_dk, TESTS[i].seed);
-
-    // check for expected ek
-    if (memcmp(&got_ek, &(TESTS[i].exp_ek), sizeof(got_ek))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ek", TESTS[i].name);
-      fail_test(__func__, name, got_ek, sizeof(got_ek), TESTS[i].exp_ek, sizeof(got_ek));
-    }
-
-    // check for expected dk
-    if (memcmp(&got_dk, &(TESTS[i].exp_dk), sizeof(got_dk))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - dk", TESTS[i].name);
-      fail_test(__func__, name, got_dk, sizeof(got_dk), TESTS[i].exp_dk, sizeof(got_dk));
-    }
-  }
-}
-
-static void test_fips203ipd_kem512_encaps(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t ek[FIPS203IPD_KEM512_EK_SIZE]; // test encapsulation key (800 bytes)
-    const uint8_t seed[32]; // test randomness (32 bytes)
-    const uint8_t exp_k[32]; // expected shared key (32 bytes)
-    const uint8_t exp_ct[FIPS203IPD_KEM512_CT_SIZE]; // expected ciphertext (768 bytes)
-  } TESTS[] = {{
-    .name = "seed = 0",
-    .ek = {
-      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
-      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
-      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
-      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
-      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
-      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
-      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
-      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
-      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
-      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
-      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
-      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
-      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
-      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
-      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
-      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
-      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
-      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
-      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
-      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
-      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
-      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
-      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
-      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
-      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
-      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
-      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
-      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
-      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
-      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
-      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
-      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
-      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
-      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
-      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
-      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
-      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
-      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
-      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
-      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
-      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
-      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
-      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
-      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
-      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
-      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
-      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
-      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
-      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
-      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
-      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
-      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
-      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
-      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
-      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
-      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
-      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
-      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
-      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
-      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
-      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
-      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
-      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
-      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-    },
-    .seed = { 0 },
-
-    .exp_k = {
-      0xf3, 0x23, 0xa8, 0x77, 0x93, 0x95, 0xf0, 0xce, 0x4d, 0x25, 0xc2, 0x97,
-      0x97, 0x76, 0x90, 0x44, 0xa7, 0x82, 0x84, 0xcd, 0x2e, 0xbf, 0xb9, 0xce,
-      0xd8, 0x16, 0xd2, 0xd0, 0x1c, 0xeb, 0xe0, 0x24,
-    },
-
-    .exp_ct = {
-      0x32, 0xeb, 0x87, 0xe6, 0x95, 0x7a, 0x2c, 0x34, 0xd6, 0x3d, 0xde, 0x00,
-      0xa5, 0xc1, 0x96, 0xbf, 0x78, 0xf1, 0xc9, 0xa7, 0xfc, 0x74, 0xb0, 0xbd,
-      0xaa, 0xb4, 0xb5, 0x23, 0xa6, 0xad, 0xf7, 0x1d, 0xcf, 0xe6, 0x4d, 0x34,
-      0xef, 0xfe, 0x25, 0xd0, 0x81, 0x3c, 0xa1, 0x72, 0x51, 0x62, 0xa6, 0x99,
-      0x06, 0x2e, 0x07, 0x4b, 0x34, 0x03, 0x62, 0xfd, 0x1b, 0x63, 0x99, 0x11,
-      0xa2, 0x97, 0xd4, 0x91, 0x22, 0x27, 0x31, 0xf7, 0x2e, 0x6b, 0xd0, 0xe0,
-      0x28, 0x11, 0xdc, 0x13, 0x53, 0xac, 0xf2, 0x36, 0x39, 0x5f, 0x40, 0x03,
-      0xd8, 0xb3, 0x37, 0x18, 0xab, 0x9e, 0x3f, 0xa5, 0x84, 0x04, 0xae, 0x4c,
-      0x0e, 0x66, 0x4a, 0x27, 0x5f, 0x46, 0x8f, 0x94, 0x59, 0x91, 0x5a, 0xe3,
-      0x5e, 0xab, 0xc4, 0xcf, 0x5d, 0x5c, 0x32, 0xf0, 0x4b, 0x90, 0x73, 0x28,
-      0xd8, 0x6e, 0x1e, 0xaf, 0x08, 0x9f, 0xc5, 0x8e, 0xe6, 0x66, 0x6e, 0x77,
-      0xae, 0xfd, 0x07, 0x3f, 0xa4, 0x92, 0xaa, 0xce, 0x66, 0x7e, 0xe7, 0x38,
-      0x8d, 0xc3, 0xd2, 0x1c, 0xeb, 0x45, 0xf8, 0x63, 0x04, 0x93, 0x0f, 0x2e,
-      0x0d, 0xee, 0x37, 0x56, 0x8e, 0xb3, 0x8d, 0x3b, 0xe8, 0x01, 0x0b, 0x75,
-      0xb3, 0xbd, 0x2f, 0x01, 0x97, 0x82, 0xf2, 0x9c, 0xd9, 0x4e, 0xe9, 0xb4,
-      0xec, 0xd4, 0x73, 0xa1, 0x14, 0xca, 0x40, 0x81, 0xa2, 0xbd, 0x18, 0xed,
-      0x26, 0xb2, 0x56, 0x1d, 0xcb, 0xe9, 0xc1, 0x76, 0x08, 0x4b, 0xd1, 0x36,
-      0x3d, 0x82, 0x7e, 0x88, 0x67, 0xa4, 0xc3, 0xc1, 0xb3, 0xe5, 0x06, 0x63,
-      0xb3, 0x4e, 0xf3, 0xa2, 0x74, 0xde, 0xfd, 0x10, 0xda, 0xbc, 0x00, 0x74,
-      0x4b, 0x45, 0x9e, 0x0b, 0x1a, 0xe2, 0x60, 0x4c, 0xc4, 0x3a, 0xe9, 0xa0,
-      0xe9, 0x9c, 0xe2, 0xba, 0x6d, 0xe7, 0x31, 0x0f, 0x2c, 0x8c, 0xf1, 0xbf,
-      0xab, 0xe8, 0x29, 0x7f, 0xb8, 0x9a, 0xd0, 0x50, 0x7d, 0x0d, 0x87, 0xa4,
-      0xa0, 0xb2, 0x69, 0x69, 0xcf, 0x8e, 0xb5, 0xbd, 0xa2, 0x88, 0xb3, 0xe3,
-      0x54, 0xc1, 0xe6, 0x7c, 0x62, 0x59, 0x38, 0x1b, 0xcf, 0x58, 0x45, 0x74,
-      0xe6, 0x3b, 0x2e, 0x61, 0x50, 0x50, 0xf9, 0x1a, 0x9e, 0xf5, 0xde, 0x79,
-      0x17, 0x66, 0x8c, 0x49, 0x97, 0x8d, 0xe6, 0xf7, 0x17, 0x39, 0xe9, 0x9f,
-      0xa3, 0x95, 0xa9, 0x5d, 0x89, 0xa5, 0x3e, 0x97, 0xa3, 0xa0, 0xb0, 0x04,
-      0x06, 0x1f, 0xb3, 0x36, 0xbb, 0x12, 0xa0, 0xac, 0x72, 0xfe, 0x9d, 0xa0,
-      0x3e, 0x41, 0x89, 0x78, 0x2d, 0x3c, 0x9f, 0x2f, 0x2a, 0x1e, 0xb3, 0x48,
-      0x16, 0xa0, 0x9a, 0xc0, 0x3d, 0x33, 0x34, 0x85, 0x5b, 0x87, 0x4d, 0xaa,
-      0x82, 0xc4, 0xd7, 0xd1, 0x9b, 0xdb, 0x3d, 0x39, 0x23, 0x95, 0xf2, 0x60,
-      0x58, 0x5d, 0xd2, 0x9e, 0x6b, 0x6f, 0x15, 0xe0, 0xdf, 0xd6, 0x24, 0x27,
-      0xf9, 0xd2, 0x8a, 0x2e, 0xc5, 0x3c, 0x67, 0x74, 0x8b, 0xee, 0x52, 0xdc,
-      0xf1, 0xce, 0x2b, 0x7f, 0x79, 0x42, 0x8d, 0x9a, 0x62, 0x7c, 0xe7, 0x30,
-      0xb9, 0xfc, 0x98, 0xac, 0xee, 0x67, 0x4a, 0x4e, 0xa9, 0x5d, 0x36, 0x38,
-      0x67, 0x63, 0x56, 0xff, 0xc2, 0x0b, 0xc1, 0xa2, 0x0b, 0xc8, 0xb2, 0xec,
-      0x74, 0xd9, 0x8e, 0xce, 0xcc, 0x43, 0x4b, 0x93, 0x68, 0x02, 0x8f, 0xb0,
-      0x4a, 0x58, 0x64, 0xf6, 0x68, 0x43, 0xb9, 0x55, 0x47, 0x9b, 0x34, 0xa9,
-      0x53, 0x6c, 0xee, 0x08, 0x6b, 0x6e, 0x7f, 0xd2, 0xea, 0x2c, 0x83, 0x69,
-      0xf7, 0x0a, 0x0b, 0x70, 0x23, 0x28, 0x5d, 0xa0, 0x79, 0xf2, 0x33, 0xe7,
-      0x95, 0x76, 0xac, 0x53, 0x2d, 0xe5, 0x2f, 0x44, 0xe1, 0x0b, 0x3b, 0x8d,
-      0x0d, 0x36, 0xb1, 0x01, 0xc4, 0x73, 0x32, 0x75, 0xd6, 0xbc, 0x00, 0xc4,
-      0x0f, 0xe9, 0xfc, 0x57, 0x7e, 0x9d, 0xea, 0xd8, 0xdf, 0x0e, 0x97, 0xf7,
-      0xfa, 0xd1, 0x2b, 0x4c, 0x79, 0x69, 0x66, 0xb8, 0x56, 0x14, 0xea, 0xae,
-      0xda, 0xdc, 0xd2, 0xaa, 0xb0, 0x2b, 0xf9, 0x8e, 0xc9, 0x63, 0x3e, 0x63,
-      0x49, 0xef, 0xfe, 0x2a, 0xb8, 0x66, 0x03, 0x76, 0x36, 0x7a, 0xe7, 0xef,
-      0x14, 0x28, 0x50, 0x41, 0x7d, 0xe1, 0x5d, 0x80, 0x9e, 0x1a, 0x1b, 0x30,
-      0x11, 0xe9, 0x12, 0x8e, 0x67, 0x49, 0xcb, 0xc9, 0xd5, 0xe5, 0xa0, 0xce,
-      0x0e, 0xd1, 0x9c, 0x24, 0x82, 0x8f, 0x00, 0xf2, 0x46, 0xe0, 0x8b, 0xb9,
-      0x27, 0xa7, 0xf4, 0x7d, 0xbe, 0x30, 0x0f, 0x82, 0x70, 0xd5, 0x93, 0xe1,
-      0xe6, 0x3a, 0x95, 0xed, 0x6f, 0xda, 0x1f, 0x55, 0x5e, 0xe8, 0x70, 0x81,
-      0x86, 0x1c, 0xde, 0xf7, 0xae, 0x6c, 0x8f, 0x98, 0x5c, 0x5f, 0xe1, 0x31,
-      0x80, 0x8c, 0x32, 0xbd, 0x07, 0x63, 0x9f, 0xb6, 0xb4, 0x8f, 0x92, 0xc9,
-      0x05, 0xdd, 0x7a, 0xdb, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
-      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
-      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
-      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
-      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
-      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
-      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
-      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
-      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
-      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
-      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
-    },
-  }, {
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Encapsulation -- ML-KEM-512",
-    .ek = {
-      0xA5, 0x40, 0x97, 0x18, 0xCB, 0x72, 0xF2, 0x43, 0x8A, 0x35, 0x55, 0xA3,
-      0xC8, 0xF1, 0x8F, 0x26, 0x71, 0xA1, 0xF8, 0x14, 0x03, 0xDF, 0x7B, 0x5A,
-      0x46, 0x59, 0xA5, 0x1F, 0x50, 0x82, 0x7B, 0xA6, 0x57, 0x7A, 0xA7, 0x08,
-      0x00, 0xD7, 0x8D, 0x8B, 0xC5, 0xAA, 0x86, 0xB8, 0x9E, 0x08, 0xB5, 0x8F,
-      0x34, 0x80, 0xA8, 0x9E, 0x10, 0x4D, 0xC6, 0x92, 0x2E, 0xDB, 0xC1, 0x2D,
-      0x06, 0xF8, 0x91, 0x02, 0x7C, 0x65, 0x4E, 0x99, 0x4A, 0x22, 0xF9, 0x1A,
-      0x2A, 0xF6, 0x34, 0x04, 0xCA, 0x98, 0xD7, 0xB6, 0x7E, 0xEA, 0x25, 0x91,
-      0x1B, 0x24, 0xC7, 0x0D, 0xEB, 0x81, 0x46, 0xA0, 0x82, 0x1F, 0x34, 0xA3,
-      0x02, 0x55, 0x1F, 0x2D, 0x51, 0x0C, 0x05, 0x88, 0xC8, 0xBC, 0xA7, 0x4E,
-      0xB4, 0xDC, 0x0C, 0xFA, 0x46, 0x03, 0xC1, 0xC5, 0xA3, 0xC5, 0x53, 0x70,
-      0x61, 0x78, 0x90, 0x68, 0x68, 0x2C, 0x4C, 0xC3, 0x14, 0x3F, 0xBA, 0x9B,
-      0xB5, 0x54, 0x2F, 0x97, 0x78, 0xBD, 0xF2, 0x3B, 0x36, 0x52, 0xF2, 0xA7,
-      0x52, 0x47, 0x56, 0xFA, 0x73, 0x90, 0x9D, 0xDA, 0xC7, 0xE5, 0x32, 0x52,
-      0x26, 0x59, 0x21, 0x8C, 0xBA, 0x25, 0xF3, 0x3B, 0x6B, 0x04, 0x58, 0xCB,
-      0x03, 0xDA, 0x79, 0x35, 0xBA, 0x59, 0x11, 0x19, 0x55, 0x31, 0x2B, 0x15,
-      0xCC, 0xE2, 0xC0, 0xF7, 0x34, 0x66, 0xA8, 0x00, 0x62, 0x83, 0xA2, 0xAA,
-      0x7C, 0xBB, 0x61, 0x02, 0x2A, 0xBB, 0xC2, 0xD1, 0x9F, 0x29, 0x20, 0xBC,
-      0x30, 0x24, 0x72, 0xDC, 0x97, 0xC4, 0xA1, 0x78, 0x8C, 0x9B, 0xD3, 0xBB,
-      0xED, 0xC9, 0x12, 0x2B, 0x82, 0x7B, 0x27, 0x9C, 0x07, 0x4C, 0x80, 0x44,
-      0x31, 0x41, 0x11, 0x9F, 0x4B, 0x16, 0x29, 0xF6, 0x2F, 0x10, 0xD4, 0xCE,
-      0x2B, 0xE3, 0xBB, 0x34, 0x38, 0x16, 0xCA, 0xD1, 0x6A, 0x1C, 0x87, 0x58,
-      0x2F, 0x2B, 0x70, 0xE2, 0x66, 0x35, 0xB0, 0x8B, 0xB3, 0x90, 0xC1, 0x33,
-      0x98, 0xFC, 0xCD, 0xA7, 0xE9, 0xBB, 0x3D, 0x9B, 0x0B, 0x78, 0x03, 0x75,
-      0x0C, 0x95, 0x5C, 0x57, 0xA0, 0x28, 0xA5, 0xD2, 0x6C, 0x27, 0x03, 0x16,
-      0xBB, 0x2B, 0x81, 0x5C, 0x3B, 0x97, 0x2B, 0xA6, 0x78, 0x2D, 0xAB, 0x02,
-      0xF3, 0x06, 0x82, 0x1E, 0x61, 0x28, 0x5B, 0xB0, 0x72, 0xBF, 0x79, 0x78,
-      0x1C, 0xAB, 0xC3, 0x86, 0x14, 0x2A, 0x50, 0xC7, 0xAA, 0xAE, 0x66, 0xA9,
-      0x47, 0x58, 0x5B, 0xB0, 0xD8, 0x28, 0x8D, 0xBC, 0xAF, 0x4B, 0x3B, 0x85,
-      0xBB, 0x79, 0x26, 0x98, 0x7B, 0xAF, 0x76, 0x43, 0xAA, 0xB5, 0xFB, 0x02,
-      0x21, 0x05, 0x80, 0xA0, 0x26, 0x43, 0x52, 0xE6, 0x9C, 0x60, 0x98, 0x98,
-      0x9C, 0xFB, 0x87, 0x48, 0x33, 0x95, 0x96, 0x0A, 0x3A, 0x4F, 0x31, 0xBE,
-      0xFD, 0xA8, 0x0B, 0x5F, 0x28, 0x6E, 0xCF, 0xDA, 0xA5, 0x55, 0xD4, 0x39,
-      0x0A, 0xF6, 0xB5, 0x5D, 0x31, 0x39, 0x20, 0x92, 0x90, 0x93, 0x44, 0x9C,
-      0xD6, 0x72, 0x9D, 0x00, 0x21, 0x8E, 0x2D, 0x86, 0x57, 0x0A, 0xDC, 0x0C,
-      0x4F, 0x65, 0x45, 0xFF, 0xB5, 0x63, 0x2E, 0xFB, 0x3A, 0xAE, 0x26, 0x25,
-      0xA6, 0x98, 0x26, 0x70, 0xFA, 0xCE, 0x8D, 0x16, 0x12, 0x6F, 0xA6, 0x07,
-      0xE6, 0xD0, 0xA1, 0xFF, 0x61, 0x6A, 0x46, 0xEC, 0xA6, 0x42, 0xCC, 0x6A,
-      0xAC, 0x55, 0x4D, 0xBB, 0xC4, 0x3D, 0xFC, 0xF5, 0x7F, 0x36, 0x4C, 0x19,
-      0x0C, 0xEA, 0x57, 0x76, 0xC1, 0xCE, 0xB5, 0x8B, 0x70, 0x07, 0x50, 0x5F,
-      0xD7, 0x9C, 0x5F, 0x00, 0x5A, 0x4B, 0xA2, 0x18, 0xCF, 0x06, 0x93, 0xB0,
-      0x58, 0xB5, 0x10, 0xA4, 0xCA, 0x20, 0x43, 0x24, 0x60, 0x2F, 0x59, 0xBB,
-      0x8F, 0x22, 0x81, 0xC4, 0xD7, 0xB0, 0xBC, 0x86, 0x25, 0xE7, 0x88, 0x16,
-      0x50, 0xF5, 0x7C, 0x89, 0xE3, 0x2C, 0xF4, 0x80, 0x91, 0x44, 0x77, 0x5C,
-      0x90, 0x73, 0xB6, 0x73, 0xE3, 0x94, 0x12, 0xA2, 0x7C, 0x91, 0x43, 0x21,
-      0xCC, 0xB6, 0xA7, 0xCF, 0x7C, 0x37, 0xC5, 0xBC, 0xBE, 0x7C, 0xA5, 0x1B,
-      0xE0, 0xC9, 0x28, 0x46, 0x6A, 0x45, 0x8E, 0xB7, 0x78, 0xD6, 0x46, 0x6A,
-      0x89, 0x2A, 0x0A, 0xCB, 0xC0, 0x96, 0x38, 0x78, 0x4A, 0x27, 0x73, 0x9C,
-      0x97, 0x0C, 0xA5, 0x8B, 0xC2, 0x59, 0x5A, 0xD6, 0xBF, 0xA4, 0xE5, 0x2E,
-      0xB4, 0x38, 0xAC, 0x97, 0xC4, 0x16, 0x23, 0x80, 0x22, 0x48, 0xE1, 0x10,
-      0xB0, 0x74, 0x83, 0x8F, 0x31, 0xA6, 0xE7, 0x50, 0x37, 0x37, 0x70, 0x4E,
-      0x7A, 0xE4, 0xAD, 0x91, 0x29, 0x95, 0x72, 0xA8, 0xC1, 0x36, 0x03, 0x50,
-      0x0F, 0x36, 0x09, 0xB6, 0x25, 0xB4, 0xE2, 0x4C, 0xAE, 0x33, 0x2B, 0x0D,
-      0x7A, 0x5B, 0xB4, 0x7A, 0x03, 0x85, 0x12, 0xA0, 0x81, 0xBC, 0x27, 0xCD,
-      0xF0, 0xF2, 0x92, 0x3C, 0xD3, 0x47, 0x9F, 0x53, 0x07, 0x02, 0x0B, 0x77,
-      0xF1, 0x49, 0x58, 0x45, 0x64, 0x06, 0x0E, 0x50, 0x83, 0xCE, 0xD5, 0x53,
-      0x12, 0xB6, 0xA6, 0xA4, 0x65, 0xA8, 0x2B, 0x45, 0x77, 0xD6, 0x3A, 0x4B,
-      0x49, 0xC8, 0x0B, 0x07, 0xA9, 0x36, 0x7E, 0x39, 0x77, 0x8A, 0xF7, 0x6F,
-      0xA8, 0xEC, 0x2C, 0xF5, 0x28, 0x72, 0x28, 0x56, 0xCE, 0x78, 0x13, 0x40,
-      0x1A, 0x83, 0x83, 0xBD, 0xB7, 0x15, 0x1B, 0x9B, 0x6D, 0x2D, 0xD6, 0xBF,
-      0xF5, 0x54, 0x01, 0xD2, 0x8A, 0xC6, 0x12, 0x81, 0x8C, 0x88, 0xC9, 0x28,
-      0x73, 0x47, 0xB0, 0x98, 0xA9, 0x66, 0xEB, 0x9C, 0x0A, 0x2D, 0xB7, 0x1F,
-      0x0A, 0x75, 0x55, 0x5E, 0x17, 0x57, 0xD3, 0xAC, 0x4E, 0x3D, 0x80, 0x2C,
-      0x8D, 0xC6, 0xA2, 0x61, 0x52, 0x12, 0x55, 0x18, 0x6A, 0xBB, 0x98, 0xC2,
-      0x48, 0x03, 0x01, 0xB8, 0xC6, 0xB3, 0x12, 0x28, 0xB5, 0x44, 0x61, 0xBC,
-      0x44, 0xEA, 0x3C, 0x2C, 0xF9, 0x4B, 0x86, 0xC7, 0xA5, 0xB8, 0x2C, 0x55,
-      0x16, 0x7A, 0x76, 0x06, 0xCA, 0x9D, 0xC8, 0x25, 0x3B, 0x76, 0x04, 0xE4,
-      0x4A, 0x07, 0xF3, 0xED, 0x55, 0xCD, 0x5B, 0x5E,
-    },
-
-    .seed = {
-      // m
-      0x10, 0x9A, 0x24, 0x8F, 0xE8, 0x05, 0x2F, 0x84, 0x27, 0x1F, 0xF5, 0x7B,
-      0xAC, 0x15, 0x6B, 0x1B, 0xA6, 0xA5, 0x09, 0xCD, 0xCD, 0xBC, 0xC9, 0x6C,
-      0xCD, 0xB1, 0xCC, 0xB8, 0x5C, 0xA4, 0x93, 0x15,
-    },
-
-    .exp_k = {
-      0x4D, 0xDD, 0x30, 0x4E, 0x27, 0x48, 0x99, 0xBD, 0x82, 0x97, 0x18, 0x56,
-      0x82, 0x4B, 0x58, 0x71, 0x30, 0x92, 0x79, 0x52, 0x06, 0x01, 0x21, 0x85,
-      0x8F, 0x9A, 0xDE, 0xB9, 0x6A, 0xB7, 0xF5, 0x71,
-    },
-
-    .exp_ct = {
-      0x59, 0x7A, 0x06, 0xDE, 0xB8, 0x81, 0x72, 0xBA, 0x8D, 0x7C, 0xDE, 0x8D,
-      0x82, 0xCA, 0xA2, 0x34, 0xB8, 0x11, 0x2A, 0xF8, 0xA7, 0x2F, 0x1A, 0xB4,
-      0xCE, 0xA1, 0xEF, 0xCB, 0x2D, 0x86, 0x8D, 0x53, 0xD2, 0x12, 0xE3, 0x03,
-      0xB7, 0x0E, 0x7E, 0x52, 0x1A, 0xB0, 0xF4, 0xB5, 0xDB, 0x4F, 0x51, 0x15,
-      0x92, 0x48, 0xBF, 0xB2, 0x75, 0x36, 0x1B, 0xEF, 0x88, 0x37, 0x52, 0xC7,
-      0x8B, 0x8D, 0x47, 0x12, 0x27, 0x53, 0x85, 0x53, 0x6A, 0x4B, 0x0A, 0x96,
-      0xE3, 0xC2, 0x3E, 0xA6, 0xC1, 0x7E, 0xA9, 0x2B, 0x60, 0x26, 0x16, 0xE5,
-      0x82, 0x1E, 0x57, 0x53, 0xA4, 0x73, 0x6C, 0x40, 0x39, 0xC2, 0x0C, 0x92,
-      0x3C, 0xCE, 0xCB, 0x57, 0x98, 0x05, 0x58, 0x7C, 0x0C, 0xE7, 0x22, 0x18,
-      0xBB, 0x1A, 0xB1, 0x24, 0x52, 0xF8, 0xE1, 0x54, 0xCB, 0x86, 0x43, 0x32,
-      0x81, 0x42, 0xF9, 0xB3, 0x40, 0xA6, 0x41, 0xC6, 0xF2, 0x95, 0xE5, 0xEC,
-      0xF2, 0xE0, 0x48, 0xBC, 0x7F, 0xC7, 0x9B, 0xC5, 0xB9, 0x42, 0x77, 0xC8,
-      0x68, 0xD8, 0xE5, 0x36, 0xB5, 0x04, 0x25, 0x80, 0x9D, 0xCF, 0xA0, 0x24,
-      0xA3, 0x90, 0x5C, 0xBA, 0x55, 0x0A, 0xD3, 0xBB, 0x52, 0xB4, 0x59, 0xAC,
-      0x38, 0xFA, 0xBC, 0x9B, 0xC0, 0x0E, 0xBA, 0x03, 0xEC, 0x09, 0x06, 0x72,
-      0x5B, 0x4F, 0xE4, 0xE9, 0x76, 0xF1, 0x74, 0x32, 0x00, 0x47, 0xB3, 0x1D,
-      0x15, 0x89, 0x13, 0x65, 0xBA, 0x48, 0x23, 0x88, 0xF0, 0xFB, 0x97, 0x3B,
-      0x85, 0x22, 0x4F, 0xB0, 0x0B, 0xA8, 0x65, 0xAF, 0xAB, 0x3C, 0x9A, 0x1B,
-      0x7D, 0x48, 0x9F, 0x7B, 0x98, 0x2D, 0x0B, 0xD4, 0x70, 0xEF, 0x94, 0x8E,
-      0xCB, 0x5B, 0x39, 0x20, 0xAF, 0x89, 0x03, 0x59, 0x60, 0x12, 0x3B, 0x1F,
-      0x86, 0x30, 0xD7, 0x63, 0x68, 0x1B, 0xFD, 0x67, 0x15, 0x67, 0xEF, 0xBB,
-      0x1E, 0x62, 0x76, 0xAA, 0x4F, 0xB2, 0xDF, 0xA9, 0xC3, 0x94, 0x8D, 0xB7,
-      0xF0, 0x83, 0xF2, 0x83, 0x83, 0xB7, 0x7B, 0xC5, 0x14, 0xAF, 0x9D, 0x68,
-      0xD2, 0x2E, 0x24, 0x87, 0xC2, 0x01, 0x63, 0xC0, 0x2B, 0x0B, 0xBF, 0x23,
-      0xBB, 0xCE, 0x06, 0x50, 0xF8, 0x4F, 0xF8, 0xCE, 0x02, 0xC7, 0x4E, 0x9E,
-      0x11, 0xD6, 0xF3, 0x0E, 0xC5, 0xFA, 0x8A, 0x01, 0x2A, 0xDC, 0x3B, 0x89,
-      0x62, 0x7C, 0x7D, 0xE8, 0x55, 0xC1, 0xFB, 0xBE, 0xB5, 0xDC, 0xDE, 0x84,
-      0xD0, 0x5E, 0x36, 0xC5, 0x56, 0x6E, 0x55, 0x51, 0xB5, 0x87, 0x50, 0xA4,
-      0x11, 0x64, 0x26, 0x39, 0xB2, 0x78, 0x64, 0xF7, 0xE0, 0x05, 0x97, 0x8F,
-      0xFE, 0x25, 0x6B, 0x75, 0x7D, 0x13, 0xDA, 0x66, 0x3F, 0xC3, 0xBB, 0x07,
-      0x94, 0xA2, 0x7C, 0xF7, 0x58, 0x5D, 0x12, 0xF2, 0x2D, 0x95, 0x3B, 0x28,
-      0x54, 0x59, 0xFD, 0xC9, 0xBC, 0xDF, 0xCD, 0xCC, 0xB7, 0xBF, 0x3E, 0x4E,
-      0x36, 0x2D, 0x28, 0x91, 0xD5, 0x83, 0x85, 0x5F, 0x5D, 0x94, 0x87, 0xE6,
-      0xFB, 0x21, 0x7E, 0x2E, 0x45, 0xEE, 0x0B, 0xD9, 0xAF, 0xC2, 0x89, 0xF4,
-      0xD5, 0x64, 0x58, 0x12, 0x09, 0xA3, 0xAC, 0xA3, 0x17, 0x95, 0xA1, 0x24,
-      0xBD, 0x1B, 0xBA, 0xEA, 0x84, 0x67, 0x55, 0xC8, 0xEA, 0x78, 0x10, 0xEA,
-      0xA7, 0x30, 0x60, 0xE8, 0x6F, 0xB5, 0xFD, 0xF3, 0xFB, 0xE7, 0x2F, 0x80,
-      0x6B, 0xB1, 0xBF, 0xBF, 0xBA, 0xC0, 0xC7, 0xB1, 0x6B, 0xFE, 0x74, 0x25,
-      0x02, 0x77, 0xEC, 0xF5, 0xF5, 0x41, 0x57, 0x1B, 0x8A, 0x97, 0x50, 0x50,
-      0x91, 0x7F, 0xDF, 0x78, 0x1F, 0xEA, 0x17, 0xB5, 0x85, 0xE3, 0xC6, 0xDB,
-      0xFE, 0x77, 0xB1, 0xE4, 0x8A, 0x16, 0x50, 0x4C, 0x3A, 0x38, 0x90, 0x11,
-      0x56, 0x10, 0x0C, 0xAF, 0xEC, 0x2E, 0xD9, 0x39, 0xAE, 0x9A, 0x9E, 0xDF,
-      0xC9, 0xC0, 0xF8, 0xC7, 0xF5, 0x5C, 0xC9, 0x3E, 0x5D, 0xDD, 0x0B, 0x3D,
-      0xE1, 0xC6, 0xED, 0xAE, 0x2B, 0x7E, 0xE3, 0x4C, 0x61, 0x01, 0xF0, 0x11,
-      0xB5, 0x90, 0x4F, 0x69, 0x3D, 0x28, 0x63, 0x56, 0xB5, 0x4C, 0x86, 0xCE,
-      0x8B, 0xCF, 0xEA, 0x9D, 0xBF, 0xEC, 0x21, 0xC1, 0xEF, 0x0E, 0xCC, 0x91,
-      0x05, 0x00, 0x5B, 0xAA, 0x37, 0x7D, 0x82, 0x9D, 0xCA, 0x2C, 0xBF, 0x5E,
-      0xA5, 0xF3, 0x1B, 0x71, 0xD4, 0x46, 0xB8, 0x33, 0xE0, 0x06, 0x19, 0x81,
-      0x9D, 0x7F, 0xC6, 0x02, 0x40, 0x52, 0x49, 0x97, 0x57, 0xA2, 0x76, 0x5F,
-      0x19, 0xCD, 0x2B, 0x36, 0xC2, 0x48, 0x85, 0x99, 0xDC, 0x52, 0x47, 0x49,
-      0x4F, 0xAB, 0xE8, 0x1E, 0xEB, 0xEF, 0xD3, 0xBE, 0x75, 0xC4, 0x78, 0x0E,
-      0x43, 0xA5, 0x04, 0x18, 0xC5, 0xDB, 0x2F, 0xF3, 0x59, 0xC5, 0xA6, 0xDE,
-      0x28, 0x6E, 0xF5, 0x95, 0x1E, 0x27, 0x09, 0x48, 0x6E, 0xDC, 0x9C, 0xC4,
-      0x9D, 0x07, 0x24, 0xEC, 0xA3, 0xF2, 0xC0, 0xB7, 0x5F, 0x8A, 0x36, 0xCE,
-      0x86, 0x23, 0x88, 0xF0, 0x0B, 0x3C, 0x59, 0x3D, 0x1C, 0x8C, 0x6A, 0xC4,
-      0x5D, 0x73, 0xA7, 0x2F, 0xF6, 0xB4, 0xF8, 0x05, 0xB1, 0x31, 0xED, 0x4E,
-      0xAF, 0x56, 0x01, 0xD7, 0xB7, 0x3B, 0x0E, 0x37, 0x24, 0xE7, 0x5D, 0x58,
-      0xDD, 0x50, 0xF5, 0x87, 0x1C, 0x54, 0xA3, 0x7C, 0x14, 0x81, 0x33, 0x17,
-      0x59, 0xF4, 0xBE, 0x86, 0xFB, 0x58, 0xA2, 0xEE, 0x00, 0x31, 0x30, 0xF6,
-      0x6E, 0x18, 0x7C, 0x8B, 0xA5, 0x01, 0x5B, 0xE7, 0x13, 0x29, 0x65, 0x89,
-      0xAC, 0xAF, 0xBF, 0x65, 0x96, 0x89, 0x7E, 0x03, 0xD4, 0x92, 0x0C, 0x91,
-      0xF2, 0x63, 0x33, 0xB7, 0xBF, 0x17, 0x98, 0xAF, 0x81, 0x5C, 0x93, 0xD4,
-      0xDF, 0x55, 0xBD, 0x47, 0xA0, 0x82, 0x49, 0xBF, 0x11, 0x30, 0x63, 0xFB,
-      0xB3, 0x95, 0x03, 0xE9, 0xB6, 0xD4, 0x3E, 0xAC, 0x7B, 0x0C, 0x30, 0x5A,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // Generate shared key `got_k` and ciphertext `got_ct` for test
-    // encapsulation key `ek` and randomness `seed`.
-    uint8_t got_k[32] = { 0 }, got_ct[FIPS203IPD_KEM512_CT_SIZE] = { 0 };
-    fips203ipd_kem512_encaps(got_k, got_ct, TESTS[i].ek, TESTS[i].seed);
-
-    // check for expected shared key
-    if (memcmp(got_k, TESTS[i].exp_k, sizeof(got_k))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - k", TESTS[i].name);
-      fail_test(__func__, name, got_k, sizeof(got_k), TESTS[i].exp_k, sizeof(got_k));
-    }
-
-    // check for expected ciphertext
-    if (memcmp(got_ct, TESTS[i].exp_ct, sizeof(got_ct))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ct", TESTS[i].name);
-      fail_test(__func__, name, got_ct, sizeof(got_ct), TESTS[i].exp_ct, sizeof(got_ct));
-    }
-  }
-}
-
-static void test_fips203ipd_kem512_decaps(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t ct[FIPS203IPD_KEM512_CT_SIZE]; // test ciphertext (768 bytes)
-    const uint8_t dk[FIPS203IPD_KEM512_DK_SIZE]; // test decapsulation key (1632 bytes)
-    const uint8_t exp[32]; // expected message (32 bytes)
-  } TESTS[] = {{
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Decapsulation -- ML-KEM-512",
-
-    .ct = {
-      0x84, 0xA1, 0x88, 0xA0, 0x72, 0xE4, 0xD4, 0xF4, 0x49, 0xA4, 0xBE, 0x17,
-      0x02, 0x74, 0xDD, 0x2A, 0x5F, 0x3E, 0x35, 0x6E, 0x95, 0xB9, 0x6E, 0x40,
-      0xAD, 0x3F, 0xF1, 0x45, 0x5E, 0x36, 0xC6, 0xA7, 0x1E, 0x90, 0x9D, 0xD2,
-      0xC0, 0xDF, 0xF8, 0xAD, 0x2C, 0x9F, 0x50, 0x3B, 0xAC, 0x90, 0x65, 0x71,
-      0x62, 0x48, 0x08, 0x3B, 0xDA, 0x40, 0xCE, 0xCB, 0x38, 0xE3, 0xB3, 0x05,
-      0x8B, 0xAF, 0x51, 0xA7, 0x57, 0x23, 0x84, 0xFF, 0x84, 0x06, 0xA8, 0x13,
-      0x6A, 0x4F, 0xC6, 0xD9, 0x12, 0xA5, 0x4B, 0x2E, 0xB5, 0xB9, 0xD5, 0x98,
-      0xFB, 0x68, 0x9E, 0x72, 0xED, 0x3D, 0xEF, 0xD2, 0xFF, 0x83, 0x55, 0xED,
-      0x9E, 0x9C, 0xCA, 0x53, 0xE8, 0x2C, 0x08, 0x86, 0xE0, 0x94, 0xC5, 0x92,
-      0xC3, 0x92, 0x31, 0x1F, 0x04, 0xFE, 0xC6, 0x8F, 0x9A, 0x1C, 0x53, 0x1C,
-      0xF3, 0x41, 0x90, 0x30, 0x89, 0x2B, 0x5B, 0xDC, 0xAC, 0xEE, 0xF6, 0xA0,
-      0xE7, 0xF1, 0xBD, 0x44, 0x90, 0x3F, 0x49, 0xDE, 0x8E, 0x37, 0xB0, 0x2B,
-      0xA3, 0xFC, 0x51, 0x21, 0xD9, 0x9F, 0x8C, 0xC3, 0x04, 0x0F, 0x66, 0x83,
-      0x2F, 0x77, 0x02, 0x1B, 0x4C, 0xA3, 0x5F, 0x7A, 0x48, 0x25, 0x03, 0x89,
-      0x36, 0x56, 0x4C, 0xA2, 0xE6, 0x73, 0xFF, 0x9C, 0xC0, 0x51, 0x9C, 0x25,
-      0xF6, 0xA5, 0x2D, 0x87, 0xED, 0xD9, 0x65, 0xB2, 0x46, 0x4A, 0xA3, 0x65,
-      0xD2, 0xBF, 0x06, 0x8B, 0x72, 0xFC, 0x68, 0xB6, 0x5E, 0x88, 0x51, 0x5E,
-      0x2C, 0x83, 0x2B, 0xBD, 0xB2, 0x7D, 0x61, 0xBF, 0x51, 0x2B, 0x5F, 0xC2,
-      0xD8, 0x59, 0x0F, 0xB3, 0x5F, 0x49, 0x50, 0x0C, 0xAF, 0xE7, 0x0E, 0x7D,
-      0x07, 0x76, 0xB5, 0xC4, 0xE4, 0x50, 0x3A, 0x71, 0x89, 0xAD, 0xBA, 0xFF,
-      0x5D, 0x5B, 0x51, 0x5C, 0xC6, 0x8B, 0x2F, 0x81, 0xD9, 0x93, 0xC6, 0xD7,
-      0xFA, 0x7D, 0x3D, 0x1D, 0x90, 0xEB, 0xFF, 0x51, 0xDA, 0x3F, 0xBB, 0xB4,
-      0x43, 0x0E, 0x5B, 0xBE, 0xDB, 0xCA, 0x8D, 0xA0, 0x78, 0xDC, 0xE8, 0xEC,
-      0x81, 0x5B, 0x16, 0x8B, 0xFC, 0x09, 0xAB, 0x4A, 0x20, 0x67, 0x88, 0x70,
-      0xF4, 0x86, 0x8B, 0x1F, 0xAE, 0x28, 0xD2, 0x09, 0xC7, 0x53, 0x68, 0xA7,
-      0x99, 0x31, 0x7D, 0xFA, 0x08, 0xC2, 0xB6, 0x51, 0xFA, 0xC7, 0x2D, 0xCA,
-      0x2A, 0x1B, 0x4C, 0xBB, 0x75, 0xE8, 0x73, 0xF1, 0x5C, 0x51, 0xB6, 0xD0,
-      0xB5, 0xE6, 0xF5, 0xE6, 0x0E, 0x2A, 0xF6, 0xC4, 0x0D, 0x2C, 0xAB, 0xCB,
-      0xF3, 0x58, 0x8F, 0x44, 0xBC, 0xEA, 0x6D, 0x72, 0xD3, 0x59, 0xF4, 0x0F,
-      0x9C, 0xF5, 0xE0, 0xEC, 0x40, 0xA5, 0x21, 0x5E, 0x5A, 0xCE, 0xEA, 0xF0,
-      0xDA, 0x00, 0xD9, 0x23, 0xD4, 0xCE, 0xFF, 0x5C, 0x3A, 0x3A, 0xB1, 0xE4,
-      0x6C, 0x75, 0x4F, 0x4A, 0xE0, 0x52, 0xC2, 0xBC, 0x49, 0xFD, 0xB4, 0x52,
-      0x1A, 0xE4, 0x4D, 0xF6, 0x34, 0xD5, 0x6E, 0x43, 0x3D, 0xAD, 0x3D, 0xF3,
-      0xC0, 0x71, 0x15, 0x40, 0x6F, 0xF8, 0xBF, 0xD0, 0xD7, 0xC9, 0x3B, 0x49,
-      0x41, 0xD0, 0xF0, 0x92, 0x13, 0xC1, 0x68, 0x1C, 0xFD, 0x5C, 0x86, 0x63,
-      0xDF, 0x02, 0x04, 0x1A, 0x3C, 0xBD, 0x16, 0x2F, 0x5C, 0x4D, 0x80, 0xCB,
-      0x1D, 0xC7, 0xD4, 0xA5, 0x01, 0xAD, 0x06, 0xFE, 0x96, 0xEB, 0x34, 0x8B,
-      0x6E, 0x33, 0x1C, 0x82, 0x96, 0xFE, 0x90, 0x4E, 0xB9, 0x7C, 0x08, 0x74,
-      0x56, 0x32, 0x8D, 0x70, 0x3B, 0x85, 0xBD, 0xAC, 0x2F, 0xB4, 0x3C, 0x72,
-      0x8D, 0x0B, 0x05, 0xFC, 0x54, 0xB8, 0xC1, 0x55, 0xC0, 0x10, 0xEF, 0x0D,
-      0xB1, 0x4C, 0xC6, 0x68, 0xD1, 0xB1, 0xBC, 0x72, 0x7A, 0xF8, 0x86, 0x40,
-      0x76, 0x73, 0x6B, 0x89, 0x8B, 0xAB, 0xA1, 0xC8, 0x1D, 0xCA, 0x20, 0x53,
-      0xF5, 0x85, 0x87, 0xD3, 0xC4, 0xE3, 0x3C, 0x69, 0x4A, 0x26, 0x4B, 0xE2,
-      0x89, 0x7E, 0x7D, 0x2E, 0xEF, 0xAD, 0xDA, 0x9F, 0xF8, 0x8D, 0x70, 0xBF,
-      0x37, 0x31, 0xF1, 0x22, 0x8C, 0xB3, 0xE1, 0x31, 0xEB, 0x0C, 0xB7, 0x6F,
-      0xDB, 0xD2, 0xCC, 0xB1, 0xCB, 0xC1, 0x8D, 0x14, 0x50, 0xAC, 0x7A, 0x16,
-      0x34, 0x9E, 0x71, 0x29, 0xCA, 0xB7, 0x20, 0xD5, 0xCB, 0x70, 0xB5, 0x6E,
-      0x85, 0x5E, 0x83, 0x05, 0xDC, 0xDA, 0x73, 0x0B, 0xBD, 0x0E, 0xA3, 0x3E,
-      0xF0, 0x81, 0x5D, 0x02, 0x19, 0x0B, 0xB9, 0x8E, 0x30, 0xF7, 0x3B, 0xF7,
-      0x78, 0x9C, 0xDD, 0x67, 0x3C, 0x61, 0x3B, 0x0C, 0x57, 0xCB, 0x2E, 0xF3,
-      0x2E, 0x67, 0x0A, 0x98, 0xD2, 0xD6, 0x30, 0x67, 0x07, 0x73, 0xC5, 0x9D,
-      0x8A, 0x6A, 0x2C, 0xFC, 0xFF, 0x1C, 0x7C, 0xA1, 0xBB, 0x55, 0xC1, 0x7A,
-      0x32, 0xCB, 0x65, 0xA2, 0xEA, 0x19, 0xC7, 0xB8, 0xE2, 0x95, 0xC6, 0x89,
-      0x8C, 0xF3, 0x2F, 0xEE, 0x1D, 0xEB, 0x01, 0x47, 0x2B, 0xE7, 0x6C, 0x3A,
-      0x78, 0xCB, 0x24, 0x2E, 0xDF, 0xE2, 0x1D, 0x96, 0x1F, 0xCB, 0x85, 0xC3,
-      0xCF, 0x6C, 0xEE, 0x21, 0x89, 0x86, 0xC1, 0xBD, 0x93, 0x2B, 0xF9, 0x7B,
-      0xC6, 0xDE, 0xCA, 0xAB, 0xF8, 0xC6, 0x29, 0x40, 0xC0, 0xA5, 0x8E, 0x87,
-      0xC6, 0xED, 0xDC, 0xD7, 0x4B, 0x7F, 0x71, 0x5D, 0x8C, 0x22, 0x52, 0x05,
-      0x46, 0x23, 0x9F, 0x3A, 0xAA, 0x10, 0xA4, 0x35, 0x82, 0x01, 0x03, 0xB4,
-      0xE3, 0x29, 0x53, 0x11, 0xD9, 0x92, 0xC9, 0xC8, 0x77, 0x1A, 0x3C, 0xE8,
-      0x49, 0x86, 0x8F, 0x36, 0xF3, 0x12, 0x14, 0xF9, 0x63, 0x9C, 0x02, 0x8F,
-      0x4A, 0x5F, 0x49, 0x45, 0xF2, 0xBE, 0xC9, 0x58, 0x50, 0x77, 0xBF, 0x2F,
-      0x63, 0x7D, 0x25, 0x49, 0xF8, 0x34, 0x8C, 0x00, 0xEC, 0xBF, 0x19, 0xC4,
-      0x70, 0xDF, 0x25, 0x5E, 0xFF, 0x62, 0x32, 0x81, 0x34, 0x29, 0xF8, 0x53,
-    },
-
-    .dk = {
-      0x17, 0x43, 0x13, 0xEF, 0xA9, 0x35, 0x20, 0xE2, 0x8A, 0x70, 0x76, 0xC8,
-      0x88, 0x09, 0x6E, 0x02, 0xB0, 0xBD, 0xD8, 0x68, 0x30, 0x49, 0x7B, 0x61,
-      0xFD, 0xEA, 0xB6, 0x20, 0x9C, 0x6C, 0xF7, 0x1C, 0x62, 0x5C, 0x46, 0x80,
-      0x77, 0x5C, 0x34, 0x77, 0x58, 0x1C, 0x42, 0x7A, 0x6F, 0xE1, 0xB0, 0x35,
-      0x6E, 0xAB, 0x04, 0x8B, 0xCA, 0x43, 0x4F, 0x83, 0xB5, 0x42, 0xC8, 0xB8,
-      0x60, 0x01, 0x06, 0x96, 0xA5, 0x72, 0x99, 0xBB, 0x26, 0x22, 0x68, 0x89,
-      0x1F, 0xFC, 0x72, 0x14, 0x2C, 0xA1, 0xA8, 0x66, 0x18, 0x5C, 0xA8, 0x2D,
-      0x05, 0x40, 0x66, 0x95, 0xBA, 0x57, 0xD4, 0xC9, 0x30, 0xF9, 0xC1, 0x7D,
-      0x62, 0x23, 0x52, 0x3C, 0xF5, 0xA4, 0xF2, 0xA4, 0x33, 0xA3, 0x64, 0x45,
-      0x9A, 0xC0, 0xAC, 0xDE, 0x72, 0x54, 0x48, 0x13, 0x29, 0x28, 0x8B, 0x1B,
-      0xE1, 0x87, 0xCC, 0x25, 0x21, 0x9F, 0x48, 0xC2, 0x44, 0x3C, 0x53, 0x21,
-      0x99, 0x85, 0x93, 0x55, 0x32, 0x0D, 0x04, 0xF0, 0xB8, 0x0D, 0xE9, 0x69,
-      0xF1, 0x69, 0xA3, 0xD2, 0xBA, 0x34, 0x11, 0xB4, 0xAD, 0xBC, 0x01, 0xB6,
-      0x62, 0x71, 0x82, 0x4C, 0xD9, 0x54, 0x3C, 0x78, 0xBA, 0x48, 0x04, 0xAE,
-      0x81, 0xF3, 0xAF, 0x00, 0x33, 0x6C, 0x5C, 0xC3, 0x69, 0x83, 0x54, 0xC0,
-      0xE0, 0x18, 0x73, 0xA2, 0xA1, 0x7D, 0x6A, 0x95, 0xA3, 0x12, 0x68, 0x9A,
-      0x99, 0xDC, 0x89, 0x08, 0x41, 0x50, 0xA8, 0xD5, 0x2B, 0xB3, 0x1C, 0x3F,
-      0xF3, 0xD4, 0x21, 0x5F, 0xA3, 0xC4, 0x11, 0x1B, 0x40, 0x19, 0x92, 0x86,
-      0x6E, 0x51, 0x3E, 0x51, 0x28, 0xA2, 0x0E, 0xD9, 0x5F, 0xDE, 0xE6, 0x14,
-      0x85, 0xDC, 0x93, 0x7E, 0x09, 0x9D, 0x76, 0xF7, 0x9B, 0x92, 0x73, 0x4D,
-      0xC4, 0xCB, 0xB9, 0xA7, 0xA4, 0x13, 0xFE, 0xA6, 0x28, 0x5B, 0xC0, 0xC2,
-      0x7C, 0x96, 0x1E, 0x47, 0xD1, 0x98, 0x36, 0x44, 0xC4, 0xBF, 0x91, 0x3D,
-      0x72, 0xF4, 0xB0, 0x30, 0xD3, 0x47, 0x38, 0x42, 0x72, 0x63, 0xE8, 0x7A,
-      0xB4, 0xC0, 0xB7, 0xDF, 0x0B, 0x72, 0xCA, 0x8A, 0xA0, 0xBA, 0xA6, 0x7B,
-      0x07, 0x99, 0x39, 0xD5, 0x87, 0x80, 0x1D, 0x60, 0xC8, 0x7A, 0x20, 0x40,
-      0x5E, 0x5C, 0x52, 0x60, 0x3C, 0x07, 0x2F, 0xDB, 0x63, 0xE2, 0xE1, 0xC2,
-      0xA9, 0x5C, 0xC2, 0x6F, 0x5A, 0xBE, 0xF6, 0x08, 0x83, 0x33, 0x80, 0x08,
-      0x86, 0xD0, 0x93, 0xCA, 0x01, 0xA7, 0x6F, 0x57, 0x00, 0x5E, 0x05, 0x35,
-      0x69, 0x54, 0x2E, 0x0A, 0x07, 0x6B, 0x98, 0x73, 0x6D, 0x4D, 0x39, 0xB0,
-      0x0F, 0xC1, 0x65, 0x3F, 0xBC, 0x2D, 0x12, 0xEA, 0x32, 0xA9, 0x4B, 0x9B,
-      0x92, 0xC6, 0x8B, 0xA4, 0xB6, 0x8A, 0x4E, 0x7B, 0x37, 0x0A, 0x23, 0xB0,
-      0x3F, 0xE8, 0x22, 0x16, 0x39, 0xB0, 0x12, 0x44, 0x80, 0x6C, 0x27, 0x06,
-      0x7A, 0x58, 0x03, 0x1D, 0xB8, 0x0D, 0x2D, 0x03, 0x66, 0x1A, 0x01, 0x7B,
-      0xB4, 0x6B, 0xB3, 0x71, 0x1A, 0xCB, 0x56, 0x8A, 0x4F, 0xAB, 0xEB, 0xAF,
-      0xC5, 0xFA, 0x06, 0xF7, 0xCA, 0x0E, 0x4D, 0x96, 0x2E, 0x31, 0x70, 0xCB,
-      0x11, 0xC0, 0xA8, 0xD1, 0x8A, 0x09, 0xCE, 0x27, 0xA6, 0xA9, 0x76, 0x3E,
-      0x12, 0x38, 0x85, 0x45, 0x02, 0x24, 0xDE, 0x07, 0xCC, 0x17, 0x54, 0x6C,
-      0x17, 0x95, 0x1F, 0xDE, 0x47, 0x6E, 0x08, 0x35, 0x83, 0xEF, 0x10, 0xBF,
-      0x76, 0xA9, 0x8A, 0xFF, 0xF9, 0xB1, 0x2D, 0xB5, 0x40, 0x1C, 0xD3, 0x67,
-      0x34, 0x95, 0x39, 0x2D, 0x74, 0x12, 0x91, 0xC3, 0xAA, 0x78, 0x42, 0x0C,
-      0x8A, 0x7C, 0xB5, 0xFF, 0xE6, 0x50, 0x12, 0x99, 0x7C, 0x4D, 0xA4, 0x32,
-      0x2E, 0xA9, 0x0B, 0x50, 0x14, 0xB5, 0xB4, 0xD0, 0x18, 0x01, 0x00, 0x24,
-      0x70, 0x47, 0x34, 0x1E, 0x4C, 0x24, 0xB9, 0x6B, 0x8D, 0x7C, 0x00, 0x20,
-      0x52, 0x4B, 0x7C, 0x1D, 0x66, 0xC3, 0xE0, 0x8C, 0xB2, 0x99, 0xEB, 0x4E,
-      0xC6, 0xFA, 0x0E, 0xE8, 0xEA, 0x05, 0xFD, 0x43, 0x0F, 0x57, 0x60, 0x5E,
-      0x89, 0x2B, 0x23, 0x2D, 0x20, 0x47, 0xCA, 0x9B, 0x4E, 0xCA, 0xD9, 0xBD,
-      0xD0, 0x9C, 0x99, 0x51, 0x19, 0x69, 0x16, 0x52, 0x5D, 0x1E, 0xC9, 0x21,
-      0xB6, 0xE3, 0xCE, 0x0E, 0xE6, 0x92, 0xEB, 0xA7, 0x28, 0xB4, 0xDB, 0x10,
-      0xF3, 0x38, 0x1F, 0xBF, 0x58, 0x4A, 0xBB, 0x7B, 0x6A, 0x92, 0x10, 0xC7,
-      0xC4, 0x24, 0xCE, 0x4A, 0x36, 0x93, 0x70, 0xCB, 0x48, 0xD6, 0x08, 0x63,
-      0x4A, 0xBA, 0x0B, 0xFF, 0x91, 0xC5, 0x62, 0x0A, 0x11, 0x89, 0xD0, 0xCA,
-      0x97, 0x42, 0x1D, 0x42, 0x34, 0x29, 0xFB, 0x66, 0x39, 0x52, 0xDC, 0x12,
-      0x31, 0xB4, 0x36, 0x2B, 0x71, 0x62, 0xFE, 0x3A, 0x42, 0x11, 0x1C, 0x91,
-      0xD7, 0x6A, 0x96, 0x4C, 0xB4, 0x15, 0x41, 0x94, 0x20, 0x9E, 0xDB, 0xAA,
-      0x1F, 0x48, 0x1B, 0xD1, 0x26, 0xC3, 0x25, 0xD1, 0x56, 0x78, 0xE3, 0x9B,
-      0xCC, 0xE4, 0xC7, 0x04, 0xEA, 0x48, 0x72, 0x46, 0x64, 0x8A, 0x6C, 0x6C,
-      0x25, 0x40, 0xB5, 0xF6, 0x80, 0xA3, 0x5E, 0xE2, 0x82, 0x42, 0x46, 0x45,
-      0x0A, 0x72, 0x93, 0xF2, 0x1A, 0x90, 0xCF, 0xD1, 0x4E, 0xFA, 0xF7, 0x8F,
-      0xA3, 0xD7, 0x32, 0x22, 0x51, 0xC6, 0x41, 0xA5, 0x0E, 0x95, 0xBB, 0x5E,
-      0xC5, 0xCA, 0x0B, 0x60, 0xE8, 0x9D, 0x7C, 0x18, 0xB7, 0xA4, 0x4A, 0x0F,
-      0xAF, 0xB4, 0xBC, 0xAD, 0xE9, 0xB5, 0x88, 0xD1, 0xB7, 0xFC, 0xF1, 0x2B,
-      0xA1, 0xE1, 0x08, 0x4D, 0x56, 0xB1, 0x97, 0xEA, 0x90, 0xA7, 0x9A, 0x3D,
-      0x83, 0x92, 0x7A, 0x23, 0x07, 0x60, 0x3B, 0xC2, 0x11, 0xC0, 0x83, 0x0C,
-      0xB7, 0x06, 0x2C, 0x04, 0x25, 0x48, 0x24, 0x57, 0x5B, 0x22, 0x6C, 0xAD,
-      0x9A, 0x27, 0xC2, 0xA4, 0x55, 0x19, 0xAE, 0x39, 0x54, 0x64, 0x67, 0x69,
-      0x04, 0x85, 0x49, 0x8A, 0x32, 0x0A, 0xD5, 0x69, 0x93, 0xB1, 0x5A, 0x9D,
-      0x22, 0xC6, 0x19, 0x14, 0x46, 0xCB, 0x40, 0xAA, 0x75, 0x47, 0x40, 0x16,
-      0x81, 0xDC, 0xC7, 0xE3, 0x65, 0x96, 0xB1, 0x0C, 0x07, 0xFA, 0x2A, 0x20,
-      0xB4, 0x3C, 0x4B, 0x01, 0x24, 0x40, 0x1F, 0x8A, 0x0E, 0x74, 0x48, 0x78,
-      0xC7, 0x29, 0x66, 0x23, 0xC7, 0x39, 0x5B, 0x69, 0x94, 0xD1, 0x8C, 0x47,
-      0x87, 0xA2, 0x89, 0xDB, 0xB0, 0x5C, 0xB1, 0x82, 0x74, 0x51, 0xD8, 0x3F,
-      0x07, 0x29, 0x04, 0x53, 0x75, 0x94, 0xF5, 0x15, 0xCA, 0x10, 0x17, 0x99,
-      0x16, 0x20, 0xA3, 0x3E, 0x09, 0x6E, 0xE0, 0xDC, 0x09, 0x1A, 0xE4, 0xCA,
-      0x96, 0x06, 0x03, 0xB1, 0x01, 0xB5, 0xB4, 0xE2, 0x3E, 0x9A, 0x5B, 0x65,
-      0xE1, 0xF6, 0xC2, 0xA8, 0xCC, 0x89, 0x34, 0x13, 0x83, 0xB7, 0x06, 0x72,
-      0x5E, 0xD5, 0xB3, 0x48, 0x57, 0x69, 0x18, 0x1B, 0x8F, 0x76, 0x43, 0x9C,
-      0x05, 0x63, 0x6A, 0x0C, 0x34, 0x36, 0xFF, 0xBA, 0x8B, 0x86, 0xA5, 0x30,
-      0x6F, 0xA1, 0x11, 0xF6, 0xFC, 0x71, 0xEB, 0x77, 0x9B, 0x25, 0x70, 0x7C,
-      0xFA, 0xE0, 0xA6, 0xDA, 0x7B, 0x0A, 0xD5, 0xD9, 0x4B, 0x10, 0xF2, 0x1E,
-      0x4F, 0xCA, 0x92, 0x89, 0x3B, 0x9F, 0xFE, 0x73, 0x21, 0x07, 0x63, 0x40,
-      0x13, 0x77, 0x83, 0x7A, 0x10, 0xCA, 0x96, 0x25, 0x34, 0x6C, 0x42, 0xAD,
-      0xC7, 0x05, 0xBD, 0x92, 0xDB, 0x34, 0x26, 0xD9, 0x26, 0xCE, 0x4B, 0x5E,
-      0xC2, 0x4A, 0x5C, 0xDF, 0x27, 0xCB, 0x91, 0xE5, 0xA7, 0xE7, 0x16, 0x4D,
-      0x1B, 0xDC, 0x99, 0xD7, 0x56, 0x79, 0xFB, 0xC9, 0x3A, 0x58, 0xF6, 0x47,
-      0xDA, 0xC1, 0x08, 0x6C, 0xE9, 0x31, 0xBC, 0x08, 0x92, 0x33, 0xE9, 0x48,
-      0x7E, 0x08, 0x67, 0xBC, 0x58, 0x47, 0x2B, 0x01, 0xBF, 0x28, 0x95, 0xC3,
-      0x23, 0xB6, 0x4D, 0xBE, 0x4A, 0x17, 0xA9, 0xE8, 0x41, 0xB0, 0x53, 0xCA,
-      0xDB, 0x5C, 0x76, 0xD0, 0x35, 0x72, 0x4C, 0x32, 0x1B, 0xBC, 0x13, 0x66,
-      0x6F, 0x0A, 0x35, 0xDF, 0xDA, 0x07, 0x21, 0xE8, 0x98, 0x76, 0x23, 0x25,
-      0x6A, 0x99, 0x4D, 0x95, 0xFA, 0x1C, 0x05, 0xF5, 0x7C, 0x1E, 0x15, 0xA3,
-      0x0C, 0x4A, 0x0C, 0x83, 0x18, 0xA0, 0xD8, 0x3C, 0x41, 0x0C, 0x36, 0x28,
-      0x62, 0xE8, 0x17, 0xDD, 0x6A, 0xBB, 0xAA, 0x4B, 0xBE, 0x75, 0xB7, 0x36,
-      0xCC, 0xCB, 0xB4, 0xAF, 0x2A, 0x18, 0x84, 0x02, 0xBD, 0x4C, 0xE5, 0x97,
-      0x93, 0x20, 0x08, 0x86, 0x28, 0x65, 0x33, 0x25, 0x62, 0xF3, 0x24, 0xC7,
-      0xA4, 0x24, 0x15, 0x1F, 0xB5, 0x9D, 0x0A, 0xE1, 0x82, 0x1F, 0x28, 0x64,
-      0xC7, 0xE6, 0x98, 0x12, 0x7A, 0xAD, 0x92, 0xC3, 0x3B, 0x31, 0x39, 0x88,
-      0xC2, 0x9A, 0x09, 0xE2, 0x60, 0x44, 0x9B, 0xCA, 0x7B, 0xEE, 0x36, 0x08,
-      0x62, 0x31, 0x4E, 0x47, 0x51, 0x9E, 0xF3, 0x91, 0x8D, 0xDD, 0xE4, 0x03,
-      0xE7, 0xB9, 0x2A, 0xC9, 0x90, 0x8F, 0x93, 0xC6, 0x36, 0x9C, 0xC5, 0xC4,
-      0x7B, 0x8C, 0xB1, 0xDC, 0x3A, 0x34, 0x79, 0xC7, 0x62, 0xF6, 0x2A, 0x18,
-      0xFE, 0x05, 0xA9, 0xB0, 0x64, 0x5A, 0x53, 0x11, 0xA0, 0x18, 0x28, 0x72,
-      0x3A, 0xEB, 0x51, 0xFA, 0x50, 0x5E, 0x96, 0xB2, 0x9E, 0x3D, 0x2B, 0x6E,
-      0x5B, 0x13, 0x27, 0xDE, 0x3A, 0x61, 0xAB, 0x0C, 0x50, 0xBE, 0x01, 0x24,
-      0xB6, 0x4B, 0x33, 0x31, 0x4B, 0x32, 0xD6, 0x12, 0x25, 0x10, 0xE4, 0x64,
-      0x45, 0x85, 0x7A, 0xA0, 0xE2, 0xC4, 0xB0, 0xD2, 0x56, 0x95, 0x56, 0x20,
-      0xA8, 0x68, 0x1D, 0x1E, 0x55, 0x51, 0x26, 0xD0, 0x05, 0x09, 0xE3, 0x5B,
-      0xF5, 0x96, 0x83, 0xDD, 0xAA, 0x40, 0xE8, 0x2C, 0x51, 0x9B, 0x85, 0x58,
-      0x52, 0xC3, 0x66, 0xCB, 0x54, 0x45, 0x2B, 0xF9, 0x10, 0xB0, 0x01, 0x69,
-      0x23, 0x30, 0x34, 0x57, 0x08, 0x65, 0x3F, 0x51, 0x18, 0x00, 0xB1, 0x0E,
-      0x00, 0x9D, 0x9F, 0x7D, 0x10, 0xA5, 0x3B, 0x8B, 0x30, 0xBF, 0x13, 0xB0,
-      0x6F, 0x25, 0x4E, 0xC8, 0xA6, 0xBA, 0x53, 0x97, 0x00, 0xF6, 0x35, 0x8D,
-      0xE0, 0x46, 0x3A, 0x01, 0x95, 0x40, 0xC9, 0x87, 0x3F, 0x3F, 0x46, 0x80,
-      0xE2, 0x11, 0x3A, 0x7C, 0xCC, 0x55, 0xFF, 0x75, 0x4D, 0x85, 0xAA, 0x67,
-      0xE9, 0xE5, 0x5F, 0x88, 0x74, 0x24, 0xE0, 0xB2, 0x62, 0x56, 0x82, 0xA5,
-      0xDD, 0xA2, 0x18, 0xF0, 0x3C, 0x3C, 0x10, 0xA2, 0x46, 0xCD, 0xB0, 0xCC,
-      0x91, 0xD1, 0x9D, 0x8F, 0x02, 0x4D, 0xB9, 0xB1, 0x41, 0x5F, 0x50, 0xAC,
-      0xD8, 0xF6, 0x5D, 0xE2, 0x78, 0x7B, 0x91, 0x03, 0xC5, 0x75, 0xB6, 0x87,
-      0x76, 0x55, 0x72, 0xCF, 0xFA, 0x59, 0x02, 0x6C, 0x2B, 0xCE, 0xE7, 0x74,
-      0x23, 0xBC, 0xAF, 0xD3, 0x05, 0x4B, 0xF8, 0xE2, 0x71, 0x3F, 0xB8, 0x5B,
-      0x0B, 0xF6, 0xA4, 0x6E, 0x71, 0x61, 0x52, 0xF5, 0xC9, 0xA3, 0x01, 0x1E,
-      0xC9, 0x01, 0x14, 0xC7, 0x6B, 0x01, 0x51, 0x67, 0x99, 0xBD, 0x59, 0x11,
-      0x41, 0x5B, 0x70, 0x45, 0x44, 0x07, 0x7F, 0x18, 0x88, 0x06, 0x75, 0x5E,
-      0xEC, 0x41, 0x31, 0xE5, 0x55, 0x56, 0xDB, 0x90, 0x3F, 0x42, 0x84, 0xC1,
-      0xF9, 0x00, 0x86, 0xFF, 0x43, 0x1B, 0x68, 0xF5, 0x1F, 0x62, 0x98, 0x12,
-      0xF3, 0x20, 0xB5, 0x5F, 0x21, 0x9D, 0x72, 0xA1, 0x92, 0x8F, 0x38, 0xC9,
-      0xA1, 0xEC, 0x82, 0x3B, 0xA1, 0x98, 0xBA, 0x9A, 0xBB, 0xAC, 0xF6, 0x29,
-      0x02, 0xB3, 0xCA, 0x0A, 0xFC, 0x95, 0xEA, 0x8A, 0xC3, 0x03, 0xFB, 0x8B,
-      0xDD, 0x29, 0xBB, 0x9D, 0x18, 0xA0, 0x3B, 0xA4, 0x4E, 0x58, 0xB1, 0xB0,
-      0xB8, 0x5A, 0x2A, 0x16, 0x62, 0xE6, 0xA3, 0x1D, 0xA7, 0x54, 0x55, 0x11,
-      0xA4, 0x78, 0xA1, 0x81, 0x77, 0x88, 0x90, 0x61, 0xEF, 0x76, 0x63, 0x12,
-      0x64, 0x23, 0x9A, 0xDE, 0xBD, 0x04, 0xA8, 0xC5, 0x2B, 0x72, 0xE2, 0xB1,
-      0xF3, 0xA2, 0xDF, 0xBB, 0xD8, 0xC0, 0x54, 0xE7, 0x0C, 0xC2, 0xA7, 0x42,
-      0xE7, 0xB7, 0xD4, 0x17, 0xDF, 0xED, 0x31, 0x44, 0x22, 0x18, 0x7D, 0xE1,
-      0xB2, 0x95, 0x44, 0x81, 0x19, 0x57, 0x55, 0xEC, 0x04, 0xBB, 0x76, 0x71,
-      0xC4, 0x33, 0x14, 0x46, 0xBB, 0xE8, 0x95, 0x25, 0x14, 0x90, 0x53, 0x21,
-      0xA2, 0x17, 0x6E, 0x93, 0x5B, 0x54, 0x20, 0xC0, 0xD5, 0xEA, 0x44, 0x65,
-    },
-
-    .exp = {
-      0x22, 0x4B, 0x9C, 0x05, 0x12, 0x13, 0xEF, 0x46, 0x54, 0x92, 0x43, 0x79,
-      0x65, 0x32, 0x28, 0x29, 0x73, 0xFA, 0x7C, 0xF9, 0x7E, 0x89, 0x13, 0xC3,
-      0x39, 0xC1, 0x94, 0x0A, 0xC1, 0x7E, 0x05, 0xE0,
-    },
-  }, {
-    .name = "0-pass",
-
-    .ct = {
-      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
-      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
-      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
-      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
-      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
-      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
-      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
-      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
-      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
-      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
-      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
-      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
-      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
-      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
-      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
-      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
-      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
-      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
-      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
-      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
-      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
-      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
-      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
-      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
-      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
-      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
-      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
-      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
-      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
-      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
-      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
-      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
-      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
-      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
-      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
-      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
-      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
-      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
-      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
-      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
-      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
-      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
-      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
-      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
-      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
-      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
-      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
-      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
-      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
-      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
-      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
-      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
-      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
-      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
-      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
-      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
-      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
-      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
-      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
-      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
-      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
-      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
-      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
-      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
-    },
-
-    .dk = {
-      0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
-      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
-      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
-      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
-      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
-      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
-      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
-      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
-      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
-      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
-      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
-      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
-      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
-      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
-      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
-      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
-      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
-      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
-      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
-      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
-      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
-      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
-      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
-      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
-      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
-      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
-      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
-      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
-      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
-      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
-      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
-      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
-      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
-      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
-      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
-      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
-      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
-      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
-      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
-      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
-      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
-      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
-      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
-      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
-      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
-      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
-      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
-      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
-      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
-      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
-      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
-      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
-      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
-      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
-      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
-      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
-      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
-      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
-      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
-      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
-      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
-      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
-      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
-      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
-      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
-      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
-      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7, 0xbb, 0xfa, 0x54, 0xd6,
-      0x9c, 0x33, 0xd3, 0x14, 0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
-      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
-    },
-  }, {
-    .name = "1-fail-implicit-rejection-0: ct[0] = 0",
-
-    .ct = {
-      0x00, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
-      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
-      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
-      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
-      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
-      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
-      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
-      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
-      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
-      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
-      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
-      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
-      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
-      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
-      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
-      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
-      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
-      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
-      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
-      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
-      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
-      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
-      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
-      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
-      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
-      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
-      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
-      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
-      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
-      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
-      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
-      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
-      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
-      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
-      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
-      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
-      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
-      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
-      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
-      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
-      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
-      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
-      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
-      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
-      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
-      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
-      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
-      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
-      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
-      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
-      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
-      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
-      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
-      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
-      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
-      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
-      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
-      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
-      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
-      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
-      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
-      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
-      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
-      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
-    },
-
-    .dk = {
-      0x32, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
-      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
-      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
-      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
-      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
-      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
-      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
-      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
-      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
-      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
-      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
-      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
-      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
-      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
-      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
-      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
-      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
-      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
-      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
-      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
-      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
-      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
-      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
-      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
-      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
-      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
-      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
-      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
-      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
-      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
-      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
-      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
-      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
-      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
-      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
-      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
-      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
-      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
-      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
-      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
-      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
-      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
-      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
-      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
-      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
-      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
-      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
-      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
-      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
-      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
-      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
-      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
-      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
-      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
-      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
-      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
-      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
-      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
-      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
-      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
-      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
-      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
-      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
-      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
-      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
-      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
-      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x16, 0xed, 0xe9, 0x7d, 0x5f, 0xc0, 0x81, 0x14,
-      0xb6, 0x91, 0xc3, 0xba, 0x5b, 0x56, 0x4a, 0x64,
-      0x64, 0x4c, 0x8d, 0x4f, 0x67, 0x34, 0xb1, 0x99,
-      0x6d, 0x80, 0xe4, 0x6f, 0x72, 0xc4, 0x66, 0x28,
-    },
-  }, {
-    .name = "2-fail-implicit-rejection-1: dk[0] = 0",
-
-    .ct = {
-      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
-      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
-      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
-      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
-      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
-      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
-      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
-      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
-      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
-      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
-      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
-      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
-      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
-      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
-      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
-      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
-      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
-      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
-      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
-      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
-      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
-      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
-      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
-      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
-      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
-      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
-      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
-      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
-      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
-      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
-      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
-      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
-      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
-      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
-      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
-      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
-      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
-      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
-      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
-      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
-      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
-      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
-      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
-      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
-      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
-      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
-      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
-      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
-      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
-      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
-      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
-      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
-      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
-      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
-      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
-      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
-      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
-      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
-      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
-      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
-      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
-      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
-      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
-      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
-    },
-
-    .dk = {
-      0x00, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
-      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
-      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
-      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
-      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
-      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
-      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
-      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
-      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
-      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
-      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
-      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
-      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
-      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
-      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
-      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
-      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
-      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
-      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
-      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
-      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
-      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
-      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
-      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
-      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
-      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
-      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
-      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
-      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
-      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
-      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
-      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
-      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
-      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
-      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
-      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
-      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
-      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
-      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
-      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
-      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
-      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
-      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
-      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
-      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
-      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
-      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
-      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
-      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
-      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
-      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
-      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
-      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
-      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
-      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
-      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
-      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
-      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
-      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
-      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
-      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
-      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
-      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
-      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
-      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
-      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
-      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7,
-      0xbb, 0xfa, 0x54, 0xd6, 0x9c, 0x33, 0xd3, 0x14,
-      0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
-      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
-    },
-  }, {
-    .name = "2-fail-implicit-rejection-1: dk[0] = 0x01",
-
-    .ct = {
-      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
-      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
-      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
-      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
-      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
-      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
-      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
-      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
-      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
-      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
-      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
-      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
-      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
-      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
-      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
-      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
-      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
-      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
-      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
-      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
-      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
-      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
-      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
-      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
-      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
-      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
-      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
-      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
-      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
-      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
-      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
-      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
-      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
-      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
-      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
-      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
-      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
-      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
-      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
-      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
-      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
-      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
-      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
-      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
-      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
-      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
-      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
-      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
-      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
-      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
-      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
-      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
-      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
-      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
-      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
-      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
-      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
-      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
-      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
-      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
-      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
-      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
-      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
-      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
-    },
-
-    .dk = {
-      0x01, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
-      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
-      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
-      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
-      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
-      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
-      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
-      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
-      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
-      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
-      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
-      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
-      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
-      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
-      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
-      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
-      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
-      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
-      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
-      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
-      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
-      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
-      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
-      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
-      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
-      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
-      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
-      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
-      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
-      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
-      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
-      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
-      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
-      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
-      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
-      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
-      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
-      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
-      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
-      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
-      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
-      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
-      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
-      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
-      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
-      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
-      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
-      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
-      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
-      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
-      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
-      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
-      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
-      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
-      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
-      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
-      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
-      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
-      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
-      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
-      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
-      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
-      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
-      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
-      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
-      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
-      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7,
-      0xbb, 0xfa, 0x54, 0xd6, 0x9c, 0x33, 0xd3, 0x14,
-      0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
-      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
-    },
-  }, {
-    .name = "3-fail-implicit-rejection-2: dk[0] = 0xff",
-
-    .ct = {
-      0x66, 0xe4, 0x06, 0xd6, 0xa1, 0x43, 0x49, 0x80, 0xe8, 0x92, 0xbe, 0x05,
-      0xfd, 0x4a, 0xba, 0xce, 0x10, 0xb6, 0x34, 0xca, 0x97, 0x4d, 0xb4, 0x9b,
-      0x64, 0x33, 0x18, 0x28, 0x7f, 0x84, 0x7b, 0x09, 0x89, 0x71, 0x15, 0x2b,
-      0xd5, 0x68, 0xed, 0x53, 0xf2, 0x37, 0x2a, 0x43, 0x9f, 0x2e, 0x1f, 0x7b,
-      0xc8, 0x09, 0x46, 0x0d, 0x8a, 0xf8, 0xfa, 0x7e, 0xad, 0x17, 0x75, 0x06,
-      0x6f, 0x03, 0x85, 0xd3, 0xa0, 0x3e, 0xc3, 0x34, 0x53, 0xdd, 0x95, 0xcc,
-      0xc9, 0x15, 0xe7, 0x27, 0xae, 0x86, 0x1b, 0xe4, 0x0a, 0x99, 0x7e, 0x77,
-      0x68, 0x3c, 0x68, 0x13, 0x41, 0x76, 0xb4, 0xcf, 0xcd, 0xe8, 0xa9, 0x72,
-      0x28, 0x03, 0x83, 0xae, 0x5d, 0xab, 0x02, 0xa4, 0x17, 0x54, 0xae, 0x7e,
-      0xc1, 0x20, 0xf2, 0x5b, 0xce, 0x34, 0xc9, 0x71, 0x0d, 0xe3, 0x2d, 0x71,
-      0x1f, 0x73, 0x6c, 0x40, 0x76, 0xa8, 0xc8, 0x89, 0x63, 0xe8, 0x15, 0xd2,
-      0xb5, 0x5f, 0x3a, 0x95, 0x58, 0x71, 0xaf, 0xa7, 0x8a, 0x27, 0x5a, 0x90,
-      0x62, 0xf6, 0xeb, 0x99, 0x48, 0xbb, 0xf8, 0xba, 0xb3, 0xe0, 0x71, 0xec,
-      0xc2, 0x89, 0xb8, 0x5c, 0xe2, 0xc0, 0x94, 0x0e, 0x78, 0xcb, 0xbb, 0xb0,
-      0xb6, 0x94, 0xea, 0xf7, 0x81, 0x51, 0xfc, 0xbd, 0x9c, 0xd1, 0x8e, 0x88,
-      0x3e, 0x0f, 0x40, 0x2b, 0xb1, 0xf1, 0xd4, 0x3a, 0xd2, 0xa5, 0x7c, 0xa3,
-      0x03, 0x28, 0x89, 0xed, 0xcd, 0xe9, 0x1a, 0x47, 0xd2, 0xd0, 0x5d, 0x81,
-      0xfa, 0x8c, 0x21, 0xd8, 0x91, 0xba, 0x76, 0x22, 0x13, 0x2b, 0x8f, 0xac,
-      0x5e, 0x5e, 0x7e, 0x6d, 0xa1, 0x17, 0xfe, 0xdc, 0xc8, 0xa5, 0xd3, 0x3a,
-      0xa2, 0xf3, 0x54, 0x0e, 0x89, 0x97, 0xf8, 0x52, 0xab, 0x82, 0x13, 0x76,
-      0x4c, 0xda, 0x1a, 0xe0, 0x47, 0xb7, 0xa2, 0x28, 0xa1, 0xe4, 0x84, 0xf6,
-      0x74, 0x3f, 0xd6, 0x78, 0x74, 0x10, 0x34, 0x8a, 0x8f, 0xc7, 0x48, 0xdd,
-      0x89, 0xd0, 0xfc, 0xfd, 0x66, 0x3f, 0xea, 0xc7, 0xf5, 0x52, 0xb6, 0x86,
-      0x95, 0x96, 0xff, 0x12, 0xb4, 0x61, 0xa7, 0xb5, 0xc8, 0x45, 0x7f, 0x60,
-      0xc4, 0x62, 0x86, 0x7f, 0x40, 0xdb, 0x59, 0xeb, 0x33, 0xa4, 0x9a, 0x5f,
-      0x37, 0x74, 0x95, 0x57, 0xae, 0xb3, 0xfe, 0x1f, 0xd2, 0xb0, 0x15, 0x87,
-      0x39, 0xb4, 0x0d, 0x71, 0x30, 0xf4, 0xc4, 0xd9, 0xbc, 0x8c, 0x5e, 0x96,
-      0xab, 0x58, 0xe5, 0xd8, 0x4c, 0x0e, 0xe5, 0x6d, 0xf0, 0xc3, 0xb7, 0x7e,
-      0x56, 0x07, 0xf7, 0xab, 0xe3, 0x66, 0xe1, 0x2f, 0x4b, 0x26, 0x32, 0x62,
-      0xae, 0xde, 0x06, 0x75, 0x71, 0xea, 0x3a, 0x01, 0x95, 0x57, 0x83, 0x55,
-      0x0a, 0x6a, 0x8a, 0xf1, 0xf3, 0x78, 0x14, 0x1b, 0x5c, 0x7c, 0x0f, 0x58,
-      0xcd, 0x5a, 0xca, 0xa8, 0x5e, 0x95, 0x56, 0x35, 0x90, 0x4b, 0xf9, 0xb4,
-      0x88, 0x81, 0x6a, 0x88, 0x20, 0x18, 0x9a, 0x46, 0xb2, 0x62, 0xc8, 0xd2,
-      0xf7, 0x5a, 0xdd, 0xac, 0x5a, 0x85, 0x62, 0x39, 0x73, 0x22, 0x3b, 0x4d,
-      0x3f, 0xa5, 0x7c, 0xc5, 0xf2, 0xd2, 0xab, 0xbc, 0xef, 0x55, 0x1a, 0xd6,
-      0x6c, 0xd9, 0xa0, 0xbf, 0x4a, 0xac, 0x79, 0x22, 0x27, 0xa3, 0xcf, 0x17,
-      0xd0, 0xc4, 0x7c, 0xa6, 0xf7, 0x2d, 0x2a, 0x32, 0x2d, 0xf8, 0x68, 0xe3,
-      0x47, 0xe7, 0x56, 0x71, 0xda, 0xd9, 0x39, 0xbb, 0x6a, 0x13, 0xf5, 0x54,
-      0xde, 0xdd, 0xb8, 0x8f, 0xdf, 0x1b, 0xeb, 0xc8, 0xe8, 0x5a, 0x2d, 0x33,
-      0x04, 0x67, 0x3c, 0x25, 0x8b, 0x53, 0x36, 0x45, 0xd5, 0x29, 0x89, 0xda,
-      0x8b, 0xa6, 0x9e, 0x5e, 0x0b, 0xba, 0xad, 0x8d, 0xa4, 0xb5, 0xda, 0xf3,
-      0x6c, 0x1d, 0x6c, 0xc1, 0x99, 0xa3, 0x83, 0x9e, 0x32, 0x33, 0x69, 0xa8,
-      0x19, 0x0c, 0x04, 0x88, 0x81, 0xf8, 0x50, 0x47, 0xac, 0x37, 0x2a, 0x7f,
-      0x6b, 0x70, 0x8e, 0xe4, 0xce, 0x67, 0x53, 0x15, 0x8d, 0x5d, 0x7e, 0x40,
-      0x81, 0xf1, 0xdb, 0x5f, 0xcd, 0x12, 0x6a, 0x14, 0x6e, 0x0f, 0xed, 0x9d,
-      0x94, 0x16, 0x47, 0xec, 0x4e, 0xd1, 0x2a, 0xf8, 0xd1, 0xee, 0x58, 0xa1,
-      0x04, 0x66, 0xdd, 0x31, 0x00, 0x9d, 0xca, 0xa5, 0x4e, 0x2a, 0x6e, 0x5c,
-      0x45, 0x63, 0xc9, 0xb7, 0x45, 0xa8, 0x30, 0x98, 0x54, 0x8e, 0x6c, 0xcb,
-      0x15, 0x2b, 0xfc, 0x50, 0x14, 0x30, 0xbe, 0xa1, 0x95, 0xfb, 0x6e, 0xc1,
-      0x56, 0x25, 0xd5, 0x32, 0xb4, 0x06, 0x98, 0xb4, 0xcc, 0x96, 0x90, 0x98,
-      0x80, 0xdb, 0x1e, 0x0e, 0xc0, 0xfa, 0xcd, 0x02, 0x7f, 0xac, 0x68, 0x61,
-      0x9c, 0x41, 0x28, 0x24, 0x26, 0xe8, 0x1e, 0x0e, 0x2d, 0x2e, 0x0f, 0xbb,
-      0x9f, 0x18, 0x3e, 0xca, 0x26, 0x95, 0xc4, 0xc5, 0x86, 0x6d, 0xff, 0xbf,
-      0xfe, 0xa1, 0xed, 0x71, 0x37, 0x6f, 0x79, 0xf7, 0x0f, 0xa9, 0xb8, 0x98,
-      0x9f, 0x99, 0x98, 0x02, 0x97, 0x73, 0xaf, 0xcd, 0x84, 0xcc, 0x4d, 0xc9,
-      0x24, 0x80, 0x86, 0xcb, 0x68, 0xdf, 0xe9, 0x28, 0x30, 0xab, 0x1b, 0xa0,
-      0x0d, 0xbb, 0xc5, 0x54, 0x62, 0xad, 0xf1, 0xa5, 0xa4, 0xea, 0x36, 0x76,
-      0xf6, 0xe1, 0xcb, 0xc5, 0x76, 0x80, 0xb3, 0x0f, 0x3c, 0xe3, 0xcd, 0xa5,
-      0x90, 0x92, 0x28, 0x5a, 0x9d, 0xf6, 0x2d, 0x54, 0xf6, 0x57, 0x38, 0x29,
-      0x1c, 0xa8, 0x2c, 0x14, 0xb9, 0xde, 0x4a, 0xca, 0xc9, 0x06, 0xc9, 0xff,
-      0xac, 0x1f, 0x40, 0x85, 0xe1, 0x33, 0x37, 0x4a, 0x5f, 0xd0, 0x9b, 0xec,
-      0xf5, 0x7f, 0x2d, 0x5d, 0x91, 0x91, 0x87, 0x99, 0x23, 0x54, 0x0e, 0xbf,
-      0xb2, 0x30, 0x94, 0x8c, 0x4b, 0x03, 0x5d, 0xde, 0x98, 0xda, 0x75, 0xc3,
-      0x37, 0x47, 0x00, 0x5b, 0xaa, 0xe3, 0xf4, 0x4e, 0x7f, 0x8f, 0x0a, 0xad,
-    },
-
-    .dk = {
-      0xff, 0xc1, 0x88, 0xba, 0x73, 0xc2, 0x08, 0x03, 0x25, 0xdb, 0x40, 0x3b,
-      0xf0, 0xf7, 0x16, 0x01, 0x02, 0x77, 0x6c, 0x47, 0x11, 0x34, 0x0a, 0x1a,
-      0xb4, 0x86, 0x2f, 0x2a, 0x10, 0x2f, 0xcd, 0x4a, 0xa1, 0x39, 0xc7, 0xcf,
-      0xf9, 0xf1, 0xbe, 0xc4, 0x33, 0x44, 0x01, 0x90, 0x6e, 0x38, 0x84, 0x46,
-      0x3e, 0x94, 0x23, 0x0f, 0xdb, 0x1c, 0xd3, 0xb7, 0x77, 0x26, 0x33, 0x61,
-      0x3c, 0x49, 0xb2, 0x02, 0x00, 0xa6, 0x9e, 0x30, 0x60, 0x34, 0x21, 0x58,
-      0x54, 0x67, 0x70, 0x15, 0x31, 0x4a, 0xe9, 0xd5, 0x93, 0x8b, 0xa9, 0xb8,
-      0xa7, 0x81, 0xaf, 0x31, 0x81, 0x08, 0x92, 0x59, 0x54, 0x3d, 0x85, 0xac,
-      0x50, 0x37, 0x89, 0x0d, 0x33, 0x43, 0x01, 0xe7, 0x75, 0xec, 0x63, 0x1d,
-      0x3b, 0x45, 0x6f, 0x14, 0x07, 0x02, 0x6e, 0x74, 0xbe, 0x8e, 0x77, 0x40,
-      0x7c, 0x99, 0xcb, 0xc6, 0x58, 0xa3, 0x5d, 0x3b, 0x17, 0xb1, 0x36, 0x21,
-      0xf9, 0x26, 0x62, 0xb9, 0x60, 0xb4, 0x0d, 0x1b, 0xc1, 0x4a, 0x23, 0x48,
-      0x8c, 0xf8, 0xa3, 0xe4, 0x79, 0xc8, 0x37, 0x62, 0x56, 0xea, 0xc4, 0x0a,
-      0xed, 0x45, 0x43, 0x68, 0x5a, 0x61, 0x2b, 0x87, 0x7b, 0xa6, 0x72, 0xba,
-      0x16, 0xbc, 0x3f, 0xd0, 0xa9, 0x4d, 0x89, 0xe2, 0xc9, 0x33, 0xf8, 0x23,
-      0xa1, 0xa9, 0x69, 0x9f, 0xf7, 0xb6, 0x97, 0x9b, 0x6d, 0x2d, 0x33, 0x8e,
-      0xc8, 0x32, 0x93, 0xea, 0x49, 0x96, 0x5b, 0x02, 0x56, 0x65, 0x99, 0x1b,
-      0x4c, 0x07, 0xa9, 0x6d, 0x19, 0x56, 0x2b, 0xb3, 0x92, 0xea, 0xbc, 0xa8,
-      0x44, 0x72, 0x7c, 0x7f, 0xe9, 0x57, 0xdb, 0x97, 0xb0, 0x84, 0x09, 0xb9,
-      0xff, 0xb8, 0xcd, 0xce, 0x57, 0x44, 0xc7, 0xdc, 0xbe, 0xc7, 0xe4, 0x62,
-      0xba, 0x96, 0xae, 0xf4, 0xb7, 0xa9, 0xc6, 0x2a, 0xae, 0x58, 0x07, 0xbc,
-      0xe5, 0xdb, 0x5b, 0x10, 0x76, 0x94, 0x38, 0x78, 0x40, 0x50, 0x34, 0x19,
-      0x1a, 0x4b, 0x55, 0x19, 0xa1, 0xc1, 0x8b, 0xa2, 0x99, 0x1a, 0xa8, 0x49,
-      0x64, 0x16, 0xa5, 0xab, 0xf0, 0x41, 0xdd, 0x78, 0x4e, 0x27, 0xf9, 0x9e,
-      0xdd, 0x9b, 0xc4, 0x6c, 0x46, 0x4e, 0x68, 0xc8, 0x15, 0x73, 0xe0, 0x9b,
-      0x85, 0xe4, 0x57, 0x64, 0x30, 0xb9, 0x56, 0x51, 0x6b, 0x04, 0x80, 0x15,
-      0x66, 0x3a, 0xbb, 0x5b, 0x08, 0x08, 0x42, 0x34, 0x90, 0xcc, 0x1a, 0x0d,
-      0x4b, 0x61, 0x6d, 0x11, 0x8a, 0xac, 0x32, 0xc7, 0xbc, 0x77, 0x81, 0x67,
-      0x4e, 0x98, 0x6c, 0x99, 0xa7, 0x3e, 0x3d, 0xea, 0xce, 0x4d, 0x15, 0x1a,
-      0x15, 0x24, 0xba, 0x6a, 0x65, 0x15, 0x7c, 0x82, 0x68, 0xbe, 0x2a, 0x0d,
-      0x1c, 0xf5, 0xba, 0x00, 0x91, 0x66, 0xb3, 0x29, 0x19, 0x2e, 0x9c, 0x89,
-      0x19, 0x53, 0x3e, 0xc0, 0x7c, 0x4e, 0x55, 0x7a, 0x19, 0x5e, 0xe7, 0x55,
-      0xbe, 0x47, 0x91, 0x27, 0x85, 0x6d, 0x9c, 0x4a, 0x14, 0x3a, 0xa8, 0x07,
-      0xb7, 0x6a, 0x82, 0xa6, 0xf9, 0xa8, 0x0f, 0x51, 0xbd, 0x5d, 0x96, 0xb9,
-      0x1a, 0x20, 0x94, 0xe4, 0x30, 0xc1, 0x23, 0x06, 0x13, 0x38, 0xd1, 0x05,
-      0xa6, 0x01, 0x76, 0x38, 0x0a, 0x71, 0x05, 0x6b, 0xaa, 0xc2, 0xcc, 0x12,
-      0xd9, 0x08, 0xb7, 0x95, 0xac, 0x95, 0xff, 0xcb, 0x7f, 0x1e, 0x48, 0x09,
-      0x3f, 0x81, 0x0a, 0xfa, 0x10, 0x3b, 0xb1, 0x0a, 0x11, 0x3b, 0x34, 0x3a,
-      0x98, 0xeb, 0x66, 0x98, 0x70, 0x09, 0xe4, 0x02, 0x57, 0xbb, 0xc5, 0x6b,
-      0x80, 0xe3, 0xc0, 0x6b, 0x78, 0x2a, 0x8a, 0xc4, 0x70, 0x99, 0x66, 0xb8,
-      0x9f, 0x11, 0x65, 0x34, 0x49, 0x3c, 0x99, 0x0b, 0x88, 0x00, 0x10, 0x09,
-      0xbd, 0xd5, 0x7d, 0x03, 0x89, 0xa2, 0xd7, 0x77, 0xa3, 0x3f, 0x1c, 0xc3,
-      0x08, 0x6c, 0x26, 0xc8, 0xd9, 0x71, 0xe6, 0x36, 0x93, 0x3c, 0x63, 0x56,
-      0xdc, 0xf8, 0xbb, 0x08, 0x23, 0x02, 0x5a, 0x99, 0x51, 0xc1, 0xf1, 0x3a,
-      0x0b, 0x0a, 0x59, 0x67, 0xd1, 0xb4, 0x04, 0xb4, 0x9a, 0x2c, 0x7a, 0xa7,
-      0xfd, 0x0c, 0x4c, 0x31, 0x13, 0x8a, 0x3c, 0x6b, 0x53, 0x49, 0x04, 0x6e,
-      0x2f, 0x7a, 0x44, 0x8c, 0x35, 0x00, 0xcf, 0x5c, 0xb3, 0x54, 0x87, 0x36,
-      0x71, 0x60, 0xa8, 0x49, 0xf7, 0x99, 0x53, 0x00, 0x83, 0x9c, 0x72, 0x1c,
-      0xd6, 0x5b, 0xaa, 0x2f, 0x73, 0x80, 0xb6, 0x2c, 0x26, 0xb4, 0xc5, 0x8f,
-      0x23, 0x7a, 0x51, 0x49, 0xb9, 0xba, 0x7d, 0x59, 0x52, 0xce, 0x25, 0x69,
-      0x6f, 0x04, 0xb9, 0xd0, 0x96, 0x1d, 0x15, 0x88, 0x1b, 0x48, 0x86, 0xc9,
-      0xe8, 0xc6, 0xa2, 0xee, 0x23, 0x08, 0x31, 0x0c, 0xbc, 0xa7, 0x03, 0x52,
-      0x08, 0x53, 0xc7, 0xbd, 0x78, 0x5a, 0x4c, 0x78, 0x3e, 0xc2, 0xfb, 0xc6,
-      0xdc, 0x19, 0x5f, 0x64, 0x16, 0x54, 0x10, 0xf3, 0x36, 0x6b, 0x63, 0x68,
-      0x00, 0xc7, 0xcb, 0x5e, 0xe4, 0x1d, 0x2f, 0xbc, 0x69, 0x5b, 0x02, 0x75,
-      0xfa, 0x79, 0x8c, 0x35, 0x16, 0x67, 0x20, 0x5a, 0x81, 0x05, 0x51, 0x23,
-      0xaf, 0x7a, 0x94, 0x27, 0xec, 0x11, 0x09, 0xfb, 0x5f, 0x4e, 0x3b, 0x23,
-      0xc3, 0x6a, 0x15, 0xf6, 0x40, 0x45, 0xb2, 0x50, 0x7b, 0x24, 0x18, 0x74,
-      0x4e, 0x63, 0x08, 0x31, 0xb7, 0xc0, 0xfb, 0xd4, 0xbf, 0x4d, 0x43, 0x4f,
-      0x29, 0xd7, 0x7f, 0x54, 0xd4, 0x39, 0x72, 0x3b, 0x32, 0x02, 0xb9, 0x9a,
-      0x4a, 0xe2, 0xaa, 0x5b, 0x1a, 0xa7, 0x92, 0xc1, 0x2c, 0x57, 0x07, 0x70,
-      0xb0, 0x65, 0x16, 0x96, 0xea, 0x3c, 0xbe, 0xfb, 0x06, 0xc8, 0x34, 0x8d,
-      0x5f, 0x25, 0x85, 0x2f, 0xfb, 0x33, 0xb5, 0xd6, 0x53, 0xc5, 0x29, 0x5c,
-      0x99, 0x90, 0x73, 0xa8, 0x24, 0x66, 0xda, 0xc2, 0x30, 0x7a, 0xc8, 0x17,
-      0x12, 0xba, 0x8d, 0xea, 0x4c, 0x7f, 0xf2, 0xf5, 0x02, 0xdd, 0x67, 0x9c,
-      0xc8, 0x01, 0x60, 0xef, 0xdc, 0x76, 0x06, 0xb2, 0x64, 0x2f, 0x85, 0xac,
-      0xed, 0xa0, 0xcf, 0xdf, 0xb8, 0x0b, 0x7a, 0x41, 0x6f, 0x55, 0xf2, 0xb1,
-      0x96, 0x2b, 0x47, 0x03, 0x1c, 0xca, 0x43, 0xc0, 0x8d, 0x82, 0x40, 0x58,
-      0xfb, 0x45, 0x84, 0x34, 0xb1, 0x24, 0x32, 0xd5, 0x97, 0xc5, 0x74, 0x18,
-      0x0d, 0x91, 0x0d, 0x8a, 0x25, 0x31, 0xee, 0x0a, 0x43, 0xf4, 0x33, 0x9c,
-      0x77, 0x74, 0x0f, 0x36, 0x24, 0xa0, 0x0a, 0x93, 0x6b, 0x64, 0x5b, 0x1d,
-      0x54, 0x92, 0x10, 0xd4, 0x53, 0x81, 0x9e, 0x0c, 0x4a, 0xcd, 0x2c, 0x4d,
-      0x77, 0x70, 0x14, 0xde, 0x98, 0xcd, 0x98, 0x1a, 0xa0, 0x00, 0x3b, 0x01,
-      0x5c, 0x33, 0x98, 0xad, 0x77, 0x60, 0x06, 0x28, 0x4a, 0xba, 0x49, 0x41,
-      0x7a, 0x53, 0x51, 0xd0, 0xc5, 0x6a, 0x70, 0x9a, 0x4d, 0x05, 0x5a, 0x77,
-      0x47, 0x06, 0x8f, 0xe6, 0x60, 0x45, 0x42, 0xf6, 0x73, 0x22, 0xd8, 0x59,
-      0x99, 0x2a, 0x34, 0x71, 0x50, 0xab, 0x9a, 0x39, 0x22, 0x7e, 0x4b, 0xa2,
-      0xc9, 0xe8, 0x2e, 0xd8, 0xca, 0x60, 0xad, 0xbb, 0xbb, 0xf5, 0xa9, 0x08,
-      0xd3, 0x67, 0xa8, 0x9a, 0x1a, 0x39, 0xd4, 0xf6, 0x2b, 0x21, 0x82, 0x9a,
-      0x01, 0xf4, 0x4b, 0x22, 0xa7, 0x56, 0x2c, 0xfc, 0x8d, 0xe2, 0xbc, 0x0a,
-      0xeb, 0xa8, 0x5e, 0xcf, 0x90, 0x4f, 0x82, 0x70, 0xa1, 0x08, 0x6a, 0xaa,
-      0x25, 0x80, 0x43, 0xa1, 0xb6, 0x89, 0xd3, 0xe9, 0x56, 0x24, 0x95, 0x36,
-      0x7e, 0xd0, 0x55, 0xd6, 0x60, 0x7c, 0x48, 0x0c, 0x38, 0x9a, 0x38, 0x04,
-      0xa0, 0x01, 0x56, 0xd8, 0x10, 0x50, 0x1d, 0xc5, 0x87, 0x13, 0x4c, 0x1a,
-      0xf3, 0x15, 0x75, 0x78, 0xb9, 0x51, 0x39, 0xf6, 0x56, 0xa9, 0x8b, 0x4c,
-      0x95, 0x08, 0x08, 0x0f, 0x65, 0x8c, 0xf3, 0x11, 0x44, 0x4d, 0xb9, 0x25,
-      0x78, 0x51, 0xbf, 0xee, 0xf1, 0x2c, 0x26, 0xa6, 0x6f, 0x79, 0x19, 0x54,
-      0xfd, 0xb5, 0xb7, 0xec, 0x67, 0x55, 0x98, 0x5a, 0xb0, 0x06, 0x22, 0xa7,
-      0x8e, 0x7b, 0x6c, 0x9e, 0x9c, 0x94, 0xf6, 0xd8, 0x30, 0xe3, 0x4c, 0x0e,
-      0x44, 0x17, 0x8a, 0x29, 0x37, 0x64, 0x65, 0x29, 0xb1, 0x7b, 0x57, 0x74,
-      0x71, 0x29, 0x8d, 0x1d, 0x3b, 0x8e, 0x14, 0x60, 0x04, 0xdd, 0xb0, 0x0c,
-      0xde, 0xba, 0x34, 0xda, 0x33, 0x15, 0x30, 0xd8, 0x6d, 0xca, 0x71, 0x3c,
-      0xb2, 0x73, 0xb7, 0xe0, 0xc4, 0xae, 0x16, 0x26, 0x97, 0x1a, 0xe1, 0x32,
-      0xa4, 0xa6, 0x18, 0x12, 0x62, 0x35, 0xd3, 0x33, 0x83, 0xd7, 0xe2, 0x69,
-      0xe1, 0xa2, 0x09, 0x99, 0x12, 0xcc, 0xb5, 0xe9, 0x21, 0x80, 0x6b, 0xc3,
-      0x26, 0x42, 0x04, 0xb4, 0x94, 0x11, 0x45, 0xec, 0x71, 0x2e, 0xe8, 0x71,
-      0x47, 0x58, 0x28, 0xa2, 0x08, 0x31, 0x05, 0x6a, 0x5c, 0x5d, 0x49, 0xba,
-      0x77, 0xf3, 0x2b, 0xa1, 0xc3, 0x9c, 0xcd, 0x2c, 0xaa, 0xc8, 0x37, 0x9b,
-      0x73, 0x17, 0x5d, 0xae, 0x40, 0x29, 0xe8, 0x30, 0x6b, 0x02, 0x04, 0xc7,
-      0x3e, 0xe7, 0xa5, 0x36, 0x16, 0x52, 0x71, 0x22, 0xb3, 0xec, 0xdb, 0x2a,
-      0xe0, 0xd8, 0xa7, 0xfe, 0x33, 0x23, 0x07, 0xe1, 0x5a, 0x7c, 0x50, 0xbd,
-      0x95, 0x40, 0x31, 0xbf, 0x8b, 0x18, 0x13, 0x46, 0x13, 0x6a, 0xd1, 0xa4,
-      0x8b, 0xc7, 0x95, 0xdd, 0x69, 0xc0, 0xab, 0xe4, 0x48, 0x38, 0x43, 0xb2,
-      0x00, 0x2d, 0x69, 0x40, 0x75, 0x22, 0x47, 0xa7, 0x6e, 0x69, 0x85, 0x80,
-      0x11, 0x57, 0x34, 0x99, 0x07, 0x19, 0xe6, 0x6b, 0x7e, 0x49, 0x8c, 0x5c,
-      0xab, 0x76, 0xc5, 0x2d, 0xc5, 0x5f, 0x1b, 0x75, 0xc8, 0xeb, 0x78, 0xc9,
-      0x14, 0x39, 0xa6, 0x7c, 0x78, 0x85, 0xd0, 0xea, 0x68, 0xdf, 0x40, 0xc2,
-      0xb1, 0x21, 0x39, 0xb9, 0x91, 0x39, 0x2a, 0xe8, 0x04, 0xdb, 0x53, 0x4f,
-      0x99, 0x65, 0x4c, 0xa3, 0x7b, 0x60, 0xc2, 0xa8, 0x63, 0x98, 0xeb, 0x4d,
-      0x54, 0xfa, 0x98, 0x04, 0xc8, 0xc3, 0x35, 0xa5, 0xcc, 0xde, 0xeb, 0x52,
-      0xa8, 0x10, 0x41, 0x27, 0x1b, 0xb0, 0xa8, 0xb4, 0x48, 0xe8, 0xe1, 0x0b,
-      0x27, 0xb9, 0x03, 0xd3, 0xc9, 0x98, 0x8e, 0xc9, 0x4b, 0xbf, 0x74, 0xb0,
-      0x20, 0xd7, 0x35, 0x32, 0xf6, 0xac, 0x32, 0x49, 0x25, 0xf4, 0x19, 0x40,
-      0xc6, 0xf7, 0x23, 0xf9, 0xf8, 0x47, 0x54, 0x73, 0x8d, 0xae, 0x87, 0x40,
-      0xc0, 0x92, 0x0f, 0x85, 0xe0, 0xaa, 0x31, 0x69, 0x69, 0x78, 0x18, 0x75,
-      0xa6, 0xbc, 0xbe, 0x6c, 0x29, 0xbe, 0x01, 0xda, 0x65, 0x93, 0x12, 0xc0,
-      0xf6, 0xd8, 0x88, 0xee, 0xa8, 0xa5, 0x65, 0x31, 0x5d, 0x7f, 0x01, 0x0a,
-      0x74, 0xe5, 0x35, 0x07, 0xf4, 0xb3, 0x41, 0xc7, 0x0e, 0x38, 0x33, 0x9b,
-      0x30, 0x3b, 0x85, 0x92, 0x5a, 0x08, 0x96, 0x13, 0x9f, 0x7c, 0x29, 0x3b,
-      0x07, 0x64, 0x06, 0x59, 0x18, 0x86, 0x75, 0xe1, 0xaf, 0xcd, 0x21, 0x91,
-      0x40, 0xf0, 0x59, 0xce, 0x7a, 0x8e, 0xfa, 0x52, 0x77, 0x05, 0xb0, 0xb6,
-      0xcf, 0x82, 0x99, 0x8a, 0xda, 0x37, 0x41, 0xdc, 0xb2, 0x97, 0x18, 0xad,
-      0x6f, 0x50, 0xba, 0x1d, 0xf3, 0x4c, 0x42, 0x62, 0x5c, 0xd6, 0x91, 0xc4,
-      0xe5, 0x45, 0x3b, 0x76, 0x0a, 0xb3, 0xae, 0xb2, 0x16, 0x5c, 0xeb, 0x4e,
-      0x2a, 0xf3, 0x5f, 0x77, 0xe0, 0x45, 0xb6, 0xd0, 0x42, 0x5c, 0x91, 0x0d,
-      0x7b, 0xc2, 0x76, 0x85, 0xf4, 0x3b, 0x49, 0xc7, 0xbc, 0x6f, 0x53, 0x20,
-      0x3d, 0xe1, 0x23, 0xef, 0xc7, 0x20, 0x50, 0xd0, 0x4d, 0x27, 0xcb, 0x33,
-      0x68, 0xcc, 0x3d, 0x7a, 0xe4, 0x3d, 0x8d, 0x76, 0x18, 0xeb, 0xa4, 0x19,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x31, 0x52, 0xc9, 0x88,
-      0x45, 0xac, 0xbc, 0x16, 0x3d, 0x2f, 0x7a, 0xff, 0xd6, 0x5a, 0x61, 0x7f,
-      0xb5, 0x99, 0x42, 0x62, 0xc1, 0xbd, 0x28, 0x31, 0xbf, 0xdc, 0xc1, 0x05,
-      0x75, 0x2b, 0xb7, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0xeb, 0xfa, 0xf0, 0xfa, 0x30, 0xaf, 0x99, 0xd7,
-      0xbb, 0xfa, 0x54, 0xd6, 0x9c, 0x33, 0xd3, 0x14,
-      0xc7, 0x47, 0xc7, 0x0a, 0xb3, 0x73, 0xfd, 0x1e,
-      0x16, 0xe3, 0x2e, 0xd8, 0xc5, 0x6e, 0xc9, 0x3d,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // decapsulate shared key from ciphertext `ct` using KEM512
-    // decapsulation key `dk`, then store result in buffer `got`.
-    uint8_t got[32] = { 0 };
-    fips203ipd_kem512_decaps(got, TESTS[i].ct, TESTS[i].dk);
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_fips203ipd_kem512_roundtrip(void) {
-  uint8_t buf[96] = { 0 };
-
-  for (size_t i = 0; i < NUM_ROUNDTRIP_TIMES; i++) {
-    rand_bytes(buf, sizeof(buf));
-    const uint8_t * const keygen_seed = buf; // 64 bytes
-    const uint8_t * const encaps_seed = buf + 64; // 32 bytes
-
-    // generate encapsulation and decapsulation keys
-    uint8_t ek[FIPS203IPD_KEM512_EK_SIZE] = { 0 };
-    uint8_t dk[FIPS203IPD_KEM512_DK_SIZE] = { 0 };
-    fips203ipd_kem512_keygen(ek, dk, keygen_seed);
-
-    // encapsulate, get key and ciphertext
-    uint8_t k0[32] = { 0 };
-    uint8_t ct[FIPS203IPD_KEM512_CT_SIZE] = { 0 };
-    fips203ipd_kem512_encaps(k0, ct, ek, encaps_seed);
-
-    // decapsulate key from ciphertext
-    uint8_t k1[32] = { 0 };
-    fips203ipd_kem512_decaps(k1, ct, dk);
-
-    // verify that k0 == k1
-    compare_keys(__func__, k0, k1, keygen_seed, encaps_seed);
-  }
-}
-
-static void test_mat3_mul(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t mat[9];
-    const poly_t vec[3];
-    const poly_t exp[3];
-  } TESTS[] = {{
-    .name = "[[1, x, x^2], [x^3, x^4, x^5], [x^6, x^7, x^8]] * [x^9, x^10, x^11]^T",
-    //       [    1    x  x^2  ]
-    // mat = [  x^3  x^4  x^5  ]
-    //       [  x^6  x^7  x^8  ]
-    .mat = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
-
-      { .cs = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
-    },
-
-    //       (   x^9, )
-    // vec = (  x^10, )
-    //       (  x^11  )
-    .vec = {
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 } },
-    },
-
-    //       (   x^9 + x^11 + x^13  )
-    // exp = (  x^12 + x^14 + x^16  )
-    //       (  x^15 + x^17 + x^19  )
-    .exp = {
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1 } },
-      { .cs = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // populate matrix, apply NTT
-    poly_t mat[9] = { 0 };
-    memcpy(mat, TESTS[i].mat, sizeof(mat));
-    mat3_ntt(mat);
-
-    // populate vector, apply NTT
-    poly_t vec[3] = { 0 };
-    memcpy(vec, TESTS[i].vec, sizeof(vec));
-    vec3_ntt(vec);
-
-    poly_t got[3] = { 0 };
-    mat3_mul(got, mat, vec); // got = mat * vec
-    vec3_inv_ntt(got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec3_write(stderr, "got", got);
-      fprintf(stderr, "exp:\n");
-      vec3_write(stderr, "exp", TESTS[i].exp);
-    }
-  }
-}
-
-static void test_vec3_add(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t a[3]; // test value a
-    const poly_t b[3]; // test value b
-    const poly_t exp[3]; // expected value
-  } TESTS[] = {{
-    .name = "[1, x, x^2]^T + [x^3, x^4, x^5]^T = [1 + x^3, x + x^4, x^2 + x^5]^T",
-    .a = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-    },
-
-    .b = {
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
-    },
-
-    .exp = {
-      { .cs = { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 1, 0, 0, 1, 0, 0, 0, 0 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t got[3] = { 0 };
-    memcpy(got, TESTS[i].a, sizeof(got)); // got = a
-
-    vec3_add(got, TESTS[i].b); // got += b
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec3_write(stderr, "got", got);
-      fprintf(stderr, "exp:\n");
-      vec3_write(stderr, "exp", TESTS[i].exp);
-    }
-  }
-}
-
-static void test_vec3_dot(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t a[3]; // test value a
-    const poly_t b[3]; // test value b
-    const poly_t exp; // expected value
-  } TESTS[] = {{
-    .name = "[1, x, x^2] * [x^3, x^4, x^5]^T = (x^3 + x^5 + x^7)",
-    .a = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-    },
-
-    .b = {
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
-    },
-
-    .exp = { .cs = { 0, 0, 0, 1, 0, 1, 0, 1, 0, 0 } },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t a[3], b[3];
-
-    memcpy(a, TESTS[i].a, sizeof(a));
-    vec3_ntt(a); // a = NTT(a)
-
-    memcpy(b, TESTS[i].b, sizeof(b));
-    vec3_ntt(b); // b = NTT(b)
-
-    poly_t got = { 0 };
-    vec3_dot(&got, a, b); // got = a * b
-    poly_inv_ntt(&got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
-      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
-    }
-  }
-}
-
-static void test_vec3_ntt(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t exp[3]; // expected value
-  } TESTS[] = {{
-    .name = "[1, x, x^2]^T",
-    .exp = {
-      { .cs = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } },
-    },
-  }, {
-    .name = "[x^3, x^4, x^5]^T",
-    .exp = {
-      { .cs = { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } },
-      { .cs = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t got[3] = { 0 };
-    memcpy(got, TESTS[i].exp, sizeof(got));
-    vec3_ntt(got); // got = NTT(exp)
-    vec3_inv_ntt(got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec3_write(stderr, "got", got);
-      fprintf(stderr, "\nexp:\n");
-      vec3_write(stderr, "exp", TESTS[i].exp);
-      fputs("\n", stderr);
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val[3]; // test vector
-} VEC3_ENCODE_TESTS[] = {{
-  .name = "basic",
-  .val = {
-    { .cs = { 1, 2, 3, 4, 5 } },
-    { .cs = { 3328, 3327, 3326, 3325, 3324 } },
-    { .cs = { 100, 200, 300, 400, 500 } },
-  },
-}};
-
-DEF_TEST_VEC_FNS(3)
-DEF_TEST_VEC_BIT_FNS(3, 10)
-
-static const struct {
-  const char *name; // test name
-  const uint8_t seed[32]; // test seed
-  const uint8_t exp_ek[PKE768_EK_SIZE]; // expected ek (1184 bytes)
-  const uint8_t exp_dk[PKE768_DK_SIZE]; // expected dk (1152 bytes)
-} PKE768_KEYGEN_TESTS[] = {{
-  .name = "all-zero",
-  .seed = { 0 },
-  .exp_ek = {
-    0x9c, 0x35, 0x94, 0xe2, 0x35, 0xa8, 0x31, 0x46, 0xb4, 0x90, 0x75, 0x0a,
-    0xfc, 0x8b, 0x5c, 0x65, 0x9c, 0x88, 0x0b, 0x5b, 0x5b, 0x64, 0xa8, 0x37,
-    0xef, 0x52, 0xa2, 0x93, 0xf3, 0x2e, 0x2d, 0x79, 0xa2, 0x6e, 0x03, 0xb6,
-    0xf4, 0x46, 0x6c, 0x14, 0x9b, 0xa2, 0x50, 0xbb, 0x6b, 0x1a, 0x15, 0x92,
-    0xb0, 0x71, 0x88, 0xc9, 0x6c, 0x9c, 0x46, 0x68, 0x81, 0x83, 0x01, 0x89,
-    0xe2, 0xf8, 0x28, 0x53, 0x76, 0x78, 0xe7, 0xc3, 0x5e, 0xfc, 0x68, 0x0d,
-    0x32, 0xf6, 0x5e, 0x7e, 0x4b, 0x65, 0x1d, 0x5c, 0xb3, 0xa5, 0x87, 0xae,
-    0x30, 0xf3, 0x9d, 0x62, 0xda, 0x39, 0x16, 0x58, 0x64, 0x04, 0xaa, 0x3f,
-    0x1e, 0xa2, 0x50, 0xc8, 0x06, 0x11, 0x1d, 0x5c, 0xc4, 0x4b, 0xa6, 0xb5,
-    0xc6, 0x36, 0x40, 0x4c, 0x11, 0xc8, 0xcd, 0x83, 0x26, 0x88, 0x8a, 0xa6,
-    0x70, 0xa7, 0x8d, 0xa7, 0x20, 0x53, 0xfe, 0x87, 0x27, 0xd2, 0x64, 0x88,
-    0x44, 0x34, 0x2b, 0x09, 0xa4, 0xcf, 0xec, 0x68, 0xa6, 0x47, 0x80, 0x5e,
-    0x67, 0xeb, 0x83, 0x4b, 0x6b, 0x5c, 0x7e, 0x00, 0x65, 0xd0, 0xc3, 0x8d,
-    0xba, 0x47, 0x3f, 0xa3, 0x35, 0x37, 0xdc, 0xb9, 0x58, 0x3e, 0xa1, 0x87,
-    0x46, 0xf9, 0xcb, 0x93, 0xf9, 0x9f, 0x92, 0x35, 0x6d, 0x8d, 0x68, 0xc1,
-    0xb8, 0x64, 0x81, 0x85, 0x84, 0x6e, 0xf8, 0xe9, 0x7b, 0xaf, 0x91, 0x0e,
-    0xa2, 0x93, 0x4b, 0x82, 0xc2, 0x44, 0xde, 0x06, 0x00, 0xf5, 0xb0, 0x44,
-    0x76, 0x48, 0xc3, 0x6f, 0xd1, 0x9f, 0xf8, 0x66, 0x45, 0xd3, 0xe3, 0x8e,
-    0x49, 0x33, 0x83, 0x96, 0x06, 0x96, 0x30, 0xe2, 0x1f, 0xd3, 0x49, 0x0f,
-    0xd1, 0xb9, 0x2c, 0x2d, 0x99, 0x84, 0xa6, 0x61, 0xc6, 0xb7, 0x41, 0x5d,
-    0x49, 0x39, 0xad, 0x95, 0x45, 0xc5, 0xca, 0x1a, 0x5a, 0xc3, 0x45, 0x04,
-    0xbf, 0x34, 0xae, 0x16, 0x72, 0x1a, 0x29, 0x9a, 0x03, 0xf3, 0x09, 0x53,
-    0xad, 0xf5, 0x7a, 0x53, 0x54, 0x6d, 0x48, 0xca, 0x7b, 0x9e, 0x61, 0x20,
-    0xe9, 0xba, 0x8e, 0x56, 0xab, 0x47, 0x9d, 0x77, 0x83, 0x0d, 0x69, 0x00,
-    0x52, 0xb9, 0xa1, 0x9c, 0x16, 0x28, 0xe3, 0x68, 0x27, 0x5d, 0xcb, 0x41,
-    0x7c, 0xd1, 0xb6, 0x44, 0xd0, 0x65, 0x2a, 0x25, 0xa2, 0xf2, 0x84, 0x4b,
-    0xf7, 0x85, 0xab, 0x22, 0xd8, 0x42, 0x21, 0x78, 0x58, 0x79, 0xcb, 0x37,
-    0xa9, 0xf7, 0xce, 0x99, 0x90, 0x12, 0xe8, 0x49, 0x38, 0x76, 0x22, 0x2d,
-    0x25, 0x83, 0xb9, 0x5f, 0x72, 0x0d, 0xc2, 0x00, 0x6d, 0xc5, 0x59, 0x43,
-    0x4f, 0x33, 0xa1, 0xb8, 0x45, 0x82, 0x2a, 0x11, 0x13, 0x9a, 0x08, 0x35,
-    0x18, 0xfb, 0x34, 0x68, 0x97, 0x7c, 0xfa, 0xa7, 0x9f, 0x5e, 0xf9, 0x68,
-    0x4b, 0x3a, 0x40, 0xb7, 0xf2, 0x66, 0x9b, 0x05, 0x01, 0x4f, 0xe1, 0x98,
-    0xed, 0xc7, 0x34, 0xfa, 0xc2, 0x27, 0xe6, 0xd7, 0x47, 0x86, 0xfb, 0x17,
-    0x78, 0x45, 0x62, 0x01, 0x07, 0x6d, 0xe7, 0xa4, 0x66, 0x5e, 0x76, 0x45,
-    0xd3, 0x37, 0xc2, 0x46, 0x45, 0x0f, 0x0d, 0xa3, 0x50, 0x90, 0xa3, 0x5b,
-    0xda, 0x44, 0x5a, 0x40, 0xb6, 0x93, 0xe8, 0xd6, 0x96, 0x0f, 0x10, 0x1c,
-    0x0b, 0xe2, 0x7d, 0x03, 0x9a, 0x7a, 0x22, 0x37, 0x1b, 0x55, 0x36, 0x80,
-    0x45, 0x87, 0xbe, 0xd9, 0x29, 0x87, 0xf3, 0xec, 0x61, 0xa3, 0x2a, 0x60,
-    0xa9, 0x3c, 0x0e, 0x0f, 0x83, 0x1f, 0xda, 0xb1, 0x2f, 0x01, 0x21, 0x48,
-    0xb6, 0x5b, 0x89, 0x7f, 0x79, 0xb8, 0x6c, 0x49, 0x90, 0xb3, 0x0b, 0xb2,
-    0x6c, 0x64, 0x24, 0xe7, 0xf7, 0x90, 0xeb, 0xb5, 0xc0, 0xc5, 0x04, 0x8c,
-    0x16, 0x66, 0x56, 0xb0, 0x01, 0x2b, 0x9f, 0xe8, 0x54, 0x6a, 0x01, 0x0b,
-    0xb3, 0x33, 0x95, 0x6a, 0x85, 0x7b, 0xbc, 0xc0, 0x3b, 0x1a, 0x30, 0x47,
-    0xbd, 0x86, 0x20, 0x6b, 0x22, 0x26, 0x58, 0x3b, 0x1d, 0x7b, 0x08, 0x98,
-    0x45, 0x11, 0x29, 0x57, 0x61, 0x7f, 0xfa, 0x93, 0x66, 0x54, 0x87, 0xb2,
-    0x46, 0x91, 0x96, 0x7a, 0xe6, 0xb6, 0x41, 0x20, 0x9e, 0x0e, 0xb2, 0xaf,
-    0xb1, 0x14, 0x8e, 0x1d, 0xaa, 0x76, 0x7f, 0x17, 0x63, 0xb5, 0xf9, 0x60,
-    0x8c, 0xe5, 0x06, 0xba, 0x93, 0x98, 0xe7, 0x46, 0x90, 0x9d, 0x52, 0x39,
-    0x47, 0x47, 0x6f, 0x6d, 0xd8, 0x35, 0xfb, 0x8a, 0x4b, 0x5e, 0x8c, 0x26,
-    0xbc, 0xd0, 0xb6, 0xb9, 0xc6, 0x2f, 0xe4, 0x69, 0x26, 0x55, 0x8a, 0x84,
-    0xa1, 0xd2, 0x54, 0x66, 0x2c, 0x38, 0xcd, 0xa5, 0x0f, 0x5e, 0x27, 0xc3,
-    0xf0, 0x9a, 0x56, 0x7a, 0xe6, 0x6f, 0x26, 0xac, 0x24, 0x90, 0x71, 0x7e,
-    0x60, 0x45, 0x16, 0x2b, 0x15, 0x4e, 0xa5, 0x91, 0x9f, 0xfb, 0x08, 0x96,
-    0xaa, 0x24, 0x84, 0xb2, 0xb7, 0x7c, 0x2f, 0x8c, 0x80, 0x8b, 0xb9, 0x98,
-    0xc6, 0xc0, 0x7e, 0xf7, 0xa0, 0x25, 0x28, 0x51, 0x15, 0xf8, 0x7b, 0x7e,
-    0xe4, 0x54, 0x6c, 0xcf, 0x52, 0x29, 0xac, 0x02, 0x4b, 0x9b, 0x1a, 0x4f,
-    0x60, 0x3a, 0x91, 0x0d, 0x6a, 0x8f, 0x71, 0xbb, 0x33, 0x40, 0xf8, 0x80,
-    0x1b, 0x38, 0x37, 0xd0, 0xf8, 0xc2, 0x2b, 0x30, 0x4e, 0x31, 0xb9, 0x14,
-    0xf9, 0xba, 0x5e, 0x48, 0xf1, 0x41, 0x11, 0x08, 0x67, 0xf5, 0xc6, 0x72,
-    0x7f, 0xa2, 0x46, 0xc6, 0x99, 0x6b, 0x07, 0xc3, 0x0b, 0xe4, 0x99, 0xab,
-    0x08, 0x92, 0x17, 0x69, 0x5a, 0x7f, 0x5d, 0xf7, 0x5f, 0x95, 0x50, 0x32,
-    0xa0, 0xd8, 0xae, 0x08, 0x21, 0x54, 0xfd, 0xac, 0x64, 0x7c, 0x7b, 0x97,
-    0x8c, 0xfc, 0x8a, 0x42, 0x8c, 0x62, 0x0f, 0x20, 0x8d, 0x80, 0x58, 0x66,
-    0x59, 0x72, 0x85, 0x48, 0xb1, 0x13, 0x27, 0xd9, 0x97, 0xc8, 0x53, 0x34,
-    0x8f, 0x7b, 0x48, 0x70, 0xe0, 0x4d, 0xd6, 0x00, 0x7b, 0x71, 0x02, 0x04,
-    0x7f, 0x30, 0x80, 0x33, 0x21, 0x47, 0xea, 0x09, 0x86, 0x6c, 0x93, 0x5e,
-    0x17, 0x96, 0x95, 0x3b, 0x7c, 0x1e, 0x92, 0xda, 0xa8, 0xaa, 0x12, 0x6e,
-    0x30, 0x7a, 0x38, 0xaf, 0x3c, 0x90, 0x6b, 0xd6, 0xb4, 0xfa, 0x6c, 0x5e,
-    0x8d, 0x49, 0xce, 0x08, 0x5c, 0x26, 0x34, 0x43, 0x94, 0xe5, 0xb6, 0x8d,
-    0xec, 0x83, 0x50, 0xa0, 0x38, 0x9f, 0xb4, 0xf2, 0xbf, 0xdd, 0x37, 0x73,
-    0xd2, 0x25, 0xb4, 0x97, 0xa2, 0xa8, 0x3a, 0xf3, 0x2c, 0x80, 0x67, 0x56,
-    0x3d, 0x75, 0x03, 0x42, 0xd7, 0x51, 0x14, 0x02, 0x4a, 0x3d, 0x5b, 0x9e,
-    0x6c, 0x3b, 0x16, 0xe9, 0xc4, 0x28, 0x77, 0x43, 0x17, 0xb1, 0x78, 0x8d,
-    0x54, 0xfb, 0xc5, 0xb4, 0x39, 0xc1, 0xd9, 0x57, 0x1c, 0xd7, 0xab, 0xb7,
-    0xbd, 0x28, 0x4c, 0x98, 0x58, 0x32, 0x15, 0xf0, 0x3b, 0x14, 0x36, 0x80,
-    0xa0, 0xd0, 0xaf, 0xae, 0x26, 0x6b, 0xef, 0x93, 0x1c, 0xc1, 0xa2, 0xaa,
-    0x22, 0xf8, 0xc8, 0xd5, 0x50, 0xa6, 0x9a, 0x0a, 0x34, 0x35, 0xa7, 0xcb,
-    0xcd, 0xba, 0x5c, 0x18, 0xd6, 0x31, 0xc4, 0x5b, 0xc3, 0x12, 0x55, 0xc4,
-    0x0a, 0x64, 0x30, 0x10, 0xe5, 0x95, 0x18, 0x67, 0x68, 0xd9, 0x79, 0x47,
-    0xa0, 0xd1, 0x61, 0x0f, 0x11, 0x70, 0x23, 0xd8, 0xbb, 0x19, 0xf2, 0x4a,
-    0xe1, 0x22, 0x71, 0xf1, 0x69, 0x06, 0x59, 0x02, 0x5a, 0x6e, 0xd2, 0x30,
-    0x08, 0x0b, 0x61, 0xce, 0x61, 0x9b, 0x86, 0x60, 0x1a, 0xaf, 0x5b, 0x46,
-    0x7b, 0xb3, 0x12, 0x84, 0x75, 0x59, 0x91, 0x32, 0xaa, 0x16, 0x21, 0x40,
-    0xc2, 0x00, 0xbd, 0x38, 0x88, 0xa4, 0x56, 0x7c, 0x5f, 0x69, 0x42, 0x9b,
-    0x88, 0xd3, 0x53, 0x97, 0x86, 0x07, 0xd7, 0x4b, 0xcf, 0xf6, 0x39, 0x9a,
-    0x09, 0x34, 0x13, 0x01, 0x22, 0xb7, 0xfd, 0xb6, 0x60, 0x83, 0x49, 0x50,
-    0x64, 0xb7, 0x72, 0x00, 0xc9, 0x11, 0x1d, 0xfa, 0x25, 0x28, 0x28, 0x8e,
-    0x69, 0x20, 0x05, 0xda, 0xa7, 0x5c, 0x48, 0x62, 0x2c, 0xf4, 0xa5, 0x9e,
-    0x73, 0xb4, 0x95, 0xc5, 0xa2, 0x8f, 0x5a, 0x30, 0x84, 0xfe, 0xa0, 0x22,
-    0x82, 0x9b, 0x72, 0x99, 0xb8, 0x36, 0xed, 0xfa, 0x02, 0x57, 0xc9, 0x9d,
-    0xb1, 0x88, 0x92, 0xd2, 0xc0, 0x54, 0x07, 0xf9, 0x78, 0xf8, 0x76, 0x03,
-    0x55, 0x95, 0x95, 0xb2, 0xa1, 0x2e, 0xd2, 0x19, 0xb6, 0x88, 0xe8, 0x4b,
-    0xa8, 0x70, 0xc1, 0xfb, 0x41, 0x97, 0x39, 0xf5, 0x55, 0x84, 0x0a, 0x3c,
-    0xbf, 0x91, 0x56, 0x57, 0xa5, 0x24, 0x50, 0x64, 0x46, 0xd4, 0x75, 0x05,
-    0x22, 0x52, 0x1b, 0x81, 0x67, 0xad, 0x26, 0x19, 0x1e, 0xcd, 0x6a, 0x5d,
-    0x43, 0x15, 0xc0, 0xee, 0x94, 0x0d, 0x60, 0x78, 0x07, 0x79, 0x35, 0x0a,
-    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-  },
-
-  .exp_dk = {
-    0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-    0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-    0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-    0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-    0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-    0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-    0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-    0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-    0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-    0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-    0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-    0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-    0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-    0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-    0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-    0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-    0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-    0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-    0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-    0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-    0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-    0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-    0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-    0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-    0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-    0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-    0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-    0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-    0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-    0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-    0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-    0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-    0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-    0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-    0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-    0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-    0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-    0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-    0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-    0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-    0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-    0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-    0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-    0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-    0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-    0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-    0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-    0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-    0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-    0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-    0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-    0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-    0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-    0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-    0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-    0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-    0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-    0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-    0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-    0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-    0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-    0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-    0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-    0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-    0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-    0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-    0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-    0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-    0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-    0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-    0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-    0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-    0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-    0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-    0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-    0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-    0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-    0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-    0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-    0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-    0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-    0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-    0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-    0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-    0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-    0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-    0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-    0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-    0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-    0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-    0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-    0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-    0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-    0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-    0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-    0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-  },
-}, {
-  // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-  .name = "Key Generation -- ML-KEM-768",
-  .seed = {
-    0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6, 0xEE, 0x86, 0xFE, 0x00,
-    0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34, 0x86, 0x0F, 0x5F, 0xF7,
-    0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
-  },
-
-  .exp_ek = {
-    0xD2, 0xE6, 0x9A, 0x05, 0x53, 0x4A, 0x72, 0x32, 0xC5, 0xF1, 0xB7, 0x66,
-    0xE9, 0x3A, 0x5E, 0xE2, 0xEA, 0x1B, 0x26, 0xE8, 0x60, 0xA3, 0x44, 0x1A,
-    0xDE, 0xA9, 0x1E, 0xDB, 0x78, 0x2C, 0xAB, 0xC8, 0xA5, 0xD0, 0x11, 0xA2,
-    0x1B, 0xC3, 0x88, 0xE7, 0xF4, 0x86, 0xF0, 0xB7, 0x99, 0x30, 0x79, 0xAE,
-    0x3F, 0x1A, 0x7C, 0x85, 0xD2, 0x7D, 0x0F, 0x49, 0x21, 0x84, 0xD5, 0x90,
-    0x62, 0x14, 0x2B, 0x76, 0xA4, 0x37, 0x34, 0xA9, 0x0D, 0x55, 0x6A, 0x95,
-    0xDC, 0x48, 0x3D, 0xD8, 0x21, 0x04, 0xED, 0x58, 0xCA, 0x15, 0x71, 0xC3,
-    0x96, 0x85, 0x82, 0x79, 0x51, 0x43, 0x4C, 0xC1, 0x00, 0x1A, 0xA4, 0xC8,
-    0x13, 0x26, 0x1E, 0x4F, 0x93, 0x02, 0x8E, 0x14, 0xCD, 0x08, 0xF7, 0x68,
-    0xA4, 0x54, 0x31, 0x0C, 0x3B, 0x01, 0x0C, 0x83, 0xB7, 0x4D, 0x04, 0xA5,
-    0x7B, 0xB9, 0x77, 0xB3, 0xD8, 0xBC, 0xF3, 0xAA, 0xA7, 0x8C, 0xA1, 0x2B,
-    0x78, 0xF0, 0x10, 0xD9, 0x51, 0x34, 0x92, 0x8A, 0x5E, 0x5D, 0x96, 0xA0,
-    0x29, 0xB4, 0x42, 0xA4, 0x18, 0x88, 0x03, 0x8B, 0x29, 0xC2, 0xF1, 0x22,
-    0xB0, 0xB6, 0xB3, 0xAF, 0x12, 0x1A, 0xEA, 0x29, 0xA0, 0x55, 0x53, 0xBD,
-    0xF1, 0xDB, 0x60, 0x7A, 0xFB, 0x17, 0x00, 0x18, 0x60, 0xAF, 0x18, 0x23,
-    0xBC, 0xF0, 0x3D, 0xB3, 0xB4, 0x41, 0xDA, 0x16, 0x3A, 0x28, 0xC5, 0x23,
-    0xA5, 0xFB, 0x46, 0x69, 0xA6, 0x42, 0x34, 0xA4, 0xBC, 0xD1, 0x21, 0x7F,
-    0xF2, 0x63, 0x5B, 0xD9, 0x76, 0x80, 0xFF, 0x93, 0x8D, 0xBC, 0xF1, 0x0E,
-    0x95, 0x32, 0xA9, 0xA7, 0x9A, 0x5B, 0x07, 0x3A, 0x9E, 0x8D, 0xB2, 0x12,
-    0x3D, 0x21, 0x0F, 0xAE, 0xA2, 0x00, 0xB6, 0x64, 0x83, 0x8E, 0x80, 0x07,
-    0x1F, 0x2B, 0xA2, 0x54, 0xAA, 0xC8, 0x90, 0xA4, 0x6E, 0x28, 0xEC, 0x34,
-    0x2D, 0x92, 0x81, 0x2B, 0x01, 0x59, 0x30, 0x71, 0x65, 0x7E, 0x7A, 0x3A,
-    0x4A, 0x75, 0xCB, 0x3D, 0x52, 0x79, 0xCE, 0x88, 0x40, 0x5A, 0xC5, 0xAD,
-    0xAC, 0xB2, 0x05, 0x1E, 0x02, 0x2E, 0xE0, 0xAC, 0x9B, 0xBF, 0xE3, 0x2D,
-    0xEF, 0x98, 0x66, 0x7E, 0xD3, 0x47, 0xAD, 0xCB, 0x39, 0x30, 0xF3, 0xCA,
-    0xD0, 0x31, 0x39, 0x1B, 0x70, 0x9A, 0x4E, 0x61, 0xB8, 0xDD, 0x4B, 0x3F,
-    0xB7, 0x41, 0xB5, 0xBD, 0x60, 0xBF, 0x30, 0x40, 0x15, 0xEE, 0x75, 0x46,
-    0xA2, 0x4B, 0x59, 0xEA, 0xDC, 0xA1, 0x37, 0xC7, 0x12, 0x50, 0x74, 0x72,
-    0x6B, 0x76, 0x86, 0xEC, 0x55, 0x1B, 0x7B, 0xC2, 0x6B, 0xBD, 0xB2, 0x0F,
-    0xC3, 0x78, 0x35, 0x34, 0xE3, 0x4E, 0xE1, 0xF1, 0xBC, 0x6B, 0x77, 0xAB,
-    0x49, 0xA6, 0x66, 0x78, 0x46, 0x97, 0x57, 0x78, 0xC3, 0xC5, 0x36, 0x83,
-    0x04, 0x50, 0xA3, 0xFA, 0x91, 0x02, 0x59, 0x72, 0x2F, 0x3F, 0x80, 0x6E,
-    0x6E, 0xB4, 0xB9, 0x34, 0x67, 0x63, 0xFE, 0xF0, 0x92, 0x2B, 0xC4, 0xB6,
-    0xEB, 0x38, 0x26, 0xAF, 0xF2, 0x4E, 0xAD, 0xC6, 0xCF, 0x6E, 0x47, 0x7C,
-    0x2E, 0x05, 0x5C, 0xFB, 0x7A, 0x90, 0xA5, 0x5C, 0x06, 0xD0, 0xB2, 0xA2,
-    0xF5, 0x11, 0x60, 0x69, 0xE6, 0x4A, 0x5B, 0x50, 0x78, 0xC0, 0x57, 0x7B,
-    0xC8, 0xE7, 0x90, 0x0E, 0xA7, 0x1C, 0x34, 0x1C, 0x02, 0xAD, 0x85, 0x4E,
-    0xA5, 0xA0, 0x1A, 0xF2, 0xA6, 0x05, 0xCB, 0x20, 0x68, 0xD5, 0x24, 0x38,
-    0xCD, 0xDC, 0x60, 0xB0, 0x38, 0x82, 0xCC, 0x02, 0x4D, 0x13, 0x04, 0x5F,
-    0x2B, 0xA6, 0xB0, 0xF4, 0x46, 0xAA, 0xA5, 0x95, 0x87, 0x60, 0x61, 0x79,
-    0x45, 0x37, 0x1F, 0xD7, 0x8C, 0x28, 0xA4, 0x06, 0x77, 0xA6, 0xE7, 0x2F,
-    0x51, 0x3B, 0x9E, 0x06, 0x67, 0xA9, 0xBA, 0xF4, 0x46, 0xC1, 0xBA, 0x93,
-    0x1B, 0xA8, 0x18, 0x34, 0x23, 0x47, 0x92, 0xA2, 0xA2, 0xB2, 0xB3, 0x70,
-    0x1F, 0x31, 0xB7, 0xCF, 0x46, 0x7C, 0x80, 0xF1, 0x98, 0x11, 0x41, 0xBB,
-    0x45, 0x77, 0x93, 0xE1, 0x30, 0x70, 0x91, 0xC4, 0x8B, 0x59, 0x14, 0x64,
-    0x6A, 0x60, 0xCE, 0x1A, 0x30, 0x15, 0x43, 0x77, 0x9D, 0x7C, 0x33, 0x42,
-    0xAD, 0x17, 0x97, 0x96, 0xC2, 0xC4, 0x40, 0xD9, 0x9D, 0xF9, 0xD4, 0x1B,
-    0x52, 0xE3, 0x26, 0x25, 0xA8, 0x2A, 0xA5, 0xF5, 0x79, 0xA9, 0x92, 0x0B,
-    0xFF, 0xBA, 0x96, 0x4F, 0xA7, 0x0D, 0xB2, 0x59, 0xC8, 0x5E, 0x68, 0xC8,
-    0x13, 0x81, 0x7B, 0x13, 0x47, 0xBF, 0x19, 0x81, 0x4D, 0xA5, 0xE9, 0x36,
-    0x4A, 0x46, 0x45, 0xE6, 0x21, 0x92, 0x3D, 0x95, 0x5C, 0x21, 0x1A, 0x55,
-    0xD3, 0x55, 0xC8, 0x16, 0xDA, 0x04, 0x73, 0x0A, 0xA3, 0x24, 0x08, 0x5E,
-    0x62, 0x2B, 0x51, 0xD6, 0x10, 0x9B, 0x49, 0xF6, 0x73, 0xAD, 0xD0, 0x0E,
-    0x41, 0x47, 0x55, 0xC8, 0x02, 0x4A, 0xA0, 0x16, 0x4F, 0x24, 0x55, 0x6D,
-    0xED, 0x96, 0x3D, 0x61, 0x14, 0x38, 0x56, 0xCB, 0x4F, 0xF0, 0x56, 0x7E,
-    0x33, 0x20, 0x73, 0x0D, 0xBC, 0xBF, 0x12, 0xF6, 0x6E, 0x2B, 0x70, 0xB2,
-    0x00, 0x54, 0xA6, 0xDE, 0xA4, 0x26, 0x14, 0xB5, 0x0E, 0xF7, 0x2B, 0x15,
-    0x6F, 0x51, 0x49, 0xFC, 0x26, 0x3D, 0xD7, 0xE0, 0x39, 0xC5, 0x5A, 0x3E,
-    0xE9, 0x82, 0x7D, 0xF9, 0x2C, 0x56, 0x5D, 0x24, 0xC5, 0x5E, 0x0A, 0x81,
-    0xC6, 0x49, 0x46, 0x95, 0x34, 0x4D, 0x94, 0x87, 0x48, 0xAF, 0xBA, 0x9F,
-    0x76, 0x2C, 0x0E, 0xA9, 0x0B, 0xB7, 0x24, 0x89, 0x79, 0x02, 0x00, 0x07,
-    0x75, 0x61, 0x39, 0x49, 0x60, 0x2C, 0x48, 0xC7, 0x8A, 0x94, 0x40, 0x67,
-    0x8C, 0x24, 0x08, 0x6D, 0x32, 0x6D, 0x79, 0x64, 0x3B, 0xAF, 0x70, 0x36,
-    0xC6, 0x6C, 0x7E, 0x02, 0x6A, 0xAE, 0xFD, 0xA2, 0x80, 0x7A, 0x60, 0xBD,
-    0x7F, 0xC9, 0x13, 0x63, 0xBB, 0x02, 0x34, 0xA5, 0x90, 0x98, 0x4A, 0xA0,
-    0x11, 0xF1, 0x1D, 0x40, 0x26, 0x82, 0x18, 0xA1, 0x58, 0x83, 0x77, 0xB3,
-    0xD7, 0x67, 0x1B, 0x8B, 0x99, 0x78, 0x99, 0x19, 0xB8, 0x6E, 0xE8, 0x2B,
-    0x18, 0xEC, 0x22, 0xD4, 0xE8, 0x0A, 0x1F, 0x27, 0x85, 0x3D, 0x88, 0x94,
-    0x19, 0xD4, 0x60, 0xDE, 0xF7, 0x56, 0x7A, 0xA4, 0x56, 0x79, 0x69, 0xC4,
-    0x30, 0x48, 0xC3, 0x2B, 0x84, 0x62, 0xA9, 0xC9, 0x38, 0x6E, 0xB3, 0x15,
-    0x2A, 0x69, 0x76, 0xAA, 0x78, 0x3C, 0xDD, 0x1A, 0x8C, 0x57, 0xA9, 0xB6,
-    0xBB, 0xD8, 0x37, 0xA0, 0x06, 0x24, 0xB5, 0x8B, 0x4B, 0xA3, 0xDB, 0xB6,
-    0x3B, 0xB8, 0x20, 0x0E, 0x7B, 0xC8, 0x88, 0x81, 0xBE, 0xBD, 0xA9, 0x25,
-    0xBC, 0xA0, 0x28, 0xE2, 0x91, 0xAA, 0x1C, 0x22, 0x53, 0x9C, 0xD0, 0x4F,
-    0x90, 0x09, 0x0D, 0x7F, 0x74, 0x10, 0x8C, 0x32, 0xB8, 0x02, 0x2C, 0x15,
-    0x91, 0xC8, 0x81, 0xE7, 0x63, 0x04, 0xE2, 0x40, 0x81, 0x90, 0xE2, 0x0F,
-    0x09, 0xA5, 0x4F, 0xC2, 0x34, 0x20, 0xE2, 0x62, 0x0E, 0x9D, 0x87, 0xA3,
-    0x10, 0x8A, 0x94, 0xFE, 0xEA, 0x72, 0xD5, 0xAB, 0x7F, 0xCF, 0xB9, 0x72,
-    0xE6, 0x56, 0x1B, 0x1A, 0x7B, 0x06, 0x2F, 0x1A, 0x68, 0x2E, 0x02, 0x0A,
-    0xA2, 0x56, 0x28, 0x12, 0xB2, 0x96, 0x54, 0x7B, 0x91, 0x78, 0x24, 0xCD,
-    0xB8, 0x8C, 0x58, 0x2B, 0x5A, 0x68, 0x90, 0x17, 0x7B, 0xC7, 0x0C, 0x91,
-    0xAC, 0xAC, 0x9A, 0xBE, 0x29, 0x0A, 0xEB, 0x2C, 0x34, 0xA7, 0xE2, 0x36,
-    0x89, 0x55, 0xCB, 0x45, 0x6A, 0x34, 0x53, 0x68, 0xAB, 0xE3, 0xB9, 0x1B,
-    0x47, 0xFC, 0x30, 0xB0, 0x23, 0x3A, 0x09, 0xBA, 0x79, 0xFB, 0x11, 0x23,
-    0x8A, 0xC5, 0x08, 0xCC, 0xE6, 0x10, 0x95, 0xF8, 0x54, 0xC2, 0x32, 0x04,
-    0xA8, 0xD3, 0x6B, 0xFC, 0x2C, 0x6E, 0x05, 0xA7, 0x2A, 0xF5, 0x24, 0x4B,
-    0x17, 0xC1, 0x21, 0x01, 0xE0, 0x14, 0x51, 0x57, 0x0E, 0xB1, 0x10, 0x56,
-    0x7E, 0x85, 0x0E, 0x79, 0xC0, 0x00, 0x14, 0x24, 0x41, 0xFE, 0x41, 0x60,
-    0x02, 0x75, 0x45, 0xF6, 0x29, 0x0E, 0x85, 0x45, 0x1B, 0x80, 0x23, 0x4A,
-    0x94, 0x06, 0xC3, 0x90, 0xB0, 0xCE, 0xA3, 0xC8, 0x33, 0x5D, 0x4C, 0x6F,
-    0x85, 0x50, 0xB5, 0x44, 0xC9, 0x34, 0x3E, 0x61, 0xBA, 0x1C, 0x84, 0x89,
-    0xD1, 0xB0, 0x39, 0x97, 0x39, 0x16, 0x8A, 0xF7, 0x40, 0xA4, 0x81, 0xB0,
-    0xF5, 0xC3, 0x37, 0x25, 0x30, 0xCA, 0x06, 0xB5, 0x08, 0xEC, 0xE8, 0x38,
-    0xAB, 0x78, 0xBE, 0xE1, 0xE5, 0x97, 0xA9, 0xB1, 0x4F, 0x6A, 0xEC, 0x7A,
-    0x3B, 0xD1, 0xAA, 0x8D, 0x10, 0xBA, 0xC2, 0x3B, 0x98, 0x02, 0x90, 0x2C,
-    0xD5, 0x29, 0xAB, 0x6E, 0xF5, 0x4D, 0xB3, 0x11, 0x0C, 0xFB, 0x56, 0x1E,
-    0x7E, 0x69, 0x48, 0xE6, 0x52, 0x81, 0x25, 0x04, 0x16, 0xC3, 0x49, 0xC8,
-    0x10, 0x0B, 0x3B, 0x4D, 0x3D, 0x0F, 0x62, 0xAC, 0xAD, 0x8D, 0x16, 0x11,
-    0x75, 0xB1, 0x34, 0xF7, 0x56, 0x49, 0x37, 0xCD,
-  },
-
-  .exp_dk = {
-    0x19, 0xD7, 0x4A, 0xD5, 0x47, 0x2A, 0x8B, 0x2B, 0xAA, 0xD2, 0xA5, 0x67,
-    0x02, 0xC9, 0xB3, 0xB5, 0x51, 0x0E, 0xF3, 0x92, 0x48, 0x58, 0x06, 0x1D,
-    0x57, 0xF9, 0x0D, 0xD9, 0xA1, 0xA0, 0x1F, 0xEC, 0x2F, 0x57, 0xC5, 0x1A,
-    0x88, 0x88, 0x05, 0x34, 0x1B, 0x61, 0x7C, 0x51, 0x55, 0x39, 0x59, 0x77,
-    0x50, 0x83, 0x5C, 0x3E, 0xD7, 0xA0, 0x33, 0xB0, 0x39, 0xD7, 0x24, 0x91,
-    0x33, 0x2C, 0x5D, 0xF4, 0xA6, 0x9B, 0x6D, 0xF2, 0x61, 0x71, 0x87, 0x7A,
-    0xD1, 0xE5, 0x0A, 0xC5, 0x01, 0x00, 0xBE, 0x47, 0x28, 0x78, 0x66, 0x85,
-    0xDA, 0x7A, 0x73, 0x9E, 0x84, 0x3F, 0xF0, 0xD4, 0x59, 0x22, 0xD7, 0x28,
-    0x1E, 0x21, 0x0D, 0x5E, 0x82, 0xB9, 0x44, 0x65, 0x2F, 0x48, 0x62, 0xCF,
-    0xB3, 0xD9, 0x02, 0xDE, 0x60, 0xAF, 0xD0, 0xA1, 0x64, 0x47, 0x1B, 0x26,
-    0x14, 0x4A, 0x1D, 0x7A, 0x38, 0x09, 0x65, 0x03, 0x09, 0x59, 0x11, 0x76,
-    0x2E, 0xBA, 0x79, 0x62, 0xC4, 0x51, 0x1D, 0x05, 0xA1, 0x28, 0xF2, 0x78,
-    0x1E, 0xCB, 0x3D, 0x1F, 0x5B, 0xB1, 0x24, 0x42, 0x37, 0x61, 0x1A, 0xBA,
-    0xB9, 0x24, 0x99, 0x1F, 0x8A, 0x27, 0x32, 0xE2, 0x70, 0x32, 0x35, 0x79,
-    0x20, 0xF1, 0x97, 0xC7, 0x69, 0x2D, 0x60, 0xA9, 0x44, 0x44, 0x72, 0x25,
-    0x8C, 0xB4, 0x57, 0xC1, 0xB7, 0x1B, 0x77, 0x99, 0x54, 0x69, 0xF3, 0xA9,
-    0x62, 0xF3, 0xAB, 0xA6, 0x69, 0x96, 0x14, 0xFC, 0xCC, 0xEA, 0x74, 0x1E,
-    0x21, 0xC6, 0x00, 0xC4, 0x35, 0x7B, 0xBF, 0xAB, 0x45, 0x29, 0x27, 0xC3,
-    0xD4, 0x41, 0xBF, 0x8E, 0xD7, 0x31, 0x52, 0xF7, 0x5C, 0x08, 0xF5, 0x40,
-    0xE1, 0x86, 0xAC, 0xCA, 0x33, 0x26, 0xF4, 0x22, 0xC8, 0x4B, 0x98, 0x8D,
-    0x77, 0xE6, 0x1A, 0xE6, 0x18, 0x59, 0xCF, 0x85, 0x41, 0xF8, 0x92, 0x09,
-    0xE4, 0x98, 0x30, 0x40, 0xC5, 0x61, 0x76, 0x54, 0x80, 0x88, 0x52, 0xB6,
-    0x49, 0xB8, 0x99, 0xA3, 0x99, 0xAE, 0xC2, 0xC8, 0xBB, 0xA8, 0xA5, 0x42,
-    0xF3, 0x45, 0xAB, 0xF2, 0x81, 0x3F, 0x65, 0xE9, 0xA7, 0x91, 0xD3, 0x2C,
-    0xC2, 0xD7, 0x60, 0x26, 0xFB, 0x8D, 0x0C, 0x94, 0xB6, 0x57, 0x48, 0x9A,
-    0xBB, 0x48, 0x7D, 0xA4, 0xA2, 0xC0, 0xE3, 0x86, 0x8D, 0x3C, 0xF4, 0x7F,
-    0x1C, 0xBB, 0x2F, 0xA7, 0x9C, 0x53, 0xCF, 0xF6, 0x26, 0x47, 0x77, 0xC0,
-    0x9B, 0x17, 0x7C, 0x91, 0x31, 0x54, 0x84, 0xD2, 0xB3, 0x0B, 0x0C, 0xA2,
-    0x1F, 0x55, 0xAD, 0xD2, 0x3C, 0x57, 0xE1, 0x91, 0x1C, 0x3F, 0x08, 0x6B,
-    0xCA, 0xD2, 0x17, 0x98, 0x48, 0x6E, 0xB4, 0x7B, 0x7C, 0x58, 0x57, 0x73,
-    0x81, 0xC0, 0x9F, 0x52, 0x52, 0x58, 0x2D, 0x1B, 0x27, 0xA7, 0xD5, 0xB8,
-    0xE0, 0x60, 0xCE, 0x78, 0x20, 0x9C, 0xC8, 0x2B, 0xAE, 0x4D, 0xA6, 0x06,
-    0x80, 0x0C, 0x8D, 0xB1, 0x26, 0x8F, 0x7A, 0xD2, 0xB7, 0x93, 0xA4, 0x4F,
-    0x34, 0x61, 0x2C, 0xCE, 0xA3, 0x1C, 0xE7, 0xD7, 0x96, 0xA6, 0x5A, 0x26,
-    0x91, 0xD6, 0x15, 0x00, 0x62, 0x5F, 0x83, 0xE7, 0xBE, 0x57, 0x07, 0x7E,
-    0xE9, 0xC1, 0xB8, 0xC1, 0xCA, 0xA1, 0x37, 0xCC, 0x4B, 0x65, 0x73, 0x30,
-    0x8C, 0x19, 0x66, 0x8B, 0x24, 0xB0, 0x1E, 0x96, 0x69, 0x03, 0xAB, 0xBC,
-    0xB7, 0x9B, 0x67, 0xBE, 0x0A, 0x3E, 0x3E, 0x05, 0x8A, 0xAD, 0xA1, 0x89,
-    0xB9, 0xEA, 0x80, 0x35, 0x9A, 0xC2, 0x6F, 0x4C, 0x5C, 0x53, 0x73, 0x5F,
-    0xE4, 0xFC, 0x35, 0x24, 0x73, 0x37, 0x76, 0x0C, 0xCA, 0x35, 0x29, 0xB8,
-    0xD2, 0x66, 0xBB, 0x6C, 0x48, 0x01, 0x06, 0x54, 0xCD, 0xBC, 0x5A, 0x3E,
-    0x97, 0x57, 0x52, 0x46, 0x75, 0xAB, 0xC4, 0x13, 0x13, 0x0C, 0xC2, 0x70,
-    0x1F, 0x28, 0x93, 0x3E, 0xAB, 0xB8, 0x39, 0x2B, 0x0D, 0x6D, 0x05, 0x9C,
-    0xFC, 0x3A, 0x30, 0x32, 0x6C, 0x4F, 0xCC, 0x81, 0x0B, 0x37, 0xA4, 0x74,
-    0x8C, 0x1C, 0x53, 0x92, 0x8A, 0x49, 0x13, 0xE4, 0x8B, 0x18, 0x66, 0x97,
-    0x16, 0x2C, 0x33, 0xFF, 0xFB, 0x06, 0xDD, 0x51, 0x61, 0xC8, 0x63, 0x9D,
-    0xB1, 0x95, 0xC6, 0xCA, 0x64, 0x82, 0x9B, 0x2B, 0x3A, 0x2E, 0x4C, 0x96,
-    0x83, 0xB6, 0x6D, 0xF7, 0xFB, 0x19, 0x09, 0x90, 0x4E, 0x00, 0x02, 0x0D,
-    0xBA, 0x13, 0x4E, 0x02, 0xA1, 0x68, 0xD7, 0x6A, 0xC0, 0x76, 0xBB, 0x77,
-    0xD4, 0xDC, 0x84, 0x96, 0xB4, 0xBB, 0xE7, 0xB4, 0x69, 0x0B, 0xA2, 0x9B,
-    0x62, 0xA9, 0x1A, 0xBE, 0x72, 0xBE, 0xF3, 0x23, 0xA4, 0x4C, 0x89, 0x03,
-    0xE4, 0x82, 0xB6, 0x0D, 0x99, 0xBA, 0x61, 0xD1, 0xBB, 0xCF, 0x9C, 0xB9,
-    0x67, 0x35, 0x34, 0xC1, 0xD6, 0x47, 0x66, 0x23, 0x74, 0xEE, 0x2C, 0x7C,
-    0x5F, 0x00, 0x81, 0xBA, 0xD1, 0x49, 0xF4, 0x42, 0x06, 0x71, 0x76, 0x84,
-    0xD9, 0x74, 0x6B, 0x20, 0x48, 0x63, 0x3A, 0xF7, 0xA6, 0x8C, 0x68, 0x65,
-    0xFB, 0x59, 0x03, 0x58, 0xD8, 0xCF, 0x82, 0x14, 0x58, 0x36, 0x9B, 0x0C,
-    0x31, 0xEB, 0x59, 0x7C, 0xF5, 0xBE, 0x78, 0xEB, 0x48, 0x0E, 0xA0, 0x4E,
-    0x35, 0xFA, 0xCC, 0x38, 0x03, 0x72, 0xC8, 0xC0, 0xA0, 0x4D, 0xE2, 0x76,
-    0xB1, 0xA7, 0x21, 0x21, 0xE5, 0x96, 0xCB, 0xB2, 0x5E, 0xF7, 0x53, 0x6A,
-    0xD3, 0x80, 0x41, 0x84, 0xA8, 0x7B, 0xDF, 0xB5, 0xA7, 0x69, 0x16, 0x0B,
-    0xFB, 0xB0, 0xCA, 0x3C, 0x36, 0x07, 0x90, 0xE5, 0x56, 0x2B, 0xB7, 0x8E,
-    0xFE, 0x00, 0x69, 0xC7, 0x74, 0x83, 0xAD, 0x35, 0xCA, 0xC2, 0x37, 0xC6,
-    0x1D, 0xE7, 0x8A, 0x7D, 0xB4, 0x6F, 0xC9, 0x17, 0x12, 0x4C, 0xA1, 0x75,
-    0x10, 0xDB, 0x7D, 0xA2, 0x18, 0x89, 0x0F, 0x44, 0x8E, 0xF6, 0x31, 0x86,
-    0x13, 0xA1, 0xC9, 0x7C, 0x92, 0x8E, 0x2B, 0x7B, 0x6A, 0x54, 0x61, 0x7B,
-    0xCC, 0xB6, 0xCD, 0xF2, 0x78, 0xAE, 0x54, 0x2B, 0x56, 0xAD, 0x7B, 0xB5,
-    0xEC, 0xD8, 0xC4, 0x6A, 0x66, 0xC4, 0xFA, 0x09, 0x50, 0xCE, 0x41, 0x35,
-    0x2C, 0xB8, 0x57, 0x11, 0x89, 0x04, 0x58, 0xF2, 0x99, 0xBF, 0x40, 0xBA,
-    0x6F, 0xF2, 0xC0, 0x71, 0x38, 0x62, 0x26, 0x8B, 0x5F, 0x08, 0xE4, 0x98,
-    0x45, 0xB0, 0x94, 0x43, 0x99, 0x7A, 0xB2, 0x9A, 0x62, 0x07, 0x3C, 0x0D,
-    0x98, 0x18, 0xC0, 0x20, 0x16, 0x7D, 0x47, 0x49, 0x23, 0x1C, 0x05, 0x9E,
-    0x6F, 0x48, 0x3F, 0x97, 0x68, 0x17, 0xC9, 0x0C, 0x20, 0xA9, 0xC9, 0x37,
-    0x07, 0x9C, 0x2D, 0x4B, 0xE3, 0x0D, 0xA9, 0x74, 0xA9, 0x7E, 0x4B, 0xC5,
-    0x3E, 0xD9, 0x6A, 0x55, 0x16, 0x9F, 0x4A, 0x23, 0xA3, 0xEA, 0x24, 0xBD,
-    0x8E, 0x01, 0xB8, 0xFA, 0xEB, 0x95, 0xD4, 0xE5, 0x3F, 0xFF, 0xEC, 0xB6,
-    0x08, 0x02, 0xC3, 0x88, 0xA4, 0x0F, 0x46, 0x60, 0x54, 0x0B, 0x1B, 0x1F,
-    0x81, 0x76, 0xC9, 0x81, 0x1B, 0xB2, 0x6A, 0x68, 0x3C, 0xA7, 0x89, 0x56,
-    0x4A, 0x29, 0x40, 0xFC, 0xEB, 0x2C, 0xE6, 0xA9, 0x2A, 0x1E, 0xE4, 0x5E,
-    0xE4, 0xC3, 0x18, 0x57, 0xC9, 0xB9, 0xB8, 0xB5, 0x6A, 0x79, 0xD9, 0x5A,
-    0x46, 0xCB, 0x39, 0x3A, 0x31, 0xA2, 0x73, 0x7B, 0xAF, 0xEA, 0x6C, 0x81,
-    0x06, 0x6A, 0x67, 0x2B, 0x34, 0xC1, 0x0A, 0xA9, 0x89, 0x57, 0xC9, 0x17,
-    0x66, 0xB7, 0x30, 0x03, 0x6A, 0x56, 0xD9, 0x40, 0xAA, 0x4E, 0xBC, 0xB7,
-    0x58, 0xB0, 0x83, 0x51, 0xE2, 0xC4, 0xFD, 0x19, 0x45, 0x3B, 0xF3, 0xA6,
-    0x29, 0x2A, 0x99, 0x3D, 0x67, 0xC7, 0xEC, 0xC7, 0x2F, 0x42, 0xF7, 0x82,
-    0xE9, 0xEB, 0xAA, 0x1A, 0x8B, 0x3B, 0x0F, 0x56, 0x7A, 0xB3, 0x94, 0x21,
-    0xF6, 0xA6, 0x7A, 0x6B, 0x84, 0x10, 0xFD, 0x94, 0xA7, 0x21, 0xD3, 0x65,
-    0xF1, 0x63, 0x9E, 0x9D, 0xDA, 0xBF, 0xD0, 0xA6, 0xCE, 0x1A, 0x46, 0x05,
-    0xBD, 0x2B, 0x1C, 0x9B, 0x97, 0x7B, 0xD1, 0xEA, 0x32, 0x86, 0x73, 0x68,
-    0xD6, 0xE6, 0x39, 0xD0, 0x19, 0xAC, 0x10, 0x18, 0x53, 0xBC, 0x15, 0x3C,
-    0x86, 0xF8, 0x52, 0x80, 0xFC, 0x76, 0x3B, 0xA2, 0x4F, 0xB5, 0x7A, 0x29,
-    0x6C, 0xB1, 0x2D, 0x32, 0xE0, 0x8A, 0xB3, 0x2C, 0x55, 0x1D, 0x5A, 0x45,
-    0xA4, 0xA2, 0x8F, 0x9A, 0xDC, 0x28, 0xF7, 0xA2, 0x90, 0x0E, 0x25, 0xA4,
-    0x0B, 0x51, 0x90, 0xB2, 0x2A, 0xB1, 0x9D, 0xFB, 0x24, 0x6F, 0x42, 0xB2,
-    0x4F, 0x97, 0xCC, 0xA9, 0xB0, 0x9B, 0xEA, 0xD2, 0x46, 0xE1, 0x73, 0x4F,
-    0x44, 0x66, 0x77, 0xB3, 0x8B, 0x75, 0x22, 0xB7, 0x80, 0x72, 0x7C, 0x11,
-    0x74, 0x40, 0xC9, 0xF1, 0xA0, 0x24, 0x52, 0x0C, 0x14, 0x1A, 0x69, 0xCD,
-  },
-}};
-
-static void test_pke768_keygen(void) {
-  for (size_t i = 0; i < sizeof(PKE768_KEYGEN_TESTS)/sizeof(PKE768_KEYGEN_TESTS[0]); i++) {
-    // generate pke768 ek and dk from seed
-    uint8_t got_ek[PKE768_EK_SIZE] = { 0 }, got_dk[PKE768_DK_SIZE] = { 0 };
-    pke768_keygen(got_ek, got_dk, PKE768_KEYGEN_TESTS[i].seed);
-
-    // check for expected ek
-    if (memcmp(&got_ek, &(PKE768_KEYGEN_TESTS[i].exp_ek), sizeof(got_ek))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ek", PKE768_KEYGEN_TESTS[i].name);
-      fail_test(__func__, name, got_ek, sizeof(got_ek), PKE768_KEYGEN_TESTS[i].exp_ek, sizeof(got_ek));
-    }
-
-    // check for expected dk
-    if (memcmp(&got_dk, &(PKE768_KEYGEN_TESTS[i].exp_dk), sizeof(got_dk))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - dk", PKE768_KEYGEN_TESTS[i].name);
-      fail_test(__func__, name, got_dk, sizeof(got_dk), PKE768_KEYGEN_TESTS[i].exp_dk, sizeof(got_dk));
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t ek[PKE768_EK_SIZE]; // test ek (1184 bytes)
-  const uint8_t m[32]; // test message (32 bytes)
-  const uint8_t enc_rand[32]; // test randomness (32 bytes)
-  const uint8_t exp[PKE768_CT_SIZE]; // expected ciphertext (1088 bytes)
-} PKE768_ENCRYPT_TESTS[] = {{
-  .name = "rand = 0, message = 1",
-  .ek = {
-    0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
-    0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
-    0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
-    0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
-    0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
-    0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
-    0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
-    0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
-    0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
-    0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
-    0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
-    0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
-    0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
-    0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
-    0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
-    0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
-    0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
-    0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
-    0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
-    0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
-    0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
-    0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
-    0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
-    0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
-    0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
-    0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
-    0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
-    0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
-    0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
-    0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
-    0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
-    0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
-    0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
-    0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
-    0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
-    0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
-    0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
-    0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
-    0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
-    0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
-    0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
-    0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
-    0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
-    0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
-    0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
-    0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
-    0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
-    0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
-    0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
-    0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
-    0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
-    0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
-    0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
-    0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
-    0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
-    0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
-    0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
-    0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
-    0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
-    0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
-    0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
-    0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
-    0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
-    0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
-    0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
-    0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
-    0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
-    0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
-    0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
-    0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
-    0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
-    0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
-    0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
-    0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
-    0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
-    0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
-    0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
-    0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
-    0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
-    0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
-    0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
-    0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
-    0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
-    0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
-    0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
-    0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
-    0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
-    0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
-    0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
-    0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
-    0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
-    0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
-    0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
-    0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
-    0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
-    0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
-    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-  },
-
-  .m = { 1, 0 },
-  .enc_rand = { 0 },
-
-  .exp = {
-    0x04, 0x9d, 0x1d, 0x88, 0x6d, 0xa9, 0xfd, 0xf5, 0xee, 0xa3, 0x5c, 0xbb,
-    0x91, 0x7a, 0x8c, 0xf6, 0x8e, 0x0a, 0xf5, 0x16, 0xc3, 0x7a, 0xd5, 0x98,
-    0xe6, 0x59, 0x2a, 0xb2, 0x6a, 0x2e, 0x06, 0xc7, 0xfb, 0x72, 0x57, 0x15,
-    0x23, 0x86, 0x02, 0x3b, 0x43, 0xf2, 0x80, 0x3c, 0x00, 0x31, 0x2a, 0x6e,
-    0x4d, 0x93, 0x7b, 0xbb, 0xa0, 0x5e, 0x52, 0x87, 0xbc, 0x2f, 0x1c, 0x1a,
-    0xba, 0x64, 0xb4, 0x09, 0x62, 0x90, 0x11, 0x19, 0x1f, 0x20, 0x64, 0xbd,
-    0x20, 0xe8, 0xd8, 0xa5, 0x19, 0x55, 0xde, 0x96, 0x87, 0x74, 0x2a, 0xc6,
-    0xae, 0xb9, 0xf9, 0xeb, 0x43, 0x56, 0x2a, 0x9c, 0xd5, 0x81, 0xb9, 0xcf,
-    0xc0, 0x9e, 0x21, 0x6b, 0x4b, 0xf0, 0xa0, 0x43, 0x2a, 0xc3, 0xf4, 0x53,
-    0xe8, 0x55, 0xa3, 0xd2, 0x5e, 0xd4, 0x7e, 0x01, 0xe5, 0x5b, 0x92, 0xd6,
-    0x96, 0x13, 0x7a, 0x97, 0x15, 0xbf, 0x30, 0x7b, 0xfb, 0x42, 0xdc, 0x21,
-    0xb5, 0x1a, 0x09, 0xaa, 0xc5, 0xb8, 0x4a, 0x94, 0x2f, 0xbc, 0x33, 0x88,
-    0xe2, 0x8f, 0xea, 0x98, 0x3c, 0xd5, 0x96, 0xf4, 0x70, 0x11, 0x68, 0x21,
-    0x8d, 0xcb, 0x70, 0x93, 0x86, 0x09, 0x5a, 0x74, 0x12, 0xf0, 0x29, 0x4d,
-    0x84, 0xbb, 0xf7, 0x4f, 0x20, 0xcd, 0xe6, 0x29, 0x0c, 0x73, 0x1a, 0x96,
-    0x05, 0x55, 0xf7, 0x39, 0x1c, 0xc7, 0xaa, 0xd9, 0xd4, 0xe6, 0xcb, 0xb0,
-    0xc7, 0x52, 0x69, 0xe8, 0x22, 0x48, 0xfd, 0x3a, 0x77, 0x15, 0xe8, 0x51,
-    0x02, 0xea, 0xfe, 0x4a, 0xe3, 0x01, 0x14, 0x49, 0x21, 0x47, 0xfc, 0x52,
-    0x43, 0x21, 0xec, 0x99, 0xee, 0x28, 0xeb, 0xfb, 0xb7, 0x40, 0xba, 0x4b,
-    0x4d, 0x4b, 0x35, 0x6b, 0x44, 0x13, 0x7c, 0xca, 0x43, 0x5a, 0x27, 0xc5,
-    0x6b, 0xb7, 0x4a, 0xb4, 0xc3, 0xe0, 0x34, 0x5e, 0xb8, 0x9b, 0xac, 0x6e,
-    0x53, 0xbd, 0xd6, 0xff, 0x46, 0x51, 0x0f, 0xfa, 0x58, 0x56, 0xac, 0x04,
-    0xd6, 0x30, 0xe8, 0x61, 0xd9, 0xb0, 0x07, 0x6b, 0x64, 0xe4, 0x78, 0xa3,
-    0x27, 0x37, 0xda, 0x78, 0x0d, 0xe4, 0x89, 0x38, 0xc7, 0xd0, 0x2b, 0x67,
-    0x60, 0xc1, 0x1f, 0x00, 0x1f, 0x1a, 0xac, 0xd3, 0xf1, 0x65, 0x20, 0x3f,
-    0xec, 0xf4, 0xdd, 0xe4, 0x2d, 0xb2, 0x9e, 0x13, 0x5c, 0x5d, 0xdb, 0x7c,
-    0x61, 0x51, 0x18, 0xb1, 0x6c, 0xc9, 0xa6, 0xc4, 0xd9, 0x0d, 0xad, 0xec,
-    0x5b, 0x03, 0xa7, 0x87, 0x8d, 0xaf, 0x9c, 0x53, 0x44, 0x57, 0x11, 0xf6,
-    0xec, 0xdf, 0x55, 0x67, 0xae, 0x4f, 0xfd, 0x29, 0xde, 0x64, 0x78, 0x19,
-    0x72, 0xc7, 0x1a, 0x3a, 0x4a, 0xff, 0x83, 0x46, 0x01, 0xce, 0x17, 0x80,
-    0x22, 0xc5, 0xac, 0x06, 0x85, 0xcd, 0x72, 0xe7, 0xc0, 0xf5, 0x48, 0x3b,
-    0x4f, 0x26, 0x0a, 0x39, 0x7e, 0xc1, 0x53, 0x42, 0x73, 0x10, 0x38, 0x2b,
-    0xf1, 0xdc, 0xc0, 0x96, 0x91, 0x61, 0x69, 0xa4, 0x79, 0x2d, 0xfb, 0x98,
-    0x5d, 0x1c, 0x5b, 0xb6, 0x87, 0xe0, 0x77, 0x11, 0x65, 0xdd, 0x57, 0xfc,
-    0xd3, 0x52, 0x75, 0x8e, 0xab, 0xc0, 0xbc, 0xd3, 0x89, 0x92, 0x44, 0xa7,
-    0x74, 0x5f, 0x0e, 0xd6, 0x11, 0xa7, 0xd6, 0x4d, 0x82, 0x49, 0xcb, 0x96,
-    0x6a, 0x52, 0x7c, 0xb7, 0xb6, 0xcc, 0x86, 0x0d, 0x45, 0xf8, 0x55, 0x21,
-    0xec, 0x4c, 0x09, 0x5f, 0x24, 0xb2, 0x02, 0x6e, 0x95, 0xfe, 0x32, 0xb4,
-    0x54, 0x52, 0xf5, 0x62, 0x0e, 0x8d, 0xb0, 0x3d, 0x72, 0xaa, 0x79, 0xf9,
-    0xd5, 0x0b, 0xb0, 0xb4, 0x74, 0x51, 0xb8, 0xf5, 0xc3, 0x5d, 0x13, 0x6e,
-    0x07, 0xe7, 0x38, 0x75, 0x7e, 0x50, 0x52, 0xb0, 0x8d, 0xa3, 0xdb, 0x9f,
-    0x65, 0x07, 0xf5, 0x87, 0x6d, 0xae, 0x9c, 0x25, 0xd3, 0xa6, 0xfe, 0x37,
-    0x88, 0x32, 0xad, 0xa9, 0x08, 0xe4, 0x99, 0x05, 0xe3, 0x1f, 0x5a, 0x7f,
-    0xa3, 0xfd, 0x29, 0x6b, 0xd8, 0xf4, 0xb5, 0x1f, 0xd5, 0x67, 0xe2, 0x70,
-    0x72, 0xdc, 0xbe, 0xc3, 0xf5, 0x46, 0x40, 0x5e, 0x31, 0xc9, 0x8e, 0x35,
-    0x09, 0xa2, 0xe8, 0x09, 0x6e, 0x96, 0x07, 0xa3, 0x51, 0x7d, 0x31, 0xd1,
-    0x12, 0x4f, 0x47, 0xc0, 0x27, 0xcb, 0xac, 0xc3, 0x27, 0x3c, 0x0b, 0x62,
-    0x62, 0x9b, 0xc7, 0x36, 0xe4, 0x74, 0x51, 0x86, 0x93, 0x52, 0x95, 0x8c,
-    0x61, 0xbb, 0xe0, 0xab, 0xc4, 0x9d, 0xe0, 0x38, 0x61, 0xc1, 0x12, 0x7c,
-    0xf1, 0x29, 0x7f, 0x27, 0x14, 0x27, 0xab, 0xca, 0x76, 0xf5, 0x31, 0x64,
-    0x44, 0xd3, 0x95, 0x27, 0x5b, 0x09, 0xbb, 0xee, 0x39, 0x14, 0x88, 0x2c,
-    0x3d, 0xe5, 0x21, 0x00, 0xb6, 0x23, 0xb3, 0xe6, 0x96, 0xbb, 0xf0, 0x73,
-    0xb9, 0x74, 0x08, 0x27, 0xfe, 0x26, 0x11, 0x4a, 0xbe, 0xcf, 0x1d, 0x37,
-    0x39, 0xf6, 0x2f, 0x45, 0xb0, 0xb5, 0xc0, 0xb2, 0xd5, 0x10, 0xa6, 0x5e,
-    0x67, 0x22, 0xb7, 0x0c, 0x09, 0x3c, 0xd2, 0xc0, 0x9b, 0x4d, 0x24, 0x8c,
-    0xb4, 0x08, 0xb0, 0x84, 0xa5, 0xff, 0x5b, 0x66, 0x06, 0x81, 0x80, 0x80,
-    0xdc, 0xfa, 0xd1, 0xb7, 0x23, 0x1b, 0x71, 0xa5, 0xd0, 0x96, 0x28, 0x5b,
-    0xb3, 0x1d, 0xd2, 0xdc, 0x68, 0x1a, 0x5a, 0xf1, 0xa3, 0xc8, 0xeb, 0x50,
-    0x4e, 0x7a, 0xc5, 0x3a, 0xfd, 0xeb, 0x25, 0x73, 0x18, 0xd3, 0xb6, 0x80,
-    0xed, 0x0f, 0x62, 0x7f, 0x9d, 0xa5, 0x1a, 0x61, 0x06, 0x47, 0xff, 0xde,
-    0xe3, 0x26, 0xc1, 0x53, 0x2a, 0x65, 0xcf, 0xb8, 0x4e, 0x6f, 0x35, 0x31,
-    0xc9, 0x0c, 0x62, 0x3f, 0xa5, 0xbb, 0xa6, 0x2e, 0x83, 0xce, 0xfe, 0x87,
-    0x5f, 0x91, 0x5d, 0x42, 0x79, 0x11, 0x18, 0xd2, 0xf2, 0x0b, 0x19, 0x67,
-    0xec, 0xaf, 0x02, 0xec, 0x64, 0xbe, 0xd5, 0xae, 0xfe, 0x8b, 0x6b, 0x6d,
-    0x3c, 0x19, 0xeb, 0x6c, 0xdb, 0x53, 0x32, 0xc6, 0x79, 0x35, 0x97, 0x76,
-    0x24, 0x53, 0x49, 0x4e, 0xe7, 0x64, 0x4d, 0x8e, 0x90, 0x38, 0xec, 0xd8,
-    0xf6, 0x90, 0xc6, 0xe6, 0xdf, 0x9e, 0x63, 0x59, 0x3a, 0xba, 0x92, 0xc3,
-    0x51, 0x5b, 0xb1, 0x44, 0xc6, 0x73, 0x32, 0x5c, 0x2e, 0x52, 0xdc, 0xce,
-    0xce, 0x0a, 0x4b, 0xaa, 0xc6, 0x57, 0x20, 0xda, 0xe0, 0xa6, 0x74, 0x89,
-    0x32, 0xe9, 0xa8, 0x90, 0x47, 0xef, 0x71, 0x4b, 0xd4, 0x45, 0x0f, 0xd6,
-    0x98, 0xfe, 0x1e, 0x20, 0xc4, 0x05, 0x5f, 0xf7, 0x5f, 0x14, 0x8a, 0xe4,
-    0xe5, 0x90, 0x7d, 0xde, 0x94, 0x3b, 0x6b, 0x27, 0xf7, 0xbb, 0xc7, 0x5d,
-    0x87, 0xa2, 0xc7, 0x52, 0x9b, 0xb5, 0x03, 0xe9, 0x41, 0xf3, 0x9b, 0x58,
-    0x1e, 0x32, 0x04, 0x1a, 0xa4, 0x14, 0x56, 0xd6, 0xec, 0x90, 0x2a, 0x9d,
-    0x72, 0xb8, 0x89, 0xa5, 0x07, 0x5d, 0xce, 0x5e, 0x97, 0x77, 0xa9, 0x9c,
-    0xce, 0x39, 0x74, 0xf2, 0x74, 0xb1, 0x1b, 0x03, 0x7e, 0x0e, 0x86, 0xc8,
-    0x09, 0x4c, 0x3a, 0x88, 0xcc, 0x09, 0x97, 0xe6, 0x3f, 0x9c, 0x48, 0xe1,
-    0xe5, 0x14, 0xf5, 0x0c, 0x2d, 0x0f, 0x25, 0xfc, 0x85, 0x5e, 0x4d, 0xe6,
-    0x5c, 0xa3, 0x0a, 0x83, 0x5c, 0xd6, 0xe5, 0xa0, 0x35, 0x41, 0xde, 0xd9,
-    0xed, 0x83, 0xc1, 0xf6, 0x57, 0xda, 0x34, 0xcc, 0x94, 0x2f, 0x22, 0x61,
-    0xb5, 0x1c, 0x44, 0x36, 0x35, 0x5d, 0xd4, 0x87, 0xea, 0x0b, 0x42, 0xb0,
-    0xe3, 0x7e, 0xe5, 0xb1, 0x50, 0x75, 0x6b, 0x2d, 0x22, 0x0f, 0x28, 0x3f,
-    0x14, 0x46, 0x76, 0xc1, 0x23, 0x94, 0xb3, 0xbc, 0x51, 0x71, 0xc9, 0xca,
-    0xb9, 0xa0, 0xa4, 0x87, 0x39, 0x60, 0x51, 0xfe, 0x22, 0x9b, 0x19, 0x52,
-    0xd9, 0xa8, 0x85, 0x47, 0xa2, 0x2a, 0x3c, 0x79, 0xfb, 0xb0, 0x06, 0x2f,
-    0x0b, 0xf2, 0xa0, 0x2f, 0x1e, 0xae, 0xf7, 0xc5, 0x8c, 0x35, 0x71, 0x57,
-    0xb0, 0x43, 0x1d, 0x0c, 0x6f, 0x99, 0xa6, 0xf5, 0x87, 0xf2, 0x5e, 0x27,
-    0x29, 0xb1, 0xba, 0x97, 0x86, 0x37, 0x95, 0x39, 0xa8, 0x30, 0xab, 0x87,
-    0x44, 0x92, 0x27, 0x45, 0x8c, 0x07, 0xd0, 0xd7, 0xae, 0x89, 0x49, 0xd2,
-    0x50, 0x04, 0xb1, 0xda, 0x08, 0x54, 0x8f, 0x83, 0x3e, 0xde, 0x4f, 0x23,
-    0x00, 0x8f, 0x63, 0x3f, 0x3e, 0xb0, 0xa8, 0xf1,
-  },
-}};
-
-static void test_pke768_encrypt(void) {
-  for (size_t i = 0; i < sizeof(PKE768_ENCRYPT_TESTS)/sizeof(PKE768_ENCRYPT_TESTS[0]); i++) {
-    // encrypt test message `m` with encryption key `ek` and randomness
-    // `enc_rand`, then store ciphertext to buffer `got`.
-    uint8_t got[PKE768_CT_SIZE] = { 0 };
-    pke768_encrypt(got, PKE768_ENCRYPT_TESTS[i].ek, PKE768_ENCRYPT_TESTS[i].m, PKE768_ENCRYPT_TESTS[i].enc_rand);
-
-    // check for expected ciphertext
-    if (memcmp(got, PKE768_ENCRYPT_TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, PKE768_ENCRYPT_TESTS[i].name, got, sizeof(got), PKE768_ENCRYPT_TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_pke768_decrypt(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t dk[PKE768_EK_SIZE]; // test decryption key (1152 bytes)
-    const uint8_t ct[PKE768_CT_SIZE]; // test ciphertext (1108 bytes)
-    const uint8_t exp[32]; // expected message (32 bytes)
-  } TESTS[] = {{
-    .name = "rand = 0, message = 1",
-
-    .dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-    },
-
-    .ct = {
-      0xd6, 0xb6, 0xdd, 0xa2, 0x19, 0x52, 0xa3, 0x00, 0xb5, 0x74, 0x6e, 0x80,
-      0x72, 0x8a, 0x85, 0x7b, 0x81, 0x33, 0xbb, 0x8a, 0x1c, 0x24, 0xf5, 0xd7,
-      0xcd, 0xa7, 0xb4, 0x78, 0x3b, 0xfc, 0x4b, 0x9b, 0x50, 0xd0, 0xb0, 0x91,
-      0x99, 0x81, 0x93, 0x1c, 0x43, 0x21, 0x64, 0xa9, 0xf1, 0x8f, 0x48, 0xda,
-      0x75, 0x41, 0xca, 0x84, 0x7f, 0xf2, 0x30, 0x45, 0xca, 0x8f, 0x3e, 0x7a,
-      0x39, 0x8d, 0x65, 0x94, 0x40, 0x6f, 0x4c, 0xcb, 0xa5, 0x6f, 0xde, 0xeb,
-      0x42, 0xaa, 0x75, 0xf1, 0xf4, 0x60, 0x8d, 0x65, 0x3c, 0x0a, 0xad, 0x86,
-      0xee, 0x2b, 0x3d, 0xc0, 0x59, 0x74, 0x0f, 0x5f, 0x6e, 0x34, 0x2b, 0x52,
-      0x8c, 0x8a, 0x8a, 0x9b, 0x81, 0x32, 0xc4, 0x98, 0xf4, 0x07, 0x31, 0xe3,
-      0x1c, 0x61, 0xe3, 0x42, 0xa1, 0x02, 0xef, 0x98, 0x88, 0xcb, 0xa3, 0x66,
-      0x6e, 0x4b, 0xb4, 0x3b, 0xb4, 0xd4, 0x2b, 0xae, 0x10, 0x61, 0x17, 0xe1,
-      0x7a, 0x63, 0x58, 0x88, 0xfe, 0xb3, 0xf6, 0x1c, 0xba, 0x7f, 0xf4, 0x67,
-      0x44, 0x49, 0xcc, 0x1d, 0x1d, 0x5f, 0x96, 0xcf, 0x80, 0x02, 0xc5, 0xbf,
-      0xce, 0x16, 0xef, 0xbb, 0x63, 0xb7, 0xe5, 0x4e, 0xb5, 0x89, 0x64, 0x12,
-      0x72, 0xf4, 0x60, 0x5f, 0xa7, 0xad, 0xc8, 0x05, 0x25, 0x89, 0xd0, 0xc4,
-      0x59, 0xcb, 0x6f, 0x81, 0xff, 0x7e, 0xf3, 0x69, 0xe5, 0x73, 0x2c, 0x14,
-      0x61, 0xde, 0x29, 0xe5, 0x8c, 0x9d, 0xce, 0xb4, 0xa8, 0xf7, 0xc0, 0x51,
-      0x7d, 0x05, 0x59, 0xcc, 0x09, 0x24, 0xc8, 0xe1, 0xa0, 0x8c, 0xe0, 0xe8,
-      0x4d, 0x63, 0x65, 0x6b, 0xba, 0x37, 0xf4, 0x00, 0x64, 0x41, 0xba, 0x86,
-      0x5f, 0x2b, 0xa2, 0xcf, 0x24, 0x75, 0xa5, 0x7c, 0x6d, 0x05, 0xbc, 0x8e,
-      0x9b, 0x66, 0xb4, 0xa8, 0xb2, 0xe5, 0xd1, 0xd6, 0x6f, 0x50, 0xd1, 0xc8,
-      0x0f, 0x2d, 0xd5, 0x85, 0x44, 0xcb, 0x7d, 0x36, 0xad, 0x54, 0xb1, 0x74,
-      0x10, 0x05, 0xc9, 0xfa, 0x0d, 0x9b, 0x2f, 0x2f, 0xa2, 0x96, 0xaf, 0xc0,
-      0x59, 0x85, 0x3c, 0xe8, 0x62, 0x63, 0x95, 0x73, 0x16, 0x66, 0x14, 0x13,
-      0xbe, 0x00, 0x25, 0x79, 0x00, 0x78, 0x4d, 0xa7, 0x94, 0xf6, 0x97, 0x97,
-      0x09, 0x31, 0xc4, 0xdd, 0x75, 0x67, 0xa9, 0xe3, 0x15, 0xf8, 0x8a, 0x73,
-      0xed, 0x9d, 0x6d, 0x4c, 0x94, 0x23, 0xcc, 0xac, 0x9f, 0x99, 0x23, 0x46,
-      0xf2, 0xb6, 0x33, 0xfb, 0x4e, 0xaf, 0x7a, 0x1c, 0xa7, 0xa6, 0xda, 0xa1,
-      0x10, 0x57, 0x46, 0x2b, 0xc6, 0xa7, 0xa7, 0x43, 0x02, 0x7c, 0xe0, 0x13,
-      0x60, 0x4d, 0xda, 0x01, 0xbe, 0xde, 0xcb, 0x21, 0x4b, 0x50, 0x2a, 0x45,
-      0x24, 0x19, 0x11, 0x98, 0x6c, 0x6d, 0x27, 0xba, 0xf0, 0xad, 0xe6, 0xf9,
-      0x0b, 0xa2, 0xe7, 0x5c, 0x5c, 0xa1, 0x40, 0xac, 0x86, 0x52, 0xcc, 0xe0,
-      0x37, 0xef, 0x67, 0xfb, 0xd5, 0x77, 0x3b, 0x03, 0x21, 0xfc, 0xb8, 0xdb,
-      0x58, 0x60, 0xb2, 0xbd, 0xea, 0x6c, 0x9f, 0x97, 0xa7, 0x98, 0x30, 0x19,
-      0xd2, 0x1f, 0xa0, 0x41, 0xa2, 0xe9, 0xe2, 0xa0, 0x53, 0x9e, 0x11, 0xde,
-      0xab, 0x68, 0xf0, 0xc8, 0x79, 0x49, 0x43, 0x75, 0x9e, 0xe9, 0xbe, 0x8d,
-      0x67, 0x20, 0x5a, 0x53, 0xe7, 0x49, 0x39, 0x40, 0x17, 0x44, 0x3b, 0x7e,
-      0x95, 0x45, 0x8c, 0x51, 0xf8, 0xd9, 0x22, 0x8b, 0x96, 0x51, 0x90, 0x2f,
-      0x8d, 0x26, 0xb7, 0x47, 0x04, 0x71, 0xac, 0x78, 0x45, 0x05, 0x1b, 0xcd,
-      0x3c, 0x04, 0x58, 0xfa, 0x50, 0x83, 0x61, 0x30, 0xe5, 0xa0, 0xfe, 0xa3,
-      0xcb, 0xc6, 0x9c, 0xf5, 0x4a, 0x98, 0x09, 0x57, 0x30, 0x2e, 0x23, 0x4f,
-      0xf6, 0xe2, 0x26, 0xf1, 0x7d, 0xac, 0x99, 0xd6, 0x10, 0x1e, 0x26, 0xbb,
-      0x40, 0xaa, 0x9e, 0x97, 0x0d, 0xa5, 0xda, 0x30, 0x1d, 0x1b, 0xb7, 0x2a,
-      0xb3, 0x37, 0x13, 0xf8, 0x2f, 0xa6, 0x16, 0xa5, 0xde, 0x86, 0x05, 0x18,
-      0x3f, 0x7f, 0x86, 0x5e, 0xa3, 0x26, 0x0d, 0x1c, 0x66, 0xa2, 0x89, 0x30,
-      0x7c, 0xbd, 0x02, 0x44, 0xbc, 0x83, 0x41, 0x5f, 0x79, 0xa5, 0x72, 0x85,
-      0x2e, 0x94, 0xcc, 0x7a, 0x28, 0x4d, 0x4c, 0xa5, 0x37, 0x67, 0x04, 0x40,
-      0x49, 0xa5, 0xc6, 0x5c, 0x82, 0xea, 0x42, 0x3f, 0x0c, 0xd6, 0xbf, 0x18,
-      0x76, 0xd5, 0x95, 0x2c, 0xb9, 0x52, 0x28, 0x4e, 0x16, 0x84, 0x30, 0x15,
-      0xa7, 0x30, 0x8a, 0x71, 0x56, 0xd9, 0x03, 0x75, 0xde, 0xab, 0x5d, 0xe6,
-      0x34, 0x08, 0x52, 0xc9, 0xa3, 0x66, 0x5a, 0xc7, 0xd4, 0x55, 0xc2, 0x2f,
-      0x7d, 0x70, 0xdf, 0xae, 0x2f, 0x86, 0xfc, 0x03, 0xa0, 0x28, 0xce, 0x27,
-      0x67, 0x30, 0x33, 0x66, 0x76, 0x90, 0x41, 0x98, 0xc5, 0xa5, 0x5c, 0x3c,
-      0xbe, 0x08, 0xb8, 0xad, 0xd2, 0x24, 0x7a, 0xfd, 0x44, 0x73, 0x67, 0x70,
-      0x68, 0xbf, 0x6f, 0xb2, 0x51, 0x49, 0x87, 0xac, 0x05, 0xd2, 0x4d, 0x78,
-      0x7d, 0x4b, 0x72, 0x72, 0x19, 0x9d, 0xf7, 0x84, 0xc4, 0x3c, 0x33, 0x46,
-      0x94, 0x0a, 0x7b, 0xcc, 0x99, 0x27, 0xc0, 0xb0, 0x47, 0x71, 0x6f, 0x43,
-      0x47, 0x1d, 0xef, 0x60, 0x56, 0x21, 0x0a, 0x1e, 0xe5, 0xb0, 0x99, 0xa2,
-      0xf3, 0x17, 0xbb, 0xcf, 0x63, 0x20, 0x0a, 0x7f, 0xfe, 0x53, 0x4c, 0x34,
-      0x70, 0xef, 0xf5, 0xc4, 0xc3, 0x99, 0x14, 0x11, 0x31, 0x79, 0x64, 0x38,
-      0xc8, 0x04, 0x6e, 0x3f, 0x33, 0x71, 0x97, 0x75, 0xe7, 0xca, 0xdf, 0xe1,
-      0x5d, 0x48, 0xd6, 0x7e, 0x3f, 0x29, 0xe6, 0xac, 0x00, 0x55, 0xa5, 0xfc,
-      0x53, 0x07, 0x23, 0xb8, 0x53, 0x58, 0xff, 0xce, 0xa5, 0x18, 0x5d, 0x09,
-      0xb9, 0xf0, 0xb6, 0x16, 0x49, 0x1d, 0x7e, 0x16, 0x8e, 0x4b, 0x1f, 0xa2,
-      0xbb, 0x0f, 0x29, 0xb1, 0x0f, 0x72, 0x8e, 0x57, 0x3f, 0x9e, 0x4c, 0xdb,
-      0x02, 0xcc, 0xd9, 0x8c, 0x1d, 0xbf, 0xc6, 0x7d, 0x67, 0xc0, 0xc4, 0x29,
-      0x35, 0x62, 0xc8, 0x38, 0x8d, 0xe6, 0x88, 0x41, 0x89, 0xbe, 0xc0, 0xf0,
-      0x63, 0xf1, 0x03, 0xe1, 0xdb, 0xfd, 0x3a, 0x1e, 0x7e, 0xef, 0xc6, 0x43,
-      0x03, 0x70, 0x4e, 0xee, 0x71, 0x1b, 0x37, 0x33, 0x6b, 0x33, 0xcb, 0x63,
-      0xe2, 0x76, 0x86, 0xef, 0xf8, 0xfc, 0x70, 0x1b, 0xa5, 0xc9, 0xef, 0x3a,
-      0x18, 0x1e, 0x67, 0x18, 0x72, 0x6e, 0xba, 0x10, 0xd5, 0xec, 0xe7, 0xfd,
-      0x32, 0x9b, 0x9e, 0x45, 0xc1, 0xa6, 0xb0, 0xb1, 0xd7, 0x22, 0xbd, 0x74,
-      0xf7, 0x95, 0x9e, 0xde, 0xef, 0x15, 0x6a, 0x47, 0x64, 0xf4, 0x9b, 0x54,
-      0xce, 0xde, 0xd3, 0x45, 0xee, 0x6b, 0xb5, 0xae, 0xe8, 0x0e, 0xf4, 0x59,
-      0x17, 0x2e, 0x91, 0x81, 0x43, 0x0d, 0xca, 0xec, 0xd2, 0xc0, 0x28, 0xbc,
-      0x80, 0x04, 0xc1, 0x42, 0x24, 0x99, 0xd0, 0x68, 0x49, 0x9e, 0x16, 0x5a,
-      0x77, 0xbd, 0x65, 0x11, 0x6d, 0x2f, 0xbb, 0xba, 0x1e, 0xcb, 0x68, 0xbc,
-      0xa2, 0x93, 0x15, 0x57, 0xf6, 0x4c, 0x2a, 0xed, 0xff, 0x2d, 0xae, 0xf6,
-      0xe8, 0x2f, 0x71, 0x36, 0xe7, 0xda, 0x18, 0x95, 0x6a, 0x82, 0xf3, 0x6a,
-      0xfb, 0x61, 0x2f, 0x56, 0x9c, 0x8e, 0x1d, 0x4f, 0xc2, 0x70, 0x63, 0xc6,
-      0xb5, 0x1c, 0x44, 0x36, 0x35, 0x5d, 0xd4, 0x87, 0xea, 0x0b, 0x42, 0xb0,
-      0xe3, 0x7e, 0xe5, 0xb1, 0x50, 0x75, 0x6b, 0x2d, 0x22, 0x0f, 0x28, 0x3f,
-      0x14, 0x46, 0x76, 0xc1, 0x23, 0x94, 0xb3, 0xbc, 0x51, 0x71, 0xc9, 0xca,
-      0xb9, 0xa0, 0xa4, 0x87, 0x39, 0x60, 0x51, 0xfe, 0x22, 0x9b, 0x19, 0x52,
-      0xd9, 0xa8, 0x85, 0x47, 0xa2, 0x2a, 0x3c, 0x79, 0xfb, 0xb0, 0x06, 0x2f,
-      0x0b, 0xf2, 0xa0, 0x2f, 0x1e, 0xae, 0xf7, 0xc5, 0x8c, 0x35, 0x71, 0x57,
-      0xb0, 0x43, 0x1d, 0x0c, 0x6f, 0x99, 0xa6, 0xf5, 0x87, 0xf2, 0x5e, 0x27,
-      0x29, 0xb1, 0xba, 0x97, 0x86, 0x37, 0x95, 0x39, 0xa8, 0x30, 0xab, 0x87,
-      0x44, 0x92, 0x27, 0x45, 0x8c, 0x07, 0xd0, 0xd7, 0xae, 0x89, 0x49, 0xd2,
-      0x50, 0x04, 0xb1, 0xda, 0x08, 0x54, 0x8f, 0x83, 0x3e, 0xde, 0x4f, 0x23,
-      0x00, 0x8f, 0x63, 0x3f, 0x3e, 0xb0, 0xa8, 0xf1,
-    },
-
-    .exp = { 1, 0 },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // decrypt ciphertext `ct` with decryption key `dk` and store the
-    // plaintext message in output buffer `got`.
-    uint8_t got[32] = { 0 };
-    pke768_decrypt(got, TESTS[i].dk, TESTS[i].ct);
-
-    // check for expected plaintext
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_fips203ipd_kem768_keygen(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t seed[64]; // test seed
-    const uint8_t exp_ek[PKE768_EK_SIZE]; // expected ek (1184 bytes)
-    const uint8_t exp_dk[FIPS203IPD_KEM768_DK_SIZE]; // expected dk (2400 bytes)
-  } TESTS[] = {{
-    .name = "all-zero",
-    .seed = { 0 },
-    .exp_ek = {
-      0x9c, 0x35, 0x94, 0xe2, 0x35, 0xa8, 0x31, 0x46, 0xb4, 0x90, 0x75, 0x0a,
-      0xfc, 0x8b, 0x5c, 0x65, 0x9c, 0x88, 0x0b, 0x5b, 0x5b, 0x64, 0xa8, 0x37,
-      0xef, 0x52, 0xa2, 0x93, 0xf3, 0x2e, 0x2d, 0x79, 0xa2, 0x6e, 0x03, 0xb6,
-      0xf4, 0x46, 0x6c, 0x14, 0x9b, 0xa2, 0x50, 0xbb, 0x6b, 0x1a, 0x15, 0x92,
-      0xb0, 0x71, 0x88, 0xc9, 0x6c, 0x9c, 0x46, 0x68, 0x81, 0x83, 0x01, 0x89,
-      0xe2, 0xf8, 0x28, 0x53, 0x76, 0x78, 0xe7, 0xc3, 0x5e, 0xfc, 0x68, 0x0d,
-      0x32, 0xf6, 0x5e, 0x7e, 0x4b, 0x65, 0x1d, 0x5c, 0xb3, 0xa5, 0x87, 0xae,
-      0x30, 0xf3, 0x9d, 0x62, 0xda, 0x39, 0x16, 0x58, 0x64, 0x04, 0xaa, 0x3f,
-      0x1e, 0xa2, 0x50, 0xc8, 0x06, 0x11, 0x1d, 0x5c, 0xc4, 0x4b, 0xa6, 0xb5,
-      0xc6, 0x36, 0x40, 0x4c, 0x11, 0xc8, 0xcd, 0x83, 0x26, 0x88, 0x8a, 0xa6,
-      0x70, 0xa7, 0x8d, 0xa7, 0x20, 0x53, 0xfe, 0x87, 0x27, 0xd2, 0x64, 0x88,
-      0x44, 0x34, 0x2b, 0x09, 0xa4, 0xcf, 0xec, 0x68, 0xa6, 0x47, 0x80, 0x5e,
-      0x67, 0xeb, 0x83, 0x4b, 0x6b, 0x5c, 0x7e, 0x00, 0x65, 0xd0, 0xc3, 0x8d,
-      0xba, 0x47, 0x3f, 0xa3, 0x35, 0x37, 0xdc, 0xb9, 0x58, 0x3e, 0xa1, 0x87,
-      0x46, 0xf9, 0xcb, 0x93, 0xf9, 0x9f, 0x92, 0x35, 0x6d, 0x8d, 0x68, 0xc1,
-      0xb8, 0x64, 0x81, 0x85, 0x84, 0x6e, 0xf8, 0xe9, 0x7b, 0xaf, 0x91, 0x0e,
-      0xa2, 0x93, 0x4b, 0x82, 0xc2, 0x44, 0xde, 0x06, 0x00, 0xf5, 0xb0, 0x44,
-      0x76, 0x48, 0xc3, 0x6f, 0xd1, 0x9f, 0xf8, 0x66, 0x45, 0xd3, 0xe3, 0x8e,
-      0x49, 0x33, 0x83, 0x96, 0x06, 0x96, 0x30, 0xe2, 0x1f, 0xd3, 0x49, 0x0f,
-      0xd1, 0xb9, 0x2c, 0x2d, 0x99, 0x84, 0xa6, 0x61, 0xc6, 0xb7, 0x41, 0x5d,
-      0x49, 0x39, 0xad, 0x95, 0x45, 0xc5, 0xca, 0x1a, 0x5a, 0xc3, 0x45, 0x04,
-      0xbf, 0x34, 0xae, 0x16, 0x72, 0x1a, 0x29, 0x9a, 0x03, 0xf3, 0x09, 0x53,
-      0xad, 0xf5, 0x7a, 0x53, 0x54, 0x6d, 0x48, 0xca, 0x7b, 0x9e, 0x61, 0x20,
-      0xe9, 0xba, 0x8e, 0x56, 0xab, 0x47, 0x9d, 0x77, 0x83, 0x0d, 0x69, 0x00,
-      0x52, 0xb9, 0xa1, 0x9c, 0x16, 0x28, 0xe3, 0x68, 0x27, 0x5d, 0xcb, 0x41,
-      0x7c, 0xd1, 0xb6, 0x44, 0xd0, 0x65, 0x2a, 0x25, 0xa2, 0xf2, 0x84, 0x4b,
-      0xf7, 0x85, 0xab, 0x22, 0xd8, 0x42, 0x21, 0x78, 0x58, 0x79, 0xcb, 0x37,
-      0xa9, 0xf7, 0xce, 0x99, 0x90, 0x12, 0xe8, 0x49, 0x38, 0x76, 0x22, 0x2d,
-      0x25, 0x83, 0xb9, 0x5f, 0x72, 0x0d, 0xc2, 0x00, 0x6d, 0xc5, 0x59, 0x43,
-      0x4f, 0x33, 0xa1, 0xb8, 0x45, 0x82, 0x2a, 0x11, 0x13, 0x9a, 0x08, 0x35,
-      0x18, 0xfb, 0x34, 0x68, 0x97, 0x7c, 0xfa, 0xa7, 0x9f, 0x5e, 0xf9, 0x68,
-      0x4b, 0x3a, 0x40, 0xb7, 0xf2, 0x66, 0x9b, 0x05, 0x01, 0x4f, 0xe1, 0x98,
-      0xed, 0xc7, 0x34, 0xfa, 0xc2, 0x27, 0xe6, 0xd7, 0x47, 0x86, 0xfb, 0x17,
-      0x78, 0x45, 0x62, 0x01, 0x07, 0x6d, 0xe7, 0xa4, 0x66, 0x5e, 0x76, 0x45,
-      0xd3, 0x37, 0xc2, 0x46, 0x45, 0x0f, 0x0d, 0xa3, 0x50, 0x90, 0xa3, 0x5b,
-      0xda, 0x44, 0x5a, 0x40, 0xb6, 0x93, 0xe8, 0xd6, 0x96, 0x0f, 0x10, 0x1c,
-      0x0b, 0xe2, 0x7d, 0x03, 0x9a, 0x7a, 0x22, 0x37, 0x1b, 0x55, 0x36, 0x80,
-      0x45, 0x87, 0xbe, 0xd9, 0x29, 0x87, 0xf3, 0xec, 0x61, 0xa3, 0x2a, 0x60,
-      0xa9, 0x3c, 0x0e, 0x0f, 0x83, 0x1f, 0xda, 0xb1, 0x2f, 0x01, 0x21, 0x48,
-      0xb6, 0x5b, 0x89, 0x7f, 0x79, 0xb8, 0x6c, 0x49, 0x90, 0xb3, 0x0b, 0xb2,
-      0x6c, 0x64, 0x24, 0xe7, 0xf7, 0x90, 0xeb, 0xb5, 0xc0, 0xc5, 0x04, 0x8c,
-      0x16, 0x66, 0x56, 0xb0, 0x01, 0x2b, 0x9f, 0xe8, 0x54, 0x6a, 0x01, 0x0b,
-      0xb3, 0x33, 0x95, 0x6a, 0x85, 0x7b, 0xbc, 0xc0, 0x3b, 0x1a, 0x30, 0x47,
-      0xbd, 0x86, 0x20, 0x6b, 0x22, 0x26, 0x58, 0x3b, 0x1d, 0x7b, 0x08, 0x98,
-      0x45, 0x11, 0x29, 0x57, 0x61, 0x7f, 0xfa, 0x93, 0x66, 0x54, 0x87, 0xb2,
-      0x46, 0x91, 0x96, 0x7a, 0xe6, 0xb6, 0x41, 0x20, 0x9e, 0x0e, 0xb2, 0xaf,
-      0xb1, 0x14, 0x8e, 0x1d, 0xaa, 0x76, 0x7f, 0x17, 0x63, 0xb5, 0xf9, 0x60,
-      0x8c, 0xe5, 0x06, 0xba, 0x93, 0x98, 0xe7, 0x46, 0x90, 0x9d, 0x52, 0x39,
-      0x47, 0x47, 0x6f, 0x6d, 0xd8, 0x35, 0xfb, 0x8a, 0x4b, 0x5e, 0x8c, 0x26,
-      0xbc, 0xd0, 0xb6, 0xb9, 0xc6, 0x2f, 0xe4, 0x69, 0x26, 0x55, 0x8a, 0x84,
-      0xa1, 0xd2, 0x54, 0x66, 0x2c, 0x38, 0xcd, 0xa5, 0x0f, 0x5e, 0x27, 0xc3,
-      0xf0, 0x9a, 0x56, 0x7a, 0xe6, 0x6f, 0x26, 0xac, 0x24, 0x90, 0x71, 0x7e,
-      0x60, 0x45, 0x16, 0x2b, 0x15, 0x4e, 0xa5, 0x91, 0x9f, 0xfb, 0x08, 0x96,
-      0xaa, 0x24, 0x84, 0xb2, 0xb7, 0x7c, 0x2f, 0x8c, 0x80, 0x8b, 0xb9, 0x98,
-      0xc6, 0xc0, 0x7e, 0xf7, 0xa0, 0x25, 0x28, 0x51, 0x15, 0xf8, 0x7b, 0x7e,
-      0xe4, 0x54, 0x6c, 0xcf, 0x52, 0x29, 0xac, 0x02, 0x4b, 0x9b, 0x1a, 0x4f,
-      0x60, 0x3a, 0x91, 0x0d, 0x6a, 0x8f, 0x71, 0xbb, 0x33, 0x40, 0xf8, 0x80,
-      0x1b, 0x38, 0x37, 0xd0, 0xf8, 0xc2, 0x2b, 0x30, 0x4e, 0x31, 0xb9, 0x14,
-      0xf9, 0xba, 0x5e, 0x48, 0xf1, 0x41, 0x11, 0x08, 0x67, 0xf5, 0xc6, 0x72,
-      0x7f, 0xa2, 0x46, 0xc6, 0x99, 0x6b, 0x07, 0xc3, 0x0b, 0xe4, 0x99, 0xab,
-      0x08, 0x92, 0x17, 0x69, 0x5a, 0x7f, 0x5d, 0xf7, 0x5f, 0x95, 0x50, 0x32,
-      0xa0, 0xd8, 0xae, 0x08, 0x21, 0x54, 0xfd, 0xac, 0x64, 0x7c, 0x7b, 0x97,
-      0x8c, 0xfc, 0x8a, 0x42, 0x8c, 0x62, 0x0f, 0x20, 0x8d, 0x80, 0x58, 0x66,
-      0x59, 0x72, 0x85, 0x48, 0xb1, 0x13, 0x27, 0xd9, 0x97, 0xc8, 0x53, 0x34,
-      0x8f, 0x7b, 0x48, 0x70, 0xe0, 0x4d, 0xd6, 0x00, 0x7b, 0x71, 0x02, 0x04,
-      0x7f, 0x30, 0x80, 0x33, 0x21, 0x47, 0xea, 0x09, 0x86, 0x6c, 0x93, 0x5e,
-      0x17, 0x96, 0x95, 0x3b, 0x7c, 0x1e, 0x92, 0xda, 0xa8, 0xaa, 0x12, 0x6e,
-      0x30, 0x7a, 0x38, 0xaf, 0x3c, 0x90, 0x6b, 0xd6, 0xb4, 0xfa, 0x6c, 0x5e,
-      0x8d, 0x49, 0xce, 0x08, 0x5c, 0x26, 0x34, 0x43, 0x94, 0xe5, 0xb6, 0x8d,
-      0xec, 0x83, 0x50, 0xa0, 0x38, 0x9f, 0xb4, 0xf2, 0xbf, 0xdd, 0x37, 0x73,
-      0xd2, 0x25, 0xb4, 0x97, 0xa2, 0xa8, 0x3a, 0xf3, 0x2c, 0x80, 0x67, 0x56,
-      0x3d, 0x75, 0x03, 0x42, 0xd7, 0x51, 0x14, 0x02, 0x4a, 0x3d, 0x5b, 0x9e,
-      0x6c, 0x3b, 0x16, 0xe9, 0xc4, 0x28, 0x77, 0x43, 0x17, 0xb1, 0x78, 0x8d,
-      0x54, 0xfb, 0xc5, 0xb4, 0x39, 0xc1, 0xd9, 0x57, 0x1c, 0xd7, 0xab, 0xb7,
-      0xbd, 0x28, 0x4c, 0x98, 0x58, 0x32, 0x15, 0xf0, 0x3b, 0x14, 0x36, 0x80,
-      0xa0, 0xd0, 0xaf, 0xae, 0x26, 0x6b, 0xef, 0x93, 0x1c, 0xc1, 0xa2, 0xaa,
-      0x22, 0xf8, 0xc8, 0xd5, 0x50, 0xa6, 0x9a, 0x0a, 0x34, 0x35, 0xa7, 0xcb,
-      0xcd, 0xba, 0x5c, 0x18, 0xd6, 0x31, 0xc4, 0x5b, 0xc3, 0x12, 0x55, 0xc4,
-      0x0a, 0x64, 0x30, 0x10, 0xe5, 0x95, 0x18, 0x67, 0x68, 0xd9, 0x79, 0x47,
-      0xa0, 0xd1, 0x61, 0x0f, 0x11, 0x70, 0x23, 0xd8, 0xbb, 0x19, 0xf2, 0x4a,
-      0xe1, 0x22, 0x71, 0xf1, 0x69, 0x06, 0x59, 0x02, 0x5a, 0x6e, 0xd2, 0x30,
-      0x08, 0x0b, 0x61, 0xce, 0x61, 0x9b, 0x86, 0x60, 0x1a, 0xaf, 0x5b, 0x46,
-      0x7b, 0xb3, 0x12, 0x84, 0x75, 0x59, 0x91, 0x32, 0xaa, 0x16, 0x21, 0x40,
-      0xc2, 0x00, 0xbd, 0x38, 0x88, 0xa4, 0x56, 0x7c, 0x5f, 0x69, 0x42, 0x9b,
-      0x88, 0xd3, 0x53, 0x97, 0x86, 0x07, 0xd7, 0x4b, 0xcf, 0xf6, 0x39, 0x9a,
-      0x09, 0x34, 0x13, 0x01, 0x22, 0xb7, 0xfd, 0xb6, 0x60, 0x83, 0x49, 0x50,
-      0x64, 0xb7, 0x72, 0x00, 0xc9, 0x11, 0x1d, 0xfa, 0x25, 0x28, 0x28, 0x8e,
-      0x69, 0x20, 0x05, 0xda, 0xa7, 0x5c, 0x48, 0x62, 0x2c, 0xf4, 0xa5, 0x9e,
-      0x73, 0xb4, 0x95, 0xc5, 0xa2, 0x8f, 0x5a, 0x30, 0x84, 0xfe, 0xa0, 0x22,
-      0x82, 0x9b, 0x72, 0x99, 0xb8, 0x36, 0xed, 0xfa, 0x02, 0x57, 0xc9, 0x9d,
-      0xb1, 0x88, 0x92, 0xd2, 0xc0, 0x54, 0x07, 0xf9, 0x78, 0xf8, 0x76, 0x03,
-      0x55, 0x95, 0x95, 0xb2, 0xa1, 0x2e, 0xd2, 0x19, 0xb6, 0x88, 0xe8, 0x4b,
-      0xa8, 0x70, 0xc1, 0xfb, 0x41, 0x97, 0x39, 0xf5, 0x55, 0x84, 0x0a, 0x3c,
-      0xbf, 0x91, 0x56, 0x57, 0xa5, 0x24, 0x50, 0x64, 0x46, 0xd4, 0x75, 0x05,
-      0x22, 0x52, 0x1b, 0x81, 0x67, 0xad, 0x26, 0x19, 0x1e, 0xcd, 0x6a, 0x5d,
-      0x43, 0x15, 0xc0, 0xee, 0x94, 0x0d, 0x60, 0x78, 0x07, 0x79, 0x35, 0x0a,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-    },
-
-    .exp_dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x9c, 0x35, 0x94, 0xe2, 0x35, 0xa8, 0x31, 0x46, 0xb4, 0x90, 0x75, 0x0a,
-      0xfc, 0x8b, 0x5c, 0x65, 0x9c, 0x88, 0x0b, 0x5b, 0x5b, 0x64, 0xa8, 0x37,
-      0xef, 0x52, 0xa2, 0x93, 0xf3, 0x2e, 0x2d, 0x79, 0xa2, 0x6e, 0x03, 0xb6,
-      0xf4, 0x46, 0x6c, 0x14, 0x9b, 0xa2, 0x50, 0xbb, 0x6b, 0x1a, 0x15, 0x92,
-      0xb0, 0x71, 0x88, 0xc9, 0x6c, 0x9c, 0x46, 0x68, 0x81, 0x83, 0x01, 0x89,
-      0xe2, 0xf8, 0x28, 0x53, 0x76, 0x78, 0xe7, 0xc3, 0x5e, 0xfc, 0x68, 0x0d,
-      0x32, 0xf6, 0x5e, 0x7e, 0x4b, 0x65, 0x1d, 0x5c, 0xb3, 0xa5, 0x87, 0xae,
-      0x30, 0xf3, 0x9d, 0x62, 0xda, 0x39, 0x16, 0x58, 0x64, 0x04, 0xaa, 0x3f,
-      0x1e, 0xa2, 0x50, 0xc8, 0x06, 0x11, 0x1d, 0x5c, 0xc4, 0x4b, 0xa6, 0xb5,
-      0xc6, 0x36, 0x40, 0x4c, 0x11, 0xc8, 0xcd, 0x83, 0x26, 0x88, 0x8a, 0xa6,
-      0x70, 0xa7, 0x8d, 0xa7, 0x20, 0x53, 0xfe, 0x87, 0x27, 0xd2, 0x64, 0x88,
-      0x44, 0x34, 0x2b, 0x09, 0xa4, 0xcf, 0xec, 0x68, 0xa6, 0x47, 0x80, 0x5e,
-      0x67, 0xeb, 0x83, 0x4b, 0x6b, 0x5c, 0x7e, 0x00, 0x65, 0xd0, 0xc3, 0x8d,
-      0xba, 0x47, 0x3f, 0xa3, 0x35, 0x37, 0xdc, 0xb9, 0x58, 0x3e, 0xa1, 0x87,
-      0x46, 0xf9, 0xcb, 0x93, 0xf9, 0x9f, 0x92, 0x35, 0x6d, 0x8d, 0x68, 0xc1,
-      0xb8, 0x64, 0x81, 0x85, 0x84, 0x6e, 0xf8, 0xe9, 0x7b, 0xaf, 0x91, 0x0e,
-      0xa2, 0x93, 0x4b, 0x82, 0xc2, 0x44, 0xde, 0x06, 0x00, 0xf5, 0xb0, 0x44,
-      0x76, 0x48, 0xc3, 0x6f, 0xd1, 0x9f, 0xf8, 0x66, 0x45, 0xd3, 0xe3, 0x8e,
-      0x49, 0x33, 0x83, 0x96, 0x06, 0x96, 0x30, 0xe2, 0x1f, 0xd3, 0x49, 0x0f,
-      0xd1, 0xb9, 0x2c, 0x2d, 0x99, 0x84, 0xa6, 0x61, 0xc6, 0xb7, 0x41, 0x5d,
-      0x49, 0x39, 0xad, 0x95, 0x45, 0xc5, 0xca, 0x1a, 0x5a, 0xc3, 0x45, 0x04,
-      0xbf, 0x34, 0xae, 0x16, 0x72, 0x1a, 0x29, 0x9a, 0x03, 0xf3, 0x09, 0x53,
-      0xad, 0xf5, 0x7a, 0x53, 0x54, 0x6d, 0x48, 0xca, 0x7b, 0x9e, 0x61, 0x20,
-      0xe9, 0xba, 0x8e, 0x56, 0xab, 0x47, 0x9d, 0x77, 0x83, 0x0d, 0x69, 0x00,
-      0x52, 0xb9, 0xa1, 0x9c, 0x16, 0x28, 0xe3, 0x68, 0x27, 0x5d, 0xcb, 0x41,
-      0x7c, 0xd1, 0xb6, 0x44, 0xd0, 0x65, 0x2a, 0x25, 0xa2, 0xf2, 0x84, 0x4b,
-      0xf7, 0x85, 0xab, 0x22, 0xd8, 0x42, 0x21, 0x78, 0x58, 0x79, 0xcb, 0x37,
-      0xa9, 0xf7, 0xce, 0x99, 0x90, 0x12, 0xe8, 0x49, 0x38, 0x76, 0x22, 0x2d,
-      0x25, 0x83, 0xb9, 0x5f, 0x72, 0x0d, 0xc2, 0x00, 0x6d, 0xc5, 0x59, 0x43,
-      0x4f, 0x33, 0xa1, 0xb8, 0x45, 0x82, 0x2a, 0x11, 0x13, 0x9a, 0x08, 0x35,
-      0x18, 0xfb, 0x34, 0x68, 0x97, 0x7c, 0xfa, 0xa7, 0x9f, 0x5e, 0xf9, 0x68,
-      0x4b, 0x3a, 0x40, 0xb7, 0xf2, 0x66, 0x9b, 0x05, 0x01, 0x4f, 0xe1, 0x98,
-      0xed, 0xc7, 0x34, 0xfa, 0xc2, 0x27, 0xe6, 0xd7, 0x47, 0x86, 0xfb, 0x17,
-      0x78, 0x45, 0x62, 0x01, 0x07, 0x6d, 0xe7, 0xa4, 0x66, 0x5e, 0x76, 0x45,
-      0xd3, 0x37, 0xc2, 0x46, 0x45, 0x0f, 0x0d, 0xa3, 0x50, 0x90, 0xa3, 0x5b,
-      0xda, 0x44, 0x5a, 0x40, 0xb6, 0x93, 0xe8, 0xd6, 0x96, 0x0f, 0x10, 0x1c,
-      0x0b, 0xe2, 0x7d, 0x03, 0x9a, 0x7a, 0x22, 0x37, 0x1b, 0x55, 0x36, 0x80,
-      0x45, 0x87, 0xbe, 0xd9, 0x29, 0x87, 0xf3, 0xec, 0x61, 0xa3, 0x2a, 0x60,
-      0xa9, 0x3c, 0x0e, 0x0f, 0x83, 0x1f, 0xda, 0xb1, 0x2f, 0x01, 0x21, 0x48,
-      0xb6, 0x5b, 0x89, 0x7f, 0x79, 0xb8, 0x6c, 0x49, 0x90, 0xb3, 0x0b, 0xb2,
-      0x6c, 0x64, 0x24, 0xe7, 0xf7, 0x90, 0xeb, 0xb5, 0xc0, 0xc5, 0x04, 0x8c,
-      0x16, 0x66, 0x56, 0xb0, 0x01, 0x2b, 0x9f, 0xe8, 0x54, 0x6a, 0x01, 0x0b,
-      0xb3, 0x33, 0x95, 0x6a, 0x85, 0x7b, 0xbc, 0xc0, 0x3b, 0x1a, 0x30, 0x47,
-      0xbd, 0x86, 0x20, 0x6b, 0x22, 0x26, 0x58, 0x3b, 0x1d, 0x7b, 0x08, 0x98,
-      0x45, 0x11, 0x29, 0x57, 0x61, 0x7f, 0xfa, 0x93, 0x66, 0x54, 0x87, 0xb2,
-      0x46, 0x91, 0x96, 0x7a, 0xe6, 0xb6, 0x41, 0x20, 0x9e, 0x0e, 0xb2, 0xaf,
-      0xb1, 0x14, 0x8e, 0x1d, 0xaa, 0x76, 0x7f, 0x17, 0x63, 0xb5, 0xf9, 0x60,
-      0x8c, 0xe5, 0x06, 0xba, 0x93, 0x98, 0xe7, 0x46, 0x90, 0x9d, 0x52, 0x39,
-      0x47, 0x47, 0x6f, 0x6d, 0xd8, 0x35, 0xfb, 0x8a, 0x4b, 0x5e, 0x8c, 0x26,
-      0xbc, 0xd0, 0xb6, 0xb9, 0xc6, 0x2f, 0xe4, 0x69, 0x26, 0x55, 0x8a, 0x84,
-      0xa1, 0xd2, 0x54, 0x66, 0x2c, 0x38, 0xcd, 0xa5, 0x0f, 0x5e, 0x27, 0xc3,
-      0xf0, 0x9a, 0x56, 0x7a, 0xe6, 0x6f, 0x26, 0xac, 0x24, 0x90, 0x71, 0x7e,
-      0x60, 0x45, 0x16, 0x2b, 0x15, 0x4e, 0xa5, 0x91, 0x9f, 0xfb, 0x08, 0x96,
-      0xaa, 0x24, 0x84, 0xb2, 0xb7, 0x7c, 0x2f, 0x8c, 0x80, 0x8b, 0xb9, 0x98,
-      0xc6, 0xc0, 0x7e, 0xf7, 0xa0, 0x25, 0x28, 0x51, 0x15, 0xf8, 0x7b, 0x7e,
-      0xe4, 0x54, 0x6c, 0xcf, 0x52, 0x29, 0xac, 0x02, 0x4b, 0x9b, 0x1a, 0x4f,
-      0x60, 0x3a, 0x91, 0x0d, 0x6a, 0x8f, 0x71, 0xbb, 0x33, 0x40, 0xf8, 0x80,
-      0x1b, 0x38, 0x37, 0xd0, 0xf8, 0xc2, 0x2b, 0x30, 0x4e, 0x31, 0xb9, 0x14,
-      0xf9, 0xba, 0x5e, 0x48, 0xf1, 0x41, 0x11, 0x08, 0x67, 0xf5, 0xc6, 0x72,
-      0x7f, 0xa2, 0x46, 0xc6, 0x99, 0x6b, 0x07, 0xc3, 0x0b, 0xe4, 0x99, 0xab,
-      0x08, 0x92, 0x17, 0x69, 0x5a, 0x7f, 0x5d, 0xf7, 0x5f, 0x95, 0x50, 0x32,
-      0xa0, 0xd8, 0xae, 0x08, 0x21, 0x54, 0xfd, 0xac, 0x64, 0x7c, 0x7b, 0x97,
-      0x8c, 0xfc, 0x8a, 0x42, 0x8c, 0x62, 0x0f, 0x20, 0x8d, 0x80, 0x58, 0x66,
-      0x59, 0x72, 0x85, 0x48, 0xb1, 0x13, 0x27, 0xd9, 0x97, 0xc8, 0x53, 0x34,
-      0x8f, 0x7b, 0x48, 0x70, 0xe0, 0x4d, 0xd6, 0x00, 0x7b, 0x71, 0x02, 0x04,
-      0x7f, 0x30, 0x80, 0x33, 0x21, 0x47, 0xea, 0x09, 0x86, 0x6c, 0x93, 0x5e,
-      0x17, 0x96, 0x95, 0x3b, 0x7c, 0x1e, 0x92, 0xda, 0xa8, 0xaa, 0x12, 0x6e,
-      0x30, 0x7a, 0x38, 0xaf, 0x3c, 0x90, 0x6b, 0xd6, 0xb4, 0xfa, 0x6c, 0x5e,
-      0x8d, 0x49, 0xce, 0x08, 0x5c, 0x26, 0x34, 0x43, 0x94, 0xe5, 0xb6, 0x8d,
-      0xec, 0x83, 0x50, 0xa0, 0x38, 0x9f, 0xb4, 0xf2, 0xbf, 0xdd, 0x37, 0x73,
-      0xd2, 0x25, 0xb4, 0x97, 0xa2, 0xa8, 0x3a, 0xf3, 0x2c, 0x80, 0x67, 0x56,
-      0x3d, 0x75, 0x03, 0x42, 0xd7, 0x51, 0x14, 0x02, 0x4a, 0x3d, 0x5b, 0x9e,
-      0x6c, 0x3b, 0x16, 0xe9, 0xc4, 0x28, 0x77, 0x43, 0x17, 0xb1, 0x78, 0x8d,
-      0x54, 0xfb, 0xc5, 0xb4, 0x39, 0xc1, 0xd9, 0x57, 0x1c, 0xd7, 0xab, 0xb7,
-      0xbd, 0x28, 0x4c, 0x98, 0x58, 0x32, 0x15, 0xf0, 0x3b, 0x14, 0x36, 0x80,
-      0xa0, 0xd0, 0xaf, 0xae, 0x26, 0x6b, 0xef, 0x93, 0x1c, 0xc1, 0xa2, 0xaa,
-      0x22, 0xf8, 0xc8, 0xd5, 0x50, 0xa6, 0x9a, 0x0a, 0x34, 0x35, 0xa7, 0xcb,
-      0xcd, 0xba, 0x5c, 0x18, 0xd6, 0x31, 0xc4, 0x5b, 0xc3, 0x12, 0x55, 0xc4,
-      0x0a, 0x64, 0x30, 0x10, 0xe5, 0x95, 0x18, 0x67, 0x68, 0xd9, 0x79, 0x47,
-      0xa0, 0xd1, 0x61, 0x0f, 0x11, 0x70, 0x23, 0xd8, 0xbb, 0x19, 0xf2, 0x4a,
-      0xe1, 0x22, 0x71, 0xf1, 0x69, 0x06, 0x59, 0x02, 0x5a, 0x6e, 0xd2, 0x30,
-      0x08, 0x0b, 0x61, 0xce, 0x61, 0x9b, 0x86, 0x60, 0x1a, 0xaf, 0x5b, 0x46,
-      0x7b, 0xb3, 0x12, 0x84, 0x75, 0x59, 0x91, 0x32, 0xaa, 0x16, 0x21, 0x40,
-      0xc2, 0x00, 0xbd, 0x38, 0x88, 0xa4, 0x56, 0x7c, 0x5f, 0x69, 0x42, 0x9b,
-      0x88, 0xd3, 0x53, 0x97, 0x86, 0x07, 0xd7, 0x4b, 0xcf, 0xf6, 0x39, 0x9a,
-      0x09, 0x34, 0x13, 0x01, 0x22, 0xb7, 0xfd, 0xb6, 0x60, 0x83, 0x49, 0x50,
-      0x64, 0xb7, 0x72, 0x00, 0xc9, 0x11, 0x1d, 0xfa, 0x25, 0x28, 0x28, 0x8e,
-      0x69, 0x20, 0x05, 0xda, 0xa7, 0x5c, 0x48, 0x62, 0x2c, 0xf4, 0xa5, 0x9e,
-      0x73, 0xb4, 0x95, 0xc5, 0xa2, 0x8f, 0x5a, 0x30, 0x84, 0xfe, 0xa0, 0x22,
-      0x82, 0x9b, 0x72, 0x99, 0xb8, 0x36, 0xed, 0xfa, 0x02, 0x57, 0xc9, 0x9d,
-      0xb1, 0x88, 0x92, 0xd2, 0xc0, 0x54, 0x07, 0xf9, 0x78, 0xf8, 0x76, 0x03,
-      0x55, 0x95, 0x95, 0xb2, 0xa1, 0x2e, 0xd2, 0x19, 0xb6, 0x88, 0xe8, 0x4b,
-      0xa8, 0x70, 0xc1, 0xfb, 0x41, 0x97, 0x39, 0xf5, 0x55, 0x84, 0x0a, 0x3c,
-      0xbf, 0x91, 0x56, 0x57, 0xa5, 0x24, 0x50, 0x64, 0x46, 0xd4, 0x75, 0x05,
-      0x22, 0x52, 0x1b, 0x81, 0x67, 0xad, 0x26, 0x19, 0x1e, 0xcd, 0x6a, 0x5d,
-      0x43, 0x15, 0xc0, 0xee, 0x94, 0x0d, 0x60, 0x78, 0x07, 0x79, 0x35, 0x0a,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x41, 0xb5, 0xe9, 0xa0,
-      0xe8, 0x00, 0x81, 0x9e, 0xa5, 0xb0, 0x4d, 0xf9, 0xad, 0xf3, 0xec, 0xef,
-      0x91, 0x6f, 0x8f, 0x44, 0xf6, 0xab, 0xf1, 0x93, 0xfb, 0xc9, 0x59, 0x57,
-      0x26, 0x15, 0x90, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-  }, {
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Key Generation -- ML-KEM-768",
-    .seed = {
-      // z
-      0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6, 0xEE, 0x86, 0xFE, 0x00,
-      0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34, 0x86, 0x0F, 0x5F, 0xF7,
-      0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
-
-      // d
-      0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6, 0xEE, 0x86, 0xFE, 0x00,
-      0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34, 0x86, 0x0F, 0x5F, 0xF7,
-      0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
-    },
-
-    .exp_ek = {
-      0xD2, 0xE6, 0x9A, 0x05, 0x53, 0x4A, 0x72, 0x32, 0xC5, 0xF1, 0xB7, 0x66,
-      0xE9, 0x3A, 0x5E, 0xE2, 0xEA, 0x1B, 0x26, 0xE8, 0x60, 0xA3, 0x44, 0x1A,
-      0xDE, 0xA9, 0x1E, 0xDB, 0x78, 0x2C, 0xAB, 0xC8, 0xA5, 0xD0, 0x11, 0xA2,
-      0x1B, 0xC3, 0x88, 0xE7, 0xF4, 0x86, 0xF0, 0xB7, 0x99, 0x30, 0x79, 0xAE,
-      0x3F, 0x1A, 0x7C, 0x85, 0xD2, 0x7D, 0x0F, 0x49, 0x21, 0x84, 0xD5, 0x90,
-      0x62, 0x14, 0x2B, 0x76, 0xA4, 0x37, 0x34, 0xA9, 0x0D, 0x55, 0x6A, 0x95,
-      0xDC, 0x48, 0x3D, 0xD8, 0x21, 0x04, 0xED, 0x58, 0xCA, 0x15, 0x71, 0xC3,
-      0x96, 0x85, 0x82, 0x79, 0x51, 0x43, 0x4C, 0xC1, 0x00, 0x1A, 0xA4, 0xC8,
-      0x13, 0x26, 0x1E, 0x4F, 0x93, 0x02, 0x8E, 0x14, 0xCD, 0x08, 0xF7, 0x68,
-      0xA4, 0x54, 0x31, 0x0C, 0x3B, 0x01, 0x0C, 0x83, 0xB7, 0x4D, 0x04, 0xA5,
-      0x7B, 0xB9, 0x77, 0xB3, 0xD8, 0xBC, 0xF3, 0xAA, 0xA7, 0x8C, 0xA1, 0x2B,
-      0x78, 0xF0, 0x10, 0xD9, 0x51, 0x34, 0x92, 0x8A, 0x5E, 0x5D, 0x96, 0xA0,
-      0x29, 0xB4, 0x42, 0xA4, 0x18, 0x88, 0x03, 0x8B, 0x29, 0xC2, 0xF1, 0x22,
-      0xB0, 0xB6, 0xB3, 0xAF, 0x12, 0x1A, 0xEA, 0x29, 0xA0, 0x55, 0x53, 0xBD,
-      0xF1, 0xDB, 0x60, 0x7A, 0xFB, 0x17, 0x00, 0x18, 0x60, 0xAF, 0x18, 0x23,
-      0xBC, 0xF0, 0x3D, 0xB3, 0xB4, 0x41, 0xDA, 0x16, 0x3A, 0x28, 0xC5, 0x23,
-      0xA5, 0xFB, 0x46, 0x69, 0xA6, 0x42, 0x34, 0xA4, 0xBC, 0xD1, 0x21, 0x7F,
-      0xF2, 0x63, 0x5B, 0xD9, 0x76, 0x80, 0xFF, 0x93, 0x8D, 0xBC, 0xF1, 0x0E,
-      0x95, 0x32, 0xA9, 0xA7, 0x9A, 0x5B, 0x07, 0x3A, 0x9E, 0x8D, 0xB2, 0x12,
-      0x3D, 0x21, 0x0F, 0xAE, 0xA2, 0x00, 0xB6, 0x64, 0x83, 0x8E, 0x80, 0x07,
-      0x1F, 0x2B, 0xA2, 0x54, 0xAA, 0xC8, 0x90, 0xA4, 0x6E, 0x28, 0xEC, 0x34,
-      0x2D, 0x92, 0x81, 0x2B, 0x01, 0x59, 0x30, 0x71, 0x65, 0x7E, 0x7A, 0x3A,
-      0x4A, 0x75, 0xCB, 0x3D, 0x52, 0x79, 0xCE, 0x88, 0x40, 0x5A, 0xC5, 0xAD,
-      0xAC, 0xB2, 0x05, 0x1E, 0x02, 0x2E, 0xE0, 0xAC, 0x9B, 0xBF, 0xE3, 0x2D,
-      0xEF, 0x98, 0x66, 0x7E, 0xD3, 0x47, 0xAD, 0xCB, 0x39, 0x30, 0xF3, 0xCA,
-      0xD0, 0x31, 0x39, 0x1B, 0x70, 0x9A, 0x4E, 0x61, 0xB8, 0xDD, 0x4B, 0x3F,
-      0xB7, 0x41, 0xB5, 0xBD, 0x60, 0xBF, 0x30, 0x40, 0x15, 0xEE, 0x75, 0x46,
-      0xA2, 0x4B, 0x59, 0xEA, 0xDC, 0xA1, 0x37, 0xC7, 0x12, 0x50, 0x74, 0x72,
-      0x6B, 0x76, 0x86, 0xEC, 0x55, 0x1B, 0x7B, 0xC2, 0x6B, 0xBD, 0xB2, 0x0F,
-      0xC3, 0x78, 0x35, 0x34, 0xE3, 0x4E, 0xE1, 0xF1, 0xBC, 0x6B, 0x77, 0xAB,
-      0x49, 0xA6, 0x66, 0x78, 0x46, 0x97, 0x57, 0x78, 0xC3, 0xC5, 0x36, 0x83,
-      0x04, 0x50, 0xA3, 0xFA, 0x91, 0x02, 0x59, 0x72, 0x2F, 0x3F, 0x80, 0x6E,
-      0x6E, 0xB4, 0xB9, 0x34, 0x67, 0x63, 0xFE, 0xF0, 0x92, 0x2B, 0xC4, 0xB6,
-      0xEB, 0x38, 0x26, 0xAF, 0xF2, 0x4E, 0xAD, 0xC6, 0xCF, 0x6E, 0x47, 0x7C,
-      0x2E, 0x05, 0x5C, 0xFB, 0x7A, 0x90, 0xA5, 0x5C, 0x06, 0xD0, 0xB2, 0xA2,
-      0xF5, 0x11, 0x60, 0x69, 0xE6, 0x4A, 0x5B, 0x50, 0x78, 0xC0, 0x57, 0x7B,
-      0xC8, 0xE7, 0x90, 0x0E, 0xA7, 0x1C, 0x34, 0x1C, 0x02, 0xAD, 0x85, 0x4E,
-      0xA5, 0xA0, 0x1A, 0xF2, 0xA6, 0x05, 0xCB, 0x20, 0x68, 0xD5, 0x24, 0x38,
-      0xCD, 0xDC, 0x60, 0xB0, 0x38, 0x82, 0xCC, 0x02, 0x4D, 0x13, 0x04, 0x5F,
-      0x2B, 0xA6, 0xB0, 0xF4, 0x46, 0xAA, 0xA5, 0x95, 0x87, 0x60, 0x61, 0x79,
-      0x45, 0x37, 0x1F, 0xD7, 0x8C, 0x28, 0xA4, 0x06, 0x77, 0xA6, 0xE7, 0x2F,
-      0x51, 0x3B, 0x9E, 0x06, 0x67, 0xA9, 0xBA, 0xF4, 0x46, 0xC1, 0xBA, 0x93,
-      0x1B, 0xA8, 0x18, 0x34, 0x23, 0x47, 0x92, 0xA2, 0xA2, 0xB2, 0xB3, 0x70,
-      0x1F, 0x31, 0xB7, 0xCF, 0x46, 0x7C, 0x80, 0xF1, 0x98, 0x11, 0x41, 0xBB,
-      0x45, 0x77, 0x93, 0xE1, 0x30, 0x70, 0x91, 0xC4, 0x8B, 0x59, 0x14, 0x64,
-      0x6A, 0x60, 0xCE, 0x1A, 0x30, 0x15, 0x43, 0x77, 0x9D, 0x7C, 0x33, 0x42,
-      0xAD, 0x17, 0x97, 0x96, 0xC2, 0xC4, 0x40, 0xD9, 0x9D, 0xF9, 0xD4, 0x1B,
-      0x52, 0xE3, 0x26, 0x25, 0xA8, 0x2A, 0xA5, 0xF5, 0x79, 0xA9, 0x92, 0x0B,
-      0xFF, 0xBA, 0x96, 0x4F, 0xA7, 0x0D, 0xB2, 0x59, 0xC8, 0x5E, 0x68, 0xC8,
-      0x13, 0x81, 0x7B, 0x13, 0x47, 0xBF, 0x19, 0x81, 0x4D, 0xA5, 0xE9, 0x36,
-      0x4A, 0x46, 0x45, 0xE6, 0x21, 0x92, 0x3D, 0x95, 0x5C, 0x21, 0x1A, 0x55,
-      0xD3, 0x55, 0xC8, 0x16, 0xDA, 0x04, 0x73, 0x0A, 0xA3, 0x24, 0x08, 0x5E,
-      0x62, 0x2B, 0x51, 0xD6, 0x10, 0x9B, 0x49, 0xF6, 0x73, 0xAD, 0xD0, 0x0E,
-      0x41, 0x47, 0x55, 0xC8, 0x02, 0x4A, 0xA0, 0x16, 0x4F, 0x24, 0x55, 0x6D,
-      0xED, 0x96, 0x3D, 0x61, 0x14, 0x38, 0x56, 0xCB, 0x4F, 0xF0, 0x56, 0x7E,
-      0x33, 0x20, 0x73, 0x0D, 0xBC, 0xBF, 0x12, 0xF6, 0x6E, 0x2B, 0x70, 0xB2,
-      0x00, 0x54, 0xA6, 0xDE, 0xA4, 0x26, 0x14, 0xB5, 0x0E, 0xF7, 0x2B, 0x15,
-      0x6F, 0x51, 0x49, 0xFC, 0x26, 0x3D, 0xD7, 0xE0, 0x39, 0xC5, 0x5A, 0x3E,
-      0xE9, 0x82, 0x7D, 0xF9, 0x2C, 0x56, 0x5D, 0x24, 0xC5, 0x5E, 0x0A, 0x81,
-      0xC6, 0x49, 0x46, 0x95, 0x34, 0x4D, 0x94, 0x87, 0x48, 0xAF, 0xBA, 0x9F,
-      0x76, 0x2C, 0x0E, 0xA9, 0x0B, 0xB7, 0x24, 0x89, 0x79, 0x02, 0x00, 0x07,
-      0x75, 0x61, 0x39, 0x49, 0x60, 0x2C, 0x48, 0xC7, 0x8A, 0x94, 0x40, 0x67,
-      0x8C, 0x24, 0x08, 0x6D, 0x32, 0x6D, 0x79, 0x64, 0x3B, 0xAF, 0x70, 0x36,
-      0xC6, 0x6C, 0x7E, 0x02, 0x6A, 0xAE, 0xFD, 0xA2, 0x80, 0x7A, 0x60, 0xBD,
-      0x7F, 0xC9, 0x13, 0x63, 0xBB, 0x02, 0x34, 0xA5, 0x90, 0x98, 0x4A, 0xA0,
-      0x11, 0xF1, 0x1D, 0x40, 0x26, 0x82, 0x18, 0xA1, 0x58, 0x83, 0x77, 0xB3,
-      0xD7, 0x67, 0x1B, 0x8B, 0x99, 0x78, 0x99, 0x19, 0xB8, 0x6E, 0xE8, 0x2B,
-      0x18, 0xEC, 0x22, 0xD4, 0xE8, 0x0A, 0x1F, 0x27, 0x85, 0x3D, 0x88, 0x94,
-      0x19, 0xD4, 0x60, 0xDE, 0xF7, 0x56, 0x7A, 0xA4, 0x56, 0x79, 0x69, 0xC4,
-      0x30, 0x48, 0xC3, 0x2B, 0x84, 0x62, 0xA9, 0xC9, 0x38, 0x6E, 0xB3, 0x15,
-      0x2A, 0x69, 0x76, 0xAA, 0x78, 0x3C, 0xDD, 0x1A, 0x8C, 0x57, 0xA9, 0xB6,
-      0xBB, 0xD8, 0x37, 0xA0, 0x06, 0x24, 0xB5, 0x8B, 0x4B, 0xA3, 0xDB, 0xB6,
-      0x3B, 0xB8, 0x20, 0x0E, 0x7B, 0xC8, 0x88, 0x81, 0xBE, 0xBD, 0xA9, 0x25,
-      0xBC, 0xA0, 0x28, 0xE2, 0x91, 0xAA, 0x1C, 0x22, 0x53, 0x9C, 0xD0, 0x4F,
-      0x90, 0x09, 0x0D, 0x7F, 0x74, 0x10, 0x8C, 0x32, 0xB8, 0x02, 0x2C, 0x15,
-      0x91, 0xC8, 0x81, 0xE7, 0x63, 0x04, 0xE2, 0x40, 0x81, 0x90, 0xE2, 0x0F,
-      0x09, 0xA5, 0x4F, 0xC2, 0x34, 0x20, 0xE2, 0x62, 0x0E, 0x9D, 0x87, 0xA3,
-      0x10, 0x8A, 0x94, 0xFE, 0xEA, 0x72, 0xD5, 0xAB, 0x7F, 0xCF, 0xB9, 0x72,
-      0xE6, 0x56, 0x1B, 0x1A, 0x7B, 0x06, 0x2F, 0x1A, 0x68, 0x2E, 0x02, 0x0A,
-      0xA2, 0x56, 0x28, 0x12, 0xB2, 0x96, 0x54, 0x7B, 0x91, 0x78, 0x24, 0xCD,
-      0xB8, 0x8C, 0x58, 0x2B, 0x5A, 0x68, 0x90, 0x17, 0x7B, 0xC7, 0x0C, 0x91,
-      0xAC, 0xAC, 0x9A, 0xBE, 0x29, 0x0A, 0xEB, 0x2C, 0x34, 0xA7, 0xE2, 0x36,
-      0x89, 0x55, 0xCB, 0x45, 0x6A, 0x34, 0x53, 0x68, 0xAB, 0xE3, 0xB9, 0x1B,
-      0x47, 0xFC, 0x30, 0xB0, 0x23, 0x3A, 0x09, 0xBA, 0x79, 0xFB, 0x11, 0x23,
-      0x8A, 0xC5, 0x08, 0xCC, 0xE6, 0x10, 0x95, 0xF8, 0x54, 0xC2, 0x32, 0x04,
-      0xA8, 0xD3, 0x6B, 0xFC, 0x2C, 0x6E, 0x05, 0xA7, 0x2A, 0xF5, 0x24, 0x4B,
-      0x17, 0xC1, 0x21, 0x01, 0xE0, 0x14, 0x51, 0x57, 0x0E, 0xB1, 0x10, 0x56,
-      0x7E, 0x85, 0x0E, 0x79, 0xC0, 0x00, 0x14, 0x24, 0x41, 0xFE, 0x41, 0x60,
-      0x02, 0x75, 0x45, 0xF6, 0x29, 0x0E, 0x85, 0x45, 0x1B, 0x80, 0x23, 0x4A,
-      0x94, 0x06, 0xC3, 0x90, 0xB0, 0xCE, 0xA3, 0xC8, 0x33, 0x5D, 0x4C, 0x6F,
-      0x85, 0x50, 0xB5, 0x44, 0xC9, 0x34, 0x3E, 0x61, 0xBA, 0x1C, 0x84, 0x89,
-      0xD1, 0xB0, 0x39, 0x97, 0x39, 0x16, 0x8A, 0xF7, 0x40, 0xA4, 0x81, 0xB0,
-      0xF5, 0xC3, 0x37, 0x25, 0x30, 0xCA, 0x06, 0xB5, 0x08, 0xEC, 0xE8, 0x38,
-      0xAB, 0x78, 0xBE, 0xE1, 0xE5, 0x97, 0xA9, 0xB1, 0x4F, 0x6A, 0xEC, 0x7A,
-      0x3B, 0xD1, 0xAA, 0x8D, 0x10, 0xBA, 0xC2, 0x3B, 0x98, 0x02, 0x90, 0x2C,
-      0xD5, 0x29, 0xAB, 0x6E, 0xF5, 0x4D, 0xB3, 0x11, 0x0C, 0xFB, 0x56, 0x1E,
-      0x7E, 0x69, 0x48, 0xE6, 0x52, 0x81, 0x25, 0x04, 0x16, 0xC3, 0x49, 0xC8,
-      0x10, 0x0B, 0x3B, 0x4D, 0x3D, 0x0F, 0x62, 0xAC, 0xAD, 0x8D, 0x16, 0x11,
-      0x75, 0xB1, 0x34, 0xF7, 0x56, 0x49, 0x37, 0xCD,
-    },
-
-    .exp_dk = {
-      0x19, 0xD7, 0x4A, 0xD5, 0x47, 0x2A, 0x8B, 0x2B, 0xAA, 0xD2, 0xA5, 0x67,
-      0x02, 0xC9, 0xB3, 0xB5, 0x51, 0x0E, 0xF3, 0x92, 0x48, 0x58, 0x06, 0x1D,
-      0x57, 0xF9, 0x0D, 0xD9, 0xA1, 0xA0, 0x1F, 0xEC, 0x2F, 0x57, 0xC5, 0x1A,
-      0x88, 0x88, 0x05, 0x34, 0x1B, 0x61, 0x7C, 0x51, 0x55, 0x39, 0x59, 0x77,
-      0x50, 0x83, 0x5C, 0x3E, 0xD7, 0xA0, 0x33, 0xB0, 0x39, 0xD7, 0x24, 0x91,
-      0x33, 0x2C, 0x5D, 0xF4, 0xA6, 0x9B, 0x6D, 0xF2, 0x61, 0x71, 0x87, 0x7A,
-      0xD1, 0xE5, 0x0A, 0xC5, 0x01, 0x00, 0xBE, 0x47, 0x28, 0x78, 0x66, 0x85,
-      0xDA, 0x7A, 0x73, 0x9E, 0x84, 0x3F, 0xF0, 0xD4, 0x59, 0x22, 0xD7, 0x28,
-      0x1E, 0x21, 0x0D, 0x5E, 0x82, 0xB9, 0x44, 0x65, 0x2F, 0x48, 0x62, 0xCF,
-      0xB3, 0xD9, 0x02, 0xDE, 0x60, 0xAF, 0xD0, 0xA1, 0x64, 0x47, 0x1B, 0x26,
-      0x14, 0x4A, 0x1D, 0x7A, 0x38, 0x09, 0x65, 0x03, 0x09, 0x59, 0x11, 0x76,
-      0x2E, 0xBA, 0x79, 0x62, 0xC4, 0x51, 0x1D, 0x05, 0xA1, 0x28, 0xF2, 0x78,
-      0x1E, 0xCB, 0x3D, 0x1F, 0x5B, 0xB1, 0x24, 0x42, 0x37, 0x61, 0x1A, 0xBA,
-      0xB9, 0x24, 0x99, 0x1F, 0x8A, 0x27, 0x32, 0xE2, 0x70, 0x32, 0x35, 0x79,
-      0x20, 0xF1, 0x97, 0xC7, 0x69, 0x2D, 0x60, 0xA9, 0x44, 0x44, 0x72, 0x25,
-      0x8C, 0xB4, 0x57, 0xC1, 0xB7, 0x1B, 0x77, 0x99, 0x54, 0x69, 0xF3, 0xA9,
-      0x62, 0xF3, 0xAB, 0xA6, 0x69, 0x96, 0x14, 0xFC, 0xCC, 0xEA, 0x74, 0x1E,
-      0x21, 0xC6, 0x00, 0xC4, 0x35, 0x7B, 0xBF, 0xAB, 0x45, 0x29, 0x27, 0xC3,
-      0xD4, 0x41, 0xBF, 0x8E, 0xD7, 0x31, 0x52, 0xF7, 0x5C, 0x08, 0xF5, 0x40,
-      0xE1, 0x86, 0xAC, 0xCA, 0x33, 0x26, 0xF4, 0x22, 0xC8, 0x4B, 0x98, 0x8D,
-      0x77, 0xE6, 0x1A, 0xE6, 0x18, 0x59, 0xCF, 0x85, 0x41, 0xF8, 0x92, 0x09,
-      0xE4, 0x98, 0x30, 0x40, 0xC5, 0x61, 0x76, 0x54, 0x80, 0x88, 0x52, 0xB6,
-      0x49, 0xB8, 0x99, 0xA3, 0x99, 0xAE, 0xC2, 0xC8, 0xBB, 0xA8, 0xA5, 0x42,
-      0xF3, 0x45, 0xAB, 0xF2, 0x81, 0x3F, 0x65, 0xE9, 0xA7, 0x91, 0xD3, 0x2C,
-      0xC2, 0xD7, 0x60, 0x26, 0xFB, 0x8D, 0x0C, 0x94, 0xB6, 0x57, 0x48, 0x9A,
-      0xBB, 0x48, 0x7D, 0xA4, 0xA2, 0xC0, 0xE3, 0x86, 0x8D, 0x3C, 0xF4, 0x7F,
-      0x1C, 0xBB, 0x2F, 0xA7, 0x9C, 0x53, 0xCF, 0xF6, 0x26, 0x47, 0x77, 0xC0,
-      0x9B, 0x17, 0x7C, 0x91, 0x31, 0x54, 0x84, 0xD2, 0xB3, 0x0B, 0x0C, 0xA2,
-      0x1F, 0x55, 0xAD, 0xD2, 0x3C, 0x57, 0xE1, 0x91, 0x1C, 0x3F, 0x08, 0x6B,
-      0xCA, 0xD2, 0x17, 0x98, 0x48, 0x6E, 0xB4, 0x7B, 0x7C, 0x58, 0x57, 0x73,
-      0x81, 0xC0, 0x9F, 0x52, 0x52, 0x58, 0x2D, 0x1B, 0x27, 0xA7, 0xD5, 0xB8,
-      0xE0, 0x60, 0xCE, 0x78, 0x20, 0x9C, 0xC8, 0x2B, 0xAE, 0x4D, 0xA6, 0x06,
-      0x80, 0x0C, 0x8D, 0xB1, 0x26, 0x8F, 0x7A, 0xD2, 0xB7, 0x93, 0xA4, 0x4F,
-      0x34, 0x61, 0x2C, 0xCE, 0xA3, 0x1C, 0xE7, 0xD7, 0x96, 0xA6, 0x5A, 0x26,
-      0x91, 0xD6, 0x15, 0x00, 0x62, 0x5F, 0x83, 0xE7, 0xBE, 0x57, 0x07, 0x7E,
-      0xE9, 0xC1, 0xB8, 0xC1, 0xCA, 0xA1, 0x37, 0xCC, 0x4B, 0x65, 0x73, 0x30,
-      0x8C, 0x19, 0x66, 0x8B, 0x24, 0xB0, 0x1E, 0x96, 0x69, 0x03, 0xAB, 0xBC,
-      0xB7, 0x9B, 0x67, 0xBE, 0x0A, 0x3E, 0x3E, 0x05, 0x8A, 0xAD, 0xA1, 0x89,
-      0xB9, 0xEA, 0x80, 0x35, 0x9A, 0xC2, 0x6F, 0x4C, 0x5C, 0x53, 0x73, 0x5F,
-      0xE4, 0xFC, 0x35, 0x24, 0x73, 0x37, 0x76, 0x0C, 0xCA, 0x35, 0x29, 0xB8,
-      0xD2, 0x66, 0xBB, 0x6C, 0x48, 0x01, 0x06, 0x54, 0xCD, 0xBC, 0x5A, 0x3E,
-      0x97, 0x57, 0x52, 0x46, 0x75, 0xAB, 0xC4, 0x13, 0x13, 0x0C, 0xC2, 0x70,
-      0x1F, 0x28, 0x93, 0x3E, 0xAB, 0xB8, 0x39, 0x2B, 0x0D, 0x6D, 0x05, 0x9C,
-      0xFC, 0x3A, 0x30, 0x32, 0x6C, 0x4F, 0xCC, 0x81, 0x0B, 0x37, 0xA4, 0x74,
-      0x8C, 0x1C, 0x53, 0x92, 0x8A, 0x49, 0x13, 0xE4, 0x8B, 0x18, 0x66, 0x97,
-      0x16, 0x2C, 0x33, 0xFF, 0xFB, 0x06, 0xDD, 0x51, 0x61, 0xC8, 0x63, 0x9D,
-      0xB1, 0x95, 0xC6, 0xCA, 0x64, 0x82, 0x9B, 0x2B, 0x3A, 0x2E, 0x4C, 0x96,
-      0x83, 0xB6, 0x6D, 0xF7, 0xFB, 0x19, 0x09, 0x90, 0x4E, 0x00, 0x02, 0x0D,
-      0xBA, 0x13, 0x4E, 0x02, 0xA1, 0x68, 0xD7, 0x6A, 0xC0, 0x76, 0xBB, 0x77,
-      0xD4, 0xDC, 0x84, 0x96, 0xB4, 0xBB, 0xE7, 0xB4, 0x69, 0x0B, 0xA2, 0x9B,
-      0x62, 0xA9, 0x1A, 0xBE, 0x72, 0xBE, 0xF3, 0x23, 0xA4, 0x4C, 0x89, 0x03,
-      0xE4, 0x82, 0xB6, 0x0D, 0x99, 0xBA, 0x61, 0xD1, 0xBB, 0xCF, 0x9C, 0xB9,
-      0x67, 0x35, 0x34, 0xC1, 0xD6, 0x47, 0x66, 0x23, 0x74, 0xEE, 0x2C, 0x7C,
-      0x5F, 0x00, 0x81, 0xBA, 0xD1, 0x49, 0xF4, 0x42, 0x06, 0x71, 0x76, 0x84,
-      0xD9, 0x74, 0x6B, 0x20, 0x48, 0x63, 0x3A, 0xF7, 0xA6, 0x8C, 0x68, 0x65,
-      0xFB, 0x59, 0x03, 0x58, 0xD8, 0xCF, 0x82, 0x14, 0x58, 0x36, 0x9B, 0x0C,
-      0x31, 0xEB, 0x59, 0x7C, 0xF5, 0xBE, 0x78, 0xEB, 0x48, 0x0E, 0xA0, 0x4E,
-      0x35, 0xFA, 0xCC, 0x38, 0x03, 0x72, 0xC8, 0xC0, 0xA0, 0x4D, 0xE2, 0x76,
-      0xB1, 0xA7, 0x21, 0x21, 0xE5, 0x96, 0xCB, 0xB2, 0x5E, 0xF7, 0x53, 0x6A,
-      0xD3, 0x80, 0x41, 0x84, 0xA8, 0x7B, 0xDF, 0xB5, 0xA7, 0x69, 0x16, 0x0B,
-      0xFB, 0xB0, 0xCA, 0x3C, 0x36, 0x07, 0x90, 0xE5, 0x56, 0x2B, 0xB7, 0x8E,
-      0xFE, 0x00, 0x69, 0xC7, 0x74, 0x83, 0xAD, 0x35, 0xCA, 0xC2, 0x37, 0xC6,
-      0x1D, 0xE7, 0x8A, 0x7D, 0xB4, 0x6F, 0xC9, 0x17, 0x12, 0x4C, 0xA1, 0x75,
-      0x10, 0xDB, 0x7D, 0xA2, 0x18, 0x89, 0x0F, 0x44, 0x8E, 0xF6, 0x31, 0x86,
-      0x13, 0xA1, 0xC9, 0x7C, 0x92, 0x8E, 0x2B, 0x7B, 0x6A, 0x54, 0x61, 0x7B,
-      0xCC, 0xB6, 0xCD, 0xF2, 0x78, 0xAE, 0x54, 0x2B, 0x56, 0xAD, 0x7B, 0xB5,
-      0xEC, 0xD8, 0xC4, 0x6A, 0x66, 0xC4, 0xFA, 0x09, 0x50, 0xCE, 0x41, 0x35,
-      0x2C, 0xB8, 0x57, 0x11, 0x89, 0x04, 0x58, 0xF2, 0x99, 0xBF, 0x40, 0xBA,
-      0x6F, 0xF2, 0xC0, 0x71, 0x38, 0x62, 0x26, 0x8B, 0x5F, 0x08, 0xE4, 0x98,
-      0x45, 0xB0, 0x94, 0x43, 0x99, 0x7A, 0xB2, 0x9A, 0x62, 0x07, 0x3C, 0x0D,
-      0x98, 0x18, 0xC0, 0x20, 0x16, 0x7D, 0x47, 0x49, 0x23, 0x1C, 0x05, 0x9E,
-      0x6F, 0x48, 0x3F, 0x97, 0x68, 0x17, 0xC9, 0x0C, 0x20, 0xA9, 0xC9, 0x37,
-      0x07, 0x9C, 0x2D, 0x4B, 0xE3, 0x0D, 0xA9, 0x74, 0xA9, 0x7E, 0x4B, 0xC5,
-      0x3E, 0xD9, 0x6A, 0x55, 0x16, 0x9F, 0x4A, 0x23, 0xA3, 0xEA, 0x24, 0xBD,
-      0x8E, 0x01, 0xB8, 0xFA, 0xEB, 0x95, 0xD4, 0xE5, 0x3F, 0xFF, 0xEC, 0xB6,
-      0x08, 0x02, 0xC3, 0x88, 0xA4, 0x0F, 0x46, 0x60, 0x54, 0x0B, 0x1B, 0x1F,
-      0x81, 0x76, 0xC9, 0x81, 0x1B, 0xB2, 0x6A, 0x68, 0x3C, 0xA7, 0x89, 0x56,
-      0x4A, 0x29, 0x40, 0xFC, 0xEB, 0x2C, 0xE6, 0xA9, 0x2A, 0x1E, 0xE4, 0x5E,
-      0xE4, 0xC3, 0x18, 0x57, 0xC9, 0xB9, 0xB8, 0xB5, 0x6A, 0x79, 0xD9, 0x5A,
-      0x46, 0xCB, 0x39, 0x3A, 0x31, 0xA2, 0x73, 0x7B, 0xAF, 0xEA, 0x6C, 0x81,
-      0x06, 0x6A, 0x67, 0x2B, 0x34, 0xC1, 0x0A, 0xA9, 0x89, 0x57, 0xC9, 0x17,
-      0x66, 0xB7, 0x30, 0x03, 0x6A, 0x56, 0xD9, 0x40, 0xAA, 0x4E, 0xBC, 0xB7,
-      0x58, 0xB0, 0x83, 0x51, 0xE2, 0xC4, 0xFD, 0x19, 0x45, 0x3B, 0xF3, 0xA6,
-      0x29, 0x2A, 0x99, 0x3D, 0x67, 0xC7, 0xEC, 0xC7, 0x2F, 0x42, 0xF7, 0x82,
-      0xE9, 0xEB, 0xAA, 0x1A, 0x8B, 0x3B, 0x0F, 0x56, 0x7A, 0xB3, 0x94, 0x21,
-      0xF6, 0xA6, 0x7A, 0x6B, 0x84, 0x10, 0xFD, 0x94, 0xA7, 0x21, 0xD3, 0x65,
-      0xF1, 0x63, 0x9E, 0x9D, 0xDA, 0xBF, 0xD0, 0xA6, 0xCE, 0x1A, 0x46, 0x05,
-      0xBD, 0x2B, 0x1C, 0x9B, 0x97, 0x7B, 0xD1, 0xEA, 0x32, 0x86, 0x73, 0x68,
-      0xD6, 0xE6, 0x39, 0xD0, 0x19, 0xAC, 0x10, 0x18, 0x53, 0xBC, 0x15, 0x3C,
-      0x86, 0xF8, 0x52, 0x80, 0xFC, 0x76, 0x3B, 0xA2, 0x4F, 0xB5, 0x7A, 0x29,
-      0x6C, 0xB1, 0x2D, 0x32, 0xE0, 0x8A, 0xB3, 0x2C, 0x55, 0x1D, 0x5A, 0x45,
-      0xA4, 0xA2, 0x8F, 0x9A, 0xDC, 0x28, 0xF7, 0xA2, 0x90, 0x0E, 0x25, 0xA4,
-      0x0B, 0x51, 0x90, 0xB2, 0x2A, 0xB1, 0x9D, 0xFB, 0x24, 0x6F, 0x42, 0xB2,
-      0x4F, 0x97, 0xCC, 0xA9, 0xB0, 0x9B, 0xEA, 0xD2, 0x46, 0xE1, 0x73, 0x4F,
-      0x44, 0x66, 0x77, 0xB3, 0x8B, 0x75, 0x22, 0xB7, 0x80, 0x72, 0x7C, 0x11,
-      0x74, 0x40, 0xC9, 0xF1, 0xA0, 0x24, 0x52, 0x0C, 0x14, 0x1A, 0x69, 0xCD,
-      0xD2, 0xE6, 0x9A, 0x05, 0x53, 0x4A, 0x72, 0x32, 0xC5, 0xF1, 0xB7, 0x66,
-      0xE9, 0x3A, 0x5E, 0xE2, 0xEA, 0x1B, 0x26, 0xE8, 0x60, 0xA3, 0x44, 0x1A,
-      0xDE, 0xA9, 0x1E, 0xDB, 0x78, 0x2C, 0xAB, 0xC8, 0xA5, 0xD0, 0x11, 0xA2,
-      0x1B, 0xC3, 0x88, 0xE7, 0xF4, 0x86, 0xF0, 0xB7, 0x99, 0x30, 0x79, 0xAE,
-      0x3F, 0x1A, 0x7C, 0x85, 0xD2, 0x7D, 0x0F, 0x49, 0x21, 0x84, 0xD5, 0x90,
-      0x62, 0x14, 0x2B, 0x76, 0xA4, 0x37, 0x34, 0xA9, 0x0D, 0x55, 0x6A, 0x95,
-      0xDC, 0x48, 0x3D, 0xD8, 0x21, 0x04, 0xED, 0x58, 0xCA, 0x15, 0x71, 0xC3,
-      0x96, 0x85, 0x82, 0x79, 0x51, 0x43, 0x4C, 0xC1, 0x00, 0x1A, 0xA4, 0xC8,
-      0x13, 0x26, 0x1E, 0x4F, 0x93, 0x02, 0x8E, 0x14, 0xCD, 0x08, 0xF7, 0x68,
-      0xA4, 0x54, 0x31, 0x0C, 0x3B, 0x01, 0x0C, 0x83, 0xB7, 0x4D, 0x04, 0xA5,
-      0x7B, 0xB9, 0x77, 0xB3, 0xD8, 0xBC, 0xF3, 0xAA, 0xA7, 0x8C, 0xA1, 0x2B,
-      0x78, 0xF0, 0x10, 0xD9, 0x51, 0x34, 0x92, 0x8A, 0x5E, 0x5D, 0x96, 0xA0,
-      0x29, 0xB4, 0x42, 0xA4, 0x18, 0x88, 0x03, 0x8B, 0x29, 0xC2, 0xF1, 0x22,
-      0xB0, 0xB6, 0xB3, 0xAF, 0x12, 0x1A, 0xEA, 0x29, 0xA0, 0x55, 0x53, 0xBD,
-      0xF1, 0xDB, 0x60, 0x7A, 0xFB, 0x17, 0x00, 0x18, 0x60, 0xAF, 0x18, 0x23,
-      0xBC, 0xF0, 0x3D, 0xB3, 0xB4, 0x41, 0xDA, 0x16, 0x3A, 0x28, 0xC5, 0x23,
-      0xA5, 0xFB, 0x46, 0x69, 0xA6, 0x42, 0x34, 0xA4, 0xBC, 0xD1, 0x21, 0x7F,
-      0xF2, 0x63, 0x5B, 0xD9, 0x76, 0x80, 0xFF, 0x93, 0x8D, 0xBC, 0xF1, 0x0E,
-      0x95, 0x32, 0xA9, 0xA7, 0x9A, 0x5B, 0x07, 0x3A, 0x9E, 0x8D, 0xB2, 0x12,
-      0x3D, 0x21, 0x0F, 0xAE, 0xA2, 0x00, 0xB6, 0x64, 0x83, 0x8E, 0x80, 0x07,
-      0x1F, 0x2B, 0xA2, 0x54, 0xAA, 0xC8, 0x90, 0xA4, 0x6E, 0x28, 0xEC, 0x34,
-      0x2D, 0x92, 0x81, 0x2B, 0x01, 0x59, 0x30, 0x71, 0x65, 0x7E, 0x7A, 0x3A,
-      0x4A, 0x75, 0xCB, 0x3D, 0x52, 0x79, 0xCE, 0x88, 0x40, 0x5A, 0xC5, 0xAD,
-      0xAC, 0xB2, 0x05, 0x1E, 0x02, 0x2E, 0xE0, 0xAC, 0x9B, 0xBF, 0xE3, 0x2D,
-      0xEF, 0x98, 0x66, 0x7E, 0xD3, 0x47, 0xAD, 0xCB, 0x39, 0x30, 0xF3, 0xCA,
-      0xD0, 0x31, 0x39, 0x1B, 0x70, 0x9A, 0x4E, 0x61, 0xB8, 0xDD, 0x4B, 0x3F,
-      0xB7, 0x41, 0xB5, 0xBD, 0x60, 0xBF, 0x30, 0x40, 0x15, 0xEE, 0x75, 0x46,
-      0xA2, 0x4B, 0x59, 0xEA, 0xDC, 0xA1, 0x37, 0xC7, 0x12, 0x50, 0x74, 0x72,
-      0x6B, 0x76, 0x86, 0xEC, 0x55, 0x1B, 0x7B, 0xC2, 0x6B, 0xBD, 0xB2, 0x0F,
-      0xC3, 0x78, 0x35, 0x34, 0xE3, 0x4E, 0xE1, 0xF1, 0xBC, 0x6B, 0x77, 0xAB,
-      0x49, 0xA6, 0x66, 0x78, 0x46, 0x97, 0x57, 0x78, 0xC3, 0xC5, 0x36, 0x83,
-      0x04, 0x50, 0xA3, 0xFA, 0x91, 0x02, 0x59, 0x72, 0x2F, 0x3F, 0x80, 0x6E,
-      0x6E, 0xB4, 0xB9, 0x34, 0x67, 0x63, 0xFE, 0xF0, 0x92, 0x2B, 0xC4, 0xB6,
-      0xEB, 0x38, 0x26, 0xAF, 0xF2, 0x4E, 0xAD, 0xC6, 0xCF, 0x6E, 0x47, 0x7C,
-      0x2E, 0x05, 0x5C, 0xFB, 0x7A, 0x90, 0xA5, 0x5C, 0x06, 0xD0, 0xB2, 0xA2,
-      0xF5, 0x11, 0x60, 0x69, 0xE6, 0x4A, 0x5B, 0x50, 0x78, 0xC0, 0x57, 0x7B,
-      0xC8, 0xE7, 0x90, 0x0E, 0xA7, 0x1C, 0x34, 0x1C, 0x02, 0xAD, 0x85, 0x4E,
-      0xA5, 0xA0, 0x1A, 0xF2, 0xA6, 0x05, 0xCB, 0x20, 0x68, 0xD5, 0x24, 0x38,
-      0xCD, 0xDC, 0x60, 0xB0, 0x38, 0x82, 0xCC, 0x02, 0x4D, 0x13, 0x04, 0x5F,
-      0x2B, 0xA6, 0xB0, 0xF4, 0x46, 0xAA, 0xA5, 0x95, 0x87, 0x60, 0x61, 0x79,
-      0x45, 0x37, 0x1F, 0xD7, 0x8C, 0x28, 0xA4, 0x06, 0x77, 0xA6, 0xE7, 0x2F,
-      0x51, 0x3B, 0x9E, 0x06, 0x67, 0xA9, 0xBA, 0xF4, 0x46, 0xC1, 0xBA, 0x93,
-      0x1B, 0xA8, 0x18, 0x34, 0x23, 0x47, 0x92, 0xA2, 0xA2, 0xB2, 0xB3, 0x70,
-      0x1F, 0x31, 0xB7, 0xCF, 0x46, 0x7C, 0x80, 0xF1, 0x98, 0x11, 0x41, 0xBB,
-      0x45, 0x77, 0x93, 0xE1, 0x30, 0x70, 0x91, 0xC4, 0x8B, 0x59, 0x14, 0x64,
-      0x6A, 0x60, 0xCE, 0x1A, 0x30, 0x15, 0x43, 0x77, 0x9D, 0x7C, 0x33, 0x42,
-      0xAD, 0x17, 0x97, 0x96, 0xC2, 0xC4, 0x40, 0xD9, 0x9D, 0xF9, 0xD4, 0x1B,
-      0x52, 0xE3, 0x26, 0x25, 0xA8, 0x2A, 0xA5, 0xF5, 0x79, 0xA9, 0x92, 0x0B,
-      0xFF, 0xBA, 0x96, 0x4F, 0xA7, 0x0D, 0xB2, 0x59, 0xC8, 0x5E, 0x68, 0xC8,
-      0x13, 0x81, 0x7B, 0x13, 0x47, 0xBF, 0x19, 0x81, 0x4D, 0xA5, 0xE9, 0x36,
-      0x4A, 0x46, 0x45, 0xE6, 0x21, 0x92, 0x3D, 0x95, 0x5C, 0x21, 0x1A, 0x55,
-      0xD3, 0x55, 0xC8, 0x16, 0xDA, 0x04, 0x73, 0x0A, 0xA3, 0x24, 0x08, 0x5E,
-      0x62, 0x2B, 0x51, 0xD6, 0x10, 0x9B, 0x49, 0xF6, 0x73, 0xAD, 0xD0, 0x0E,
-      0x41, 0x47, 0x55, 0xC8, 0x02, 0x4A, 0xA0, 0x16, 0x4F, 0x24, 0x55, 0x6D,
-      0xED, 0x96, 0x3D, 0x61, 0x14, 0x38, 0x56, 0xCB, 0x4F, 0xF0, 0x56, 0x7E,
-      0x33, 0x20, 0x73, 0x0D, 0xBC, 0xBF, 0x12, 0xF6, 0x6E, 0x2B, 0x70, 0xB2,
-      0x00, 0x54, 0xA6, 0xDE, 0xA4, 0x26, 0x14, 0xB5, 0x0E, 0xF7, 0x2B, 0x15,
-      0x6F, 0x51, 0x49, 0xFC, 0x26, 0x3D, 0xD7, 0xE0, 0x39, 0xC5, 0x5A, 0x3E,
-      0xE9, 0x82, 0x7D, 0xF9, 0x2C, 0x56, 0x5D, 0x24, 0xC5, 0x5E, 0x0A, 0x81,
-      0xC6, 0x49, 0x46, 0x95, 0x34, 0x4D, 0x94, 0x87, 0x48, 0xAF, 0xBA, 0x9F,
-      0x76, 0x2C, 0x0E, 0xA9, 0x0B, 0xB7, 0x24, 0x89, 0x79, 0x02, 0x00, 0x07,
-      0x75, 0x61, 0x39, 0x49, 0x60, 0x2C, 0x48, 0xC7, 0x8A, 0x94, 0x40, 0x67,
-      0x8C, 0x24, 0x08, 0x6D, 0x32, 0x6D, 0x79, 0x64, 0x3B, 0xAF, 0x70, 0x36,
-      0xC6, 0x6C, 0x7E, 0x02, 0x6A, 0xAE, 0xFD, 0xA2, 0x80, 0x7A, 0x60, 0xBD,
-      0x7F, 0xC9, 0x13, 0x63, 0xBB, 0x02, 0x34, 0xA5, 0x90, 0x98, 0x4A, 0xA0,
-      0x11, 0xF1, 0x1D, 0x40, 0x26, 0x82, 0x18, 0xA1, 0x58, 0x83, 0x77, 0xB3,
-      0xD7, 0x67, 0x1B, 0x8B, 0x99, 0x78, 0x99, 0x19, 0xB8, 0x6E, 0xE8, 0x2B,
-      0x18, 0xEC, 0x22, 0xD4, 0xE8, 0x0A, 0x1F, 0x27, 0x85, 0x3D, 0x88, 0x94,
-      0x19, 0xD4, 0x60, 0xDE, 0xF7, 0x56, 0x7A, 0xA4, 0x56, 0x79, 0x69, 0xC4,
-      0x30, 0x48, 0xC3, 0x2B, 0x84, 0x62, 0xA9, 0xC9, 0x38, 0x6E, 0xB3, 0x15,
-      0x2A, 0x69, 0x76, 0xAA, 0x78, 0x3C, 0xDD, 0x1A, 0x8C, 0x57, 0xA9, 0xB6,
-      0xBB, 0xD8, 0x37, 0xA0, 0x06, 0x24, 0xB5, 0x8B, 0x4B, 0xA3, 0xDB, 0xB6,
-      0x3B, 0xB8, 0x20, 0x0E, 0x7B, 0xC8, 0x88, 0x81, 0xBE, 0xBD, 0xA9, 0x25,
-      0xBC, 0xA0, 0x28, 0xE2, 0x91, 0xAA, 0x1C, 0x22, 0x53, 0x9C, 0xD0, 0x4F,
-      0x90, 0x09, 0x0D, 0x7F, 0x74, 0x10, 0x8C, 0x32, 0xB8, 0x02, 0x2C, 0x15,
-      0x91, 0xC8, 0x81, 0xE7, 0x63, 0x04, 0xE2, 0x40, 0x81, 0x90, 0xE2, 0x0F,
-      0x09, 0xA5, 0x4F, 0xC2, 0x34, 0x20, 0xE2, 0x62, 0x0E, 0x9D, 0x87, 0xA3,
-      0x10, 0x8A, 0x94, 0xFE, 0xEA, 0x72, 0xD5, 0xAB, 0x7F, 0xCF, 0xB9, 0x72,
-      0xE6, 0x56, 0x1B, 0x1A, 0x7B, 0x06, 0x2F, 0x1A, 0x68, 0x2E, 0x02, 0x0A,
-      0xA2, 0x56, 0x28, 0x12, 0xB2, 0x96, 0x54, 0x7B, 0x91, 0x78, 0x24, 0xCD,
-      0xB8, 0x8C, 0x58, 0x2B, 0x5A, 0x68, 0x90, 0x17, 0x7B, 0xC7, 0x0C, 0x91,
-      0xAC, 0xAC, 0x9A, 0xBE, 0x29, 0x0A, 0xEB, 0x2C, 0x34, 0xA7, 0xE2, 0x36,
-      0x89, 0x55, 0xCB, 0x45, 0x6A, 0x34, 0x53, 0x68, 0xAB, 0xE3, 0xB9, 0x1B,
-      0x47, 0xFC, 0x30, 0xB0, 0x23, 0x3A, 0x09, 0xBA, 0x79, 0xFB, 0x11, 0x23,
-      0x8A, 0xC5, 0x08, 0xCC, 0xE6, 0x10, 0x95, 0xF8, 0x54, 0xC2, 0x32, 0x04,
-      0xA8, 0xD3, 0x6B, 0xFC, 0x2C, 0x6E, 0x05, 0xA7, 0x2A, 0xF5, 0x24, 0x4B,
-      0x17, 0xC1, 0x21, 0x01, 0xE0, 0x14, 0x51, 0x57, 0x0E, 0xB1, 0x10, 0x56,
-      0x7E, 0x85, 0x0E, 0x79, 0xC0, 0x00, 0x14, 0x24, 0x41, 0xFE, 0x41, 0x60,
-      0x02, 0x75, 0x45, 0xF6, 0x29, 0x0E, 0x85, 0x45, 0x1B, 0x80, 0x23, 0x4A,
-      0x94, 0x06, 0xC3, 0x90, 0xB0, 0xCE, 0xA3, 0xC8, 0x33, 0x5D, 0x4C, 0x6F,
-      0x85, 0x50, 0xB5, 0x44, 0xC9, 0x34, 0x3E, 0x61, 0xBA, 0x1C, 0x84, 0x89,
-      0xD1, 0xB0, 0x39, 0x97, 0x39, 0x16, 0x8A, 0xF7, 0x40, 0xA4, 0x81, 0xB0,
-      0xF5, 0xC3, 0x37, 0x25, 0x30, 0xCA, 0x06, 0xB5, 0x08, 0xEC, 0xE8, 0x38,
-      0xAB, 0x78, 0xBE, 0xE1, 0xE5, 0x97, 0xA9, 0xB1, 0x4F, 0x6A, 0xEC, 0x7A,
-      0x3B, 0xD1, 0xAA, 0x8D, 0x10, 0xBA, 0xC2, 0x3B, 0x98, 0x02, 0x90, 0x2C,
-      0xD5, 0x29, 0xAB, 0x6E, 0xF5, 0x4D, 0xB3, 0x11, 0x0C, 0xFB, 0x56, 0x1E,
-      0x7E, 0x69, 0x48, 0xE6, 0x52, 0x81, 0x25, 0x04, 0x16, 0xC3, 0x49, 0xC8,
-      0x10, 0x0B, 0x3B, 0x4D, 0x3D, 0x0F, 0x62, 0xAC, 0xAD, 0x8D, 0x16, 0x11,
-      0x75, 0xB1, 0x34, 0xF7, 0x56, 0x49, 0x37, 0xCD, 0xEC, 0xE9, 0xE2, 0x46,
-      0xAA, 0xD1, 0x10, 0x21, 0xA6, 0x7B, 0x20, 0xEB, 0x8F, 0x77, 0x65, 0xAC,
-      0x28, 0x23, 0xA9, 0xD1, 0x8C, 0x93, 0xEC, 0x28, 0x2D, 0x6D, 0xBC, 0x53,
-      0xCD, 0x6D, 0xF5, 0x75, 0x92, 0xAC, 0x7D, 0x1F, 0x83, 0xBA, 0xFA, 0xE6,
-      0xEE, 0x86, 0xFE, 0x00, 0xF9, 0x5D, 0x81, 0x33, 0x75, 0x77, 0x24, 0x34,
-      0x86, 0x0F, 0x5F, 0xF7, 0xD5, 0x4F, 0xFC, 0x37, 0x39, 0x9B, 0xC4, 0xCC,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // generate pke768 ek and dk from seed
-    uint8_t got_ek[PKE768_EK_SIZE] = { 0 },
-            got_dk[FIPS203IPD_KEM768_DK_SIZE] = { 0 };
-    fips203ipd_kem768_keygen(got_ek, got_dk, TESTS[i].seed);
-
-    // check for expected ek
-    if (memcmp(&got_ek, &(TESTS[i].exp_ek), sizeof(got_ek))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ek", TESTS[i].name);
-      fail_test(__func__, name, got_ek, sizeof(got_ek), TESTS[i].exp_ek, sizeof(got_ek));
-    }
-
-    // check for expected dk
-    if (memcmp(&got_dk, &(TESTS[i].exp_dk), sizeof(got_dk))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - dk", TESTS[i].name);
-      fail_test(__func__, name, got_dk, sizeof(got_dk), TESTS[i].exp_dk, sizeof(got_dk));
-    }
-  }
-}
-
-static void test_fips203ipd_kem768_encaps(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t ek[FIPS203IPD_KEM768_EK_SIZE]; // test encapsulation key (1184 bytes)
-    const uint8_t seed[32]; // test randomness (32 bytes)
-    const uint8_t exp_k[32]; // expected shared key (32 bytes)
-    const uint8_t exp_ct[FIPS203IPD_KEM768_CT_SIZE]; // expected ciphertext (1088 bytes)
-  } TESTS[] = {{
-    .name = "seed = 0",
-    .ek = {
-      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
-      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
-      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
-      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
-      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
-      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
-      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
-      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
-      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
-      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
-      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
-      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
-      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
-      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
-      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
-      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
-      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
-      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
-      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
-      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
-      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
-      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
-      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
-      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
-      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
-      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
-      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
-      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
-      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
-      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
-      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
-      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
-      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
-      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
-      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
-      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
-      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
-      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
-      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
-      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
-      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
-      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
-      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
-      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
-      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
-      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
-      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
-      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
-      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
-      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
-      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
-      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
-      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
-      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
-      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
-      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
-      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
-      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
-      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
-      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
-      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
-      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
-      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
-      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
-      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
-      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
-      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
-      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
-      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
-      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
-      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
-      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
-      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
-      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
-      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
-      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
-      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
-      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
-      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
-      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
-      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
-      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
-      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
-      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
-      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
-      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
-      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
-      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
-      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
-      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
-      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
-      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
-      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
-      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
-      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
-      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-    },
-    .seed = { 0 },
-
-    .exp_k = {
-      0xbd, 0xf6, 0xaf, 0x94, 0x41, 0x1a, 0x58, 0x70, 0xb7, 0xae, 0x04, 0xc4,
-      0x4d, 0xd4, 0x96, 0x71, 0x1b, 0xfc, 0xf1, 0x04, 0x25, 0xd1, 0x60, 0xc4,
-      0x31, 0xa1, 0x1a, 0xf4, 0x3a, 0x17, 0xd9, 0x66,
-    },
-
-    .exp_ct = {
-      0x48, 0xd2, 0x58, 0xe8, 0x0d, 0xfa, 0x6c, 0xa4, 0x7c, 0xba, 0xc3, 0x79,
-      0xb1, 0xb3, 0xed, 0x39, 0xba, 0xe3, 0xcf, 0x4a, 0xe8, 0xfd, 0xbe, 0x2d,
-      0xba, 0xed, 0xf0, 0xf9, 0xf6, 0x5c, 0x75, 0x54, 0x42, 0xb2, 0x0e, 0x7c,
-      0xa7, 0xd1, 0x35, 0x98, 0xe5, 0x14, 0x56, 0x45, 0xa0, 0x6d, 0x8c, 0x49,
-      0x53, 0xbd, 0xbe, 0x8a, 0x9f, 0x67, 0x69, 0xa6, 0x44, 0x12, 0x8b, 0xdf,
-      0x7c, 0x6a, 0x7f, 0x5f, 0xb2, 0x4a, 0x66, 0xf8, 0x75, 0xdd, 0x37, 0xb8,
-      0x2a, 0x67, 0xe1, 0xf8, 0x82, 0x79, 0x4e, 0xe4, 0xa6, 0xb6, 0xdb, 0x92,
-      0x38, 0xed, 0xb8, 0x94, 0x16, 0xf8, 0xea, 0xb1, 0x4f, 0x20, 0xb6, 0x83,
-      0xf2, 0x50, 0xa9, 0xc1, 0x45, 0x89, 0xb5, 0x24, 0x9a, 0x85, 0x48, 0xed,
-      0x35, 0x36, 0x8f, 0x1a, 0x74, 0x4d, 0x8f, 0x60, 0x55, 0xee, 0xc5, 0x0c,
-      0x16, 0xb0, 0x58, 0x9c, 0x98, 0x28, 0x11, 0xae, 0x0a, 0x92, 0xe0, 0xd5,
-      0x87, 0x12, 0x15, 0xe0, 0x90, 0xb5, 0x6a, 0x8f, 0xa1, 0x63, 0x49, 0x50,
-      0xee, 0x51, 0x76, 0x16, 0x71, 0xb9, 0xf9, 0xb5, 0x37, 0xbe, 0x32, 0xa0,
-      0x0f, 0xc5, 0xed, 0x4e, 0x70, 0xf2, 0x4e, 0x34, 0x63, 0x46, 0xea, 0x7b,
-      0x82, 0x59, 0x6b, 0x9b, 0x86, 0x86, 0xfe, 0x89, 0x6a, 0xd2, 0xfb, 0xef,
-      0x09, 0x67, 0x4b, 0xb5, 0xf0, 0x8c, 0xb9, 0x12, 0xdd, 0x29, 0x8c, 0x11,
-      0x30, 0x03, 0xf0, 0xec, 0x31, 0xac, 0xc4, 0x83, 0x56, 0xf1, 0x78, 0x22,
-      0x9a, 0x77, 0x54, 0xfb, 0xa4, 0x60, 0x05, 0x7b, 0xac, 0xb6, 0x18, 0x4f,
-      0x0a, 0xae, 0x3a, 0xee, 0xfa, 0xf5, 0x8a, 0x60, 0xe9, 0xe6, 0xe5, 0x07,
-      0x19, 0x01, 0xaf, 0xe1, 0xab, 0xf9, 0xc9, 0x15, 0xc0, 0x15, 0x9e, 0xe0,
-      0x67, 0x43, 0xee, 0x87, 0x0a, 0x14, 0x0a, 0x4c, 0x36, 0x8d, 0x65, 0x97,
-      0xdb, 0x6f, 0xaf, 0x89, 0x0e, 0xda, 0x2a, 0x51, 0x00, 0x2e, 0x5a, 0x3b,
-      0x91, 0x21, 0xa2, 0x68, 0x64, 0x5c, 0x01, 0xab, 0x07, 0xa7, 0x80, 0x54,
-      0x12, 0x79, 0x2a, 0x53, 0x7b, 0x1f, 0x93, 0xb9, 0x74, 0x48, 0x53, 0x0d,
-      0x1b, 0xc0, 0x2a, 0xa0, 0xde, 0xbc, 0x37, 0xb9, 0xae, 0x89, 0xa7, 0xab,
-      0x58, 0x1b, 0x24, 0x93, 0xd6, 0xad, 0x6e, 0xbb, 0x2e, 0x7c, 0xb9, 0x0b,
-      0x3e, 0x10, 0x10, 0x6f, 0xb4, 0x0d, 0xdf, 0xd0, 0xd3, 0xc4, 0x10, 0xe7,
-      0x67, 0x9e, 0x05, 0x3a, 0x08, 0x06, 0xed, 0x44, 0x4c, 0x24, 0xcd, 0xd4,
-      0xc3, 0x4b, 0xe5, 0x12, 0x97, 0x7f, 0x1b, 0x8c, 0x25, 0x63, 0x6c, 0x45,
-      0x4f, 0x6f, 0xd2, 0x1f, 0xa9, 0xd9, 0x7e, 0xdf, 0xd5, 0xfd, 0x2b, 0xc3,
-      0x76, 0xe9, 0xae, 0x32, 0xce, 0xfc, 0x39, 0x08, 0xea, 0xef, 0xb9, 0x4d,
-      0xca, 0x32, 0x59, 0xb5, 0xeb, 0xd1, 0xa9, 0x01, 0x59, 0x5b, 0x7c, 0xaf,
-      0x39, 0x6b, 0xb5, 0x19, 0x09, 0x54, 0x90, 0x23, 0x7d, 0x07, 0x44, 0x30,
-      0x39, 0x2d, 0x8d, 0xf0, 0x63, 0xd0, 0x93, 0xa7, 0xbc, 0x9c, 0x5d, 0x05,
-      0x59, 0x23, 0x91, 0x2d, 0xd2, 0x21, 0x27, 0x2d, 0xa6, 0xe6, 0x35, 0x88,
-      0x39, 0xf3, 0xde, 0x3c, 0x5d, 0x3c, 0x87, 0x0e, 0x7c, 0xc8, 0xa5, 0xe3,
-      0xd9, 0xcb, 0x82, 0x0f, 0x3d, 0xca, 0x41, 0x05, 0xf9, 0x1b, 0xa7, 0xb3,
-      0x66, 0xf1, 0x18, 0xe7, 0x9c, 0x1c, 0x53, 0x57, 0x30, 0x91, 0xe7, 0xdf,
-      0x3e, 0x8e, 0x70, 0xe7, 0xf1, 0xb3, 0x7a, 0x39, 0x55, 0xe8, 0x1e, 0xfa,
-      0x99, 0x7f, 0xde, 0x22, 0x6a, 0x7c, 0xf6, 0x73, 0x9b, 0x8f, 0x4d, 0x6e,
-      0x92, 0xdd, 0x2e, 0x1a, 0xe9, 0x69, 0xc9, 0xd5, 0xa9, 0x89, 0x51, 0x8e,
-      0x80, 0x5a, 0xc5, 0xf9, 0x74, 0x33, 0x51, 0x5c, 0xd2, 0xba, 0xcf, 0x24,
-      0x49, 0xf1, 0xdc, 0x64, 0xc5, 0xa5, 0xdc, 0xf0, 0x07, 0xc4, 0x10, 0x90,
-      0x39, 0x25, 0x1f, 0xea, 0x96, 0xaf, 0xec, 0xf3, 0x75, 0xe0, 0x66, 0x33,
-      0x2f, 0x0d, 0x90, 0x3e, 0xbb, 0xd9, 0xad, 0x00, 0x55, 0xe0, 0x77, 0xef,
-      0x41, 0x4d, 0xb1, 0x72, 0xa2, 0xdd, 0x33, 0x63, 0x92, 0x36, 0xbe, 0x47,
-      0xfd, 0xfe, 0xfb, 0x9b, 0x71, 0x2b, 0xbd, 0xf5, 0x06, 0xdd, 0x87, 0x10,
-      0xf1, 0xd7, 0x58, 0xc1, 0xfd, 0x58, 0xbe, 0x04, 0x3f, 0x2b, 0x7d, 0x84,
-      0xd8, 0x61, 0x89, 0x0b, 0x56, 0xf7, 0xd5, 0x1a, 0x95, 0xff, 0xee, 0x52,
-      0x35, 0xf8, 0x33, 0xfb, 0xc9, 0xe2, 0x26, 0x70, 0x76, 0xc2, 0x49, 0x38,
-      0x22, 0x4f, 0x58, 0xb6, 0x8c, 0x78, 0xf6, 0x40, 0x08, 0x4d, 0x99, 0xe0,
-      0x75, 0xf2, 0x35, 0xa3, 0xf0, 0x60, 0x35, 0xda, 0x1e, 0xbb, 0xee, 0x44,
-      0xae, 0x65, 0x2b, 0xa0, 0x82, 0x65, 0x3c, 0x38, 0x79, 0x28, 0x37, 0x03,
-      0xfe, 0x43, 0x22, 0x27, 0xd8, 0x83, 0xa7, 0x96, 0x6f, 0xff, 0x62, 0xd0,
-      0x8f, 0x46, 0x4f, 0xf2, 0x17, 0x97, 0xfd, 0x7c, 0x7e, 0x69, 0x6a, 0xf7,
-      0x2c, 0x2f, 0xe2, 0x64, 0xa4, 0x95, 0xf3, 0x30, 0x27, 0x4d, 0x4e, 0x04,
-      0xe1, 0x06, 0xca, 0xe7, 0x5e, 0x60, 0xf1, 0x0f, 0x8e, 0x6e, 0xb2, 0xb8,
-      0x9e, 0x0f, 0xfd, 0xb4, 0x62, 0xdd, 0x82, 0xcc, 0x1d, 0x69, 0x67, 0xff,
-      0xb8, 0x40, 0x46, 0x81, 0xde, 0xac, 0x99, 0xec, 0xa3, 0x23, 0x67, 0xd7,
-      0x12, 0x7a, 0xcc, 0x55, 0x9f, 0x2c, 0x1b, 0xd8, 0x27, 0x56, 0x6f, 0xc1,
-      0x4e, 0x68, 0x62, 0x2a, 0xf1, 0xf9, 0x4c, 0x1d, 0x9e, 0x11, 0x05, 0x1d,
-      0xbc, 0x0e, 0xe5, 0x63, 0x63, 0x3c, 0x8f, 0x84, 0x61, 0x65, 0xc3, 0xa1,
-      0x42, 0x04, 0x16, 0x2a, 0x05, 0x61, 0xe1, 0xc8, 0xf6, 0x14, 0x3c, 0x64,
-      0x64, 0xd8, 0xbd, 0x46, 0x57, 0xbd, 0xdd, 0x1b, 0x22, 0x40, 0x59, 0x19,
-      0xb5, 0x06, 0x18, 0x99, 0x37, 0xb9, 0xa0, 0x68, 0x6a, 0x1e, 0xcd, 0xd3,
-      0xb0, 0x41, 0xb9, 0x09, 0x18, 0x44, 0xe1, 0x93, 0x2d, 0x87, 0xa0, 0xca,
-      0x02, 0x0f, 0xc1, 0xb9, 0x74, 0xcf, 0x5a, 0xd0, 0x76, 0x1d, 0xe5, 0x64,
-      0x10, 0xdf, 0x0d, 0xf5, 0x1d, 0x82, 0x0f, 0x28, 0x02, 0x44, 0x87, 0x54,
-      0x6f, 0x04, 0x68, 0x49, 0x06, 0xbd, 0xd7, 0x0c, 0xd9, 0x3b, 0xa2, 0x17,
-      0x1f, 0x3e, 0x82, 0x54, 0xc5, 0x7a, 0xc9, 0x29, 0xcd, 0x9a, 0xb1, 0x12,
-      0x58, 0xb0, 0xbb, 0x24, 0x3c, 0xe4, 0x34, 0xfa, 0x0a, 0xdf, 0x6e, 0xa7,
-      0xe0, 0x98, 0x06, 0xd5, 0xf1, 0x2b, 0x1d, 0xae, 0x60, 0xe0, 0xc0, 0x95,
-      0xa0, 0xf2, 0xda, 0x2b, 0xb7, 0xf8, 0xf1, 0x87, 0x81, 0x0e, 0x05, 0x41,
-      0x7d, 0x2b, 0x91, 0xab, 0x8c, 0x7a, 0xf2, 0x96, 0x32, 0x28, 0x8c, 0x2b,
-      0x63, 0x20, 0x74, 0x24, 0x83, 0xb5, 0x45, 0x19, 0xea, 0xa7, 0x10, 0x43,
-      0xde, 0x93, 0xd5, 0x54, 0xf5, 0x41, 0x94, 0x84, 0x02, 0xa6, 0xb8, 0x21,
-      0x0d, 0x88, 0xa9, 0x68, 0x65, 0xb6, 0xb2, 0x02, 0x8e, 0x9a, 0x11, 0x4b,
-      0x37, 0x85, 0x4d, 0x22, 0x71, 0xdb, 0xf6, 0x03, 0xea, 0xef, 0xd2, 0xe2,
-      0x8f, 0x96, 0x0a, 0x4e, 0xdc, 0xd9, 0xe1, 0x72, 0x9b, 0x21, 0x19, 0x01,
-      0xa5, 0xce, 0x58, 0x16, 0x0f, 0x19, 0x26, 0xa7, 0xcd, 0x71, 0x5f, 0x51,
-      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
-      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
-      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
-      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
-      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
-      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
-      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
-      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
-      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
-      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
-      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
-    },
-  }, {
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Encapsulation -- ML-KEM-768",
-    .ek = {
-      0x14, 0x56, 0xA2, 0xEE, 0x8C, 0x35, 0x56, 0x05, 0x4A, 0xBC, 0x79, 0xB4,
-      0x88, 0x2C, 0x31, 0x90, 0xE5, 0xCA, 0x72, 0x6A, 0xB4, 0x02, 0xE5, 0xB0,
-      0x97, 0x28, 0xC0, 0xF4, 0xF7, 0x9C, 0x9F, 0xC2, 0xAD, 0xD8, 0x28, 0xAB,
-      0xE4, 0x32, 0xB1, 0x50, 0x1B, 0x60, 0xF4, 0x6C, 0xCB, 0xC8, 0x6A, 0x33,
-      0x78, 0xC3, 0x48, 0x95, 0x70, 0x8A, 0x13, 0x67, 0x1B, 0x20, 0xB3, 0x89,
-      0x47, 0x9A, 0xAA, 0x01, 0xC6, 0x9D, 0x6B, 0x3B, 0x7D, 0x07, 0xD1, 0xC3,
-      0xAB, 0x54, 0xB9, 0x1C, 0x58, 0x0F, 0x5A, 0x33, 0x6B, 0x30, 0x06, 0x9A,
-      0x4F, 0x13, 0x4F, 0xFD, 0x37, 0x64, 0xCE, 0x73, 0xA0, 0x47, 0xE2, 0x84,
-      0x47, 0x71, 0x74, 0x2B, 0xF4, 0x71, 0x0B, 0x97, 0x2D, 0x4F, 0x65, 0x90,
-      0xA1, 0xC5, 0x3A, 0x97, 0x53, 0x68, 0xC2, 0x71, 0xB6, 0x70, 0xF1, 0xA4,
-      0x03, 0x64, 0x41, 0x05, 0x4A, 0x66, 0xE8, 0x81, 0x59, 0x97, 0x51, 0x22,
-      0x88, 0x55, 0x2F, 0xD7, 0x14, 0x9F, 0xFB, 0x70, 0x5A, 0xAE, 0x13, 0x3F,
-      0x84, 0x14, 0x06, 0x0D, 0x00, 0x92, 0xFA, 0x8A, 0x16, 0x27, 0xD7, 0x8A,
-      0xB2, 0xAB, 0xC6, 0x69, 0x62, 0x88, 0xBA, 0xF5, 0xC6, 0x0E, 0xF3, 0x70,
-      0x82, 0x7A, 0x7E, 0xFA, 0x72, 0xAE, 0x5C, 0x67, 0x41, 0xA5, 0xDA, 0x04,
-      0x3D, 0x59, 0x40, 0xF1, 0x21, 0x48, 0x53, 0x72, 0xA9, 0x8F, 0x47, 0x2D,
-      0x60, 0xF0, 0x5F, 0x74, 0xD9, 0x5F, 0x01, 0xA1, 0x99, 0x1E, 0x73, 0xA3,
-      0xE0, 0xA9, 0x53, 0x64, 0x67, 0xA4, 0x73, 0x8A, 0xB4, 0xCF, 0x38, 0x5B,
-      0xA7, 0x72, 0x82, 0x7E, 0xB8, 0xCC, 0x05, 0x8B, 0x35, 0x72, 0xE4, 0x0B,
-      0x59, 0x84, 0x44, 0xC1, 0x81, 0xC7, 0xF6, 0xD9, 0xB7, 0x60, 0xA7, 0xB9,
-      0x07, 0x09, 0x2E, 0x9C, 0x33, 0x51, 0xEA, 0x23, 0x4E, 0x44, 0x49, 0xBD,
-      0x9B, 0x61, 0xA1, 0x34, 0x65, 0x4E, 0x2D, 0xA1, 0x91, 0xFF, 0x07, 0x93,
-      0x96, 0x15, 0x69, 0xD3, 0x59, 0x44, 0x48, 0xBB, 0xC2, 0x58, 0x69, 0x99,
-      0xA6, 0x67, 0x1E, 0xFC, 0xA9, 0x57, 0xF3, 0xA6, 0x69, 0x9A, 0x4A, 0x1B,
-      0x2F, 0x47, 0x07, 0xAB, 0xA0, 0xB2, 0xDB, 0x20, 0x11, 0x4F, 0xE6, 0x8A,
-      0x4E, 0x28, 0x15, 0xAF, 0x3A, 0xAC, 0x4B, 0x8C, 0x6B, 0xE5, 0x64, 0x8C,
-      0x50, 0xCC, 0x35, 0xC2, 0x7C, 0x57, 0x28, 0x80, 0x28, 0xD3, 0x61, 0x70,
-      0x8D, 0x30, 0x2E, 0xEB, 0xB8, 0x60, 0xBE, 0xE6, 0x91, 0xF6, 0x56, 0xA2,
-      0x55, 0x0C, 0xB3, 0x21, 0xE9, 0x29, 0x3D, 0x75, 0x16, 0xC5, 0x99, 0x81,
-      0x7B, 0x76, 0x6B, 0xA9, 0x28, 0xB1, 0x08, 0x77, 0x9A, 0x1C, 0x87, 0x12,
-      0xE7, 0x4C, 0x76, 0x84, 0x1A, 0xC5, 0x8B, 0x8C, 0x51, 0x5B, 0xF4, 0x74,
-      0x9B, 0xF7, 0x15, 0x98, 0x44, 0x45, 0xB2, 0xB5, 0x30, 0x63, 0x38, 0x40,
-      0x01, 0xE5, 0x5F, 0x68, 0x86, 0x7B, 0x1A, 0xF4, 0x6C, 0xA7, 0x0C, 0xA8,
-      0xEA, 0x74, 0x17, 0x2D, 0xB8, 0x0B, 0x52, 0x18, 0xBD, 0xE4, 0xF0, 0x0A,
-      0x0E, 0x65, 0x8D, 0xB5, 0xA1, 0x8D, 0x94, 0xE1, 0x42, 0x7A, 0xF7, 0xAE,
-      0x35, 0x8C, 0xCE, 0xB2, 0x38, 0x77, 0x2F, 0xCC, 0x83, 0xF1, 0x08, 0x28,
-      0xA4, 0xA3, 0x67, 0xD4, 0x2C, 0x4C, 0xB6, 0x93, 0x3F, 0xDD, 0x1C, 0x1C,
-      0x7B, 0x86, 0xAD, 0x8B, 0x00, 0x96, 0x57, 0xA9, 0x62, 0x22, 0xD7, 0xBA,
-      0x92, 0xF5, 0x27, 0xAF, 0x87, 0x79, 0x70, 0xA8, 0x32, 0x47, 0xF4, 0x7A,
-      0x23, 0xFC, 0x22, 0x85, 0x11, 0x8B, 0x57, 0x71, 0x77, 0x15, 0x20, 0x46,
-      0x74, 0xDA, 0x9C, 0x94, 0xB6, 0x2B, 0xC7, 0x83, 0x8C, 0xF8, 0x72, 0x00,
-      0x15, 0x6B, 0x26, 0xBA, 0x46, 0x71, 0x15, 0x99, 0x31, 0xC4, 0x93, 0x22,
-      0xD8, 0x06, 0x71, 0xA0, 0xF3, 0x32, 0xEA, 0xA2, 0xBB, 0xF8, 0x93, 0xBE,
-      0x40, 0x8B, 0x9E, 0xAC, 0x6A, 0x50, 0x54, 0x83, 0xAA, 0x90, 0x75, 0xBD,
-      0x13, 0x68, 0xB5, 0x1F, 0x99, 0x21, 0x1F, 0x48, 0x0A, 0x9C, 0x54, 0x2A,
-      0x75, 0xB5, 0xBE, 0x08, 0xE4, 0x3A, 0xDA, 0xF3, 0x01, 0xDD, 0x72, 0x9A,
-      0x85, 0x95, 0x40, 0x10, 0xE6, 0x48, 0x92, 0xA2, 0xAA, 0x4F, 0x15, 0xC0,
-      0xBD, 0x70, 0xB3, 0xD8, 0x56, 0x49, 0x4F, 0xF9, 0xBA, 0x0F, 0xE4, 0xCE,
-      0x12, 0x99, 0x1C, 0xA0, 0x6B, 0x5E, 0x3D, 0x0B, 0x2A, 0xF1, 0xF7, 0x97,
-      0xB7, 0xA2, 0xB7, 0x60, 0x91, 0x0A, 0xE9, 0xF8, 0x33, 0xD0, 0xD4, 0x26,
-      0x7A, 0x58, 0x05, 0x2C, 0x29, 0x90, 0xF1, 0x61, 0xB8, 0x86, 0xE2, 0x51,
-      0x71, 0x1C, 0x09, 0xD0, 0x85, 0xC3, 0xD9, 0x58, 0xB1, 0x44, 0x19, 0x2C,
-      0x9C, 0xC3, 0x22, 0x4A, 0x46, 0x07, 0x15, 0xB6, 0x78, 0x4E, 0xB0, 0xB2,
-      0x6F, 0x23, 0x71, 0x87, 0x50, 0x7D, 0x85, 0xC5, 0x11, 0x0A, 0xCC, 0x71,
-      0xCE, 0x47, 0x19, 0x8F, 0x25, 0x45, 0x53, 0x35, 0x6D, 0xAB, 0x44, 0x8C,
-      0x38, 0xD2, 0x43, 0xA7, 0xC0, 0x2B, 0xE4, 0x0C, 0x90, 0x8C, 0x82, 0x8D,
-      0x05, 0xC0, 0x81, 0xDF, 0xAB, 0x8F, 0xC6, 0xB5, 0xCF, 0xE7, 0xD5, 0x6E,
-      0x73, 0x17, 0x15, 0x7D, 0xC0, 0x53, 0xB2, 0xB3, 0x48, 0x99, 0x86, 0xB0,
-      0x81, 0x28, 0x88, 0x71, 0x81, 0x85, 0x85, 0xE0, 0x99, 0x31, 0x09, 0x5E,
-      0x32, 0x74, 0xA0, 0x84, 0x11, 0x5B, 0xE2, 0x76, 0x43, 0x82, 0x54, 0xA7,
-      0x96, 0x27, 0x0A, 0x7B, 0x43, 0x06, 0xF0, 0x8B, 0x98, 0xD9, 0xC2, 0xAA,
-      0xEC, 0xF7, 0x06, 0x5E, 0x74, 0x44, 0x6B, 0x7C, 0x69, 0x6D, 0xBA, 0xAF,
-      0x8B, 0x46, 0x25, 0xA1, 0x0B, 0x07, 0x82, 0x7B, 0x4A, 0x8B, 0xAB, 0xAB,
-      0x09, 0xB6, 0x4A, 0xE1, 0xC3, 0x75, 0xBB, 0x78, 0x54, 0x41, 0xF3, 0x19,
-      0xFB, 0x9A, 0xC2, 0xF1, 0x4C, 0x95, 0xFF, 0xB2, 0x52, 0xAB, 0xBB, 0x80,
-      0x9C, 0x69, 0x09, 0xCD, 0x97, 0x70, 0x6E, 0x40, 0x69, 0x1C, 0xBA, 0x61,
-      0xC9, 0x25, 0x2B, 0xD3, 0x8A, 0x04, 0x31, 0x1C, 0xA5, 0xBB, 0x2C, 0xA7,
-      0x95, 0x78, 0x34, 0x75, 0x05, 0xD0, 0x88, 0x88, 0x51, 0xE0, 0x82, 0x64,
-      0x8B, 0xD0, 0x03, 0xBE, 0x97, 0xC0, 0xF8, 0xF6, 0x67, 0x59, 0xEC, 0x96,
-      0xA9, 0x6A, 0x08, 0x1C, 0x68, 0x22, 0xC4, 0x51, 0x05, 0x59, 0x53, 0x70,
-      0x42, 0xFC, 0x15, 0xF0, 0x69, 0xA6, 0x49, 0xB7, 0x4A, 0x10, 0x96, 0x1B,
-      0x35, 0x4A, 0x1F, 0x62, 0x5B, 0x04, 0xE2, 0x5B, 0x29, 0x3C, 0xF6, 0x5F,
-      0xB4, 0xF5, 0x3A, 0x80, 0xCC, 0x73, 0x3D, 0x7A, 0x17, 0x57, 0x75, 0xBF,
-      0x8A, 0x9A, 0xBB, 0x92, 0x01, 0x62, 0x0E, 0x83, 0xA7, 0xF3, 0xE7, 0x24,
-      0xD1, 0x28, 0x7D, 0xBC, 0x44, 0xBD, 0xD5, 0xD8, 0x5F, 0xC7, 0x15, 0x45,
-      0xA9, 0x27, 0xBE, 0xED, 0xE5, 0x37, 0xA7, 0x76, 0x87, 0x35, 0xCC, 0x14,
-      0x86, 0xC7, 0xC3, 0xF3, 0x11, 0x04, 0xDB, 0x67, 0x34, 0x3F, 0x43, 0x5D,
-      0x2D, 0x45, 0x55, 0x4B, 0xAA, 0xC9, 0xCD, 0xB5, 0x82, 0x2E, 0x84, 0x22,
-      0xAE, 0x83, 0x21, 0xC7, 0x8A, 0xBE, 0x9F, 0x26, 0x1F, 0xD4, 0x81, 0x0A,
-      0x79, 0xE3, 0x3E, 0x94, 0xE6, 0x3B, 0x33, 0x41, 0x87, 0x2C, 0x92, 0x25,
-      0x35, 0x21, 0x99, 0x7C, 0x08, 0x4F, 0xBC, 0x06, 0x0B, 0x8B, 0x12, 0x5C,
-      0xCC, 0x88, 0xAC, 0x85, 0xAC, 0x5F, 0xE3, 0x16, 0x8A, 0xCB, 0x05, 0x9B,
-      0x3F, 0x11, 0x9C, 0x4E, 0x05, 0x0A, 0x20, 0x73, 0x2F, 0x50, 0x1B, 0xB9,
-      0xB3, 0xE6, 0x87, 0xC8, 0x46, 0xB5, 0xC2, 0x65, 0x3F, 0x88, 0x86, 0x37,
-      0x3E, 0x10, 0x04, 0xA2, 0xAB, 0x8D, 0x1B, 0xB9, 0x70, 0xA7, 0xE5, 0x71,
-      0xD8, 0xA4, 0x6E, 0xE8, 0x1B, 0x78, 0x2F, 0x26, 0x94, 0x2D, 0xD3, 0x94,
-      0xFD, 0xD9, 0xA5, 0xE4, 0xC5, 0x63, 0x1D, 0x98, 0x55, 0x28, 0x60, 0x4B,
-      0x1C, 0xC9, 0x76, 0x27, 0x5B, 0x6A, 0xC8, 0xA6, 0x7C, 0xEE, 0xC1, 0x0F,
-      0xFA, 0xCB, 0xBA, 0x3D, 0x3B, 0xB1, 0x41, 0x32, 0x1D, 0xFC, 0x3C, 0x92,
-      0x31, 0xFC, 0x96, 0xE4, 0x48, 0xB9, 0xAB, 0x84, 0x70, 0x21, 0xE2, 0xC8,
-      0xD9, 0x0C, 0x6B, 0xCA, 0xF2, 0xB1, 0x24, 0x07, 0x83, 0xB6, 0x2C, 0x79,
-      0xDE, 0xDC, 0x07, 0x2A, 0x57, 0x63, 0xE6, 0x60, 0xAF, 0x2C, 0x27, 0xC3,
-      0xF0, 0xC3, 0xC0, 0x92, 0x07, 0xCA, 0xD9, 0x90, 0xBB, 0x41, 0xA7, 0xBF,
-      0xCE, 0xC9, 0x9F, 0x51, 0x59, 0x6A, 0x0E, 0x83, 0x77, 0x8F, 0x85, 0xC0,
-      0x06, 0xAC, 0x6D, 0x1F, 0xE9, 0x81, 0xB4, 0xC4, 0xBA, 0x1C, 0xB5, 0x75,
-      0xA7, 0xD0, 0x7A, 0xE2, 0xD3, 0x1B, 0xA7, 0x60, 0x09, 0x5F, 0x74, 0xBC,
-      0x16, 0x38, 0x41, 0xCF, 0x8F, 0xF7, 0x7F, 0x89, 0x4A, 0xBC, 0x6D, 0x26,
-      0x1E, 0xD8, 0x7A, 0x45, 0x30, 0x36, 0x3B, 0x94, 0x9C, 0x4A, 0xD2, 0x4E,
-      0xFB, 0x3A, 0x56, 0x80, 0x94, 0x78, 0xDD, 0xA2,
-    },
-
-    .seed = {
-      0x40, 0xBE, 0x9D, 0xCA, 0xC1, 0x6E, 0x9C, 0xA7, 0x3D, 0x49, 0xD0, 0xC8,
-      0x3F, 0x9D, 0x3D, 0x89, 0xBB, 0x71, 0x57, 0x4A, 0x42, 0x19, 0xA0, 0xF3,
-      0x93, 0xDF, 0xEC, 0xE2, 0x98, 0x83, 0x94, 0xC4,
-    },
-
-    .exp_k = {
-      0x61, 0x6E, 0x0B, 0x75, 0x3A, 0x3B, 0x7F, 0x40, 0xFE, 0xF9, 0xA3, 0x89,
-      0xF5, 0x8F, 0x16, 0xBF, 0xBB, 0x04, 0x62, 0x29, 0x41, 0xD2, 0x46, 0x4B,
-      0xDA, 0xE7, 0x67, 0x82, 0x0D, 0xFA, 0xC3, 0x8E,
-    },
-
-    .exp_ct = {
-      0x77, 0x8D, 0x6B, 0x03, 0x79, 0x1A, 0xCA, 0xF5, 0x6C, 0xAA, 0xFC, 0xC7,
-      0x8C, 0xEE, 0x5C, 0xBC, 0xA1, 0xDE, 0x87, 0x37, 0xE9, 0xC7, 0xFF, 0x4A,
-      0xE5, 0xF3, 0x84, 0xD3, 0x44, 0xE0, 0x82, 0x23, 0xC7, 0x4C, 0x82, 0x4C,
-      0xB5, 0x84, 0x85, 0x20, 0x51, 0x7C, 0x7F, 0x0E, 0xA0, 0x64, 0x5E, 0xB6,
-      0xF8, 0x89, 0x51, 0x7A, 0xE5, 0x21, 0x6B, 0x0C, 0xF4, 0x1D, 0xDC, 0x3F,
-      0x0D, 0x1D, 0xF9, 0xBC, 0x6E, 0x4D, 0xEC, 0xB2, 0x36, 0xA5, 0xEA, 0x8B,
-      0x21, 0x4F, 0x64, 0x26, 0x6D, 0x3C, 0xDE, 0x08, 0xE0, 0xCB, 0x00, 0xE5,
-      0xD9, 0x1F, 0x58, 0x67, 0x06, 0xB1, 0xEE, 0x53, 0x3D, 0x20, 0x47, 0x6F,
-      0x44, 0x23, 0xB7, 0x8F, 0x91, 0x6B, 0x17, 0x26, 0xEE, 0xEA, 0x95, 0x9F,
-      0xFB, 0x9A, 0xC6, 0x34, 0xD0, 0x4A, 0x94, 0xD0, 0x99, 0x23, 0xCB, 0x0D,
-      0x4E, 0x73, 0x0C, 0xCA, 0x41, 0x44, 0xE7, 0xC4, 0x88, 0x49, 0x21, 0x65,
-      0x2D, 0xA4, 0x92, 0x8C, 0x68, 0xE6, 0x44, 0xF6, 0x73, 0xCF, 0xC5, 0x7D,
-      0x3E, 0x87, 0xCF, 0x5B, 0xE5, 0x81, 0xA8, 0x9F, 0x9C, 0xB8, 0xF0, 0xFC,
-      0xE2, 0x78, 0x2D, 0x68, 0x1E, 0x5C, 0xE8, 0x8A, 0xF5, 0x84, 0x58, 0xC3,
-      0xD6, 0x3D, 0x80, 0x75, 0x72, 0xDE, 0x5A, 0xA8, 0xE1, 0xFA, 0xF2, 0xDC,
-      0xD1, 0x4E, 0xDB, 0x73, 0x49, 0x56, 0x5B, 0x7D, 0x32, 0x71, 0xDD, 0xBE,
-      0xB0, 0xB6, 0xCC, 0x7A, 0xFE, 0x08, 0x63, 0x57, 0x84, 0x31, 0x11, 0x59,
-      0x73, 0x3C, 0x46, 0xE5, 0xFD, 0xC5, 0xE0, 0xCD, 0x36, 0xCE, 0x56, 0x85,
-      0xAC, 0xFB, 0x1A, 0xFE, 0x50, 0xAB, 0xB4, 0x6F, 0x44, 0x75, 0x21, 0xE6,
-      0x0D, 0x9C, 0x8F, 0x0E, 0x4C, 0xA2, 0x8C, 0x19, 0x0A, 0xBB, 0x40, 0xC3,
-      0x65, 0xF4, 0x12, 0x47, 0x1E, 0x95, 0xA8, 0xEA, 0x39, 0x6D, 0x4B, 0xD8,
-      0x07, 0x0E, 0xEB, 0x1F, 0x02, 0xB0, 0x7C, 0x82, 0x53, 0x67, 0xAA, 0x1E,
-      0xC0, 0xF1, 0x0C, 0x38, 0x62, 0x41, 0x6B, 0xB2, 0x1A, 0xD6, 0xCA, 0x74,
-      0x8A, 0x86, 0xE9, 0x82, 0x9E, 0xFC, 0x1A, 0x04, 0x99, 0x09, 0x3C, 0x85,
-      0x17, 0x6D, 0x37, 0xF5, 0x74, 0xC7, 0x5C, 0xF5, 0xED, 0xFA, 0x8D, 0x92,
-      0x0D, 0x32, 0x68, 0xCB, 0x34, 0xC6, 0xA4, 0xBB, 0x00, 0x02, 0x86, 0x9B,
-      0xC0, 0x5D, 0x7C, 0x8F, 0xCC, 0x06, 0x58, 0xD4, 0xA0, 0x1E, 0xAC, 0xD7,
-      0x45, 0x57, 0xA3, 0x7D, 0x98, 0xA7, 0x63, 0x07, 0x47, 0x52, 0xDF, 0xDD,
-      0x64, 0x29, 0x88, 0x1C, 0xAF, 0xF5, 0x77, 0xD3, 0xA0, 0x48, 0x03, 0x1B,
-      0xD5, 0x2C, 0x4E, 0x97, 0x26, 0x39, 0x85, 0x90, 0xF9, 0x51, 0x9F, 0xD5,
-      0x94, 0x05, 0xD6, 0xB3, 0xC3, 0x07, 0xAF, 0xCB, 0x16, 0x8A, 0x98, 0x57,
-      0x85, 0xD9, 0x54, 0xA6, 0xD1, 0xDC, 0x1E, 0xA9, 0x2E, 0x1E, 0xB6, 0xF9,
-      0x46, 0xA4, 0xD9, 0x9D, 0xD6, 0xCA, 0x30, 0x7A, 0xBF, 0xD8, 0x36, 0x2F,
-      0xAB, 0xA9, 0x8B, 0xB2, 0x64, 0xC6, 0x9C, 0x5F, 0x55, 0x5D, 0x60, 0x88,
-      0x3C, 0xC5, 0x60, 0x19, 0xFE, 0xB4, 0xE8, 0x00, 0x0C, 0x48, 0xB7, 0xE6,
-      0x8C, 0xD6, 0x67, 0xF0, 0x0B, 0x52, 0x50, 0xCE, 0xF2, 0x93, 0xA4, 0xA9,
-      0xE7, 0x78, 0x72, 0x6E, 0x62, 0xF1, 0x20, 0x36, 0x1E, 0x21, 0xAB, 0x31,
-      0x40, 0x46, 0x4C, 0xDC, 0x6A, 0xBD, 0xE9, 0xEA, 0x05, 0x19, 0x8D, 0x8B,
-      0x3B, 0xB6, 0x71, 0xB9, 0x11, 0x1A, 0x2F, 0x31, 0x75, 0x82, 0x84, 0x7C,
-      0xA5, 0x01, 0x56, 0x64, 0xF2, 0x2C, 0xDB, 0x08, 0xC1, 0x43, 0x18, 0x7B,
-      0xDE, 0x21, 0x29, 0xB5, 0x4F, 0x34, 0x16, 0x02, 0x95, 0xD7, 0x5F, 0xE9,
-      0xA4, 0x94, 0xFD, 0x7E, 0x67, 0xAA, 0xA7, 0x6B, 0x57, 0xAA, 0xFF, 0xD8,
-      0x9D, 0x01, 0xA7, 0x1D, 0xF5, 0xC8, 0x15, 0x86, 0x20, 0x29, 0x8D, 0x58,
-      0x2B, 0xBE, 0xFA, 0x6D, 0x09, 0xAC, 0x41, 0x2A, 0x99, 0xAA, 0x3B, 0xE9,
-      0xC3, 0x83, 0x50, 0x49, 0x48, 0xC4, 0x3D, 0xD5, 0xAF, 0x41, 0x27, 0xB1,
-      0x43, 0x58, 0x04, 0xF4, 0x4B, 0xAF, 0xA1, 0x42, 0xBF, 0xC2, 0xA9, 0x5D,
-      0x95, 0xFB, 0x2E, 0xF0, 0x64, 0x1A, 0xBE, 0x71, 0x06, 0x4D, 0xE5, 0x1D,
-      0x6B, 0x9E, 0xC5, 0x08, 0x57, 0xB8, 0xEE, 0xF7, 0xF4, 0x80, 0x36, 0x31,
-      0x3D, 0x0E, 0x93, 0x67, 0x63, 0xB8, 0xF7, 0xBD, 0xE6, 0x9B, 0x06, 0x4D,
-      0xD5, 0x76, 0x1D, 0x80, 0xEA, 0x6F, 0x1A, 0x8B, 0x37, 0x56, 0x57, 0x53,
-      0xC5, 0x79, 0xBB, 0xB8, 0x95, 0xEF, 0xB9, 0xFC, 0xB3, 0xFC, 0x5F, 0xA3,
-      0x36, 0x2E, 0x37, 0x74, 0xF0, 0xF7, 0x71, 0x40, 0xB9, 0x73, 0xCA, 0xE5,
-      0x87, 0xBA, 0xD2, 0xF3, 0xB5, 0x66, 0xA9, 0xC2, 0x5A, 0x96, 0x93, 0x47,
-      0xE5, 0xC5, 0x4F, 0x87, 0xF1, 0x10, 0x5E, 0x9C, 0x07, 0x48, 0x67, 0xD9,
-      0x40, 0x77, 0xCC, 0xAE, 0x3A, 0xBE, 0xA5, 0x45, 0x20, 0xED, 0xB5, 0x1D,
-      0x9D, 0xAA, 0xBE, 0x78, 0x48, 0xE7, 0x8F, 0xDF, 0x66, 0xE0, 0x7E, 0x2E,
-      0x22, 0xB3, 0x02, 0x51, 0x93, 0x1E, 0x89, 0x0B, 0xAF, 0x1F, 0x5E, 0x17,
-      0x7D, 0x4D, 0x9C, 0xEC, 0x9E, 0x49, 0x69, 0x48, 0x1F, 0xD7, 0xC1, 0x33,
-      0x5A, 0x0E, 0xD5, 0x87, 0x9F, 0x34, 0xEF, 0x4B, 0xB4, 0xF6, 0x6C, 0x28,
-      0x80, 0x3C, 0xEA, 0x16, 0x2B, 0xA4, 0x61, 0x50, 0x6D, 0x52, 0xEB, 0x3A,
-      0xE1, 0x69, 0x51, 0x92, 0x2B, 0x06, 0x82, 0x51, 0x86, 0xC3, 0xD4, 0xCE,
-      0x1B, 0x51, 0xF3, 0xC9, 0x2F, 0x3C, 0x52, 0xF2, 0xD0, 0x4D, 0x1F, 0x13,
-      0xB2, 0xB1, 0x7C, 0x9E, 0xEB, 0x88, 0x2C, 0xCE, 0x0E, 0xB8, 0x8B, 0x7E,
-      0xA9, 0xA1, 0xCE, 0x4E, 0x37, 0x41, 0x5C, 0xC8, 0x4C, 0x7B, 0xC4, 0x36,
-      0xA4, 0x62, 0x83, 0x86, 0xCC, 0x77, 0xD9, 0xAF, 0xD2, 0x07, 0x91, 0x1B,
-      0xD9, 0xBF, 0xD8, 0xA7, 0xFA, 0x05, 0xC2, 0x75, 0xBE, 0x0C, 0x4C, 0x6A,
-      0x8F, 0xC0, 0xA6, 0x1B, 0xDA, 0x1D, 0x67, 0xAE, 0x33, 0xB5, 0x31, 0x0B,
-      0xE1, 0x29, 0x0D, 0xC7, 0x1C, 0x14, 0x18, 0xEB, 0x57, 0x44, 0xBF, 0x28,
-      0x42, 0xC1, 0x65, 0x21, 0x73, 0xA4, 0x9A, 0x69, 0x2E, 0x71, 0xFE, 0x43,
-      0x25, 0x8A, 0x20, 0x5B, 0x3C, 0xAA, 0xB9, 0x0C, 0x03, 0x04, 0xA5, 0x1E,
-      0x77, 0xD0, 0x1B, 0x40, 0x4A, 0x01, 0xFA, 0xE2, 0xF8, 0x3A, 0xB8, 0x0C,
-      0x5D, 0xBF, 0x6C, 0xF5, 0x18, 0xC0, 0x01, 0xF4, 0x6A, 0x63, 0x3F, 0xA1,
-      0x69, 0xB1, 0xBD, 0xB7, 0x7A, 0x9D, 0x0B, 0x1E, 0x0C, 0x00, 0x78, 0x35,
-      0xC0, 0x9F, 0x6A, 0xBB, 0xA9, 0x6F, 0x3F, 0x53, 0x56, 0x4D, 0xA5, 0x08,
-      0xEE, 0x88, 0x61, 0xA4, 0x83, 0xA8, 0x17, 0x49, 0xD4, 0xA4, 0x46, 0x72,
-      0xB1, 0xEF, 0x16, 0x05, 0xF2, 0x9D, 0x16, 0x8B, 0x74, 0xB7, 0x36, 0xB4,
-      0xF1, 0x35, 0x01, 0xD7, 0xAD, 0x12, 0x13, 0x11, 0x8A, 0x78, 0x32, 0xE6,
-      0x66, 0xA5, 0x0B, 0xE8, 0x01, 0x0D, 0x54, 0x32, 0x2A, 0x52, 0x6C, 0xF7,
-      0xA4, 0xE5, 0x43, 0xA7, 0x9D, 0x0D, 0x98, 0xE0, 0x04, 0xFB, 0xEC, 0x76,
-      0xEA, 0x3F, 0x7E, 0x88, 0x7B, 0xDB, 0xAF, 0x50, 0xDA, 0xDF, 0xDD, 0xDF,
-      0x3F, 0xFE, 0xCF, 0x6D, 0x3F, 0x77, 0xEA, 0x4B, 0x9B, 0x16, 0xDC, 0x75,
-      0x4F, 0x4A, 0x68, 0xE5, 0xEF, 0x32, 0xF6, 0xA1, 0x37, 0xE7, 0xC9, 0xE3,
-      0xC3, 0xE8, 0xC2, 0xE2, 0x36, 0xC7, 0xEB, 0xC4, 0x5D, 0x46, 0xEC, 0x16,
-      0x77, 0xA5, 0xA8, 0xBB, 0x26, 0x68, 0x44, 0x3B, 0x0B, 0xE8, 0x69, 0x3D,
-      0xC2, 0x57, 0xF1, 0x3D, 0x8B, 0x9A, 0x90, 0x10, 0x0B, 0x92, 0xB4, 0xD1,
-      0x76, 0x1B, 0x81, 0x96, 0x73, 0x83, 0x2C, 0x32, 0x02, 0x06, 0x71, 0xBF,
-      0xB3, 0xD0, 0x22, 0x0A, 0x36, 0x3E, 0x4B, 0xED, 0x6D, 0x64, 0x9D, 0x3F,
-      0x73, 0x68, 0xCF, 0xE0, 0x81, 0xE1, 0x96, 0xA4, 0x3D, 0x47, 0x08, 0x79,
-      0x8E, 0x31, 0xBB, 0x2A, 0x2F, 0x61, 0x82, 0x46, 0x74, 0xAB, 0xA2, 0xFC,
-      0x9D, 0xCD, 0x05, 0xDB, 0x84, 0xB8, 0x62, 0x7A, 0xE1, 0x14, 0x88, 0x88,
-      0x6F, 0x92, 0x1B, 0xC7, 0x9A, 0xE1, 0xFD, 0x03,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // Generate shared key `got_k` and ciphertext `got_ct` for test
-    // encapsulation key `ek` and randomness `seed`.
-    uint8_t got_k[32] = { 0 }, got_ct[FIPS203IPD_KEM768_CT_SIZE] = { 0 };
-    fips203ipd_kem768_encaps(got_k, got_ct, TESTS[i].ek, TESTS[i].seed);
-
-    // check for expected shared key
-    if (memcmp(got_k, TESTS[i].exp_k, sizeof(got_k))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - k", TESTS[i].name);
-      fail_test(__func__, name, got_k, sizeof(got_k), TESTS[i].exp_k, sizeof(got_k));
-    }
-
-    // check for expected ciphertext
-    if (memcmp(got_ct, TESTS[i].exp_ct, sizeof(got_ct))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ct", TESTS[i].name);
-      fail_test(__func__, name, got_ct, sizeof(got_ct), TESTS[i].exp_ct, sizeof(got_ct));
-    }
-  }
-}
-
-static void test_fips203ipd_kem768_decaps(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t ct[FIPS203IPD_KEM768_CT_SIZE]; // test ciphertext (1088 bytes)
-    const uint8_t dk[FIPS203IPD_KEM768_DK_SIZE]; // test decapsulation key (2400 bytes)
-    const uint8_t exp[32]; // expected message (32 bytes)
-  } TESTS[] = {{
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Decapsulation -- ML-KEM-768",
-
-    .ct = {
-      0xDF, 0xA6, 0xB9, 0xD7, 0x2A, 0x63, 0xB4, 0x20, 0xB8, 0x9D, 0xDE, 0x50,
-      0xF7, 0xE0, 0xD5, 0x6E, 0xCF, 0x87, 0x6B, 0xFE, 0xF9, 0x91, 0xFC, 0xE9,
-      0x1C, 0x8D, 0x28, 0x6F, 0xA6, 0xEA, 0xBA, 0xC1, 0x73, 0x0F, 0xD8, 0x77,
-      0x41, 0xFE, 0x4A, 0xD7, 0x17, 0xB2, 0x82, 0xA2, 0x1E, 0x23, 0x5A, 0x55,
-      0xC3, 0x75, 0x7D, 0x88, 0xD4, 0xCE, 0x62, 0xF4, 0x14, 0xEB, 0x77, 0xEB,
-      0x9D, 0x35, 0x7E, 0xE2, 0x9D, 0x00, 0x08, 0x7B, 0xF8, 0x11, 0x0E, 0x5B,
-      0xBB, 0xC7, 0xC9, 0x04, 0x19, 0x07, 0x2E, 0xAE, 0x04, 0x4B, 0xF7, 0xE1,
-      0x83, 0xD4, 0x3A, 0x94, 0xB2, 0x63, 0x2A, 0xA1, 0x46, 0x49, 0x61, 0x9B,
-      0x70, 0x64, 0x95, 0x21, 0xBC, 0x19, 0x37, 0x09, 0x42, 0xEF, 0x70, 0xF3,
-      0x6C, 0x34, 0xC8, 0xC2, 0x35, 0x91, 0xEE, 0x0C, 0xA7, 0x1A, 0x12, 0xD2,
-      0x79, 0xE0, 0xF5, 0x2D, 0x39, 0xED, 0x0F, 0x91, 0x3F, 0x8C, 0x26, 0x26,
-      0x21, 0xFB, 0x24, 0x2E, 0x68, 0x0D, 0xEB, 0x30, 0x7B, 0x07, 0x49, 0xC6,
-      0xB3, 0x93, 0xA8, 0xEF, 0x66, 0xF8, 0xB0, 0x4A, 0xAF, 0xA8, 0x77, 0xB9,
-      0x51, 0xAB, 0x93, 0xF5, 0x98, 0xB4, 0xB2, 0xFA, 0xB0, 0x4F, 0x88, 0xAC,
-      0x80, 0x39, 0x84, 0xFF, 0x37, 0xE3, 0xFE, 0x74, 0xF3, 0xA6, 0x16, 0xD5,
-      0x31, 0x4E, 0xB3, 0xA8, 0x26, 0xF8, 0x74, 0xF8, 0xEC, 0xD3, 0xA5, 0x64,
-      0x7D, 0x04, 0x94, 0x2A, 0x57, 0xEF, 0xC0, 0x96, 0x38, 0x47, 0x0D, 0xC0,
-      0xA9, 0xDF, 0x40, 0xB3, 0x17, 0x57, 0x1D, 0x39, 0x84, 0xA7, 0x8C, 0xF7,
-      0xD1, 0x17, 0x51, 0x09, 0x07, 0x22, 0xB3, 0x05, 0x9E, 0x07, 0x59, 0x1C,
-      0xC4, 0xA2, 0xED, 0x9B, 0xA0, 0xDC, 0xE9, 0x9B, 0xE9, 0xE5, 0xEE, 0x5D,
-      0xB8, 0xD6, 0x98, 0xCD, 0xEB, 0x58, 0x14, 0x75, 0x9B, 0xA9, 0x77, 0xC9,
-      0x00, 0x79, 0xCF, 0x2A, 0xFD, 0xE4, 0x78, 0x06, 0x9C, 0x51, 0x3A, 0x60,
-      0x09, 0x1A, 0x3A, 0x5D, 0x01, 0x11, 0xE2, 0x2D, 0xE0, 0x6C, 0xB1, 0x45,
-      0xC1, 0x4E, 0x22, 0xA2, 0x14, 0xCB, 0x27, 0x8C, 0x81, 0x52, 0xB0, 0x68,
-      0x1B, 0xCA, 0xFF, 0x54, 0xD5, 0x52, 0xB5, 0x4A, 0x67, 0x1C, 0x0D, 0xFE,
-      0xF7, 0x75, 0xE7, 0xC5, 0x4F, 0xEF, 0xC4, 0x85, 0x38, 0x68, 0xC9, 0x55,
-      0x97, 0x1A, 0xBD, 0xAC, 0x2A, 0x76, 0x29, 0x2C, 0xCC, 0xD4, 0xFD, 0x1C,
-      0x70, 0x6B, 0x7D, 0x36, 0x14, 0x15, 0x96, 0x73, 0xE9, 0xD7, 0xB2, 0x9A,
-      0x2D, 0x3F, 0x63, 0x36, 0x31, 0x29, 0xE7, 0xA2, 0x1E, 0x80, 0x3A, 0x46,
-      0x0F, 0x27, 0x14, 0xE3, 0xE2, 0x59, 0x22, 0x78, 0x0A, 0xF3, 0x82, 0x57,
-      0xCD, 0x14, 0x95, 0xAC, 0xD1, 0xE0, 0x19, 0x80, 0x63, 0x8D, 0xF5, 0x8A,
-      0x15, 0x3D, 0xAB, 0x07, 0xEF, 0xB5, 0xC7, 0xE7, 0x8A, 0xDA, 0xCF, 0x63,
-      0x19, 0x56, 0xD6, 0x9C, 0xCD, 0xA0, 0x70, 0x45, 0x95, 0x68, 0xBD, 0x9D,
-      0x11, 0xA2, 0x93, 0x4B, 0xCF, 0x16, 0x43, 0xBC, 0x99, 0x46, 0x82, 0x38,
-      0x91, 0x0B, 0x1F, 0x74, 0x2E, 0xBB, 0x3C, 0x03, 0xD3, 0x9F, 0xD4, 0x5C,
-      0xFB, 0x85, 0xBA, 0x30, 0x9E, 0x29, 0xDD, 0x9B, 0x5C, 0xD5, 0x60, 0x81,
-      0x9E, 0xC7, 0x29, 0xFC, 0xAC, 0x8B, 0x9D, 0x72, 0x5E, 0x3E, 0x8A, 0xBE,
-      0xDE, 0x4B, 0x52, 0x98, 0xA8, 0x65, 0x8E, 0xE3, 0xF7, 0x81, 0xB0, 0xCE,
-      0x68, 0x3C, 0xBB, 0x73, 0x35, 0xCD, 0x57, 0xEF, 0xE2, 0x20, 0x4A, 0x8F,
-      0x19, 0x74, 0x46, 0xD7, 0x31, 0x4C, 0xDB, 0xF4, 0xC5, 0xD0, 0x8C, 0xCC,
-      0x41, 0xF8, 0x08, 0x57, 0xCC, 0x95, 0x71, 0xFB, 0xFB, 0x90, 0x60, 0x60,
-      0xF7, 0xE1, 0x7C, 0x8C, 0xEF, 0x0F, 0x27, 0x4A, 0xFF, 0x83, 0xE3, 0x93,
-      0xB1, 0x5F, 0x2F, 0x95, 0x89, 0xA1, 0x3A, 0xF4, 0xBC, 0x78, 0xE1, 0x6C,
-      0xDD, 0xE6, 0x23, 0x61, 0xD6, 0x3B, 0x8D, 0xC9, 0x03, 0xB7, 0x0C, 0x01,
-      0xA4, 0x34, 0x19, 0xCD, 0x20, 0x52, 0x15, 0x0B, 0xD2, 0x87, 0x19, 0xF6,
-      0x1F, 0xF3, 0x1F, 0x4A, 0x9B, 0xEC, 0x4D, 0xDB, 0xCE, 0xC1, 0xF8, 0xFB,
-      0x2E, 0xFB, 0xF3, 0x7D, 0xFF, 0xFA, 0x4C, 0x7F, 0xEC, 0xA8, 0xCE, 0x6D,
-      0x62, 0x6B, 0xFD, 0xA1, 0x6E, 0xE7, 0x08, 0xD9, 0x20, 0x68, 0x14, 0xA2,
-      0xEF, 0x98, 0x85, 0x25, 0x61, 0x5D, 0x4A, 0xC9, 0xBE, 0x60, 0x8C, 0x4B,
-      0x03, 0xAB, 0xEE, 0x95, 0xB3, 0x2A, 0x5D, 0xB7, 0x4A, 0x96, 0x11, 0x9A,
-      0x7E, 0x15, 0x9A, 0xF9, 0x9C, 0xD9, 0x8E, 0x88, 0xEA, 0xF0, 0x9F, 0x0D,
-      0x78, 0x0E, 0x7C, 0x7E, 0x81, 0x4B, 0x8E, 0x88, 0xB4, 0xF4, 0xE1, 0x5F,
-      0xA5, 0x49, 0x95, 0xD0, 0xEC, 0xBA, 0xD3, 0xEF, 0x04, 0x6A, 0x49, 0x47,
-      0xF3, 0xE8, 0xB9, 0xE7, 0x44, 0x24, 0x14, 0x89, 0xB8, 0x06, 0xFE, 0x94,
-      0x01, 0xE7, 0x8B, 0xAF, 0xC8, 0xE8, 0x82, 0xE9, 0xD6, 0xD0, 0x70, 0x0F,
-      0x72, 0x0C, 0x00, 0x24, 0xE7, 0xDA, 0x49, 0x06, 0x1C, 0x5D, 0x18, 0xA6,
-      0x20, 0x74, 0x04, 0x0A, 0xBC, 0x00, 0x03, 0x20, 0x0E, 0xD4, 0x65, 0x23,
-      0x17, 0x97, 0x93, 0x0A, 0x2E, 0x2A, 0xA5, 0x01, 0xF6, 0x48, 0x62, 0xDD,
-      0xA1, 0x30, 0x14, 0xA9, 0x9F, 0x9D, 0x32, 0x70, 0xAA, 0x90, 0x7E, 0xEB,
-      0x3F, 0xDB, 0xFF, 0x29, 0x16, 0x00, 0xDF, 0x1F, 0x6B, 0x39, 0x68, 0x4B,
-      0x11, 0xE3, 0x96, 0xB7, 0x0D, 0x86, 0xF9, 0x04, 0x92, 0xE8, 0x2B, 0x09,
-      0xBA, 0x25, 0x60, 0x7B, 0x0C, 0x28, 0x6F, 0xBC, 0x07, 0x01, 0x82, 0xAC,
-      0x76, 0xFA, 0x7C, 0x85, 0x9A, 0xAF, 0xEA, 0x87, 0x01, 0x6A, 0xED, 0x22,
-      0xC3, 0x60, 0x5A, 0x27, 0x89, 0xA1, 0xD4, 0x39, 0xFD, 0x8D, 0x93, 0x33,
-      0x42, 0xDA, 0xB7, 0x45, 0xA3, 0xE5, 0x50, 0xE7, 0xD7, 0x7C, 0x01, 0xA6,
-      0x23, 0x4B, 0xDA, 0x7D, 0x6B, 0xB1, 0x9D, 0x49, 0x5E, 0x65, 0x60, 0xFC,
-      0xE8, 0x39, 0x6F, 0xC3, 0xC6, 0xE0, 0x88, 0xED, 0x60, 0xF5, 0xF2, 0x77,
-      0x14, 0x16, 0xEA, 0x3B, 0xE5, 0xBE, 0x47, 0x2B, 0x64, 0x04, 0x90, 0x6C,
-      0x91, 0xE7, 0x1D, 0x9A, 0x86, 0x72, 0xF3, 0x90, 0x08, 0x36, 0x55, 0xAB,
-      0x7D, 0x0E, 0xC6, 0xED, 0xFE, 0x86, 0x78, 0x9C, 0xE2, 0x0B, 0xE2, 0xEA,
-      0x90, 0xCA, 0x5C, 0xC3, 0x14, 0x16, 0xFB, 0x24, 0xCB, 0xAF, 0x94, 0xDA,
-      0x14, 0x68, 0xFE, 0x69, 0x6B, 0xCD, 0xF5, 0x24, 0x7C, 0xF1, 0x17, 0xCB,
-      0xE9, 0x33, 0x40, 0x76, 0xCA, 0x68, 0x96, 0xB2, 0xF6, 0xA0, 0x16, 0xB1,
-      0xF7, 0xC7, 0x37, 0x28, 0x80, 0x78, 0x98, 0xD8, 0xB1, 0x99, 0x75, 0x6C,
-      0x2B, 0x0A, 0xA2, 0x45, 0x7E, 0x1B, 0x4F, 0x77, 0x54, 0xC4, 0x57, 0x6C,
-      0xE5, 0x64, 0x56, 0x14, 0xEA, 0x15, 0xC1, 0xAE, 0x28, 0xB0, 0x94, 0xEB,
-      0x21, 0x7C, 0x7A, 0x7A, 0x41, 0x23, 0x95, 0x76, 0xCB, 0xDA, 0x38, 0x0E,
-      0xE6, 0x87, 0x83, 0x43, 0x27, 0x30, 0xAD, 0x5E, 0xBE, 0x7F, 0x51, 0xD6,
-      0xBE, 0x7F, 0xB0, 0x2A, 0xB3, 0x7B, 0xE0, 0xC9, 0x6A, 0xAC, 0x9F, 0x3C,
-      0x79, 0x0A, 0x18, 0xD1, 0x59, 0xE6, 0xBA, 0xBA, 0x71, 0xEC, 0x88, 0xC1,
-      0x10, 0xFD, 0x84, 0xC3, 0x36, 0xDF, 0x63, 0x0F, 0x27, 0x1C, 0xF7, 0x93,
-      0x28, 0xB6, 0xC8, 0x79, 0xDF, 0x7C, 0xDE, 0x0F, 0x70, 0x71, 0x22, 0x20,
-      0xB1, 0xFB, 0xB9, 0xAC, 0xB4, 0x82, 0x48, 0xD9, 0x1F, 0x0E, 0x2B, 0x6E,
-      0x3B, 0xE4, 0x0C, 0x2B, 0x22, 0x1E, 0x62, 0x6E, 0x7E, 0x33, 0x0D, 0x9D,
-      0x83, 0xCC, 0x06, 0x68, 0xF7, 0x30, 0x85, 0x91, 0xE1, 0x4C, 0x7D, 0x72,
-      0xB8, 0x41, 0xA6, 0xF0, 0x5F, 0x3F, 0xDC, 0x13, 0x9E, 0xEC, 0xC1, 0x53,
-      0x67, 0x65, 0x65, 0x0B, 0x55, 0xA9, 0xCE, 0xC6, 0xBB, 0xF5, 0x4C, 0xCE,
-      0xC5, 0xC3, 0xAC, 0x9A, 0x0E, 0x39, 0xF4, 0x8F, 0x23, 0x7B, 0xD4, 0xC6,
-      0x60, 0xCB, 0x1A, 0x8D, 0x25, 0x0B, 0xB6, 0xC8, 0xC0, 0x10, 0xFE, 0xC3,
-      0x4C, 0xC3, 0xD9, 0x15, 0x99, 0x27, 0x1C, 0x75, 0x31, 0x33, 0x0F, 0x12,
-      0xA3, 0xE4, 0x4F, 0xAF, 0xD9, 0x05, 0xD2, 0xC6,
-    },
-
-    .dk = {
-      0x34, 0x56, 0x85, 0x9B, 0xF7, 0x07, 0xE6, 0x72, 0xAC, 0x71, 0x2B, 0x7E,
-      0x70, 0xF5, 0x42, 0x75, 0x74, 0x59, 0x75, 0x02, 0xB8, 0x1D, 0xE8, 0x93,
-      0x1C, 0x92, 0xA9, 0xC0, 0xD2, 0x2A, 0x8E, 0x17, 0x73, 0xCB, 0x87, 0x47,
-      0x22, 0x05, 0xA3, 0x1C, 0x32, 0x20, 0x6B, 0xA4, 0xBC, 0xF4, 0x22, 0x59,
-      0x53, 0x3C, 0xB3, 0xA1, 0x9C, 0x02, 0x00, 0x86, 0x02, 0x44, 0xA6, 0xC3,
-      0xF6, 0x92, 0x18, 0x45, 0xB0, 0xA0, 0x58, 0x50, 0x18, 0x7A, 0x43, 0x10,
-      0xB3, 0xD5, 0x22, 0x3A, 0xAA, 0xA0, 0xC7, 0x9B, 0x9B, 0xBC, 0xFC, 0xCB,
-      0x3F, 0x75, 0x12, 0x14, 0xEB, 0x0C, 0xFA, 0xC1, 0xA2, 0x9E, 0xD8, 0x84,
-      0x8A, 0x5A, 0x49, 0xBA, 0x84, 0xBA, 0x68, 0xE6, 0xB6, 0xF5, 0x05, 0x7D,
-      0x49, 0x31, 0x05, 0xFF, 0x38, 0xA9, 0xF4, 0x4B, 0x4E, 0x7F, 0x6C, 0xBE,
-      0x7D, 0x21, 0x64, 0x08, 0xF7, 0xB4, 0x86, 0x05, 0xB2, 0x70, 0xB2, 0x53,
-      0xB0, 0x01, 0xA5, 0x40, 0x1C, 0x0C, 0x91, 0x27, 0xCC, 0x18, 0x5B, 0x1B,
-      0x0C, 0xF9, 0x2B, 0x99, 0xFB, 0xA0, 0xD9, 0x5A, 0x29, 0x5F, 0x87, 0x35,
-      0x15, 0x52, 0x0C, 0x86, 0x32, 0x1B, 0x8C, 0x96, 0x6C, 0x83, 0x7A, 0xAB,
-      0x34, 0xB2, 0xBF, 0xFA, 0xB2, 0xA2, 0xA4, 0x30, 0x1B, 0x35, 0x6B, 0x26,
-      0xCD, 0xC4, 0x56, 0x38, 0x02, 0x90, 0x1B, 0x47, 0x62, 0xF2, 0x84, 0x28,
-      0x1A, 0x38, 0x2E, 0x5F, 0x76, 0x2B, 0xEF, 0x47, 0xB5, 0x19, 0xA8, 0x1A,
-      0x10, 0x86, 0x57, 0xEB, 0xE9, 0x62, 0xBE, 0x12, 0x0B, 0x5F, 0xB3, 0xB9,
-      0xED, 0x33, 0x8C, 0xCF, 0x47, 0xB3, 0xA0, 0x39, 0x52, 0xA1, 0x66, 0x33,
-      0xF6, 0xE6, 0xB5, 0x34, 0xE6, 0xB6, 0x3D, 0x05, 0x70, 0x6E, 0xFA, 0x0F,
-      0x94, 0xC0, 0x3A, 0x2B, 0x85, 0x6A, 0xE5, 0x51, 0x42, 0x2F, 0x90, 0x11,
-      0xF2, 0x58, 0x9A, 0x41, 0xB9, 0x6A, 0x2C, 0xD2, 0x13, 0xC6, 0x99, 0x9B,
-      0x09, 0xE9, 0x1F, 0xF4, 0x23, 0xCB, 0x10, 0x6A, 0x1A, 0x92, 0x0B, 0x84,
-      0xB8, 0x11, 0x46, 0x94, 0x97, 0x15, 0x42, 0x23, 0x98, 0x7F, 0x00, 0x5C,
-      0x72, 0xF8, 0xAF, 0x38, 0x8B, 0x09, 0x0C, 0x63, 0x9F, 0x8C, 0x77, 0x4F,
-      0xC5, 0xA2, 0x94, 0xC7, 0x4A, 0x21, 0x2C, 0x91, 0xA8, 0x6C, 0x32, 0x8A,
-      0xEB, 0xEA, 0x55, 0x8A, 0xB4, 0x3F, 0x8B, 0x87, 0x35, 0x34, 0xFA, 0x2E,
-      0xF9, 0xE6, 0x6C, 0xEF, 0x3C, 0x52, 0xCD, 0x47, 0x1A, 0xB7, 0x83, 0x75,
-      0xE7, 0x45, 0xB9, 0xD0, 0xAA, 0x65, 0xD2, 0x27, 0x8B, 0x92, 0x75, 0xAE,
-      0x53, 0x48, 0xB1, 0x6C, 0xF6, 0x2A, 0xC8, 0x06, 0x57, 0x34, 0xE4, 0xBD,
-      0x77, 0xB8, 0x0C, 0xCF, 0x89, 0x76, 0x05, 0xEB, 0x76, 0xF4, 0x85, 0xAF,
-      0x8A, 0x0B, 0x46, 0x65, 0x57, 0xA8, 0x3C, 0x02, 0x92, 0xCC, 0xF9, 0x03,
-      0xEE, 0x7A, 0xA5, 0x7C, 0x3B, 0x51, 0xAD, 0x66, 0x01, 0x89, 0xB8, 0x61,
-      0x39, 0xE3, 0x80, 0x42, 0x5B, 0x31, 0xA9, 0x26, 0x89, 0xDF, 0x24, 0x31,
-      0xBF, 0xA7, 0xB6, 0x9E, 0xAB, 0x17, 0x27, 0x45, 0x1B, 0x29, 0xDA, 0x8B,
-      0x8B, 0xF8, 0x51, 0xE1, 0xBC, 0x2D, 0x3A, 0x63, 0x13, 0x4C, 0xA9, 0x66,
-      0x3C, 0x57, 0xAE, 0xC6, 0x98, 0x5C, 0xEB, 0xD5, 0x6D, 0xB0, 0x44, 0x7B,
-      0x13, 0x6B, 0x01, 0x7A, 0x97, 0x47, 0x61, 0xC3, 0xC6, 0x7D, 0x33, 0x77,
-      0x2F, 0x99, 0x64, 0xE5, 0x43, 0x4D, 0x64, 0x35, 0x04, 0x33, 0x2A, 0x30,
-      0x27, 0x29, 0x4A, 0x07, 0x8C, 0x59, 0x9C, 0xB2, 0x91, 0x63, 0x10, 0x9C,
-      0xE3, 0xB5, 0x6C, 0xE6, 0x98, 0xB4, 0xD3, 0xF5, 0x9E, 0x29, 0x56, 0xA1,
-      0xF0, 0x3A, 0x4B, 0x95, 0x55, 0x93, 0xF2, 0xD2, 0x45, 0x7F, 0xFA, 0xAE,
-      0x96, 0x24, 0xA0, 0x71, 0x10, 0x45, 0xB3, 0xF5, 0x52, 0x92, 0xF2, 0x0C,
-      0xC9, 0xD0, 0xCD, 0x79, 0x1A, 0x21, 0x59, 0x7B, 0x0F, 0x2C, 0xD9, 0x80,
-      0xF3, 0x51, 0x0F, 0x0B, 0x02, 0x39, 0x02, 0x20, 0x00, 0xD7, 0x35, 0x58,
-      0x6E, 0xE6, 0xA7, 0x3F, 0x3A, 0x3D, 0xCB, 0xD6, 0xBD, 0x1A, 0x85, 0xC8,
-      0x65, 0x12, 0xAB, 0xF3, 0xC5, 0x1C, 0xE0, 0x0A, 0x03, 0x31, 0xF6, 0x53,
-      0x60, 0x46, 0x2C, 0x02, 0x23, 0x29, 0x59, 0x7A, 0x81, 0xC3, 0xF9, 0x2F,
-      0xC1, 0x79, 0x38, 0xC9, 0x13, 0x8F, 0x41, 0x11, 0x38, 0x79, 0x79, 0xC2,
-      0x8F, 0x03, 0x34, 0xF9, 0x01, 0x19, 0x22, 0x13, 0x74, 0xDA, 0xB0, 0x45,
-      0x92, 0x9B, 0x49, 0xE4, 0x3A, 0x96, 0x46, 0xA2, 0x43, 0xF4, 0x46, 0x4D,
-      0xAF, 0x81, 0x1A, 0xB0, 0x06, 0x30, 0xC7, 0x59, 0x61, 0xBC, 0xD4, 0xAF,
-      0x5D, 0x99, 0x11, 0x5A, 0x37, 0x49, 0x19, 0x1B, 0xA8, 0xFD, 0x41, 0xCE,
-      0x0B, 0x3C, 0x89, 0xA6, 0x95, 0xB4, 0xBB, 0x85, 0x06, 0x4F, 0xD3, 0xAF,
-      0x95, 0xC9, 0xB4, 0xAE, 0xE0, 0x9A, 0xC7, 0xB0, 0xCC, 0x69, 0xEC, 0xA3,
-      0x6A, 0x00, 0x4B, 0x6C, 0xD6, 0x62, 0xA6, 0xD3, 0x27, 0x95, 0x05, 0x3E,
-      0xF0, 0xA0, 0x3A, 0xDA, 0x3B, 0x98, 0xBF, 0xE3, 0xB4, 0x6A, 0x79, 0x72,
-      0x3E, 0x3A, 0x45, 0xAB, 0x3C, 0x31, 0x95, 0x06, 0x69, 0xAD, 0x77, 0x07,
-      0x20, 0x62, 0xCC, 0x3B, 0x50, 0x4D, 0xF1, 0x33, 0x4F, 0xD6, 0x90, 0x9E,
-      0xAC, 0x79, 0x15, 0xF1, 0xD5, 0xAD, 0x16, 0x63, 0x9F, 0x5F, 0xB5, 0x64,
-      0x41, 0x64, 0x54, 0x25, 0x91, 0x34, 0xD5, 0x65, 0x88, 0x2C, 0xB3, 0x81,
-      0xCB, 0xA5, 0x8B, 0x76, 0x88, 0x07, 0x67, 0xB5, 0x0A, 0xC1, 0xB8, 0x57,
-      0x95, 0xD7, 0x26, 0x84, 0x33, 0xB3, 0x71, 0x23, 0x0E, 0xD4, 0xC7, 0x2F,
-      0x99, 0xAB, 0x1A, 0xD1, 0xE5, 0x95, 0xA4, 0x59, 0xCF, 0x0A, 0x23, 0x34,
-      0xAA, 0x14, 0x63, 0xAD, 0xE4, 0xBD, 0xC9, 0x24, 0x96, 0x05, 0x38, 0x18,
-      0x57, 0xBB, 0x98, 0x09, 0x5B, 0x41, 0x13, 0x29, 0x46, 0xCA, 0x24, 0x57,
-      0xDF, 0xAA, 0x91, 0x49, 0x58, 0x2A, 0xA1, 0x99, 0x27, 0xB6, 0x36, 0x89,
-      0xE2, 0x92, 0x9A, 0xA4, 0x10, 0x27, 0xBE, 0xF4, 0x92, 0x19, 0x70, 0xBA,
-      0xD4, 0xA5, 0x54, 0x90, 0xD9, 0x1A, 0xBE, 0x25, 0x1D, 0xEF, 0x45, 0x52,
-      0xCA, 0x88, 0x03, 0x41, 0x06, 0xA0, 0x2C, 0xE4, 0xB0, 0x58, 0xF8, 0xB5,
-      0x96, 0x24, 0xB6, 0x7E, 0x06, 0x3B, 0xF1, 0x78, 0xB0, 0x15, 0xE4, 0x28,
-      0x1E, 0xB1, 0x14, 0xA2, 0xBC, 0x24, 0x54, 0x94, 0x3A, 0x4B, 0x46, 0x47,
-      0x12, 0x2C, 0x42, 0xCB, 0xEA, 0x4E, 0x94, 0x15, 0x4F, 0xD3, 0xE4, 0xB7,
-      0x91, 0xF6, 0x29, 0x0B, 0x78, 0x29, 0x94, 0x20, 0x68, 0x53, 0xD6, 0x70,
-      0x00, 0xA6, 0x33, 0xF3, 0x20, 0xA8, 0xA3, 0x74, 0xCA, 0x5D, 0x40, 0x38,
-      0xF9, 0xCA, 0x42, 0x44, 0xDC, 0xB0, 0x2E, 0x9A, 0x84, 0xE1, 0xF7, 0xC8,
-      0xA8, 0x21, 0x13, 0x2B, 0x32, 0xB9, 0xA8, 0x40, 0x55, 0x7B, 0x34, 0x78,
-      0x06, 0x65, 0x30, 0x17, 0x24, 0xBA, 0x26, 0x06, 0x68, 0x1D, 0x94, 0x5E,
-      0x34, 0xD7, 0xCF, 0x94, 0x1B, 0x89, 0x63, 0xCA, 0xA1, 0x00, 0x1A, 0x49,
-      0x1B, 0x8B, 0x2E, 0x43, 0x57, 0x0E, 0x9A, 0xB9, 0x5C, 0x0A, 0x57, 0xC5,
-      0x03, 0xF0, 0xAB, 0x96, 0x0B, 0x48, 0x56, 0xD0, 0x25, 0x15, 0x74, 0x71,
-      0x0F, 0xE5, 0xCB, 0x47, 0x42, 0x84, 0xFC, 0x10, 0x49, 0xAA, 0x2A, 0x7B,
-      0x03, 0x69, 0x4A, 0x1C, 0x76, 0x3E, 0x99, 0xDA, 0xC6, 0xAD, 0x0B, 0xA8,
-      0x03, 0x8B, 0x13, 0x8A, 0x64, 0x43, 0x2E, 0x34, 0x91, 0x16, 0xA0, 0x31,
-      0xE8, 0xC7, 0x92, 0x78, 0x17, 0x51, 0xBA, 0x47, 0x3C, 0xBD, 0xF5, 0x57,
-      0x20, 0x00, 0x5A, 0xBD, 0xAA, 0x13, 0xD5, 0x01, 0x82, 0xF0, 0xE6, 0x33,
-      0x77, 0x6B, 0xB0, 0x67, 0x5C, 0x40, 0x47, 0x2B, 0xAD, 0x1F, 0x96, 0x72,
-      0x76, 0x91, 0x83, 0xD0, 0xCC, 0xC8, 0x10, 0xBC, 0x25, 0xA8, 0x57, 0x32,
-      0x20, 0x56, 0x9F, 0x6A, 0xC4, 0xBA, 0xC2, 0x2A, 0x13, 0x54, 0xD8, 0xB3,
-      0x6C, 0x05, 0x80, 0xD0, 0xE5, 0x29, 0x9E, 0x62, 0x9C, 0x50, 0x6C, 0xC7,
-      0x65, 0x55, 0x46, 0xFF, 0x27, 0x81, 0x0C, 0x97, 0xB5, 0x1B, 0xA0, 0x56,
-      0xBB, 0xF8, 0x6E, 0xD9, 0xCB, 0x7C, 0x0A, 0x53, 0x7F, 0x72, 0xD0, 0xCF,
-      0x9A, 0xD2, 0xC2, 0x31, 0xE2, 0x9E, 0xBF, 0x55, 0x3F, 0x61, 0x3C, 0xBB,
-      0x15, 0xB3, 0x72, 0x1A, 0x20, 0x07, 0x7E, 0x50, 0x5F, 0xD3, 0x90, 0xCB,
-      0x19, 0xF6, 0x48, 0x8A, 0x10, 0x7D, 0xEE, 0x1C, 0xAC, 0x58, 0xAB, 0x70,
-      0x34, 0xBA, 0x69, 0x03, 0x00, 0x21, 0x95, 0x95, 0xB3, 0x69, 0x5C, 0x12,
-      0x34, 0xE8, 0xB5, 0x7E, 0x33, 0xC8, 0xD3, 0xA0, 0x48, 0x45, 0x4A, 0x61,
-      0x6D, 0xF3, 0xC9, 0xB5, 0x6A, 0x6F, 0xF2, 0x02, 0x6A, 0xF9, 0x97, 0x72,
-      0x5F, 0xC9, 0x55, 0x79, 0x04, 0x3B, 0xAE, 0x93, 0x99, 0xB6, 0x79, 0x0D,
-      0x63, 0x7B, 0x4F, 0xA8, 0x20, 0xB0, 0xB2, 0xD2, 0xCA, 0xB6, 0x07, 0xBA,
-      0xF6, 0xA3, 0x72, 0x73, 0x4C, 0x31, 0xEE, 0x00, 0x26, 0xF3, 0xC0, 0x76,
-      0xD1, 0x4A, 0x8E, 0x3E, 0xE6, 0x6A, 0xAD, 0x8B, 0xBB, 0xCC, 0xEB, 0x9D,
-      0xC7, 0x0C, 0x7B, 0x6B, 0xB0, 0xBB, 0x76, 0xC2, 0x00, 0xC2, 0x31, 0x60,
-      0x1C, 0xA0, 0x87, 0x3E, 0xC8, 0x71, 0x0F, 0x4B, 0x18, 0xD5, 0x72, 0x90,
-      0xB0, 0x33, 0x72, 0x7C, 0x60, 0x1E, 0xDB, 0x71, 0xC2, 0xB0, 0xF0, 0xC2,
-      0x1D, 0x55, 0x3E, 0x0E, 0x7A, 0x4F, 0x77, 0x71, 0x68, 0x39, 0xC7, 0xC8,
-      0x44, 0x8A, 0xBB, 0x9F, 0x66, 0xA5, 0x4E, 0x8A, 0x4B, 0x08, 0xA7, 0x9D,
-      0x9A, 0x39, 0x2C, 0xA1, 0x27, 0x00, 0x31, 0x38, 0x8B, 0xAD, 0x56, 0x21,
-      0x7E, 0x32, 0xAE, 0xF5, 0x54, 0x11, 0x97, 0x49, 0x06, 0xA2, 0x45, 0xC0,
-      0x07, 0x12, 0xB3, 0xCB, 0xB1, 0x17, 0x06, 0x85, 0x19, 0x3F, 0xE2, 0x5A,
-      0xCD, 0x7A, 0xC1, 0x3D, 0x32, 0x07, 0x3F, 0x38, 0x79, 0xA5, 0xD7, 0x83,
-      0x75, 0xF0, 0x05, 0x2C, 0xF7, 0x91, 0x75, 0xBA, 0xB4, 0x6D, 0x22, 0x37,
-      0x05, 0x97, 0xBD, 0x06, 0x78, 0x9E, 0xDD, 0x07, 0x11, 0xCC, 0x42, 0x43,
-      0x50, 0x7A, 0x02, 0xB4, 0xFA, 0xAD, 0xBB, 0x62, 0x25, 0x0C, 0xC9, 0x97,
-      0xAE, 0x03, 0x27, 0xAE, 0xB0, 0x0D, 0xEB, 0x52, 0x91, 0x92, 0xA6, 0x4B,
-      0x10, 0x96, 0xA8, 0x6B, 0x19, 0x67, 0x4D, 0x0B, 0x0A, 0xF0, 0x5C, 0x4A,
-      0xAE, 0x17, 0x8C, 0x2C, 0x9A, 0x64, 0x42, 0xE9, 0x4E, 0xD0, 0xA5, 0x60,
-      0x33, 0xA1, 0x1E, 0xE4, 0x26, 0x32, 0xC0, 0xB4, 0xAA, 0x51, 0xD4, 0x21,
-      0x50, 0x79, 0x0F, 0x41, 0x06, 0x2B, 0x77, 0x25, 0x3C, 0x25, 0xBA, 0x4D,
-      0xE5, 0x59, 0x76, 0x1F, 0x0A, 0x90, 0x06, 0x83, 0x89, 0x72, 0x8B, 0xC9,
-      0x77, 0xF7, 0x0C, 0xF7, 0xBC, 0xCF, 0xBD, 0x88, 0x3D, 0xF1, 0x3C, 0x79,
-      0xF5, 0xF2, 0xC3, 0x43, 0x12, 0xCB, 0x1D, 0x5A, 0x55, 0xD7, 0x8C, 0x1B,
-      0x24, 0x20, 0x96, 0xA8, 0xC0, 0x59, 0x3C, 0xFB, 0x27, 0x53, 0x46, 0x0B,
-      0xD3, 0x0A, 0xBA, 0x30, 0x6C, 0x74, 0x17, 0x39, 0x95, 0x74, 0x83, 0x85,
-      0xD0, 0x0B, 0x36, 0x70, 0xE6, 0x13, 0x24, 0xD8, 0x7D, 0xE8, 0xA1, 0x44,
-      0x50, 0xDC, 0x49, 0x37, 0x68, 0x77, 0x7F, 0xF0, 0xCE, 0x68, 0x10, 0x93,
-      0x7A, 0x71, 0x12, 0x29, 0x56, 0x1A, 0x5E, 0xF2, 0xBB, 0x69, 0x86, 0x10,
-      0x74, 0xE0, 0x0B, 0xD9, 0x32, 0x66, 0xE4, 0xB8, 0x62, 0x69, 0xE1, 0x8E,
-      0xEA, 0x2C, 0xAA, 0xCB, 0x60, 0xA1, 0x35, 0x86, 0x36, 0xCD, 0x7A, 0x7C,
-      0xA6, 0xBB, 0x68, 0x21, 0x30, 0x24, 0x17, 0x84, 0xB1, 0x01, 0xEA, 0x5B,
-      0xFD, 0x6C, 0x3A, 0x07, 0x15, 0x86, 0x21, 0x61, 0x47, 0x36, 0xF6, 0x99,
-      0x6D, 0x5A, 0x4E, 0x14, 0x96, 0x3A, 0x12, 0xD8, 0x36, 0xE5, 0x33, 0xA0,
-      0xC8, 0x91, 0x2D, 0xB7, 0xE1, 0x16, 0x85, 0xA4, 0xA5, 0x3D, 0x82, 0x85,
-      0xF0, 0x87, 0x50, 0xDF, 0xF6, 0x6D, 0xA2, 0x7C, 0x23, 0xB9, 0x75, 0x42,
-      0xDE, 0xFB, 0x99, 0xE4, 0x70, 0xAC, 0xD5, 0xE6, 0x47, 0xC9, 0x40, 0xCB,
-      0x57, 0x30, 0x1B, 0x43, 0xCC, 0x3E, 0x68, 0xE6, 0x4E, 0x28, 0xB0, 0x67,
-      0x70, 0x69, 0x5E, 0xF6, 0x09, 0x26, 0x5E, 0x06, 0xC6, 0x0F, 0x22, 0xCB,
-      0x87, 0x58, 0x49, 0xE6, 0x2B, 0xAB, 0x88, 0xCC, 0x10, 0xEC, 0xF6, 0x22,
-      0xC3, 0x79, 0xCB, 0x54, 0xF1, 0x3D, 0x8B, 0x2B, 0xAC, 0x90, 0x2B, 0x9A,
-      0xB0, 0x2B, 0xB3, 0x30, 0xB4, 0x5A, 0xC8, 0xB7, 0x41, 0xC2, 0x64, 0x7A,
-      0xC4, 0x5B, 0x5B, 0xF4, 0x8A, 0x6D, 0x3F, 0xE0, 0x39, 0x98, 0x6C, 0xC9,
-      0x40, 0xC6, 0x0A, 0x94, 0xE6, 0x6C, 0xF6, 0x44, 0x53, 0x10, 0x16, 0xA5,
-      0x27, 0x24, 0x50, 0x82, 0x43, 0x14, 0xB5, 0x66, 0x2A, 0x0A, 0x90, 0x9A,
-      0xBF, 0xB4, 0x6F, 0xD2, 0x7B, 0xAE, 0xD3, 0xAB, 0xA8, 0x25, 0x93, 0x61,
-      0x59, 0x68, 0x82, 0xB0, 0x8B, 0x2A, 0xC7, 0x23, 0x39, 0x30, 0xFC, 0x37,
-      0x86, 0x73, 0x8E, 0xD2, 0xF8, 0x1E, 0xE6, 0x38, 0xC4, 0x5C, 0x3B, 0x9C,
-      0xFD, 0x19, 0x51, 0xDB, 0x5B, 0xCC, 0x14, 0x45, 0xC2, 0xC1, 0x62, 0x5D,
-      0x57, 0xD5, 0x7B, 0x53, 0x90, 0x4B, 0x6A, 0x1A, 0xB6, 0x81, 0x58, 0x07,
-      0x55, 0xE8, 0x9F, 0xA7, 0x97, 0x75, 0xA6, 0x57, 0xCD, 0x62, 0xB4, 0x42,
-      0x63, 0x04, 0xBC, 0x0C, 0x71, 0x1E, 0x28, 0x07, 0xA2, 0xC9, 0xE8, 0x52,
-      0xD4, 0xB4, 0x35, 0x9E, 0xE6, 0xB5, 0x3E, 0x46, 0x75, 0xF5, 0x23, 0xC9,
-      0x07, 0x82, 0x57, 0x2D, 0xC7, 0x36, 0x8F, 0xB4, 0x00, 0xC3, 0x28, 0xC7,
-      0x0F, 0xC8, 0x46, 0xB5, 0xE9, 0x8A, 0x43, 0x30, 0xBB, 0xB6, 0x27, 0xBD,
-      0xD7, 0x84, 0xB4, 0xDA, 0xF0, 0xB1, 0xF6, 0x45, 0x94, 0x49, 0x42, 0xB4,
-      0xC2, 0xB6, 0x22, 0x5C, 0x8B, 0x31, 0xE9, 0x89, 0x54, 0x55, 0x22, 0xBA,
-      0x6F, 0x10, 0x39, 0x60, 0x34, 0xCB, 0x1C, 0xA7, 0x45, 0x97, 0x78, 0x44,
-      0xD5, 0x70, 0x89, 0x4C, 0x61, 0x1A, 0x56, 0x08, 0xA7, 0x57, 0x41, 0x6D,
-      0x6D, 0xE5, 0x99, 0x63, 0xC3, 0x27, 0x98, 0xC4, 0x93, 0xEF, 0xD2, 0x26,
-      0x4C, 0x23, 0x19, 0x10, 0xE9, 0xA3, 0x00, 0x90, 0xCA, 0x7B, 0x53, 0x84,
-      0xF2, 0x31, 0xB8, 0x9B, 0xA6, 0x8A, 0x23, 0x81, 0x90, 0xEF, 0x1A, 0x2A,
-      0x43, 0xCB, 0x01, 0x70, 0x34, 0x70, 0xA0, 0xF0, 0x61, 0xA7, 0x07, 0x38,
-      0x94, 0x4B, 0xCD, 0x9B, 0x70, 0x04, 0xF2, 0x47, 0x97, 0xAE, 0xCB, 0x88,
-      0xB1, 0x09, 0x1C, 0xFE, 0xD0, 0x59, 0x0B, 0x04, 0x15, 0x45, 0x3C, 0x39,
-      0xB6, 0xEC, 0x45, 0xB6, 0x63, 0x05, 0xFA, 0xEA, 0x6B, 0x55, 0xA4, 0xB7,
-      0x96, 0x75, 0x05, 0xFE, 0x38, 0x62, 0xA2, 0x67, 0xAD, 0xBF, 0xE0, 0x5B,
-      0x91, 0x81, 0xA0, 0x65, 0x01, 0x89, 0x33, 0x91, 0x65, 0x0E, 0xAA, 0xA4,
-      0xA6, 0xD1, 0x68, 0x53, 0x34, 0x92, 0x76, 0xF9, 0x8E, 0x0F, 0x44, 0xCD,
-      0x72, 0x66, 0x15, 0xC6, 0x1C, 0x16, 0x71, 0x30, 0x94, 0xD8, 0xAB, 0x09,
-      0x3C, 0xAC, 0x71, 0xF2, 0x80, 0x3E, 0x7D, 0x39, 0x10, 0x9E, 0xF5, 0x00,
-      0x9C, 0x9C, 0x2C, 0xDA, 0xF7, 0xB7, 0xA6, 0xB3, 0x7A, 0x33, 0xA4, 0x98,
-      0x81, 0xF4, 0xBB, 0x5D, 0x72, 0x45, 0xA1, 0x4C, 0x50, 0x42, 0x28, 0x0C,
-      0x76, 0xA8, 0x4E, 0x63, 0xF4, 0x9D, 0x0D, 0x61, 0x9D, 0x46, 0xD7, 0x23,
-      0xBA, 0xA7, 0x47, 0xA3, 0xBA, 0x90, 0xA6, 0xFB, 0x63, 0x7A, 0x9A, 0x1D,
-      0xC0, 0x22, 0x68, 0xFD, 0x5C, 0x04, 0x3D, 0x18, 0xCB, 0xA1, 0x52, 0x8A,
-      0xC8, 0xE2, 0x25, 0xC1, 0xF9, 0x23, 0xD1, 0xCC, 0x84, 0xF2, 0xE7, 0x8E,
-      0x25, 0xDC, 0x3C, 0xCE, 0x93, 0x53, 0xC9, 0xDA, 0xC2, 0xAD, 0x72, 0x6A,
-      0x79, 0xF6, 0x49, 0x40, 0x80, 0x1D, 0xD5, 0x70, 0x1E, 0xFB, 0xDC, 0xB8,
-      0x0A, 0x98, 0xA2, 0x59, 0x93, 0xCD, 0x7F, 0x80, 0x59, 0x13, 0x20, 0xB6,
-      0x31, 0x72, 0x71, 0x86, 0x47, 0xB9, 0x76, 0xA9, 0x8A, 0x77, 0x16, 0x86,
-      0xF0, 0x12, 0x0A, 0x05, 0x3B, 0x0C, 0x44, 0x74, 0x60, 0x43, 0x05, 0x89,
-      0x0F, 0xEC, 0xAF, 0x23, 0x47, 0x5D, 0xDC, 0xC1, 0x1B, 0xC0, 0x8A, 0x9C,
-      0x5F, 0x59, 0x2A, 0xBB, 0x1A, 0x15, 0x3D, 0xB1, 0xB8, 0x83, 0xC0, 0x50,
-      0x7E, 0xB6, 0x8F, 0x78, 0xE0, 0xA1, 0x4D, 0xEB, 0xBF, 0xEE, 0xC6, 0x21,
-      0xE1, 0x0A, 0x69, 0xB6, 0xDA, 0xAF, 0xAA, 0x91, 0x6B, 0x53, 0x95, 0x33,
-      0xE5, 0x08, 0x00, 0x7C, 0x41, 0x88, 0xCE, 0x05, 0xC8, 0x62, 0xD1, 0x01,
-      0xD4, 0xDB, 0x1D, 0xF3, 0xC4, 0x50, 0x2B, 0x8C, 0x8A, 0xE1, 0x45, 0x74,
-      0x88, 0xA3, 0x6E, 0xAD, 0x26, 0x65, 0xBF, 0xAC, 0xB3, 0x21, 0x76, 0x02,
-      0x81, 0xDB, 0x9C, 0xA7, 0x2C, 0x76, 0x14, 0x36, 0x34, 0x04, 0xA0, 0xA8,
-      0xEA, 0xBC, 0x05, 0x8A, 0x23, 0xA3, 0x46, 0x87, 0x5F, 0xA9, 0x6B, 0xB1,
-      0x8A, 0xC2, 0xCC, 0xF0, 0x93, 0xB8, 0xA8, 0x55, 0x67, 0x38, 0x11, 0xCE,
-      0xD4, 0x7C, 0xBE, 0x1E, 0xE8, 0x1D, 0x2C, 0xF0, 0x7E, 0x43, 0xFC, 0x48,
-      0x72, 0x09, 0x08, 0x53, 0x74, 0x31, 0x08, 0x86, 0x5F, 0x02, 0xC5, 0x61,
-      0x2A, 0xA8, 0x71, 0x66, 0x70, 0x7E, 0xE9, 0x0F, 0xFD, 0x5B, 0x80, 0x21,
-      0xF0, 0xAA, 0x01, 0x6E, 0x5D, 0xBC, 0xD9, 0x1F, 0x57, 0xB3, 0x56, 0x2D,
-      0x3A, 0x2B, 0xCF, 0xA2, 0x0A, 0x4C, 0x03, 0x01, 0x0B, 0x8A, 0xA1, 0x44,
-      0xE6, 0x48, 0x28, 0x04, 0xB4, 0x74, 0xFE, 0xC1, 0xF5, 0xE1, 0x38, 0xBE,
-      0x63, 0x2A, 0x3B, 0x9C, 0x82, 0x48, 0x3D, 0xC6, 0x89, 0x0A, 0x13, 0xB1,
-      0xE8, 0xEE, 0x6A, 0xF7, 0x14, 0xEC, 0x5E, 0xFA, 0xC3, 0xB1, 0x97, 0x6B,
-      0x29, 0xDA, 0xDB, 0x60, 0x5B, 0x14, 0xD3, 0x73, 0x2B, 0x5D, 0xE1, 0x18,
-      0x59, 0x65, 0x16, 0x85, 0x81, 0x17, 0xE2, 0x63, 0x4C, 0x4E, 0xA0, 0xCC,
-    },
-
-    .exp = {
-      0xBD, 0x72, 0x56, 0xB2, 0x42, 0xF4, 0x04, 0x86, 0x9D, 0x66, 0x2F, 0x80,
-      0xBF, 0x67, 0x7A, 0x16, 0xC0, 0xC6, 0xFC, 0x15, 0x68, 0xCC, 0xA5, 0xB6,
-      0x45, 0x82, 0xA0, 0x1A, 0x6A, 0x14, 0x2D, 0x71,
-    },
-  }, {
-    .name = "0-pass",
-
-    .ct = {
-      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
-      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
-      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
-      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
-      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
-      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
-      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
-      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
-      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
-      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
-      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
-      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
-      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
-      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
-      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
-      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
-      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
-      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
-      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
-      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
-      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
-      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
-      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
-      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
-      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
-      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
-      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
-      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
-      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
-      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
-      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
-      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
-      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
-      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
-      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
-      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
-      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
-      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
-      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
-      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
-      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
-      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
-      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
-      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
-      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
-      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
-      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
-      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
-      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
-      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
-      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
-      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
-      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
-      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
-      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
-      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
-      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
-      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
-      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
-      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
-      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
-      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
-      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
-      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
-      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
-      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
-      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
-      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
-      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
-      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
-      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
-      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
-      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
-      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
-      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
-      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
-      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
-      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
-      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
-      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
-      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
-      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
-      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
-      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
-      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
-      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
-      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
-      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
-      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
-      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
-      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
-    },
-
-    .dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
-      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
-      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
-      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
-      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
-      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
-      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
-      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
-      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
-      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
-      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
-      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
-      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
-      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
-      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
-      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
-      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
-      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
-      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
-      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
-      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
-      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
-      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
-      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
-      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
-      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
-      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
-      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
-      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
-      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
-      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
-      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
-      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
-      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
-      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
-      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
-      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
-      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
-      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
-      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
-      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
-      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
-      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
-      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
-      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
-      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
-      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
-      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
-      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
-      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
-      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
-      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
-      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
-      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
-      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
-      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
-      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
-      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
-      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
-      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
-      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
-      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
-      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
-      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
-      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
-      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
-      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
-      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
-      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
-      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
-      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
-      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
-      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
-      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
-      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
-      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
-      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
-      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
-      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
-      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
-      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
-      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
-      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
-      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
-      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
-      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
-      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
-      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
-      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
-      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
-      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
-      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
-      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
-      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
-      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
-      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
-      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
-      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
-      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62, 0xb0, 0xa7, 0x40, 0x24,
-      0xca, 0xd0, 0xf1, 0x44, 0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
-      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
-    },
-  }, {
-    .name = "1-fail-implicit-rejection-0: ct[0] = 0",
-
-    .ct = {
-      0x00, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
-      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
-      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
-      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
-      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
-      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
-      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
-      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
-      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
-      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
-      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
-      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
-      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
-      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
-      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
-      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
-      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
-      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
-      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
-      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
-      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
-      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
-      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
-      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
-      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
-      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
-      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
-      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
-      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
-      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
-      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
-      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
-      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
-      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
-      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
-      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
-      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
-      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
-      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
-      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
-      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
-      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
-      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
-      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
-      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
-      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
-      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
-      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
-      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
-      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
-      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
-      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
-      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
-      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
-      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
-      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
-      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
-      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
-      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
-      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
-      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
-      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
-      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
-      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
-      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
-      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
-      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
-      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
-      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
-      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
-      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
-      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
-      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
-      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
-      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
-      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
-      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
-      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
-      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
-      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
-      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
-      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
-      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
-      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
-      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
-      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
-      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
-      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
-      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
-      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
-      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
-    },
-
-    .dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
-      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
-      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
-      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
-      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
-      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
-      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
-      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
-      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
-      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
-      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
-      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
-      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
-      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
-      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
-      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
-      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
-      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
-      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
-      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
-      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
-      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
-      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
-      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
-      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
-      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
-      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
-      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
-      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
-      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
-      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
-      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
-      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
-      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
-      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
-      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
-      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
-      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
-      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
-      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
-      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
-      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
-      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
-      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
-      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
-      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
-      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
-      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
-      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
-      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
-      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
-      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
-      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
-      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
-      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
-      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
-      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
-      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
-      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
-      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
-      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
-      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
-      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
-      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
-      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
-      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
-      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
-      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
-      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
-      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
-      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
-      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
-      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
-      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
-      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
-      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
-      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
-      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
-      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
-      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
-      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
-      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
-      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
-      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
-      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
-      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
-      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
-      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
-      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
-      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
-      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
-      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
-      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
-      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
-      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
-      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
-      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
-      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
-      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0xee, 0x37, 0x19, 0xfd, 0x64, 0xde, 0x38, 0x6f,
-      0x1c, 0x3d, 0xb4, 0xf7, 0xbc, 0x1d, 0x6a, 0x14,
-      0xff, 0x7d, 0x98, 0xaa, 0x5e, 0x57, 0xb3, 0xd5,
-      0xd5, 0x06, 0x1d, 0xae, 0x1e, 0x50, 0x23, 0x4c,
-    },
-  }, {
-    .name = "2-fail-implicit-rejection-1: dk[0] = 0",
-
-    .ct = {
-      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
-      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
-      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
-      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
-      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
-      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
-      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
-      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
-      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
-      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
-      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
-      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
-      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
-      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
-      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
-      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
-      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
-      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
-      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
-      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
-      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
-      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
-      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
-      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
-      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
-      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
-      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
-      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
-      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
-      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
-      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
-      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
-      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
-      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
-      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
-      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
-      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
-      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
-      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
-      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
-      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
-      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
-      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
-      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
-      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
-      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
-      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
-      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
-      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
-      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
-      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
-      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
-      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
-      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
-      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
-      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
-      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
-      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
-      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
-      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
-      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
-      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
-      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
-      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
-      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
-      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
-      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
-      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
-      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
-      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
-      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
-      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
-      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
-      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
-      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
-      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
-      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
-      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
-      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
-      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
-      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
-      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
-      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
-      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
-      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
-      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
-      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
-      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
-      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
-      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
-      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
-    },
-
-    .dk = {
-      0x00, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
-      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
-      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
-      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
-      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
-      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
-      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
-      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
-      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
-      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
-      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
-      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
-      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
-      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
-      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
-      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
-      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
-      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
-      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
-      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
-      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
-      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
-      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
-      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
-      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
-      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
-      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
-      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
-      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
-      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
-      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
-      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
-      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
-      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
-      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
-      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
-      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
-      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
-      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
-      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
-      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
-      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
-      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
-      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
-      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
-      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
-      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
-      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
-      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
-      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
-      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
-      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
-      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
-      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
-      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
-      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
-      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
-      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
-      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
-      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
-      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
-      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
-      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
-      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
-      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
-      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
-      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
-      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
-      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
-      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
-      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
-      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
-      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
-      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
-      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
-      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
-      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
-      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
-      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
-      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
-      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
-      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
-      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
-      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
-      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
-      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
-      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
-      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
-      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
-      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
-      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
-      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
-      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
-      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
-      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
-      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
-      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
-      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
-      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62,
-      0xb0, 0xa7, 0x40, 0x24, 0xca, 0xd0, 0xf1, 0x44,
-      0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
-      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
-    },
-  }, {
-    .name = "2-fail-implicit-rejection-1: dk[0] = 0x01",
-
-    .ct = {
-      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
-      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
-      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
-      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
-      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
-      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
-      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
-      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
-      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
-      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
-      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
-      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
-      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
-      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
-      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
-      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
-      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
-      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
-      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
-      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
-      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
-      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
-      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
-      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
-      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
-      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
-      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
-      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
-      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
-      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
-      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
-      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
-      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
-      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
-      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
-      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
-      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
-      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
-      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
-      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
-      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
-      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
-      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
-      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
-      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
-      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
-      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
-      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
-      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
-      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
-      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
-      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
-      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
-      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
-      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
-      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
-      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
-      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
-      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
-      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
-      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
-      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
-      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
-      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
-      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
-      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
-      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
-      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
-      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
-      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
-      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
-      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
-      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
-      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
-      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
-      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
-      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
-      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
-      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
-      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
-      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
-      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
-      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
-      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
-      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
-      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
-      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
-      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
-      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
-      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
-      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
-    },
-
-    .dk = {
-      0x01, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
-      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
-      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
-      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
-      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
-      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
-      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
-      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
-      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
-      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
-      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
-      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
-      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
-      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
-      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
-      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
-      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
-      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
-      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
-      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
-      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
-      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
-      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
-      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
-      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
-      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
-      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
-      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
-      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
-      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
-      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
-      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
-      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
-      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
-      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
-      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
-      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
-      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
-      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
-      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
-      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
-      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
-      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
-      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
-      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
-      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
-      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
-      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
-      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
-      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
-      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
-      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
-      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
-      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
-      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
-      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
-      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
-      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
-      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
-      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
-      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
-      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
-      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
-      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
-      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
-      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
-      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
-      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
-      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
-      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
-      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
-      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
-      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
-      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
-      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
-      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
-      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
-      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
-      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
-      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
-      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
-      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
-      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
-      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
-      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
-      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
-      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
-      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
-      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
-      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
-      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
-      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
-      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
-      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
-      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
-      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
-      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
-      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
-      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62,
-      0xb0, 0xa7, 0x40, 0x24, 0xca, 0xd0, 0xf1, 0x44,
-      0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
-      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
-    },
-  }, {
-    .name = "3-fail-implicit-rejection-2: dk[0] = 0xff",
-
-    .ct = {
-      0x75, 0xa7, 0x1b, 0xd2, 0x41, 0xa0, 0x17, 0x53, 0x23, 0x3f, 0x64, 0xc0,
-      0xa2, 0x50, 0x8c, 0x38, 0x54, 0xd5, 0xdf, 0x40, 0xa7, 0x7f, 0x04, 0xd6,
-      0xde, 0xb9, 0xa6, 0x8f, 0xf8, 0x0c, 0x44, 0x66, 0x59, 0x0a, 0xce, 0xe1,
-      0x6a, 0x3b, 0xe7, 0x99, 0x50, 0x8a, 0x65, 0x19, 0x17, 0x69, 0xe2, 0x8c,
-      0x53, 0xc1, 0x17, 0x3d, 0x97, 0x79, 0x4d, 0xfc, 0xe1, 0x69, 0xc0, 0xc4,
-      0x3d, 0x9d, 0xcb, 0xe6, 0x57, 0x15, 0x02, 0x7f, 0xf9, 0xdb, 0x96, 0x01,
-      0xcb, 0x05, 0xee, 0xfb, 0xae, 0xe1, 0x80, 0x1d, 0xb0, 0x4b, 0x96, 0x5b,
-      0x15, 0x19, 0xcb, 0xef, 0x7b, 0xda, 0x37, 0x1d, 0x50, 0x67, 0xf2, 0x64,
-      0x9f, 0xf4, 0x30, 0x3b, 0xd0, 0xe6, 0x84, 0xd5, 0x3a, 0x94, 0xbe, 0xac,
-      0x81, 0x2d, 0x09, 0xb9, 0xdc, 0x23, 0xaf, 0x89, 0x60, 0x94, 0x8a, 0xb8,
-      0x75, 0x22, 0xeb, 0x2d, 0x8e, 0x13, 0xf8, 0x39, 0x9f, 0x01, 0x95, 0xfb,
-      0xd9, 0xe9, 0xad, 0xfb, 0xf9, 0x12, 0x49, 0x30, 0xe6, 0xaf, 0xfb, 0x80,
-      0x5d, 0x74, 0xd1, 0x7d, 0x05, 0x0c, 0xe4, 0xdf, 0x13, 0x8a, 0xbe, 0x8b,
-      0x26, 0x75, 0xda, 0x12, 0x47, 0x96, 0x8b, 0x3e, 0xe2, 0x27, 0xfc, 0x5c,
-      0x93, 0x24, 0x35, 0x1b, 0x0f, 0x19, 0x68, 0x69, 0xbe, 0x79, 0x1c, 0x9c,
-      0x23, 0x93, 0x4e, 0xe4, 0xb1, 0x05, 0xc3, 0x25, 0x4d, 0x56, 0xaa, 0xe8,
-      0xfe, 0xaf, 0xcc, 0xcd, 0x79, 0x34, 0xe5, 0x3e, 0x2f, 0x1d, 0xc2, 0x12,
-      0x9b, 0x35, 0x1a, 0xea, 0x56, 0x26, 0xe0, 0xa0, 0x27, 0x92, 0xac, 0x26,
-      0x94, 0x65, 0x6e, 0x48, 0x52, 0x16, 0x24, 0x2c, 0x57, 0xb5, 0x57, 0x5e,
-      0xf0, 0x7d, 0xc6, 0x06, 0x5a, 0xaf, 0x5a, 0x28, 0x94, 0x12, 0x1b, 0xb0,
-      0x16, 0x96, 0x65, 0x1c, 0xce, 0xc9, 0x4e, 0xd3, 0x75, 0x56, 0x26, 0x70,
-      0x1c, 0xa6, 0x9f, 0xf1, 0x21, 0x6c, 0x06, 0x0d, 0xd1, 0x00, 0x1d, 0xf2,
-      0x3f, 0xf0, 0x4d, 0x00, 0x5a, 0xbb, 0x13, 0x52, 0x83, 0x70, 0xda, 0x95,
-      0x6f, 0xcb, 0xdd, 0xf1, 0xe0, 0x65, 0x14, 0x52, 0x48, 0x94, 0xcd, 0x86,
-      0x27, 0xbc, 0xae, 0x46, 0xb0, 0x45, 0xdf, 0xdb, 0x89, 0xcd, 0xd6, 0x68,
-      0xab, 0x2d, 0x17, 0xb3, 0xfe, 0xa1, 0x8b, 0x2e, 0x59, 0x79, 0x23, 0xdf,
-      0x31, 0xa0, 0xd6, 0x1d, 0xc9, 0x9d, 0x98, 0xa3, 0xa5, 0xe8, 0x1b, 0x1c,
-      0xc4, 0x9c, 0x0e, 0x39, 0x29, 0xd9, 0x95, 0x5e, 0x8d, 0xe4, 0xb7, 0x42,
-      0x5c, 0xad, 0xb9, 0x2c, 0xea, 0x84, 0x02, 0xab, 0xa0, 0xd7, 0x3a, 0x33,
-      0x2c, 0x12, 0x84, 0xbe, 0xfc, 0x37, 0x34, 0xd3, 0x7c, 0xd9, 0x60, 0x27,
-      0xac, 0xeb, 0x44, 0xfc, 0xcc, 0xd2, 0x13, 0x26, 0x55, 0x5a, 0x74, 0xf6,
-      0xfe, 0x4c, 0x8c, 0x4e, 0x91, 0xe9, 0xf8, 0x21, 0x1b, 0x62, 0xe2, 0x8d,
-      0x28, 0xe5, 0xa3, 0xa5, 0x19, 0x2d, 0x47, 0xe7, 0x15, 0xcd, 0xe9, 0x18,
-      0x88, 0x57, 0xbf, 0xf6, 0xcb, 0x59, 0x2b, 0x7a, 0x4f, 0x8b, 0x1a, 0x9f,
-      0x6b, 0x68, 0x5f, 0x6e, 0x62, 0x47, 0x3e, 0xd2, 0x1c, 0x36, 0xc6, 0x04,
-      0xf3, 0x79, 0x2f, 0x58, 0xab, 0x15, 0x74, 0x29, 0x54, 0xa7, 0x38, 0xa4,
-      0xcf, 0xde, 0x93, 0xa9, 0x74, 0x08, 0x52, 0x59, 0x9d, 0x4d, 0x95, 0xfd,
-      0x52, 0x33, 0x2e, 0x01, 0x21, 0xea, 0x18, 0x01, 0x00, 0xe3, 0x6b, 0x44,
-      0x90, 0x61, 0x4d, 0x26, 0xf5, 0x8b, 0x6e, 0xbd, 0x87, 0x78, 0xc5, 0xe7,
-      0x0e, 0xcb, 0x95, 0x33, 0xb2, 0x31, 0x41, 0xa7, 0xc9, 0x9d, 0xc9, 0xd2,
-      0x02, 0xfa, 0x98, 0xcd, 0x99, 0x8e, 0x18, 0x61, 0x0e, 0x78, 0x7f, 0x1b,
-      0x55, 0x75, 0x85, 0xea, 0x4d, 0x01, 0x1f, 0xf4, 0xc1, 0x8c, 0x8d, 0x8e,
-      0xf0, 0x96, 0x9e, 0x2f, 0x5b, 0x87, 0x9c, 0x65, 0xcd, 0x82, 0xfb, 0x9e,
-      0x61, 0x1d, 0xbf, 0x4a, 0xd6, 0xe2, 0xdf, 0x58, 0xcb, 0xa4, 0x79, 0x16,
-      0x53, 0xd6, 0x33, 0xa7, 0x33, 0xd2, 0x55, 0x17, 0x1a, 0x07, 0x16, 0x32,
-      0x98, 0x4d, 0xa0, 0xb8, 0x05, 0x58, 0x9a, 0x4d, 0x9b, 0x32, 0xc2, 0x63,
-      0x13, 0xc1, 0x6d, 0x1a, 0xf7, 0xb2, 0x7f, 0x5c, 0x8a, 0x49, 0x68, 0xa8,
-      0x02, 0xac, 0x0b, 0xb3, 0xe6, 0xac, 0x39, 0x74, 0x33, 0x3e, 0x64, 0x23,
-      0x8b, 0xa0, 0x05, 0xad, 0x83, 0xe3, 0x54, 0x78, 0xd3, 0x32, 0x3c, 0x0a,
-      0x3c, 0xde, 0x4a, 0x9a, 0xca, 0x08, 0xbe, 0x1d, 0x4c, 0x69, 0x93, 0x8b,
-      0x58, 0x84, 0x06, 0xb8, 0x32, 0xe0, 0x22, 0x91, 0xc4, 0x92, 0xe4, 0xe6,
-      0x23, 0x01, 0x10, 0x46, 0x61, 0x78, 0x45, 0x73, 0xcf, 0xc6, 0xa4, 0xa1,
-      0xd6, 0xcf, 0xe3, 0xbe, 0x04, 0x8e, 0x8e, 0xb1, 0x6d, 0x29, 0xe8, 0x71,
-      0x00, 0xd3, 0xac, 0x56, 0x2b, 0x5f, 0x4c, 0x18, 0x9f, 0x48, 0xc2, 0x29,
-      0xfc, 0x19, 0x62, 0xea, 0x4d, 0xe3, 0xdc, 0xf9, 0x59, 0xdd, 0x61, 0x36,
-      0x58, 0x95, 0x5a, 0x12, 0x1b, 0x62, 0x66, 0x95, 0xdf, 0xdc, 0x37, 0x68,
-      0xc7, 0x73, 0x79, 0x09, 0x52, 0x6c, 0x74, 0xbb, 0xed, 0xea, 0x5a, 0xae,
-      0xb3, 0x43, 0xcd, 0xb5, 0x0a, 0xd4, 0x8f, 0xd8, 0xad, 0x96, 0x4e, 0x8c,
-      0x61, 0x38, 0x6f, 0x4f, 0x40, 0xc8, 0x9e, 0xef, 0x36, 0x42, 0xa7, 0xcf,
-      0xbb, 0x91, 0x98, 0x17, 0x23, 0xcb, 0x4a, 0xa8, 0x14, 0x73, 0xf0, 0xbe,
-      0x86, 0x19, 0x30, 0xd5, 0xa1, 0x8b, 0x0a, 0x09, 0x38, 0x84, 0xec, 0x4f,
-      0xb3, 0xd9, 0x89, 0xc6, 0x3c, 0x9c, 0xae, 0x9e, 0xe4, 0x47, 0x40, 0x28,
-      0x68, 0x34, 0x4d, 0x62, 0x4a, 0x06, 0xb8, 0xba, 0x17, 0x88, 0x0b, 0x70,
-      0xa7, 0x19, 0x2a, 0xac, 0xb6, 0x14, 0xf7, 0x00, 0xb4, 0x48, 0x9b, 0x31,
-      0x2b, 0xb7, 0xe2, 0x0f, 0x25, 0x9f, 0xed, 0x64, 0x80, 0x36, 0xad, 0x4e,
-      0x37, 0x6a, 0x87, 0x29, 0x71, 0x95, 0xfc, 0x2a, 0xd3, 0x74, 0x44, 0xb5,
-      0xa5, 0xec, 0xbb, 0x57, 0x61, 0xbf, 0x1f, 0x1a, 0x26, 0xdc, 0x6c, 0xfa,
-      0xe5, 0xab, 0xba, 0xb9, 0xf3, 0xf2, 0x9e, 0x53, 0xd6, 0x67, 0x92, 0x62,
-      0x29, 0x1a, 0xee, 0x7c, 0x49, 0x3d, 0x9a, 0x1b, 0xdc, 0xda, 0x37, 0x9e,
-      0x61, 0x44, 0x4a, 0xf8, 0x46, 0x9c, 0x55, 0xd6, 0x82, 0xc2, 0x94, 0x7c,
-      0x4a, 0x18, 0x71, 0x06, 0x0a, 0x38, 0x99, 0xcd, 0xfe, 0x2a, 0x89, 0xc6,
-      0x38, 0x51, 0x01, 0xf6, 0xb5, 0x30, 0x83, 0xdc, 0xb9, 0xee, 0xdb, 0x43,
-      0xbe, 0x37, 0x15, 0x50, 0x68, 0x13, 0x3d, 0xd8, 0xd6, 0x58, 0xb3, 0xbf,
-      0x76, 0x38, 0x94, 0x6e, 0x24, 0x16, 0x24, 0x45, 0x7c, 0x1e, 0x54, 0xb0,
-      0xe7, 0x8b, 0xae, 0xae, 0xd2, 0xda, 0x1b, 0x2d, 0xb3, 0xa6, 0x7a, 0x52,
-      0xc7, 0xce, 0x60, 0xc6, 0xd8, 0x9f, 0x3b, 0xf0, 0x39, 0x07, 0xb9, 0x18,
-      0x8a, 0x7b, 0xc6, 0x73, 0x93, 0x3c, 0xde, 0x87, 0xb7, 0x20, 0xc5, 0x4b,
-      0x0b, 0x47, 0x50, 0xd0, 0xbd, 0x71, 0x96, 0xff, 0xe5, 0xe9, 0xb5, 0x46,
-      0x85, 0x91, 0x86, 0x6a, 0xf0, 0xc0, 0x6f, 0x1c, 0xff, 0x6d, 0x42, 0x24,
-      0xb9, 0x8c, 0xf1, 0x83, 0x7b, 0x9d, 0x84, 0x28, 0x8f, 0xca, 0xd6, 0x3a,
-      0xbb, 0x7e, 0xc1, 0x80, 0x80, 0x72, 0xf9, 0x87, 0x5f, 0xa9, 0x20, 0x22,
-      0x39, 0x3f, 0x58, 0xd0, 0x34, 0x1b, 0xe3, 0x1e, 0xb9, 0xeb, 0xb3, 0x43,
-      0x19, 0x06, 0xba, 0x0a, 0x9e, 0x21, 0x03, 0x13, 0x45, 0x88, 0x7f, 0x90,
-      0xe7, 0x71, 0xf8, 0xd1, 0x17, 0xee, 0x55, 0xbf, 0x67, 0x62, 0x0e, 0xb4,
-      0x85, 0xf2, 0xa1, 0x1f, 0x21, 0x16, 0x53, 0xc2, 0x45, 0xba, 0xf5, 0x1e,
-      0xd7, 0x1b, 0xec, 0x6d, 0x5b, 0x05, 0xa0, 0x89, 0x4c, 0x6b, 0x3e, 0x4e,
-      0xb5, 0x3a, 0xf7, 0x42, 0xdf, 0xff, 0xa4, 0xf2, 0x0d, 0x7f, 0x9f, 0xee,
-      0xd6, 0xb5, 0x91, 0x7c, 0xbf, 0x25, 0x6c, 0x1b, 0xba, 0xa8, 0xb4, 0x8d,
-      0x47, 0x6c, 0x74, 0x02, 0xd7, 0xca, 0x12, 0x69, 0x18, 0xf8, 0xc8, 0xac,
-      0x0a, 0x3c, 0xf0, 0xcb, 0x17, 0x1f, 0x5c, 0x4b, 0xc6, 0x06, 0x52, 0x85,
-      0x20, 0x82, 0x8d, 0x84, 0xaa, 0xb5, 0x35, 0x1f,
-    },
-
-    .dk = {
-      0xff, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x40, 0xc8, 0x21, 0x96, 0x13, 0x73, 0x9a, 0xe1, 0x11, 0x7d, 0x92, 0x3f,
-      0x21, 0xb4, 0x68, 0xba, 0xa1, 0xaf, 0xed, 0xc7, 0xa6, 0x9b, 0x76, 0x35,
-      0x51, 0x09, 0x64, 0x1b, 0x3a, 0xaf, 0x93, 0xa0, 0x8a, 0x91, 0xc4, 0xbb,
-      0x75, 0x17, 0x11, 0xce, 0x77, 0xa8, 0x01, 0x64, 0xbb, 0x5e, 0xb0, 0x16,
-      0x80, 0x83, 0x8d, 0xdc, 0x23, 0xc5, 0xa8, 0x40, 0x4a, 0xd7, 0x20, 0x90,
-      0x7a, 0xe8, 0xaf, 0x97, 0x92, 0x13, 0xc6, 0xb8, 0x73, 0x11, 0x78, 0x3a,
-      0xcc, 0x54, 0xc3, 0xa1, 0x39, 0xba, 0x60, 0x42, 0x4e, 0xb6, 0x0a, 0xb1,
-      0xc9, 0x91, 0xbb, 0xcf, 0x24, 0x41, 0x36, 0xa4, 0x1e, 0x8b, 0x68, 0x3e,
-      0x63, 0x1a, 0xc2, 0xf0, 0x7c, 0x29, 0x97, 0x06, 0x81, 0xb3, 0x47, 0xaa,
-      0x65, 0xc3, 0x66, 0x11, 0xf8, 0x1e, 0xe9, 0xfb, 0x52, 0xca, 0x29, 0x8a,
-      0x5b, 0xda, 0x45, 0x5b, 0x02, 0xb6, 0x6e, 0xb7, 0x35, 0x4a, 0x66, 0x2f,
-      0x03, 0xf6, 0x2c, 0x66, 0xd2, 0x07, 0x27, 0x77, 0x9d, 0x01, 0x5b, 0x2f,
-      0xe2, 0x13, 0x7e, 0x90, 0xb7, 0x17, 0x67, 0x20, 0x37, 0x32, 0x3b, 0xbc,
-      0x08, 0x04, 0xac, 0xc0, 0x1b, 0x02, 0x32, 0xf3, 0xc6, 0xbd, 0x97, 0x95,
-      0xa0, 0xc5, 0x45, 0xd9, 0xa3, 0x9e, 0x23, 0xf2, 0xbb, 0x2c, 0x24, 0x85,
-      0x18, 0x8c, 0x55, 0xe6, 0x14, 0x0a, 0xd0, 0x8a, 0x19, 0x6c, 0xf9, 0x31,
-      0x35, 0x7c, 0x87, 0xfd, 0x84, 0xb0, 0x48, 0x36, 0x14, 0x77, 0x2a, 0x88,
-      0xb8, 0x86, 0x36, 0xc8, 0xc1, 0x90, 0xdd, 0xcb, 0x6a, 0x29, 0x95, 0xc6,
-      0xe5, 0x15, 0x90, 0x7c, 0xf4, 0x21, 0x34, 0x03, 0x91, 0x82, 0x61, 0x95,
-      0x92, 0x24, 0x14, 0x23, 0x86, 0xa6, 0xee, 0x68, 0xa2, 0x2a, 0x60, 0x17,
-      0xe7, 0x09, 0x05, 0x84, 0x67, 0xa5, 0x17, 0x68, 0x51, 0xdf, 0x3a, 0x9a,
-      0x12, 0x90, 0xb1, 0x86, 0x36, 0xc8, 0x0c, 0xaa, 0xb1, 0x5d, 0xf0, 0xc6,
-      0x43, 0x59, 0xb6, 0x03, 0xa9, 0x85, 0x63, 0x44, 0x1a, 0xf1, 0x7b, 0x34,
-      0x9e, 0x99, 0x21, 0x3f, 0x06, 0xcd, 0x45, 0xfc, 0x47, 0x6d, 0xe9, 0xb5,
-      0xe7, 0x66, 0x4e, 0x98, 0x06, 0x29, 0x52, 0xe1, 0x09, 0x2a, 0x39, 0x87,
-      0xbb, 0x61, 0x2c, 0x3b, 0x0a, 0xcd, 0x3d, 0xdc, 0xba, 0xb6, 0x62, 0x19,
-      0x11, 0xcc, 0x1f, 0x25, 0x8b, 0x88, 0x60, 0xf3, 0xa8, 0x74, 0x60, 0x74,
-      0x75, 0xe1, 0xcb, 0x6e, 0x20, 0x73, 0x10, 0xe3, 0x48, 0xc5, 0x30, 0x10,
-      0x1e, 0x5b, 0x88, 0x90, 0x02, 0x4b, 0x93, 0x10, 0xac, 0xce, 0x80, 0x7c,
-      0x1c, 0x46, 0xb2, 0xdb, 0x8b, 0x02, 0xec, 0xbb, 0xbb, 0x9c, 0x4a, 0x7a,
-      0x5c, 0x09, 0x16, 0xc9, 0x86, 0x4b, 0x6b, 0xd8, 0x8c, 0x92, 0xbb, 0x61,
-      0xf3, 0x48, 0x1d, 0x66, 0xd2, 0x39, 0x76, 0x44, 0x4f, 0xf7, 0x58, 0x38,
-      0xa7, 0xf6, 0xc4, 0x00, 0x61, 0x56, 0x5e, 0x54, 0x81, 0x6c, 0x9a, 0x28,
-      0xc0, 0x8a, 0x04, 0x7c, 0x23, 0xcc, 0x6f, 0xf6, 0x5f, 0x9a, 0xb8, 0x57,
-      0x60, 0xb3, 0x18, 0x93, 0xcb, 0xb7, 0x5f, 0x85, 0x77, 0xbd, 0x15, 0x49,
-      0xd8, 0x75, 0x7c, 0xe8, 0x3b, 0x2a, 0x39, 0xc0, 0x0b, 0x76, 0xa4, 0x62,
-      0x6f, 0x21, 0x78, 0x9c, 0x42, 0xc1, 0x58, 0x89, 0xb2, 0x4e, 0xdb, 0xa4,
-      0xc8, 0x38, 0x30, 0xef, 0xa3, 0x3b, 0x19, 0xb4, 0x39, 0xfc, 0x96, 0x70,
-      0xd3, 0xb1, 0xab, 0x74, 0x09, 0x7a, 0x43, 0xa1, 0x60, 0xae, 0xa4, 0xae,
-      0x8c, 0x07, 0x88, 0x37, 0x0b, 0x04, 0x45, 0x63, 0x17, 0x59, 0x0b, 0x1f,
-      0x58, 0xb1, 0x64, 0x73, 0x3a, 0x41, 0x3f, 0x68, 0x78, 0x3d, 0xfa, 0xaa,
-      0xc7, 0x37, 0x3b, 0x8c, 0x47, 0x40, 0x8e, 0x13, 0x76, 0x4d, 0xe4, 0x73,
-      0x71, 0xbc, 0x3d, 0x92, 0x0b, 0x9c, 0x27, 0x05, 0x98, 0x6c, 0x25, 0x1a,
-      0x61, 0x46, 0x3a, 0x1c, 0xf0, 0xb6, 0x2e, 0x96, 0x43, 0xb8, 0xc5, 0x08,
-      0x16, 0xe6, 0xb0, 0x28, 0xf1, 0x66, 0x7d, 0x83, 0x25, 0x62, 0xec, 0x5b,
-      0x19, 0x77, 0xc9, 0x63, 0x55, 0x3a, 0xc2, 0xc2, 0x98, 0x68, 0x74, 0x9f,
-      0x16, 0x61, 0xbb, 0x67, 0x22, 0x3e, 0xa9, 0xf9, 0x35, 0xa9, 0xe1, 0xb0,
-      0x17, 0xda, 0x1e, 0xb6, 0x6c, 0x95, 0xa8, 0x2c, 0xbe, 0x40, 0xf6, 0xb3,
-      0x89, 0xe8, 0x0c, 0x33, 0xc7, 0x47, 0x74, 0x09, 0x52, 0xa2, 0x37, 0x8a,
-      0xcd, 0x95, 0x0e, 0xbb, 0xf4, 0x69, 0x1c, 0xd0, 0x27, 0x26, 0x64, 0x7f,
-      0xeb, 0x09, 0x92, 0xeb, 0xfa, 0x06, 0xf9, 0x21, 0x07, 0xe5, 0x2a, 0x00,
-      0xe9, 0xb0, 0x0e, 0xc6, 0xd4, 0x79, 0xdc, 0x18, 0x61, 0xe6, 0x83, 0x0f,
-      0x40, 0x53, 0x5f, 0x30, 0x39, 0x81, 0xbd, 0x79, 0x65, 0x14, 0x45, 0xb6,
-      0x18, 0xbb, 0xcc, 0x6a, 0xc8, 0x87, 0x8b, 0xf4, 0xa9, 0x62, 0x05, 0x27,
-      0xb7, 0x25, 0x4f, 0x47, 0x02, 0x6a, 0xe9, 0x4b, 0x5d, 0xc3, 0x00, 0x2b,
-      0xdc, 0x14, 0x7c, 0xef, 0xb5, 0x9f, 0x93, 0x76, 0xb3, 0xd6, 0xd2, 0x1d,
-      0x0b, 0xb7, 0x74, 0x20, 0x49, 0x56, 0xea, 0x5b, 0x46, 0x87, 0xc9, 0x32,
-      0xbf, 0xf5, 0x2f, 0x1e, 0x74, 0x8f, 0x4a, 0x46, 0xcc, 0xab, 0xd9, 0x5b,
-      0x26, 0x27, 0xac, 0xf2, 0x70, 0xcc, 0x27, 0x23, 0xa7, 0x47, 0x1b, 0x71,
-      0x22, 0xf5, 0xc8, 0x7b, 0xd0, 0x19, 0xa5, 0x95, 0xb8, 0xd2, 0xbc, 0x97,
-      0x69, 0x5b, 0x9b, 0x04, 0x87, 0x5a, 0x1e, 0x98, 0x27, 0x0c, 0xc7, 0x90,
-      0xeb, 0x04, 0xb8, 0x28, 0xec, 0xa7, 0xe6, 0x3c, 0x57, 0x16, 0x78, 0x4b,
-      0xf4, 0xf5, 0xa6, 0xb7, 0x51, 0xbb, 0x19, 0xcc, 0xc1, 0x24, 0x69, 0xa9,
-      0x01, 0x32, 0x33, 0x67, 0x15, 0x52, 0x3e, 0xc8, 0x25, 0x66, 0x87, 0x86,
-      0xd5, 0x18, 0xc1, 0x0e, 0x01, 0x5e, 0x86, 0x64, 0x7a, 0xe0, 0xc7, 0x5b,
-      0x62, 0xc0, 0xa6, 0xb0, 0x66, 0x6c, 0x0a, 0xd1, 0x07, 0x22, 0x38, 0x38,
-      0x36, 0xd9, 0xbe, 0x43, 0xe9, 0x62, 0xf9, 0x9c, 0x8e, 0xf4, 0x56, 0x47,
-      0x62, 0xd4, 0xa4, 0x5b, 0xca, 0x78, 0x15, 0x3b, 0x9e, 0x78, 0x20, 0x87,
-      0x28, 0xb1, 0x99, 0xbc, 0xf6, 0xb4, 0x2e, 0x83, 0x16, 0x48, 0xa7, 0xc0,
-      0xdc, 0x9c, 0x0a, 0xfd, 0xa3, 0x05, 0x4c, 0xc1, 0x3c, 0x0f, 0xc4, 0x25,
-      0x67, 0x49, 0x1c, 0x0b, 0xd2, 0x56, 0x57, 0x79, 0x2e, 0xea, 0x84, 0x34,
-      0xaf, 0x16, 0x6f, 0x05, 0xbc, 0x3a, 0x5f, 0x56, 0xc3, 0xb3, 0xc0, 0x75,
-      0xb5, 0x16, 0x60, 0x1d, 0x39, 0x03, 0x4f, 0xa4, 0x05, 0xea, 0x20, 0x9e,
-      0x34, 0x9a, 0x56, 0xf5, 0x86, 0xb9, 0x80, 0x0a, 0x24, 0xf4, 0x64, 0x77,
-      0x05, 0x64, 0x22, 0x3f, 0x89, 0x01, 0x18, 0xba, 0x63, 0x5a, 0x1b, 0x09,
-      0x31, 0x69, 0xa1, 0x30, 0x43, 0xb0, 0x37, 0xa4, 0x67, 0xbd, 0x80, 0x3c,
-      0x05, 0x1b, 0x1a, 0xad, 0xd9, 0x74, 0x49, 0x91, 0xce, 0xa7, 0x05, 0x0b,
-      0xfc, 0xfc, 0x41, 0x29, 0xb8, 0x65, 0xeb, 0xc8, 0xbf, 0xaf, 0xf1, 0x0d,
-      0xfd, 0xe6, 0xac, 0xa7, 0x47, 0x53, 0xa8, 0xf9, 0xb8, 0x6e, 0x67, 0x5e,
-      0xae, 0x1c, 0x34, 0x25, 0x24, 0x85, 0x80, 0x53, 0x78, 0xf8, 0x4a, 0x1c,
-      0xec, 0xab, 0x46, 0xdd, 0xdc, 0x3d, 0x63, 0x04, 0xa7, 0x7a, 0x97, 0x83,
-      0xa1, 0x42, 0x3d, 0xa7, 0x92, 0x78, 0x76, 0x96, 0x84, 0xd0, 0xd3, 0x6a,
-      0xf4, 0xcb, 0x44, 0x80, 0x27, 0x94, 0xb4, 0x08, 0x2a, 0xb8, 0x25, 0x15,
-      0xd6, 0x22, 0x50, 0x56, 0x6c, 0xaf, 0xdd, 0x4c, 0x9e, 0xa3, 0xf9, 0x17,
-      0x54, 0x77, 0xca, 0xd4, 0xcc, 0x9e, 0x6b, 0xf6, 0x7a, 0x8d, 0x63, 0xcf,
-      0x7a, 0x54, 0x23, 0xec, 0x51, 0xc7, 0x72, 0xb0, 0x2e, 0xdd, 0x2a, 0x38,
-      0x21, 0xb7, 0x4c, 0x18, 0xc4, 0x47, 0x96, 0x90, 0x5a, 0x1a, 0x99, 0x95,
-      0xc7, 0x66, 0x50, 0x63, 0xa6, 0x45, 0x9c, 0xba, 0x6f, 0xe3, 0xf0, 0x74,
-      0x3f, 0xa0, 0xcc, 0x79, 0xe4, 0x5d, 0x41, 0x28, 0x07, 0x75, 0x23, 0x54,
-      0xc7, 0x33, 0x54, 0xdb, 0xa4, 0x74, 0xce, 0x94, 0x7b, 0x6b, 0xd8, 0x2e,
-      0xc9, 0x70, 0x43, 0xa3, 0xaa, 0x39, 0xcb, 0xea, 0x98, 0xf7, 0x77, 0x39,
-      0xe5, 0x96, 0x0b, 0xb6, 0xf2, 0x5d, 0x81, 0xe1, 0xaa, 0x2f, 0x28, 0xa5,
-      0x12, 0xf3, 0x88, 0x9d, 0xb6, 0x26, 0x02, 0x32, 0x93, 0x06, 0x4c, 0xca,
-      0xff, 0xd3, 0x56, 0x76, 0xb4, 0x7f, 0x32, 0xf1, 0x41, 0xd3, 0xf5, 0x6e,
-      0x84, 0xcc, 0x94, 0x68, 0x07, 0x45, 0x8a, 0xa3, 0x3c, 0x9f, 0x2a, 0x37,
-      0xfc, 0xc6, 0x6b, 0x62, 0x5b, 0x58, 0xfe, 0xa2, 0x8f, 0x0c, 0x40, 0x43,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0xf8, 0xf7, 0x14, 0x73,
-      0xf9, 0xa4, 0xa6, 0x07, 0x9d, 0x99, 0xa5, 0x6b, 0x68, 0x07, 0x72, 0x80,
-      0xeb, 0xed, 0xd4, 0x2b, 0x9b, 0x3b, 0x28, 0x60, 0x94, 0xd0, 0x40, 0x6f,
-      0x0c, 0x80, 0x5f, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x68, 0x11, 0x1b, 0x01, 0xfa, 0x2c, 0xf5, 0x62,
-      0xb0, 0xa7, 0x40, 0x24, 0xca, 0xd0, 0xf1, 0x44,
-      0x9b, 0xf4, 0x1b, 0x7c, 0x6f, 0xac, 0x58, 0x7f,
-      0x2d, 0x98, 0xe8, 0xce, 0x6a, 0x3d, 0x57, 0x53,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // decapsulate shared key from ciphertext `ct` using KEM768
-    // decapsulation key `dk`, then store result in buffer `got`.
-    uint8_t got[32] = { 0 };
-    fips203ipd_kem768_decaps(got, TESTS[i].ct, TESTS[i].dk);
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_fips203ipd_kem768_roundtrip(void) {
-  uint8_t buf[96] = { 0 };
-
-  for (size_t i = 0; i < NUM_ROUNDTRIP_TIMES; i++) {
-    rand_bytes(buf, sizeof(buf));
-    const uint8_t * const keygen_seed = buf; // 64 bytes
-    const uint8_t * const encaps_seed = buf + 64; // 32 bytes
-
-    // generate encapsulation and decapsulation keys
-    uint8_t ek[FIPS203IPD_KEM768_EK_SIZE] = { 0 };
-    uint8_t dk[FIPS203IPD_KEM768_DK_SIZE] = { 0 };
-    fips203ipd_kem768_keygen(ek, dk, keygen_seed);
-
-    // encapsulate, get key and ciphertext
-    uint8_t k0[32] = { 0 };
-    uint8_t ct[FIPS203IPD_KEM768_CT_SIZE] = { 0 };
-    fips203ipd_kem768_encaps(k0, ct, ek, encaps_seed);
-
-    // decapsulate key from ciphertext
-    uint8_t k1[32] = { 0 };
-    fips203ipd_kem768_decaps(k1, ct, dk);
-
-    // verify that k0 == k1
-    compare_keys(__func__, k0, k1, keygen_seed, encaps_seed);
-  }
-}
-
-static void test_mat4_mul(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t mat[16];
-    const poly_t vec[4];
-    const poly_t exp[4];
-  } TESTS[] = {{
-    .name = "[[1, x, x^2, x^3], ... [x^12, x^13, x^14, x^15]] * [x, x^2, x^3, x^4]^T",
-    //       [     1   x^1   x^2   x^3  ]
-    // mat = [   x^4   x^5   x^6   x^7  ]
-    //       [   x^8   x^9  x^10  x^11  ]
-    //       [  x^12  x^13  x^14  x^15  ]
-    .mat = {
-      { .cs = { [0] = 1 } },
-      { .cs = { [1] = 1 } },
-      { .cs = { [2] = 1 } },
-      { .cs = { [3] = 1 } },
-
-      { .cs = { [4] = 1 } },
-      { .cs = { [5] = 1 } },
-      { .cs = { [6] = 1 } },
-      { .cs = { [7] = 1 } },
-
-      { .cs = { [8] = 1 } },
-      { .cs = { [9] = 1 } },
-      { .cs = { [10] = 1 } },
-      { .cs = { [11] = 1 } },
-
-      { .cs = { [12] = 1 } },
-      { .cs = { [13] = 1 } },
-      { .cs = { [14] = 1 } },
-      { .cs = { [15] = 1 } },
-    },
-
-    //       (  x^1, )
-    // vec = (  x^2, )
-    //       (  x^3  )
-    //       (  x^4  )
-    .vec = {
-      { .cs = { [1] = 1 } },
-      { .cs = { [2] = 1 } },
-      { .cs = { [3] = 1 } },
-      { .cs = { [4] = 1 } },
-    },
-
-    //       (   x^1 +  x^3 +  x^5 +  x^7  )
-    // exp = (   x^5 +  x^7 +  x^9 + x^11  )
-    //       (   x^9 + x^11 + x^13 + x^15  )
-    //       (  x^13 + x^15 + x^17 + x^19  )
-    .exp = {
-      { .cs = {  [1] = 1,  [3] = 1,  [5] = 1,  [7] = 1 } },
-      { .cs = {  [5] = 1,  [7] = 1,  [9] = 1, [11] = 1 } },
-      { .cs = {  [9] = 1, [11] = 1, [13] = 1, [15] = 1 } },
-      { .cs = { [13] = 1, [15] = 1, [17] = 1, [19] = 1 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // populate matrix, apply NTT
-    poly_t mat[16] = { 0 };
-    memcpy(mat, TESTS[i].mat, sizeof(mat));
-    mat4_ntt(mat);
-
-    // populate vector, apply NTT
-    poly_t vec[4] = { 0 };
-    memcpy(vec, TESTS[i].vec, sizeof(vec));
-    vec4_ntt(vec);
-
-    poly_t got[4] = { 0 };
-    mat4_mul(got, mat, vec); // got = mat * vec
-    vec4_inv_ntt(got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec4_write(stderr, "got", got);
-      fprintf(stderr, "exp:\n");
-      vec4_write(stderr, "exp", TESTS[i].exp);
-    }
-  }
-}
-
-static void test_vec4_add(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t a[4]; // test value a
-    const poly_t b[4]; // test value b
-    const poly_t exp[4]; // expected value
-  } TESTS[] = {{
-    .name = "[1, x, x^2, x^3]^T + [x^4, x^5, x^6, x^7]^T",
-    .a = {
-      { .cs = { [0] = 1 } },
-      { .cs = { [1] = 1 } },
-      { .cs = { [2] = 1 } },
-      { .cs = { [3] = 1 } },
-    },
-
-    .b = {
-      { .cs = { [4] = 1 } },
-      { .cs = { [5] = 1 } },
-      { .cs = { [6] = 1 } },
-      { .cs = { [7] = 1 } },
-    },
-
-    .exp = {
-      { .cs = { [0] = 1, [4] = 1 } },
-      { .cs = { [1] = 1, [5] = 1 } },
-      { .cs = { [2] = 1, [6] = 1 } },
-      { .cs = { [3] = 1, [7] = 1 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t got[4] = { 0 };
-    memcpy(got, TESTS[i].a, sizeof(got)); // got = a
-
-    vec4_add(got, TESTS[i].b); // got += b
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec4_write(stderr, "got", got);
-      fprintf(stderr, "exp:\n");
-      vec4_write(stderr, "exp", TESTS[i].exp);
-    }
-  }
-}
-
-static void test_vec4_dot(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t a[4]; // test value a
-    const poly_t b[4]; // test value b
-    const poly_t exp; // expected value
-  } TESTS[] = {{
-    .name = "[1, x, x^2, x^3] * [x^4, x^5, x^6, x^7]^T",
-    .a = {
-      { .cs = { [0] = 1 } },
-      { .cs = { [1] = 1 } },
-      { .cs = { [2] = 1 } },
-      { .cs = { [3] = 1 } },
-    },
-
-    .b = {
-      { .cs = { [4] = 1 } },
-      { .cs = { [5] = 1 } },
-      { .cs = { [6] = 1 } },
-      { .cs = { [7] = 1 } },
-    },
-
-    .exp = { .cs = { [4] = 1, [6] = 1, [8] = 1, [10] = 1 } },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t a[4], b[4];
-
-    memcpy(a, TESTS[i].a, sizeof(a));
-    vec4_ntt(a); // a = NTT(a)
-
-    memcpy(b, TESTS[i].b, sizeof(b));
-    vec4_ntt(b); // b = NTT(b)
-
-    poly_t got = { 0 };
-    vec4_dot(&got, a, b); // got = a * b
-    poly_inv_ntt(&got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
-      fail_poly_test(__func__, TESTS[i].name, &got, &(TESTS[i].exp));
-    }
-  }
-}
-
-static void test_vec4_ntt(void) {
-  static const struct {
-    const char *name; // test name
-    const poly_t exp[4]; // expected value
-  } TESTS[] = {{
-    .name = "[1, x, x^2, x^3]^T",
-    .exp = {
-      { .cs = { [0] = 1 } },
-      { .cs = { [1] = 1 } },
-      { .cs = { [2] = 1 } },
-      { .cs = { [3] = 1 } },
-    },
-  }, {
-    .name = "[x^4, x^5, x^6, x^7]^T",
-    .exp = {
-      { .cs = { [4] = 1 } },
-      { .cs = { [5] = 1 } },
-      { .cs = { [6] = 1 } },
-      { .cs = { [7] = 1 } },
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    poly_t got[4] = { 0 };
-    memcpy(got, TESTS[i].exp, sizeof(got));
-    vec4_ntt(got); // got = NTT(exp)
-    vec4_inv_ntt(got); // got = InvNTT(got)
-
-    // check for expected value
-    if (memcmp(&got, &(TESTS[i].exp), sizeof(got))) {
-      fprintf(stderr, "%s(\"%s\") failed, got:\n", __func__, TESTS[i].name);
-      vec4_write(stderr, "got", got);
-      fprintf(stderr, "\nexp:\n");
-      vec4_write(stderr, "exp", TESTS[i].exp);
-      fputs("\n", stderr);
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const poly_t val[4]; // test vector
-} VEC4_ENCODE_TESTS[] = {{
-  .name = "basic",
-  .val = {
-    { .cs = { 1, 2, 3, 4, 5 } },
-    { .cs = { 3328, 3327, 3326, 3325, 3324 } },
-    { .cs = { 100, 200, 300, 400, 500 } },
-    { .cs = { 2432, 1234, 567, 890, 876 } },
-  },
-}};
-
-DEF_TEST_VEC_FNS(4)
-DEF_TEST_VEC_BIT_FNS(4, 11)
-
-static const struct {
-  const char *name; // test name
-  const uint8_t seed[32]; // test seed
-  const uint8_t exp_ek[PKE1024_EK_SIZE]; // expected ek (1568 bytes)
-  const uint8_t exp_dk[PKE1024_DK_SIZE]; // expected dk (1536 bytes)
-} PKE1024_KEYGEN_TESTS[] = {{
-  .name = "all-zero",
-  .seed = { 0 },
-  .exp_ek = {
-    0xe4, 0xb4, 0x3d, 0xd6, 0xb4, 0x02, 0xb6, 0x1c, 0x32, 0xf0, 0x19, 0x1d,
-    0x13, 0xb1, 0xb5, 0x4c, 0x50, 0xb8, 0xdc, 0xc2, 0x24, 0x48, 0x28, 0x64,
-    0xd7, 0xc8, 0x18, 0xf7, 0xa2, 0x42, 0xa8, 0x18, 0x1e, 0x32, 0x63, 0xbc,
-    0x43, 0x32, 0x50, 0x1b, 0x23, 0x59, 0xdb, 0xa9, 0xa8, 0x42, 0x18, 0x86,
-    0x24, 0x87, 0xa5, 0x4b, 0x4a, 0x6a, 0xfd, 0x4a, 0xa8, 0xed, 0x86, 0x68,
-    0x00, 0xe1, 0xaf, 0x36, 0xd7, 0xb6, 0xd3, 0x49, 0x81, 0x21, 0x74, 0x07,
-    0x38, 0xc4, 0xca, 0xfb, 0x10, 0xca, 0x54, 0x74, 0x3f, 0x4b, 0xe2, 0x07,
-    0xdd, 0xa5, 0x2e, 0xa1, 0xc9, 0xb1, 0x4a, 0x36, 0x81, 0x9f, 0x58, 0x18,
-    0x91, 0x5b, 0x74, 0x6f, 0xdc, 0xa9, 0x75, 0x7a, 0x4b, 0x59, 0x47, 0x69,
-    0xc8, 0x76, 0xa5, 0x30, 0xec, 0x95, 0xfb, 0x56, 0x8a, 0xce, 0xf0, 0x3f,
-    0x90, 0x04, 0x99, 0xb0, 0xb2, 0xca, 0xaa, 0x01, 0x58, 0xbe, 0x13, 0x7e,
-    0x86, 0x4c, 0x95, 0x46, 0x1b, 0x34, 0x22, 0xe8, 0xcd, 0x0a, 0x88, 0x8c,
-    0xa7, 0xd3, 0x02, 0xcf, 0xf8, 0x6a, 0x64, 0x03, 0x8f, 0xce, 0x28, 0x91,
-    0xba, 0xb6, 0x69, 0xd2, 0x81, 0x04, 0xa8, 0xf6, 0xa1, 0xb8, 0x64, 0xa1,
-    0x8e, 0x03, 0x7b, 0x39, 0x54, 0xb7, 0x56, 0x18, 0x45, 0xc4, 0x4a, 0x31,
-    0x8e, 0x87, 0x36, 0xfe, 0x09, 0x0d, 0xf1, 0x8a, 0x7d, 0xb7, 0xdb, 0x52,
-    0x8f, 0x24, 0x5d, 0x09, 0xe9, 0x01, 0xa5, 0x7a, 0x40, 0xc9, 0x3a, 0x0b,
-    0xb1, 0x77, 0x24, 0x80, 0xb7, 0x89, 0xa4, 0x98, 0x25, 0xf7, 0xd4, 0x7e,
-    0xe5, 0x7c, 0x73, 0xb5, 0xf3, 0x4c, 0x80, 0x19, 0x24, 0xea, 0xeb, 0x60,
-    0xe8, 0x29, 0x87, 0xe0, 0xb9, 0x6f, 0x50, 0x69, 0x45, 0x34, 0x98, 0x23,
-    0x93, 0xd7, 0x0b, 0xaa, 0x67, 0x65, 0xcf, 0xb8, 0xc0, 0xe0, 0x81, 0x17,
-    0xa2, 0x12, 0xa7, 0xe8, 0x0c, 0x14, 0x16, 0xc4, 0xb1, 0x7f, 0xd6, 0x55,
-    0xcf, 0x62, 0x89, 0xe3, 0xc6, 0x12, 0x92, 0xf2, 0x0a, 0x2c, 0x82, 0x9d,
-    0x94, 0x04, 0xc9, 0x6a, 0x34, 0x11, 0x83, 0x0b, 0x9f, 0x20, 0x4c, 0x01,
-    0x02, 0xf2, 0x06, 0x51, 0x18, 0x77, 0xf4, 0x6a, 0x89, 0x31, 0xdc, 0x01,
-    0x5d, 0x00, 0x03, 0xfc, 0x78, 0xb1, 0xe6, 0x55, 0x12, 0x3c, 0xa0, 0x14,
-    0xbd, 0xc4, 0xc3, 0x92, 0xbb, 0xaf, 0x7d, 0x1c, 0x4e, 0x99, 0xe7, 0x93,
-    0xf5, 0x22, 0x28, 0xaf, 0xe3, 0xc9, 0x34, 0xf4, 0xc4, 0xc3, 0x36, 0x36,
-    0xa5, 0x60, 0x93, 0x7e, 0xc0, 0xa2, 0x65, 0xa6, 0x96, 0x62, 0x52, 0x81,
-    0xdf, 0x60, 0x7f, 0x0a, 0x4c, 0x06, 0x62, 0xd3, 0x77, 0x70, 0x03, 0x50,
-    0x2f, 0x47, 0x4e, 0xb7, 0xe8, 0x94, 0xca, 0xf4, 0x47, 0x9f, 0xea, 0xb4,
-    0x18, 0xb1, 0x36, 0x04, 0x71, 0xb9, 0x6f, 0xda, 0xbe, 0x8c, 0xf4, 0x5f,
-    0x3c, 0x59, 0xce, 0x79, 0x99, 0x2e, 0xf8, 0xab, 0x1f, 0x4a, 0x8a, 0x1d,
-    0xc1, 0xe0, 0x30, 0xba, 0xf9, 0xc0, 0x21, 0x71, 0x42, 0xb7, 0xc9, 0x38,
-    0x55, 0xd8, 0x34, 0x1f, 0x49, 0x23, 0xcd, 0x27, 0x66, 0x93, 0xd3, 0x68,
-    0x6f, 0xc4, 0xc9, 0x6c, 0x47, 0x03, 0xad, 0x60, 0x4c, 0x34, 0x38, 0x58,
-    0x2b, 0xfb, 0x03, 0x6f, 0xd9, 0x62, 0xb0, 0xf8, 0xa0, 0xf4, 0xd6, 0x22,
-    0x3b, 0x0c, 0xb0, 0x38, 0x32, 0x15, 0xe7, 0xdb, 0x8c, 0x75, 0x82, 0x93,
-    0x39, 0x33, 0xad, 0x09, 0x51, 0x19, 0xfb, 0xca, 0x1f, 0x35, 0xd0, 0x3e,
-    0x82, 0x56, 0x2a, 0x4e, 0x17, 0x20, 0x4a, 0x45, 0x59, 0x27, 0x06, 0x0a,
-    0xef, 0xec, 0x25, 0x96, 0xc6, 0xca, 0x48, 0x7b, 0x3e, 0x3b, 0x94, 0xcc,
-    0x4d, 0x3b, 0x15, 0x84, 0xb7, 0x90, 0x80, 0x55, 0x5c, 0x87, 0x9c, 0x69,
-    0xae, 0xc2, 0xa8, 0xca, 0xcc, 0xb0, 0x0e, 0xf0, 0x23, 0xab, 0xa8, 0x86,
-    0x72, 0x12, 0x01, 0x34, 0x2a, 0x2b, 0xe6, 0x8b, 0x67, 0xc9, 0x31, 0x24,
-    0x80, 0x44, 0x1d, 0x9b, 0x71, 0x56, 0x8e, 0x69, 0x0e, 0x20, 0x72, 0x8f,
-    0xb2, 0x27, 0x49, 0xcc, 0xca, 0x94, 0x86, 0x79, 0xaa, 0x70, 0xd5, 0xac,
-    0xef, 0xe3, 0x8a, 0x91, 0xe0, 0x26, 0xf4, 0x25, 0x08, 0xb4, 0x49, 0xc7,
-    0x19, 0xd5, 0x70, 0x27, 0xfa, 0x42, 0xb6, 0x23, 0xb2, 0x80, 0x14, 0x69,
-    0x91, 0x90, 0x0c, 0x85, 0x4b, 0x72, 0x5d, 0xc3, 0xb6, 0x56, 0xc4, 0xb9,
-    0xe7, 0xa6, 0x97, 0xbd, 0x57, 0x19, 0x11, 0x5b, 0x7c, 0xbf, 0xd2, 0x68,
-    0x21, 0x49, 0x35, 0x05, 0xdb, 0x5f, 0x9e, 0x40, 0xa4, 0x4f, 0x2a, 0x38,
-    0x17, 0x7c, 0x3b, 0xc4, 0x52, 0x5b, 0xfe, 0x05, 0x60, 0x6e, 0xc6, 0x5b,
-    0x77, 0x29, 0x4c, 0x16, 0xa1, 0x8c, 0x93, 0x94, 0x53, 0xc6, 0x61, 0x41,
-    0x78, 0x9a, 0x9d, 0xb5, 0x51, 0x5a, 0x2d, 0x23, 0x0a, 0x34, 0xa1, 0xad,
-    0x5e, 0x62, 0x2a, 0x0c, 0x27, 0xcb, 0xca, 0x07, 0xc4, 0x9f, 0x35, 0x9e,
-    0x4f, 0x25, 0x5f, 0xd7, 0x04, 0x8a, 0x93, 0xe8, 0xcf, 0x12, 0x08, 0x64,
-    0xd0, 0x69, 0x66, 0x4c, 0xc3, 0x0b, 0xe2, 0x61, 0xb6, 0x31, 0xa9, 0x11,
-    0x43, 0x6b, 0x49, 0x1e, 0xf0, 0x19, 0x86, 0xea, 0x3b, 0xf8, 0x91, 0x5f,
-    0x20, 0xca, 0x52, 0x66, 0x41, 0xcb, 0x44, 0xfa, 0x96, 0x31, 0x69, 0xb2,
-    0x09, 0x9b, 0x30, 0x7f, 0x86, 0x13, 0x15, 0x96, 0x02, 0x49, 0x88, 0x94,
-    0x6b, 0x01, 0x4e, 0x12, 0xf6, 0x74, 0x65, 0x89, 0x7a, 0xbe, 0x25, 0x04,
-    0xf2, 0xf8, 0x13, 0x9a, 0x7b, 0x1c, 0x94, 0xbb, 0x5f, 0xfc, 0x73, 0x24,
-    0x70, 0x1c, 0xa4, 0xa6, 0x2b, 0xcf, 0xa3, 0x42, 0xba, 0xfe, 0x53, 0x6f,
-    0xc4, 0x02, 0x2c, 0xbc, 0xb1, 0x9a, 0x2b, 0x74, 0x6f, 0xdd, 0x44, 0x2c,
-    0x45, 0x6b, 0x98, 0xa2, 0x77, 0x6f, 0x0c, 0x40, 0x9f, 0x94, 0x43, 0x0d,
-    0x33, 0xa0, 0xbd, 0x94, 0x36, 0x38, 0x1f, 0x49, 0x43, 0xbc, 0xc6, 0x8c,
-    0x6e, 0xe0, 0x89, 0x57, 0xc1, 0xb9, 0x4c, 0x95, 0x43, 0x74, 0xe6, 0xb0,
-    0x1b, 0x83, 0xaf, 0x8b, 0x3b, 0x2b, 0xe0, 0x18, 0x47, 0xe5, 0xd0, 0x4f,
-    0x74, 0x2b, 0xbb, 0x30, 0xbc, 0xcf, 0xb8, 0x52, 0x8b, 0x58, 0xf9, 0x7e,
-    0x5a, 0xb8, 0x48, 0xae, 0x68, 0x30, 0x01, 0x66, 0x0e, 0x69, 0xb4, 0xbc,
-    0xa0, 0x60, 0x2c, 0xbb, 0x43, 0xb3, 0xd5, 0xa2, 0x88, 0xaa, 0x8b, 0x93,
-    0x8c, 0x26, 0x67, 0x0d, 0x31, 0xa7, 0x9f, 0x70, 0x4a, 0x14, 0x54, 0x6b,
-    0x52, 0xfc, 0xbc, 0x81, 0x69, 0xa8, 0xfd, 0xd5, 0x40, 0x66, 0x0a, 0x3a,
-    0x56, 0xe3, 0x69, 0x39, 0xa7, 0x53, 0xd6, 0x39, 0x24, 0x73, 0x58, 0xad,
-    0xb6, 0xb4, 0xb7, 0xeb, 0xf0, 0x97, 0x96, 0x48, 0x25, 0xb7, 0xea, 0x80,
-    0x05, 0x68, 0x0f, 0x2a, 0xe5, 0x82, 0x0a, 0x6b, 0xcf, 0x60, 0xa6, 0x15,
-    0x28, 0x2b, 0x71, 0x07, 0x36, 0xba, 0xe6, 0xbb, 0x55, 0xe7, 0x48, 0xad,
-    0x3f, 0xb7, 0x3d, 0xd3, 0xac, 0xa0, 0x3e, 0x0a, 0x68, 0xf6, 0xb7, 0x13,
-    0xcf, 0xa6, 0x1b, 0x20, 0x16, 0xca, 0x8a, 0x47, 0x64, 0xaf, 0x25, 0x6e,
-    0xb9, 0xf8, 0x76, 0xfe, 0x6a, 0x70, 0x3f, 0xa1, 0x64, 0xd6, 0xec, 0x9a,
-    0x27, 0xc6, 0x84, 0xfd, 0xe5, 0x00, 0x1d, 0x75, 0x94, 0xdf, 0x70, 0x04,
-    0x59, 0x10, 0x46, 0xb3, 0xca, 0xaf, 0x65, 0x48, 0x81, 0x9b, 0x60, 0x38,
-    0xcd, 0xf3, 0x78, 0xa0, 0x33, 0xb8, 0x7c, 0x8c, 0x1a, 0x45, 0x04, 0x57,
-    0x13, 0x12, 0x5d, 0x4e, 0x61, 0x7f, 0x7c, 0x52, 0xb7, 0xdc, 0x27, 0x0c,
-    0x7c, 0x55, 0x2a, 0xdb, 0x03, 0x2e, 0xf6, 0x38, 0x11, 0x71, 0x3b, 0x06,
-    0x6e, 0x33, 0xc2, 0xc1, 0x42, 0x5b, 0x02, 0x14, 0xa1, 0xe3, 0xd8, 0xcf,
-    0x69, 0xb5, 0xc3, 0x37, 0xd1, 0x6b, 0x12, 0xd3, 0x64, 0x60, 0xfc, 0x3a,
-    0xd1, 0x4c, 0x27, 0x20, 0xf8, 0x69, 0xae, 0x4b, 0xa2, 0x94, 0xf6, 0x2c,
-    0x67, 0xe2, 0x47, 0x40, 0xb8, 0x93, 0x52, 0xa3, 0x8a, 0x73, 0x4c, 0xb5,
-    0x35, 0xb5, 0x8b, 0x6d, 0x94, 0x56, 0x8d, 0x2c, 0x65, 0xa6, 0xd6, 0x62,
-    0x3b, 0xb5, 0xc9, 0x05, 0x51, 0x3f, 0x62, 0x20, 0x1d, 0x48, 0xcb, 0x60,
-    0xa9, 0x46, 0xc9, 0x7c, 0x86, 0x5f, 0x96, 0xc9, 0xc4, 0xdf, 0x39, 0x33,
-    0x45, 0x23, 0xa1, 0xd1, 0x53, 0x95, 0xa9, 0x01, 0x95, 0xa3, 0xb5, 0x7b,
-    0x34, 0xb1, 0xb7, 0xc1, 0x27, 0x94, 0x4c, 0x2a, 0x2a, 0x39, 0xc2, 0xc0,
-    0x67, 0xa7, 0x14, 0xac, 0x13, 0xcb, 0x76, 0x8a, 0x68, 0xb4, 0xab, 0x6a,
-    0x97, 0x34, 0x69, 0xf0, 0xa4, 0x42, 0xd7, 0xe0, 0x7a, 0x70, 0x25, 0x43,
-    0x29, 0xd8, 0x01, 0x92, 0x69, 0x27, 0xd7, 0xfb, 0xbc, 0xc8, 0x88, 0x47,
-    0x68, 0x62, 0x33, 0x6e, 0xa2, 0x02, 0x6d, 0x68, 0xaa, 0x34, 0x8b, 0x4b,
-    0x6e, 0x3c, 0xb9, 0x72, 0xd4, 0x2c, 0xc0, 0x98, 0x29, 0x14, 0x79, 0xa4,
-    0xbe, 0x24, 0xb2, 0x33, 0xa7, 0x15, 0x5f, 0xb9, 0xaa, 0x77, 0x35, 0x3e,
-    0xbb, 0xc6, 0x4f, 0x0e, 0x0a, 0xa0, 0x28, 0x4a, 0xcc, 0x51, 0xf5, 0xc9,
-    0x26, 0x31, 0x5e, 0x0b, 0x44, 0x00, 0x79, 0xa7, 0x61, 0x9b, 0xb4, 0xb2,
-    0xe8, 0x08, 0x80, 0xd5, 0x1c, 0x1c, 0x18, 0xcb, 0xcc, 0xae, 0xa0, 0x4d,
-    0xe7, 0xc5, 0x69, 0xbe, 0xf5, 0x31, 0x61, 0xe3, 0xc3, 0xb7, 0x31, 0x0e,
-    0x91, 0x37, 0x53, 0x0e, 0x41, 0x0d, 0x40, 0xca, 0x55, 0xa6, 0xa5, 0x1f,
-    0x62, 0xe2, 0x21, 0x4e, 0x62, 0x2b, 0xd0, 0x25, 0x5b, 0x71, 0xab, 0x59,
-    0x44, 0xc5, 0x0f, 0x92, 0xb6, 0x34, 0x2c, 0xe7, 0xc2, 0xf6, 0xeb, 0x6c,
-    0x01, 0x87, 0x70, 0xa9, 0x08, 0x0e, 0x20, 0x54, 0x6e, 0xa9, 0x81, 0x2b,
-    0x7c, 0xe6, 0x5c, 0x7a, 0xa5, 0xae, 0x0a, 0xa6, 0x5d, 0x2f, 0x90, 0x36,
-    0xa9, 0xe4, 0x5c, 0x7d, 0xda, 0x0d, 0xc3, 0x2b, 0x31, 0x13, 0x65, 0xba,
-    0xcf, 0x48, 0x9d, 0x9e, 0x70, 0x88, 0x02, 0xb1, 0x62, 0x6c, 0x39, 0x2f,
-    0x9a, 0xa0, 0x0c, 0xb6, 0xd5, 0xa2, 0x37, 0xf3, 0xbc, 0xa3, 0x90, 0x8c,
-    0x0c, 0x85, 0x39, 0x93, 0xe9, 0x4a, 0x55, 0x8a, 0x05, 0x51, 0xa3, 0x75,
-    0x55, 0x51, 0x53, 0xd3, 0x44, 0x30, 0xb4, 0xf5, 0xa1, 0x6e, 0xd4, 0x48,
-    0x2d, 0x95, 0x06, 0x30, 0xca, 0x3f, 0xea, 0x06, 0x1c, 0xa0, 0xe5, 0x83,
-    0x6d, 0x18, 0x12, 0x70, 0x0b, 0xca, 0x26, 0xd3, 0x6d, 0x92, 0x0a, 0x3c,
-    0x49, 0xd9, 0x46, 0xcb, 0xd8, 0xa1, 0xf2, 0x01, 0x0a, 0x3e, 0x8b, 0x44,
-    0xe4, 0x9b, 0x14, 0x28, 0x23, 0x3a, 0x7a, 0x3a, 0x7e, 0x2c, 0x09, 0x64,
-    0xec, 0x47, 0xca, 0xc2, 0xb6, 0xa5, 0x27, 0x31, 0x0f, 0xe3, 0x19, 0x61,
-    0x45, 0xf0, 0xb7, 0x00, 0xb1, 0xbc, 0xac, 0xd9, 0x4b, 0x8a, 0xfb, 0x9e,
-    0x1f, 0x33, 0x66, 0xac, 0xb7, 0x83, 0xf3, 0x7a, 0xbd, 0xc8, 0x98, 0xbf,
-    0x1a, 0x6b, 0x9e, 0xf4, 0x8b, 0x60, 0x71, 0xe2, 0x9c, 0xa9, 0x48, 0x1c,
-    0x14, 0x83, 0x04, 0x03, 0x96, 0x4a, 0xa6, 0xf2, 0xae, 0xb2, 0x23, 0x42,
-    0xc0, 0x81, 0x6d, 0x7e, 0x02, 0x25, 0x7d, 0x41, 0xa8, 0x8f, 0x79, 0x0a,
-    0x13, 0x72, 0x71, 0x97, 0x42, 0xac, 0xaf, 0x76, 0x0d, 0x7b, 0x41, 0x29,
-    0x04, 0x64, 0x4d, 0x8b, 0x0b, 0x9c, 0x7f, 0xf3, 0x3a, 0xe7, 0xaa, 0x08,
-    0x06, 0xa7, 0x45, 0x4a, 0x38, 0xc8, 0x1c, 0xb5, 0x31, 0x9b, 0xf3, 0x46,
-    0x90, 0x21, 0x2b, 0x06, 0xe3, 0xb6, 0xf6, 0xab, 0x7f, 0x05, 0xe0, 0x1e,
-    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-  },
-
-  .exp_dk = {
-    0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-    0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-    0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-    0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-    0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-    0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-    0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-    0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-    0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-    0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-    0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-    0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-    0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-    0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-    0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-    0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-    0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-    0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-    0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-    0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-    0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-    0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-    0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-    0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-    0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-    0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-    0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-    0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-    0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-    0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-    0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-    0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-    0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-    0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-    0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-    0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-    0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-    0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-    0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-    0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-    0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-    0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-    0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-    0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-    0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-    0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-    0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-    0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-    0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-    0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-    0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-    0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-    0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-    0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-    0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-    0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-    0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-    0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-    0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-    0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-    0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-    0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-    0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-    0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-    0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-    0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-    0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-    0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-    0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-    0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-    0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-    0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-    0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-    0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-    0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-    0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-    0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-    0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-    0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-    0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-    0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-    0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-    0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-    0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-    0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-    0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-    0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-    0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-    0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-    0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-    0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-    0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-    0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-    0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-    0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-    0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-    0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-    0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-    0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-    0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-    0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-    0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-    0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-    0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-    0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-    0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-    0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-    0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-    0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-    0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-    0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-    0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-    0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-    0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-    0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-    0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-    0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-    0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-    0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-    0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-    0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-    0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-    0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-    0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-    0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-    0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-    0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-    0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-  },
-}, {
-  // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-  .name = "Key Generation -- ML-KEM-1024",
-
-  .seed = {
-    // d
-    0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED, 0x63, 0x88, 0x63, 0x8E,
-    0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F, 0xFD, 0xF2, 0xB6, 0x7C,
-    0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
-  },
-
-  .exp_ek = {
-    0x70, 0xE1, 0x3F, 0x30, 0x15, 0x17, 0xB5, 0xA4, 0x0D, 0x70, 0x36, 0x1F,
-    0x63, 0x09, 0x41, 0x60, 0x67, 0x64, 0x6D, 0x2B, 0x71, 0x36, 0x62, 0x6B,
-    0xCC, 0xCC, 0x17, 0x0C, 0x66, 0xCE, 0xD4, 0x90, 0xC7, 0x35, 0x34, 0x4B,
-    0x62, 0x77, 0x09, 0x7C, 0xA9, 0x14, 0x21, 0x2A, 0x29, 0x2D, 0xD1, 0x22,
-    0xFB, 0xB6, 0x9F, 0xDE, 0xCA, 0x47, 0xFA, 0xB4, 0x53, 0x2B, 0x8C, 0x80,
-    0xCE, 0xB7, 0x7F, 0x9C, 0x54, 0x3E, 0x0B, 0xF1, 0x53, 0x6D, 0x1C, 0x0C,
-    0xAE, 0x07, 0x7E, 0x2C, 0xA7, 0x86, 0x2B, 0x45, 0xA4, 0x10, 0x46, 0x9C,
-    0xC5, 0xB7, 0x06, 0xBA, 0xE0, 0x05, 0x1C, 0xB2, 0x96, 0x1D, 0xB7, 0x27,
-    0x0B, 0x75, 0xB7, 0x11, 0x69, 0x8D, 0x2B, 0x80, 0x70, 0x40, 0xD5, 0x62,
-    0x81, 0x29, 0x43, 0x6F, 0xBB, 0x58, 0xF1, 0x20, 0x3F, 0x75, 0x56, 0x14,
-    0x65, 0xF5, 0x42, 0x57, 0xE4, 0x4D, 0x33, 0xF5, 0x12, 0xD6, 0x33, 0x43,
-    0x1D, 0x00, 0xA2, 0xFB, 0x02, 0x30, 0xC9, 0xBB, 0x9C, 0xDD, 0xFC, 0x83,
-    0xBD, 0x65, 0xC9, 0x74, 0x45, 0x30, 0x21, 0x86, 0xA1, 0x72, 0x23, 0xAD,
-    0x21, 0x33, 0x28, 0x03, 0xB9, 0x09, 0xE5, 0xE5, 0x67, 0x19, 0x70, 0xBB,
-    0xB0, 0xF1, 0xC4, 0x83, 0x7B, 0xB8, 0x42, 0x73, 0xBA, 0x67, 0x5A, 0xC0,
-    0x74, 0xC5, 0x29, 0x0B, 0x41, 0x1C, 0x25, 0x00, 0x65, 0x70, 0x59, 0x33,
-    0x9D, 0xE3, 0x92, 0xF9, 0xCA, 0x30, 0x89, 0x52, 0xA2, 0x20, 0x1A, 0x58,
-    0x87, 0x67, 0xAD, 0xC0, 0x35, 0xBD, 0xF3, 0x30, 0x24, 0xEA, 0x3B, 0x9A,
-    0x83, 0xC5, 0xA0, 0xB9, 0xC5, 0x42, 0x5D, 0x14, 0x07, 0x0C, 0x81, 0xAA,
-    0xDA, 0x26, 0xBA, 0xC3, 0xFB, 0xB8, 0xD4, 0xB7, 0xCF, 0xEE, 0x03, 0x92,
-    0x37, 0x5C, 0x68, 0x42, 0x73, 0x51, 0xDF, 0xEC, 0x63, 0x60, 0x9B, 0xBB,
-    0x50, 0xB4, 0x63, 0xE0, 0x40, 0x92, 0x85, 0x70, 0x09, 0xD1, 0xE5, 0xB8,
-    0x1D, 0x70, 0x7D, 0x14, 0xB8, 0x33, 0xCD, 0x4A, 0x0B, 0x55, 0x1B, 0xAA,
-    0x13, 0xEC, 0x48, 0x8A, 0x15, 0x03, 0xB0, 0x46, 0x7E, 0xE4, 0x02, 0x3C,
-    0x3F, 0xE0, 0x32, 0xC7, 0x82, 0x25, 0x06, 0x38, 0x86, 0xE2, 0x46, 0x8E,
-    0x00, 0xF7, 0x00, 0x07, 0x2A, 0x2E, 0xC8, 0xDA, 0x6A, 0xFB, 0x20, 0x6C,
-    0x91, 0x90, 0x44, 0x33, 0xBB, 0xCC, 0xB0, 0xE7, 0x6F, 0x42, 0x46, 0x8C,
-    0x40, 0xEB, 0x5F, 0x59, 0xCB, 0x9A, 0xE1, 0xB0, 0x35, 0xE5, 0x21, 0x51,
-    0x0B, 0xF2, 0x16, 0xA1, 0xAB, 0xCB, 0x19, 0x03, 0x3B, 0x7A, 0x65, 0x88,
-    0x97, 0xC6, 0x58, 0x74, 0xD5, 0x13, 0x51, 0x83, 0x14, 0x9F, 0x97, 0x9E,
-    0x55, 0x3C, 0xCF, 0xBF, 0xA3, 0x90, 0x0C, 0xDA, 0x6F, 0x01, 0x96, 0x0B,
-    0x75, 0x15, 0x7F, 0x54, 0x53, 0xAA, 0x6E, 0x73, 0xB3, 0xED, 0x90, 0x2F,
-    0x7D, 0x7C, 0x93, 0x05, 0x97, 0x1B, 0xDF, 0x72, 0x2E, 0x29, 0x37, 0x16,
-    0x9A, 0x1B, 0xC0, 0xFA, 0xEB, 0x6C, 0x92, 0xF7, 0x15, 0x0D, 0x23, 0x30,
-    0x87, 0x7C, 0x5D, 0xC5, 0x24, 0x9A, 0xAE, 0x20, 0x30, 0x26, 0x34, 0xC5,
-    0xC5, 0xB2, 0x30, 0x53, 0x52, 0x10, 0x28, 0x12, 0x25, 0x42, 0xF4, 0x85,
-    0xA0, 0xEA, 0xC8, 0x69, 0x22, 0x37, 0x20, 0x63, 0x36, 0x51, 0xF5, 0xB2,
-    0x47, 0xC6, 0x62, 0xB3, 0x1A, 0x10, 0x53, 0x8C, 0xA7, 0x49, 0x1B, 0x14,
-    0x37, 0xAA, 0x74, 0xF4, 0x28, 0x2D, 0x12, 0x97, 0x4D, 0x9C, 0x93, 0x4D,
-    0xF2, 0x14, 0x78, 0x5B, 0x64, 0x18, 0x46, 0x8B, 0x92, 0xE5, 0x25, 0x28,
-    0xC8, 0x44, 0x7A, 0x1C, 0xA4, 0x22, 0xFA, 0x6C, 0xC8, 0x8E, 0x28, 0xB0,
-    0x59, 0xF0, 0x4B, 0x23, 0x59, 0x73, 0x23, 0xF7, 0x2F, 0x3E, 0x23, 0x36,
-    0xF8, 0x7C, 0x47, 0x90, 0x5C, 0xBA, 0x65, 0x5B, 0xB7, 0x3F, 0xC3, 0x2E,
-    0x18, 0xD4, 0xB7, 0x87, 0x05, 0xC7, 0x82, 0xEB, 0xCB, 0x43, 0xE2, 0x78,
-    0x5C, 0x82, 0xC5, 0xAF, 0x24, 0xB0, 0xE1, 0x69, 0x9C, 0xFB, 0xC0, 0x25,
-    0x74, 0x75, 0x79, 0x9A, 0x53, 0x9B, 0x11, 0xA5, 0x0F, 0x4D, 0xF2, 0xB7,
-    0xFA, 0xA2, 0x0B, 0xD8, 0x82, 0x75, 0x15, 0xCA, 0x37, 0x0F, 0x89, 0xC0,
-    0xD4, 0xC6, 0x09, 0x02, 0xF6, 0x56, 0x7C, 0xD6, 0x0B, 0x08, 0x60, 0xA5,
-    0x5B, 0xC8, 0x57, 0x2C, 0x43, 0x6C, 0x24, 0x6A, 0xC2, 0x76, 0x64, 0x4E,
-    0x7D, 0x60, 0x2A, 0xA5, 0x7C, 0x01, 0x66, 0x20, 0x18, 0x14, 0x99, 0x1C,
-    0x1B, 0xD7, 0x5C, 0x7C, 0x47, 0xC3, 0x48, 0xB6, 0x7D, 0x77, 0x61, 0x33,
-    0x86, 0x90, 0x81, 0x44, 0xEA, 0x83, 0xFF, 0x72, 0x1F, 0x9A, 0x50, 0x07,
-    0x6C, 0x51, 0x01, 0x64, 0xD1, 0x8E, 0x05, 0xD0, 0x5D, 0x98, 0x84, 0xC4,
-    0x41, 0x46, 0xA0, 0x7C, 0xCA, 0xCF, 0x89, 0x04, 0x98, 0xED, 0x1A, 0x19,
-    0xB2, 0xA1, 0x54, 0x31, 0x72, 0x9D, 0xC1, 0xF1, 0x2B, 0x7E, 0xA1, 0x0F,
-    0x9F, 0x92, 0x80, 0x62, 0xD1, 0x45, 0x4B, 0x4B, 0x9F, 0x68, 0xE5, 0x99,
-    0x90, 0x29, 0x0B, 0xE3, 0x72, 0x8B, 0x32, 0x89, 0x56, 0x93, 0x63, 0xAB,
-    0x10, 0x05, 0x13, 0x1B, 0x23, 0x81, 0xA0, 0x8C, 0xC2, 0xBF, 0x94, 0x3E,
-    0x95, 0xD5, 0xB2, 0x1B, 0xC6, 0xAA, 0xBC, 0x22, 0x73, 0x34, 0x8B, 0xC7,
-    0x2B, 0xD0, 0x93, 0xB7, 0xB5, 0x61, 0x7A, 0xE8, 0x7F, 0x60, 0x2B, 0xB9,
-    0x89, 0xE6, 0xAF, 0xC4, 0x4B, 0x81, 0x51, 0x20, 0x76, 0xA3, 0xA8, 0x76,
-    0xE0, 0xE2, 0x5F, 0x97, 0x62, 0xB4, 0x62, 0x08, 0x19, 0x85, 0x50, 0x2F,
-    0x26, 0xB2, 0x87, 0xA2, 0x93, 0x6D, 0x5B, 0x1A, 0xCF, 0xFC, 0xEC, 0x4E,
-    0xEE, 0x77, 0xA9, 0xCB, 0xA9, 0x80, 0xEB, 0x9B, 0x5F, 0xDE, 0x75, 0x53,
-    0x9F, 0x65, 0x09, 0x04, 0x67, 0x7D, 0xBE, 0x29, 0xAB, 0x8B, 0xB9, 0x18,
-    0xA3, 0x49, 0x48, 0x03, 0xEC, 0xA5, 0x9A, 0x2C, 0x32, 0xE5, 0xB5, 0xC8,
-    0x3B, 0x0B, 0x80, 0xB1, 0x10, 0x2C, 0xD7, 0xD9, 0x48, 0x2B, 0x45, 0x9B,
-    0x6B, 0x74, 0x49, 0x1E, 0xC3, 0x0C, 0x4B, 0xE7, 0x7C, 0x2B, 0x52, 0x4A,
-    0xF7, 0xB3, 0xAD, 0x1F, 0x71, 0x34, 0x1D, 0xF0, 0xA7, 0x6F, 0x25, 0x5C,
-    0x29, 0x03, 0xC8, 0x82, 0x08, 0x07, 0x93, 0x79, 0x93, 0x0A, 0x95, 0x13,
-    0xF3, 0x90, 0x12, 0x6E, 0x73, 0x2A, 0x2B, 0xB0, 0x94, 0xBF, 0xA6, 0xBF,
-    0x0A, 0x43, 0x2B, 0xCD, 0x65, 0x7D, 0xAF, 0xCB, 0x25, 0xC8, 0xBB, 0x15,
-    0xE0, 0x95, 0x5D, 0x09, 0x9B, 0x74, 0xFF, 0x1A, 0x4D, 0xE6, 0x55, 0x9C,
-    0xD6, 0x79, 0x7C, 0x38, 0xC4, 0x8C, 0x11, 0x34, 0xCA, 0x2C, 0x97, 0x92,
-    0x43, 0xF3, 0x15, 0x2A, 0xF4, 0xBB, 0xE4, 0xD7, 0xA6, 0xBC, 0x09, 0x87,
-    0x21, 0x33, 0x92, 0x0C, 0xD2, 0x3B, 0x3E, 0xF9, 0x84, 0x8C, 0xCC, 0x68,
-    0x45, 0xD6, 0x47, 0xB5, 0x38, 0x75, 0x57, 0x73, 0x65, 0x13, 0xD5, 0x85,
-    0x60, 0x84, 0x51, 0x92, 0xF9, 0x26, 0x51, 0x59, 0x93, 0x2E, 0x57, 0x2A,
-    0x88, 0xC4, 0x4E, 0x65, 0x66, 0x76, 0x0C, 0x06, 0x1C, 0x67, 0xFC, 0xB5,
-    0xBF, 0x21, 0x00, 0x95, 0xE2, 0x14, 0xDA, 0x74, 0x53, 0x57, 0xE3, 0x69,
-    0x96, 0xD8, 0xC0, 0x66, 0x31, 0x1B, 0xBC, 0x76, 0x1A, 0x1F, 0xD2, 0x52,
-    0x73, 0xD2, 0x1E, 0xAB, 0x50, 0x01, 0x05, 0x63, 0xCD, 0x64, 0x68, 0xA4,
-    0xEA, 0x83, 0x6B, 0x6D, 0x64, 0xBD, 0x2B, 0xD7, 0x6D, 0xBE, 0x35, 0x82,
-    0xD5, 0x73, 0x6A, 0x60, 0x5A, 0x55, 0x09, 0xFC, 0x28, 0x78, 0x9B, 0x56,
-    0xB8, 0x84, 0xAE, 0x9A, 0x60, 0x41, 0x5F, 0x55, 0x67, 0x4B, 0xE6, 0x01,
-    0x57, 0x6C, 0x7C, 0xEE, 0x58, 0x14, 0x3B, 0xF0, 0x54, 0x80, 0x6A, 0xBC,
-    0xB3, 0x45, 0xA2, 0x56, 0xCB, 0xC4, 0x54, 0xE3, 0x43, 0xF3, 0xCC, 0x7A,
-    0xDE, 0x65, 0x56, 0x2F, 0xD2, 0x9E, 0xB2, 0x59, 0x73, 0x7B, 0xB3, 0xCF,
-    0x96, 0x49, 0xBD, 0xEA, 0x28, 0x3F, 0xB0, 0x72, 0x65, 0x67, 0x7C, 0x98,
-    0x08, 0xD1, 0x31, 0x19, 0xC0, 0xA2, 0xAD, 0xF7, 0x45, 0xDE, 0x69, 0x75,
-    0xF4, 0x56, 0x2C, 0xD6, 0x15, 0x57, 0xB3, 0x96, 0x5D, 0x2B, 0x07, 0x2F,
-    0x00, 0x0A, 0xA7, 0xE0, 0xA3, 0x57, 0xE1, 0x25, 0x3E, 0xAF, 0xEA, 0x7F,
-    0xDF, 0xCC, 0x92, 0xFA, 0x87, 0x63, 0x0D, 0xD2, 0x27, 0x6C, 0xE4, 0x2E,
-    0x82, 0x0B, 0x69, 0xD1, 0xFC, 0x2E, 0x47, 0xD5, 0xC4, 0x98, 0xA5, 0x5B,
-    0x3B, 0x29, 0xC3, 0x4E, 0x64, 0x90, 0x3D, 0x04, 0x7A, 0xB1, 0xC0, 0x40,
-    0x24, 0x95, 0x8F, 0x70, 0x11, 0x95, 0xF5, 0xD1, 0x3E, 0xC6, 0x70, 0x6B,
-    0x84, 0x48, 0x50, 0x3A, 0x54, 0x99, 0x22, 0xA5, 0x8A, 0x24, 0xB6, 0x7C,
-    0x93, 0x63, 0x27, 0x56, 0xB7, 0x7D, 0x22, 0x54, 0x07, 0x31, 0x61, 0x71,
-    0xDE, 0xEC, 0x56, 0x71, 0x44, 0x35, 0xCF, 0x94, 0xCC, 0xF4, 0x59, 0x9E,
-    0x00, 0xD1, 0x0E, 0x56, 0x96, 0x22, 0xBA, 0xDA, 0x82, 0x0C, 0x45, 0x2F,
-    0x25, 0x42, 0xAD, 0xF0, 0x87, 0x65, 0xCA, 0x93, 0xAE, 0x38, 0xEB, 0x02,
-    0x5D, 0xE3, 0x1C, 0xFF, 0x79, 0x74, 0x54, 0x9A, 0x78, 0x25, 0xA8, 0x31,
-    0xDD, 0x05, 0x4E, 0x87, 0xB8, 0x4C, 0x5F, 0x25, 0x47, 0xFF, 0x47, 0xB4,
-    0x6F, 0x88, 0xC9, 0x9F, 0x15, 0x48, 0xE9, 0x33, 0xA6, 0xF4, 0xD8, 0x7F,
-    0x1A, 0x4A, 0x1B, 0x00, 0xE3, 0x9E, 0x02, 0xD6, 0x0E, 0x51, 0xEB, 0x60,
-    0x3C, 0x1C, 0x0D, 0x80, 0x7A, 0xCD, 0xAB, 0x08, 0xBA, 0xA2, 0xB9, 0x98,
-    0x69, 0xB7, 0x5C, 0xA2, 0xC4, 0xB9, 0x63, 0x68, 0xB5, 0x17, 0x80, 0xBD,
-    0x1E, 0xC7, 0x5B, 0x11, 0x0B, 0x9F, 0xA6, 0x65, 0x56, 0x87, 0x6C, 0x5F,
-    0x48, 0x79, 0x7D, 0x09, 0x01, 0x38, 0xF7, 0x54, 0xAE, 0x30, 0x53, 0x3D,
-    0x36, 0xAA, 0x44, 0xB9, 0xB1, 0x70, 0x2A, 0x6A, 0x8A, 0x56, 0x62, 0x6B,
-    0xF0, 0x45, 0x1A, 0x37, 0xA7, 0xAC, 0x1A, 0x33, 0x70, 0x76, 0xE5, 0x1E,
-    0x0A, 0x6B, 0x03, 0x00, 0xC2, 0xC7, 0x90, 0xA4, 0x43, 0x7E, 0xA2, 0x8D,
-    0x7E, 0xC9, 0x8C, 0x41, 0x9B, 0x37, 0xD6, 0xAA, 0x97, 0x04, 0x17, 0x43,
-    0x5F, 0x91, 0xBE, 0xDC, 0x2B, 0x1F, 0x4B, 0xC8, 0x15, 0x8A, 0x51, 0xB1,
-    0xF4, 0x71, 0x51, 0x6F, 0xE8, 0x24, 0x28, 0x7C, 0x89, 0x6B, 0x89, 0x1B,
-    0x49, 0xF2, 0x54, 0xDD, 0x36, 0x35, 0x9B, 0x89, 0xC8, 0x24, 0xEB, 0x3F,
-    0x62, 0x48, 0x02, 0x7F, 0xBB, 0xAD, 0x4C, 0xF2, 0x91, 0x18, 0xCB, 0x50,
-    0xEB, 0xB6, 0x25, 0xA3, 0x7C, 0x53, 0x7A, 0x02, 0x23, 0xF0, 0xEB, 0x70,
-    0x85, 0xB5, 0xC7, 0xEC, 0x60, 0x75, 0x70, 0xDB, 0x91, 0x85, 0xD5, 0x99,
-    0x02, 0xBC, 0x26, 0xC6, 0x54, 0xA2, 0x80, 0x4C, 0x0D, 0x94, 0x67, 0x93,
-    0xD8, 0xA2, 0x14, 0x82, 0xAC, 0x4F, 0x05, 0xE9, 0x01, 0x62, 0x60, 0x33,
-    0x1D, 0xCC, 0x58, 0xBC, 0x66, 0xAF, 0x3C, 0xA7, 0x58, 0x54, 0x40, 0x21,
-    0x6A, 0xA0, 0x26, 0x3B, 0x2A, 0x72, 0x5E, 0x08, 0x0F, 0x6F, 0x9C, 0x5B,
-    0x6A, 0x9C, 0x9D, 0xA2, 0x93, 0x55, 0x18, 0x9B, 0x4B, 0x95, 0xB1, 0x37,
-    0xD1, 0x22, 0x5F, 0x25, 0x2A, 0xC7, 0x97, 0xB0, 0x64, 0x6C, 0xAC, 0x52,
-    0x16, 0x4B, 0x59, 0x72, 0xA9, 0x92, 0x65, 0xD3, 0x47, 0xFC, 0x7C, 0x35,
-    0x91, 0xD1, 0x5F, 0xFE, 0x68, 0x1C, 0x06, 0xD4, 0x38, 0xCC, 0xEB, 0x60,
-    0xBB, 0x63, 0x10, 0xB7, 0x95, 0x32, 0x89, 0x72, 0x0E, 0x2C, 0x72, 0x87,
-    0x30, 0x05, 0x23, 0x37, 0xAC, 0xA7, 0xC8, 0x52, 0x1A, 0xB4, 0x4F, 0x1E,
-    0x2A, 0x04, 0x9B, 0x83, 0xE0, 0x77, 0x4C, 0x96, 0xCD, 0x8C, 0x87, 0x6F,
-    0xA6, 0x75, 0xD0, 0x92, 0x39, 0x77, 0x27, 0x1B,
-  },
-
-  .exp_dk = {
-    0x8A, 0xD0, 0xB5, 0xF0, 0x9A, 0x25, 0xAA, 0x93, 0x5D, 0xD9, 0xDA, 0x34,
-    0xAB, 0x82, 0xCA, 0x75, 0xA1, 0x2D, 0x66, 0xE9, 0x9C, 0xF4, 0x8B, 0xCA,
-    0x45, 0xB9, 0xB2, 0xDB, 0x44, 0x1B, 0xC2, 0x97, 0x1B, 0xDC, 0x99, 0x22,
-    0xB5, 0xF8, 0xBC, 0x3C, 0x06, 0x78, 0x54, 0x67, 0x59, 0x07, 0x3C, 0xB8,
-    0x8E, 0x26, 0xBA, 0xD1, 0xB1, 0xB3, 0xA4, 0x64, 0x6A, 0x65, 0x29, 0xC6,
-    0x32, 0xEA, 0xA3, 0x47, 0x73, 0x4A, 0x3B, 0xE5, 0x83, 0xD4, 0x71, 0x78,
-    0x09, 0x4C, 0x4A, 0x67, 0x0C, 0xBC, 0x41, 0xEC, 0x06, 0x89, 0x76, 0x56,
-    0x68, 0x54, 0x2E, 0x6F, 0x15, 0xA7, 0xD5, 0x86, 0xC9, 0xE2, 0x6A, 0x6A,
-    0x03, 0xC7, 0x14, 0x69, 0xC2, 0xC5, 0x3F, 0x7B, 0x14, 0x1B, 0x23, 0x2D,
-    0x86, 0x21, 0x6A, 0x25, 0xC7, 0xA8, 0xF3, 0x68, 0x52, 0x85, 0x8C, 0x07,
-    0xA9, 0x52, 0x4E, 0xE1, 0x7B, 0xA6, 0x34, 0x0A, 0xA2, 0xA2, 0x15, 0xC1,
-    0xEA, 0x85, 0x21, 0x67, 0xB6, 0x89, 0x1C, 0xC1, 0x66, 0xC2, 0xFA, 0x13,
-    0xA0, 0x27, 0x0A, 0x22, 0x98, 0x34, 0x13, 0xE0, 0xAC, 0xC4, 0x44, 0xBF,
-    0x40, 0xE2, 0x8C, 0x45, 0xE1, 0x4E, 0x07, 0x40, 0x4F, 0x62, 0x99, 0x63,
-    0x69, 0x59, 0x7F, 0x10, 0xFC, 0xC1, 0x80, 0xEC, 0xAC, 0xAD, 0x1A, 0x67,
-    0x19, 0xAB, 0x9F, 0x1B, 0x44, 0x7A, 0xE1, 0x9A, 0x2C, 0xB0, 0x2A, 0x7D,
-    0x04, 0x20, 0x61, 0x72, 0x16, 0x8C, 0x4F, 0x0A, 0x99, 0xBA, 0xFA, 0x93,
-    0x2D, 0x66, 0x49, 0xE8, 0x94, 0xA8, 0xF0, 0x57, 0x7B, 0x81, 0xC6, 0x64,
-    0x83, 0xC5, 0xB5, 0xCF, 0x60, 0xAE, 0x75, 0xA4, 0x44, 0x52, 0x6A, 0x9B,
-    0x36, 0x74, 0x32, 0x5F, 0xBA, 0x38, 0xF5, 0x32, 0x96, 0x42, 0x1A, 0x78,
-    0x50, 0x11, 0xC1, 0xDD, 0xB3, 0xA6, 0x99, 0x77, 0x45, 0xDB, 0x83, 0xCD,
-    0x58, 0x3C, 0x0C, 0x41, 0x77, 0xC7, 0x97, 0xD4, 0x0A, 0x4F, 0x69, 0x9F,
-    0x1F, 0x40, 0xC5, 0x41, 0x3A, 0xC4, 0xE4, 0x23, 0x73, 0x49, 0x2B, 0x6A,
-    0x2C, 0x6A, 0x40, 0x6D, 0x43, 0x7F, 0x42, 0x57, 0x0B, 0x5E, 0x94, 0x9E,
-    0xF4, 0x35, 0x0D, 0xEA, 0x79, 0x0C, 0xFE, 0xB7, 0x2D, 0x12, 0x87, 0x51,
-    0x7F, 0xE3, 0x27, 0x3D, 0x3C, 0xA6, 0x5A, 0x13, 0xCA, 0x6E, 0x23, 0xC5,
-    0x7B, 0xF0, 0x7D, 0xA0, 0x4B, 0x85, 0x1C, 0xF3, 0xAF, 0xA1, 0x8B, 0xAF,
-    0x5E, 0xF0, 0x20, 0x79, 0x28, 0x57, 0xA9, 0xE7, 0x21, 0xF0, 0x1B, 0x9F,
-    0xEA, 0x7B, 0x61, 0x2E, 0x4C, 0x6E, 0x29, 0x07, 0x93, 0x66, 0xB0, 0x22,
-    0x86, 0x88, 0xBE, 0x2A, 0x06, 0x7F, 0xBE, 0x92, 0x84, 0x2D, 0xD2, 0x80,
-    0xB3, 0xC7, 0x4D, 0xFA, 0xB7, 0x61, 0xE6, 0x13, 0xA8, 0x60, 0x4C, 0x47,
-    0x6E, 0x15, 0x46, 0x66, 0x85, 0xC6, 0x95, 0xAC, 0x35, 0x79, 0x1A, 0x91,
-    0x59, 0x94, 0x2F, 0x60, 0x17, 0x0C, 0xA2, 0x14, 0xC7, 0xC0, 0x9B, 0x1A,
-    0x4B, 0x1B, 0xCC, 0x4F, 0x4C, 0xC6, 0x0D, 0xF0, 0x1A, 0x10, 0x19, 0x15,
-    0xA9, 0xA2, 0xBC, 0x55, 0x31, 0x19, 0x66, 0x50, 0x32, 0xDC, 0xD9, 0x47,
-    0x6F, 0xBA, 0x7B, 0xB0, 0x71, 0x57, 0xD3, 0x3C, 0x9C, 0x8E, 0xFA, 0x6B,
-    0xD0, 0xAC, 0x38, 0xC1, 0xAC, 0x26, 0x5F, 0xB5, 0x18, 0x57, 0xD0, 0x15,
-    0x17, 0x61, 0x53, 0x26, 0xCA, 0x0E, 0x08, 0x65, 0x0B, 0xA6, 0xFA, 0x40,
-    0x83, 0x2C, 0x7B, 0x4C, 0x41, 0xB6, 0x44, 0x71, 0x60, 0x22, 0xB6, 0x52,
-    0xB1, 0x92, 0x7D, 0x55, 0xC9, 0xB3, 0x7F, 0xE2, 0x5F, 0x1A, 0xB6, 0x7A,
-    0x9A, 0x03, 0xC7, 0x00, 0x8C, 0x84, 0xB0, 0x7C, 0x49, 0x26, 0xB6, 0x38,
-    0x1E, 0x40, 0xCF, 0xD4, 0x41, 0x04, 0x12, 0x35, 0x18, 0x74, 0x16, 0xCE,
-    0xC3, 0x66, 0xCA, 0x6F, 0xB7, 0x6F, 0xA0, 0xAB, 0x6E, 0x32, 0x8A, 0x26,
-    0x41, 0xFC, 0x47, 0xDC, 0xD7, 0x6E, 0x91, 0xCA, 0x94, 0x31, 0xE1, 0x9B,
-    0xFF, 0x02, 0xCE, 0x62, 0x28, 0xC2, 0x33, 0x63, 0x82, 0xF8, 0xA1, 0x0E,
-    0x9E, 0xE2, 0xC8, 0xF1, 0x75, 0x93, 0x90, 0xA2, 0x00, 0x24, 0xA1, 0x5B,
-    0x3B, 0x09, 0x0C, 0x13, 0x90, 0xCA, 0x03, 0x43, 0x79, 0x72, 0x84, 0x24,
-    0x6B, 0xD8, 0x94, 0x35, 0x07, 0xB7, 0xA6, 0xB7, 0x1F, 0xC3, 0x3A, 0x03,
-    0xB7, 0xA8, 0x83, 0x66, 0xE4, 0xAF, 0xED, 0x51, 0x57, 0x39, 0xE5, 0xC6,
-    0x9F, 0x8A, 0x26, 0x6E, 0x4A, 0x1F, 0x53, 0xD7, 0x39, 0x30, 0xE9, 0x87,
-    0x55, 0x69, 0x31, 0x2B, 0x27, 0x03, 0x7E, 0x5C, 0x7F, 0x85, 0x21, 0x00,
-    0xC2, 0xBA, 0x36, 0x48, 0xB1, 0xB9, 0xC1, 0xB1, 0x49, 0xF6, 0x25, 0x0E,
-    0x0A, 0x6B, 0x06, 0x52, 0x13, 0x13, 0x4F, 0x30, 0x25, 0x69, 0x75, 0x5B,
-    0x8C, 0x5C, 0x4F, 0xFC, 0x68, 0x0B, 0xF7, 0x81, 0x18, 0x45, 0x34, 0x00,
-    0x35, 0xF1, 0x70, 0xB0, 0x68, 0xBA, 0x67, 0xA4, 0xC3, 0xB0, 0x16, 0x6D,
-    0x03, 0xCC, 0x82, 0x61, 0x84, 0x01, 0x90, 0xA2, 0x0F, 0x9A, 0x3B, 0x1E,
-    0xF4, 0x65, 0xC2, 0xF2, 0x18, 0x2D, 0xA8, 0xDA, 0x8D, 0x3B, 0x3C, 0x8C,
-    0xB1, 0x29, 0x15, 0xF7, 0xD9, 0x3E, 0x04, 0xD8, 0x84, 0x0C, 0x35, 0x67,
-    0x25, 0x5A, 0x7B, 0xD6, 0xD4, 0x33, 0xCF, 0x10, 0x68, 0xD8, 0x84, 0x52,
-    0xCF, 0xC1, 0x1F, 0x99, 0x1B, 0x7C, 0xE3, 0x79, 0x27, 0xD6, 0xCA, 0xAE,
-    0x88, 0x10, 0x74, 0x2F, 0x42, 0x14, 0x8B, 0x89, 0x6E, 0xC4, 0xEB, 0xB5,
-    0x34, 0x03, 0x86, 0x31, 0x5B, 0x2C, 0x1E, 0x2B, 0x43, 0x91, 0x5C, 0x04,
-    0x54, 0x9C, 0xC8, 0xC1, 0x9A, 0xB4, 0x0E, 0x3B, 0x7C, 0x31, 0x1B, 0x42,
-    0x61, 0x10, 0xA9, 0xBB, 0xB1, 0x8D, 0x3B, 0x99, 0x2A, 0x42, 0xC0, 0x18,
-    0x92, 0x90, 0xBE, 0x67, 0x3A, 0x39, 0x7C, 0x40, 0x90, 0x44, 0x3B, 0x88,
-    0xC5, 0xD5, 0xC5, 0x65, 0xA1, 0x0F, 0xEA, 0x05, 0x60, 0x3D, 0x36, 0x24,
-    0x4A, 0x4A, 0xA8, 0xE9, 0x25, 0x5C, 0xF1, 0x84, 0xAE, 0x69, 0x53, 0x5A,
-    0x83, 0x99, 0xC1, 0xC6, 0xF7, 0x6C, 0xF2, 0x34, 0x2A, 0xDF, 0xEA, 0x6A,
-    0x44, 0x7B, 0xB4, 0x50, 0x1B, 0x9A, 0x6C, 0x44, 0x59, 0x3E, 0xB0, 0x43,
-    0xE7, 0xA5, 0x50, 0x2F, 0x58, 0x6C, 0xF3, 0x40, 0x7D, 0xEB, 0x7A, 0x0F,
-    0xC3, 0x2B, 0x3F, 0x46, 0xF1, 0x24, 0x5C, 0x55, 0x96, 0xE0, 0xF1, 0xBE,
-    0xD9, 0x37, 0x20, 0x7C, 0x45, 0x09, 0xE1, 0xD8, 0x98, 0x5B, 0xE7, 0x45,
-    0xFD, 0x69, 0xBF, 0x44, 0x80, 0x92, 0x43, 0x30, 0x28, 0xBE, 0x25, 0x95,
-    0x90, 0x33, 0x11, 0x47, 0x95, 0x86, 0xA3, 0x4B, 0x2D, 0x49, 0x10, 0x74,
-    0x10, 0xBC, 0x4B, 0xD2, 0x96, 0x53, 0x17, 0xFC, 0x76, 0x35, 0x2B, 0x63,
-    0x8D, 0xF3, 0xB3, 0xA3, 0x15, 0x32, 0x50, 0x26, 0x80, 0x9E, 0x3B, 0xC4,
-    0x60, 0x8C, 0x0B, 0x2C, 0xB8, 0x4D, 0xF0, 0xC9, 0x5B, 0xC0, 0x52, 0x70,
-    0x7F, 0xC1, 0xA3, 0x77, 0xB2, 0xB4, 0x65, 0xEB, 0x7A, 0x5D, 0x64, 0x4A,
-    0xB4, 0x27, 0x8D, 0xDC, 0xE5, 0xB6, 0x1E, 0x2B, 0xB3, 0xA7, 0x10, 0x52,
-    0x55, 0x5C, 0xB3, 0xBA, 0xC6, 0x93, 0xEF, 0x02, 0x5F, 0xF0, 0x03, 0x53,
-    0xFB, 0x76, 0x94, 0x5B, 0x8A, 0xA3, 0xE9, 0x95, 0x0F, 0x92, 0x73, 0x81,
-    0x87, 0x91, 0xCC, 0xAD, 0x56, 0x88, 0x46, 0x58, 0x14, 0x2A, 0x2B, 0x4D,
-    0xF3, 0xC5, 0x7E, 0xCA, 0x13, 0xAD, 0x44, 0xB4, 0x9B, 0x63, 0x46, 0xC6,
-    0x3E, 0xE8, 0x90, 0x78, 0x58, 0x9E, 0x9E, 0xB9, 0xA9, 0x80, 0x4A, 0x03,
-    0xBF, 0x7A, 0x27, 0x6F, 0x86, 0xB9, 0x67, 0x6C, 0x58, 0xD3, 0xE7, 0x1D,
-    0x2C, 0x87, 0x70, 0x80, 0x4A, 0x61, 0x59, 0x21, 0x78, 0xB4, 0x49, 0xC7,
-    0x95, 0x5B, 0xBE, 0x8C, 0xF4, 0x2F, 0x31, 0x67, 0x25, 0xE3, 0xB1, 0x6D,
-    0x55, 0xB5, 0x27, 0xCF, 0xB2, 0x32, 0x68, 0x1B, 0x21, 0xB2, 0xCB, 0x2F,
-    0x30, 0xAC, 0x76, 0x01, 0x5B, 0xB5, 0x41, 0x6A, 0x04, 0x11, 0xC1, 0x74,
-    0x58, 0x92, 0x41, 0x2E, 0x68, 0x3A, 0x98, 0xD7, 0x36, 0xED, 0x1A, 0x4C,
-    0xD9, 0x80, 0x61, 0x7D, 0x08, 0x21, 0xC2, 0xAB, 0x02, 0x82, 0x07, 0x0A,
-    0x61, 0x1A, 0x11, 0xD1, 0x97, 0x01, 0xFB, 0xD5, 0x5A, 0x21, 0x27, 0xB3,
-    0x24, 0xE6, 0x90, 0x1D, 0x84, 0x98, 0x6C, 0x04, 0x64, 0xDE, 0x71, 0x20,
-    0xAF, 0x45, 0x10, 0xAF, 0x59, 0x1D, 0xD9, 0xBB, 0x79, 0x47, 0x9C, 0x5F,
-    0xA8, 0x87, 0x14, 0xC6, 0xA9, 0x97, 0x14, 0xF7, 0x6A, 0x1E, 0x40, 0x2C,
-    0x8F, 0x38, 0x4A, 0x4E, 0xE6, 0xBC, 0xD4, 0x15, 0x00, 0x72, 0x4C, 0xC1,
-    0x79, 0x3A, 0xBF, 0xD8, 0xD3, 0xC2, 0xF3, 0x20, 0x39, 0x71, 0x34, 0xB0,
-    0x0F, 0x76, 0x2D, 0xBA, 0x85, 0xA2, 0x3A, 0xF1, 0x55, 0xE6, 0xCC, 0x03,
-    0x73, 0x80, 0xC1, 0xDD, 0x64, 0xA9, 0x73, 0xDB, 0x35, 0xB7, 0x44, 0x70,
-    0x44, 0x8B, 0x24, 0x21, 0x20, 0x62, 0x76, 0x47, 0x87, 0xE5, 0xA9, 0x3A,
-    0x48, 0x80, 0x71, 0x71, 0xA7, 0x71, 0x5C, 0xFC, 0x89, 0xBC, 0xBC, 0x9E,
-    0x14, 0x18, 0x86, 0xF8, 0x07, 0xA1, 0xF9, 0xD6, 0x84, 0xC8, 0x42, 0x6F,
-    0x01, 0x22, 0x88, 0x7D, 0x9C, 0x4C, 0x27, 0xEA, 0x69, 0xCC, 0x15, 0x1B,
-    0x4D, 0x49, 0xB5, 0x1E, 0x5A, 0x4E, 0xAA, 0xA5, 0xAD, 0x06, 0xAB, 0xA8,
-    0x6D, 0xF9, 0x42, 0xE9, 0x86, 0xA5, 0xD5, 0x79, 0x20, 0x80, 0xFC, 0x48,
-    0x03, 0x96, 0xB3, 0x94, 0x86, 0x68, 0xFB, 0x38, 0x2C, 0xC8, 0xFC, 0x15,
-    0x47, 0x48, 0xCB, 0x30, 0xB7, 0x64, 0x1F, 0x02, 0x70, 0xC8, 0x34, 0x38,
-    0xB4, 0xFC, 0x3D, 0x19, 0x01, 0x26, 0x58, 0x80, 0x40, 0x51, 0x77, 0xBC,
-    0x7F, 0x44, 0x78, 0x82, 0x51, 0xAB, 0xC4, 0x74, 0x27, 0x35, 0x31, 0x21,
-    0x2A, 0x66, 0x27, 0x9E, 0x70, 0x33, 0x7A, 0x23, 0x09, 0xFD, 0xF4, 0x9E,
-    0x05, 0x9B, 0xBD, 0xAF, 0x49, 0x73, 0xA5, 0x37, 0x7A, 0x4D, 0x51, 0x7B,
-    0xA7, 0x55, 0x70, 0x2C, 0x37, 0xCC, 0x35, 0x56, 0x85, 0x40, 0x4C, 0x95,
-    0x2F, 0xB6, 0x7E, 0x04, 0x19, 0xC7, 0x8D, 0x15, 0x84, 0xD0, 0x94, 0x92,
-    0x54, 0xD0, 0x49, 0x52, 0xF7, 0x24, 0x3B, 0xF1, 0x40, 0x28, 0x03, 0xC9,
-    0xFC, 0x73, 0x73, 0x25, 0x88, 0x13, 0x78, 0xCA, 0x77, 0xEE, 0xF5, 0xC4,
-    0x15, 0xFB, 0x03, 0x7D, 0x68, 0x9A, 0x58, 0x54, 0xA1, 0xD2, 0x4B, 0x65,
-    0x27, 0xA5, 0x9B, 0x9B, 0x16, 0x95, 0x93, 0x84, 0x35, 0x8C, 0x42, 0x3C,
-    0x79, 0x64, 0x5C, 0xCF, 0x31, 0x33, 0xE2, 0x1B, 0x4B, 0x64, 0x95, 0x7B,
-    0x14, 0xF6, 0x3F, 0x2A, 0xA2, 0x63, 0x57, 0xB1, 0xC2, 0x62, 0xF2, 0xA9,
-    0x0F, 0x7C, 0xCC, 0x2A, 0x15, 0x93, 0x69, 0x99, 0xB0, 0xA1, 0xB4, 0x98,
-    0xAB, 0x3B, 0x32, 0x43, 0x30, 0x32, 0xC9, 0xCA, 0x23, 0x08, 0x1C, 0x55,
-    0xD3, 0x1C, 0xAD, 0x36, 0xE9, 0x0C, 0x1C, 0xE0, 0xB5, 0xFC, 0x24, 0x7C,
-    0xE8, 0xC8, 0x43, 0xF2, 0x88, 0x35, 0x24, 0xB6, 0x64, 0xFA, 0xC1, 0xB2,
-    0x0B, 0xE6, 0x02, 0xA1, 0x0A, 0xAF, 0x65, 0x73, 0x86, 0x80, 0xBB, 0x10,
-    0x25, 0x44, 0x26, 0xF9, 0xCB, 0x09, 0xA1, 0x95, 0x4D, 0xB7, 0x65, 0x56,
-    0x22, 0x30, 0x8F, 0xAE, 0xF5, 0x05, 0xAC, 0xB4, 0x97, 0x55, 0x4A, 0x8F,
-    0xCF, 0xA9, 0x6A, 0x85, 0x25, 0x5A, 0xD8, 0x46, 0x54, 0x20, 0x13, 0xB8,
-    0x41, 0x59, 0x51, 0xBD, 0xD4, 0x5C, 0x01, 0x93, 0x1E, 0xBE, 0x58, 0x3E,
-  },
-}};
-
-static void test_pke1024_keygen(void) {
-  for (size_t i = 0; i < sizeof(PKE1024_KEYGEN_TESTS)/sizeof(PKE1024_KEYGEN_TESTS[0]); i++) {
-    // generate pke1024 ek and dk from seed
-    uint8_t got_ek[PKE1024_EK_SIZE] = { 0 }, got_dk[PKE1024_DK_SIZE] = { 0 };
-    pke1024_keygen(got_ek, got_dk, PKE1024_KEYGEN_TESTS[i].seed);
-
-    // check for expected ek
-    if (memcmp(&got_ek, &(PKE1024_KEYGEN_TESTS[i].exp_ek), sizeof(got_ek))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ek", PKE1024_KEYGEN_TESTS[i].name);
-      fail_test(__func__, name, got_ek, sizeof(got_ek), PKE1024_KEYGEN_TESTS[i].exp_ek, sizeof(got_ek));
-    }
-
-    // check for expected dk
-    if (memcmp(&got_dk, &(PKE1024_KEYGEN_TESTS[i].exp_dk), sizeof(got_dk))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - dk", PKE1024_KEYGEN_TESTS[i].name);
-      fail_test(__func__, name, got_dk, sizeof(got_dk), PKE1024_KEYGEN_TESTS[i].exp_dk, sizeof(got_dk));
-    }
-  }
-}
-
-static const struct {
-  const char *name; // test name
-  const uint8_t ek[PKE1024_EK_SIZE]; // test ek (1184 bytes)
-  const uint8_t m[32]; // test message (32 bytes)
-  const uint8_t enc_rand[32]; // test randomness (32 bytes)
-  const uint8_t exp[PKE1024_CT_SIZE]; // expected ciphertext (1408 bytes)
-} PKE1024_ENCRYPT_TESTS[] = {{
-  .name = "rand = 0, message = 1",
-  .ek = {
-    0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
-    0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
-    0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
-    0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
-    0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
-    0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
-    0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
-    0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
-    0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
-    0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
-    0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
-    0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
-    0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
-    0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
-    0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
-    0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
-    0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
-    0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
-    0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
-    0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
-    0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
-    0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
-    0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
-    0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
-    0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
-    0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
-    0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
-    0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
-    0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
-    0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
-    0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
-    0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
-    0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
-    0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
-    0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
-    0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
-    0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
-    0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
-    0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
-    0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
-    0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
-    0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
-    0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
-    0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
-    0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
-    0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
-    0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
-    0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
-    0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
-    0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
-    0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
-    0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
-    0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
-    0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
-    0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
-    0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
-    0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
-    0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
-    0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
-    0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
-    0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
-    0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
-    0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
-    0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
-    0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
-    0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
-    0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
-    0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
-    0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
-    0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
-    0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
-    0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
-    0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
-    0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
-    0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
-    0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
-    0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
-    0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
-    0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
-    0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
-    0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
-    0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
-    0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
-    0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
-    0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
-    0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
-    0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
-    0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
-    0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
-    0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
-    0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
-    0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
-    0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
-    0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
-    0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
-    0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
-    0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
-    0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
-    0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
-    0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
-    0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
-    0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
-    0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
-    0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
-    0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
-    0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
-    0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
-    0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
-    0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
-    0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
-    0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
-    0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
-    0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
-    0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
-    0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
-    0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
-    0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
-    0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
-    0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
-    0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
-    0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
-    0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
-    0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
-    0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
-    0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
-    0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
-    0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
-    0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
-    0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-    0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-    0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-  },
-
-  .m = { 1, 0 },
-  .enc_rand = { 0 },
-
-  .exp = {
-    0x33, 0x16, 0xf7, 0x1f, 0xea, 0x93, 0xec, 0xb5, 0xb3, 0x08, 0x5e, 0xcb,
-    0x55, 0x19, 0x8f, 0x6f, 0x69, 0x3c, 0x67, 0x3e, 0xac, 0xa0, 0xfd, 0xa5,
-    0xce, 0x9f, 0x08, 0xcd, 0x7c, 0x2d, 0xc9, 0x05, 0x50, 0x9d, 0xb0, 0xec,
-    0x66, 0x03, 0xff, 0x9d, 0xf8, 0xee, 0xb0, 0x4d, 0xdf, 0x73, 0x39, 0x19,
-    0xe0, 0xd8, 0x68, 0xfb, 0x2c, 0xd7, 0x0f, 0x96, 0x5d, 0x9d, 0x10, 0xa5,
-    0xbf, 0x4b, 0xc1, 0xd8, 0x5e, 0x0d, 0x9b, 0x81, 0xa3, 0xcd, 0x08, 0x47,
-    0x64, 0x2d, 0xf5, 0xb3, 0x77, 0xc2, 0x49, 0xe2, 0xd6, 0x10, 0xfc, 0xa2,
-    0xfa, 0x96, 0x04, 0x43, 0xbc, 0x20, 0x32, 0x52, 0xdb, 0x52, 0xd9, 0x11,
-    0x91, 0x4b, 0x4f, 0xdd, 0xd2, 0xfb, 0xe6, 0xb2, 0x3c, 0xc8, 0xff, 0x5c,
-    0x65, 0xe5, 0x1d, 0x1f, 0x46, 0x9a, 0x57, 0x08, 0x20, 0x38, 0xc6, 0xa0,
-    0x36, 0xbe, 0xac, 0x2a, 0xe6, 0x83, 0x87, 0xd6, 0x31, 0x99, 0xc1, 0x62,
-    0x8d, 0x68, 0xbc, 0xf8, 0x8d, 0x6c, 0x46, 0x3d, 0x0d, 0x20, 0xf6, 0xb0,
-    0x87, 0xab, 0x4e, 0x25, 0xee, 0xd9, 0x79, 0x3c, 0x2b, 0xe2, 0x1b, 0xdc,
-    0xe7, 0xd8, 0xa1, 0xb8, 0xe5, 0x8a, 0x29, 0xa3, 0x95, 0xcb, 0x47, 0xe4,
-    0x32, 0x54, 0x24, 0x3c, 0xd5, 0xbb, 0x6f, 0x79, 0x0d, 0xfc, 0x61, 0x28,
-    0x86, 0x8f, 0xad, 0x2e, 0x2b, 0x81, 0xf4, 0x45, 0xf5, 0x2a, 0xc6, 0x94,
-    0x04, 0xda, 0xd2, 0xd2, 0x35, 0xb7, 0xd3, 0xb2, 0x86, 0x65, 0xa9, 0xd1,
-    0xa4, 0xd2, 0x33, 0x25, 0xf5, 0xb9, 0xc9, 0xc9, 0x6a, 0x88, 0x11, 0x46,
-    0x97, 0x30, 0x21, 0x51, 0x2e, 0x4d, 0x01, 0x24, 0x2a, 0x02, 0x28, 0x2a,
-    0xbb, 0x57, 0x11, 0x1e, 0x7c, 0xd2, 0x44, 0x47, 0x86, 0x50, 0x4d, 0x78,
-    0x91, 0x7d, 0x86, 0x03, 0xb6, 0x23, 0x95, 0x80, 0x18, 0x00, 0x5e, 0x3f,
-    0xb3, 0xa8, 0x3b, 0xb4, 0xd7, 0x5f, 0x47, 0xd8, 0xaa, 0x1f, 0x05, 0x40,
-    0x25, 0xad, 0x0d, 0xba, 0x91, 0x57, 0x8a, 0x69, 0x4d, 0xf8, 0xfc, 0x1f,
-    0x12, 0x6f, 0xc7, 0xc2, 0x3d, 0x62, 0xdc, 0x2f, 0x3b, 0x1d, 0xcf, 0x09,
-    0xb9, 0x15, 0x6d, 0x4a, 0xf4, 0x87, 0x2b, 0xd0, 0x80, 0x80, 0x89, 0x37,
-    0xb3, 0x29, 0x3c, 0x5e, 0xf5, 0xa5, 0x3b, 0xca, 0xff, 0x3f, 0x8c, 0x6f,
-    0xb3, 0x29, 0x80, 0xf0, 0x35, 0x5b, 0x9f, 0xf9, 0x50, 0x15, 0xb0, 0xc4,
-    0x23, 0x07, 0x1a, 0x6f, 0xd2, 0x8b, 0x7c, 0xd0, 0x16, 0xc2, 0xaa, 0x36,
-    0xd3, 0xda, 0xf9, 0xd0, 0x92, 0x18, 0xea, 0xff, 0xf0, 0x02, 0xea, 0x7c,
-    0x30, 0x64, 0xf9, 0xa1, 0xa5, 0xcc, 0xf3, 0x0a, 0x23, 0x4c, 0x32, 0xc2,
-    0x7a, 0xc1, 0x91, 0x53, 0xf7, 0xf3, 0xba, 0x44, 0xb6, 0xd5, 0x79, 0x50,
-    0xec, 0x6c, 0x03, 0x3d, 0x10, 0x7c, 0x3b, 0xa9, 0x9a, 0x8f, 0xe9, 0xff,
-    0xb9, 0x1b, 0x5a, 0x35, 0x44, 0xd5, 0x52, 0x8a, 0xc7, 0xfb, 0xa3, 0x46,
-    0x1a, 0xe6, 0x9c, 0xe0, 0xc0, 0xa9, 0xcd, 0x89, 0x3a, 0xf7, 0x48, 0xd3,
-    0x55, 0x98, 0x94, 0x4e, 0x4a, 0x5d, 0x59, 0x6b, 0xc5, 0x7d, 0xfc, 0x2a,
-    0xf7, 0xf9, 0x29, 0x9f, 0x01, 0x38, 0xee, 0x07, 0x47, 0x55, 0xa1, 0x74,
-    0x35, 0xad, 0x65, 0x95, 0x43, 0xa9, 0x80, 0xbe, 0x7f, 0x69, 0x9c, 0xd7,
-    0x74, 0x7f, 0xb4, 0x5f, 0xaf, 0xc1, 0xea, 0xa5, 0xa2, 0x7c, 0x79, 0xd0,
-    0x74, 0xd8, 0xdb, 0x09, 0x08, 0x6c, 0x4e, 0xfe, 0xc2, 0xb7, 0x22, 0xc6,
-    0x9c, 0xad, 0xd1, 0x3d, 0xda, 0x2a, 0x08, 0x36, 0x76, 0x2e, 0x96, 0x85,
-    0x4b, 0x13, 0xfb, 0xd4, 0x78, 0x03, 0xe1, 0xb5, 0x45, 0xed, 0xcc, 0x0a,
-    0x36, 0x4e, 0xe6, 0x78, 0x4c, 0xc2, 0x35, 0xa9, 0x84, 0x99, 0x02, 0xc0,
-    0x07, 0x32, 0x5d, 0x6d, 0x95, 0xdd, 0xcc, 0xe9, 0xdf, 0x44, 0x50, 0x55,
-    0x1c, 0x93, 0xb1, 0xb4, 0x7c, 0xc3, 0x30, 0x00, 0xf1, 0x6e, 0xa9, 0xf9,
-    0xd6, 0x66, 0xff, 0x4b, 0xd3, 0x73, 0xb0, 0x32, 0xaa, 0x13, 0x8f, 0xec,
-    0x5d, 0xec, 0x64, 0x13, 0x72, 0xf8, 0xbc, 0x19, 0x1d, 0x58, 0xdd, 0x10,
-    0xd9, 0xab, 0x55, 0x37, 0xb2, 0xf7, 0x61, 0xc7, 0x93, 0xa8, 0x83, 0x26,
-    0x6b, 0x6f, 0xdc, 0x3c, 0x08, 0xe9, 0x84, 0xc0, 0x47, 0x79, 0x78, 0xdb,
-    0xa2, 0x35, 0xa1, 0x02, 0xc9, 0x92, 0x3e, 0x87, 0x7a, 0x18, 0xee, 0x94,
-    0xc6, 0x70, 0x8c, 0x03, 0x9f, 0xa0, 0xe7, 0x78, 0x9f, 0x6b, 0xd1, 0x60,
-    0xa4, 0x82, 0x9c, 0x1b, 0xaa, 0x80, 0x16, 0x41, 0xb4, 0x90, 0x5a, 0x69,
-    0xdf, 0x06, 0x97, 0xee, 0xdb, 0x12, 0x0a, 0x90, 0x4e, 0x64, 0x6c, 0x2a,
-    0x0c, 0x54, 0x20, 0x2b, 0x84, 0x56, 0x27, 0x96, 0x86, 0xfd, 0xba, 0xc4,
-    0x94, 0x52, 0x47, 0xc2, 0x63, 0x17, 0xc7, 0x5e, 0x37, 0x0e, 0xa0, 0x6c,
-    0x38, 0x55, 0xfd, 0xc6, 0x1d, 0xe3, 0x4b, 0x3f, 0x16, 0xc0, 0x8c, 0xb9,
-    0xaa, 0xf3, 0x92, 0x1c, 0xf6, 0xf9, 0x8b, 0xef, 0xe3, 0x69, 0x77, 0x3c,
-    0x25, 0x31, 0x48, 0x7f, 0xb3, 0xc8, 0x54, 0xd6, 0xe0, 0x1c, 0x85, 0x1f,
-    0x19, 0x6e, 0x54, 0x1f, 0xdd, 0x96, 0x23, 0x66, 0x6f, 0x57, 0x5d, 0x0c,
-    0xc2, 0x5e, 0xf3, 0x12, 0xcd, 0x83, 0x8a, 0x4a, 0x7c, 0xa6, 0x6e, 0x5f,
-    0x39, 0xbd, 0xd0, 0xc4, 0x8e, 0xea, 0x46, 0x3d, 0xf5, 0xdb, 0xe5, 0xb0,
-    0xaa, 0x79, 0x63, 0x18, 0x44, 0x0d, 0xd9, 0x61, 0xaf, 0x16, 0xab, 0x48,
-    0xa5, 0xda, 0x89, 0x9f, 0xf6, 0x9b, 0xe6, 0xcb, 0xa9, 0x5d, 0xf5, 0x88,
-    0x69, 0x14, 0x34, 0xc6, 0x06, 0x1a, 0x7b, 0xa9, 0x96, 0x7f, 0x99, 0xed,
-    0x4f, 0xee, 0xec, 0x50, 0xe3, 0xbf, 0xf1, 0xee, 0xed, 0xeb, 0x76, 0xd4,
-    0x79, 0xf8, 0xee, 0xb2, 0xce, 0x78, 0xbd, 0x1f, 0x4e, 0x3a, 0x5f, 0x5c,
-    0x8e, 0x1f, 0xa9, 0x9d, 0xa8, 0x2d, 0xf9, 0x7d, 0xc6, 0x2b, 0xc3, 0xd1,
-    0x25, 0xdb, 0xc5, 0xe6, 0xc8, 0x42, 0x50, 0x8a, 0xf4, 0xd3, 0x87, 0x99,
-    0xdf, 0x99, 0xf3, 0xf6, 0xa8, 0x25, 0x97, 0xa1, 0xb3, 0x1a, 0xcf, 0x3a,
-    0xc0, 0xc2, 0xbd, 0x5f, 0x07, 0xb9, 0x15, 0x62, 0xeb, 0xbe, 0x97, 0x22,
-    0xf1, 0x2f, 0xfa, 0x33, 0x7d, 0xb9, 0x30, 0xfc, 0x07, 0xf0, 0x9d, 0x56,
-    0x46, 0xa9, 0xb1, 0xae, 0x42, 0xb2, 0x36, 0xe9, 0xad, 0x34, 0x3c, 0x49,
-    0xe4, 0xc9, 0xaf, 0xdd, 0xc1, 0x90, 0xbb, 0xae, 0x55, 0xcc, 0x0a, 0x77,
-    0x83, 0xe5, 0x5c, 0x82, 0x95, 0x60, 0x69, 0x68, 0x34, 0x27, 0xed, 0x80,
-    0x62, 0xa4, 0xdb, 0x44, 0x36, 0xfd, 0xd8, 0xf5, 0xf0, 0xa3, 0xea, 0x55,
-    0xa6, 0xff, 0xba, 0xda, 0xdf, 0xc4, 0x1c, 0xe7, 0x05, 0x1e, 0xa0, 0xd0,
-    0xae, 0x3a, 0x25, 0x87, 0x87, 0xc5, 0x6d, 0xd6, 0x96, 0x47, 0x4e, 0x73,
-    0x9a, 0x6e, 0xba, 0xd8, 0xfb, 0xb7, 0xab, 0x9e, 0x55, 0x15, 0x8f, 0xf0,
-    0xe6, 0xe6, 0x2e, 0xcb, 0x01, 0x27, 0x6d, 0x6e, 0xd1, 0x11, 0x7f, 0x46,
-    0x78, 0xc1, 0x42, 0x73, 0xe1, 0x55, 0xa5, 0x82, 0xc7, 0xa2, 0x75, 0x19,
-    0x66, 0x30, 0x6e, 0x74, 0x20, 0x28, 0x31, 0xb6, 0x5a, 0xa0, 0x91, 0x60,
-    0xfa, 0xb0, 0xd7, 0x07, 0x87, 0x94, 0x26, 0xf2, 0xe2, 0x20, 0x5b, 0x0d,
-    0xd3, 0x7e, 0x96, 0x02, 0x8e, 0x6d, 0xa3, 0x01, 0x25, 0x01, 0xc0, 0xd4,
-    0x80, 0x1e, 0x97, 0x84, 0x76, 0x62, 0x30, 0x0a, 0xaf, 0x0a, 0xf6, 0xb8,
-    0x2f, 0x73, 0x96, 0xf1, 0xd2, 0x04, 0xd1, 0xa9, 0x02, 0xbe, 0x1c, 0x18,
-    0xf5, 0x2d, 0x5a, 0x73, 0x79, 0xcd, 0x6b, 0xb4, 0x09, 0x8c, 0x49, 0x30,
-    0x02, 0xf2, 0x57, 0xfb, 0x7b, 0x8e, 0x5c, 0xde, 0x0d, 0xd6, 0x6c, 0x89,
-    0x69, 0xeb, 0x70, 0x2d, 0x67, 0x72, 0x18, 0xd0, 0xc6, 0x41, 0xf9, 0xd4,
-    0x3d, 0xee, 0x53, 0xa3, 0x46, 0x0a, 0xe5, 0x94, 0xad, 0xab, 0x7d, 0x54,
-    0x78, 0xd6, 0x49, 0x9b, 0x16, 0xcd, 0x62, 0x4c, 0xa2, 0x58, 0x6d, 0xb3,
-    0xfe, 0xaa, 0x8d, 0x9f, 0x46, 0xa5, 0x68, 0xa6, 0x43, 0x6e, 0x5d, 0x12,
-    0x15, 0x85, 0xc7, 0x6e, 0x8a, 0x5b, 0x3c, 0xac, 0xa8, 0x9a, 0xaa, 0x29,
-    0x47, 0x08, 0x59, 0x09, 0xe1, 0x81, 0xa7, 0x69, 0x2f, 0xd1, 0xf5, 0xc6,
-    0x65, 0x98, 0xdf, 0xd7, 0xb0, 0xfd, 0x5d, 0xc1, 0xec, 0x8f, 0x26, 0x7a,
-    0x39, 0xc3, 0xf4, 0xd1, 0x84, 0xe2, 0x3d, 0xbd, 0xf4, 0x53, 0x58, 0xd8,
-    0x31, 0x6a, 0x34, 0x93, 0xba, 0x37, 0xd8, 0x16, 0xd1, 0xd4, 0x99, 0x56,
-    0xb1, 0x2a, 0x21, 0xe2, 0xcb, 0x97, 0x3e, 0xab, 0x71, 0x67, 0x4e, 0xe1,
-    0xdb, 0x7c, 0x00, 0xf0, 0x65, 0xe3, 0x8c, 0x65, 0xf1, 0x90, 0x60, 0x1f,
-    0xea, 0x26, 0xd0, 0x30, 0x51, 0x5b, 0xef, 0x16, 0x42, 0xb0, 0xa9, 0x5e,
-    0x11, 0xf7, 0xef, 0xe7, 0x1b, 0xe4, 0xf7, 0x8a, 0x73, 0xb4, 0xac, 0x2a,
-    0x4f, 0xf8, 0x70, 0x33, 0xf6, 0xdc, 0x8a, 0xbf, 0x9c, 0xaa, 0x55, 0x1c,
-    0x06, 0x15, 0x0a, 0x3b, 0x38, 0xe1, 0x8d, 0xcf, 0x34, 0xf3, 0xcf, 0xe8,
-    0x21, 0x34, 0x6b, 0x02, 0xff, 0x22, 0x9e, 0x1c, 0x51, 0x8b, 0x7b, 0x94,
-    0x9c, 0x20, 0xa3, 0x99, 0x35, 0xae, 0x6c, 0xde, 0x21, 0x86, 0x9e, 0x12,
-    0x32, 0x52, 0x3b, 0x71, 0x08, 0x68, 0xb6, 0x5f, 0xb3, 0xee, 0x25, 0x06,
-    0xd5, 0x10, 0x6e, 0x3a, 0x95, 0x2c, 0x4b, 0x75, 0x77, 0x7d, 0x66, 0x58,
-    0x6f, 0x34, 0xa4, 0xd2, 0xe7, 0x27, 0x2a, 0x48, 0x2f, 0x33, 0x19, 0x23,
-    0x07, 0x45, 0xd2, 0x5f, 0x6f, 0xd3, 0x76, 0xa7, 0xb6, 0x5b, 0xcf, 0xf3,
-    0xba, 0x42, 0xed, 0xa7, 0xb5, 0x60, 0xd2, 0x18, 0x69, 0x5f, 0x6c, 0x8a,
-    0x0c, 0x98, 0x3d, 0x6a, 0x6c, 0x65, 0xd3, 0x25, 0x72, 0x3a, 0xbd, 0x52,
-    0x7d, 0x4a, 0xe3, 0x18, 0x51, 0xe8, 0xc3, 0xa7, 0x12, 0x42, 0x73, 0xa3,
-    0x8f, 0x8e, 0x04, 0x38, 0x39, 0x40, 0x7f, 0x16, 0x55, 0x69, 0xb5, 0xae,
-    0x59, 0x9d, 0x88, 0xa3, 0x8b, 0x66, 0xe6, 0x58, 0x43, 0x16, 0x29, 0xac,
-    0x69, 0xad, 0xac, 0x47, 0x9e, 0x16, 0x8a, 0xdd, 0xc7, 0x67, 0x25, 0xfa,
-    0x4e, 0xc7, 0x97, 0xfa, 0x29, 0x86, 0xd7, 0x9b, 0xa3, 0x9d, 0x1c, 0x0a,
-    0x39, 0x3b, 0xec, 0xa8, 0xd7, 0x38, 0x4f, 0x3d, 0x56, 0x22, 0xbc, 0x08,
-    0x74, 0x31, 0xc8, 0x16, 0xda, 0x98, 0xd3, 0x54, 0x1f, 0xe9, 0x89, 0x3c,
-    0x28, 0x1d, 0x27, 0x78, 0xe5, 0x31, 0xcf, 0x6b, 0x0a, 0x12, 0x08, 0x01,
-    0x8b, 0x1a, 0x2f, 0xf3, 0xde, 0x19, 0xda, 0xca, 0x11, 0x25, 0xdd, 0x93,
-    0x05, 0x71, 0xc1, 0xab, 0x95, 0x3b, 0x28, 0x8f, 0x5d, 0xa4, 0x0e, 0xad,
-    0xcf, 0x14, 0x57, 0x66, 0x4e, 0xb1, 0x88, 0x2f, 0x02, 0x4f, 0x0d, 0xe1,
-    0x37, 0xe2, 0x2a, 0x02, 0xe4, 0x81, 0x53, 0xb2, 0xd5, 0x30, 0xf7, 0x4f,
-    0x5f, 0x95, 0xc0, 0x42, 0x4c, 0x89, 0x7c, 0x82, 0x62, 0x17, 0xbf, 0x9a,
-    0x88, 0xdf, 0xac, 0x73, 0x93, 0x8a, 0x85, 0x29, 0xd0, 0x16, 0xae, 0x79,
-    0xab, 0x91, 0x54, 0x29, 0x32, 0x52, 0x17, 0x91, 0x6b, 0x51, 0x59, 0x09,
-    0x56, 0x8f, 0x81, 0xc2, 0x7f, 0x77, 0xad, 0x65, 0x81, 0x3b, 0x9d, 0xeb,
-    0xdd, 0xc3, 0x61, 0x2a, 0x4d, 0xe3, 0x10, 0x84, 0x54, 0xc0, 0xcd, 0xae,
-    0x86, 0x54, 0xaa, 0x70, 0xf3, 0xfb, 0xf1, 0x57, 0x6f, 0xd5, 0xbe, 0x24,
-    0x0e, 0x26, 0x2e, 0xba, 0x1e, 0x65, 0x3d, 0x22, 0x8b, 0xd1, 0x37, 0xc4,
-    0x77, 0x63, 0x9c, 0x40, 0xee, 0x71, 0x33, 0xf8, 0xe4, 0xfa, 0x4c, 0x87,
-    0x9f, 0xee, 0xf3, 0x51, 0xcf, 0x35, 0x69, 0xd2, 0x98, 0x5b, 0x2d, 0x3f,
-    0x44, 0xdf, 0xcb, 0xb8, 0xb2, 0x5f, 0xf5, 0x9d,
-  },
-}};
-
-static void test_pke1024_encrypt(void) {
-  for (size_t i = 0; i < sizeof(PKE1024_ENCRYPT_TESTS)/sizeof(PKE1024_ENCRYPT_TESTS[0]); i++) {
-    // encrypt test message `m` with encryption key `ek` and randomness
-    // `enc_rand`, then store ciphertext to buffer `got`.
-    uint8_t got[PKE1024_CT_SIZE] = { 0 };
-    pke1024_encrypt(got, PKE1024_ENCRYPT_TESTS[i].ek, PKE1024_ENCRYPT_TESTS[i].m, PKE1024_ENCRYPT_TESTS[i].enc_rand);
-
-    // check for expected ciphertext
-    if (memcmp(got, PKE1024_ENCRYPT_TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, PKE1024_ENCRYPT_TESTS[i].name, got, sizeof(got), PKE1024_ENCRYPT_TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_pke1024_decrypt(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t dk[PKE1024_EK_SIZE]; // test decryption key (1536 bytes)
-    const uint8_t ct[PKE1024_CT_SIZE]; // test ciphertext (1568 bytes)
-    const uint8_t exp[32]; // expected message (32 bytes)
-  } TESTS[] = {{
-    .name = "rand = 0, message = 1",
-
-    .dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-    },
-
-    .ct = {
-      0x6c, 0x21, 0x44, 0xd1, 0xd8, 0x6c, 0xfc, 0xa8, 0x53, 0xe1, 0x58, 0x64,
-      0x41, 0x5f, 0x14, 0x91, 0x12, 0xca, 0x59, 0x5f, 0x4b, 0x6d, 0x9c, 0xfc,
-      0xda, 0x6b, 0xd0, 0xac, 0x08, 0x42, 0x73, 0xb8, 0x1c, 0xe7, 0x05, 0xe0,
-      0xb8, 0x0a, 0xdd, 0xd2, 0x44, 0x9e, 0xb5, 0xa5, 0xf0, 0x14, 0x15, 0x0b,
-      0xcd, 0xa5, 0x91, 0x3d, 0x00, 0xe5, 0x60, 0x6c, 0x73, 0x09, 0x7a, 0x9c,
-      0x7c, 0xd4, 0x37, 0xfb, 0x94, 0xf5, 0xd0, 0x95, 0x49, 0xf5, 0x5d, 0x2a,
-      0xad, 0x67, 0xab, 0x0a, 0x51, 0x40, 0x64, 0x4f, 0x8d, 0xbc, 0xf2, 0x2c,
-      0xe3, 0x03, 0x92, 0xfd, 0xa7, 0x96, 0xb1, 0x56, 0x85, 0x91, 0x66, 0x67,
-      0x26, 0xd5, 0x8f, 0x4c, 0x57, 0x1d, 0xcc, 0x72, 0x53, 0xab, 0xfe, 0x70,
-      0xdd, 0x9c, 0x22, 0x86, 0xe2, 0x81, 0x4b, 0x92, 0x4f, 0x54, 0xe6, 0x38,
-      0xef, 0x88, 0x65, 0x7d, 0xf4, 0xea, 0xdd, 0x15, 0x28, 0x0d, 0xed, 0x01,
-      0xf7, 0xa2, 0xb7, 0x1f, 0x3b, 0x21, 0x32, 0xec, 0x21, 0x28, 0xfb, 0x6e,
-      0xd3, 0x16, 0x76, 0xd8, 0x3d, 0x3a, 0xb0, 0xe2, 0xb7, 0x92, 0xa2, 0xc9,
-      0x0b, 0x7a, 0xa9, 0x03, 0xce, 0x60, 0x46, 0x4c, 0x07, 0xdb, 0x8b, 0x07,
-      0xea, 0x5e, 0xa0, 0xb4, 0xa3, 0xc8, 0x51, 0x93, 0x1c, 0xfa, 0x0b, 0x68,
-      0xdb, 0x78, 0xac, 0x98, 0x96, 0xa2, 0xaa, 0x55, 0x6e, 0xd6, 0x27, 0x36,
-      0x2e, 0x20, 0xa0, 0xc9, 0x94, 0xaa, 0x2e, 0x35, 0xa5, 0x39, 0xd8, 0x97,
-      0x3a, 0x47, 0x63, 0x36, 0x08, 0xd3, 0x1b, 0xce, 0x0d, 0xf9, 0x2d, 0x9a,
-      0x7d, 0xd7, 0x97, 0xe9, 0x0c, 0xae, 0x88, 0x13, 0x26, 0xb7, 0xa5, 0xc0,
-      0x27, 0x9e, 0x46, 0x87, 0xc9, 0x78, 0xd8, 0x5e, 0xdd, 0x49, 0x17, 0xd0,
-      0xf4, 0x4e, 0xeb, 0x12, 0x04, 0x5a, 0xdf, 0xfe, 0x33, 0x6a, 0x28, 0x04,
-      0xba, 0x66, 0xc5, 0x40, 0xfc, 0x65, 0xe3, 0xe2, 0x56, 0x81, 0xb3, 0x83,
-      0xfc, 0xf2, 0x62, 0x9f, 0x88, 0x54, 0xda, 0x05, 0x71, 0xc9, 0x46, 0xe3,
-      0xef, 0xc7, 0xb5, 0x3a, 0x5d, 0x0c, 0x58, 0xaa, 0x21, 0x0d, 0xe9, 0x3a,
-      0x04, 0x92, 0x92, 0x9d, 0x6e, 0xcf, 0x65, 0xd9, 0xb3, 0x76, 0x67, 0x04,
-      0xb6, 0x1a, 0xa6, 0x32, 0x96, 0xf4, 0x44, 0xe7, 0xd4, 0xf6, 0x7d, 0x9a,
-      0x31, 0x46, 0xd6, 0xb3, 0xea, 0xe1, 0xf9, 0xde, 0x5f, 0x72, 0xe3, 0x69,
-      0x08, 0x4a, 0x95, 0xc8, 0x8d, 0x37, 0x99, 0x2c, 0x56, 0x34, 0x18, 0xe3,
-      0x60, 0x9a, 0x4d, 0x07, 0x9b, 0xae, 0x24, 0xb4, 0x1c, 0xf6, 0x2d, 0xca,
-      0xeb, 0xdc, 0xe5, 0x8b, 0xc6, 0x9b, 0x69, 0x60, 0x29, 0xa2, 0xb2, 0x35,
-      0x47, 0xfc, 0x19, 0xb7, 0x41, 0x16, 0xab, 0x43, 0x8a, 0x2b, 0x5d, 0x7a,
-      0x0b, 0x19, 0xb7, 0xdd, 0x95, 0x2e, 0xae, 0x8f, 0x54, 0x85, 0xb4, 0xf6,
-      0xed, 0xa1, 0x74, 0xed, 0x08, 0xe3, 0x3e, 0x5b, 0x13, 0xa7, 0xbf, 0xe5,
-      0x26, 0x4d, 0xb1, 0x28, 0xdb, 0x45, 0x3a, 0x5c, 0x21, 0x8e, 0x07, 0x62,
-      0xb9, 0xc4, 0xe5, 0xaf, 0xdc, 0x26, 0xdb, 0x74, 0x2d, 0xf6, 0xf8, 0x98,
-      0xf3, 0xcb, 0x3a, 0x34, 0x8f, 0x63, 0xad, 0xe8, 0x91, 0xf8, 0x6e, 0x81,
-      0x46, 0x0c, 0x38, 0xec, 0x4b, 0xb5, 0x68, 0x1b, 0x77, 0x81, 0x95, 0x92,
-      0xd0, 0xc0, 0x14, 0x9e, 0x11, 0xc3, 0x85, 0xcc, 0x70, 0xf9, 0xdd, 0x32,
-      0xb7, 0xc4, 0x08, 0x97, 0x6f, 0x8b, 0x78, 0x84, 0x5a, 0x8d, 0xca, 0x21,
-      0x4b, 0x74, 0xb1, 0x77, 0x7a, 0x75, 0x53, 0x0a, 0x61, 0xb6, 0x7a, 0x8b,
-      0xa9, 0x3a, 0x2e, 0x95, 0x80, 0xdc, 0xd5, 0xa7, 0x33, 0x3d, 0x54, 0x8a,
-      0xd3, 0x1d, 0x19, 0xb7, 0xf2, 0x16, 0xbf, 0x76, 0x06, 0x00, 0x15, 0xd8,
-      0xe1, 0xd5, 0x81, 0xad, 0x53, 0xb3, 0x08, 0xc3, 0x22, 0xe0, 0xf0, 0xbe,
-      0x1e, 0xd2, 0xd3, 0x36, 0xcb, 0xf9, 0x0b, 0x75, 0x42, 0xdb, 0xfa, 0xd8,
-      0x7e, 0x25, 0x30, 0xae, 0x73, 0xc6, 0x6a, 0x40, 0xd7, 0x3c, 0x13, 0xdb,
-      0xf6, 0xde, 0xcd, 0x7b, 0x8b, 0x62, 0xad, 0x0c, 0x7a, 0x59, 0x98, 0x6d,
-      0x75, 0xa7, 0xf9, 0xdb, 0x52, 0x44, 0x01, 0x82, 0xec, 0x87, 0x0d, 0x91,
-      0x4c, 0xa2, 0x20, 0xc3, 0xbf, 0xcf, 0x54, 0x4b, 0x9d, 0x18, 0x08, 0x67,
-      0xba, 0xde, 0x57, 0x98, 0x92, 0xaa, 0x78, 0xd6, 0x87, 0x0d, 0x0b, 0x98,
-      0x9c, 0xf9, 0xf6, 0x28, 0xb0, 0xe8, 0x96, 0x82, 0xa0, 0x16, 0xe3, 0x02,
-      0xa6, 0x8c, 0x46, 0x47, 0x8b, 0xf8, 0x53, 0xcc, 0x52, 0xe3, 0x8c, 0xf1,
-      0x50, 0x40, 0x0a, 0xf3, 0x65, 0x51, 0x9d, 0xba, 0xd9, 0x91, 0x86, 0xbe,
-      0x59, 0xf5, 0x50, 0x19, 0x0f, 0x39, 0xfb, 0xf6, 0x44, 0x2b, 0x0d, 0xc5,
-      0x01, 0xaf, 0x03, 0xec, 0xa6, 0xb2, 0x6c, 0x5f, 0x04, 0xb7, 0xe5, 0xd6,
-      0xa9, 0x6a, 0xb5, 0x1d, 0xc9, 0x60, 0x89, 0x43, 0xe9, 0x29, 0x18, 0x7f,
-      0x3b, 0x4e, 0xf2, 0xda, 0x72, 0xe9, 0x72, 0x1d, 0x70, 0x17, 0x98, 0x1c,
-      0x73, 0x2f, 0xb4, 0x54, 0x95, 0x4c, 0xb4, 0x01, 0x95, 0xbb, 0xcb, 0xf6,
-      0xb2, 0xb7, 0x72, 0x8c, 0x32, 0x7b, 0x41, 0x2d, 0x03, 0xaa, 0x88, 0x25,
-      0x64, 0x8f, 0xa9, 0x8a, 0x42, 0x94, 0xe0, 0x66, 0x8c, 0xbd, 0xb9, 0xc2,
-      0xf2, 0xf8, 0x59, 0xc7, 0x55, 0x73, 0xcd, 0x31, 0x85, 0x0f, 0xc4, 0x95,
-      0x63, 0xb7, 0xc9, 0x66, 0x37, 0xcb, 0x49, 0x63, 0xab, 0x7e, 0xdf, 0x87,
-      0x76, 0x07, 0xa0, 0x37, 0xe9, 0xe9, 0x80, 0x26, 0x48, 0xf9, 0xf2, 0x46,
-      0xb1, 0x81, 0x07, 0xbd, 0x3d, 0x52, 0x19, 0x98, 0x3d, 0x01, 0xbb, 0x61,
-      0xf0, 0xf9, 0x47, 0xd2, 0x53, 0x97, 0x15, 0x46, 0x36, 0xd8, 0xa7, 0x7c,
-      0xc9, 0x2f, 0xe4, 0x27, 0xf5, 0xde, 0xe9, 0x33, 0x6c, 0x0a, 0xa1, 0x8f,
-      0xeb, 0xd4, 0xb8, 0x36, 0x1b, 0x80, 0x78, 0x6f, 0x7f, 0x2a, 0xa4, 0x35,
-      0xba, 0xdb, 0xf2, 0xf7, 0x53, 0x7f, 0xaa, 0x30, 0x5e, 0x0b, 0xa8, 0x20,
-      0x7a, 0x9a, 0x9b, 0x5b, 0x73, 0x62, 0x15, 0xd8, 0x90, 0x5e, 0xb0, 0x42,
-      0x44, 0xaa, 0xd7, 0x5c, 0xc7, 0xe4, 0xca, 0x4d, 0x68, 0xea, 0x0f, 0x0e,
-      0x5e, 0x27, 0x8e, 0x61, 0xb5, 0x61, 0xc6, 0xd4, 0xd5, 0x55, 0x1a, 0x93,
-      0x0f, 0x50, 0x50, 0x1e, 0xbd, 0x84, 0xb3, 0x4c, 0xb1, 0xa7, 0x1e, 0xaa,
-      0x22, 0xf5, 0xea, 0x5a, 0x6f, 0xa4, 0xf4, 0x91, 0xd6, 0x13, 0x14, 0x8f,
-      0x5f, 0x6b, 0xb7, 0xfa, 0xb1, 0x3f, 0xdb, 0xa4, 0xbe, 0x2e, 0xa8, 0xd8,
-      0x4b, 0x03, 0xeb, 0x3a, 0xc2, 0x0d, 0x36, 0x8e, 0x21, 0x0d, 0x63, 0x31,
-      0x24, 0x9d, 0x3f, 0xda, 0xd0, 0x14, 0xec, 0x32, 0x85, 0x57, 0xe6, 0x4f,
-      0x3a, 0x7a, 0x03, 0x2b, 0x94, 0x0a, 0x32, 0x5c, 0x53, 0xc5, 0xe1, 0x8d,
-      0xcd, 0x36, 0xc2, 0x9b, 0x42, 0x49, 0xc2, 0x0b, 0x37, 0x6e, 0xa2, 0x08,
-      0xb1, 0x5d, 0xca, 0xdf, 0x49, 0xd7, 0xcf, 0x6c, 0xa3, 0xfb, 0x2b, 0xd4,
-      0xfd, 0x06, 0x71, 0x84, 0x27, 0xab, 0x26, 0xbe, 0x4d, 0x33, 0x31, 0x2e,
-      0x27, 0xe2, 0x38, 0x8a, 0x41, 0x07, 0x40, 0xe6, 0x9f, 0x2f, 0x17, 0x54,
-      0x91, 0x6c, 0x8f, 0x7f, 0x46, 0xcd, 0xd9, 0x09, 0x70, 0xb5, 0xa7, 0xab,
-      0x0d, 0xa4, 0xa3, 0xec, 0x71, 0xa3, 0x75, 0xd8, 0x59, 0x75, 0xaf, 0x12,
-      0x76, 0x3d, 0xb2, 0xd5, 0xd9, 0xc1, 0x7b, 0x11, 0x76, 0xfe, 0xd7, 0x81,
-      0x71, 0xaa, 0x93, 0xa1, 0x4b, 0xc3, 0xf7, 0xa2, 0xbf, 0x77, 0x76, 0x8b,
-      0x12, 0x9a, 0x7b, 0x1d, 0x86, 0x71, 0xb2, 0xda, 0x14, 0x73, 0x16, 0x6f,
-      0xdf, 0xb1, 0xa8, 0x90, 0x77, 0x6a, 0xea, 0xbf, 0x63, 0x0e, 0x31, 0x7c,
-      0x64, 0x52, 0x36, 0x68, 0x1f, 0xe4, 0x0e, 0x4f, 0x48, 0x77, 0xfb, 0x40,
-      0x12, 0x92, 0x21, 0xfb, 0x50, 0xb5, 0x8d, 0x66, 0x1f, 0x1f, 0x02, 0x4d,
-      0x48, 0xc6, 0x65, 0xa9, 0xaa, 0xc8, 0xd8, 0x52, 0xab, 0xb1, 0x8b, 0xe8,
-      0x4a, 0xeb, 0xc9, 0x3e, 0x8d, 0x8d, 0x41, 0x69, 0xcd, 0x10, 0xe9, 0x18,
-      0xf8, 0x95, 0x44, 0xce, 0x62, 0x57, 0xf5, 0xd6, 0x0a, 0x7c, 0x71, 0xe9,
-      0x8e, 0x61, 0xcd, 0xba, 0x27, 0xe9, 0x53, 0xf2, 0xa8, 0x59, 0x05, 0x51,
-      0xbf, 0xc2, 0x13, 0x74, 0xc2, 0x6c, 0xb1, 0x84, 0xcb, 0x31, 0xbd, 0x75,
-      0x84, 0xa0, 0xf0, 0xab, 0xe5, 0x6d, 0xcc, 0x35, 0x3e, 0x6a, 0x34, 0xb1,
-      0xc7, 0x7c, 0x22, 0x78, 0xab, 0x80, 0xad, 0x9f, 0xb9, 0x6e, 0x4c, 0xe2,
-      0xe2, 0xdc, 0x9a, 0xf9, 0x29, 0xbd, 0xb4, 0x29, 0x5a, 0x3f, 0xc1, 0x91,
-      0x66, 0xb7, 0x56, 0x5f, 0xb1, 0x76, 0x70, 0x6a, 0xe8, 0x09, 0xb6, 0x20,
-      0x95, 0xc8, 0x56, 0x4b, 0x3c, 0x43, 0x47, 0x14, 0x56, 0xaf, 0xfe, 0x64,
-      0xd3, 0x10, 0x90, 0x3a, 0x54, 0xe7, 0xbf, 0x02, 0xf3, 0x7d, 0x6b, 0x13,
-      0x86, 0x87, 0xf8, 0xe5, 0xd7, 0x22, 0x95, 0x79, 0x76, 0x75, 0xea, 0x36,
-      0xb4, 0x2f, 0x09, 0xe2, 0x00, 0x42, 0xd2, 0x33, 0x38, 0x94, 0x5d, 0x9d,
-      0x9d, 0x81, 0xb5, 0xb3, 0xa8, 0xa5, 0x66, 0x18, 0x86, 0x00, 0xf2, 0x1d,
-      0x30, 0xb9, 0xd2, 0x52, 0xc7, 0x8e, 0xdd, 0x9d, 0x2e, 0xe1, 0xab, 0x78,
-      0xf0, 0xd3, 0x94, 0x83, 0xdf, 0xdd, 0xd3, 0x73, 0xa2, 0x6c, 0x98, 0x89,
-      0x1b, 0xd6, 0xdd, 0xee, 0xcd, 0x57, 0x6e, 0x44, 0x05, 0x9c, 0x7c, 0x0f,
-      0x4d, 0xc4, 0x73, 0xa1, 0x78, 0xfe, 0x0f, 0x4b, 0x2b, 0xa3, 0xab, 0x58,
-      0x11, 0x08, 0x67, 0x42, 0x7e, 0x00, 0x4b, 0x72, 0x63, 0xa4, 0x84, 0xb4,
-      0xa8, 0x19, 0x9e, 0x21, 0x52, 0xd5, 0x12, 0x0f, 0xaa, 0x79, 0x1c, 0xe9,
-      0x80, 0x77, 0x97, 0x46, 0xa2, 0xef, 0xaf, 0x40, 0x3c, 0x61, 0x27, 0x1a,
-      0x6b, 0x95, 0x0a, 0x6a, 0x0b, 0x27, 0x70, 0x7e, 0xe0, 0x60, 0x17, 0x89,
-      0x1c, 0x3e, 0x04, 0x73, 0x34, 0xb3, 0x66, 0xd1, 0xe3, 0xf1, 0x08, 0x91,
-      0x46, 0x50, 0xeb, 0xb0, 0xef, 0x3f, 0x6a, 0x53, 0x98, 0xaa, 0xc0, 0x32,
-      0x1c, 0x90, 0x04, 0xe6, 0x9c, 0x64, 0x5b, 0x9a, 0x13, 0x03, 0x27, 0x47,
-      0x6d, 0x33, 0xbc, 0xc9, 0xfd, 0xa5, 0x7c, 0x55, 0xf5, 0x55, 0x10, 0x85,
-      0x8c, 0x49, 0xf1, 0x63, 0x34, 0xe6, 0x14, 0xcf, 0x15, 0x52, 0xcd, 0x6c,
-      0x9b, 0xe6, 0xf5, 0xd1, 0xfd, 0xed, 0x49, 0x57, 0x05, 0xa4, 0x34, 0x9b,
-      0xcf, 0x24, 0x6a, 0x28, 0x67, 0xe5, 0x53, 0x5f, 0xdf, 0x54, 0x88, 0x69,
-      0x69, 0xe7, 0x4d, 0x65, 0xde, 0x19, 0xda, 0xca, 0x11, 0x25, 0xdd, 0x93,
-      0x05, 0x71, 0xc1, 0xab, 0x95, 0x3b, 0x28, 0x8f, 0x5d, 0xa4, 0x0e, 0xad,
-      0xcf, 0x14, 0x57, 0x66, 0x4e, 0xb1, 0x88, 0x2f, 0x02, 0x4f, 0x0d, 0xe1,
-      0x37, 0xe2, 0x2a, 0x02, 0xe4, 0x81, 0x53, 0xb2, 0xd5, 0x30, 0xf7, 0x4f,
-      0x5f, 0x95, 0xc0, 0x42, 0x4c, 0x89, 0x7c, 0x82, 0x62, 0x17, 0xbf, 0x9a,
-      0x88, 0xdf, 0xac, 0x73, 0x93, 0x8a, 0x85, 0x29, 0xd0, 0x16, 0xae, 0x79,
-      0xab, 0x91, 0x54, 0x29, 0x32, 0x52, 0x17, 0x91, 0x6b, 0x51, 0x59, 0x09,
-      0x56, 0x8f, 0x81, 0xc2, 0x7f, 0x77, 0xad, 0x65, 0x81, 0x3b, 0x9d, 0xeb,
-      0xdd, 0xc3, 0x61, 0x2a, 0x4d, 0xe3, 0x10, 0x84, 0x54, 0xc0, 0xcd, 0xae,
-      0x86, 0x54, 0xaa, 0x70, 0xf3, 0xfb, 0xf1, 0x57, 0x6f, 0xd5, 0xbe, 0x24,
-      0x0e, 0x26, 0x2e, 0xba, 0x1e, 0x65, 0x3d, 0x22, 0x8b, 0xd1, 0x37, 0xc4,
-      0x77, 0x63, 0x9c, 0x40, 0xee, 0x71, 0x33, 0xf8, 0xe4, 0xfa, 0x4c, 0x87,
-      0x9f, 0xee, 0xf3, 0x51, 0xcf, 0x35, 0x69, 0xd2, 0x98, 0x5b, 0x2d, 0x3f,
-      0x44, 0xdf, 0xcb, 0xb8, 0xb2, 0x5f, 0xf5, 0x9d,
-    },
-
-    .exp = { 1, 0 },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // decrypt ciphertext `ct` with decryption key `dk` and store the
-    // plaintext message in output buffer `got`.
-    uint8_t got[32] = { 0 };
-    pke1024_decrypt(got, TESTS[i].dk, TESTS[i].ct);
-
-    // check for expected plaintext
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_fips203ipd_kem1024_keygen(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t seed[64]; // test seed
-    const uint8_t exp_ek[PKE1024_EK_SIZE]; // expected ek (1568 bytes)
-    const uint8_t exp_dk[FIPS203IPD_KEM1024_DK_SIZE]; // expected dk (3168 bytes)
-  } TESTS[] = {{
-    .name = "all-zero",
-    .seed = { 0 },
-    .exp_ek = {
-      0xe4, 0xb4, 0x3d, 0xd6, 0xb4, 0x02, 0xb6, 0x1c, 0x32, 0xf0, 0x19, 0x1d,
-      0x13, 0xb1, 0xb5, 0x4c, 0x50, 0xb8, 0xdc, 0xc2, 0x24, 0x48, 0x28, 0x64,
-      0xd7, 0xc8, 0x18, 0xf7, 0xa2, 0x42, 0xa8, 0x18, 0x1e, 0x32, 0x63, 0xbc,
-      0x43, 0x32, 0x50, 0x1b, 0x23, 0x59, 0xdb, 0xa9, 0xa8, 0x42, 0x18, 0x86,
-      0x24, 0x87, 0xa5, 0x4b, 0x4a, 0x6a, 0xfd, 0x4a, 0xa8, 0xed, 0x86, 0x68,
-      0x00, 0xe1, 0xaf, 0x36, 0xd7, 0xb6, 0xd3, 0x49, 0x81, 0x21, 0x74, 0x07,
-      0x38, 0xc4, 0xca, 0xfb, 0x10, 0xca, 0x54, 0x74, 0x3f, 0x4b, 0xe2, 0x07,
-      0xdd, 0xa5, 0x2e, 0xa1, 0xc9, 0xb1, 0x4a, 0x36, 0x81, 0x9f, 0x58, 0x18,
-      0x91, 0x5b, 0x74, 0x6f, 0xdc, 0xa9, 0x75, 0x7a, 0x4b, 0x59, 0x47, 0x69,
-      0xc8, 0x76, 0xa5, 0x30, 0xec, 0x95, 0xfb, 0x56, 0x8a, 0xce, 0xf0, 0x3f,
-      0x90, 0x04, 0x99, 0xb0, 0xb2, 0xca, 0xaa, 0x01, 0x58, 0xbe, 0x13, 0x7e,
-      0x86, 0x4c, 0x95, 0x46, 0x1b, 0x34, 0x22, 0xe8, 0xcd, 0x0a, 0x88, 0x8c,
-      0xa7, 0xd3, 0x02, 0xcf, 0xf8, 0x6a, 0x64, 0x03, 0x8f, 0xce, 0x28, 0x91,
-      0xba, 0xb6, 0x69, 0xd2, 0x81, 0x04, 0xa8, 0xf6, 0xa1, 0xb8, 0x64, 0xa1,
-      0x8e, 0x03, 0x7b, 0x39, 0x54, 0xb7, 0x56, 0x18, 0x45, 0xc4, 0x4a, 0x31,
-      0x8e, 0x87, 0x36, 0xfe, 0x09, 0x0d, 0xf1, 0x8a, 0x7d, 0xb7, 0xdb, 0x52,
-      0x8f, 0x24, 0x5d, 0x09, 0xe9, 0x01, 0xa5, 0x7a, 0x40, 0xc9, 0x3a, 0x0b,
-      0xb1, 0x77, 0x24, 0x80, 0xb7, 0x89, 0xa4, 0x98, 0x25, 0xf7, 0xd4, 0x7e,
-      0xe5, 0x7c, 0x73, 0xb5, 0xf3, 0x4c, 0x80, 0x19, 0x24, 0xea, 0xeb, 0x60,
-      0xe8, 0x29, 0x87, 0xe0, 0xb9, 0x6f, 0x50, 0x69, 0x45, 0x34, 0x98, 0x23,
-      0x93, 0xd7, 0x0b, 0xaa, 0x67, 0x65, 0xcf, 0xb8, 0xc0, 0xe0, 0x81, 0x17,
-      0xa2, 0x12, 0xa7, 0xe8, 0x0c, 0x14, 0x16, 0xc4, 0xb1, 0x7f, 0xd6, 0x55,
-      0xcf, 0x62, 0x89, 0xe3, 0xc6, 0x12, 0x92, 0xf2, 0x0a, 0x2c, 0x82, 0x9d,
-      0x94, 0x04, 0xc9, 0x6a, 0x34, 0x11, 0x83, 0x0b, 0x9f, 0x20, 0x4c, 0x01,
-      0x02, 0xf2, 0x06, 0x51, 0x18, 0x77, 0xf4, 0x6a, 0x89, 0x31, 0xdc, 0x01,
-      0x5d, 0x00, 0x03, 0xfc, 0x78, 0xb1, 0xe6, 0x55, 0x12, 0x3c, 0xa0, 0x14,
-      0xbd, 0xc4, 0xc3, 0x92, 0xbb, 0xaf, 0x7d, 0x1c, 0x4e, 0x99, 0xe7, 0x93,
-      0xf5, 0x22, 0x28, 0xaf, 0xe3, 0xc9, 0x34, 0xf4, 0xc4, 0xc3, 0x36, 0x36,
-      0xa5, 0x60, 0x93, 0x7e, 0xc0, 0xa2, 0x65, 0xa6, 0x96, 0x62, 0x52, 0x81,
-      0xdf, 0x60, 0x7f, 0x0a, 0x4c, 0x06, 0x62, 0xd3, 0x77, 0x70, 0x03, 0x50,
-      0x2f, 0x47, 0x4e, 0xb7, 0xe8, 0x94, 0xca, 0xf4, 0x47, 0x9f, 0xea, 0xb4,
-      0x18, 0xb1, 0x36, 0x04, 0x71, 0xb9, 0x6f, 0xda, 0xbe, 0x8c, 0xf4, 0x5f,
-      0x3c, 0x59, 0xce, 0x79, 0x99, 0x2e, 0xf8, 0xab, 0x1f, 0x4a, 0x8a, 0x1d,
-      0xc1, 0xe0, 0x30, 0xba, 0xf9, 0xc0, 0x21, 0x71, 0x42, 0xb7, 0xc9, 0x38,
-      0x55, 0xd8, 0x34, 0x1f, 0x49, 0x23, 0xcd, 0x27, 0x66, 0x93, 0xd3, 0x68,
-      0x6f, 0xc4, 0xc9, 0x6c, 0x47, 0x03, 0xad, 0x60, 0x4c, 0x34, 0x38, 0x58,
-      0x2b, 0xfb, 0x03, 0x6f, 0xd9, 0x62, 0xb0, 0xf8, 0xa0, 0xf4, 0xd6, 0x22,
-      0x3b, 0x0c, 0xb0, 0x38, 0x32, 0x15, 0xe7, 0xdb, 0x8c, 0x75, 0x82, 0x93,
-      0x39, 0x33, 0xad, 0x09, 0x51, 0x19, 0xfb, 0xca, 0x1f, 0x35, 0xd0, 0x3e,
-      0x82, 0x56, 0x2a, 0x4e, 0x17, 0x20, 0x4a, 0x45, 0x59, 0x27, 0x06, 0x0a,
-      0xef, 0xec, 0x25, 0x96, 0xc6, 0xca, 0x48, 0x7b, 0x3e, 0x3b, 0x94, 0xcc,
-      0x4d, 0x3b, 0x15, 0x84, 0xb7, 0x90, 0x80, 0x55, 0x5c, 0x87, 0x9c, 0x69,
-      0xae, 0xc2, 0xa8, 0xca, 0xcc, 0xb0, 0x0e, 0xf0, 0x23, 0xab, 0xa8, 0x86,
-      0x72, 0x12, 0x01, 0x34, 0x2a, 0x2b, 0xe6, 0x8b, 0x67, 0xc9, 0x31, 0x24,
-      0x80, 0x44, 0x1d, 0x9b, 0x71, 0x56, 0x8e, 0x69, 0x0e, 0x20, 0x72, 0x8f,
-      0xb2, 0x27, 0x49, 0xcc, 0xca, 0x94, 0x86, 0x79, 0xaa, 0x70, 0xd5, 0xac,
-      0xef, 0xe3, 0x8a, 0x91, 0xe0, 0x26, 0xf4, 0x25, 0x08, 0xb4, 0x49, 0xc7,
-      0x19, 0xd5, 0x70, 0x27, 0xfa, 0x42, 0xb6, 0x23, 0xb2, 0x80, 0x14, 0x69,
-      0x91, 0x90, 0x0c, 0x85, 0x4b, 0x72, 0x5d, 0xc3, 0xb6, 0x56, 0xc4, 0xb9,
-      0xe7, 0xa6, 0x97, 0xbd, 0x57, 0x19, 0x11, 0x5b, 0x7c, 0xbf, 0xd2, 0x68,
-      0x21, 0x49, 0x35, 0x05, 0xdb, 0x5f, 0x9e, 0x40, 0xa4, 0x4f, 0x2a, 0x38,
-      0x17, 0x7c, 0x3b, 0xc4, 0x52, 0x5b, 0xfe, 0x05, 0x60, 0x6e, 0xc6, 0x5b,
-      0x77, 0x29, 0x4c, 0x16, 0xa1, 0x8c, 0x93, 0x94, 0x53, 0xc6, 0x61, 0x41,
-      0x78, 0x9a, 0x9d, 0xb5, 0x51, 0x5a, 0x2d, 0x23, 0x0a, 0x34, 0xa1, 0xad,
-      0x5e, 0x62, 0x2a, 0x0c, 0x27, 0xcb, 0xca, 0x07, 0xc4, 0x9f, 0x35, 0x9e,
-      0x4f, 0x25, 0x5f, 0xd7, 0x04, 0x8a, 0x93, 0xe8, 0xcf, 0x12, 0x08, 0x64,
-      0xd0, 0x69, 0x66, 0x4c, 0xc3, 0x0b, 0xe2, 0x61, 0xb6, 0x31, 0xa9, 0x11,
-      0x43, 0x6b, 0x49, 0x1e, 0xf0, 0x19, 0x86, 0xea, 0x3b, 0xf8, 0x91, 0x5f,
-      0x20, 0xca, 0x52, 0x66, 0x41, 0xcb, 0x44, 0xfa, 0x96, 0x31, 0x69, 0xb2,
-      0x09, 0x9b, 0x30, 0x7f, 0x86, 0x13, 0x15, 0x96, 0x02, 0x49, 0x88, 0x94,
-      0x6b, 0x01, 0x4e, 0x12, 0xf6, 0x74, 0x65, 0x89, 0x7a, 0xbe, 0x25, 0x04,
-      0xf2, 0xf8, 0x13, 0x9a, 0x7b, 0x1c, 0x94, 0xbb, 0x5f, 0xfc, 0x73, 0x24,
-      0x70, 0x1c, 0xa4, 0xa6, 0x2b, 0xcf, 0xa3, 0x42, 0xba, 0xfe, 0x53, 0x6f,
-      0xc4, 0x02, 0x2c, 0xbc, 0xb1, 0x9a, 0x2b, 0x74, 0x6f, 0xdd, 0x44, 0x2c,
-      0x45, 0x6b, 0x98, 0xa2, 0x77, 0x6f, 0x0c, 0x40, 0x9f, 0x94, 0x43, 0x0d,
-      0x33, 0xa0, 0xbd, 0x94, 0x36, 0x38, 0x1f, 0x49, 0x43, 0xbc, 0xc6, 0x8c,
-      0x6e, 0xe0, 0x89, 0x57, 0xc1, 0xb9, 0x4c, 0x95, 0x43, 0x74, 0xe6, 0xb0,
-      0x1b, 0x83, 0xaf, 0x8b, 0x3b, 0x2b, 0xe0, 0x18, 0x47, 0xe5, 0xd0, 0x4f,
-      0x74, 0x2b, 0xbb, 0x30, 0xbc, 0xcf, 0xb8, 0x52, 0x8b, 0x58, 0xf9, 0x7e,
-      0x5a, 0xb8, 0x48, 0xae, 0x68, 0x30, 0x01, 0x66, 0x0e, 0x69, 0xb4, 0xbc,
-      0xa0, 0x60, 0x2c, 0xbb, 0x43, 0xb3, 0xd5, 0xa2, 0x88, 0xaa, 0x8b, 0x93,
-      0x8c, 0x26, 0x67, 0x0d, 0x31, 0xa7, 0x9f, 0x70, 0x4a, 0x14, 0x54, 0x6b,
-      0x52, 0xfc, 0xbc, 0x81, 0x69, 0xa8, 0xfd, 0xd5, 0x40, 0x66, 0x0a, 0x3a,
-      0x56, 0xe3, 0x69, 0x39, 0xa7, 0x53, 0xd6, 0x39, 0x24, 0x73, 0x58, 0xad,
-      0xb6, 0xb4, 0xb7, 0xeb, 0xf0, 0x97, 0x96, 0x48, 0x25, 0xb7, 0xea, 0x80,
-      0x05, 0x68, 0x0f, 0x2a, 0xe5, 0x82, 0x0a, 0x6b, 0xcf, 0x60, 0xa6, 0x15,
-      0x28, 0x2b, 0x71, 0x07, 0x36, 0xba, 0xe6, 0xbb, 0x55, 0xe7, 0x48, 0xad,
-      0x3f, 0xb7, 0x3d, 0xd3, 0xac, 0xa0, 0x3e, 0x0a, 0x68, 0xf6, 0xb7, 0x13,
-      0xcf, 0xa6, 0x1b, 0x20, 0x16, 0xca, 0x8a, 0x47, 0x64, 0xaf, 0x25, 0x6e,
-      0xb9, 0xf8, 0x76, 0xfe, 0x6a, 0x70, 0x3f, 0xa1, 0x64, 0xd6, 0xec, 0x9a,
-      0x27, 0xc6, 0x84, 0xfd, 0xe5, 0x00, 0x1d, 0x75, 0x94, 0xdf, 0x70, 0x04,
-      0x59, 0x10, 0x46, 0xb3, 0xca, 0xaf, 0x65, 0x48, 0x81, 0x9b, 0x60, 0x38,
-      0xcd, 0xf3, 0x78, 0xa0, 0x33, 0xb8, 0x7c, 0x8c, 0x1a, 0x45, 0x04, 0x57,
-      0x13, 0x12, 0x5d, 0x4e, 0x61, 0x7f, 0x7c, 0x52, 0xb7, 0xdc, 0x27, 0x0c,
-      0x7c, 0x55, 0x2a, 0xdb, 0x03, 0x2e, 0xf6, 0x38, 0x11, 0x71, 0x3b, 0x06,
-      0x6e, 0x33, 0xc2, 0xc1, 0x42, 0x5b, 0x02, 0x14, 0xa1, 0xe3, 0xd8, 0xcf,
-      0x69, 0xb5, 0xc3, 0x37, 0xd1, 0x6b, 0x12, 0xd3, 0x64, 0x60, 0xfc, 0x3a,
-      0xd1, 0x4c, 0x27, 0x20, 0xf8, 0x69, 0xae, 0x4b, 0xa2, 0x94, 0xf6, 0x2c,
-      0x67, 0xe2, 0x47, 0x40, 0xb8, 0x93, 0x52, 0xa3, 0x8a, 0x73, 0x4c, 0xb5,
-      0x35, 0xb5, 0x8b, 0x6d, 0x94, 0x56, 0x8d, 0x2c, 0x65, 0xa6, 0xd6, 0x62,
-      0x3b, 0xb5, 0xc9, 0x05, 0x51, 0x3f, 0x62, 0x20, 0x1d, 0x48, 0xcb, 0x60,
-      0xa9, 0x46, 0xc9, 0x7c, 0x86, 0x5f, 0x96, 0xc9, 0xc4, 0xdf, 0x39, 0x33,
-      0x45, 0x23, 0xa1, 0xd1, 0x53, 0x95, 0xa9, 0x01, 0x95, 0xa3, 0xb5, 0x7b,
-      0x34, 0xb1, 0xb7, 0xc1, 0x27, 0x94, 0x4c, 0x2a, 0x2a, 0x39, 0xc2, 0xc0,
-      0x67, 0xa7, 0x14, 0xac, 0x13, 0xcb, 0x76, 0x8a, 0x68, 0xb4, 0xab, 0x6a,
-      0x97, 0x34, 0x69, 0xf0, 0xa4, 0x42, 0xd7, 0xe0, 0x7a, 0x70, 0x25, 0x43,
-      0x29, 0xd8, 0x01, 0x92, 0x69, 0x27, 0xd7, 0xfb, 0xbc, 0xc8, 0x88, 0x47,
-      0x68, 0x62, 0x33, 0x6e, 0xa2, 0x02, 0x6d, 0x68, 0xaa, 0x34, 0x8b, 0x4b,
-      0x6e, 0x3c, 0xb9, 0x72, 0xd4, 0x2c, 0xc0, 0x98, 0x29, 0x14, 0x79, 0xa4,
-      0xbe, 0x24, 0xb2, 0x33, 0xa7, 0x15, 0x5f, 0xb9, 0xaa, 0x77, 0x35, 0x3e,
-      0xbb, 0xc6, 0x4f, 0x0e, 0x0a, 0xa0, 0x28, 0x4a, 0xcc, 0x51, 0xf5, 0xc9,
-      0x26, 0x31, 0x5e, 0x0b, 0x44, 0x00, 0x79, 0xa7, 0x61, 0x9b, 0xb4, 0xb2,
-      0xe8, 0x08, 0x80, 0xd5, 0x1c, 0x1c, 0x18, 0xcb, 0xcc, 0xae, 0xa0, 0x4d,
-      0xe7, 0xc5, 0x69, 0xbe, 0xf5, 0x31, 0x61, 0xe3, 0xc3, 0xb7, 0x31, 0x0e,
-      0x91, 0x37, 0x53, 0x0e, 0x41, 0x0d, 0x40, 0xca, 0x55, 0xa6, 0xa5, 0x1f,
-      0x62, 0xe2, 0x21, 0x4e, 0x62, 0x2b, 0xd0, 0x25, 0x5b, 0x71, 0xab, 0x59,
-      0x44, 0xc5, 0x0f, 0x92, 0xb6, 0x34, 0x2c, 0xe7, 0xc2, 0xf6, 0xeb, 0x6c,
-      0x01, 0x87, 0x70, 0xa9, 0x08, 0x0e, 0x20, 0x54, 0x6e, 0xa9, 0x81, 0x2b,
-      0x7c, 0xe6, 0x5c, 0x7a, 0xa5, 0xae, 0x0a, 0xa6, 0x5d, 0x2f, 0x90, 0x36,
-      0xa9, 0xe4, 0x5c, 0x7d, 0xda, 0x0d, 0xc3, 0x2b, 0x31, 0x13, 0x65, 0xba,
-      0xcf, 0x48, 0x9d, 0x9e, 0x70, 0x88, 0x02, 0xb1, 0x62, 0x6c, 0x39, 0x2f,
-      0x9a, 0xa0, 0x0c, 0xb6, 0xd5, 0xa2, 0x37, 0xf3, 0xbc, 0xa3, 0x90, 0x8c,
-      0x0c, 0x85, 0x39, 0x93, 0xe9, 0x4a, 0x55, 0x8a, 0x05, 0x51, 0xa3, 0x75,
-      0x55, 0x51, 0x53, 0xd3, 0x44, 0x30, 0xb4, 0xf5, 0xa1, 0x6e, 0xd4, 0x48,
-      0x2d, 0x95, 0x06, 0x30, 0xca, 0x3f, 0xea, 0x06, 0x1c, 0xa0, 0xe5, 0x83,
-      0x6d, 0x18, 0x12, 0x70, 0x0b, 0xca, 0x26, 0xd3, 0x6d, 0x92, 0x0a, 0x3c,
-      0x49, 0xd9, 0x46, 0xcb, 0xd8, 0xa1, 0xf2, 0x01, 0x0a, 0x3e, 0x8b, 0x44,
-      0xe4, 0x9b, 0x14, 0x28, 0x23, 0x3a, 0x7a, 0x3a, 0x7e, 0x2c, 0x09, 0x64,
-      0xec, 0x47, 0xca, 0xc2, 0xb6, 0xa5, 0x27, 0x31, 0x0f, 0xe3, 0x19, 0x61,
-      0x45, 0xf0, 0xb7, 0x00, 0xb1, 0xbc, 0xac, 0xd9, 0x4b, 0x8a, 0xfb, 0x9e,
-      0x1f, 0x33, 0x66, 0xac, 0xb7, 0x83, 0xf3, 0x7a, 0xbd, 0xc8, 0x98, 0xbf,
-      0x1a, 0x6b, 0x9e, 0xf4, 0x8b, 0x60, 0x71, 0xe2, 0x9c, 0xa9, 0x48, 0x1c,
-      0x14, 0x83, 0x04, 0x03, 0x96, 0x4a, 0xa6, 0xf2, 0xae, 0xb2, 0x23, 0x42,
-      0xc0, 0x81, 0x6d, 0x7e, 0x02, 0x25, 0x7d, 0x41, 0xa8, 0x8f, 0x79, 0x0a,
-      0x13, 0x72, 0x71, 0x97, 0x42, 0xac, 0xaf, 0x76, 0x0d, 0x7b, 0x41, 0x29,
-      0x04, 0x64, 0x4d, 0x8b, 0x0b, 0x9c, 0x7f, 0xf3, 0x3a, 0xe7, 0xaa, 0x08,
-      0x06, 0xa7, 0x45, 0x4a, 0x38, 0xc8, 0x1c, 0xb5, 0x31, 0x9b, 0xf3, 0x46,
-      0x90, 0x21, 0x2b, 0x06, 0xe3, 0xb6, 0xf6, 0xab, 0x7f, 0x05, 0xe0, 0x1e,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-    },
-
-    .exp_dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-      0xe4, 0xb4, 0x3d, 0xd6, 0xb4, 0x02, 0xb6, 0x1c, 0x32, 0xf0, 0x19, 0x1d,
-      0x13, 0xb1, 0xb5, 0x4c, 0x50, 0xb8, 0xdc, 0xc2, 0x24, 0x48, 0x28, 0x64,
-      0xd7, 0xc8, 0x18, 0xf7, 0xa2, 0x42, 0xa8, 0x18, 0x1e, 0x32, 0x63, 0xbc,
-      0x43, 0x32, 0x50, 0x1b, 0x23, 0x59, 0xdb, 0xa9, 0xa8, 0x42, 0x18, 0x86,
-      0x24, 0x87, 0xa5, 0x4b, 0x4a, 0x6a, 0xfd, 0x4a, 0xa8, 0xed, 0x86, 0x68,
-      0x00, 0xe1, 0xaf, 0x36, 0xd7, 0xb6, 0xd3, 0x49, 0x81, 0x21, 0x74, 0x07,
-      0x38, 0xc4, 0xca, 0xfb, 0x10, 0xca, 0x54, 0x74, 0x3f, 0x4b, 0xe2, 0x07,
-      0xdd, 0xa5, 0x2e, 0xa1, 0xc9, 0xb1, 0x4a, 0x36, 0x81, 0x9f, 0x58, 0x18,
-      0x91, 0x5b, 0x74, 0x6f, 0xdc, 0xa9, 0x75, 0x7a, 0x4b, 0x59, 0x47, 0x69,
-      0xc8, 0x76, 0xa5, 0x30, 0xec, 0x95, 0xfb, 0x56, 0x8a, 0xce, 0xf0, 0x3f,
-      0x90, 0x04, 0x99, 0xb0, 0xb2, 0xca, 0xaa, 0x01, 0x58, 0xbe, 0x13, 0x7e,
-      0x86, 0x4c, 0x95, 0x46, 0x1b, 0x34, 0x22, 0xe8, 0xcd, 0x0a, 0x88, 0x8c,
-      0xa7, 0xd3, 0x02, 0xcf, 0xf8, 0x6a, 0x64, 0x03, 0x8f, 0xce, 0x28, 0x91,
-      0xba, 0xb6, 0x69, 0xd2, 0x81, 0x04, 0xa8, 0xf6, 0xa1, 0xb8, 0x64, 0xa1,
-      0x8e, 0x03, 0x7b, 0x39, 0x54, 0xb7, 0x56, 0x18, 0x45, 0xc4, 0x4a, 0x31,
-      0x8e, 0x87, 0x36, 0xfe, 0x09, 0x0d, 0xf1, 0x8a, 0x7d, 0xb7, 0xdb, 0x52,
-      0x8f, 0x24, 0x5d, 0x09, 0xe9, 0x01, 0xa5, 0x7a, 0x40, 0xc9, 0x3a, 0x0b,
-      0xb1, 0x77, 0x24, 0x80, 0xb7, 0x89, 0xa4, 0x98, 0x25, 0xf7, 0xd4, 0x7e,
-      0xe5, 0x7c, 0x73, 0xb5, 0xf3, 0x4c, 0x80, 0x19, 0x24, 0xea, 0xeb, 0x60,
-      0xe8, 0x29, 0x87, 0xe0, 0xb9, 0x6f, 0x50, 0x69, 0x45, 0x34, 0x98, 0x23,
-      0x93, 0xd7, 0x0b, 0xaa, 0x67, 0x65, 0xcf, 0xb8, 0xc0, 0xe0, 0x81, 0x17,
-      0xa2, 0x12, 0xa7, 0xe8, 0x0c, 0x14, 0x16, 0xc4, 0xb1, 0x7f, 0xd6, 0x55,
-      0xcf, 0x62, 0x89, 0xe3, 0xc6, 0x12, 0x92, 0xf2, 0x0a, 0x2c, 0x82, 0x9d,
-      0x94, 0x04, 0xc9, 0x6a, 0x34, 0x11, 0x83, 0x0b, 0x9f, 0x20, 0x4c, 0x01,
-      0x02, 0xf2, 0x06, 0x51, 0x18, 0x77, 0xf4, 0x6a, 0x89, 0x31, 0xdc, 0x01,
-      0x5d, 0x00, 0x03, 0xfc, 0x78, 0xb1, 0xe6, 0x55, 0x12, 0x3c, 0xa0, 0x14,
-      0xbd, 0xc4, 0xc3, 0x92, 0xbb, 0xaf, 0x7d, 0x1c, 0x4e, 0x99, 0xe7, 0x93,
-      0xf5, 0x22, 0x28, 0xaf, 0xe3, 0xc9, 0x34, 0xf4, 0xc4, 0xc3, 0x36, 0x36,
-      0xa5, 0x60, 0x93, 0x7e, 0xc0, 0xa2, 0x65, 0xa6, 0x96, 0x62, 0x52, 0x81,
-      0xdf, 0x60, 0x7f, 0x0a, 0x4c, 0x06, 0x62, 0xd3, 0x77, 0x70, 0x03, 0x50,
-      0x2f, 0x47, 0x4e, 0xb7, 0xe8, 0x94, 0xca, 0xf4, 0x47, 0x9f, 0xea, 0xb4,
-      0x18, 0xb1, 0x36, 0x04, 0x71, 0xb9, 0x6f, 0xda, 0xbe, 0x8c, 0xf4, 0x5f,
-      0x3c, 0x59, 0xce, 0x79, 0x99, 0x2e, 0xf8, 0xab, 0x1f, 0x4a, 0x8a, 0x1d,
-      0xc1, 0xe0, 0x30, 0xba, 0xf9, 0xc0, 0x21, 0x71, 0x42, 0xb7, 0xc9, 0x38,
-      0x55, 0xd8, 0x34, 0x1f, 0x49, 0x23, 0xcd, 0x27, 0x66, 0x93, 0xd3, 0x68,
-      0x6f, 0xc4, 0xc9, 0x6c, 0x47, 0x03, 0xad, 0x60, 0x4c, 0x34, 0x38, 0x58,
-      0x2b, 0xfb, 0x03, 0x6f, 0xd9, 0x62, 0xb0, 0xf8, 0xa0, 0xf4, 0xd6, 0x22,
-      0x3b, 0x0c, 0xb0, 0x38, 0x32, 0x15, 0xe7, 0xdb, 0x8c, 0x75, 0x82, 0x93,
-      0x39, 0x33, 0xad, 0x09, 0x51, 0x19, 0xfb, 0xca, 0x1f, 0x35, 0xd0, 0x3e,
-      0x82, 0x56, 0x2a, 0x4e, 0x17, 0x20, 0x4a, 0x45, 0x59, 0x27, 0x06, 0x0a,
-      0xef, 0xec, 0x25, 0x96, 0xc6, 0xca, 0x48, 0x7b, 0x3e, 0x3b, 0x94, 0xcc,
-      0x4d, 0x3b, 0x15, 0x84, 0xb7, 0x90, 0x80, 0x55, 0x5c, 0x87, 0x9c, 0x69,
-      0xae, 0xc2, 0xa8, 0xca, 0xcc, 0xb0, 0x0e, 0xf0, 0x23, 0xab, 0xa8, 0x86,
-      0x72, 0x12, 0x01, 0x34, 0x2a, 0x2b, 0xe6, 0x8b, 0x67, 0xc9, 0x31, 0x24,
-      0x80, 0x44, 0x1d, 0x9b, 0x71, 0x56, 0x8e, 0x69, 0x0e, 0x20, 0x72, 0x8f,
-      0xb2, 0x27, 0x49, 0xcc, 0xca, 0x94, 0x86, 0x79, 0xaa, 0x70, 0xd5, 0xac,
-      0xef, 0xe3, 0x8a, 0x91, 0xe0, 0x26, 0xf4, 0x25, 0x08, 0xb4, 0x49, 0xc7,
-      0x19, 0xd5, 0x70, 0x27, 0xfa, 0x42, 0xb6, 0x23, 0xb2, 0x80, 0x14, 0x69,
-      0x91, 0x90, 0x0c, 0x85, 0x4b, 0x72, 0x5d, 0xc3, 0xb6, 0x56, 0xc4, 0xb9,
-      0xe7, 0xa6, 0x97, 0xbd, 0x57, 0x19, 0x11, 0x5b, 0x7c, 0xbf, 0xd2, 0x68,
-      0x21, 0x49, 0x35, 0x05, 0xdb, 0x5f, 0x9e, 0x40, 0xa4, 0x4f, 0x2a, 0x38,
-      0x17, 0x7c, 0x3b, 0xc4, 0x52, 0x5b, 0xfe, 0x05, 0x60, 0x6e, 0xc6, 0x5b,
-      0x77, 0x29, 0x4c, 0x16, 0xa1, 0x8c, 0x93, 0x94, 0x53, 0xc6, 0x61, 0x41,
-      0x78, 0x9a, 0x9d, 0xb5, 0x51, 0x5a, 0x2d, 0x23, 0x0a, 0x34, 0xa1, 0xad,
-      0x5e, 0x62, 0x2a, 0x0c, 0x27, 0xcb, 0xca, 0x07, 0xc4, 0x9f, 0x35, 0x9e,
-      0x4f, 0x25, 0x5f, 0xd7, 0x04, 0x8a, 0x93, 0xe8, 0xcf, 0x12, 0x08, 0x64,
-      0xd0, 0x69, 0x66, 0x4c, 0xc3, 0x0b, 0xe2, 0x61, 0xb6, 0x31, 0xa9, 0x11,
-      0x43, 0x6b, 0x49, 0x1e, 0xf0, 0x19, 0x86, 0xea, 0x3b, 0xf8, 0x91, 0x5f,
-      0x20, 0xca, 0x52, 0x66, 0x41, 0xcb, 0x44, 0xfa, 0x96, 0x31, 0x69, 0xb2,
-      0x09, 0x9b, 0x30, 0x7f, 0x86, 0x13, 0x15, 0x96, 0x02, 0x49, 0x88, 0x94,
-      0x6b, 0x01, 0x4e, 0x12, 0xf6, 0x74, 0x65, 0x89, 0x7a, 0xbe, 0x25, 0x04,
-      0xf2, 0xf8, 0x13, 0x9a, 0x7b, 0x1c, 0x94, 0xbb, 0x5f, 0xfc, 0x73, 0x24,
-      0x70, 0x1c, 0xa4, 0xa6, 0x2b, 0xcf, 0xa3, 0x42, 0xba, 0xfe, 0x53, 0x6f,
-      0xc4, 0x02, 0x2c, 0xbc, 0xb1, 0x9a, 0x2b, 0x74, 0x6f, 0xdd, 0x44, 0x2c,
-      0x45, 0x6b, 0x98, 0xa2, 0x77, 0x6f, 0x0c, 0x40, 0x9f, 0x94, 0x43, 0x0d,
-      0x33, 0xa0, 0xbd, 0x94, 0x36, 0x38, 0x1f, 0x49, 0x43, 0xbc, 0xc6, 0x8c,
-      0x6e, 0xe0, 0x89, 0x57, 0xc1, 0xb9, 0x4c, 0x95, 0x43, 0x74, 0xe6, 0xb0,
-      0x1b, 0x83, 0xaf, 0x8b, 0x3b, 0x2b, 0xe0, 0x18, 0x47, 0xe5, 0xd0, 0x4f,
-      0x74, 0x2b, 0xbb, 0x30, 0xbc, 0xcf, 0xb8, 0x52, 0x8b, 0x58, 0xf9, 0x7e,
-      0x5a, 0xb8, 0x48, 0xae, 0x68, 0x30, 0x01, 0x66, 0x0e, 0x69, 0xb4, 0xbc,
-      0xa0, 0x60, 0x2c, 0xbb, 0x43, 0xb3, 0xd5, 0xa2, 0x88, 0xaa, 0x8b, 0x93,
-      0x8c, 0x26, 0x67, 0x0d, 0x31, 0xa7, 0x9f, 0x70, 0x4a, 0x14, 0x54, 0x6b,
-      0x52, 0xfc, 0xbc, 0x81, 0x69, 0xa8, 0xfd, 0xd5, 0x40, 0x66, 0x0a, 0x3a,
-      0x56, 0xe3, 0x69, 0x39, 0xa7, 0x53, 0xd6, 0x39, 0x24, 0x73, 0x58, 0xad,
-      0xb6, 0xb4, 0xb7, 0xeb, 0xf0, 0x97, 0x96, 0x48, 0x25, 0xb7, 0xea, 0x80,
-      0x05, 0x68, 0x0f, 0x2a, 0xe5, 0x82, 0x0a, 0x6b, 0xcf, 0x60, 0xa6, 0x15,
-      0x28, 0x2b, 0x71, 0x07, 0x36, 0xba, 0xe6, 0xbb, 0x55, 0xe7, 0x48, 0xad,
-      0x3f, 0xb7, 0x3d, 0xd3, 0xac, 0xa0, 0x3e, 0x0a, 0x68, 0xf6, 0xb7, 0x13,
-      0xcf, 0xa6, 0x1b, 0x20, 0x16, 0xca, 0x8a, 0x47, 0x64, 0xaf, 0x25, 0x6e,
-      0xb9, 0xf8, 0x76, 0xfe, 0x6a, 0x70, 0x3f, 0xa1, 0x64, 0xd6, 0xec, 0x9a,
-      0x27, 0xc6, 0x84, 0xfd, 0xe5, 0x00, 0x1d, 0x75, 0x94, 0xdf, 0x70, 0x04,
-      0x59, 0x10, 0x46, 0xb3, 0xca, 0xaf, 0x65, 0x48, 0x81, 0x9b, 0x60, 0x38,
-      0xcd, 0xf3, 0x78, 0xa0, 0x33, 0xb8, 0x7c, 0x8c, 0x1a, 0x45, 0x04, 0x57,
-      0x13, 0x12, 0x5d, 0x4e, 0x61, 0x7f, 0x7c, 0x52, 0xb7, 0xdc, 0x27, 0x0c,
-      0x7c, 0x55, 0x2a, 0xdb, 0x03, 0x2e, 0xf6, 0x38, 0x11, 0x71, 0x3b, 0x06,
-      0x6e, 0x33, 0xc2, 0xc1, 0x42, 0x5b, 0x02, 0x14, 0xa1, 0xe3, 0xd8, 0xcf,
-      0x69, 0xb5, 0xc3, 0x37, 0xd1, 0x6b, 0x12, 0xd3, 0x64, 0x60, 0xfc, 0x3a,
-      0xd1, 0x4c, 0x27, 0x20, 0xf8, 0x69, 0xae, 0x4b, 0xa2, 0x94, 0xf6, 0x2c,
-      0x67, 0xe2, 0x47, 0x40, 0xb8, 0x93, 0x52, 0xa3, 0x8a, 0x73, 0x4c, 0xb5,
-      0x35, 0xb5, 0x8b, 0x6d, 0x94, 0x56, 0x8d, 0x2c, 0x65, 0xa6, 0xd6, 0x62,
-      0x3b, 0xb5, 0xc9, 0x05, 0x51, 0x3f, 0x62, 0x20, 0x1d, 0x48, 0xcb, 0x60,
-      0xa9, 0x46, 0xc9, 0x7c, 0x86, 0x5f, 0x96, 0xc9, 0xc4, 0xdf, 0x39, 0x33,
-      0x45, 0x23, 0xa1, 0xd1, 0x53, 0x95, 0xa9, 0x01, 0x95, 0xa3, 0xb5, 0x7b,
-      0x34, 0xb1, 0xb7, 0xc1, 0x27, 0x94, 0x4c, 0x2a, 0x2a, 0x39, 0xc2, 0xc0,
-      0x67, 0xa7, 0x14, 0xac, 0x13, 0xcb, 0x76, 0x8a, 0x68, 0xb4, 0xab, 0x6a,
-      0x97, 0x34, 0x69, 0xf0, 0xa4, 0x42, 0xd7, 0xe0, 0x7a, 0x70, 0x25, 0x43,
-      0x29, 0xd8, 0x01, 0x92, 0x69, 0x27, 0xd7, 0xfb, 0xbc, 0xc8, 0x88, 0x47,
-      0x68, 0x62, 0x33, 0x6e, 0xa2, 0x02, 0x6d, 0x68, 0xaa, 0x34, 0x8b, 0x4b,
-      0x6e, 0x3c, 0xb9, 0x72, 0xd4, 0x2c, 0xc0, 0x98, 0x29, 0x14, 0x79, 0xa4,
-      0xbe, 0x24, 0xb2, 0x33, 0xa7, 0x15, 0x5f, 0xb9, 0xaa, 0x77, 0x35, 0x3e,
-      0xbb, 0xc6, 0x4f, 0x0e, 0x0a, 0xa0, 0x28, 0x4a, 0xcc, 0x51, 0xf5, 0xc9,
-      0x26, 0x31, 0x5e, 0x0b, 0x44, 0x00, 0x79, 0xa7, 0x61, 0x9b, 0xb4, 0xb2,
-      0xe8, 0x08, 0x80, 0xd5, 0x1c, 0x1c, 0x18, 0xcb, 0xcc, 0xae, 0xa0, 0x4d,
-      0xe7, 0xc5, 0x69, 0xbe, 0xf5, 0x31, 0x61, 0xe3, 0xc3, 0xb7, 0x31, 0x0e,
-      0x91, 0x37, 0x53, 0x0e, 0x41, 0x0d, 0x40, 0xca, 0x55, 0xa6, 0xa5, 0x1f,
-      0x62, 0xe2, 0x21, 0x4e, 0x62, 0x2b, 0xd0, 0x25, 0x5b, 0x71, 0xab, 0x59,
-      0x44, 0xc5, 0x0f, 0x92, 0xb6, 0x34, 0x2c, 0xe7, 0xc2, 0xf6, 0xeb, 0x6c,
-      0x01, 0x87, 0x70, 0xa9, 0x08, 0x0e, 0x20, 0x54, 0x6e, 0xa9, 0x81, 0x2b,
-      0x7c, 0xe6, 0x5c, 0x7a, 0xa5, 0xae, 0x0a, 0xa6, 0x5d, 0x2f, 0x90, 0x36,
-      0xa9, 0xe4, 0x5c, 0x7d, 0xda, 0x0d, 0xc3, 0x2b, 0x31, 0x13, 0x65, 0xba,
-      0xcf, 0x48, 0x9d, 0x9e, 0x70, 0x88, 0x02, 0xb1, 0x62, 0x6c, 0x39, 0x2f,
-      0x9a, 0xa0, 0x0c, 0xb6, 0xd5, 0xa2, 0x37, 0xf3, 0xbc, 0xa3, 0x90, 0x8c,
-      0x0c, 0x85, 0x39, 0x93, 0xe9, 0x4a, 0x55, 0x8a, 0x05, 0x51, 0xa3, 0x75,
-      0x55, 0x51, 0x53, 0xd3, 0x44, 0x30, 0xb4, 0xf5, 0xa1, 0x6e, 0xd4, 0x48,
-      0x2d, 0x95, 0x06, 0x30, 0xca, 0x3f, 0xea, 0x06, 0x1c, 0xa0, 0xe5, 0x83,
-      0x6d, 0x18, 0x12, 0x70, 0x0b, 0xca, 0x26, 0xd3, 0x6d, 0x92, 0x0a, 0x3c,
-      0x49, 0xd9, 0x46, 0xcb, 0xd8, 0xa1, 0xf2, 0x01, 0x0a, 0x3e, 0x8b, 0x44,
-      0xe4, 0x9b, 0x14, 0x28, 0x23, 0x3a, 0x7a, 0x3a, 0x7e, 0x2c, 0x09, 0x64,
-      0xec, 0x47, 0xca, 0xc2, 0xb6, 0xa5, 0x27, 0x31, 0x0f, 0xe3, 0x19, 0x61,
-      0x45, 0xf0, 0xb7, 0x00, 0xb1, 0xbc, 0xac, 0xd9, 0x4b, 0x8a, 0xfb, 0x9e,
-      0x1f, 0x33, 0x66, 0xac, 0xb7, 0x83, 0xf3, 0x7a, 0xbd, 0xc8, 0x98, 0xbf,
-      0x1a, 0x6b, 0x9e, 0xf4, 0x8b, 0x60, 0x71, 0xe2, 0x9c, 0xa9, 0x48, 0x1c,
-      0x14, 0x83, 0x04, 0x03, 0x96, 0x4a, 0xa6, 0xf2, 0xae, 0xb2, 0x23, 0x42,
-      0xc0, 0x81, 0x6d, 0x7e, 0x02, 0x25, 0x7d, 0x41, 0xa8, 0x8f, 0x79, 0x0a,
-      0x13, 0x72, 0x71, 0x97, 0x42, 0xac, 0xaf, 0x76, 0x0d, 0x7b, 0x41, 0x29,
-      0x04, 0x64, 0x4d, 0x8b, 0x0b, 0x9c, 0x7f, 0xf3, 0x3a, 0xe7, 0xaa, 0x08,
-      0x06, 0xa7, 0x45, 0x4a, 0x38, 0xc8, 0x1c, 0xb5, 0x31, 0x9b, 0xf3, 0x46,
-      0x90, 0x21, 0x2b, 0x06, 0xe3, 0xb6, 0xf6, 0xab, 0x7f, 0x05, 0xe0, 0x1e,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x10, 0x27, 0x76, 0xaa,
-      0x21, 0xa3, 0xd0, 0xb9, 0x7c, 0x61, 0xc5, 0x0f, 0xb8, 0x3c, 0xe3, 0xc4,
-      0xc4, 0x6b, 0xc7, 0x4e, 0x18, 0x4a, 0x04, 0x35, 0x5b, 0x46, 0x63, 0x50,
-      0x82, 0x33, 0x42, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-  }, {
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Key Generation -- ML-KEM-1024",
-
-    .seed = {
-      // z
-      0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED, 0x63, 0x88, 0x63, 0x8E,
-      0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F, 0xFD, 0xF2, 0xB6, 0x7C,
-      0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
-
-      // d
-      0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED, 0x63, 0x88, 0x63, 0x8E,
-      0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F, 0xFD, 0xF2, 0xB6, 0x7C,
-      0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
-    },
-
-    .exp_ek = {
-      0x70, 0xE1, 0x3F, 0x30, 0x15, 0x17, 0xB5, 0xA4, 0x0D, 0x70, 0x36, 0x1F,
-      0x63, 0x09, 0x41, 0x60, 0x67, 0x64, 0x6D, 0x2B, 0x71, 0x36, 0x62, 0x6B,
-      0xCC, 0xCC, 0x17, 0x0C, 0x66, 0xCE, 0xD4, 0x90, 0xC7, 0x35, 0x34, 0x4B,
-      0x62, 0x77, 0x09, 0x7C, 0xA9, 0x14, 0x21, 0x2A, 0x29, 0x2D, 0xD1, 0x22,
-      0xFB, 0xB6, 0x9F, 0xDE, 0xCA, 0x47, 0xFA, 0xB4, 0x53, 0x2B, 0x8C, 0x80,
-      0xCE, 0xB7, 0x7F, 0x9C, 0x54, 0x3E, 0x0B, 0xF1, 0x53, 0x6D, 0x1C, 0x0C,
-      0xAE, 0x07, 0x7E, 0x2C, 0xA7, 0x86, 0x2B, 0x45, 0xA4, 0x10, 0x46, 0x9C,
-      0xC5, 0xB7, 0x06, 0xBA, 0xE0, 0x05, 0x1C, 0xB2, 0x96, 0x1D, 0xB7, 0x27,
-      0x0B, 0x75, 0xB7, 0x11, 0x69, 0x8D, 0x2B, 0x80, 0x70, 0x40, 0xD5, 0x62,
-      0x81, 0x29, 0x43, 0x6F, 0xBB, 0x58, 0xF1, 0x20, 0x3F, 0x75, 0x56, 0x14,
-      0x65, 0xF5, 0x42, 0x57, 0xE4, 0x4D, 0x33, 0xF5, 0x12, 0xD6, 0x33, 0x43,
-      0x1D, 0x00, 0xA2, 0xFB, 0x02, 0x30, 0xC9, 0xBB, 0x9C, 0xDD, 0xFC, 0x83,
-      0xBD, 0x65, 0xC9, 0x74, 0x45, 0x30, 0x21, 0x86, 0xA1, 0x72, 0x23, 0xAD,
-      0x21, 0x33, 0x28, 0x03, 0xB9, 0x09, 0xE5, 0xE5, 0x67, 0x19, 0x70, 0xBB,
-      0xB0, 0xF1, 0xC4, 0x83, 0x7B, 0xB8, 0x42, 0x73, 0xBA, 0x67, 0x5A, 0xC0,
-      0x74, 0xC5, 0x29, 0x0B, 0x41, 0x1C, 0x25, 0x00, 0x65, 0x70, 0x59, 0x33,
-      0x9D, 0xE3, 0x92, 0xF9, 0xCA, 0x30, 0x89, 0x52, 0xA2, 0x20, 0x1A, 0x58,
-      0x87, 0x67, 0xAD, 0xC0, 0x35, 0xBD, 0xF3, 0x30, 0x24, 0xEA, 0x3B, 0x9A,
-      0x83, 0xC5, 0xA0, 0xB9, 0xC5, 0x42, 0x5D, 0x14, 0x07, 0x0C, 0x81, 0xAA,
-      0xDA, 0x26, 0xBA, 0xC3, 0xFB, 0xB8, 0xD4, 0xB7, 0xCF, 0xEE, 0x03, 0x92,
-      0x37, 0x5C, 0x68, 0x42, 0x73, 0x51, 0xDF, 0xEC, 0x63, 0x60, 0x9B, 0xBB,
-      0x50, 0xB4, 0x63, 0xE0, 0x40, 0x92, 0x85, 0x70, 0x09, 0xD1, 0xE5, 0xB8,
-      0x1D, 0x70, 0x7D, 0x14, 0xB8, 0x33, 0xCD, 0x4A, 0x0B, 0x55, 0x1B, 0xAA,
-      0x13, 0xEC, 0x48, 0x8A, 0x15, 0x03, 0xB0, 0x46, 0x7E, 0xE4, 0x02, 0x3C,
-      0x3F, 0xE0, 0x32, 0xC7, 0x82, 0x25, 0x06, 0x38, 0x86, 0xE2, 0x46, 0x8E,
-      0x00, 0xF7, 0x00, 0x07, 0x2A, 0x2E, 0xC8, 0xDA, 0x6A, 0xFB, 0x20, 0x6C,
-      0x91, 0x90, 0x44, 0x33, 0xBB, 0xCC, 0xB0, 0xE7, 0x6F, 0x42, 0x46, 0x8C,
-      0x40, 0xEB, 0x5F, 0x59, 0xCB, 0x9A, 0xE1, 0xB0, 0x35, 0xE5, 0x21, 0x51,
-      0x0B, 0xF2, 0x16, 0xA1, 0xAB, 0xCB, 0x19, 0x03, 0x3B, 0x7A, 0x65, 0x88,
-      0x97, 0xC6, 0x58, 0x74, 0xD5, 0x13, 0x51, 0x83, 0x14, 0x9F, 0x97, 0x9E,
-      0x55, 0x3C, 0xCF, 0xBF, 0xA3, 0x90, 0x0C, 0xDA, 0x6F, 0x01, 0x96, 0x0B,
-      0x75, 0x15, 0x7F, 0x54, 0x53, 0xAA, 0x6E, 0x73, 0xB3, 0xED, 0x90, 0x2F,
-      0x7D, 0x7C, 0x93, 0x05, 0x97, 0x1B, 0xDF, 0x72, 0x2E, 0x29, 0x37, 0x16,
-      0x9A, 0x1B, 0xC0, 0xFA, 0xEB, 0x6C, 0x92, 0xF7, 0x15, 0x0D, 0x23, 0x30,
-      0x87, 0x7C, 0x5D, 0xC5, 0x24, 0x9A, 0xAE, 0x20, 0x30, 0x26, 0x34, 0xC5,
-      0xC5, 0xB2, 0x30, 0x53, 0x52, 0x10, 0x28, 0x12, 0x25, 0x42, 0xF4, 0x85,
-      0xA0, 0xEA, 0xC8, 0x69, 0x22, 0x37, 0x20, 0x63, 0x36, 0x51, 0xF5, 0xB2,
-      0x47, 0xC6, 0x62, 0xB3, 0x1A, 0x10, 0x53, 0x8C, 0xA7, 0x49, 0x1B, 0x14,
-      0x37, 0xAA, 0x74, 0xF4, 0x28, 0x2D, 0x12, 0x97, 0x4D, 0x9C, 0x93, 0x4D,
-      0xF2, 0x14, 0x78, 0x5B, 0x64, 0x18, 0x46, 0x8B, 0x92, 0xE5, 0x25, 0x28,
-      0xC8, 0x44, 0x7A, 0x1C, 0xA4, 0x22, 0xFA, 0x6C, 0xC8, 0x8E, 0x28, 0xB0,
-      0x59, 0xF0, 0x4B, 0x23, 0x59, 0x73, 0x23, 0xF7, 0x2F, 0x3E, 0x23, 0x36,
-      0xF8, 0x7C, 0x47, 0x90, 0x5C, 0xBA, 0x65, 0x5B, 0xB7, 0x3F, 0xC3, 0x2E,
-      0x18, 0xD4, 0xB7, 0x87, 0x05, 0xC7, 0x82, 0xEB, 0xCB, 0x43, 0xE2, 0x78,
-      0x5C, 0x82, 0xC5, 0xAF, 0x24, 0xB0, 0xE1, 0x69, 0x9C, 0xFB, 0xC0, 0x25,
-      0x74, 0x75, 0x79, 0x9A, 0x53, 0x9B, 0x11, 0xA5, 0x0F, 0x4D, 0xF2, 0xB7,
-      0xFA, 0xA2, 0x0B, 0xD8, 0x82, 0x75, 0x15, 0xCA, 0x37, 0x0F, 0x89, 0xC0,
-      0xD4, 0xC6, 0x09, 0x02, 0xF6, 0x56, 0x7C, 0xD6, 0x0B, 0x08, 0x60, 0xA5,
-      0x5B, 0xC8, 0x57, 0x2C, 0x43, 0x6C, 0x24, 0x6A, 0xC2, 0x76, 0x64, 0x4E,
-      0x7D, 0x60, 0x2A, 0xA5, 0x7C, 0x01, 0x66, 0x20, 0x18, 0x14, 0x99, 0x1C,
-      0x1B, 0xD7, 0x5C, 0x7C, 0x47, 0xC3, 0x48, 0xB6, 0x7D, 0x77, 0x61, 0x33,
-      0x86, 0x90, 0x81, 0x44, 0xEA, 0x83, 0xFF, 0x72, 0x1F, 0x9A, 0x50, 0x07,
-      0x6C, 0x51, 0x01, 0x64, 0xD1, 0x8E, 0x05, 0xD0, 0x5D, 0x98, 0x84, 0xC4,
-      0x41, 0x46, 0xA0, 0x7C, 0xCA, 0xCF, 0x89, 0x04, 0x98, 0xED, 0x1A, 0x19,
-      0xB2, 0xA1, 0x54, 0x31, 0x72, 0x9D, 0xC1, 0xF1, 0x2B, 0x7E, 0xA1, 0x0F,
-      0x9F, 0x92, 0x80, 0x62, 0xD1, 0x45, 0x4B, 0x4B, 0x9F, 0x68, 0xE5, 0x99,
-      0x90, 0x29, 0x0B, 0xE3, 0x72, 0x8B, 0x32, 0x89, 0x56, 0x93, 0x63, 0xAB,
-      0x10, 0x05, 0x13, 0x1B, 0x23, 0x81, 0xA0, 0x8C, 0xC2, 0xBF, 0x94, 0x3E,
-      0x95, 0xD5, 0xB2, 0x1B, 0xC6, 0xAA, 0xBC, 0x22, 0x73, 0x34, 0x8B, 0xC7,
-      0x2B, 0xD0, 0x93, 0xB7, 0xB5, 0x61, 0x7A, 0xE8, 0x7F, 0x60, 0x2B, 0xB9,
-      0x89, 0xE6, 0xAF, 0xC4, 0x4B, 0x81, 0x51, 0x20, 0x76, 0xA3, 0xA8, 0x76,
-      0xE0, 0xE2, 0x5F, 0x97, 0x62, 0xB4, 0x62, 0x08, 0x19, 0x85, 0x50, 0x2F,
-      0x26, 0xB2, 0x87, 0xA2, 0x93, 0x6D, 0x5B, 0x1A, 0xCF, 0xFC, 0xEC, 0x4E,
-      0xEE, 0x77, 0xA9, 0xCB, 0xA9, 0x80, 0xEB, 0x9B, 0x5F, 0xDE, 0x75, 0x53,
-      0x9F, 0x65, 0x09, 0x04, 0x67, 0x7D, 0xBE, 0x29, 0xAB, 0x8B, 0xB9, 0x18,
-      0xA3, 0x49, 0x48, 0x03, 0xEC, 0xA5, 0x9A, 0x2C, 0x32, 0xE5, 0xB5, 0xC8,
-      0x3B, 0x0B, 0x80, 0xB1, 0x10, 0x2C, 0xD7, 0xD9, 0x48, 0x2B, 0x45, 0x9B,
-      0x6B, 0x74, 0x49, 0x1E, 0xC3, 0x0C, 0x4B, 0xE7, 0x7C, 0x2B, 0x52, 0x4A,
-      0xF7, 0xB3, 0xAD, 0x1F, 0x71, 0x34, 0x1D, 0xF0, 0xA7, 0x6F, 0x25, 0x5C,
-      0x29, 0x03, 0xC8, 0x82, 0x08, 0x07, 0x93, 0x79, 0x93, 0x0A, 0x95, 0x13,
-      0xF3, 0x90, 0x12, 0x6E, 0x73, 0x2A, 0x2B, 0xB0, 0x94, 0xBF, 0xA6, 0xBF,
-      0x0A, 0x43, 0x2B, 0xCD, 0x65, 0x7D, 0xAF, 0xCB, 0x25, 0xC8, 0xBB, 0x15,
-      0xE0, 0x95, 0x5D, 0x09, 0x9B, 0x74, 0xFF, 0x1A, 0x4D, 0xE6, 0x55, 0x9C,
-      0xD6, 0x79, 0x7C, 0x38, 0xC4, 0x8C, 0x11, 0x34, 0xCA, 0x2C, 0x97, 0x92,
-      0x43, 0xF3, 0x15, 0x2A, 0xF4, 0xBB, 0xE4, 0xD7, 0xA6, 0xBC, 0x09, 0x87,
-      0x21, 0x33, 0x92, 0x0C, 0xD2, 0x3B, 0x3E, 0xF9, 0x84, 0x8C, 0xCC, 0x68,
-      0x45, 0xD6, 0x47, 0xB5, 0x38, 0x75, 0x57, 0x73, 0x65, 0x13, 0xD5, 0x85,
-      0x60, 0x84, 0x51, 0x92, 0xF9, 0x26, 0x51, 0x59, 0x93, 0x2E, 0x57, 0x2A,
-      0x88, 0xC4, 0x4E, 0x65, 0x66, 0x76, 0x0C, 0x06, 0x1C, 0x67, 0xFC, 0xB5,
-      0xBF, 0x21, 0x00, 0x95, 0xE2, 0x14, 0xDA, 0x74, 0x53, 0x57, 0xE3, 0x69,
-      0x96, 0xD8, 0xC0, 0x66, 0x31, 0x1B, 0xBC, 0x76, 0x1A, 0x1F, 0xD2, 0x52,
-      0x73, 0xD2, 0x1E, 0xAB, 0x50, 0x01, 0x05, 0x63, 0xCD, 0x64, 0x68, 0xA4,
-      0xEA, 0x83, 0x6B, 0x6D, 0x64, 0xBD, 0x2B, 0xD7, 0x6D, 0xBE, 0x35, 0x82,
-      0xD5, 0x73, 0x6A, 0x60, 0x5A, 0x55, 0x09, 0xFC, 0x28, 0x78, 0x9B, 0x56,
-      0xB8, 0x84, 0xAE, 0x9A, 0x60, 0x41, 0x5F, 0x55, 0x67, 0x4B, 0xE6, 0x01,
-      0x57, 0x6C, 0x7C, 0xEE, 0x58, 0x14, 0x3B, 0xF0, 0x54, 0x80, 0x6A, 0xBC,
-      0xB3, 0x45, 0xA2, 0x56, 0xCB, 0xC4, 0x54, 0xE3, 0x43, 0xF3, 0xCC, 0x7A,
-      0xDE, 0x65, 0x56, 0x2F, 0xD2, 0x9E, 0xB2, 0x59, 0x73, 0x7B, 0xB3, 0xCF,
-      0x96, 0x49, 0xBD, 0xEA, 0x28, 0x3F, 0xB0, 0x72, 0x65, 0x67, 0x7C, 0x98,
-      0x08, 0xD1, 0x31, 0x19, 0xC0, 0xA2, 0xAD, 0xF7, 0x45, 0xDE, 0x69, 0x75,
-      0xF4, 0x56, 0x2C, 0xD6, 0x15, 0x57, 0xB3, 0x96, 0x5D, 0x2B, 0x07, 0x2F,
-      0x00, 0x0A, 0xA7, 0xE0, 0xA3, 0x57, 0xE1, 0x25, 0x3E, 0xAF, 0xEA, 0x7F,
-      0xDF, 0xCC, 0x92, 0xFA, 0x87, 0x63, 0x0D, 0xD2, 0x27, 0x6C, 0xE4, 0x2E,
-      0x82, 0x0B, 0x69, 0xD1, 0xFC, 0x2E, 0x47, 0xD5, 0xC4, 0x98, 0xA5, 0x5B,
-      0x3B, 0x29, 0xC3, 0x4E, 0x64, 0x90, 0x3D, 0x04, 0x7A, 0xB1, 0xC0, 0x40,
-      0x24, 0x95, 0x8F, 0x70, 0x11, 0x95, 0xF5, 0xD1, 0x3E, 0xC6, 0x70, 0x6B,
-      0x84, 0x48, 0x50, 0x3A, 0x54, 0x99, 0x22, 0xA5, 0x8A, 0x24, 0xB6, 0x7C,
-      0x93, 0x63, 0x27, 0x56, 0xB7, 0x7D, 0x22, 0x54, 0x07, 0x31, 0x61, 0x71,
-      0xDE, 0xEC, 0x56, 0x71, 0x44, 0x35, 0xCF, 0x94, 0xCC, 0xF4, 0x59, 0x9E,
-      0x00, 0xD1, 0x0E, 0x56, 0x96, 0x22, 0xBA, 0xDA, 0x82, 0x0C, 0x45, 0x2F,
-      0x25, 0x42, 0xAD, 0xF0, 0x87, 0x65, 0xCA, 0x93, 0xAE, 0x38, 0xEB, 0x02,
-      0x5D, 0xE3, 0x1C, 0xFF, 0x79, 0x74, 0x54, 0x9A, 0x78, 0x25, 0xA8, 0x31,
-      0xDD, 0x05, 0x4E, 0x87, 0xB8, 0x4C, 0x5F, 0x25, 0x47, 0xFF, 0x47, 0xB4,
-      0x6F, 0x88, 0xC9, 0x9F, 0x15, 0x48, 0xE9, 0x33, 0xA6, 0xF4, 0xD8, 0x7F,
-      0x1A, 0x4A, 0x1B, 0x00, 0xE3, 0x9E, 0x02, 0xD6, 0x0E, 0x51, 0xEB, 0x60,
-      0x3C, 0x1C, 0x0D, 0x80, 0x7A, 0xCD, 0xAB, 0x08, 0xBA, 0xA2, 0xB9, 0x98,
-      0x69, 0xB7, 0x5C, 0xA2, 0xC4, 0xB9, 0x63, 0x68, 0xB5, 0x17, 0x80, 0xBD,
-      0x1E, 0xC7, 0x5B, 0x11, 0x0B, 0x9F, 0xA6, 0x65, 0x56, 0x87, 0x6C, 0x5F,
-      0x48, 0x79, 0x7D, 0x09, 0x01, 0x38, 0xF7, 0x54, 0xAE, 0x30, 0x53, 0x3D,
-      0x36, 0xAA, 0x44, 0xB9, 0xB1, 0x70, 0x2A, 0x6A, 0x8A, 0x56, 0x62, 0x6B,
-      0xF0, 0x45, 0x1A, 0x37, 0xA7, 0xAC, 0x1A, 0x33, 0x70, 0x76, 0xE5, 0x1E,
-      0x0A, 0x6B, 0x03, 0x00, 0xC2, 0xC7, 0x90, 0xA4, 0x43, 0x7E, 0xA2, 0x8D,
-      0x7E, 0xC9, 0x8C, 0x41, 0x9B, 0x37, 0xD6, 0xAA, 0x97, 0x04, 0x17, 0x43,
-      0x5F, 0x91, 0xBE, 0xDC, 0x2B, 0x1F, 0x4B, 0xC8, 0x15, 0x8A, 0x51, 0xB1,
-      0xF4, 0x71, 0x51, 0x6F, 0xE8, 0x24, 0x28, 0x7C, 0x89, 0x6B, 0x89, 0x1B,
-      0x49, 0xF2, 0x54, 0xDD, 0x36, 0x35, 0x9B, 0x89, 0xC8, 0x24, 0xEB, 0x3F,
-      0x62, 0x48, 0x02, 0x7F, 0xBB, 0xAD, 0x4C, 0xF2, 0x91, 0x18, 0xCB, 0x50,
-      0xEB, 0xB6, 0x25, 0xA3, 0x7C, 0x53, 0x7A, 0x02, 0x23, 0xF0, 0xEB, 0x70,
-      0x85, 0xB5, 0xC7, 0xEC, 0x60, 0x75, 0x70, 0xDB, 0x91, 0x85, 0xD5, 0x99,
-      0x02, 0xBC, 0x26, 0xC6, 0x54, 0xA2, 0x80, 0x4C, 0x0D, 0x94, 0x67, 0x93,
-      0xD8, 0xA2, 0x14, 0x82, 0xAC, 0x4F, 0x05, 0xE9, 0x01, 0x62, 0x60, 0x33,
-      0x1D, 0xCC, 0x58, 0xBC, 0x66, 0xAF, 0x3C, 0xA7, 0x58, 0x54, 0x40, 0x21,
-      0x6A, 0xA0, 0x26, 0x3B, 0x2A, 0x72, 0x5E, 0x08, 0x0F, 0x6F, 0x9C, 0x5B,
-      0x6A, 0x9C, 0x9D, 0xA2, 0x93, 0x55, 0x18, 0x9B, 0x4B, 0x95, 0xB1, 0x37,
-      0xD1, 0x22, 0x5F, 0x25, 0x2A, 0xC7, 0x97, 0xB0, 0x64, 0x6C, 0xAC, 0x52,
-      0x16, 0x4B, 0x59, 0x72, 0xA9, 0x92, 0x65, 0xD3, 0x47, 0xFC, 0x7C, 0x35,
-      0x91, 0xD1, 0x5F, 0xFE, 0x68, 0x1C, 0x06, 0xD4, 0x38, 0xCC, 0xEB, 0x60,
-      0xBB, 0x63, 0x10, 0xB7, 0x95, 0x32, 0x89, 0x72, 0x0E, 0x2C, 0x72, 0x87,
-      0x30, 0x05, 0x23, 0x37, 0xAC, 0xA7, 0xC8, 0x52, 0x1A, 0xB4, 0x4F, 0x1E,
-      0x2A, 0x04, 0x9B, 0x83, 0xE0, 0x77, 0x4C, 0x96, 0xCD, 0x8C, 0x87, 0x6F,
-      0xA6, 0x75, 0xD0, 0x92, 0x39, 0x77, 0x27, 0x1B,
-    },
-
-    .exp_dk = {
-      0x8A, 0xD0, 0xB5, 0xF0, 0x9A, 0x25, 0xAA, 0x93, 0x5D, 0xD9, 0xDA, 0x34,
-      0xAB, 0x82, 0xCA, 0x75, 0xA1, 0x2D, 0x66, 0xE9, 0x9C, 0xF4, 0x8B, 0xCA,
-      0x45, 0xB9, 0xB2, 0xDB, 0x44, 0x1B, 0xC2, 0x97, 0x1B, 0xDC, 0x99, 0x22,
-      0xB5, 0xF8, 0xBC, 0x3C, 0x06, 0x78, 0x54, 0x67, 0x59, 0x07, 0x3C, 0xB8,
-      0x8E, 0x26, 0xBA, 0xD1, 0xB1, 0xB3, 0xA4, 0x64, 0x6A, 0x65, 0x29, 0xC6,
-      0x32, 0xEA, 0xA3, 0x47, 0x73, 0x4A, 0x3B, 0xE5, 0x83, 0xD4, 0x71, 0x78,
-      0x09, 0x4C, 0x4A, 0x67, 0x0C, 0xBC, 0x41, 0xEC, 0x06, 0x89, 0x76, 0x56,
-      0x68, 0x54, 0x2E, 0x6F, 0x15, 0xA7, 0xD5, 0x86, 0xC9, 0xE2, 0x6A, 0x6A,
-      0x03, 0xC7, 0x14, 0x69, 0xC2, 0xC5, 0x3F, 0x7B, 0x14, 0x1B, 0x23, 0x2D,
-      0x86, 0x21, 0x6A, 0x25, 0xC7, 0xA8, 0xF3, 0x68, 0x52, 0x85, 0x8C, 0x07,
-      0xA9, 0x52, 0x4E, 0xE1, 0x7B, 0xA6, 0x34, 0x0A, 0xA2, 0xA2, 0x15, 0xC1,
-      0xEA, 0x85, 0x21, 0x67, 0xB6, 0x89, 0x1C, 0xC1, 0x66, 0xC2, 0xFA, 0x13,
-      0xA0, 0x27, 0x0A, 0x22, 0x98, 0x34, 0x13, 0xE0, 0xAC, 0xC4, 0x44, 0xBF,
-      0x40, 0xE2, 0x8C, 0x45, 0xE1, 0x4E, 0x07, 0x40, 0x4F, 0x62, 0x99, 0x63,
-      0x69, 0x59, 0x7F, 0x10, 0xFC, 0xC1, 0x80, 0xEC, 0xAC, 0xAD, 0x1A, 0x67,
-      0x19, 0xAB, 0x9F, 0x1B, 0x44, 0x7A, 0xE1, 0x9A, 0x2C, 0xB0, 0x2A, 0x7D,
-      0x04, 0x20, 0x61, 0x72, 0x16, 0x8C, 0x4F, 0x0A, 0x99, 0xBA, 0xFA, 0x93,
-      0x2D, 0x66, 0x49, 0xE8, 0x94, 0xA8, 0xF0, 0x57, 0x7B, 0x81, 0xC6, 0x64,
-      0x83, 0xC5, 0xB5, 0xCF, 0x60, 0xAE, 0x75, 0xA4, 0x44, 0x52, 0x6A, 0x9B,
-      0x36, 0x74, 0x32, 0x5F, 0xBA, 0x38, 0xF5, 0x32, 0x96, 0x42, 0x1A, 0x78,
-      0x50, 0x11, 0xC1, 0xDD, 0xB3, 0xA6, 0x99, 0x77, 0x45, 0xDB, 0x83, 0xCD,
-      0x58, 0x3C, 0x0C, 0x41, 0x77, 0xC7, 0x97, 0xD4, 0x0A, 0x4F, 0x69, 0x9F,
-      0x1F, 0x40, 0xC5, 0x41, 0x3A, 0xC4, 0xE4, 0x23, 0x73, 0x49, 0x2B, 0x6A,
-      0x2C, 0x6A, 0x40, 0x6D, 0x43, 0x7F, 0x42, 0x57, 0x0B, 0x5E, 0x94, 0x9E,
-      0xF4, 0x35, 0x0D, 0xEA, 0x79, 0x0C, 0xFE, 0xB7, 0x2D, 0x12, 0x87, 0x51,
-      0x7F, 0xE3, 0x27, 0x3D, 0x3C, 0xA6, 0x5A, 0x13, 0xCA, 0x6E, 0x23, 0xC5,
-      0x7B, 0xF0, 0x7D, 0xA0, 0x4B, 0x85, 0x1C, 0xF3, 0xAF, 0xA1, 0x8B, 0xAF,
-      0x5E, 0xF0, 0x20, 0x79, 0x28, 0x57, 0xA9, 0xE7, 0x21, 0xF0, 0x1B, 0x9F,
-      0xEA, 0x7B, 0x61, 0x2E, 0x4C, 0x6E, 0x29, 0x07, 0x93, 0x66, 0xB0, 0x22,
-      0x86, 0x88, 0xBE, 0x2A, 0x06, 0x7F, 0xBE, 0x92, 0x84, 0x2D, 0xD2, 0x80,
-      0xB3, 0xC7, 0x4D, 0xFA, 0xB7, 0x61, 0xE6, 0x13, 0xA8, 0x60, 0x4C, 0x47,
-      0x6E, 0x15, 0x46, 0x66, 0x85, 0xC6, 0x95, 0xAC, 0x35, 0x79, 0x1A, 0x91,
-      0x59, 0x94, 0x2F, 0x60, 0x17, 0x0C, 0xA2, 0x14, 0xC7, 0xC0, 0x9B, 0x1A,
-      0x4B, 0x1B, 0xCC, 0x4F, 0x4C, 0xC6, 0x0D, 0xF0, 0x1A, 0x10, 0x19, 0x15,
-      0xA9, 0xA2, 0xBC, 0x55, 0x31, 0x19, 0x66, 0x50, 0x32, 0xDC, 0xD9, 0x47,
-      0x6F, 0xBA, 0x7B, 0xB0, 0x71, 0x57, 0xD3, 0x3C, 0x9C, 0x8E, 0xFA, 0x6B,
-      0xD0, 0xAC, 0x38, 0xC1, 0xAC, 0x26, 0x5F, 0xB5, 0x18, 0x57, 0xD0, 0x15,
-      0x17, 0x61, 0x53, 0x26, 0xCA, 0x0E, 0x08, 0x65, 0x0B, 0xA6, 0xFA, 0x40,
-      0x83, 0x2C, 0x7B, 0x4C, 0x41, 0xB6, 0x44, 0x71, 0x60, 0x22, 0xB6, 0x52,
-      0xB1, 0x92, 0x7D, 0x55, 0xC9, 0xB3, 0x7F, 0xE2, 0x5F, 0x1A, 0xB6, 0x7A,
-      0x9A, 0x03, 0xC7, 0x00, 0x8C, 0x84, 0xB0, 0x7C, 0x49, 0x26, 0xB6, 0x38,
-      0x1E, 0x40, 0xCF, 0xD4, 0x41, 0x04, 0x12, 0x35, 0x18, 0x74, 0x16, 0xCE,
-      0xC3, 0x66, 0xCA, 0x6F, 0xB7, 0x6F, 0xA0, 0xAB, 0x6E, 0x32, 0x8A, 0x26,
-      0x41, 0xFC, 0x47, 0xDC, 0xD7, 0x6E, 0x91, 0xCA, 0x94, 0x31, 0xE1, 0x9B,
-      0xFF, 0x02, 0xCE, 0x62, 0x28, 0xC2, 0x33, 0x63, 0x82, 0xF8, 0xA1, 0x0E,
-      0x9E, 0xE2, 0xC8, 0xF1, 0x75, 0x93, 0x90, 0xA2, 0x00, 0x24, 0xA1, 0x5B,
-      0x3B, 0x09, 0x0C, 0x13, 0x90, 0xCA, 0x03, 0x43, 0x79, 0x72, 0x84, 0x24,
-      0x6B, 0xD8, 0x94, 0x35, 0x07, 0xB7, 0xA6, 0xB7, 0x1F, 0xC3, 0x3A, 0x03,
-      0xB7, 0xA8, 0x83, 0x66, 0xE4, 0xAF, 0xED, 0x51, 0x57, 0x39, 0xE5, 0xC6,
-      0x9F, 0x8A, 0x26, 0x6E, 0x4A, 0x1F, 0x53, 0xD7, 0x39, 0x30, 0xE9, 0x87,
-      0x55, 0x69, 0x31, 0x2B, 0x27, 0x03, 0x7E, 0x5C, 0x7F, 0x85, 0x21, 0x00,
-      0xC2, 0xBA, 0x36, 0x48, 0xB1, 0xB9, 0xC1, 0xB1, 0x49, 0xF6, 0x25, 0x0E,
-      0x0A, 0x6B, 0x06, 0x52, 0x13, 0x13, 0x4F, 0x30, 0x25, 0x69, 0x75, 0x5B,
-      0x8C, 0x5C, 0x4F, 0xFC, 0x68, 0x0B, 0xF7, 0x81, 0x18, 0x45, 0x34, 0x00,
-      0x35, 0xF1, 0x70, 0xB0, 0x68, 0xBA, 0x67, 0xA4, 0xC3, 0xB0, 0x16, 0x6D,
-      0x03, 0xCC, 0x82, 0x61, 0x84, 0x01, 0x90, 0xA2, 0x0F, 0x9A, 0x3B, 0x1E,
-      0xF4, 0x65, 0xC2, 0xF2, 0x18, 0x2D, 0xA8, 0xDA, 0x8D, 0x3B, 0x3C, 0x8C,
-      0xB1, 0x29, 0x15, 0xF7, 0xD9, 0x3E, 0x04, 0xD8, 0x84, 0x0C, 0x35, 0x67,
-      0x25, 0x5A, 0x7B, 0xD6, 0xD4, 0x33, 0xCF, 0x10, 0x68, 0xD8, 0x84, 0x52,
-      0xCF, 0xC1, 0x1F, 0x99, 0x1B, 0x7C, 0xE3, 0x79, 0x27, 0xD6, 0xCA, 0xAE,
-      0x88, 0x10, 0x74, 0x2F, 0x42, 0x14, 0x8B, 0x89, 0x6E, 0xC4, 0xEB, 0xB5,
-      0x34, 0x03, 0x86, 0x31, 0x5B, 0x2C, 0x1E, 0x2B, 0x43, 0x91, 0x5C, 0x04,
-      0x54, 0x9C, 0xC8, 0xC1, 0x9A, 0xB4, 0x0E, 0x3B, 0x7C, 0x31, 0x1B, 0x42,
-      0x61, 0x10, 0xA9, 0xBB, 0xB1, 0x8D, 0x3B, 0x99, 0x2A, 0x42, 0xC0, 0x18,
-      0x92, 0x90, 0xBE, 0x67, 0x3A, 0x39, 0x7C, 0x40, 0x90, 0x44, 0x3B, 0x88,
-      0xC5, 0xD5, 0xC5, 0x65, 0xA1, 0x0F, 0xEA, 0x05, 0x60, 0x3D, 0x36, 0x24,
-      0x4A, 0x4A, 0xA8, 0xE9, 0x25, 0x5C, 0xF1, 0x84, 0xAE, 0x69, 0x53, 0x5A,
-      0x83, 0x99, 0xC1, 0xC6, 0xF7, 0x6C, 0xF2, 0x34, 0x2A, 0xDF, 0xEA, 0x6A,
-      0x44, 0x7B, 0xB4, 0x50, 0x1B, 0x9A, 0x6C, 0x44, 0x59, 0x3E, 0xB0, 0x43,
-      0xE7, 0xA5, 0x50, 0x2F, 0x58, 0x6C, 0xF3, 0x40, 0x7D, 0xEB, 0x7A, 0x0F,
-      0xC3, 0x2B, 0x3F, 0x46, 0xF1, 0x24, 0x5C, 0x55, 0x96, 0xE0, 0xF1, 0xBE,
-      0xD9, 0x37, 0x20, 0x7C, 0x45, 0x09, 0xE1, 0xD8, 0x98, 0x5B, 0xE7, 0x45,
-      0xFD, 0x69, 0xBF, 0x44, 0x80, 0x92, 0x43, 0x30, 0x28, 0xBE, 0x25, 0x95,
-      0x90, 0x33, 0x11, 0x47, 0x95, 0x86, 0xA3, 0x4B, 0x2D, 0x49, 0x10, 0x74,
-      0x10, 0xBC, 0x4B, 0xD2, 0x96, 0x53, 0x17, 0xFC, 0x76, 0x35, 0x2B, 0x63,
-      0x8D, 0xF3, 0xB3, 0xA3, 0x15, 0x32, 0x50, 0x26, 0x80, 0x9E, 0x3B, 0xC4,
-      0x60, 0x8C, 0x0B, 0x2C, 0xB8, 0x4D, 0xF0, 0xC9, 0x5B, 0xC0, 0x52, 0x70,
-      0x7F, 0xC1, 0xA3, 0x77, 0xB2, 0xB4, 0x65, 0xEB, 0x7A, 0x5D, 0x64, 0x4A,
-      0xB4, 0x27, 0x8D, 0xDC, 0xE5, 0xB6, 0x1E, 0x2B, 0xB3, 0xA7, 0x10, 0x52,
-      0x55, 0x5C, 0xB3, 0xBA, 0xC6, 0x93, 0xEF, 0x02, 0x5F, 0xF0, 0x03, 0x53,
-      0xFB, 0x76, 0x94, 0x5B, 0x8A, 0xA3, 0xE9, 0x95, 0x0F, 0x92, 0x73, 0x81,
-      0x87, 0x91, 0xCC, 0xAD, 0x56, 0x88, 0x46, 0x58, 0x14, 0x2A, 0x2B, 0x4D,
-      0xF3, 0xC5, 0x7E, 0xCA, 0x13, 0xAD, 0x44, 0xB4, 0x9B, 0x63, 0x46, 0xC6,
-      0x3E, 0xE8, 0x90, 0x78, 0x58, 0x9E, 0x9E, 0xB9, 0xA9, 0x80, 0x4A, 0x03,
-      0xBF, 0x7A, 0x27, 0x6F, 0x86, 0xB9, 0x67, 0x6C, 0x58, 0xD3, 0xE7, 0x1D,
-      0x2C, 0x87, 0x70, 0x80, 0x4A, 0x61, 0x59, 0x21, 0x78, 0xB4, 0x49, 0xC7,
-      0x95, 0x5B, 0xBE, 0x8C, 0xF4, 0x2F, 0x31, 0x67, 0x25, 0xE3, 0xB1, 0x6D,
-      0x55, 0xB5, 0x27, 0xCF, 0xB2, 0x32, 0x68, 0x1B, 0x21, 0xB2, 0xCB, 0x2F,
-      0x30, 0xAC, 0x76, 0x01, 0x5B, 0xB5, 0x41, 0x6A, 0x04, 0x11, 0xC1, 0x74,
-      0x58, 0x92, 0x41, 0x2E, 0x68, 0x3A, 0x98, 0xD7, 0x36, 0xED, 0x1A, 0x4C,
-      0xD9, 0x80, 0x61, 0x7D, 0x08, 0x21, 0xC2, 0xAB, 0x02, 0x82, 0x07, 0x0A,
-      0x61, 0x1A, 0x11, 0xD1, 0x97, 0x01, 0xFB, 0xD5, 0x5A, 0x21, 0x27, 0xB3,
-      0x24, 0xE6, 0x90, 0x1D, 0x84, 0x98, 0x6C, 0x04, 0x64, 0xDE, 0x71, 0x20,
-      0xAF, 0x45, 0x10, 0xAF, 0x59, 0x1D, 0xD9, 0xBB, 0x79, 0x47, 0x9C, 0x5F,
-      0xA8, 0x87, 0x14, 0xC6, 0xA9, 0x97, 0x14, 0xF7, 0x6A, 0x1E, 0x40, 0x2C,
-      0x8F, 0x38, 0x4A, 0x4E, 0xE6, 0xBC, 0xD4, 0x15, 0x00, 0x72, 0x4C, 0xC1,
-      0x79, 0x3A, 0xBF, 0xD8, 0xD3, 0xC2, 0xF3, 0x20, 0x39, 0x71, 0x34, 0xB0,
-      0x0F, 0x76, 0x2D, 0xBA, 0x85, 0xA2, 0x3A, 0xF1, 0x55, 0xE6, 0xCC, 0x03,
-      0x73, 0x80, 0xC1, 0xDD, 0x64, 0xA9, 0x73, 0xDB, 0x35, 0xB7, 0x44, 0x70,
-      0x44, 0x8B, 0x24, 0x21, 0x20, 0x62, 0x76, 0x47, 0x87, 0xE5, 0xA9, 0x3A,
-      0x48, 0x80, 0x71, 0x71, 0xA7, 0x71, 0x5C, 0xFC, 0x89, 0xBC, 0xBC, 0x9E,
-      0x14, 0x18, 0x86, 0xF8, 0x07, 0xA1, 0xF9, 0xD6, 0x84, 0xC8, 0x42, 0x6F,
-      0x01, 0x22, 0x88, 0x7D, 0x9C, 0x4C, 0x27, 0xEA, 0x69, 0xCC, 0x15, 0x1B,
-      0x4D, 0x49, 0xB5, 0x1E, 0x5A, 0x4E, 0xAA, 0xA5, 0xAD, 0x06, 0xAB, 0xA8,
-      0x6D, 0xF9, 0x42, 0xE9, 0x86, 0xA5, 0xD5, 0x79, 0x20, 0x80, 0xFC, 0x48,
-      0x03, 0x96, 0xB3, 0x94, 0x86, 0x68, 0xFB, 0x38, 0x2C, 0xC8, 0xFC, 0x15,
-      0x47, 0x48, 0xCB, 0x30, 0xB7, 0x64, 0x1F, 0x02, 0x70, 0xC8, 0x34, 0x38,
-      0xB4, 0xFC, 0x3D, 0x19, 0x01, 0x26, 0x58, 0x80, 0x40, 0x51, 0x77, 0xBC,
-      0x7F, 0x44, 0x78, 0x82, 0x51, 0xAB, 0xC4, 0x74, 0x27, 0x35, 0x31, 0x21,
-      0x2A, 0x66, 0x27, 0x9E, 0x70, 0x33, 0x7A, 0x23, 0x09, 0xFD, 0xF4, 0x9E,
-      0x05, 0x9B, 0xBD, 0xAF, 0x49, 0x73, 0xA5, 0x37, 0x7A, 0x4D, 0x51, 0x7B,
-      0xA7, 0x55, 0x70, 0x2C, 0x37, 0xCC, 0x35, 0x56, 0x85, 0x40, 0x4C, 0x95,
-      0x2F, 0xB6, 0x7E, 0x04, 0x19, 0xC7, 0x8D, 0x15, 0x84, 0xD0, 0x94, 0x92,
-      0x54, 0xD0, 0x49, 0x52, 0xF7, 0x24, 0x3B, 0xF1, 0x40, 0x28, 0x03, 0xC9,
-      0xFC, 0x73, 0x73, 0x25, 0x88, 0x13, 0x78, 0xCA, 0x77, 0xEE, 0xF5, 0xC4,
-      0x15, 0xFB, 0x03, 0x7D, 0x68, 0x9A, 0x58, 0x54, 0xA1, 0xD2, 0x4B, 0x65,
-      0x27, 0xA5, 0x9B, 0x9B, 0x16, 0x95, 0x93, 0x84, 0x35, 0x8C, 0x42, 0x3C,
-      0x79, 0x64, 0x5C, 0xCF, 0x31, 0x33, 0xE2, 0x1B, 0x4B, 0x64, 0x95, 0x7B,
-      0x14, 0xF6, 0x3F, 0x2A, 0xA2, 0x63, 0x57, 0xB1, 0xC2, 0x62, 0xF2, 0xA9,
-      0x0F, 0x7C, 0xCC, 0x2A, 0x15, 0x93, 0x69, 0x99, 0xB0, 0xA1, 0xB4, 0x98,
-      0xAB, 0x3B, 0x32, 0x43, 0x30, 0x32, 0xC9, 0xCA, 0x23, 0x08, 0x1C, 0x55,
-      0xD3, 0x1C, 0xAD, 0x36, 0xE9, 0x0C, 0x1C, 0xE0, 0xB5, 0xFC, 0x24, 0x7C,
-      0xE8, 0xC8, 0x43, 0xF2, 0x88, 0x35, 0x24, 0xB6, 0x64, 0xFA, 0xC1, 0xB2,
-      0x0B, 0xE6, 0x02, 0xA1, 0x0A, 0xAF, 0x65, 0x73, 0x86, 0x80, 0xBB, 0x10,
-      0x25, 0x44, 0x26, 0xF9, 0xCB, 0x09, 0xA1, 0x95, 0x4D, 0xB7, 0x65, 0x56,
-      0x22, 0x30, 0x8F, 0xAE, 0xF5, 0x05, 0xAC, 0xB4, 0x97, 0x55, 0x4A, 0x8F,
-      0xCF, 0xA9, 0x6A, 0x85, 0x25, 0x5A, 0xD8, 0x46, 0x54, 0x20, 0x13, 0xB8,
-      0x41, 0x59, 0x51, 0xBD, 0xD4, 0x5C, 0x01, 0x93, 0x1E, 0xBE, 0x58, 0x3E,
-      0x70, 0xE1, 0x3F, 0x30, 0x15, 0x17, 0xB5, 0xA4, 0x0D, 0x70, 0x36, 0x1F,
-      0x63, 0x09, 0x41, 0x60, 0x67, 0x64, 0x6D, 0x2B, 0x71, 0x36, 0x62, 0x6B,
-      0xCC, 0xCC, 0x17, 0x0C, 0x66, 0xCE, 0xD4, 0x90, 0xC7, 0x35, 0x34, 0x4B,
-      0x62, 0x77, 0x09, 0x7C, 0xA9, 0x14, 0x21, 0x2A, 0x29, 0x2D, 0xD1, 0x22,
-      0xFB, 0xB6, 0x9F, 0xDE, 0xCA, 0x47, 0xFA, 0xB4, 0x53, 0x2B, 0x8C, 0x80,
-      0xCE, 0xB7, 0x7F, 0x9C, 0x54, 0x3E, 0x0B, 0xF1, 0x53, 0x6D, 0x1C, 0x0C,
-      0xAE, 0x07, 0x7E, 0x2C, 0xA7, 0x86, 0x2B, 0x45, 0xA4, 0x10, 0x46, 0x9C,
-      0xC5, 0xB7, 0x06, 0xBA, 0xE0, 0x05, 0x1C, 0xB2, 0x96, 0x1D, 0xB7, 0x27,
-      0x0B, 0x75, 0xB7, 0x11, 0x69, 0x8D, 0x2B, 0x80, 0x70, 0x40, 0xD5, 0x62,
-      0x81, 0x29, 0x43, 0x6F, 0xBB, 0x58, 0xF1, 0x20, 0x3F, 0x75, 0x56, 0x14,
-      0x65, 0xF5, 0x42, 0x57, 0xE4, 0x4D, 0x33, 0xF5, 0x12, 0xD6, 0x33, 0x43,
-      0x1D, 0x00, 0xA2, 0xFB, 0x02, 0x30, 0xC9, 0xBB, 0x9C, 0xDD, 0xFC, 0x83,
-      0xBD, 0x65, 0xC9, 0x74, 0x45, 0x30, 0x21, 0x86, 0xA1, 0x72, 0x23, 0xAD,
-      0x21, 0x33, 0x28, 0x03, 0xB9, 0x09, 0xE5, 0xE5, 0x67, 0x19, 0x70, 0xBB,
-      0xB0, 0xF1, 0xC4, 0x83, 0x7B, 0xB8, 0x42, 0x73, 0xBA, 0x67, 0x5A, 0xC0,
-      0x74, 0xC5, 0x29, 0x0B, 0x41, 0x1C, 0x25, 0x00, 0x65, 0x70, 0x59, 0x33,
-      0x9D, 0xE3, 0x92, 0xF9, 0xCA, 0x30, 0x89, 0x52, 0xA2, 0x20, 0x1A, 0x58,
-      0x87, 0x67, 0xAD, 0xC0, 0x35, 0xBD, 0xF3, 0x30, 0x24, 0xEA, 0x3B, 0x9A,
-      0x83, 0xC5, 0xA0, 0xB9, 0xC5, 0x42, 0x5D, 0x14, 0x07, 0x0C, 0x81, 0xAA,
-      0xDA, 0x26, 0xBA, 0xC3, 0xFB, 0xB8, 0xD4, 0xB7, 0xCF, 0xEE, 0x03, 0x92,
-      0x37, 0x5C, 0x68, 0x42, 0x73, 0x51, 0xDF, 0xEC, 0x63, 0x60, 0x9B, 0xBB,
-      0x50, 0xB4, 0x63, 0xE0, 0x40, 0x92, 0x85, 0x70, 0x09, 0xD1, 0xE5, 0xB8,
-      0x1D, 0x70, 0x7D, 0x14, 0xB8, 0x33, 0xCD, 0x4A, 0x0B, 0x55, 0x1B, 0xAA,
-      0x13, 0xEC, 0x48, 0x8A, 0x15, 0x03, 0xB0, 0x46, 0x7E, 0xE4, 0x02, 0x3C,
-      0x3F, 0xE0, 0x32, 0xC7, 0x82, 0x25, 0x06, 0x38, 0x86, 0xE2, 0x46, 0x8E,
-      0x00, 0xF7, 0x00, 0x07, 0x2A, 0x2E, 0xC8, 0xDA, 0x6A, 0xFB, 0x20, 0x6C,
-      0x91, 0x90, 0x44, 0x33, 0xBB, 0xCC, 0xB0, 0xE7, 0x6F, 0x42, 0x46, 0x8C,
-      0x40, 0xEB, 0x5F, 0x59, 0xCB, 0x9A, 0xE1, 0xB0, 0x35, 0xE5, 0x21, 0x51,
-      0x0B, 0xF2, 0x16, 0xA1, 0xAB, 0xCB, 0x19, 0x03, 0x3B, 0x7A, 0x65, 0x88,
-      0x97, 0xC6, 0x58, 0x74, 0xD5, 0x13, 0x51, 0x83, 0x14, 0x9F, 0x97, 0x9E,
-      0x55, 0x3C, 0xCF, 0xBF, 0xA3, 0x90, 0x0C, 0xDA, 0x6F, 0x01, 0x96, 0x0B,
-      0x75, 0x15, 0x7F, 0x54, 0x53, 0xAA, 0x6E, 0x73, 0xB3, 0xED, 0x90, 0x2F,
-      0x7D, 0x7C, 0x93, 0x05, 0x97, 0x1B, 0xDF, 0x72, 0x2E, 0x29, 0x37, 0x16,
-      0x9A, 0x1B, 0xC0, 0xFA, 0xEB, 0x6C, 0x92, 0xF7, 0x15, 0x0D, 0x23, 0x30,
-      0x87, 0x7C, 0x5D, 0xC5, 0x24, 0x9A, 0xAE, 0x20, 0x30, 0x26, 0x34, 0xC5,
-      0xC5, 0xB2, 0x30, 0x53, 0x52, 0x10, 0x28, 0x12, 0x25, 0x42, 0xF4, 0x85,
-      0xA0, 0xEA, 0xC8, 0x69, 0x22, 0x37, 0x20, 0x63, 0x36, 0x51, 0xF5, 0xB2,
-      0x47, 0xC6, 0x62, 0xB3, 0x1A, 0x10, 0x53, 0x8C, 0xA7, 0x49, 0x1B, 0x14,
-      0x37, 0xAA, 0x74, 0xF4, 0x28, 0x2D, 0x12, 0x97, 0x4D, 0x9C, 0x93, 0x4D,
-      0xF2, 0x14, 0x78, 0x5B, 0x64, 0x18, 0x46, 0x8B, 0x92, 0xE5, 0x25, 0x28,
-      0xC8, 0x44, 0x7A, 0x1C, 0xA4, 0x22, 0xFA, 0x6C, 0xC8, 0x8E, 0x28, 0xB0,
-      0x59, 0xF0, 0x4B, 0x23, 0x59, 0x73, 0x23, 0xF7, 0x2F, 0x3E, 0x23, 0x36,
-      0xF8, 0x7C, 0x47, 0x90, 0x5C, 0xBA, 0x65, 0x5B, 0xB7, 0x3F, 0xC3, 0x2E,
-      0x18, 0xD4, 0xB7, 0x87, 0x05, 0xC7, 0x82, 0xEB, 0xCB, 0x43, 0xE2, 0x78,
-      0x5C, 0x82, 0xC5, 0xAF, 0x24, 0xB0, 0xE1, 0x69, 0x9C, 0xFB, 0xC0, 0x25,
-      0x74, 0x75, 0x79, 0x9A, 0x53, 0x9B, 0x11, 0xA5, 0x0F, 0x4D, 0xF2, 0xB7,
-      0xFA, 0xA2, 0x0B, 0xD8, 0x82, 0x75, 0x15, 0xCA, 0x37, 0x0F, 0x89, 0xC0,
-      0xD4, 0xC6, 0x09, 0x02, 0xF6, 0x56, 0x7C, 0xD6, 0x0B, 0x08, 0x60, 0xA5,
-      0x5B, 0xC8, 0x57, 0x2C, 0x43, 0x6C, 0x24, 0x6A, 0xC2, 0x76, 0x64, 0x4E,
-      0x7D, 0x60, 0x2A, 0xA5, 0x7C, 0x01, 0x66, 0x20, 0x18, 0x14, 0x99, 0x1C,
-      0x1B, 0xD7, 0x5C, 0x7C, 0x47, 0xC3, 0x48, 0xB6, 0x7D, 0x77, 0x61, 0x33,
-      0x86, 0x90, 0x81, 0x44, 0xEA, 0x83, 0xFF, 0x72, 0x1F, 0x9A, 0x50, 0x07,
-      0x6C, 0x51, 0x01, 0x64, 0xD1, 0x8E, 0x05, 0xD0, 0x5D, 0x98, 0x84, 0xC4,
-      0x41, 0x46, 0xA0, 0x7C, 0xCA, 0xCF, 0x89, 0x04, 0x98, 0xED, 0x1A, 0x19,
-      0xB2, 0xA1, 0x54, 0x31, 0x72, 0x9D, 0xC1, 0xF1, 0x2B, 0x7E, 0xA1, 0x0F,
-      0x9F, 0x92, 0x80, 0x62, 0xD1, 0x45, 0x4B, 0x4B, 0x9F, 0x68, 0xE5, 0x99,
-      0x90, 0x29, 0x0B, 0xE3, 0x72, 0x8B, 0x32, 0x89, 0x56, 0x93, 0x63, 0xAB,
-      0x10, 0x05, 0x13, 0x1B, 0x23, 0x81, 0xA0, 0x8C, 0xC2, 0xBF, 0x94, 0x3E,
-      0x95, 0xD5, 0xB2, 0x1B, 0xC6, 0xAA, 0xBC, 0x22, 0x73, 0x34, 0x8B, 0xC7,
-      0x2B, 0xD0, 0x93, 0xB7, 0xB5, 0x61, 0x7A, 0xE8, 0x7F, 0x60, 0x2B, 0xB9,
-      0x89, 0xE6, 0xAF, 0xC4, 0x4B, 0x81, 0x51, 0x20, 0x76, 0xA3, 0xA8, 0x76,
-      0xE0, 0xE2, 0x5F, 0x97, 0x62, 0xB4, 0x62, 0x08, 0x19, 0x85, 0x50, 0x2F,
-      0x26, 0xB2, 0x87, 0xA2, 0x93, 0x6D, 0x5B, 0x1A, 0xCF, 0xFC, 0xEC, 0x4E,
-      0xEE, 0x77, 0xA9, 0xCB, 0xA9, 0x80, 0xEB, 0x9B, 0x5F, 0xDE, 0x75, 0x53,
-      0x9F, 0x65, 0x09, 0x04, 0x67, 0x7D, 0xBE, 0x29, 0xAB, 0x8B, 0xB9, 0x18,
-      0xA3, 0x49, 0x48, 0x03, 0xEC, 0xA5, 0x9A, 0x2C, 0x32, 0xE5, 0xB5, 0xC8,
-      0x3B, 0x0B, 0x80, 0xB1, 0x10, 0x2C, 0xD7, 0xD9, 0x48, 0x2B, 0x45, 0x9B,
-      0x6B, 0x74, 0x49, 0x1E, 0xC3, 0x0C, 0x4B, 0xE7, 0x7C, 0x2B, 0x52, 0x4A,
-      0xF7, 0xB3, 0xAD, 0x1F, 0x71, 0x34, 0x1D, 0xF0, 0xA7, 0x6F, 0x25, 0x5C,
-      0x29, 0x03, 0xC8, 0x82, 0x08, 0x07, 0x93, 0x79, 0x93, 0x0A, 0x95, 0x13,
-      0xF3, 0x90, 0x12, 0x6E, 0x73, 0x2A, 0x2B, 0xB0, 0x94, 0xBF, 0xA6, 0xBF,
-      0x0A, 0x43, 0x2B, 0xCD, 0x65, 0x7D, 0xAF, 0xCB, 0x25, 0xC8, 0xBB, 0x15,
-      0xE0, 0x95, 0x5D, 0x09, 0x9B, 0x74, 0xFF, 0x1A, 0x4D, 0xE6, 0x55, 0x9C,
-      0xD6, 0x79, 0x7C, 0x38, 0xC4, 0x8C, 0x11, 0x34, 0xCA, 0x2C, 0x97, 0x92,
-      0x43, 0xF3, 0x15, 0x2A, 0xF4, 0xBB, 0xE4, 0xD7, 0xA6, 0xBC, 0x09, 0x87,
-      0x21, 0x33, 0x92, 0x0C, 0xD2, 0x3B, 0x3E, 0xF9, 0x84, 0x8C, 0xCC, 0x68,
-      0x45, 0xD6, 0x47, 0xB5, 0x38, 0x75, 0x57, 0x73, 0x65, 0x13, 0xD5, 0x85,
-      0x60, 0x84, 0x51, 0x92, 0xF9, 0x26, 0x51, 0x59, 0x93, 0x2E, 0x57, 0x2A,
-      0x88, 0xC4, 0x4E, 0x65, 0x66, 0x76, 0x0C, 0x06, 0x1C, 0x67, 0xFC, 0xB5,
-      0xBF, 0x21, 0x00, 0x95, 0xE2, 0x14, 0xDA, 0x74, 0x53, 0x57, 0xE3, 0x69,
-      0x96, 0xD8, 0xC0, 0x66, 0x31, 0x1B, 0xBC, 0x76, 0x1A, 0x1F, 0xD2, 0x52,
-      0x73, 0xD2, 0x1E, 0xAB, 0x50, 0x01, 0x05, 0x63, 0xCD, 0x64, 0x68, 0xA4,
-      0xEA, 0x83, 0x6B, 0x6D, 0x64, 0xBD, 0x2B, 0xD7, 0x6D, 0xBE, 0x35, 0x82,
-      0xD5, 0x73, 0x6A, 0x60, 0x5A, 0x55, 0x09, 0xFC, 0x28, 0x78, 0x9B, 0x56,
-      0xB8, 0x84, 0xAE, 0x9A, 0x60, 0x41, 0x5F, 0x55, 0x67, 0x4B, 0xE6, 0x01,
-      0x57, 0x6C, 0x7C, 0xEE, 0x58, 0x14, 0x3B, 0xF0, 0x54, 0x80, 0x6A, 0xBC,
-      0xB3, 0x45, 0xA2, 0x56, 0xCB, 0xC4, 0x54, 0xE3, 0x43, 0xF3, 0xCC, 0x7A,
-      0xDE, 0x65, 0x56, 0x2F, 0xD2, 0x9E, 0xB2, 0x59, 0x73, 0x7B, 0xB3, 0xCF,
-      0x96, 0x49, 0xBD, 0xEA, 0x28, 0x3F, 0xB0, 0x72, 0x65, 0x67, 0x7C, 0x98,
-      0x08, 0xD1, 0x31, 0x19, 0xC0, 0xA2, 0xAD, 0xF7, 0x45, 0xDE, 0x69, 0x75,
-      0xF4, 0x56, 0x2C, 0xD6, 0x15, 0x57, 0xB3, 0x96, 0x5D, 0x2B, 0x07, 0x2F,
-      0x00, 0x0A, 0xA7, 0xE0, 0xA3, 0x57, 0xE1, 0x25, 0x3E, 0xAF, 0xEA, 0x7F,
-      0xDF, 0xCC, 0x92, 0xFA, 0x87, 0x63, 0x0D, 0xD2, 0x27, 0x6C, 0xE4, 0x2E,
-      0x82, 0x0B, 0x69, 0xD1, 0xFC, 0x2E, 0x47, 0xD5, 0xC4, 0x98, 0xA5, 0x5B,
-      0x3B, 0x29, 0xC3, 0x4E, 0x64, 0x90, 0x3D, 0x04, 0x7A, 0xB1, 0xC0, 0x40,
-      0x24, 0x95, 0x8F, 0x70, 0x11, 0x95, 0xF5, 0xD1, 0x3E, 0xC6, 0x70, 0x6B,
-      0x84, 0x48, 0x50, 0x3A, 0x54, 0x99, 0x22, 0xA5, 0x8A, 0x24, 0xB6, 0x7C,
-      0x93, 0x63, 0x27, 0x56, 0xB7, 0x7D, 0x22, 0x54, 0x07, 0x31, 0x61, 0x71,
-      0xDE, 0xEC, 0x56, 0x71, 0x44, 0x35, 0xCF, 0x94, 0xCC, 0xF4, 0x59, 0x9E,
-      0x00, 0xD1, 0x0E, 0x56, 0x96, 0x22, 0xBA, 0xDA, 0x82, 0x0C, 0x45, 0x2F,
-      0x25, 0x42, 0xAD, 0xF0, 0x87, 0x65, 0xCA, 0x93, 0xAE, 0x38, 0xEB, 0x02,
-      0x5D, 0xE3, 0x1C, 0xFF, 0x79, 0x74, 0x54, 0x9A, 0x78, 0x25, 0xA8, 0x31,
-      0xDD, 0x05, 0x4E, 0x87, 0xB8, 0x4C, 0x5F, 0x25, 0x47, 0xFF, 0x47, 0xB4,
-      0x6F, 0x88, 0xC9, 0x9F, 0x15, 0x48, 0xE9, 0x33, 0xA6, 0xF4, 0xD8, 0x7F,
-      0x1A, 0x4A, 0x1B, 0x00, 0xE3, 0x9E, 0x02, 0xD6, 0x0E, 0x51, 0xEB, 0x60,
-      0x3C, 0x1C, 0x0D, 0x80, 0x7A, 0xCD, 0xAB, 0x08, 0xBA, 0xA2, 0xB9, 0x98,
-      0x69, 0xB7, 0x5C, 0xA2, 0xC4, 0xB9, 0x63, 0x68, 0xB5, 0x17, 0x80, 0xBD,
-      0x1E, 0xC7, 0x5B, 0x11, 0x0B, 0x9F, 0xA6, 0x65, 0x56, 0x87, 0x6C, 0x5F,
-      0x48, 0x79, 0x7D, 0x09, 0x01, 0x38, 0xF7, 0x54, 0xAE, 0x30, 0x53, 0x3D,
-      0x36, 0xAA, 0x44, 0xB9, 0xB1, 0x70, 0x2A, 0x6A, 0x8A, 0x56, 0x62, 0x6B,
-      0xF0, 0x45, 0x1A, 0x37, 0xA7, 0xAC, 0x1A, 0x33, 0x70, 0x76, 0xE5, 0x1E,
-      0x0A, 0x6B, 0x03, 0x00, 0xC2, 0xC7, 0x90, 0xA4, 0x43, 0x7E, 0xA2, 0x8D,
-      0x7E, 0xC9, 0x8C, 0x41, 0x9B, 0x37, 0xD6, 0xAA, 0x97, 0x04, 0x17, 0x43,
-      0x5F, 0x91, 0xBE, 0xDC, 0x2B, 0x1F, 0x4B, 0xC8, 0x15, 0x8A, 0x51, 0xB1,
-      0xF4, 0x71, 0x51, 0x6F, 0xE8, 0x24, 0x28, 0x7C, 0x89, 0x6B, 0x89, 0x1B,
-      0x49, 0xF2, 0x54, 0xDD, 0x36, 0x35, 0x9B, 0x89, 0xC8, 0x24, 0xEB, 0x3F,
-      0x62, 0x48, 0x02, 0x7F, 0xBB, 0xAD, 0x4C, 0xF2, 0x91, 0x18, 0xCB, 0x50,
-      0xEB, 0xB6, 0x25, 0xA3, 0x7C, 0x53, 0x7A, 0x02, 0x23, 0xF0, 0xEB, 0x70,
-      0x85, 0xB5, 0xC7, 0xEC, 0x60, 0x75, 0x70, 0xDB, 0x91, 0x85, 0xD5, 0x99,
-      0x02, 0xBC, 0x26, 0xC6, 0x54, 0xA2, 0x80, 0x4C, 0x0D, 0x94, 0x67, 0x93,
-      0xD8, 0xA2, 0x14, 0x82, 0xAC, 0x4F, 0x05, 0xE9, 0x01, 0x62, 0x60, 0x33,
-      0x1D, 0xCC, 0x58, 0xBC, 0x66, 0xAF, 0x3C, 0xA7, 0x58, 0x54, 0x40, 0x21,
-      0x6A, 0xA0, 0x26, 0x3B, 0x2A, 0x72, 0x5E, 0x08, 0x0F, 0x6F, 0x9C, 0x5B,
-      0x6A, 0x9C, 0x9D, 0xA2, 0x93, 0x55, 0x18, 0x9B, 0x4B, 0x95, 0xB1, 0x37,
-      0xD1, 0x22, 0x5F, 0x25, 0x2A, 0xC7, 0x97, 0xB0, 0x64, 0x6C, 0xAC, 0x52,
-      0x16, 0x4B, 0x59, 0x72, 0xA9, 0x92, 0x65, 0xD3, 0x47, 0xFC, 0x7C, 0x35,
-      0x91, 0xD1, 0x5F, 0xFE, 0x68, 0x1C, 0x06, 0xD4, 0x38, 0xCC, 0xEB, 0x60,
-      0xBB, 0x63, 0x10, 0xB7, 0x95, 0x32, 0x89, 0x72, 0x0E, 0x2C, 0x72, 0x87,
-      0x30, 0x05, 0x23, 0x37, 0xAC, 0xA7, 0xC8, 0x52, 0x1A, 0xB4, 0x4F, 0x1E,
-      0x2A, 0x04, 0x9B, 0x83, 0xE0, 0x77, 0x4C, 0x96, 0xCD, 0x8C, 0x87, 0x6F,
-      0xA6, 0x75, 0xD0, 0x92, 0x39, 0x77, 0x27, 0x1B, 0xE6, 0xE8, 0x32, 0xF2,
-      0x49, 0x8C, 0xA5, 0xA3, 0x43, 0x1F, 0x40, 0xD3, 0x18, 0x7B, 0x1E, 0xD9,
-      0x65, 0xFD, 0xD6, 0x69, 0x3B, 0x37, 0xF6, 0xEB, 0x40, 0x8A, 0x99, 0x97,
-      0x7A, 0xE4, 0x96, 0x44, 0x7A, 0xF6, 0x50, 0x22, 0xE0, 0xA4, 0x72, 0xED,
-      0x63, 0x88, 0x63, 0x8E, 0xA2, 0x9D, 0x82, 0xDA, 0x68, 0xB4, 0xCF, 0x9F,
-      0xFD, 0xF2, 0xB6, 0x7C, 0xD7, 0x08, 0xEA, 0x5A, 0x37, 0x0C, 0x6A, 0x7C,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // generate pke1024 ek and dk from seed
-    uint8_t got_ek[PKE1024_EK_SIZE] = { 0 },
-            got_dk[FIPS203IPD_KEM1024_DK_SIZE] = { 0 };
-    fips203ipd_kem1024_keygen(got_ek, got_dk, TESTS[i].seed);
-
-    // check for expected ek
-    if (memcmp(&got_ek, &(TESTS[i].exp_ek), sizeof(got_ek))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ek", TESTS[i].name);
-      fail_test(__func__, name, got_ek, sizeof(got_ek), TESTS[i].exp_ek, sizeof(got_ek));
-    }
-
-    // check for expected dk
-    if (memcmp(&got_dk, &(TESTS[i].exp_dk), sizeof(got_dk))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - dk", TESTS[i].name);
-      fail_test(__func__, name, got_dk, sizeof(got_dk), TESTS[i].exp_dk, sizeof(got_dk));
-    }
-  }
-}
-
-static void test_fips203ipd_kem1024_encaps(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t ek[FIPS203IPD_KEM1024_EK_SIZE]; // test encapsulation key (1568 bytes)
-    const uint8_t seed[32]; // test randomness (32 bytes)
-    const uint8_t exp_k[32]; // expected shared key (32 bytes)
-    const uint8_t exp_ct[FIPS203IPD_KEM1024_CT_SIZE]; // expected ciphertext (1088 bytes)
-  } TESTS[] = {{
-    .name = "seed = 0",
-    .ek = {
-      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
-      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
-      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
-      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
-      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
-      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
-      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
-      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
-      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
-      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
-      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
-      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
-      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
-      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
-      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
-      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
-      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
-      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
-      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
-      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
-      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
-      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
-      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
-      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
-      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
-      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
-      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
-      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
-      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
-      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
-      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
-      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
-      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
-      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
-      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
-      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
-      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
-      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
-      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
-      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
-      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
-      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
-      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
-      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
-      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
-      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
-      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
-      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
-      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
-      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
-      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
-      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
-      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
-      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
-      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
-      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
-      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
-      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
-      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
-      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
-      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
-      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
-      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
-      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
-      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
-      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
-      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
-      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
-      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
-      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
-      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
-      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
-      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
-      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
-      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
-      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
-      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
-      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
-      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
-      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
-      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
-      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
-      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
-      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
-      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
-      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
-      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
-      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
-      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
-      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
-      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
-      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
-      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
-      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
-      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
-      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
-      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
-      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
-      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
-      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
-      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
-      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
-      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
-      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
-      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
-      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
-      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
-      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
-      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
-      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
-      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
-      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
-      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
-      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
-      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
-      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
-      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
-      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
-      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
-      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
-      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
-      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
-      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
-      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
-      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
-      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
-      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
-      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5,
-    },
-    .seed = { 0 },
-
-    .exp_k = {
-      0x6d, 0x8f, 0x14, 0x80, 0x69, 0x7d, 0x87, 0xd4,
-      0x47, 0xb4, 0xd1, 0xf7, 0xdd, 0x7f, 0x18, 0x9c,
-      0x91, 0x20, 0x9c, 0x4a, 0x94, 0x15, 0x27, 0x37,
-      0xca, 0xf8, 0x15, 0x70, 0x31, 0xaf, 0x12, 0xe3,
-    },
-
-    .exp_ct = {
-      0x93, 0x23, 0x21, 0xf8, 0xd2, 0xbc, 0x0f, 0x37, 0xcf, 0x19, 0x50, 0xaa,
-      0xf1, 0xfe, 0xb5, 0x22, 0x7c, 0x87, 0x27, 0x05, 0x32, 0xcd, 0x2b, 0x3b,
-      0x34, 0x38, 0xc5, 0x8f, 0x5a, 0xd4, 0x96, 0xc4, 0xc5, 0xe0, 0x25, 0xb0,
-      0xa9, 0xc3, 0x0c, 0x33, 0x02, 0x33, 0xa4, 0x8a, 0x8d, 0x82, 0xee, 0x4e,
-      0xdd, 0x0a, 0xe1, 0x6e, 0xaf, 0xbd, 0x11, 0xac, 0xf6, 0xee, 0x8b, 0x9a,
-      0x73, 0x5d, 0x52, 0x38, 0x83, 0x60, 0xdf, 0xe6, 0xd9, 0x93, 0x03, 0x0f,
-      0x3d, 0x5b, 0x2f, 0x52, 0x1b, 0x62, 0x71, 0xf6, 0x27, 0x61, 0x13, 0x8c,
-      0x72, 0x76, 0xf1, 0x24, 0x30, 0x90, 0x20, 0x64, 0x15, 0x56, 0xa3, 0x3a,
-      0xef, 0xfa, 0xc8, 0x16, 0x3c, 0x60, 0x87, 0x64, 0xae, 0x5c, 0x05, 0x68,
-      0x46, 0x50, 0xbf, 0x5b, 0x6c, 0x45, 0x9d, 0xf3, 0x8c, 0x33, 0x87, 0x87,
-      0xef, 0x22, 0xe1, 0xfb, 0x71, 0xec, 0xb6, 0xd5, 0x99, 0x97, 0x26, 0xe4,
-      0x25, 0xbc, 0x3f, 0x97, 0x50, 0xdc, 0x7c, 0x0d, 0x12, 0x1b, 0xa9, 0x57,
-      0x28, 0x29, 0xb7, 0x71, 0x43, 0x4e, 0xa6, 0x32, 0x3b, 0x13, 0x03, 0xd7,
-      0xa1, 0x20, 0xf4, 0xda, 0xa9, 0xa5, 0xbd, 0x27, 0x17, 0x0c, 0xfc, 0xf0,
-      0xea, 0x08, 0xb5, 0x43, 0x8e, 0x3c, 0x89, 0x8b, 0x4a, 0x23, 0x30, 0xd7,
-      0x43, 0xb3, 0x69, 0x21, 0xfc, 0xa4, 0x8a, 0x9b, 0xa0, 0x55, 0xfc, 0xbf,
-      0x72, 0xe5, 0x9d, 0xbb, 0xc1, 0x7b, 0xa8, 0xc3, 0x4c, 0xdc, 0x22, 0x8a,
-      0xa0, 0xa4, 0x66, 0x21, 0x1e, 0x7a, 0xc4, 0xab, 0x01, 0x08, 0xe2, 0xfb,
-      0xbe, 0x71, 0x22, 0x0f, 0xa5, 0xe2, 0x31, 0xd9, 0x56, 0xe4, 0x7d, 0x56,
-      0xce, 0xab, 0x8a, 0x18, 0x95, 0xdd, 0x21, 0x89, 0xff, 0x83, 0xbc, 0x9b,
-      0x94, 0x3c, 0x38, 0x3b, 0xcc, 0xbd, 0x8d, 0xcb, 0x87, 0xbb, 0x24, 0x5b,
-      0x2d, 0xd4, 0xc0, 0x8e, 0xdc, 0x85, 0xbd, 0xc1, 0x7b, 0xe5, 0xb7, 0x48,
-      0x70, 0x3a, 0x49, 0xd4, 0xbb, 0xca, 0xda, 0xa3, 0x21, 0x93, 0x2d, 0xbe,
-      0xdb, 0x08, 0xde, 0x52, 0xb0, 0x11, 0x5f, 0x66, 0x09, 0xe0, 0xa2, 0x36,
-      0xf2, 0x97, 0x79, 0xe5, 0xb3, 0x6f, 0x13, 0xa4, 0x57, 0xf9, 0xdc, 0x21,
-      0xfd, 0xaa, 0x20, 0xa8, 0x63, 0xe8, 0x6d, 0x32, 0x8a, 0x18, 0x0a, 0x01,
-      0xf2, 0x41, 0x0d, 0x5c, 0x22, 0x97, 0xc8, 0xb8, 0xb5, 0xa3, 0x57, 0xa2,
-      0xe0, 0xf2, 0x00, 0x4c, 0x30, 0xcb, 0x35, 0x77, 0x76, 0xfa, 0x9b, 0x03,
-      0x32, 0xa9, 0x45, 0xcb, 0xa8, 0xca, 0x75, 0x61, 0xf9, 0x7c, 0x78, 0xf7,
-      0x72, 0x94, 0xcc, 0x4b, 0xab, 0xbc, 0xc1, 0x95, 0x12, 0xfa, 0x85, 0xdb,
-      0x13, 0x92, 0x3a, 0x2f, 0xb6, 0x28, 0x9d, 0xa3, 0xbb, 0x76, 0x22, 0xe5,
-      0xbb, 0x78, 0xa0, 0x6b, 0x92, 0x56, 0x40, 0x86, 0x1d, 0x0b, 0xd5, 0x75,
-      0xfb, 0x21, 0x10, 0x26, 0xb6, 0xd5, 0xe0, 0x6c, 0xe6, 0x44, 0xc1, 0x4a,
-      0x95, 0xe3, 0x52, 0x6a, 0xd9, 0x80, 0x38, 0x3d, 0xde, 0xad, 0x21, 0x62,
-      0x0c, 0x0a, 0x95, 0x38, 0xa4, 0x73, 0x26, 0xa1, 0x35, 0xe5, 0xca, 0x0f,
-      0x82, 0x87, 0x19, 0xbc, 0xd8, 0x9b, 0xd1, 0xdd, 0xc2, 0xd7, 0xe6, 0xbd,
-      0x90, 0x54, 0x55, 0x42, 0xcc, 0xb3, 0xcf, 0x17, 0x80, 0x48, 0xac, 0x78,
-      0xcf, 0x84, 0xdc, 0x4c, 0x32, 0xc2, 0xf0, 0xab, 0x4a, 0x11, 0x95, 0x2c,
-      0xca, 0x2e, 0x16, 0xff, 0x22, 0xf1, 0xfd, 0x85, 0x4c, 0x47, 0x0d, 0xeb,
-      0x02, 0x2d, 0xd2, 0x92, 0xb8, 0x60, 0xbe, 0x45, 0xac, 0xe6, 0x09, 0xbc,
-      0x82, 0xc2, 0x75, 0x81, 0x58, 0x46, 0xba, 0x66, 0x32, 0xde, 0xa2, 0xec,
-      0x21, 0x4b, 0xf4, 0x66, 0xa6, 0x85, 0xf0, 0xcf, 0x33, 0x3c, 0x43, 0xa3,
-      0x88, 0x71, 0x0c, 0xd8, 0x2a, 0xec, 0x49, 0x31, 0xb5, 0xd2, 0xee, 0x11,
-      0xf3, 0x61, 0x5a, 0x9e, 0x3e, 0x86, 0x2c, 0x0d, 0x0e, 0x35, 0x37, 0xec,
-      0xde, 0x3a, 0x6d, 0x70, 0xa1, 0xc3, 0x9f, 0x39, 0x2b, 0xcb, 0x2f, 0xe0,
-      0x7b, 0x2e, 0x52, 0x81, 0xc5, 0x3d, 0x74, 0xa7, 0xa0, 0x7a, 0xf9, 0x4c,
-      0x6d, 0xcd, 0xfe, 0xf3, 0xba, 0x1c, 0xfb, 0x2f, 0x12, 0x88, 0xec, 0xd3,
-      0xac, 0xc0, 0x37, 0x77, 0x8c, 0x0e, 0x51, 0xda, 0x31, 0xcb, 0x5d, 0x52,
-      0xe3, 0x84, 0x16, 0xb6, 0x7f, 0x1f, 0x5a, 0x7c, 0x88, 0xc8, 0xe4, 0x18,
-      0x9a, 0x14, 0xaa, 0x73, 0x39, 0xef, 0x01, 0xa5, 0xf6, 0x78, 0x00, 0x57,
-      0xca, 0x84, 0xff, 0x27, 0xc1, 0x08, 0x5f, 0x32, 0x38, 0x10, 0xfc, 0xd3,
-      0xa4, 0x0b, 0x0a, 0xb9, 0x85, 0x0a, 0xd0, 0xc9, 0x64, 0xae, 0xbe, 0x47,
-      0x44, 0x6a, 0xff, 0x3c, 0xa3, 0x33, 0x70, 0x74, 0xa7, 0x43, 0xca, 0x23,
-      0xb1, 0x8b, 0x6d, 0xc3, 0xcf, 0xad, 0x42, 0x4f, 0x5f, 0x1a, 0x3f, 0x73,
-      0x54, 0xe3, 0xb6, 0xdf, 0x87, 0xf2, 0x35, 0x91, 0x15, 0x5f, 0xdf, 0x57,
-      0xf8, 0xd3, 0x03, 0x12, 0x5d, 0x7f, 0xf7, 0x19, 0x9d, 0x8d, 0xed, 0xd0,
-      0x04, 0x23, 0x0b, 0x75, 0xd9, 0x1d, 0x28, 0x84, 0xc2, 0x51, 0xdd, 0x3b,
-      0x97, 0xef, 0x46, 0x4b, 0xb6, 0x52, 0x24, 0x1c, 0x20, 0x07, 0x90, 0xc7,
-      0xcc, 0x6b, 0x55, 0x03, 0xbc, 0x39, 0xf7, 0x61, 0x4f, 0x75, 0x21, 0xee,
-      0x45, 0x00, 0x4b, 0xc5, 0xb4, 0xd5, 0xb4, 0x2e, 0x4f, 0xbb, 0x88, 0xc8,
-      0x49, 0x8d, 0xc5, 0x92, 0x59, 0x4e, 0x9a, 0x9a, 0xd8, 0xf1, 0x1b, 0xe5,
-      0x70, 0x7f, 0x6a, 0x29, 0x64, 0xc7, 0xbe, 0x0a, 0x82, 0xef, 0x4e, 0x76,
-      0xfb, 0x63, 0xd7, 0xe1, 0x6f, 0x31, 0x21, 0x7a, 0xcd, 0xf9, 0x7a, 0xbd,
-      0xc4, 0xc1, 0x65, 0xbb, 0x0c, 0xdf, 0x71, 0xc4, 0xb2, 0x32, 0x59, 0x44,
-      0x30, 0x78, 0x81, 0xfb, 0xfd, 0x95, 0xd2, 0x24, 0xaf, 0x7e, 0x62, 0x95,
-      0x2e, 0x84, 0x03, 0x4b, 0xe2, 0x31, 0x65, 0xdf, 0xdf, 0xac, 0x24, 0x9c,
-      0xb9, 0x85, 0xd4, 0x97, 0x46, 0x26, 0xa9, 0x42, 0x51, 0x41, 0x9b, 0x11,
-      0xde, 0x3d, 0x46, 0xea, 0xee, 0x54, 0x57, 0x46, 0x3a, 0x46, 0x41, 0x90,
-      0x93, 0x08, 0x4c, 0x02, 0xab, 0xcb, 0x90, 0x39, 0xf0, 0x45, 0xcb, 0xc6,
-      0xc0, 0x5d, 0xe9, 0xb6, 0xbb, 0x8f, 0xf8, 0x79, 0xb9, 0x15, 0x1f, 0x36,
-      0x04, 0xae, 0x9c, 0xc4, 0x97, 0xa2, 0x15, 0x66, 0x66, 0xec, 0x71, 0x84,
-      0x51, 0xcb, 0x07, 0x81, 0xf3, 0x35, 0x6f, 0x3b, 0x77, 0x5d, 0x22, 0x52,
-      0xd4, 0x7c, 0xb1, 0xcc, 0xcf, 0x0d, 0x52, 0xbc, 0x9a, 0x18, 0x07, 0x9a,
-      0x57, 0x85, 0xda, 0x04, 0xa0, 0xc5, 0x70, 0x38, 0xd7, 0xda, 0x97, 0xcb,
-      0x70, 0x00, 0x08, 0x20, 0x2c, 0x7c, 0x46, 0xed, 0xbb, 0x2c, 0x4f, 0x17,
-      0xe5, 0x22, 0x71, 0xdd, 0x91, 0x16, 0xf8, 0x2b, 0x81, 0xd4, 0xe9, 0x43,
-      0x84, 0xef, 0xd7, 0xd0, 0xbc, 0x83, 0x69, 0xe1, 0xe0, 0x25, 0xa5, 0x97,
-      0x59, 0x2b, 0x1c, 0x19, 0x6c, 0x96, 0x7d, 0x63, 0xfe, 0xaa, 0x6d, 0x0a,
-      0xfc, 0x5d, 0x3b, 0x1e, 0xfd, 0x43, 0xa8, 0x9e, 0x2d, 0x90, 0xd2, 0xa3,
-      0x4b, 0x2e, 0xc0, 0x53, 0x47, 0x7d, 0x05, 0x64, 0x85, 0xe9, 0xf9, 0xd5,
-      0xd8, 0x16, 0xba, 0x42, 0x49, 0xf2, 0x63, 0x66, 0x8c, 0xf0, 0x27, 0xaf,
-      0x56, 0x81, 0x49, 0x9e, 0xe4, 0x3a, 0x6c, 0xd3, 0xb6, 0x35, 0x49, 0xba,
-      0x3a, 0xfd, 0xb0, 0xad, 0x16, 0xe9, 0xf3, 0x0c, 0xfb, 0xf2, 0x26, 0x58,
-      0x64, 0x1d, 0x44, 0xa4, 0x86, 0x97, 0x2a, 0x14, 0xd4, 0x17, 0xef, 0xf9,
-      0xe7, 0x16, 0xc2, 0xc3, 0xd9, 0x48, 0x48, 0xd7, 0x2e, 0xad, 0x46, 0x23,
-      0xed, 0x6c, 0x6d, 0xa5, 0x28, 0x61, 0xe4, 0xb7, 0xe1, 0x81, 0xc7, 0xb8,
-      0x5e, 0x76, 0x2a, 0x12, 0x09, 0x61, 0xd1, 0x98, 0x46, 0xdc, 0x83, 0xd3,
-      0x4e, 0x96, 0x63, 0x85, 0x0d, 0x43, 0xc0, 0x3b, 0x4a, 0xd4, 0x04, 0x93,
-      0x76, 0x17, 0x50, 0x3b, 0xaa, 0xa7, 0xd1, 0xaa, 0x43, 0x12, 0x4a, 0xcd,
-      0x81, 0x99, 0xf0, 0xab, 0x3b, 0xd3, 0x2d, 0xbf, 0xc9, 0xa5, 0x8a, 0xaa,
-      0x15, 0xe7, 0xce, 0x28, 0x29, 0x79, 0x50, 0x5e, 0xc2, 0x07, 0x26, 0x35,
-      0x20, 0x2a, 0xa2, 0x27, 0x05, 0x87, 0x65, 0x39, 0x91, 0x7b, 0xa8, 0xff,
-      0x8a, 0xf4, 0x0a, 0xb2, 0x40, 0x8e, 0xef, 0x81, 0xa6, 0x52, 0xc5, 0xe0,
-      0xb9, 0xba, 0x3a, 0x6c, 0x33, 0x86, 0x9e, 0xcc, 0x70, 0x2b, 0xbe, 0xb9,
-      0x44, 0x84, 0xd6, 0x4e, 0x58, 0x57, 0xf6, 0xd2, 0xef, 0x00, 0x4d, 0xc1,
-      0x49, 0x87, 0xa8, 0x36, 0x75, 0x61, 0xc5, 0x60, 0x14, 0x84, 0xda, 0xbb,
-      0x41, 0xf9, 0x9c, 0xd4, 0x44, 0x4b, 0xbc, 0x24, 0x33, 0xab, 0xb3, 0x1b,
-      0xb5, 0x2b, 0x40, 0xf0, 0xf6, 0xd7, 0x28, 0xaa, 0x94, 0x95, 0xf2, 0x39,
-      0x95, 0xee, 0x74, 0xfd, 0xc3, 0x4b, 0x83, 0x74, 0x8b, 0x87, 0x5c, 0x67,
-      0x49, 0x8e, 0xa6, 0xa8, 0xb8, 0xd4, 0x4d, 0x12, 0x9e, 0x49, 0xfb, 0x8b,
-      0x55, 0x7e, 0x78, 0x01, 0xd3, 0xf1, 0x05, 0xeb, 0xff, 0x79, 0xd4, 0x40,
-      0x32, 0x5e, 0xb1, 0xb3, 0x1b, 0x35, 0x17, 0x45, 0x32, 0xc4, 0x22, 0x02,
-      0xe2, 0xa1, 0xc3, 0xe8, 0xe1, 0x9d, 0x3d, 0x2a, 0x10, 0xe5, 0x0a, 0x71,
-      0xb8, 0xfa, 0x30, 0xfa, 0x98, 0x6e, 0x51, 0xe3, 0x0a, 0x74, 0x08, 0x26,
-      0xb7, 0x9f, 0x20, 0xab, 0x8e, 0x7c, 0x3b, 0xf4, 0x57, 0x47, 0xa7, 0xa0,
-      0xda, 0xae, 0x4a, 0x90, 0xb8, 0x34, 0xa8, 0x21, 0xbd, 0xfb, 0x9e, 0x46,
-      0xee, 0x4f, 0x7d, 0x37, 0x84, 0x31, 0xde, 0x8b, 0x1f, 0x88, 0x44, 0x40,
-      0xb1, 0xa7, 0x36, 0xa0, 0x4b, 0x31, 0xff, 0x40, 0x37, 0x49, 0x1a, 0xb7,
-      0x89, 0x35, 0x7a, 0x8e, 0x6c, 0x78, 0x47, 0x66, 0xe5, 0x38, 0x99, 0xae,
-      0x5b, 0x5e, 0xa6, 0xb8, 0x50, 0xef, 0x70, 0x0f, 0xf3, 0xa5, 0x4c, 0x42,
-      0xe1, 0x3d, 0x84, 0x5f, 0x71, 0x66, 0x08, 0xa3, 0x57, 0x96, 0xf3, 0x2b,
-      0x2b, 0x8e, 0x33, 0x98, 0x49, 0x0d, 0x66, 0x40, 0xb7, 0x48, 0x6a, 0x45,
-      0x45, 0x35, 0x68, 0x41, 0x26, 0x22, 0x91, 0xf7, 0x33, 0xc6, 0x85, 0x51,
-      0x7c, 0x56, 0x0a, 0x5d, 0xc7, 0x9a, 0x37, 0xb6, 0xfb, 0x5e, 0x18, 0x85,
-      0x31, 0xf6, 0x74, 0x57, 0x5f, 0x1a, 0xcc, 0x8d, 0x34, 0x85, 0xcb, 0x31,
-      0xcc, 0x14, 0xda, 0x10, 0xf0, 0xf5, 0x38, 0xc2, 0x1b, 0x54, 0x93, 0x0c,
-      0x62, 0x8a, 0x4c, 0x4f, 0x7f, 0xb7, 0x26, 0x36, 0xa8, 0x08, 0x84, 0x60,
-      0x48, 0xaa, 0x2a, 0x6a, 0x72, 0x9b, 0x22, 0xaf, 0x0a, 0x5d, 0x0b, 0x92,
-      0x3f, 0x98, 0x3e, 0x7f, 0xa8, 0x27, 0xc5, 0x0d, 0x84, 0x6e, 0x67, 0x88,
-      0x13, 0x2e, 0xbd, 0xda, 0x60, 0xe0, 0x9c, 0xf3, 0x54, 0x07, 0xf2, 0x10,
-      0xf5, 0xfe, 0x09, 0x42, 0x09, 0x39, 0xa9, 0xca, 0x0e, 0xe2, 0xd4, 0x1f,
-      0x38, 0x54, 0x61, 0x99, 0x03, 0x8f, 0x4b, 0x7d, 0x7f, 0x5d, 0x7e, 0xac,
-      0x0e, 0x79, 0x85, 0x18, 0xb9, 0x2f, 0x66, 0x86, 0x86, 0xbd, 0x57, 0x86,
-      0x51, 0x46, 0x59, 0x70, 0x28, 0xf6, 0xa5, 0xf1, 0x20, 0x7b, 0xbd, 0xad,
-      0x5e, 0x42, 0x55, 0x35, 0xcf, 0x8d, 0xd9, 0x55, 0xa5, 0x39, 0x67, 0xcc,
-      0x10, 0x92, 0x5b, 0xbf, 0x05, 0x9d, 0xe8, 0xc1, 0xde, 0xfc, 0xe6, 0x24,
-      0x47, 0x7d, 0xc9, 0x2a, 0xb6, 0xc4, 0x09, 0x45, 0xa2, 0x3d, 0xe1, 0xdd,
-      0x2c, 0xc5, 0x9e, 0x39, 0x5f, 0x8e, 0x03, 0xa1, 0x1f, 0xcb, 0xb5, 0xe7,
-      0x89, 0xe5, 0x87, 0xda, 0xfd, 0x9a, 0x6f, 0xf5, 0xf0, 0xb6, 0x4b, 0xda,
-      0xc5, 0x9c, 0xf3, 0xe0, 0x4c, 0xb0, 0xc9, 0x96, 0x5a, 0x82, 0x03, 0x15,
-      0xb5, 0xf3, 0x54, 0xfb, 0xd4, 0xe3, 0x54, 0x2c,
-    },
-  }, {
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Encapsulation -- ML-KEM-1024",
-    .ek = {
-      0x27, 0x66, 0x9A, 0x66, 0x76, 0x67, 0xB8, 0xD5, 0x46, 0x68, 0x58, 0x60,
-      0x22, 0x60, 0x11, 0x5B, 0x62, 0x09, 0xBC, 0x2C, 0x45, 0xDF, 0x7A, 0x4E,
-      0x64, 0x93, 0x2B, 0x75, 0xC7, 0x8B, 0x9F, 0x70, 0x83, 0xF1, 0x31, 0xBC,
-      0xD4, 0xE2, 0x0E, 0xFF, 0x8C, 0xCF, 0x69, 0x73, 0x6B, 0xDB, 0xC8, 0x84,
-      0x06, 0xF9, 0xB6, 0x9A, 0xD3, 0xCE, 0x35, 0x6A, 0x0F, 0x5E, 0x67, 0x6D,
-      0xD0, 0xA7, 0xC4, 0xAB, 0xB1, 0xA1, 0xC9, 0xD6, 0x20, 0x21, 0xBB, 0x38,
-      0x4A, 0x40, 0x14, 0xFB, 0x04, 0xCD, 0x2F, 0x82, 0x18, 0x90, 0xD9, 0x04,
-      0x27, 0xC4, 0x9F, 0x4A, 0x62, 0x8E, 0xCE, 0xC2, 0x73, 0x1F, 0xAC, 0x02,
-      0x52, 0x37, 0x36, 0x0D, 0x58, 0x2C, 0xD0, 0x66, 0x47, 0xB1, 0x10, 0x9A,
-      0xA6, 0xC2, 0xAC, 0x5D, 0x43, 0x37, 0x58, 0xC1, 0xCA, 0xA5, 0x35, 0x55,
-      0xFF, 0xF5, 0x77, 0xEB, 0xB5, 0x21, 0xFB, 0xE3, 0x2D, 0x10, 0xF7, 0x90,
-      0x60, 0x4C, 0x53, 0xC2, 0xF8, 0x2C, 0x17, 0xB0, 0x8E, 0xF3, 0x62, 0x56,
-      0x74, 0x21, 0x48, 0x44, 0x90, 0x6D, 0xB3, 0xFB, 0x95, 0x20, 0x03, 0x14,
-      0x22, 0xA1, 0x3B, 0xD7, 0x61, 0x2D, 0x42, 0x01, 0xC2, 0x7D, 0x15, 0xB9,
-      0xD1, 0x94, 0x83, 0x0C, 0xC3, 0x66, 0x9B, 0xB8, 0xBA, 0x34, 0xC2, 0x52,
-      0x37, 0x64, 0x41, 0x39, 0x71, 0xC4, 0x0D, 0x84, 0xAE, 0xE6, 0x56, 0x75,
-      0xD5, 0x21, 0x53, 0x09, 0xDA, 0x83, 0x67, 0xF0, 0x01, 0x49, 0x75, 0x46,
-      0xEC, 0xE0, 0x7C, 0xBF, 0x00, 0x2D, 0x78, 0x1B, 0x83, 0x06, 0x82, 0x48,
-      0x40, 0x80, 0xAD, 0x6F, 0x95, 0x58, 0xB3, 0x6B, 0x6B, 0xF6, 0x10, 0x91,
-      0x71, 0x30, 0xB7, 0x41, 0x9B, 0x39, 0xF8, 0x50, 0x29, 0x62, 0x12, 0x64,
-      0xCF, 0x2C, 0x8A, 0xE4, 0xD8, 0x08, 0x38, 0x7B, 0x20, 0xCC, 0x5A, 0xA0,
-      0xB9, 0x69, 0xC3, 0x9B, 0xC8, 0x0E, 0x6C, 0xB9, 0xCA, 0x03, 0x51, 0xA3,
-      0xF6, 0x0A, 0xCE, 0xAF, 0x12, 0xBD, 0x41, 0xFA, 0x09, 0x96, 0xE3, 0x99,
-      0x06, 0xA9, 0xB6, 0x16, 0x97, 0xB7, 0x47, 0xC2, 0x03, 0x1C, 0x76, 0x02,
-      0x88, 0x36, 0x44, 0x57, 0x42, 0x5B, 0xBB, 0xB4, 0x0F, 0x48, 0x98, 0xAD,
-      0x08, 0x58, 0x76, 0x60, 0x8A, 0x77, 0xA5, 0xEB, 0x9D, 0x12, 0x4B, 0xC9,
-      0x92, 0x26, 0x51, 0xB7, 0x63, 0x95, 0x88, 0x15, 0x58, 0xCA, 0xD0, 0x6F,
-      0x3C, 0x4B, 0xCF, 0x08, 0xE4, 0x5B, 0x67, 0xBA, 0x51, 0x60, 0x38, 0xA3,
-      0x64, 0xB7, 0x74, 0x0E, 0x97, 0x40, 0xEE, 0x2B, 0x93, 0xC5, 0xC6, 0x5F,
-      0x49, 0x02, 0x0A, 0xD4, 0x2B, 0x3C, 0x0A, 0xEA, 0x5B, 0xF2, 0x42, 0xA4,
-      0xF1, 0xB0, 0x89, 0xB5, 0xA3, 0x45, 0x8B, 0xE8, 0xA3, 0x71, 0xCA, 0x1F,
-      0x29, 0x3C, 0x53, 0xF2, 0x78, 0x0E, 0xCE, 0x28, 0x12, 0x93, 0xD9, 0x91,
-      0xE6, 0xE5, 0x79, 0x04, 0x2B, 0xAB, 0xC1, 0x69, 0x72, 0x4F, 0x10, 0x68,
-      0x1F, 0xD1, 0xC7, 0xD2, 0xFB, 0x16, 0x48, 0xB0, 0xBF, 0x80, 0x81, 0x8A,
-      0x7D, 0xD3, 0xB7, 0x09, 0x73, 0x4D, 0x38, 0x97, 0x2E, 0x3E, 0x44, 0x87,
-      0x5A, 0xF0, 0x92, 0x7A, 0x9A, 0xAD, 0xE8, 0x26, 0x13, 0xFC, 0xA0, 0x5E,
-      0xE5, 0xB3, 0x21, 0x06, 0x47, 0xA5, 0x63, 0x2A, 0xA1, 0x70, 0xD0, 0x9E,
-      0x70, 0xB5, 0x6A, 0x2F, 0x04, 0x33, 0x7A, 0x33, 0x7E, 0xE9, 0x52, 0x38,
-      0x3A, 0x1A, 0x8A, 0xEE, 0xA6, 0xCD, 0xB9, 0x0C, 0xCD, 0x86, 0xA8, 0x18,
-      0xD1, 0xBB, 0x39, 0x46, 0x5B, 0xA3, 0x13, 0xD2, 0x66, 0xBB, 0xB1, 0x05,
-      0x81, 0xFA, 0x18, 0x7D, 0x92, 0x6A, 0xC3, 0xA8, 0xB7, 0x49, 0xF6, 0x44,
-      0x45, 0xFA, 0xB5, 0x6C, 0x99, 0x27, 0x55, 0x57, 0x93, 0xFB, 0x4A, 0xCF,
-      0xB0, 0x39, 0xB1, 0xAA, 0x54, 0x3B, 0x1B, 0x87, 0xAE, 0x6A, 0x49, 0xAB,
-      0x56, 0x29, 0x33, 0xC4, 0xC9, 0x7B, 0xD7, 0x4C, 0x07, 0xBF, 0x29, 0x85,
-      0x1A, 0x46, 0x98, 0x51, 0xA9, 0x82, 0x59, 0x55, 0x96, 0xFE, 0x7A, 0xCA,
-      0xE0, 0xDB, 0x23, 0x53, 0x30, 0x28, 0xAA, 0x34, 0x67, 0x6F, 0x7A, 0x9B,
-      0x29, 0x26, 0x3E, 0x7A, 0xA2, 0x79, 0x00, 0x10, 0x4B, 0x1B, 0xA1, 0xB5,
-      0x67, 0x47, 0x39, 0xB2, 0xFC, 0x4E, 0xD8, 0xA3, 0x30, 0xBB, 0xA5, 0xA0,
-      0xB6, 0x24, 0x7C, 0x63, 0xF1, 0x15, 0x3D, 0xA0, 0x1D, 0xC8, 0xF6, 0x16,
-      0xF1, 0x04, 0x83, 0xA6, 0x93, 0xA6, 0x34, 0xC1, 0xBA, 0x6A, 0xE1, 0xAB,
-      0x2F, 0x16, 0x34, 0x00, 0xBB, 0x57, 0x71, 0xE7, 0x01, 0x71, 0xFC, 0xB5,
-      0x41, 0x55, 0xAB, 0xFC, 0xB2, 0x04, 0x4F, 0xCB, 0x30, 0xBA, 0xD6, 0x7F,
-      0x74, 0x21, 0x83, 0x86, 0x18, 0x19, 0xED, 0xB1, 0xAA, 0x6C, 0x77, 0x1F,
-      0xC8, 0xE1, 0x1A, 0x92, 0xE0, 0x8B, 0x71, 0xF4, 0x0D, 0x03, 0x6C, 0x15,
-      0xD2, 0x89, 0x6A, 0x20, 0x47, 0x25, 0xBA, 0x90, 0xA0, 0x3B, 0x47, 0x8D,
-      0x98, 0xC4, 0x90, 0x84, 0x38, 0x2F, 0x1D, 0x22, 0x3F, 0xE1, 0x29, 0x80,
-      0xE9, 0x47, 0xA4, 0x15, 0xE5, 0x5F, 0xE6, 0x7B, 0x85, 0xDA, 0x40, 0x44,
-      0x13, 0x42, 0x44, 0x5B, 0x46, 0xC2, 0xFC, 0x42, 0x02, 0x0D, 0x04, 0x76,
-      0x9A, 0x2A, 0x1C, 0x64, 0x64, 0x1F, 0x0C, 0x36, 0x63, 0x6B, 0xA6, 0xC4,
-      0x65, 0x2B, 0x26, 0x7A, 0x4B, 0x92, 0x19, 0xE3, 0x33, 0xA0, 0x68, 0x17,
-      0xB5, 0x81, 0x7B, 0x6E, 0x6C, 0xC4, 0x85, 0xE3, 0x52, 0x61, 0x41, 0x69,
-      0xAB, 0xC2, 0x0E, 0x18, 0x91, 0xB7, 0xA0, 0x00, 0xC5, 0x2A, 0xF1, 0x5A,
-      0x7B, 0x90, 0x4C, 0x97, 0x6C, 0x1B, 0xFD, 0x3A, 0x23, 0x77, 0xEB, 0x76,
-      0xB5, 0x50, 0x33, 0xC7, 0xC4, 0xC6, 0x9E, 0x71, 0x74, 0xAA, 0xF2, 0x77,
-      0x15, 0x75, 0x63, 0x16, 0xCA, 0xCC, 0xCE, 0x63, 0xA5, 0xA2, 0x24, 0x35,
-      0xC7, 0xD1, 0x02, 0x04, 0x43, 0xAA, 0x71, 0x69, 0x3B, 0xF0, 0x62, 0x30,
-      0x3D, 0x13, 0x33, 0x1F, 0x79, 0x54, 0x24, 0xC2, 0x0D, 0x26, 0x6C, 0x1D,
-      0x90, 0x30, 0x5F, 0xC8, 0xC2, 0x53, 0x66, 0x84, 0xA9, 0x3D, 0x50, 0x6D,
-      0xE6, 0x32, 0x9B, 0x61, 0x62, 0x40, 0x59, 0x99, 0xBD, 0x5C, 0xAA, 0x7D,
-      0xDB, 0x96, 0x13, 0xC8, 0x23, 0x8C, 0xC6, 0xD3, 0x35, 0xA1, 0xEB, 0x40,
-      0x82, 0xE7, 0x71, 0x0D, 0x07, 0x9F, 0x87, 0xA4, 0xBF, 0xF6, 0x47, 0x8B,
-      0x5F, 0x0C, 0x58, 0x77, 0x86, 0xAF, 0x42, 0x71, 0x92, 0xD9, 0xA3, 0x4A,
-      0x4F, 0xA3, 0x3B, 0xF0, 0xD3, 0xCC, 0x58, 0xFB, 0x46, 0x3B, 0x48, 0x38,
-      0xCA, 0x2C, 0x33, 0x7E, 0x65, 0x39, 0x7D, 0xA1, 0x56, 0x90, 0xC5, 0x2A,
-      0xC0, 0xE5, 0x46, 0x8B, 0xDC, 0x03, 0xDF, 0x5A, 0x62, 0xF7, 0x02, 0x09,
-      0x34, 0xE2, 0x67, 0xE0, 0xF7, 0xCF, 0x95, 0x59, 0x94, 0x35, 0xF9, 0x52,
-      0xFA, 0xB7, 0x4C, 0xFE, 0xB4, 0x30, 0x8B, 0x17, 0x3F, 0x12, 0xE0, 0x73,
-      0xF7, 0xF0, 0x40, 0xDB, 0x4C, 0x63, 0xC1, 0xC4, 0x8A, 0x7B, 0x7A, 0x41,
-      0xF4, 0x77, 0x9A, 0x6B, 0x57, 0xA9, 0x22, 0xC9, 0x70, 0x77, 0x11, 0x80,
-      0x00, 0x84, 0x93, 0xD4, 0xC7, 0x68, 0x05, 0x40, 0x0B, 0x7C, 0x66, 0x4D,
-      0x0B, 0x92, 0xB2, 0x2C, 0x49, 0x55, 0x1B, 0x12, 0x47, 0xE6, 0x2C, 0x85,
-      0xE1, 0xE5, 0x40, 0xC8, 0x20, 0x93, 0x37, 0x10, 0x13, 0xC4, 0x67, 0x6C,
-      0xEA, 0xD7, 0x7C, 0x5F, 0x30, 0x64, 0xA3, 0x73, 0x49, 0xC7, 0x16, 0x5E,
-      0xB3, 0xAA, 0x7D, 0xEF, 0x87, 0x31, 0xE9, 0xD6, 0x6A, 0x56, 0x36, 0x8F,
-      0x19, 0x5C, 0x04, 0x5B, 0x2A, 0x50, 0xE5, 0x97, 0x86, 0x16, 0x1A, 0x63,
-      0x0D, 0x28, 0x00, 0x89, 0x80, 0x12, 0x98, 0xC1, 0x30, 0xE4, 0x48, 0x31,
-      0x50, 0xCA, 0x91, 0x52, 0xC2, 0xA0, 0xF2, 0x47, 0x75, 0x0C, 0x06, 0x22,
-      0x59, 0xB8, 0x4C, 0x28, 0x23, 0x6C, 0x3F, 0xB5, 0x46, 0x25, 0xD5, 0xCD,
-      0xBE, 0xCC, 0x68, 0xDB, 0xA2, 0x2F, 0xB1, 0x55, 0x80, 0x55, 0xFB, 0x9B,
-      0x24, 0x35, 0x01, 0xC7, 0x58, 0x51, 0xE7, 0x6A, 0xBE, 0x48, 0x47, 0xB9,
-      0xB9, 0x72, 0xA7, 0x34, 0x11, 0xA6, 0xB4, 0x28, 0x2B, 0xF5, 0x98, 0x3A,
-      0x82, 0xDA, 0x74, 0x13, 0xE5, 0x4B, 0xA3, 0x5B, 0xAB, 0x37, 0xA9, 0xB3,
-      0xC6, 0x28, 0x84, 0xB6, 0x43, 0xC1, 0x34, 0x16, 0x5C, 0x98, 0x70, 0xC6,
-      0xBB, 0x39, 0x0F, 0x6B, 0x7A, 0x1E, 0x57, 0x45, 0x15, 0x8F, 0xB2, 0x51,
-      0xD6, 0x90, 0x94, 0x33, 0x55, 0x1F, 0xEB, 0xD3, 0x0B, 0xA5, 0x75, 0xA1,
-      0xE2, 0xF1, 0x09, 0x58, 0x49, 0x8D, 0x9F, 0x14, 0x7E, 0xD9, 0x53, 0x13,
-      0x22, 0xA1, 0x60, 0x97, 0xF5, 0x5D, 0x81, 0x17, 0x95, 0x45, 0x79, 0x12,
-      0x91, 0x2B, 0x1C, 0x65, 0xF3, 0x80, 0x25, 0x42, 0x9B, 0x3E, 0x76, 0x4A,
-      0x2E, 0x1A, 0xBC, 0x4E, 0x30, 0xC2, 0x88, 0x08, 0x27, 0x42, 0x99, 0x55,
-      0x90, 0x98, 0x1C, 0x43, 0xDB, 0xB3, 0x65, 0x96, 0x6B, 0xCB, 0x97, 0x20,
-      0xB1, 0x78, 0xC5, 0xEB, 0x96, 0x3B, 0x82, 0x93, 0x4C, 0x02, 0x81, 0x4B,
-      0x75, 0x25, 0x54, 0x6D, 0xB7, 0xC9, 0x6D, 0x65, 0x82, 0x2E, 0x49, 0x42,
-      0xE4, 0xA4, 0xAC, 0x13, 0xC9, 0x94, 0x90, 0xE7, 0xAB, 0x4A, 0x70, 0x23,
-      0x71, 0xF2, 0x13, 0x16, 0xA5, 0x79, 0x06, 0xB1, 0x92, 0x58, 0x42, 0x88,
-      0x01, 0x19, 0x25, 0x67, 0xC2, 0x04, 0x5B, 0xF8, 0x77, 0x5C, 0xF5, 0x8C,
-      0x5D, 0xB2, 0x8B, 0xA1, 0xB0, 0x5E, 0x04, 0x2A, 0x18, 0x59, 0xE6, 0x42,
-      0x86, 0xB5, 0xB1, 0x14, 0xF3, 0x9F, 0xCA, 0xCC, 0x12, 0x7B, 0xE6, 0x3D,
-      0xFF, 0x59, 0x0B, 0xC1, 0x84, 0xB8, 0x3B, 0x16, 0x8C, 0x30, 0x19, 0x98,
-      0x90, 0x37, 0x41, 0x00, 0xE4, 0x0D, 0x2F, 0xC7, 0x75, 0x2B, 0x14, 0x30,
-      0x35, 0x50, 0x22, 0xF3, 0xD5, 0x89, 0x25, 0xD1, 0x99, 0x1B, 0xF3, 0xB9,
-      0x8A, 0x90, 0x39, 0x5F, 0x85, 0x79, 0x64, 0x6C, 0x84, 0x13, 0xBA, 0xB3,
-      0xC0, 0xC0, 0x70, 0x7A, 0x23, 0x8A, 0x27, 0xD0, 0x9F, 0xA5, 0x7A, 0x32,
-      0xFF, 0x85, 0x39, 0x2F, 0xD0, 0x8C, 0x2F, 0x22, 0x86, 0xAB, 0xDB, 0x2B,
-      0x69, 0x36, 0xB9, 0xD3, 0x50, 0x38, 0x02, 0xC6, 0xB5, 0x1E, 0x41, 0x5B,
-      0x81, 0x67, 0x3C, 0xC7, 0x80, 0x54, 0xF1, 0xB2, 0xC4, 0xBD, 0xFA, 0x73,
-      0x3E, 0x52, 0x64, 0xC5, 0x5A, 0x7C, 0x4D, 0xA5, 0xB7, 0x39, 0x44, 0x40,
-      0x24, 0x62, 0x03, 0x3D, 0x08, 0xAE, 0x62, 0x0B, 0xD0, 0x56, 0x44, 0xB4,
-      0x77, 0xAB, 0x31, 0x5E, 0x93, 0x6D, 0x3F, 0x25, 0xB5, 0xBA, 0x7A, 0xC1,
-      0x9E, 0xB5, 0x59, 0xA5, 0xC1, 0x19, 0x5F, 0x56, 0x8B, 0x31, 0x3C, 0x26,
-      0x75, 0x09, 0x2E, 0x6D, 0xF5, 0x8F, 0xF3, 0x99, 0xC4, 0x2C, 0xAB, 0x63,
-      0x63, 0xAA, 0x03, 0x36, 0x91, 0xCB, 0x8C, 0xE0, 0x66, 0x99, 0xE7, 0x01,
-      0xF2, 0xB9, 0x25, 0x97, 0xCB, 0x8F, 0xC2, 0x35, 0x16, 0xE9, 0xF4, 0x0C,
-      0xE7, 0x5B, 0x7B, 0xC1, 0xE0, 0x52, 0x0A, 0x5A, 0x38, 0x95, 0xEB, 0x7D,
-      0x8D, 0x47, 0x40, 0x09, 0xA0, 0xCB, 0x0A, 0xDC, 0x2D, 0xF4, 0x76, 0xB5,
-      0x16, 0x41, 0x12, 0xC3, 0xB6, 0x00, 0xB6, 0x77, 0x6D, 0xAB, 0x49, 0xB2,
-      0x03, 0x81, 0xA4, 0x01, 0x46, 0x91, 0x65, 0x2A, 0x3C, 0x31, 0x61, 0xAA,
-      0xC6, 0x61, 0x6C, 0xFA, 0xA2, 0x65, 0x63, 0x8C, 0x6C, 0x66, 0x5A, 0x84,
-      0x54, 0xF3, 0x67, 0x80, 0xB7, 0x89, 0xCF, 0xA3, 0x5D, 0x2A, 0xF4, 0x9E,
-      0x6D, 0x5F, 0x48, 0x2B, 0xFA, 0x3C, 0x86, 0x4B, 0x0E, 0xF2, 0x9E, 0x18,
-      0xD2, 0xEF, 0xFF, 0x92, 0xDB, 0x18, 0x76, 0xA2, 0x20, 0x76, 0xAB, 0x1A,
-      0xAC, 0x0A, 0x73, 0x93, 0xED, 0x9E, 0x5A, 0x48,
-    },
-
-    .seed = {
-      0x03, 0x4F, 0xF1, 0x4A, 0x56, 0x24, 0x9C, 0x25, 0x21, 0xD4, 0x27, 0x9E,
-      0xBA, 0x3D, 0x04, 0x93, 0x1C, 0xC8, 0x92, 0xBB, 0xC4, 0x50, 0x02, 0xB5,
-      0xB3, 0x3D, 0x9F, 0x01, 0x88, 0xAC, 0xBA, 0xF6,
-    },
-
-    .exp_k = {
-      0x46, 0xC2, 0x00, 0xF3, 0xF6, 0xEE, 0x8E, 0x11, 0xD4, 0x76, 0x53, 0x80,
-      0x1E, 0x34, 0x82, 0x24, 0x1C, 0xB7, 0x83, 0xB9, 0xD7, 0x94, 0xEB, 0x11,
-      0x6A, 0x4B, 0xDA, 0x08, 0x5A, 0xEB, 0x6B, 0xB7,
-    },
-
-    .exp_ct = {
-      0x8D, 0x4E, 0x2C, 0xB3, 0x9F, 0xFD, 0xE4, 0x31, 0x1A, 0xEE, 0xDB, 0x23,
-      0x38, 0xBF, 0x58, 0xCE, 0x11, 0xFA, 0xDA, 0xBD, 0xC9, 0x81, 0x3A, 0x32,
-      0x19, 0x30, 0xF4, 0x67, 0x56, 0xDD, 0x13, 0xA8, 0xE7, 0x91, 0x9F, 0xAC,
-      0x4F, 0x59, 0xCC, 0x9F, 0x8B, 0x91, 0xC8, 0x33, 0xB3, 0xB3, 0xF9, 0x1A,
-      0xDC, 0x6F, 0x9F, 0xBD, 0xBD, 0xE2, 0xF7, 0xDA, 0xE8, 0x84, 0x1B, 0xE5,
-      0x23, 0x8B, 0x98, 0x50, 0xA5, 0xEE, 0xBE, 0x67, 0x5D, 0xDE, 0xF4, 0x2A,
-      0x93, 0x14, 0xF6, 0x90, 0x59, 0x5D, 0x51, 0x52, 0x3E, 0x81, 0x17, 0xF2,
-      0x22, 0x66, 0x03, 0x4F, 0x09, 0xB7, 0x7D, 0x99, 0x1E, 0xE5, 0x75, 0x80,
-      0x2A, 0xFE, 0x44, 0x63, 0x74, 0xEB, 0x3D, 0x9E, 0x1B, 0xEB, 0x8F, 0x25,
-      0x04, 0x9C, 0x6E, 0xFA, 0x96, 0x32, 0x73, 0x66, 0xC0, 0x24, 0xCD, 0xFB,
-      0xE8, 0xDC, 0x27, 0xEF, 0x56, 0x49, 0x2C, 0x90, 0x40, 0x9E, 0x87, 0x13,
-      0x9C, 0x60, 0x88, 0x48, 0x8E, 0x17, 0xB8, 0x2D, 0x15, 0x56, 0xC2, 0x51,
-      0x31, 0xAC, 0xEE, 0x7D, 0xAF, 0xFE, 0x2D, 0x43, 0x7C, 0xEC, 0x34, 0x41,
-      0xBB, 0xBB, 0xAB, 0x80, 0xC4, 0xBF, 0x17, 0x7E, 0x65, 0x3A, 0xE0, 0x83,
-      0x1C, 0x9B, 0x4C, 0xEB, 0x70, 0x50, 0x57, 0x27, 0xD6, 0x3C, 0x4D, 0x47,
-      0x4F, 0xED, 0xC5, 0x20, 0x19, 0xBE, 0x41, 0x1C, 0x9A, 0x43, 0xB8, 0x71,
-      0x70, 0xF5, 0x89, 0x3F, 0x06, 0xEC, 0xD8, 0xD7, 0x82, 0x06, 0x3D, 0xF8,
-      0x93, 0xA1, 0xB6, 0x82, 0x24, 0x6D, 0x1C, 0x64, 0xF8, 0xF5, 0xA8, 0xC6,
-      0xFC, 0xDF, 0x07, 0x92, 0x7F, 0x4D, 0x5B, 0x7A, 0x39, 0x7F, 0xBC, 0xBD,
-      0x07, 0x50, 0x45, 0xDF, 0x2C, 0x4A, 0x36, 0xF5, 0x30, 0x4C, 0x95, 0xF4,
-      0x4A, 0xF9, 0x27, 0xAE, 0x91, 0x66, 0x42, 0x0B, 0x39, 0x44, 0x87, 0x94,
-      0xF5, 0xB3, 0xC3, 0x52, 0x27, 0xC3, 0xC9, 0xDF, 0x92, 0x56, 0x02, 0xA1,
-      0xAC, 0x98, 0xF8, 0x51, 0xAA, 0xDB, 0x65, 0xC9, 0x3F, 0xDD, 0x63, 0x27,
-      0xAE, 0xD8, 0xAE, 0x41, 0x29, 0x72, 0x44, 0x36, 0xA3, 0x3A, 0xA0, 0x8A,
-      0xA5, 0x66, 0x08, 0x85, 0x5F, 0xF8, 0x0A, 0xAA, 0x42, 0xAC, 0xA4, 0x56,
-      0x2B, 0x2D, 0x78, 0xDB, 0xBD, 0x2F, 0x91, 0xAE, 0xF2, 0x51, 0x56, 0x6B,
-      0x8C, 0x6F, 0x98, 0x21, 0x37, 0x84, 0xC9, 0x9D, 0xD7, 0xD7, 0x1F, 0x49,
-      0x55, 0x64, 0xC9, 0x08, 0x50, 0x1E, 0x35, 0xE3, 0xBF, 0xBB, 0x67, 0x5C,
-      0xCB, 0x66, 0x63, 0x52, 0x87, 0xCB, 0x64, 0x66, 0xE6, 0xE3, 0x8E, 0xA8,
-      0xAB, 0x11, 0xCE, 0x7E, 0xC6, 0x0B, 0xED, 0x86, 0x20, 0xB3, 0xDC, 0xD6,
-      0x94, 0x3D, 0x12, 0x79, 0xA4, 0x1F, 0x93, 0xA8, 0x7F, 0xA3, 0x59, 0xE5,
-      0x13, 0xC8, 0x1D, 0xE9, 0x18, 0xDA, 0x88, 0x32, 0x2B, 0x1B, 0x08, 0x81,
-      0x40, 0xE0, 0x74, 0xBE, 0x39, 0xBC, 0x17, 0xE3, 0xC5, 0x1A, 0xB7, 0x19,
-      0xDF, 0x6E, 0x42, 0x6D, 0x64, 0xFF, 0x94, 0xB8, 0x66, 0x2B, 0x9D, 0xD2,
-      0x6A, 0x32, 0xA3, 0xC3, 0x68, 0x7B, 0xF9, 0x29, 0x4C, 0x53, 0x7A, 0x22,
-      0x68, 0xF9, 0xDE, 0xD3, 0x80, 0xCC, 0x8A, 0x0F, 0x11, 0x27, 0xEE, 0x5A,
-      0x32, 0x2B, 0x4D, 0xF2, 0x4D, 0x87, 0xFB, 0xCE, 0x76, 0xF5, 0x60, 0xB0,
-      0x37, 0xC6, 0x59, 0xB6, 0xFB, 0x15, 0xC1, 0x56, 0x07, 0x1A, 0xED, 0xC2,
-      0x6E, 0xF1, 0x11, 0x40, 0xDE, 0x88, 0xD0, 0x8D, 0x46, 0x3E, 0xA0, 0xEA,
-      0xF0, 0x80, 0xA0, 0xB2, 0xE6, 0x27, 0xD9, 0xFF, 0x1D, 0x56, 0xC5, 0x02,
-      0x33, 0x55, 0x24, 0x26, 0x97, 0x27, 0xA0, 0x32, 0xDA, 0xCD, 0x16, 0x54,
-      0x3A, 0xDA, 0x83, 0x42, 0xCD, 0x6C, 0xB4, 0x0E, 0x72, 0x28, 0x59, 0x2C,
-      0x35, 0x74, 0xD9, 0x82, 0xE0, 0xB9, 0x14, 0x5E, 0xB8, 0x65, 0xDB, 0x2E,
-      0xE7, 0x81, 0x07, 0x26, 0xA9, 0x16, 0xB8, 0x37, 0xCA, 0x4F, 0x14, 0xC2,
-      0xCB, 0x9E, 0x95, 0x1B, 0xDE, 0x76, 0xBE, 0x16, 0xB8, 0xB1, 0xCD, 0xC2,
-      0xEE, 0xCD, 0xC0, 0x69, 0x49, 0xB8, 0xBE, 0xB1, 0x17, 0x86, 0xB8, 0xF2,
-      0x5F, 0x4C, 0x9A, 0xFA, 0x55, 0x97, 0xCE, 0xB1, 0xD8, 0x5F, 0xC9, 0xB9,
-      0xC9, 0x1D, 0xC6, 0x19, 0x66, 0xF3, 0x96, 0x09, 0x1E, 0x54, 0xC9, 0x6C,
-      0x97, 0xA4, 0x30, 0x0E, 0x99, 0xFD, 0x9F, 0x75, 0x2C, 0x0B, 0xEF, 0x5D,
-      0x88, 0xCA, 0xFB, 0xDC, 0xB3, 0x99, 0x3F, 0xCF, 0x6C, 0x7A, 0x8C, 0x55,
-      0x19, 0xFC, 0xEC, 0xB6, 0xA7, 0x91, 0x17, 0xE9, 0xB5, 0x21, 0x68, 0x01,
-      0x97, 0xD8, 0xA9, 0x1A, 0xB7, 0x5F, 0x18, 0x14, 0xDB, 0xC5, 0x80, 0x75,
-      0xEF, 0x4F, 0x07, 0x98, 0x7A, 0xBC, 0x56, 0xA7, 0x5D, 0xA4, 0x41, 0x6E,
-      0xDB, 0x9D, 0x6F, 0x3D, 0x77, 0x1A, 0xD3, 0x40, 0xD5, 0xCB, 0xCF, 0xC0,
-      0xE5, 0x71, 0xFA, 0x70, 0xAA, 0xC1, 0xC7, 0xDB, 0xBB, 0x5F, 0x5C, 0x5E,
-      0x1D, 0x8B, 0x10, 0x36, 0xF5, 0xA6, 0xFC, 0xFD, 0x06, 0x25, 0xAB, 0x5B,
-      0xBD, 0xA5, 0x71, 0x83, 0x9C, 0x58, 0x35, 0xDD, 0x69, 0x79, 0x77, 0x8F,
-      0x59, 0xD3, 0x48, 0x68, 0x4F, 0xA6, 0xCF, 0xC2, 0xA6, 0x25, 0x35, 0xB4,
-      0x7F, 0xAD, 0x7F, 0x97, 0xB5, 0x21, 0x88, 0x72, 0xD5, 0x2D, 0xCA, 0xCE,
-      0x9D, 0x3C, 0x1B, 0x11, 0x62, 0x8D, 0x35, 0x2A, 0xD8, 0x21, 0x90, 0x0F,
-      0x44, 0xE1, 0x4B, 0x64, 0x7F, 0x6B, 0xFA, 0x70, 0xF6, 0x46, 0xB5, 0xC7,
-      0xAF, 0x53, 0x13, 0x17, 0x7A, 0x10, 0x95, 0x49, 0x44, 0x22, 0x91, 0x53,
-      0xA4, 0x49, 0xFC, 0xF8, 0x9A, 0x62, 0x63, 0xBD, 0xBF, 0x85, 0x56, 0xE9,
-      0x81, 0xE5, 0xD6, 0x25, 0x13, 0x40, 0xF9, 0xF4, 0x3C, 0x66, 0x92, 0x03,
-      0x0F, 0xB9, 0x60, 0x5B, 0xB9, 0x9F, 0x33, 0xE9, 0x6F, 0x06, 0xD1, 0xE4,
-      0xE6, 0xAB, 0xBE, 0x65, 0xE1, 0x46, 0x96, 0xD5, 0x30, 0xF1, 0xB5, 0x25,
-      0xFF, 0xF8, 0x7D, 0x54, 0xC1, 0xAC, 0x2F, 0x5E, 0x96, 0x4D, 0x46, 0xEE,
-      0x37, 0xF4, 0x04, 0x5B, 0x54, 0xE6, 0x09, 0x8F, 0x76, 0xB2, 0x8E, 0xAF,
-      0x69, 0xE9, 0x98, 0x88, 0x8D, 0x25, 0xE0, 0x21, 0xA5, 0x38, 0xFD, 0x19,
-      0x56, 0xA7, 0xFC, 0x30, 0xAE, 0x83, 0xF8, 0xBA, 0x99, 0x47, 0xF8, 0x64,
-      0xFD, 0x59, 0x73, 0x1A, 0x6F, 0xBB, 0x40, 0x2A, 0xF2, 0x99, 0x0E, 0x1E,
-      0xD2, 0xD5, 0x6B, 0xF6, 0x2A, 0xA6, 0xCE, 0xAE, 0x6F, 0x76, 0x9D, 0x2D,
-      0x0C, 0x6C, 0x31, 0x3D, 0x7A, 0xAF, 0x97, 0x4E, 0x69, 0xDC, 0x02, 0xCC,
-      0x43, 0x18, 0xB9, 0x45, 0x7B, 0x8C, 0xC4, 0x06, 0x56, 0xAB, 0x7B, 0x61,
-      0x34, 0xDE, 0x3F, 0x98, 0x01, 0xCE, 0x01, 0x96, 0x99, 0xCE, 0x85, 0x5E,
-      0xBE, 0x9C, 0x6C, 0x02, 0xFD, 0x08, 0x50, 0x6F, 0x00, 0x4A, 0x4E, 0xED,
-      0x2C, 0xA1, 0x66, 0xC9, 0x54, 0xC7, 0xDB, 0x88, 0x10, 0x70, 0x0C, 0xA6,
-      0x71, 0xEF, 0x37, 0x2A, 0x29, 0x0B, 0x00, 0xE1, 0xBF, 0xBB, 0x97, 0xE3,
-      0xE6, 0x74, 0xD3, 0xDC, 0xCC, 0x57, 0xCE, 0x59, 0xF4, 0x65, 0xB1, 0x48,
-      0x8F, 0xF7, 0x6F, 0x62, 0x39, 0x00, 0x8B, 0xE3, 0xE7, 0x61, 0xEF, 0x9C,
-      0x11, 0x3D, 0xF0, 0x10, 0x7B, 0x8E, 0xEA, 0xE3, 0xFE, 0xBA, 0x55, 0xB3,
-      0x5E, 0x4C, 0x1D, 0xA3, 0xB6, 0xC8, 0x7A, 0x8D, 0x20, 0x11, 0x0E, 0x1C,
-      0xD7, 0x71, 0xCC, 0xBC, 0x30, 0xDF, 0xF7, 0x61, 0xE6, 0x03, 0xD4, 0x88,
-      0xE5, 0x5B, 0x85, 0x3A, 0xAE, 0x7D, 0xAA, 0xDF, 0x2A, 0x00, 0x7B, 0x83,
-      0x93, 0xDF, 0x08, 0xAF, 0x53, 0x4F, 0x9F, 0x53, 0xA7, 0x37, 0x57, 0xBA,
-      0xBE, 0x21, 0xC8, 0x64, 0x26, 0xCF, 0x05, 0x8E, 0xCA, 0x81, 0x7E, 0xF2,
-      0x37, 0xBF, 0xC5, 0x8A, 0xC2, 0x98, 0xFB, 0xF2, 0xA1, 0x48, 0x1C, 0x4D,
-      0x12, 0xDC, 0xF1, 0xB7, 0x37, 0xFD, 0x63, 0x97, 0x69, 0xA2, 0x53, 0x1E,
-      0xF9, 0x31, 0xA3, 0x62, 0xA4, 0x44, 0x56, 0xEE, 0x2C, 0xA4, 0x85, 0x98,
-      0xB4, 0x62, 0x59, 0xFC, 0xC9, 0x77, 0x07, 0x6C, 0x59, 0xFA, 0x4E, 0x29,
-      0x54, 0xE9, 0x96, 0x7D, 0xA4, 0x5D, 0xA7, 0xCB, 0xF7, 0x86, 0x33, 0xEC,
-      0x59, 0xC4, 0x63, 0xFE, 0x48, 0xA8, 0x3B, 0x80, 0x1A, 0x54, 0xDB, 0x3F,
-      0xEA, 0xB4, 0x45, 0xA3, 0x57, 0xE4, 0x18, 0xB0, 0x65, 0x3F, 0x29, 0x40,
-      0xB2, 0xB7, 0x13, 0x81, 0xB2, 0xDF, 0x9E, 0xCF, 0x81, 0x00, 0x84, 0x8E,
-      0x29, 0x12, 0xF4, 0xBD, 0x50, 0x3A, 0xF0, 0x75, 0xAA, 0xAF, 0x36, 0xC1,
-      0x36, 0xA4, 0x13, 0xC9, 0x5B, 0xE2, 0xF2, 0x5A, 0x6D, 0x29, 0x19, 0x76,
-      0xCD, 0x66, 0xA2, 0x76, 0x43, 0x53, 0x7E, 0x35, 0xE1, 0xDF, 0x89, 0xB1,
-      0xE4, 0x94, 0xB3, 0x6B, 0x08, 0xF3, 0xD0, 0x19, 0x6C, 0xD7, 0xE9, 0x0B,
-      0xA5, 0xBB, 0x21, 0x00, 0x9F, 0x37, 0xA8, 0x43, 0x19, 0x9E, 0x08, 0xDD,
-      0x95, 0xCA, 0x49, 0x48, 0xC5, 0x33, 0xCB, 0x26, 0x3B, 0x5D, 0x40, 0x5A,
-      0xF2, 0xFA, 0x11, 0x99, 0x81, 0xA8, 0x53, 0x6E, 0xB7, 0x1C, 0x88, 0x22,
-      0x6C, 0x41, 0x53, 0x4C, 0x26, 0x87, 0xBF, 0x1E, 0xED, 0x34, 0x75, 0xE8,
-      0x48, 0x8B, 0xDE, 0x90, 0x9A, 0x93, 0xD4, 0xDB, 0x55, 0xB6, 0xE8, 0x34,
-      0xB5, 0xE7, 0x86, 0x0A, 0xA9, 0x8F, 0xD8, 0xBC, 0xB1, 0x3A, 0xB0, 0x77,
-      0xB7, 0xBF, 0xD7, 0x5B, 0x35, 0xFA, 0x39, 0x3E, 0x93, 0xE3, 0xBF, 0xB4,
-      0xB9, 0xBA, 0x1D, 0xAA, 0x74, 0x65, 0xFD, 0x5B, 0x23, 0xA5, 0xB4, 0xCD,
-      0x17, 0x16, 0xD4, 0xBD, 0xF7, 0xB8, 0xD5, 0x57, 0x4B, 0x15, 0x6D, 0xB8,
-      0x7D, 0x8D, 0xE1, 0xE5, 0x26, 0xC9, 0x7F, 0x8E, 0xB2, 0x87, 0xBD, 0x97,
-      0xEE, 0xEE, 0xEF, 0x07, 0x4D, 0xBC, 0xB2, 0xC4, 0xDB, 0x51, 0xA4, 0xEF,
-      0xF1, 0xFA, 0x7F, 0xFF, 0x32, 0x8A, 0x57, 0x2D, 0x72, 0x70, 0x01, 0x71,
-      0x08, 0xAC, 0xE2, 0xED, 0x25, 0x09, 0x3D, 0xA5, 0x35, 0xC7, 0xA2, 0x6D,
-      0x3B, 0x91, 0x2A, 0xA5, 0x7F, 0xB3, 0x22, 0xE5, 0x3B, 0xB2, 0x22, 0xE9,
-      0x4E, 0x7C, 0xF6, 0x8C, 0xD8, 0xA2, 0x1A, 0xD7, 0xC0, 0x6A, 0x4A, 0xF9,
-      0x78, 0xED, 0x1D, 0xEB, 0x10, 0xE3, 0xF2, 0x41, 0x2A, 0xC6, 0x54, 0x3C,
-      0x18, 0x20, 0x68, 0xEF, 0xFB, 0xD8, 0x7F, 0x31, 0x76, 0x5F, 0x5A, 0xE6,
-      0x81, 0xEE, 0x8B, 0x2E, 0x9A, 0xEB, 0x5B, 0xC9, 0x40, 0xA9, 0x4E, 0xC0,
-      0xEE, 0xF5, 0xBE, 0xF7, 0x48, 0x74, 0x16, 0x9E, 0xAB, 0xEC, 0xF1, 0x51,
-      0x25, 0x65, 0xC5, 0x1E, 0xA5, 0x87, 0x21, 0xDD, 0x3A, 0xF1, 0x69, 0x03,
-      0x65, 0xDB, 0x22, 0xE1, 0x87, 0x7F, 0x2A, 0x5C, 0x01, 0x72, 0x3F, 0x69,
-      0xB7, 0x72, 0x52, 0x77, 0xAE, 0x4E, 0x9E, 0xFA, 0xCD, 0x3A, 0xFA, 0x5A,
-      0xDC, 0xAF, 0x38, 0x57, 0x77, 0xE7, 0xCE, 0x10, 0xF9, 0x56, 0xB4, 0x64,
-      0x2C, 0x6F, 0xC1, 0xC9, 0x78, 0x08, 0x99, 0x3E, 0xFD, 0x99, 0x4C, 0xA6,
-      0x5C, 0x75, 0xF4, 0x59, 0xAC, 0x58, 0x72, 0xF8, 0x24, 0x88, 0xC5, 0x7F,
-      0xB7, 0xAF, 0x9A, 0xB9, 0x69, 0xD5, 0xE3, 0x69, 0xC1, 0x6D, 0x0B, 0x2B,
-      0xF7, 0x80, 0x0B, 0x93, 0x8D, 0x67, 0x84, 0xC7, 0xF6, 0x4D, 0x0C, 0x55,
-      0xCA, 0x77, 0x94, 0x65, 0x49, 0x38, 0x94, 0x9E, 0x14, 0x21, 0x70, 0x55,
-      0xD3, 0x41, 0x01, 0xF9, 0x41, 0x7D, 0x37, 0x0A, 0x8A, 0xDD, 0x72, 0xFC,
-      0x0B, 0x57, 0x66, 0xEC, 0x1D, 0x8A, 0xDD, 0xD7, 0x02, 0x33, 0x4A, 0x2A,
-      0xC2, 0x77, 0x09, 0xC5, 0xAC, 0x5A, 0xE5, 0x60, 0x1D, 0xBA, 0x95, 0x2B,
-      0xE2, 0x58, 0xD9, 0x33, 0x6D, 0xF3, 0xE0, 0xF6, 0x58, 0x78, 0xA8, 0x58,
-      0x61, 0x32, 0x58, 0xFB, 0x5E, 0x47, 0x94, 0x1B,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // Generate shared key `got_k` and ciphertext `got_ct` for test
-    // encapsulation key `ek` and randomness `seed`.
-    uint8_t got_k[32] = { 0 }, got_ct[FIPS203IPD_KEM1024_CT_SIZE] = { 0 };
-    fips203ipd_kem1024_encaps(got_k, got_ct, TESTS[i].ek, TESTS[i].seed);
-
-    // check for expected shared key
-    if (memcmp(got_k, TESTS[i].exp_k, sizeof(got_k))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - k", TESTS[i].name);
-      fail_test(__func__, name, got_k, sizeof(got_k), TESTS[i].exp_k, sizeof(got_k));
-    }
-
-    // check for expected ciphertext
-    if (memcmp(got_ct, TESTS[i].exp_ct, sizeof(got_ct))) {
-      char name[64];
-      snprintf(name, sizeof(name), "%s - ct", TESTS[i].name);
-      fail_test(__func__, name, got_ct, sizeof(got_ct), TESTS[i].exp_ct, sizeof(got_ct));
-    }
-  }
-}
-
-static void test_fips203ipd_kem1024_decaps(void) {
-  static const struct {
-    const char *name; // test name
-    const uint8_t ct[FIPS203IPD_KEM1024_CT_SIZE]; // test ciphertext (1568 bytes)
-    const uint8_t dk[FIPS203IPD_KEM1024_DK_SIZE]; // test decapsulation key (3168 bytes)
-    const uint8_t exp[32]; // expected message (32 bytes)
-  } TESTS[] = {{
-    // src: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files
-    .name = "Decapsulation -- ML-KEM-1024",
-
-    .ct = {
-      0x61, 0xFF, 0x1A, 0x8B, 0x61, 0x17, 0xEF, 0x11, 0x83, 0x28, 0xE8, 0x8B,
-      0x32, 0x27, 0x99, 0x30, 0x14, 0xDC, 0xD0, 0x75, 0xB8, 0xA1, 0xA7, 0xF9,
-      0x80, 0x18, 0x93, 0xEE, 0xE6, 0x40, 0x5B, 0xB9, 0x60, 0xB6, 0xB7, 0xF6,
-      0xA1, 0xA2, 0x75, 0x18, 0xA3, 0x40, 0x91, 0x39, 0xA4, 0x8B, 0x85, 0x96,
-      0x81, 0xCC, 0x75, 0x8F, 0x2B, 0xCC, 0x3E, 0xEF, 0xB0, 0x43, 0x94, 0xA3,
-      0x75, 0xA5, 0xCD, 0x71, 0x31, 0x64, 0x90, 0x93, 0x8A, 0xBF, 0xD1, 0x94,
-      0xB2, 0x0B, 0xCD, 0x31, 0xB3, 0x98, 0x02, 0x61, 0xC9, 0xED, 0x69, 0xBF,
-      0x9B, 0x1D, 0x7D, 0x76, 0x59, 0xA8, 0x04, 0x0D, 0xB1, 0xE2, 0x5D, 0x2B,
-      0xA6, 0xF7, 0x03, 0x48, 0x66, 0x24, 0xB7, 0x3C, 0xAC, 0xDC, 0xA2, 0x7D,
-      0xB0, 0xF7, 0xE2, 0x40, 0x8C, 0x94, 0x48, 0xE3, 0x88, 0x73, 0x28, 0x0F,
-      0x5E, 0x99, 0x50, 0xD7, 0xCC, 0xE2, 0x52, 0xA6, 0x47, 0x58, 0x0C, 0x19,
-      0x90, 0x4F, 0xAD, 0x62, 0xAE, 0xC3, 0x00, 0xBC, 0x8E, 0x38, 0xF0, 0x59,
-      0x48, 0xB6, 0x3B, 0xAD, 0x5C, 0xE7, 0xC9, 0x0E, 0x40, 0xC4, 0xBC, 0x65,
-      0x11, 0x77, 0x61, 0xF5, 0xF8, 0x86, 0x8F, 0x80, 0x25, 0xD6, 0xCE, 0xB2,
-      0xC5, 0xDF, 0x60, 0xDE, 0x38, 0xC3, 0x23, 0x29, 0x22, 0x08, 0x7E, 0xFC,
-      0xF2, 0xCD, 0x95, 0xDE, 0x5E, 0x87, 0xB6, 0x88, 0x8B, 0x88, 0xC8, 0x6C,
-      0xC7, 0x83, 0x15, 0x58, 0x5B, 0x2C, 0xC6, 0x88, 0xA7, 0x1B, 0x47, 0x7B,
-      0xFA, 0x38, 0x8D, 0xC2, 0x33, 0x4D, 0xFA, 0x8A, 0xA9, 0x55, 0x03, 0xD5,
-      0x39, 0x7E, 0x2A, 0xE0, 0x35, 0x29, 0x03, 0xEA, 0x6A, 0x0A, 0xE8, 0xB6,
-      0x49, 0xA9, 0x14, 0xB3, 0x52, 0x5F, 0xE5, 0x8F, 0x56, 0x4B, 0xF1, 0x9C,
-      0xC0, 0x9F, 0x54, 0xE1, 0x05, 0xD1, 0x9B, 0xD8, 0x10, 0x54, 0xE5, 0x70,
-      0x01, 0xF7, 0x0B, 0xBD, 0xD7, 0x71, 0x94, 0x49, 0x68, 0x7E, 0x9A, 0x53,
-      0xB1, 0x6C, 0xA5, 0x36, 0x6A, 0x19, 0x10, 0x5A, 0x8B, 0xA0, 0x85, 0x89,
-      0xAD, 0x08, 0xDF, 0x13, 0x00, 0xEF, 0x4F, 0x92, 0x3B, 0xA9, 0xE7, 0x62,
-      0xA8, 0x2F, 0xB0, 0x9B, 0x76, 0xE1, 0x25, 0xF2, 0xF2, 0x74, 0xD6, 0x17,
-      0xBF, 0x30, 0xEA, 0xB4, 0x65, 0xEC, 0xF2, 0x4D, 0x37, 0x07, 0xAD, 0x30,
-      0x0D, 0x9A, 0xFC, 0x1C, 0xF1, 0xDC, 0x40, 0xEE, 0x7D, 0x4E, 0xEA, 0x6D,
-      0x15, 0x0E, 0x6F, 0x0A, 0x31, 0xDB, 0x9F, 0x8F, 0x92, 0xBA, 0x8E, 0xEE,
-      0xB3, 0x5D, 0x74, 0x45, 0x58, 0x9B, 0x04, 0x6B, 0xA7, 0x9E, 0xFE, 0x23,
-      0x11, 0x06, 0xCF, 0x0A, 0x75, 0x71, 0x2A, 0xB3, 0x92, 0x72, 0x4C, 0x53,
-      0xEF, 0xF9, 0xF5, 0x73, 0x3B, 0xEE, 0x0D, 0x6A, 0x44, 0xD0, 0xB6, 0xF5,
-      0x15, 0xD0, 0xF5, 0xE4, 0x0B, 0x1B, 0x1E, 0x17, 0xE6, 0x7A, 0xED, 0x3C,
-      0x81, 0xD0, 0x0A, 0xC4, 0x68, 0xA2, 0x8F, 0x84, 0x53, 0xD4, 0xB0, 0xDA,
-      0x80, 0x9E, 0x57, 0xD8, 0x23, 0xF2, 0x8D, 0x61, 0xED, 0x0B, 0x59, 0xA0,
-      0x8C, 0x62, 0x29, 0x72, 0xD9, 0x91, 0x79, 0xDA, 0x86, 0x36, 0xC4, 0x5F,
-      0x1C, 0xE8, 0xF6, 0x25, 0x2A, 0xC8, 0x6D, 0x91, 0xB5, 0xE9, 0x29, 0x97,
-      0x01, 0x4E, 0x3F, 0x50, 0x89, 0xE6, 0x8B, 0xC5, 0x2C, 0xED, 0x5D, 0xAE,
-      0x6D, 0x5B, 0x17, 0x5F, 0xE2, 0xD6, 0x19, 0x28, 0x46, 0x50, 0x59, 0x72,
-      0x4C, 0x83, 0x59, 0x02, 0xD7, 0x61, 0x2C, 0xDB, 0x69, 0xCD, 0xAC, 0x66,
-      0x4F, 0xC1, 0xC9, 0xCB, 0x11, 0x20, 0x3A, 0x8C, 0x7B, 0x71, 0x48, 0x6E,
-      0x97, 0xB7, 0xD1, 0xBC, 0x6A, 0x98, 0xF4, 0x93, 0xDC, 0xBE, 0xC8, 0xE6,
-      0x29, 0x55, 0x8E, 0xD3, 0x61, 0x09, 0x12, 0x93, 0xD1, 0xB5, 0xD2, 0x09,
-      0x6C, 0xEB, 0x9F, 0xC7, 0xAF, 0xEE, 0x71, 0xDB, 0x7C, 0xCF, 0xE4, 0x82,
-      0xB6, 0x8A, 0x19, 0x64, 0x29, 0xFF, 0x04, 0xD1, 0x59, 0x03, 0xE7, 0xA7,
-      0x5C, 0x7B, 0xB5, 0xF6, 0x22, 0xC3, 0x69, 0x71, 0x69, 0x45, 0x59, 0xFF,
-      0x07, 0xDF, 0xAA, 0x79, 0xE4, 0x1C, 0x36, 0x2B, 0x22, 0x64, 0x3C, 0xD3,
-      0x9B, 0xD9, 0xE1, 0xD3, 0xD6, 0xC2, 0xA3, 0x06, 0xB5, 0xF1, 0x10, 0x2C,
-      0x26, 0x6E, 0xEE, 0x67, 0xDC, 0xDA, 0xCF, 0x36, 0x69, 0x7A, 0x83, 0x6F,
-      0x20, 0x38, 0x38, 0xEC, 0x11, 0x03, 0x08, 0xC9, 0x0A, 0x3D, 0x01, 0x57,
-      0x0C, 0xB3, 0x66, 0x8A, 0xBA, 0x50, 0x34, 0x0E, 0x40, 0xF5, 0x4C, 0xFA,
-      0x6A, 0x9E, 0x88, 0x62, 0x53, 0x2F, 0x5F, 0x19, 0x84, 0x8A, 0xA1, 0x1F,
-      0xD3, 0x4F, 0xC8, 0x6B, 0x7F, 0xCB, 0x16, 0x37, 0xF4, 0xE5, 0xA1, 0xD0,
-      0x3A, 0xFC, 0xE4, 0x41, 0x24, 0xE4, 0xE4, 0x60, 0xB8, 0x4C, 0x63, 0x49,
-      0x6A, 0xDE, 0xD5, 0x58, 0x01, 0xDF, 0x25, 0x17, 0xA9, 0x0A, 0xB0, 0x61,
-      0xC8, 0xE6, 0x3A, 0xB6, 0xB1, 0x4B, 0xE1, 0x69, 0x4D, 0x6F, 0x38, 0x9D,
-      0xD8, 0x5F, 0x56, 0x39, 0xC5, 0x78, 0x3A, 0xFC, 0xA0, 0x14, 0x6E, 0x6A,
-      0x1E, 0xB0, 0xC4, 0x05, 0x63, 0xC1, 0x37, 0x01, 0x0D, 0xB6, 0x0B, 0xBC,
-      0x3D, 0x63, 0x74, 0xD6, 0xF3, 0xA8, 0x92, 0xDE, 0xBC, 0x06, 0x47, 0x01,
-      0xC6, 0x4B, 0xEC, 0xCB, 0x8E, 0x2C, 0x33, 0xB7, 0x40, 0xCC, 0x7E, 0xD4,
-      0x9D, 0x10, 0x8A, 0x8C, 0x46, 0x56, 0x81, 0x8D, 0xF5, 0xF7, 0xD9, 0x1E,
-      0xAA, 0xA4, 0x46, 0xAC, 0x6C, 0xCD, 0xE3, 0x0C, 0x6D, 0x3D, 0x1B, 0xF6,
-      0x6E, 0x4E, 0x3B, 0x7B, 0x6B, 0x81, 0xE3, 0xCB, 0x17, 0x22, 0x7F, 0x80,
-      0xDB, 0x00, 0x96, 0xE6, 0xBE, 0x7D, 0x85, 0x9C, 0x09, 0x71, 0x37, 0x49,
-      0xFC, 0xA2, 0x15, 0x30, 0xFE, 0x1A, 0x71, 0x6E, 0xBE, 0x32, 0x55, 0x04,
-      0x31, 0x9B, 0xD0, 0xEA, 0x2A, 0x7D, 0x77, 0x13, 0x60, 0x7C, 0xB6, 0x79,
-      0xB0, 0xA0, 0xB2, 0x26, 0x8D, 0x49, 0x3B, 0x67, 0xC0, 0x48, 0x18, 0x72,
-      0x17, 0x7F, 0xFD, 0x25, 0x93, 0xF3, 0xAC, 0xF6, 0x91, 0xCE, 0xE9, 0x9A,
-      0x36, 0xEC, 0xA7, 0x22, 0x57, 0x9E, 0xFA, 0xA5, 0x9A, 0xCC, 0x59, 0xEF,
-      0x8C, 0xEA, 0x91, 0x08, 0xE6, 0x20, 0xB0, 0x60, 0x56, 0xC1, 0x9D, 0x3C,
-      0x1E, 0xB9, 0x1E, 0x86, 0x34, 0xDE, 0x49, 0x57, 0x70, 0x6D, 0xFA, 0x8F,
-      0x9D, 0x0A, 0x9E, 0x0C, 0xD4, 0x09, 0x4F, 0x6B, 0x95, 0xA8, 0x3F, 0x11,
-      0x8A, 0x51, 0x3E, 0xBF, 0xE5, 0xE9, 0x9A, 0xEB, 0x88, 0xA2, 0x68, 0xE0,
-      0x09, 0x7F, 0xCC, 0x3C, 0x7A, 0xE2, 0x50, 0xB6, 0x81, 0x93, 0x3B, 0xBC,
-      0x2A, 0x8F, 0x53, 0x81, 0xF9, 0x4D, 0x15, 0x64, 0x34, 0xA8, 0x7E, 0x9E,
-      0xE3, 0x7E, 0x78, 0xC2, 0x7A, 0x0C, 0xDA, 0xEE, 0xA9, 0x81, 0x4B, 0xCB,
-      0x43, 0xDF, 0x53, 0x8D, 0xBE, 0x62, 0x8C, 0x80, 0x2C, 0x1A, 0x94, 0xE0,
-      0xCD, 0xDC, 0xD0, 0xCD, 0x5A, 0x0F, 0x82, 0x20, 0xDA, 0x97, 0xC2, 0x38,
-      0x39, 0x36, 0xA3, 0x39, 0x19, 0xFC, 0xDC, 0x11, 0xD7, 0x0E, 0xD4, 0x43,
-      0x7D, 0xD2, 0xD7, 0xC7, 0x3C, 0xD0, 0xC3, 0xBB, 0x90, 0xCA, 0x70, 0x70,
-      0x22, 0x8F, 0xE8, 0xD6, 0x4A, 0x1C, 0x9D, 0x56, 0xE6, 0xB3, 0x48, 0x30,
-      0xEF, 0x30, 0x0B, 0x5A, 0xA6, 0xEC, 0x6C, 0x78, 0xA5, 0x42, 0x5A, 0xE6,
-      0xF7, 0xAD, 0x0E, 0xFD, 0xD5, 0x27, 0xCF, 0x0A, 0xF8, 0xE0, 0x9B, 0x56,
-      0xE4, 0x95, 0xBE, 0x66, 0xF6, 0x65, 0xC6, 0x4B, 0x0A, 0x42, 0xC5, 0xC4,
-      0xB2, 0x46, 0x80, 0x48, 0x0A, 0xD2, 0xE5, 0xC1, 0x1D, 0x99, 0x1F, 0x7E,
-      0x3D, 0xA7, 0x59, 0xAE, 0xC8, 0x02, 0xF1, 0x76, 0xDD, 0xF1, 0x1E, 0xF7,
-      0x14, 0x69, 0xDC, 0x13, 0xB3, 0xA3, 0xE0, 0x36, 0x99, 0x51, 0x98, 0x58,
-      0xAC, 0x6F, 0xC6, 0x5C, 0x27, 0xFA, 0x4C, 0xEF, 0xDA, 0x09, 0xC8, 0x2E,
-      0x8F, 0x95, 0x8E, 0x01, 0x8D, 0xD5, 0x25, 0x5C, 0xA2, 0xF6, 0x28, 0xE0,
-      0xDA, 0x73, 0x91, 0xAB, 0xED, 0x6D, 0x37, 0x70, 0x55, 0x28, 0xAB, 0x22,
-      0xEC, 0x71, 0xDC, 0x88, 0x36, 0xD7, 0xFD, 0x46, 0x45, 0x94, 0x47, 0x03,
-      0xA5, 0x1C, 0xC7, 0x4D, 0x29, 0x70, 0x92, 0xFC, 0xE1, 0x39, 0xE8, 0x97,
-      0x6F, 0x8B, 0xE9, 0xC5, 0xF8, 0x63, 0x90, 0xB7, 0x4D, 0x40, 0x1A, 0x8C,
-      0x81, 0x53, 0x11, 0x22, 0x01, 0x13, 0x3D, 0x0C, 0x51, 0x7C, 0x6C, 0xE7,
-      0xA3, 0x8C, 0x08, 0x60, 0x69, 0xCE, 0x39, 0x71, 0xF1, 0xAD, 0x28, 0xF3,
-      0xE5, 0xD0, 0x1B, 0x56, 0xA4, 0x80, 0xB4, 0x17, 0xA0, 0x16, 0xAE, 0xA4,
-      0x63, 0x94, 0xCD, 0xF7, 0x64, 0x81, 0x29, 0x18, 0xD8, 0xAB, 0x05, 0x01,
-      0xD5, 0xD1, 0x8C, 0xE1, 0x3F, 0xBD, 0x3D, 0xE9, 0x1F, 0x50, 0x42, 0x15,
-      0xCC, 0xD0, 0xE2, 0xD1, 0x7B, 0x7E, 0x96, 0x3C, 0x86, 0x7F, 0x6F, 0x13,
-      0x21, 0x14, 0xE3, 0x64, 0x59, 0xFC, 0x5A, 0xF7, 0xCE, 0xE9, 0x9B, 0x78,
-      0x96, 0x73, 0xE5, 0x24, 0x13, 0x1F, 0x7D, 0xC7, 0x13, 0x60, 0x95, 0x1A,
-      0x99, 0x7A, 0x9C, 0xE5, 0x0D, 0xD5, 0xFA, 0xFC, 0x45, 0x21, 0x14, 0x44,
-      0x41, 0xC0, 0x6B, 0xB4, 0x1C, 0x79, 0xE8, 0xED, 0x53, 0x28, 0x5D, 0x13,
-      0x7D, 0x54, 0xF3, 0x25, 0xA6, 0xC2, 0xF2, 0xEF, 0x74, 0xE3, 0x4C, 0x0F,
-      0x87, 0x7A, 0x61, 0x4C, 0xE4, 0x5D, 0xC0, 0xAE, 0xDD, 0xF9, 0x5A, 0x0E,
-      0x2E, 0x4E, 0xDA, 0xE2, 0x9A, 0xF4, 0x11, 0xC9, 0xCC, 0x2A, 0xF9, 0x5C,
-      0x9E, 0xA9, 0xA9, 0x4A, 0x79, 0x61, 0xC8, 0x24, 0x6E, 0x65, 0x4F, 0xA2,
-      0x8F, 0x3D, 0x56, 0x8D, 0x5F, 0xEE, 0x93, 0x35, 0x2C, 0x2E, 0x0D, 0x60,
-      0xCC, 0xAF, 0x5B, 0x00, 0x09, 0x0A, 0xB6, 0xE7, 0xA5, 0x3A, 0xA0, 0x6A,
-      0x8C, 0xD3, 0x73, 0x7E, 0xBF, 0x1B, 0x65, 0xD6, 0x25, 0xBC, 0xF2, 0x20,
-      0xF7, 0x4D, 0xE2, 0x2D, 0x98, 0x71, 0xEF, 0xC3, 0x76, 0xBF, 0x08, 0x2D,
-      0x4B, 0x87, 0x2A, 0x30, 0x3C, 0x32, 0x42, 0x7A, 0x0C, 0x98, 0xBE, 0xCF,
-      0x58, 0x95, 0x9C, 0x9F, 0x9E, 0x2E, 0x88, 0x7D, 0xBC, 0x42, 0xAA, 0xB1,
-      0x65, 0x6A, 0xD1, 0x56, 0x37, 0xA6, 0xA8, 0xF4, 0xBF, 0x96, 0x34, 0x09,
-      0x54, 0x91, 0xF8, 0xC9, 0x92, 0x42, 0x91, 0x38, 0x91, 0x43, 0x7E, 0x6C,
-      0x5B, 0x50, 0xA2, 0x13, 0xDD, 0xE8, 0x0D, 0x21, 0x96, 0xBE, 0x12, 0xC3,
-      0x93, 0x7F, 0xE3, 0x23, 0x9B, 0xF6, 0x75, 0x9A, 0xBB, 0x8C, 0x1C, 0x94,
-      0x66, 0xF4, 0x2F, 0xBD, 0x53, 0x89, 0x4A, 0xE5, 0x2F, 0xB5, 0x33, 0x32,
-      0x14, 0x29, 0xFC, 0xE4, 0xFE, 0xC1, 0xDB, 0x35, 0x2C, 0x49, 0x58, 0x3A,
-      0x7D, 0x81, 0x7E, 0xAF, 0x62, 0x00, 0x08, 0x88, 0xEC, 0xB0, 0xEB, 0xFF,
-      0xEF, 0x69, 0xFF, 0x8E, 0x59, 0x0C, 0xFA, 0x25, 0xBE, 0xAB, 0x21, 0x60,
-      0x5B, 0x63, 0x5A, 0xBC, 0x2C, 0xA2, 0x36, 0x80, 0x78, 0x97, 0x25, 0xCF,
-      0x70, 0x0F, 0x55, 0x3C, 0x88, 0x35, 0x2F, 0x31, 0x61, 0x61, 0x54, 0x87,
-      0x3D, 0x18, 0xB6, 0xC6, 0xEB, 0x51, 0x9F, 0xC6, 0x39, 0xB0, 0x70, 0xFD,
-      0x67, 0xF8, 0x6A, 0xAB, 0x62, 0x34, 0x9D, 0xBF, 0xFA, 0x89, 0xF9, 0x30,
-      0x51, 0xA7, 0xC7, 0xB7, 0xBD, 0x16, 0x1F, 0xCD, 0x73, 0x67, 0x2C, 0xEE,
-      0xF5, 0x9A, 0x9B, 0xB7, 0xF5, 0x71, 0xEA, 0xBE, 0x25, 0x70, 0xC5, 0xBF,
-      0x31, 0xEC, 0xAA, 0x1F, 0x9C, 0xA7, 0xA9, 0xC6, 0xD3, 0x1E, 0xA5, 0xFB,
-      0x7C, 0x97, 0x9C, 0xDD, 0x26, 0x13, 0x89, 0x7E, 0x7D, 0x15, 0x03, 0xFB,
-      0x0C, 0x19, 0xAD, 0xDC, 0xFB, 0x3A, 0x63, 0xE2, 0x18, 0x5F, 0xC4, 0x10,
-      0x18, 0x38, 0xDA, 0x66, 0xCC, 0xE2, 0xD3, 0xD9, 0xFF, 0xB4, 0x77, 0x46,
-      0xC2, 0x00, 0x3E, 0xDD, 0x86, 0xC2, 0xF8, 0xC3,
-    },
-
-    .dk = {
-      0x0F, 0xEA, 0x26, 0xC4, 0xA5, 0x44, 0xA5, 0x14, 0x44, 0x4A, 0x97, 0x1B,
-      0x5C, 0x5A, 0x82, 0x58, 0x27, 0xC0, 0x9D, 0x42, 0x46, 0x9E, 0x59, 0x34,
-      0x4C, 0xF2, 0xAC, 0x06, 0xA2, 0x8D, 0x33, 0xE9, 0xA0, 0x12, 0xCA, 0xA3,
-      0x71, 0x7B, 0x2C, 0x3B, 0x29, 0x0A, 0x07, 0x15, 0x82, 0x11, 0x09, 0xC4,
-      0xCC, 0xEA, 0xC4, 0x9F, 0x34, 0x1D, 0xAD, 0xD3, 0x77, 0xD4, 0x2A, 0x37,
-      0x26, 0x19, 0x16, 0xAC, 0x7B, 0xB9, 0xE4, 0x1C, 0x09, 0x6C, 0xA8, 0x18,
-      0x1C, 0xF5, 0x83, 0x50, 0x57, 0x3F, 0x60, 0x56, 0x84, 0xA1, 0xBC, 0xA5,
-      0x3D, 0x88, 0x25, 0x74, 0x53, 0xC5, 0x35, 0x16, 0x5C, 0x4E, 0xD7, 0x2A,
-      0x9F, 0xF0, 0x56, 0x45, 0x71, 0x29, 0x01, 0xF6, 0x6C, 0x10, 0xD0, 0x4F,
-      0x5E, 0xB4, 0xA2, 0xEC, 0x37, 0x72, 0xE9, 0x49, 0x8E, 0x9D, 0xC4, 0x4B,
-      0xBD, 0xAB, 0x71, 0xBB, 0xDB, 0xBC, 0xFC, 0x85, 0xB8, 0x01, 0x36, 0x30,
-      0x89, 0xEA, 0x60, 0xEF, 0xE5, 0x86, 0xE1, 0xE2, 0x18, 0x0C, 0x38, 0xB2,
-      0xE7, 0xB4, 0xA6, 0x3E, 0xD6, 0x07, 0x49, 0x0B, 0xC5, 0xBA, 0x7A, 0x58,
-      0xAC, 0x3B, 0x1C, 0x0E, 0x43, 0x96, 0x72, 0x00, 0xC7, 0x98, 0x02, 0x90,
-      0xEB, 0xF4, 0x11, 0x82, 0x84, 0x39, 0xEE, 0x8C, 0x8E, 0x61, 0x29, 0xB2,
-      0x58, 0xE1, 0x3D, 0x12, 0x7C, 0xB1, 0x5A, 0x00, 0xCB, 0x7B, 0x46, 0x8D,
-      0x40, 0x23, 0xB5, 0x09, 0x7B, 0x9B, 0x2E, 0x50, 0x9B, 0x50, 0xE8, 0x90,
-      0xB6, 0x3B, 0x47, 0x07, 0x48, 0x79, 0x61, 0xA2, 0x9E, 0x18, 0x65, 0x6D,
-      0xD2, 0xD0, 0x9E, 0x6A, 0x3B, 0x88, 0x43, 0xE2, 0x84, 0x3C, 0xB4, 0x85,
-      0x4F, 0x18, 0x11, 0x6E, 0x71, 0x7D, 0xDB, 0x03, 0x55, 0xA7, 0x51, 0x35,
-      0xB2, 0x02, 0x6A, 0x75, 0x2C, 0x8E, 0x7F, 0xF1, 0x8E, 0x0F, 0x4A, 0x39,
-      0x1C, 0xA3, 0x7F, 0x5B, 0x2B, 0xCC, 0x88, 0xC9, 0x99, 0xB4, 0xE4, 0x77,
-      0x50, 0xC4, 0x65, 0x47, 0xEC, 0x07, 0x6A, 0xC2, 0x15, 0x30, 0x72, 0x2C,
-      0xFA, 0xF9, 0x67, 0x99, 0x61, 0xC9, 0x86, 0x88, 0xC3, 0x56, 0x2B, 0x17,
-      0xCC, 0x80, 0x81, 0x46, 0xA1, 0x25, 0x72, 0xC9, 0xB5, 0xFF, 0x15, 0x1A,
-      0xAB, 0x54, 0x41, 0x09, 0x01, 0x84, 0x0E, 0x26, 0x42, 0x39, 0x87, 0xC5,
-      0xE0, 0xD2, 0x8E, 0xF2, 0xEA, 0x53, 0xEA, 0xE5, 0x95, 0x1E, 0x62, 0xAC,
-      0x7B, 0xD5, 0x18, 0xB9, 0x83, 0x0A, 0x4D, 0xBC, 0xCE, 0x6A, 0x93, 0x65,
-      0x91, 0xEA, 0x8E, 0xF2, 0x75, 0x07, 0x8A, 0x09, 0x73, 0x85, 0x2A, 0x4D,
-      0x13, 0x04, 0x95, 0xD0, 0x0B, 0x3F, 0x21, 0x85, 0x15, 0x99, 0x90, 0x1C,
-      0xFD, 0xF9, 0x36, 0x83, 0x44, 0xC8, 0x10, 0x42, 0x2F, 0xFE, 0xA0, 0x8A,
-      0xED, 0xCB, 0x1A, 0x7F, 0xD3, 0x62, 0x5F, 0x26, 0xB0, 0x34, 0x81, 0x2F,
-      0xA3, 0x07, 0xAB, 0x2C, 0x20, 0x94, 0x54, 0x65, 0x54, 0x6D, 0x31, 0xA3,
-      0x41, 0xA4, 0x01, 0x3D, 0x81, 0x89, 0xB4, 0xF5, 0x0F, 0xE8, 0x60, 0xA6,
-      0x68, 0xDA, 0xC7, 0xB1, 0x03, 0x44, 0x1E, 0x96, 0x1F, 0xCE, 0xB0, 0xC5,
-      0xB1, 0xF3, 0x4D, 0xF2, 0xE5, 0x98, 0xC6, 0xD8, 0xCF, 0x60, 0xB8, 0x64,
-      0x15, 0x0C, 0x70, 0x3D, 0x2B, 0xBE, 0xAC, 0x9B, 0x00, 0x1A, 0xA2, 0x10,
-      0x81, 0x47, 0xAE, 0x6B, 0x8A, 0xAE, 0x2C, 0x77, 0x91, 0xDB, 0xE9, 0x56,
-      0xC1, 0xF9, 0xB2, 0x04, 0x7A, 0x15, 0x76, 0x09, 0x43, 0x87, 0x06, 0x4C,
-      0x3A, 0x80, 0x1B, 0x0D, 0x89, 0xC9, 0x96, 0xA5, 0xCF, 0xA3, 0xB0, 0x12,
-      0xC1, 0x44, 0x38, 0xB9, 0xF3, 0x53, 0x0C, 0x0C, 0x5F, 0xA9, 0x38, 0x9F,
-      0x10, 0xFB, 0x3E, 0xF1, 0xE2, 0x01, 0x33, 0x38, 0x41, 0x5F, 0x7B, 0x1D,
-      0xB4, 0x11, 0xAD, 0xF9, 0x1C, 0x73, 0xB6, 0x45, 0x6B, 0x68, 0xAB, 0x7C,
-      0xFC, 0x7B, 0xC9, 0x29, 0xE4, 0x4E, 0x58, 0xEB, 0x34, 0xCA, 0x10, 0xAE,
-      0x31, 0xF0, 0x3B, 0x2C, 0x3B, 0xA6, 0xCC, 0xA2, 0x7E, 0xB3, 0x5C, 0xB1,
-      0x37, 0x9A, 0x13, 0x0A, 0xAC, 0x87, 0xE3, 0xB8, 0x75, 0xCF, 0xE2, 0x53,
-      0xAF, 0x03, 0xC4, 0xBD, 0x78, 0x3F, 0x18, 0xC5, 0xA2, 0xF8, 0x49, 0x2B,
-      0xBF, 0x7C, 0x56, 0x87, 0x55, 0x98, 0xB1, 0xB6, 0x3F, 0xE6, 0xCB, 0x06,
-      0x94, 0xD0, 0x48, 0x0C, 0xA1, 0xC8, 0xF8, 0x86, 0x7C, 0x11, 0xB8, 0xBF,
-      0x33, 0xA3, 0x2C, 0x20, 0xB7, 0x9F, 0x9C, 0xA4, 0x86, 0x85, 0x86, 0x10,
-      0xB1, 0x97, 0x83, 0xBE, 0xF7, 0x84, 0xBF, 0x6B, 0x0F, 0x85, 0x8C, 0x1A,
-      0x79, 0x11, 0x30, 0xDA, 0x69, 0x57, 0xF2, 0x12, 0x23, 0x4E, 0xC9, 0x86,
-      0x79, 0x81, 0x4B, 0xE8, 0x39, 0xBF, 0x11, 0x0B, 0x45, 0xC1, 0xC8, 0x83,
-      0xEC, 0xDC, 0x3D, 0xB3, 0xF8, 0x22, 0xA4, 0xF7, 0xC1, 0x25, 0x56, 0x6E,
-      0xD1, 0x66, 0x35, 0x68, 0xC8, 0x41, 0x3C, 0xD0, 0x1C, 0x22, 0x46, 0x7A,
-      0xD5, 0x20, 0x1A, 0x0A, 0xDC, 0x76, 0x34, 0x35, 0xA2, 0xCB, 0x05, 0xCD,
-      0xC4, 0x70, 0x72, 0xA9, 0x43, 0x70, 0xF5, 0xB4, 0x34, 0xF7, 0x5C, 0x07,
-      0x8B, 0x41, 0x59, 0x93, 0xE8, 0x54, 0xDD, 0xE1, 0x7B, 0xBF, 0x86, 0xC0,
-      0xC6, 0xC9, 0xA3, 0x24, 0x85, 0x32, 0xD9, 0xC2, 0x13, 0x9E, 0xF3, 0xC7,
-      0x5A, 0x9B, 0xC6, 0x93, 0x78, 0x10, 0x60, 0xDC, 0xAE, 0x2F, 0xFA, 0x58,
-      0xD9, 0xCC, 0x54, 0x8F, 0x19, 0xC1, 0xCE, 0x53, 0x64, 0x88, 0x0C, 0x7F,
-      0xB5, 0x0C, 0xC7, 0xBE, 0x40, 0x53, 0x12, 0xD6, 0xCC, 0x94, 0x03, 0x76,
-      0x18, 0xF3, 0x88, 0xC4, 0x90, 0xAF, 0x8F, 0x61, 0xB9, 0xB4, 0x04, 0x4C,
-      0xF7, 0x5A, 0x5C, 0xD7, 0x1A, 0x15, 0x85, 0x3B, 0x5F, 0xD6, 0x22, 0x4C,
-      0x6B, 0x95, 0x90, 0xE5, 0x85, 0x01, 0xD2, 0x81, 0x42, 0x00, 0xC9, 0x19,
-      0xF2, 0x83, 0xCC, 0x2B, 0x49, 0xAD, 0x8B, 0xFA, 0x5B, 0xAA, 0xA2, 0x97,
-      0x7F, 0x03, 0x82, 0x3F, 0x60, 0x9E, 0xFB, 0x24, 0x26, 0xF9, 0x36, 0xC3,
-      0x02, 0x87, 0x09, 0x7B, 0xD6, 0xB7, 0xBD, 0xC6, 0x78, 0x62, 0x85, 0x88,
-      0x83, 0xDB, 0x59, 0x54, 0x08, 0x04, 0x29, 0xB9, 0xCD, 0x02, 0xCA, 0x96,
-      0xBC, 0x1C, 0xCB, 0xDB, 0x51, 0x21, 0xDF, 0xF8, 0x05, 0xB0, 0x82, 0x4A,
-      0xEE, 0x99, 0x9E, 0x2B, 0xBB, 0x2D, 0x82, 0x35, 0x3E, 0x6D, 0x3A, 0x30,
-      0x07, 0x92, 0x78, 0x10, 0x58, 0xC5, 0x6E, 0xF7, 0x09, 0x8A, 0xB3, 0x58,
-      0x4E, 0xA0, 0x62, 0x1E, 0x20, 0x33, 0x7D, 0x3A, 0x97, 0x5D, 0x93, 0xCF,
-      0x32, 0x58, 0x6D, 0x6A, 0x71, 0xA2, 0xC4, 0xBB, 0xB2, 0x02, 0xB8, 0x53,
-      0xFF, 0x09, 0xC4, 0x07, 0xB4, 0x3B, 0x1C, 0x19, 0xB1, 0xC4, 0xCC, 0xB8,
-      0x21, 0x48, 0x2D, 0xDD, 0x27, 0x37, 0x81, 0x77, 0xAA, 0x7F, 0x61, 0x78,
-      0x49, 0x7C, 0x3F, 0xBA, 0x79, 0x71, 0x53, 0x84, 0x8C, 0x5D, 0x0B, 0x1F,
-      0x40, 0xB5, 0x4E, 0x9D, 0x51, 0x93, 0x90, 0x4A, 0x30, 0x3F, 0x72, 0x5F,
-      0x0C, 0xCC, 0x66, 0xC6, 0xCC, 0xB1, 0x58, 0x85, 0x06, 0x05, 0x34, 0x6D,
-      0xB4, 0x2B, 0x87, 0x7D, 0xD9, 0xCE, 0xA5, 0xF6, 0x9C, 0x12, 0xB2, 0x21,
-      0xC7, 0xEC, 0x51, 0x00, 0xF7, 0x65, 0x87, 0xB9, 0x83, 0x4B, 0xC0, 0xC6,
-      0x41, 0x53, 0x8F, 0x83, 0xE8, 0x5B, 0xB3, 0x09, 0x0D, 0xBA, 0xFB, 0xCB,
-      0x0B, 0x71, 0x18, 0xFF, 0x7C, 0x97, 0xE9, 0x52, 0x63, 0x15, 0x70, 0x41,
-      0xF8, 0xAC, 0x40, 0x52, 0xD0, 0x40, 0x35, 0x00, 0xCC, 0x4F, 0x68, 0x94,
-      0x55, 0x97, 0x4C, 0xEB, 0x5B, 0x07, 0x67, 0x90, 0xA0, 0x50, 0xE0, 0xB3,
-      0xF6, 0x77, 0x2A, 0x77, 0x67, 0x54, 0x1F, 0xF6, 0xB6, 0x7B, 0x2A, 0x1D,
-      0x54, 0x07, 0x82, 0x06, 0x47, 0x68, 0x8F, 0x36, 0x0A, 0x2B, 0x01, 0x47,
-      0x37, 0x67, 0x71, 0x29, 0x09, 0xB2, 0x27, 0x65, 0x8B, 0xE6, 0x45, 0x78,
-      0x48, 0xC4, 0x40, 0x75, 0x71, 0x68, 0x06, 0x18, 0x88, 0x58, 0x9C, 0xB0,
-      0x5A, 0x99, 0x9E, 0x55, 0x49, 0x67, 0x91, 0xB1, 0x1A, 0xF2, 0x06, 0x6B,
-      0xB8, 0xCA, 0x74, 0x60, 0x51, 0xC4, 0x68, 0x0A, 0x0B, 0xC0, 0x73, 0x82,
-      0x41, 0x2A, 0xB8, 0xB8, 0xA3, 0x19, 0xDB, 0xC7, 0x94, 0xDD, 0xC6, 0x94,
-      0xBF, 0xDB, 0x81, 0x3F, 0x80, 0xB5, 0x8B, 0x72, 0x21, 0x8D, 0xD6, 0x4D,
-      0xFC, 0xDB, 0xA1, 0xAB, 0x48, 0xA9, 0x4F, 0x7A, 0x8D, 0xCA, 0x92, 0x66,
-      0xCD, 0x15, 0xA4, 0x2D, 0x9B, 0xA5, 0xFB, 0x67, 0x67, 0xA9, 0x55, 0x52,
-      0x6C, 0x05, 0x0D, 0xE2, 0x59, 0x8B, 0x11, 0x2A, 0x2B, 0x10, 0x3A, 0xA2,
-      0xD1, 0xF0, 0x60, 0x6F, 0xE6, 0x8A, 0x55, 0x19, 0x1E, 0xF5, 0x3B, 0x30,
-      0x2F, 0x7C, 0x19, 0x22, 0xC3, 0x01, 0xCE, 0xEA, 0x98, 0x9A, 0x62, 0x13,
-      0x40, 0x90, 0xA8, 0x60, 0x76, 0x77, 0x6F, 0xA4, 0x46, 0x27, 0xB7, 0x31,
-      0x63, 0x86, 0x57, 0x6A, 0x67, 0x81, 0x75, 0xB2, 0x18, 0xE6, 0xF4, 0x82,
-      0xB5, 0x2B, 0xC6, 0x02, 0x7B, 0xBE, 0xB3, 0x46, 0x98, 0xB9, 0x80, 0x2F,
-      0xD6, 0x76, 0x34, 0xC1, 0xA9, 0x4D, 0xD4, 0xC5, 0xCD, 0x49, 0xEC, 0x6E,
-      0x2D, 0x66, 0x5F, 0x72, 0x77, 0x81, 0xD1, 0xEC, 0x10, 0xAA, 0xF6, 0x6A,
-      0xD8, 0x27, 0x9B, 0x9B, 0xF2, 0x4C, 0x99, 0xE8, 0x75, 0xEC, 0x94, 0x35,
-      0x2D, 0x96, 0x05, 0xFA, 0x30, 0xCB, 0x3D, 0x8B, 0x26, 0x86, 0xB0, 0x39,
-      0x71, 0xA7, 0x60, 0xB3, 0x05, 0x3B, 0x34, 0x34, 0x6D, 0x0D, 0x71, 0xB4,
-      0x4D, 0x8B, 0x7D, 0x2E, 0xA6, 0x1A, 0x5C, 0x10, 0xA9, 0x33, 0xD3, 0x8B,
-      0xA4, 0x83, 0x36, 0x71, 0x11, 0x74, 0x54, 0x61, 0x47, 0xD4, 0x4B, 0x29,
-      0x14, 0xF8, 0x56, 0x89, 0xD9, 0xC1, 0xBF, 0x00, 0x37, 0xC7, 0xF7, 0x37,
-      0x7C, 0xD9, 0x30, 0xCF, 0xF6, 0x0F, 0x84, 0xB0, 0xA2, 0x00, 0x5D, 0x3E,
-      0xFE, 0x55, 0xC7, 0x31, 0x1B, 0x1B, 0x61, 0x32, 0x76, 0x8B, 0x52, 0x90,
-      0xD8, 0x36, 0xB8, 0x2B, 0xC4, 0x43, 0xC3, 0x2B, 0x4F, 0xEC, 0x96, 0x02,
-      0x19, 0xDB, 0x21, 0x32, 0xF7, 0x99, 0x0A, 0xD6, 0x84, 0xA3, 0x72, 0x9F,
-      0x3D, 0x1A, 0x2C, 0xEA, 0x3A, 0x1F, 0xE4, 0xB1, 0x26, 0x75, 0xC4, 0x89,
-      0xEF, 0x33, 0x19, 0x8F, 0x01, 0xA1, 0x06, 0x80, 0x6E, 0xFC, 0xE8, 0x92,
-      0x1D, 0xC4, 0x6E, 0x97, 0x1C, 0x0A, 0x0A, 0x56, 0x4A, 0xF9, 0xE5, 0x6C,
-      0xA7, 0x27, 0xA7, 0x64, 0x1C, 0x56, 0x8C, 0x95, 0xAA, 0x59, 0x56, 0x91,
-      0x0B, 0x28, 0x84, 0x29, 0xF8, 0x0E, 0xE7, 0x22, 0x6E, 0x9D, 0xC4, 0x06,
-      0x7E, 0x34, 0x94, 0x4F, 0x06, 0x92, 0x6D, 0x44, 0xB2, 0xCF, 0x87, 0x64,
-      0xF7, 0x13, 0x59, 0x3B, 0x44, 0x29, 0xF8, 0x2B, 0x8F, 0xCC, 0x60, 0x77,
-      0x98, 0x91, 0x6B, 0x81, 0x5B, 0x90, 0x98, 0x33, 0x0E, 0xC3, 0x34, 0x29,
-      0x0D, 0xB8, 0xC0, 0x4B, 0x08, 0x3D, 0xF3, 0xCA, 0x10, 0xCE, 0x35, 0x75,
-      0x07, 0x30, 0x28, 0xE9, 0x94, 0xA2, 0x5B, 0xE7, 0x28, 0x78, 0x49, 0x2F,
-      0xE1, 0xB6, 0x96, 0xBA, 0x5C, 0xB1, 0xA7, 0x73, 0x19, 0x3A, 0x3B, 0x28,
-      0xA4, 0xF4, 0x40, 0xAE, 0x58, 0x2D, 0xC7, 0xC2, 0x4F, 0xE7, 0x45, 0x1D,
-      0x66, 0x76, 0x23, 0x2B, 0xB9, 0x61, 0xC5, 0x04, 0x0C, 0x9E, 0x52, 0x01,
-      0xAA, 0xF3, 0xCD, 0x4D, 0xE4, 0x0A, 0xD5, 0xA9, 0x57, 0x8A, 0xF5, 0x28,
-      0x10, 0xB5, 0x93, 0xE9, 0x81, 0x5E, 0x23, 0xF6, 0x3F, 0x56, 0x40, 0x61,
-      0xA4, 0x84, 0x07, 0x21, 0x3A, 0xA1, 0xB0, 0x90, 0x8F, 0x4B, 0x17, 0x4F,
-      0x86, 0xD5, 0x73, 0xFA, 0x04, 0x38, 0x64, 0x98, 0xBE, 0x68, 0x39, 0x8E,
-      0x8D, 0x72, 0x0D, 0x27, 0x81, 0x11, 0xD8, 0xB1, 0x73, 0x03, 0x60, 0x2A,
-      0x96, 0xE3, 0x5F, 0x56, 0xFB, 0x25, 0x17, 0x3C, 0x4F, 0x4A, 0x03, 0xCA,
-      0x2A, 0xC9, 0xBF, 0x79, 0xDC, 0xAB, 0x76, 0x4B, 0xCE, 0x44, 0x10, 0x40,
-      0x1E, 0x10, 0x13, 0xE6, 0x52, 0x8C, 0xCC, 0x51, 0x13, 0x35, 0x85, 0x77,
-      0xDA, 0x83, 0x75, 0xE0, 0x23, 0x43, 0x10, 0x8C, 0x29, 0x24, 0xD2, 0x55,
-      0x1E, 0x5C, 0xC5, 0xA1, 0xB0, 0x4D, 0xEF, 0x88, 0x32, 0x4D, 0x85, 0x4F,
-      0xC9, 0x2C, 0x4A, 0xDF, 0x7C, 0x23, 0x01, 0x33, 0x7E, 0x45, 0x20, 0xBF,
-      0xC3, 0x65, 0x56, 0x6F, 0x66, 0x09, 0x2E, 0x36, 0x7A, 0xE6, 0x06, 0x12,
-      0x74, 0x46, 0x53, 0xC1, 0xEB, 0x47, 0xF0, 0x82, 0x09, 0x51, 0xA2, 0xA1,
-      0x4C, 0x42, 0x59, 0x09, 0x34, 0x0D, 0x87, 0x27, 0x18, 0x8E, 0xAA, 0x08,
-      0xE4, 0x86, 0x78, 0x98, 0x48, 0x76, 0xD0, 0x00, 0x8D, 0xAE, 0x99, 0x01,
-      0x5B, 0x36, 0x63, 0xFD, 0xCB, 0x72, 0x57, 0x41, 0x53, 0x0B, 0xC3, 0x89,
-      0x5B, 0x11, 0x62, 0x0C, 0xE3, 0xB4, 0x17, 0xA3, 0x20, 0xE1, 0x88, 0x13,
-      0xB9, 0x9C, 0x23, 0x5A, 0xC0, 0x6F, 0x55, 0x60, 0x0F, 0x98, 0x38, 0x82,
-      0xBF, 0xF0, 0x02, 0x36, 0x10, 0x7B, 0x50, 0x42, 0x54, 0x5B, 0x6B, 0x77,
-      0x58, 0x68, 0xAE, 0xFB, 0x79, 0xB5, 0x95, 0x59, 0x69, 0x02, 0xC6, 0x9B,
-      0x9E, 0xCA, 0x3D, 0x35, 0x8C, 0x61, 0xFE, 0xE0, 0x36, 0xD2, 0x18, 0xAC,
-      0x43, 0xBA, 0x3F, 0x52, 0xC0, 0x6A, 0x8F, 0x88, 0x1A, 0x7E, 0xD7, 0x03,
-      0x86, 0x14, 0x2C, 0xBA, 0xC5, 0xCC, 0x04, 0xFC, 0xC3, 0x1E, 0x16, 0x27,
-      0x76, 0x51, 0xCE, 0x2D, 0xCC, 0x50, 0x14, 0xF6, 0xBA, 0x5A, 0x91, 0x5C,
-      0x13, 0x38, 0x83, 0x4E, 0xF4, 0x74, 0xB6, 0x71, 0x59, 0x13, 0xBC, 0x7A,
-      0x4E, 0x59, 0x3C, 0x68, 0x87, 0x66, 0xAD, 0xD7, 0x06, 0x98, 0xB3, 0x7E,
-      0x06, 0xE5, 0x39, 0x15, 0xF3, 0x85, 0x38, 0x8C, 0x25, 0xC4, 0x26, 0x5E,
-      0x1C, 0xB4, 0x4F, 0xE3, 0xD0, 0x19, 0xD1, 0x21, 0xAE, 0x4C, 0x32, 0x43,
-      0x4F, 0x37, 0xB0, 0xA4, 0xCB, 0x69, 0xC7, 0xCC, 0x95, 0x70, 0x73, 0x50,
-      0xC3, 0x49, 0x3D, 0x0F, 0xB1, 0x1C, 0xD4, 0xD0, 0x9F, 0x29, 0xDC, 0x56,
-      0xC0, 0x7B, 0xC8, 0xEB, 0x0B, 0xD0, 0x08, 0x2B, 0x41, 0x44, 0x21, 0x45,
-      0x66, 0x3C, 0x21, 0xAB, 0x43, 0x34, 0x67, 0xB9, 0x5E, 0xC2, 0x47, 0x84,
-      0x23, 0xC1, 0x8B, 0xF2, 0xEC, 0x70, 0x3E, 0xFB, 0xA2, 0x8C, 0xDA, 0xBD,
-      0x42, 0xB7, 0xB8, 0x33, 0x15, 0x0D, 0x6D, 0xA2, 0x5E, 0xB0, 0x0A, 0x83,
-      0x28, 0x90, 0x2E, 0x2D, 0x08, 0x9B, 0x55, 0xD6, 0x9A, 0xAD, 0x9A, 0x94,
-      0xD8, 0x18, 0x26, 0x4C, 0x54, 0xB0, 0x4D, 0x61, 0x4D, 0x14, 0x7A, 0x30,
-      0xAB, 0xFC, 0x03, 0xD9, 0x92, 0x9D, 0x96, 0xBA, 0x7F, 0x81, 0x86, 0x5D,
-      0xA3, 0x53, 0xC4, 0x54, 0xBA, 0x7A, 0xA7, 0x88, 0x1A, 0xB9, 0x74, 0xC1,
-      0xB8, 0xF0, 0x83, 0x1E, 0x79, 0xC4, 0x41, 0x86, 0x64, 0xE9, 0x53, 0xA5,
-      0x4D, 0xE9, 0x32, 0x13, 0x69, 0x72, 0x81, 0x34, 0x1D, 0x37, 0xF5, 0x08,
-      0xE8, 0xCB, 0xAE, 0x3D, 0x81, 0x85, 0x05, 0x45, 0x67, 0xDE, 0xFC, 0x8E,
-      0x3B, 0xBC, 0xAA, 0x42, 0x47, 0x90, 0x7C, 0x48, 0x3B, 0x8F, 0x1B, 0x84,
-      0xB3, 0x24, 0xC1, 0xA7, 0xCA, 0x84, 0x42, 0xDB, 0x6B, 0x7B, 0x12, 0x8C,
-      0x83, 0x13, 0xBE, 0x1F, 0xE2, 0x57, 0x91, 0x20, 0x9B, 0x86, 0x4A, 0x3E,
-      0x1A, 0x61, 0x8D, 0x56, 0xD7, 0x10, 0xD6, 0xF3, 0xBF, 0x55, 0x95, 0x10,
-      0x16, 0x7C, 0x46, 0x4C, 0x6B, 0x9B, 0x8B, 0xC4, 0x90, 0xB8, 0xE0, 0x39,
-      0x25, 0xD0, 0x3D, 0x0E, 0xEB, 0x5D, 0x78, 0x17, 0x94, 0x28, 0xBB, 0x80,
-      0xD3, 0xFB, 0x14, 0x88, 0x40, 0x70, 0x9C, 0x41, 0x14, 0x7A, 0x68, 0x6F,
-      0xC9, 0xBC, 0xBD, 0xCD, 0xF7, 0xC7, 0xEA, 0x7C, 0x30, 0xFB, 0x64, 0x0F,
-      0xF0, 0x5B, 0x75, 0x39, 0xAB, 0xAB, 0x70, 0x89, 0x29, 0x08, 0xE9, 0x3C,
-      0xC9, 0xC3, 0x47, 0xF8, 0xAC, 0x88, 0x9E, 0x56, 0x46, 0x8A, 0x13, 0x5B,
-      0x99, 0x75, 0x47, 0x38, 0xE1, 0x5F, 0x4E, 0x67, 0x7D, 0xF3, 0x75, 0xBF,
-      0x1B, 0x43, 0x60, 0x6A, 0x2C, 0x47, 0x38, 0x0B, 0x10, 0xA0, 0xC1, 0x4C,
-      0x28, 0x58, 0x3C, 0x83, 0x31, 0x1A, 0x28, 0x54, 0xB2, 0xA9, 0x93, 0x1F,
-      0xD6, 0x60, 0x86, 0xC1, 0x07, 0x49, 0xF3, 0x34, 0x57, 0x7F, 0xD7, 0x0B,
-      0x51, 0xB9, 0x50, 0x60, 0x07, 0x51, 0x99, 0x31, 0x9B, 0x3F, 0x7C, 0xB5,
-      0xB2, 0x37, 0x30, 0x2C, 0x37, 0x0A, 0x23, 0x17, 0x5E, 0x4E, 0x01, 0x3C,
-      0x56, 0x28, 0x1B, 0xAF, 0xE2, 0xBE, 0x9F, 0x82, 0x5A, 0x30, 0x66, 0xAB,
-      0x8B, 0xBA, 0x57, 0x93, 0xE2, 0x1E, 0x7A, 0x48, 0x97, 0x8C, 0xF6, 0x0C,
-      0x09, 0x1B, 0x1F, 0x80, 0xC0, 0xC2, 0x38, 0x14, 0xA3, 0x0F, 0x77, 0x60,
-      0x60, 0x1A, 0xCE, 0xAB, 0xB1, 0x21, 0x52, 0x00, 0x94, 0x0F, 0xFA, 0x15,
-      0x22, 0x72, 0x09, 0x6D, 0x45, 0x8D, 0x00, 0xDD, 0x03, 0x9F, 0x23, 0x6B,
-      0x27, 0x27, 0xB5, 0x88, 0xC6, 0x22, 0x04, 0xE7, 0x9C, 0x45, 0x16, 0x81,
-      0xDF, 0xE4, 0x10, 0xEE, 0xC4, 0x2B, 0x74, 0x94, 0x5A, 0xEC, 0x03, 0x13,
-      0xA3, 0x91, 0x94, 0x2A, 0xE1, 0xB1, 0x22, 0x17, 0x4D, 0xBE, 0x59, 0xAB,
-      0x1E, 0x39, 0x0C, 0xD6, 0x49, 0x41, 0x43, 0x6C, 0x75, 0xA9, 0x32, 0x3C,
-      0x69, 0xA6, 0x41, 0x88, 0x08, 0x70, 0xFB, 0xB2, 0x80, 0xB3, 0xB3, 0x7B,
-      0x3B, 0xD9, 0x82, 0xB8, 0x29, 0x55, 0x62, 0x0B, 0x07, 0x83, 0xB8, 0x2E,
-      0x89, 0x61, 0xA4, 0x04, 0x3B, 0xC7, 0xF6, 0x6C, 0x0E, 0xF2, 0x5A, 0x5E,
-      0xD1, 0x53, 0x26, 0xF8, 0x81, 0x6E, 0x5E, 0xA4, 0x16, 0x7E, 0xE8, 0xBF,
-      0x66, 0x66, 0x45, 0x1D, 0x31, 0x5B, 0x2C, 0x75, 0x14, 0x41, 0x17, 0x2C,
-      0x27, 0x83, 0x00, 0x26, 0x82, 0x61, 0xC7, 0x8C, 0x6F, 0x0C, 0x46, 0x56,
-      0x27, 0x79, 0xB3, 0xA1, 0x19, 0x6F, 0x87, 0x83, 0x5F, 0x79, 0xFC, 0xB7,
-      0xE0, 0xCB, 0xA1, 0x53, 0x36, 0xCC, 0x83, 0xE1, 0x56, 0xC5, 0x02, 0x28,
-      0x87, 0xA8, 0x09, 0x86, 0xB4, 0x9C, 0x1B, 0x57, 0x65, 0x94, 0xA2, 0x31,
-      0x42, 0x62, 0x4A, 0xBF, 0x52, 0x48, 0x22, 0x41, 0x8C, 0x61, 0x01, 0x90,
-      0x52, 0x62, 0x80, 0x65, 0x72, 0x49, 0x4D, 0x37, 0x53, 0xC0, 0x62, 0x81,
-      0xE7, 0xF1, 0x7E, 0x0D, 0x79, 0x6C, 0xD7, 0x76, 0x7F, 0xDC, 0xE9, 0x01,
-      0xFE, 0x17, 0x12, 0xA0, 0x0A, 0x3D, 0x36, 0xEB, 0x42, 0x3E, 0x29, 0x86,
-      0x88, 0x46, 0x93, 0x2A, 0x94, 0x31, 0xB8, 0xCA, 0x66, 0x0F, 0xC1, 0x97,
-      0x5E, 0x23, 0xA7, 0x5B, 0x4A, 0x51, 0xDE, 0x10, 0x69, 0xD3, 0xA5, 0x9F,
-      0x6E, 0xEB, 0x2A, 0x5C, 0xE7, 0x2A, 0x89, 0x16, 0xB5, 0xE8, 0x63, 0x47,
-      0x6E, 0x6A, 0xC5, 0x72, 0x92, 0x9F, 0x2C, 0x29, 0xBC, 0x56, 0x27, 0xBA,
-      0x99, 0x41, 0x63, 0xCE, 0xD3, 0x5A, 0xB7, 0x03, 0x1C, 0x00, 0x49, 0x07,
-      0x24, 0x55, 0x5A, 0xCD, 0xE6, 0x13, 0xAE, 0xB4, 0xC3, 0xE9, 0x99, 0x81,
-      0xC6, 0x2B, 0x5D, 0xC6, 0xA9, 0xB3, 0x5B, 0xA7, 0x92, 0x20, 0x24, 0x36,
-      0x89, 0xE0, 0x59, 0x49, 0x96, 0x85, 0x7C, 0x04, 0x5D, 0x67, 0x19, 0x3D,
-      0x9E, 0x41, 0x1B, 0x4F, 0xF3, 0x9D, 0x0F, 0x8C, 0x3C, 0x0A, 0x70, 0xAD,
-      0xB7, 0x2A, 0x70, 0x21, 0xE3, 0x6D, 0x64, 0xFB, 0x29, 0x4D, 0x93, 0x2B,
-      0x24, 0xE1, 0xA2, 0xBC, 0x0B, 0xC4, 0x1C, 0x4A, 0xA3, 0xB5, 0xEC, 0x3C,
-      0xF0, 0xE6, 0x72, 0xDE, 0x14, 0x0F, 0x48, 0x47, 0x33, 0xFD, 0x82, 0xBF,
-      0x08, 0x29, 0x34, 0xB5, 0x40, 0xA6, 0x35, 0xC4, 0x48, 0x98, 0xE8, 0xAB,
-      0x8E, 0x06, 0x45, 0x70, 0x5A, 0xA5, 0x81, 0x71, 0x8B, 0x41, 0x32, 0xC4,
-      0x27, 0x92, 0x7F, 0xAE, 0x75, 0xBF, 0x96, 0x16, 0xA5, 0x42, 0x4C, 0x20,
-      0x20, 0xEB, 0xC5, 0xCF, 0xC1, 0xBC, 0x0E, 0xD1, 0x65, 0x3A, 0xE5, 0x00,
-      0x5A, 0x17, 0x54, 0x18, 0x16, 0x20, 0xB7, 0xF0, 0x6D, 0x71, 0x63, 0x13,
-      0x03, 0x3B, 0xB7, 0x2A, 0x40, 0x64, 0x7A, 0xDB, 0x2E, 0x66, 0x73, 0x70,
-      0xF2, 0xC7, 0x4F, 0xDB, 0x94, 0x42, 0x0D, 0xA4, 0x8D, 0xD1, 0x37, 0x9D,
-      0xBA, 0x59, 0xAA, 0x22, 0xF8, 0x57, 0xE2, 0x31, 0xC5, 0xC0, 0x83, 0x29,
-      0x00, 0x66, 0xC5, 0x48, 0x76, 0x1B, 0xDF, 0x38, 0x5F, 0x2F, 0x85, 0x81,
-      0x7B, 0x21, 0x20, 0x66, 0xD3, 0x9F, 0x03, 0xB7, 0x7F, 0x8E, 0xF4, 0x12,
-      0x19, 0xE4, 0xBF, 0xB9, 0xC1, 0x2E, 0x4F, 0xC9, 0x88, 0x00, 0x57, 0x1D,
-      0x22, 0x3A, 0xA9, 0x2A, 0x32, 0xC7, 0xA3, 0xC2, 0xA7, 0xCF, 0x9C, 0x99,
-      0x5A, 0xE0, 0xA7, 0xB5, 0x93, 0x91, 0xFE, 0x9A, 0x4F, 0x0D, 0x63, 0x3B,
-      0xFB, 0x79, 0x8C, 0x34, 0xB7, 0x2B, 0xBA, 0x6A, 0x9F, 0x16, 0xC4, 0x13,
-      0x2E, 0x88, 0xB5, 0x70, 0x75, 0x8B, 0xD5, 0x51, 0xC9, 0x1B, 0xD2, 0xAD,
-      0xEB, 0x53, 0xA7, 0x2A, 0xC6, 0xAA, 0x03, 0x68, 0x9D, 0xD6, 0x4B, 0x03,
-      0x57, 0x09, 0xA8, 0xAF, 0x46, 0x85, 0x43, 0xCB, 0x17, 0x36, 0xDB, 0xC9,
-      0xC7, 0x2B, 0x52, 0x9E, 0x70, 0x59, 0x6D, 0x18, 0xB1, 0x9C, 0xA6, 0x8E,
-      0x61, 0x7A, 0x14, 0x7C, 0x18, 0x9D, 0x28, 0x3A, 0x77, 0x68, 0x8C, 0xAF,
-      0x94, 0xDA, 0x5A, 0x0E, 0x9B, 0x63, 0x18, 0x1A, 0x40, 0xBB, 0xE7, 0xBD,
-      0x41, 0x68, 0xA2, 0x4D, 0x27, 0x43, 0x19, 0xA9, 0x93, 0xBC, 0xEA, 0x8A,
-      0xBF, 0x50, 0x5F, 0xE8, 0x62, 0x12, 0x96, 0x92, 0xB5, 0xBD, 0xE8, 0x49,
-      0xF3, 0x6A, 0xC9, 0x2F, 0x71, 0x71, 0xE5, 0x38, 0x59, 0x31, 0x36, 0x04,
-      0xEA, 0xC1, 0x0B, 0xE2, 0x78, 0x6F, 0xF3, 0x85, 0xB9, 0xC7, 0x18, 0x15,
-      0x48, 0x18, 0x77, 0x2F, 0xA7, 0xB8, 0x99, 0xC0, 0x4E, 0xFD, 0x18, 0xA8,
-      0x01, 0x9A, 0x79, 0xB6, 0xF6, 0x4D, 0x5B, 0x9A, 0x2C, 0x55, 0xE7, 0x84,
-      0xCB, 0x47, 0xCA, 0x29, 0x48, 0x56, 0x68, 0x9A, 0xA6, 0xA7, 0x0C, 0xC2,
-      0x7B, 0x6C, 0x20, 0xD4, 0xD1, 0xC7, 0x29, 0xC4, 0x09, 0xD0, 0xB9, 0x25,
-      0xC4, 0x0C, 0x30, 0xC0, 0x77, 0x78, 0x15, 0x07, 0x77, 0x49, 0x48, 0x8B,
-      0x8D, 0xF0, 0x39, 0x06, 0x95, 0xAB, 0xDB, 0x04, 0x8C, 0x7C, 0xE1, 0x85,
-      0x36, 0x02, 0xA5, 0x4D, 0x15, 0x3C, 0xF2, 0xA5, 0x16, 0x17, 0x84, 0x7B,
-      0x11, 0xE6, 0x3C, 0x4C, 0x76, 0x19, 0x66, 0xD5, 0xAD, 0x93, 0x35, 0x0D,
-      0xBA, 0xDA, 0x4A, 0x15, 0xC1, 0x24, 0xBD, 0x80, 0x88, 0x71, 0x99, 0x3F,
-      0xC7, 0x75, 0xB6, 0xE4, 0x10, 0xC3, 0x86, 0x59, 0x0F, 0x73, 0x0A, 0x8E,
-      0xC9, 0x47, 0x5E, 0xEE, 0x91, 0x50, 0x39, 0xE9, 0x1B, 0x6F, 0xE4, 0x25,
-      0xB9, 0x06, 0x68, 0xC6, 0xAC, 0x52, 0x58, 0xB7, 0xAF, 0x10, 0x3B, 0x9F,
-      0x5E, 0x23, 0x0B, 0x71, 0x9B, 0xBB, 0x09, 0x87, 0x1D, 0xC1, 0x62, 0x15,
-      0x17, 0xBA, 0x2A, 0x83, 0x9C, 0x96, 0xAA, 0xA6, 0x44, 0x0A, 0x87, 0x5E,
-      0xAC, 0x90, 0xB2, 0x98, 0xD6, 0x1B, 0xD3, 0xF3, 0xAC, 0x89, 0xB4, 0x05,
-      0xDB, 0x39, 0x42, 0x32, 0x68, 0x6A, 0x2B, 0xE0, 0xF3, 0xC7, 0x5F, 0x15,
-      0xE6, 0x4E, 0x61, 0xF0, 0x70, 0x79, 0x1E, 0xB4, 0xBB, 0x97, 0xB7, 0x01,
-      0x98, 0x25, 0xF1, 0x17, 0xC7, 0xD7, 0x3A, 0x12, 0xFD, 0x3D, 0xCC, 0x22,
-      0xD5, 0x81, 0xB0, 0xE4, 0x1B, 0x78, 0x63, 0x74, 0xA4, 0x61, 0xEA, 0x0D,
-      0x88, 0xDA, 0xA8, 0x9B, 0x65, 0x9F, 0x0D, 0xC8, 0x24, 0x43, 0x42, 0x35,
-      0x15, 0xB6, 0x33, 0xB0, 0x05, 0xC9, 0x58, 0xEC, 0x26, 0x56, 0x1B, 0x6D,
-      0xB8, 0x18, 0xF4, 0xB8, 0xCB, 0x2E, 0x28, 0x99, 0x0E, 0x74, 0x84, 0x17,
-      0x58, 0x7F, 0xEC, 0x38, 0xA1, 0x28, 0x4B, 0xBB, 0x4F, 0xF9, 0xE4, 0x78,
-    },
-
-    .exp = {
-      0xC6, 0x1F, 0x73, 0xD2, 0xBF, 0xB1, 0x85, 0x94, 0xE1, 0xBA, 0x5D, 0x3B,
-      0x58, 0xB4, 0xC9, 0x34, 0x20, 0x6D, 0x3A, 0x6F, 0x8E, 0xC9, 0x13, 0x95,
-      0xAB, 0x77, 0x79, 0xC6, 0x1F, 0xA1, 0xDD, 0x6F,
-    },
-  }, {
-    .name = "0-pass",
-
-    .ct = {
-      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
-      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
-      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
-      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
-      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
-      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
-      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
-      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
-      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
-      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
-      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
-      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
-      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
-      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
-      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
-      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
-      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
-      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
-      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
-      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
-      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
-      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
-      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
-      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
-      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
-      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
-      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
-      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
-      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
-      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
-      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
-      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
-      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
-      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
-      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
-      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
-      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
-      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
-      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
-      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
-      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
-      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
-      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
-      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
-      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
-      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
-      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
-      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
-      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
-      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
-      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
-      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
-      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
-      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
-      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
-      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
-      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
-      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
-      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
-      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
-      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
-      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
-      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
-      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
-      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
-      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
-      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
-      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
-      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
-      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
-      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
-      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
-      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
-      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
-      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
-      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
-      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
-      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
-      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
-      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
-      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
-      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
-      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
-      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
-      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
-      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
-      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
-      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
-      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
-      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
-      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
-      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
-      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
-      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
-      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
-      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
-      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
-      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
-      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
-      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
-      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
-      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
-      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
-      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
-      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
-      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
-      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
-      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
-      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
-      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
-      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
-      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
-      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
-      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
-      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
-      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
-      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
-      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
-      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
-      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
-      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
-      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
-      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
-      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
-      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
-      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
-      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
-      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
-      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
-      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
-      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
-    },
-
-    .dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
-      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
-      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
-      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
-      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
-      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
-      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
-      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
-      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
-      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
-      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
-      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
-      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
-      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
-      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
-      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
-      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
-      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
-      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
-      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
-      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
-      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
-      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
-      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
-      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
-      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
-      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
-      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
-      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
-      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
-      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
-      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
-      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
-      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
-      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
-      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
-      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
-      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
-      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
-      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
-      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
-      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
-      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
-      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
-      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
-      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
-      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
-      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
-      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
-      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
-      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
-      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
-      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
-      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
-      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
-      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
-      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
-      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
-      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
-      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
-      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
-      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
-      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
-      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
-      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
-      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
-      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
-      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
-      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
-      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
-      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
-      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
-      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
-      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
-      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
-      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
-      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
-      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
-      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
-      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
-      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
-      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
-      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
-      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
-      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
-      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
-      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
-      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
-      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
-      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
-      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
-      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
-      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
-      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
-      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
-      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
-      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
-      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
-      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
-      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
-      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
-      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
-      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
-      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
-      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
-      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
-      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
-      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
-      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
-      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
-      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
-      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
-      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
-      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
-      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
-      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
-      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
-      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
-      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
-      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
-      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
-      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
-      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
-      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
-      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
-      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
-      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
-      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
-      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
-      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
-      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
-      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
-      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
-      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
-    },
-  }, {
-    .name = "1-fail-implicit-rejection-0: ct[0] = 0",
-
-    .ct = {
-      0x00, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
-      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
-      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
-      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
-      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
-      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
-      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
-      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
-      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
-      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
-      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
-      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
-      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
-      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
-      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
-      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
-      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
-      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
-      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
-      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
-      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
-      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
-      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
-      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
-      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
-      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
-      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
-      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
-      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
-      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
-      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
-      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
-      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
-      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
-      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
-      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
-      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
-      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
-      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
-      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
-      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
-      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
-      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
-      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
-      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
-      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
-      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
-      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
-      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
-      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
-      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
-      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
-      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
-      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
-      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
-      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
-      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
-      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
-      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
-      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
-      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
-      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
-      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
-      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
-      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
-      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
-      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
-      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
-      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
-      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
-      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
-      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
-      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
-      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
-      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
-      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
-      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
-      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
-      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
-      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
-      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
-      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
-      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
-      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
-      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
-      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
-      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
-      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
-      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
-      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
-      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
-      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
-      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
-      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
-      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
-      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
-      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
-      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
-      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
-      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
-      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
-      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
-      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
-      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
-      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
-      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
-      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
-      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
-      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
-      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
-      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
-      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
-      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
-      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
-      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
-      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
-      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
-      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
-      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
-      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
-      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
-      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
-      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
-      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
-      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
-      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
-      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
-      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
-      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
-      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
-      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
-    },
-
-    .dk = {
-      0x89, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
-      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
-      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
-      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
-      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
-      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
-      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
-      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
-      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
-      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
-      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
-      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
-      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
-      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
-      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
-      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
-      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
-      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
-      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
-      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
-      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
-      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
-      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
-      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
-      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
-      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
-      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
-      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
-      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
-      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
-      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
-      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
-      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
-      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
-      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
-      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
-      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
-      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
-      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
-      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
-      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
-      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
-      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
-      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
-      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
-      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
-      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
-      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
-      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
-      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
-      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
-      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
-      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
-      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
-      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
-      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
-      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
-      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
-      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
-      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
-      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
-      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
-      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
-      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
-      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
-      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
-      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
-      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
-      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
-      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
-      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
-      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
-      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
-      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
-      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
-      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
-      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
-      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
-      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
-      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
-      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
-      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
-      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
-      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
-      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
-      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
-      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
-      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
-      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
-      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
-      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
-      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
-      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
-      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
-      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
-      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
-      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
-      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
-      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
-      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
-      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
-      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
-      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
-      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
-      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
-      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
-      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
-      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
-      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
-      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
-      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
-      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
-      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
-      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
-      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
-      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
-      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
-      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
-      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
-      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
-      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
-      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
-      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
-      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
-      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
-      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
-      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
-      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
-      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
-      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
-      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0xb1, 0x8c, 0x33, 0xca, 0x11, 0x47, 0xa9, 0xd7,
-      0x28, 0xb9, 0xdf, 0xb8, 0x7d, 0x90, 0x7d, 0x8a,
-      0x88, 0x1b, 0x93, 0x76, 0xa0, 0xfd, 0x16, 0x44,
-      0x77, 0x23, 0xc8, 0x6e, 0x3f, 0x24, 0x2b, 0xcf,
-    },
-  }, {
-    .name = "2-fail-implicit-rejection-1: dk[0] = 0",
-
-    .ct = {
-      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
-      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
-      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
-      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
-      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
-      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
-      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
-      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
-      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
-      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
-      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
-      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
-      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
-      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
-      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
-      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
-      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
-      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
-      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
-      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
-      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
-      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
-      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
-      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
-      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
-      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
-      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
-      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
-      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
-      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
-      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
-      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
-      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
-      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
-      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
-      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
-      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
-      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
-      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
-      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
-      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
-      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
-      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
-      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
-      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
-      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
-      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
-      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
-      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
-      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
-      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
-      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
-      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
-      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
-      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
-      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
-      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
-      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
-      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
-      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
-      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
-      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
-      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
-      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
-      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
-      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
-      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
-      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
-      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
-      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
-      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
-      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
-      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
-      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
-      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
-      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
-      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
-      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
-      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
-      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
-      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
-      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
-      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
-      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
-      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
-      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
-      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
-      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
-      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
-      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
-      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
-      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
-      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
-      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
-      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
-      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
-      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
-      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
-      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
-      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
-      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
-      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
-      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
-      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
-      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
-      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
-      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
-      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
-      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
-      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
-      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
-      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
-      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
-      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
-      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
-      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
-      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
-      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
-      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
-      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
-      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
-      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
-      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
-      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
-      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
-      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
-      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
-      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
-      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
-      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
-      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
-    },
-
-    .dk = {
-      0x00, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
-      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
-      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
-      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
-      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
-      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
-      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
-      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
-      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
-      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
-      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
-      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
-      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
-      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
-      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
-      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
-      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
-      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
-      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
-      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
-      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
-      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
-      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
-      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
-      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
-      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
-      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
-      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
-      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
-      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
-      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
-      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
-      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
-      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
-      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
-      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
-      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
-      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
-      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
-      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
-      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
-      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
-      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
-      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
-      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
-      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
-      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
-      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
-      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
-      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
-      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
-      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
-      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
-      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
-      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
-      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
-      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
-      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
-      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
-      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
-      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
-      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
-      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
-      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
-      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
-      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
-      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
-      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
-      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
-      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
-      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
-      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
-      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
-      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
-      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
-      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
-      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
-      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
-      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
-      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
-      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
-      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
-      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
-      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
-      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
-      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
-      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
-      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
-      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
-      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
-      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
-      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
-      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
-      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
-      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
-      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
-      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
-      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
-      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
-      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
-      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
-      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
-      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
-      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
-      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
-      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
-      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
-      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
-      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
-      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
-      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
-      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
-      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
-      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
-      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
-      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
-      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
-      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
-      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
-      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
-      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
-      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
-      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
-      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
-      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
-      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
-      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
-      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
-      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
-      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
-      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
-      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
-      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
-      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
-    },
-  }, {
-    .name = "2-fail-implicit-rejection-1: dk[0] = 0x01",
-
-    .ct = {
-      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
-      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
-      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
-      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
-      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
-      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
-      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
-      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
-      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
-      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
-      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
-      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
-      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
-      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
-      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
-      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
-      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
-      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
-      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
-      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
-      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
-      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
-      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
-      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
-      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
-      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
-      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
-      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
-      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
-      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
-      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
-      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
-      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
-      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
-      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
-      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
-      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
-      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
-      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
-      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
-      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
-      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
-      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
-      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
-      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
-      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
-      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
-      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
-      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
-      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
-      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
-      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
-      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
-      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
-      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
-      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
-      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
-      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
-      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
-      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
-      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
-      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
-      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
-      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
-      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
-      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
-      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
-      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
-      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
-      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
-      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
-      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
-      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
-      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
-      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
-      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
-      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
-      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
-      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
-      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
-      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
-      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
-      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
-      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
-      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
-      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
-      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
-      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
-      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
-      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
-      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
-      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
-      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
-      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
-      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
-      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
-      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
-      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
-      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
-      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
-      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
-      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
-      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
-      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
-      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
-      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
-      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
-      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
-      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
-      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
-      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
-      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
-      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
-      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
-      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
-      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
-      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
-      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
-      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
-      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
-      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
-      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
-      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
-      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
-      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
-      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
-      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
-      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
-      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
-      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
-      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
-    },
-
-    .dk = {
-      0x00, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
-      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
-      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
-      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
-      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
-      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
-      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
-      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
-      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
-      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
-      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
-      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
-      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
-      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
-      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
-      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
-      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
-      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
-      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
-      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
-      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
-      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
-      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
-      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
-      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
-      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
-      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
-      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
-      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
-      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
-      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
-      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
-      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
-      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
-      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
-      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
-      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
-      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
-      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
-      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
-      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
-      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
-      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
-      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
-      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
-      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
-      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
-      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
-      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
-      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
-      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
-      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
-      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
-      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
-      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
-      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
-      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
-      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
-      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
-      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
-      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
-      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
-      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
-      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
-      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
-      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
-      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
-      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
-      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
-      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
-      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
-      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
-      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
-      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
-      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
-      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
-      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
-      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
-      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
-      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
-      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
-      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
-      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
-      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
-      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
-      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
-      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
-      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
-      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
-      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
-      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
-      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
-      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
-      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
-      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
-      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
-      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
-      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
-      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
-      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
-      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
-      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
-      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
-      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
-      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
-      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
-      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
-      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
-      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
-      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
-      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
-      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
-      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
-      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
-      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
-      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
-      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
-      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
-      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
-      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
-      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
-      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
-      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
-      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
-      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
-      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
-      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
-      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
-      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
-      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
-      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
-      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
-      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
-      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
-    },
-  }, {
-    .name = "3-fail-implicit-rejection-2: dk[0] = 0xff",
-
-    .ct = {
-      0xd5, 0x1e, 0x75, 0x4b, 0x69, 0xf6, 0x90, 0x85, 0x2f, 0x5c, 0x3a, 0xf5,
-      0x21, 0xe0, 0x70, 0x74, 0x1f, 0xe2, 0x5e, 0xb1, 0x17, 0xc9, 0xa9, 0xb5,
-      0x34, 0x6b, 0x3f, 0xdc, 0x00, 0xb6, 0x59, 0x97, 0xed, 0xc0, 0x4a, 0x9c,
-      0xc2, 0xd3, 0x23, 0x53, 0xdb, 0x57, 0xd4, 0xcb, 0x76, 0xb0, 0xb4, 0xc8,
-      0x86, 0xde, 0x2f, 0xd1, 0xd1, 0x3e, 0xfb, 0x78, 0xaa, 0x3d, 0x62, 0x9a,
-      0x9a, 0xcc, 0x34, 0x93, 0x73, 0x6d, 0x88, 0x4c, 0x7f, 0x12, 0x34, 0xb2,
-      0xf4, 0xf0, 0x3a, 0x31, 0x4e, 0xeb, 0x61, 0x7d, 0x7e, 0x2b, 0x00, 0xc6,
-      0x6e, 0x87, 0xfa, 0x46, 0xb0, 0x98, 0x04, 0x7b, 0xc3, 0x5f, 0x5f, 0xb2,
-      0x04, 0xb2, 0x17, 0xe4, 0x6d, 0x8b, 0xea, 0x31, 0x4f, 0x9a, 0x0f, 0xd3,
-      0x86, 0x8a, 0xc2, 0x04, 0x4b, 0x8c, 0xe9, 0xc1, 0xe3, 0xd9, 0xce, 0xe0,
-      0x26, 0x53, 0x37, 0x81, 0xa4, 0x80, 0xca, 0x7b, 0x0e, 0x1a, 0xaf, 0x73,
-      0x0b, 0xc9, 0xf7, 0xa1, 0xa4, 0x44, 0x20, 0x2b, 0x8f, 0x5b, 0x36, 0x64,
-      0xa2, 0x81, 0xf8, 0xf5, 0xd4, 0xe3, 0x7e, 0xbc, 0xf2, 0x7c, 0xc2, 0xfd,
-      0x4a, 0x23, 0x54, 0xcb, 0x90, 0xc3, 0x97, 0x29, 0x18, 0xc1, 0xc7, 0x99,
-      0xb7, 0xe7, 0x4e, 0xee, 0x47, 0xcf, 0x12, 0x5d, 0x2c, 0xb1, 0x5e, 0xa9,
-      0x08, 0x40, 0x13, 0x71, 0xb0, 0xc6, 0xdc, 0x8f, 0x42, 0xc7, 0xef, 0xc9,
-      0x5b, 0x9d, 0xf7, 0x9f, 0x3a, 0xf9, 0x89, 0x14, 0x29, 0xc5, 0xbf, 0x96,
-      0xe3, 0x3f, 0x77, 0x67, 0x67, 0x05, 0x58, 0x38, 0x63, 0x36, 0x7f, 0xce,
-      0x4a, 0xf2, 0x96, 0xde, 0xa2, 0x8a, 0x1d, 0xca, 0x6e, 0x19, 0x7d, 0x37,
-      0x3f, 0x8a, 0x8a, 0x99, 0xfb, 0x12, 0xa4, 0xc0, 0x78, 0xd9, 0x61, 0x3b,
-      0x95, 0x81, 0x3b, 0xf5, 0xaa, 0x4e, 0x16, 0x3b, 0x28, 0x77, 0x5b, 0x22,
-      0x04, 0x4b, 0x6a, 0x8e, 0x66, 0x40, 0x50, 0xb8, 0x3b, 0x4c, 0x38, 0xb9,
-      0x9a, 0x74, 0x83, 0xa4, 0x31, 0x26, 0x3d, 0xc6, 0x68, 0xe6, 0x68, 0xbf,
-      0x92, 0x51, 0xb8, 0xf0, 0xf1, 0x7c, 0x16, 0xf2, 0x7a, 0xcb, 0x63, 0x0f,
-      0x40, 0x76, 0x99, 0x45, 0xdf, 0x20, 0xf8, 0x7b, 0x17, 0x1b, 0x96, 0x5a,
-      0xfc, 0x33, 0x07, 0x02, 0x91, 0x90, 0x64, 0xd0, 0x34, 0x9a, 0xb5, 0xd9,
-      0x4b, 0x78, 0x14, 0x0f, 0xea, 0x14, 0x0d, 0x06, 0x18, 0x18, 0x5d, 0x67,
-      0x4e, 0x85, 0x42, 0x64, 0xf7, 0x50, 0x92, 0x63, 0xf5, 0x2b, 0xcb, 0x87,
-      0x3d, 0x6c, 0xde, 0xb4, 0x20, 0x7b, 0x13, 0xf7, 0x65, 0xa6, 0xd5, 0x53,
-      0x5a, 0x32, 0x00, 0xcf, 0xad, 0x2d, 0x40, 0xcf, 0xb1, 0x34, 0xd2, 0x96,
-      0x70, 0x57, 0x42, 0xc0, 0x35, 0x65, 0xfb, 0x27, 0xc8, 0x83, 0x6e, 0x72,
-      0x92, 0xc4, 0xa0, 0xdc, 0x9a, 0x39, 0xfc, 0xf9, 0x95, 0x96, 0x7c, 0x6f,
-      0xee, 0xf1, 0xa2, 0xd6, 0x00, 0x86, 0x0a, 0x9b, 0xe5, 0x2a, 0xae, 0xb5,
-      0x7f, 0xc1, 0x21, 0xbc, 0x6c, 0x73, 0xff, 0xa0, 0xb5, 0x73, 0x35, 0x17,
-      0x5f, 0x6a, 0x6e, 0x3b, 0xb9, 0xd6, 0x17, 0xb2, 0xa7, 0x35, 0x94, 0x36,
-      0x1f, 0x70, 0x16, 0xb4, 0xc5, 0x7d, 0x2a, 0x65, 0x86, 0x50, 0x35, 0x61,
-      0xa2, 0xa0, 0x17, 0x7d, 0x33, 0xd9, 0x5f, 0x52, 0xce, 0xda, 0x1a, 0x2f,
-      0xd2, 0x99, 0xc8, 0x06, 0x72, 0x7b, 0xc6, 0xfd, 0x6a, 0x86, 0x03, 0x26,
-      0x20, 0xaa, 0x6c, 0x1c, 0xc2, 0xf7, 0xa0, 0xb0, 0x3a, 0x94, 0x0c, 0x8d,
-      0x0e, 0x95, 0x1c, 0x73, 0x90, 0x6a, 0x54, 0xd3, 0xff, 0x76, 0x47, 0x00,
-      0xdc, 0x2b, 0xb5, 0x64, 0xab, 0x7e, 0xda, 0xc0, 0x35, 0x56, 0x7d, 0x36,
-      0x32, 0xa8, 0xe5, 0xa5, 0x53, 0x46, 0x55, 0x69, 0x5c, 0xae, 0x86, 0x60,
-      0xde, 0x2d, 0xe3, 0x19, 0xc4, 0xd8, 0x0c, 0xab, 0xc1, 0xa5, 0xf0, 0x52,
-      0x9a, 0xbe, 0x3d, 0xfe, 0x51, 0x62, 0x12, 0x32, 0xc8, 0xbf, 0xab, 0xfd,
-      0x4b, 0xad, 0x4a, 0xed, 0x5d, 0x0d, 0x31, 0xbc, 0xff, 0xcf, 0x98, 0x56,
-      0x1a, 0x16, 0xf9, 0x20, 0x3b, 0x35, 0xe4, 0x68, 0xee, 0x48, 0x22, 0x11,
-      0x05, 0x96, 0x89, 0x8e, 0x58, 0x17, 0xa7, 0xec, 0x20, 0x57, 0x2e, 0xd8,
-      0x30, 0x9d, 0x90, 0xe2, 0xef, 0x5d, 0x7c, 0xbe, 0xe1, 0xc6, 0xe3, 0x94,
-      0xae, 0x65, 0x47, 0xd8, 0x8a, 0x21, 0xea, 0x60, 0xe3, 0xb5, 0x7d, 0x15,
-      0xc0, 0x94, 0x2f, 0xce, 0x4e, 0x93, 0x7e, 0x66, 0xf9, 0xa1, 0x7f, 0x86,
-      0x65, 0x93, 0xb3, 0xff, 0x63, 0xfa, 0xba, 0xe9, 0x03, 0x5e, 0xe0, 0x5d,
-      0x40, 0x42, 0xae, 0xd6, 0x3f, 0x68, 0x99, 0xea, 0x7f, 0x21, 0xd9, 0x1b,
-      0xf6, 0x67, 0x27, 0x02, 0x01, 0xda, 0x14, 0x38, 0xd0, 0x1d, 0xb0, 0x01,
-      0x48, 0x40, 0xc5, 0xf1, 0x1d, 0x3a, 0xeb, 0x55, 0x2c, 0xc3, 0xaf, 0x0d,
-      0x15, 0xc4, 0xc8, 0x36, 0x9e, 0xc3, 0x6a, 0xbe, 0xd3, 0x7f, 0x59, 0x57,
-      0x1e, 0x0f, 0xd6, 0xb0, 0xe6, 0xcc, 0x1c, 0xd2, 0x9e, 0x3e, 0xc4, 0x68,
-      0x8a, 0x43, 0x08, 0x3a, 0x32, 0xd8, 0x60, 0x87, 0xc7, 0x9f, 0xd3, 0xe2,
-      0x4a, 0x58, 0xcc, 0x49, 0x08, 0x74, 0x5d, 0x27, 0x07, 0x68, 0x93, 0xe0,
-      0xf5, 0x2b, 0xe9, 0xa5, 0xf6, 0x22, 0x76, 0x57, 0x49, 0x4d, 0x16, 0xf6,
-      0x67, 0xe9, 0x33, 0xde, 0x4c, 0xc9, 0xd3, 0x34, 0x51, 0x95, 0xe7, 0xa3,
-      0xb6, 0xbf, 0x99, 0xb3, 0xe9, 0xe2, 0x53, 0xd4, 0x56, 0x2f, 0x47, 0x2e,
-      0x7a, 0x83, 0xdf, 0x09, 0xad, 0xd8, 0xdb, 0x98, 0xb3, 0x78, 0x46, 0x6c,
-      0x06, 0xaa, 0x03, 0x4a, 0x71, 0x35, 0x29, 0x6d, 0xc7, 0x69, 0x3a, 0x07,
-      0x8c, 0x8d, 0xa8, 0x28, 0x6c, 0xa6, 0xb9, 0xc6, 0x82, 0x48, 0x66, 0x3f,
-      0xcc, 0x0f, 0xe2, 0xa1, 0xb6, 0x38, 0x38, 0x92, 0x1b, 0xd3, 0x37, 0x8e,
-      0xc1, 0xa3, 0xb6, 0xe4, 0xb3, 0x5d, 0x0e, 0x0e, 0xb4, 0x1d, 0x5d, 0xd0,
-      0x36, 0x75, 0x5f, 0x99, 0x28, 0xd9, 0x86, 0x20, 0xbc, 0x24, 0x27, 0xe6,
-      0xc4, 0x2a, 0x39, 0x76, 0x54, 0xcc, 0xd7, 0xe2, 0x38, 0xaf, 0xcb, 0x74,
-      0xf5, 0xb5, 0x0b, 0xc6, 0xbc, 0xc1, 0x2b, 0x10, 0x8b, 0x83, 0xdd, 0x82,
-      0xdb, 0x47, 0x8a, 0xdf, 0x34, 0x38, 0x4c, 0xb5, 0x3a, 0x23, 0xdd, 0x37,
-      0xf3, 0x79, 0xff, 0x3b, 0x58, 0xfc, 0xe7, 0x41, 0xfa, 0x13, 0x9c, 0xf4,
-      0x24, 0xd3, 0x1c, 0x34, 0x67, 0xa4, 0x5a, 0x8a, 0x20, 0x3b, 0x94, 0x34,
-      0xf6, 0xe0, 0xd2, 0x97, 0xe6, 0xcb, 0xec, 0x46, 0xe3, 0x75, 0xf9, 0xc1,
-      0xeb, 0xda, 0xbd, 0x1f, 0x81, 0xb4, 0xfd, 0xd9, 0xbb, 0x76, 0xa6, 0x70,
-      0xef, 0x6d, 0xef, 0x33, 0x86, 0x48, 0x12, 0x52, 0x92, 0x14, 0x88, 0xac,
-      0x16, 0x6f, 0xf7, 0xee, 0x5d, 0x4e, 0x1f, 0x3d, 0xdf, 0x1c, 0x73, 0x16,
-      0x34, 0x33, 0xdb, 0xa2, 0xdc, 0xe5, 0xf0, 0xde, 0x16, 0xf4, 0x29, 0xb9,
-      0x68, 0x5f, 0x5d, 0x53, 0x5b, 0xe9, 0x9c, 0x47, 0x97, 0xa6, 0xde, 0xfc,
-      0xf2, 0xe0, 0x13, 0x87, 0x45, 0xac, 0x78, 0x3e, 0x5f, 0x0e, 0x62, 0x19,
-      0xc2, 0xe6, 0xc6, 0x2e, 0xfc, 0x4b, 0x0a, 0x03, 0x5d, 0x3a, 0xcb, 0x66,
-      0xd1, 0x2e, 0xf5, 0x2e, 0x44, 0xda, 0x17, 0x8d, 0x13, 0x74, 0x37, 0xe0,
-      0xab, 0x42, 0x20, 0x9a, 0x3b, 0xcf, 0xe1, 0x18, 0x35, 0x3b, 0x65, 0x28,
-      0x6f, 0x76, 0x49, 0xd2, 0xf5, 0xb7, 0x8c, 0x33, 0xc7, 0xc6, 0xd8, 0xd0,
-      0xa7, 0x51, 0x9b, 0xe4, 0x71, 0x87, 0xd8, 0xeb, 0x60, 0x89, 0xd3, 0x30,
-      0x9a, 0xf6, 0x33, 0x20, 0x7e, 0x40, 0x35, 0xdc, 0xd2, 0x4c, 0xc2, 0x38,
-      0x5e, 0xa2, 0x36, 0xc7, 0x66, 0xbd, 0x07, 0xdb, 0x6e, 0x3b, 0x02, 0x4d,
-      0x95, 0x39, 0xa0, 0xf2, 0xad, 0x09, 0x70, 0x34, 0x44, 0x26, 0xd4, 0x99,
-      0xe4, 0x77, 0xa8, 0xf8, 0x30, 0xed, 0x2b, 0x1c, 0xc0, 0x2d, 0x04, 0x2e,
-      0xf5, 0x52, 0x84, 0x98, 0x90, 0x57, 0xbc, 0x22, 0xa3, 0x8d, 0x23, 0x55,
-      0x6e, 0xca, 0x17, 0x30, 0x24, 0xb3, 0xd8, 0xc2, 0xf7, 0x37, 0xc0, 0xad,
-      0x77, 0xd7, 0x2f, 0x6a, 0x29, 0x0c, 0x9e, 0xb7, 0x5a, 0x66, 0xa7, 0xac,
-      0x57, 0x15, 0xc8, 0x73, 0x09, 0x38, 0xf7, 0x90, 0xb7, 0x80, 0xe6, 0x05,
-      0xe8, 0xe2, 0x67, 0x1c, 0x61, 0xed, 0x82, 0x83, 0x02, 0x32, 0x7a, 0x18,
-      0x1d, 0xea, 0xf1, 0xce, 0xb4, 0x98, 0xfb, 0x02, 0x4c, 0xe4, 0x6b, 0x89,
-      0x60, 0x05, 0x8a, 0x79, 0xd6, 0xde, 0xd4, 0x1d, 0x87, 0xb9, 0xfc, 0xb3,
-      0x78, 0x3c, 0x14, 0xb3, 0xf7, 0x01, 0xbd, 0x6c, 0x02, 0x60, 0x59, 0x4c,
-      0x4f, 0x66, 0xf4, 0x59, 0x7e, 0xe7, 0x54, 0xc9, 0x25, 0x7b, 0xd9, 0x0b,
-      0x4b, 0x8c, 0xd2, 0x9f, 0x6f, 0xee, 0x6d, 0x93, 0x51, 0xe5, 0xc4, 0x1e,
-      0x49, 0x91, 0x48, 0x00, 0xad, 0x40, 0xdc, 0xc8, 0x5c, 0xdc, 0x54, 0x46,
-      0x5d, 0x4d, 0x52, 0x5f, 0x68, 0x62, 0x71, 0xd5, 0xe7, 0x4f, 0x57, 0x7d,
-      0x79, 0x3d, 0x2a, 0x59, 0xb0, 0xc6, 0xd6, 0x66, 0x22, 0x47, 0xce, 0xe5,
-      0x76, 0xf4, 0xfc, 0xac, 0x3b, 0xcb, 0xc5, 0xc4, 0xb3, 0x67, 0x17, 0x96,
-      0x91, 0xcc, 0xc6, 0x6a, 0xc8, 0x74, 0x01, 0xd8, 0x36, 0x5d, 0x2b, 0xd3,
-      0x0c, 0x1a, 0x63, 0xe7, 0x48, 0xb2, 0x99, 0xfd, 0x2a, 0x0f, 0xd6, 0x95,
-      0xdd, 0x76, 0xa0, 0xe1, 0xe0, 0xb5, 0xb1, 0x25, 0x49, 0x98, 0x41, 0xc8,
-      0xa3, 0xbd, 0x5e, 0x01, 0x6d, 0xa4, 0x96, 0x01, 0xeb, 0x93, 0xbc, 0xfc,
-      0xd7, 0x4e, 0x2d, 0x28, 0xc9, 0x65, 0x36, 0x5e, 0x23, 0x85, 0x46, 0x45,
-      0x14, 0xb9, 0x43, 0x42, 0xf9, 0x7d, 0x61, 0xfb, 0xe9, 0x74, 0x86, 0xa0,
-      0xe5, 0x23, 0x9b, 0xda, 0x14, 0xc8, 0xfe, 0xd5, 0xd3, 0x22, 0x6c, 0xb4,
-      0x63, 0xbb, 0x76, 0xc0, 0x8b, 0x64, 0x07, 0x4a, 0x46, 0x4d, 0x76, 0x92,
-      0x31, 0x28, 0xa9, 0x45, 0xcf, 0xe6, 0x85, 0x66, 0x2d, 0xa5, 0x7f, 0xcd,
-      0x32, 0x75, 0xf0, 0x0f, 0x38, 0xb9, 0x2b, 0x21, 0xac, 0x1a, 0xbf, 0xb3,
-      0x09, 0x67, 0x16, 0xdd, 0xd6, 0xd9, 0xbd, 0x5b, 0xad, 0xc1, 0xfc, 0x44,
-      0x50, 0x7f, 0x8b, 0x32, 0x7f, 0x05, 0xd9, 0xf8, 0x76, 0x5d, 0xdb, 0xaa,
-      0xda, 0xc5, 0x84, 0xdc, 0x89, 0x2a, 0xea, 0x2a, 0xab, 0xe4, 0x04, 0x03,
-      0xc7, 0xa5, 0x55, 0x79, 0x24, 0x3e, 0x26, 0x27, 0x48, 0xb6, 0x17, 0xd7,
-      0x56, 0xf3, 0x63, 0x87, 0x47, 0x42, 0x8a, 0xa5, 0xa9, 0x91, 0x75, 0xf5,
-      0x40, 0xa8, 0xe0, 0xed, 0xb7, 0x41, 0xb2, 0x22, 0x73, 0x7b, 0x44, 0xcf,
-      0xd0, 0x76, 0xe1, 0x7e, 0x4f, 0x38, 0x74, 0x10, 0x1c, 0x6e, 0x5d, 0xc9,
-      0xba, 0x96, 0x04, 0x7c, 0x2e, 0xf0, 0x3b, 0x92, 0xe2, 0x79, 0x8a, 0xb4,
-      0x1a, 0xb0, 0x95, 0xb4, 0x61, 0x41, 0xa5, 0x9d, 0xb9, 0xe5, 0x56, 0xef,
-      0xb7, 0x0b, 0x51, 0x0d, 0xce, 0x40, 0x17, 0x1e, 0x3b, 0xbf, 0x80, 0xd0,
-      0x03, 0xa6, 0x79, 0xd9, 0xa1, 0xea, 0x7c, 0x04, 0xfc, 0x51, 0x27, 0xdc,
-      0xaf, 0xaf, 0x0c, 0x26, 0xb6, 0x31, 0xdc, 0xe4, 0x3c, 0xb1, 0xa5, 0xda,
-      0x10, 0x61, 0x28, 0x24, 0xd1, 0x9f, 0x16, 0x01, 0xc4, 0x7f, 0x3b, 0x54,
-      0x87, 0x92, 0x1f, 0x71, 0xcb, 0xef, 0xfb, 0x19, 0xcd, 0xef, 0x9f, 0xdc,
-      0xd7, 0xd9, 0x01, 0x40, 0x7a, 0x62, 0x30, 0x95, 0x25, 0x78, 0x94, 0x30,
-      0xeb, 0xfb, 0x87, 0x28, 0x0a, 0x3c, 0xca, 0xa0, 0x9b, 0x2b, 0xbe, 0x6d,
-      0x97, 0x7f, 0xf8, 0x32, 0xd6, 0x7d, 0x92, 0xc4, 0x8d, 0x2f, 0xf7, 0x94,
-      0xf1, 0x76, 0xff, 0x70, 0xf7, 0x79, 0xb1, 0xda, 0xe9, 0xf5, 0xe3, 0xa5,
-      0x97, 0xba, 0x7f, 0x4f, 0x6b, 0x68, 0xb3, 0xb5,
-    },
-
-    .dk = {
-      0xff, 0x18, 0x65, 0xae, 0xf1, 0x0c, 0xb2, 0x23, 0x87, 0xca, 0xe7, 0x35,
-      0x18, 0x0b, 0x85, 0xd1, 0x4c, 0x43, 0x6f, 0x93, 0x17, 0x90, 0x80, 0x40,
-      0x47, 0xf7, 0x36, 0x37, 0x15, 0xb2, 0xc1, 0xc4, 0x30, 0xd3, 0x96, 0x67,
-      0xf7, 0x65, 0xaf, 0x88, 0x5a, 0x7c, 0xa5, 0xaa, 0x79, 0xdc, 0x54, 0xcd,
-      0xfc, 0xba, 0xc3, 0xb7, 0xaa, 0x5b, 0x55, 0x86, 0x8b, 0x79, 0xd6, 0x94,
-      0x98, 0xf8, 0x58, 0xa7, 0x34, 0x76, 0xa6, 0x05, 0x87, 0x7a, 0x14, 0x49,
-      0xf5, 0x8c, 0xcc, 0x25, 0x10, 0x73, 0x67, 0xab, 0x3e, 0x33, 0x52, 0x02,
-      0xa5, 0x9a, 0x7a, 0x40, 0xd7, 0xa2, 0x4a, 0x10, 0x7d, 0x09, 0x9a, 0x19,
-      0x80, 0xc3, 0x16, 0x41, 0x50, 0xb3, 0xb7, 0xc5, 0x33, 0x9a, 0x74, 0x5f,
-      0x3a, 0xb3, 0x1b, 0xdd, 0x9c, 0x7d, 0x23, 0xa3, 0x85, 0x92, 0x28, 0x7b,
-      0xdd, 0x11, 0x38, 0x64, 0xa4, 0x1b, 0xd7, 0x28, 0x45, 0xca, 0x19, 0x21,
-      0x89, 0xfc, 0xa7, 0x02, 0x54, 0x5c, 0x28, 0xf7, 0xa7, 0xcc, 0x67, 0x0f,
-      0x81, 0xc9, 0xbe, 0x55, 0x84, 0x32, 0x50, 0x74, 0x23, 0x83, 0x80, 0xc4,
-      0x69, 0x05, 0x5b, 0x6e, 0x3c, 0x42, 0xe8, 0x28, 0x8e, 0x93, 0x83, 0x0a,
-      0x8b, 0x1c, 0x29, 0xce, 0x85, 0x8d, 0xd8, 0xa0, 0xa1, 0x55, 0xa1, 0x50,
-      0x4d, 0xf4, 0xa8, 0x2d, 0x89, 0x3b, 0xe8, 0x64, 0x6c, 0x23, 0x21, 0x34,
-      0x46, 0x38, 0x90, 0x0d, 0x29, 0x16, 0xee, 0xa4, 0x2f, 0x4c, 0x35, 0xab,
-      0x16, 0xe7, 0x7b, 0xca, 0x81, 0xa5, 0xe2, 0xf8, 0x08, 0x6e, 0x5a, 0x56,
-      0x85, 0xe8, 0xa8, 0x39, 0xc0, 0x96, 0x0a, 0xc0, 0x57, 0x4c, 0xa4, 0x3d,
-      0x79, 0xfb, 0xc3, 0x67, 0x53, 0x4a, 0x71, 0xcc, 0x7e, 0x5a, 0xb4, 0x0b,
-      0x8e, 0xec, 0x30, 0x6b, 0x82, 0xc7, 0x84, 0xc8, 0xb2, 0xcc, 0x48, 0x06,
-      0x8c, 0xc1, 0x65, 0xad, 0x4c, 0xc0, 0x39, 0xd9, 0x34, 0xf6, 0xb2, 0x22,
-      0xca, 0xb4, 0x97, 0x11, 0x77, 0x68, 0x7d, 0x20, 0x75, 0xd6, 0x6a, 0xbd,
-      0x8b, 0xa0, 0xab, 0x7f, 0xdc, 0x5c, 0xae, 0xeb, 0xb9, 0xae, 0xba, 0x1b,
-      0x50, 0xc5, 0xc6, 0xec, 0xf7, 0xc5, 0xba, 0x6c, 0x24, 0x2b, 0x44, 0x4a,
-      0xe8, 0x37, 0x5a, 0xcd, 0xe4, 0x08, 0xfe, 0x61, 0x61, 0x7b, 0xf8, 0x7c,
-      0x73, 0x59, 0xca, 0x85, 0x13, 0xa2, 0xb8, 0xa3, 0x3b, 0x54, 0x47, 0x29,
-      0x8b, 0x06, 0x3f, 0xd8, 0xcb, 0x15, 0xcc, 0x00, 0x59, 0xcf, 0xd3, 0x86,
-      0x79, 0xe5, 0x34, 0x47, 0x10, 0x0b, 0xae, 0xd9, 0xa5, 0xe4, 0x19, 0x86,
-      0xbf, 0xf1, 0x5a, 0xa1, 0x18, 0x37, 0x21, 0x4c, 0xb6, 0xb2, 0x39, 0xbc,
-      0x74, 0xc1, 0x90, 0xdf, 0x13, 0x89, 0x04, 0xd9, 0x6f, 0x5f, 0x73, 0x05,
-      0xff, 0x3c, 0xb0, 0xcb, 0xca, 0x92, 0x08, 0xf7, 0x91, 0x63, 0x61, 0x3e,
-      0xda, 0x47, 0x97, 0xce, 0x8c, 0x5b, 0x2b, 0x25, 0x7a, 0xb1, 0x3c, 0x4a,
-      0xca, 0x24, 0xb3, 0x67, 0xa6, 0x61, 0x71, 0x36, 0xbe, 0xe9, 0x2b, 0xa5,
-      0x7a, 0x22, 0xc4, 0x59, 0x25, 0x90, 0x95, 0x85, 0x3a, 0xcd, 0x53, 0xad,
-      0x6e, 0x73, 0x9e, 0xfa, 0x51, 0x31, 0x2c, 0xe6, 0x85, 0xa1, 0x80, 0xb5,
-      0x22, 0xe4, 0xba, 0x54, 0xf8, 0x47, 0x12, 0x9b, 0xa9, 0x7c, 0x17, 0x19,
-      0x79, 0xb0, 0x08, 0xc8, 0x02, 0xb0, 0xe1, 0xa3, 0x32, 0x00, 0xe5, 0x10,
-      0x81, 0xc1, 0x81, 0x16, 0xa5, 0x21, 0x3e, 0xd3, 0x86, 0xd4, 0x7c, 0x34,
-      0x14, 0x27, 0x89, 0x57, 0xcc, 0x0e, 0x18, 0xd6, 0x5b, 0x9c, 0xe8, 0x66,
-      0xf3, 0x4a, 0xac, 0xf8, 0x00, 0xbe, 0x7c, 0xfc, 0x7b, 0xee, 0x51, 0x31,
-      0x44, 0x76, 0x88, 0x1b, 0x49, 0x42, 0x2f, 0x2c, 0x8c, 0xad, 0x27, 0x6d,
-      0x24, 0x70, 0x7b, 0x99, 0x6a, 0xb4, 0xff, 0xe6, 0xc5, 0x0a, 0x4c, 0x23,
-      0x23, 0xe6, 0x56, 0x3b, 0x60, 0x2b, 0xd5, 0x63, 0x1b, 0x5b, 0xbb, 0x4c,
-      0xb6, 0x03, 0x11, 0xec, 0x85, 0x64, 0xb7, 0x15, 0x44, 0x2e, 0x94, 0x70,
-      0xdc, 0x90, 0x6c, 0x0e, 0x18, 0x4e, 0x2c, 0xb6, 0x6b, 0x5e, 0xbb, 0x4e,
-      0x9b, 0x9b, 0x5d, 0x72, 0x62, 0x47, 0xf3, 0xa7, 0x7b, 0x46, 0x84, 0x4a,
-      0xb6, 0xb1, 0xac, 0x88, 0xfb, 0x84, 0xa2, 0x63, 0xc6, 0x94, 0x40, 0x70,
-      0x31, 0xe2, 0x23, 0xcb, 0xa4, 0x9b, 0x51, 0xa6, 0x24, 0x61, 0x25, 0x18,
-      0xc2, 0x10, 0x6c, 0x7e, 0xbb, 0xab, 0x91, 0x0a, 0x14, 0xa9, 0xb1, 0x20,
-      0xdb, 0xbb, 0xbb, 0x1d, 0xcb, 0x70, 0x57, 0x35, 0xb3, 0x7b, 0x82, 0x8e,
-      0x17, 0xd1, 0x5d, 0xa3, 0xd4, 0x7c, 0xd7, 0xa5, 0xc3, 0xe6, 0xd4, 0x05,
-      0x04, 0xa4, 0xb6, 0x5b, 0xbc, 0x10, 0xa5, 0x69, 0x9d, 0x11, 0xd2, 0x9e,
-      0xeb, 0xfc, 0x86, 0x2f, 0xda, 0xaa, 0x5f, 0x71, 0xbe, 0xc9, 0x41, 0x70,
-      0xed, 0x70, 0x37, 0x17, 0xb4, 0x0d, 0xa3, 0x74, 0x36, 0xf2, 0xcc, 0x5e,
-      0xcf, 0xd1, 0x90, 0x5a, 0x82, 0x4d, 0x09, 0x70, 0x30, 0x92, 0xa0, 0xb6,
-      0x02, 0xc7, 0xcf, 0x48, 0x09, 0x86, 0xdc, 0xab, 0x5e, 0x03, 0x87, 0x29,
-      0xa7, 0xb3, 0x21, 0x3c, 0xda, 0xc2, 0x65, 0x30, 0x66, 0x85, 0x45, 0x5f,
-      0xa3, 0x8b, 0xca, 0x35, 0x50, 0x73, 0x9b, 0xf6, 0x8b, 0xac, 0x89, 0x98,
-      0x9d, 0x08, 0x73, 0x39, 0xe1, 0x9c, 0x4b, 0x64, 0x46, 0xf8, 0xe9, 0x66,
-      0x92, 0x39, 0x6c, 0xab, 0x45, 0x3e, 0xc1, 0x23, 0x8e, 0xd8, 0xa7, 0x96,
-      0xc9, 0xf2, 0x34, 0xed, 0x2a, 0x38, 0xa1, 0xe5, 0x1d, 0xc0, 0x97, 0x8d,
-      0xfa, 0x9c, 0x60, 0x99, 0x13, 0x4b, 0x49, 0x19, 0x7f, 0x4e, 0xc8, 0x6b,
-      0x98, 0x63, 0x96, 0x2e, 0x85, 0x7f, 0x62, 0xc7, 0x15, 0xb3, 0x89, 0x8a,
-      0x2b, 0x99, 0x6c, 0xa4, 0x46, 0x77, 0x22, 0x03, 0xa9, 0xc1, 0xe1, 0x5b,
-      0xcb, 0x14, 0x0d, 0x95, 0x9a, 0x7c, 0xd6, 0x0c, 0x99, 0x52, 0x74, 0x2b,
-      0xd3, 0x08, 0x72, 0xb2, 0x28, 0x97, 0xe3, 0x03, 0x77, 0x95, 0xda, 0x5a,
-      0xb2, 0xc2, 0x48, 0x5f, 0x41, 0xba, 0x8e, 0x2c, 0x2b, 0x08, 0x79, 0x50,
-      0x90, 0x66, 0xae, 0x4b, 0x50, 0x90, 0x25, 0xfb, 0xaf, 0x9f, 0x92, 0xb5,
-      0x74, 0x47, 0x29, 0xda, 0x57, 0xc4, 0x0f, 0x19, 0x5c, 0xa7, 0xba, 0xc0,
-      0x91, 0x0c, 0x68, 0x0d, 0xe0, 0x1a, 0xc5, 0x66, 0x5d, 0x93, 0xb0, 0x44,
-      0x04, 0xa5, 0x70, 0x2f, 0x94, 0x43, 0x10, 0x39, 0xa9, 0xcd, 0x78, 0x84,
-      0xa7, 0xca, 0x74, 0xa7, 0x60, 0x46, 0xa5, 0x43, 0x0e, 0x6b, 0x4c, 0xc4,
-      0x39, 0x64, 0xb4, 0x0c, 0xe0, 0x26, 0x06, 0x31, 0x57, 0x2d, 0xc7, 0xc4,
-      0x5c, 0xd5, 0x8a, 0x2c, 0x9c, 0x6d, 0xf8, 0x06, 0x9d, 0x4d, 0x6c, 0x59,
-      0xba, 0x41, 0x8f, 0x76, 0xa9, 0x38, 0x7e, 0x77, 0x12, 0xec, 0xd6, 0x56,
-      0x30, 0xf6, 0xc0, 0xec, 0xb6, 0x78, 0x93, 0xe0, 0x6d, 0xdd, 0x68, 0x85,
-      0x1c, 0x3c, 0x49, 0x39, 0xe3, 0xad, 0xd0, 0xd2, 0x98, 0x9b, 0x76, 0xb1,
-      0x10, 0x32, 0xcb, 0x5a, 0xeb, 0x8d, 0x61, 0x19, 0x5e, 0x55, 0x09, 0x7b,
-      0xc8, 0x2a, 0x4c, 0x26, 0x14, 0x18, 0x69, 0xa5, 0xce, 0xb8, 0xf3, 0x80,
-      0x54, 0x68, 0xc1, 0xab, 0xd5, 0x3b, 0xc9, 0xb1, 0x98, 0xd9, 0xa5, 0x28,
-      0x23, 0x8a, 0x8e, 0x9f, 0x57, 0x81, 0x19, 0x63, 0xab, 0x56, 0xc4, 0x07,
-      0x13, 0x39, 0x6f, 0x09, 0xd9, 0x17, 0xdc, 0xe7, 0x8f, 0x88, 0xbb, 0x63,
-      0x9d, 0xca, 0x48, 0x85, 0x26, 0xa4, 0xcb, 0x98, 0x94, 0xb6, 0xa5, 0x0e,
-      0x1b, 0xc3, 0x84, 0x76, 0xd8, 0x95, 0xaf, 0x8c, 0x07, 0x33, 0xb1, 0x6d,
-      0x85, 0x1a, 0x20, 0x94, 0x53, 0x18, 0x0f, 0xe3, 0x18, 0xba, 0x73, 0x71,
-      0x13, 0x76, 0x88, 0x97, 0x4c, 0x6a, 0x22, 0x91, 0x79, 0xbd, 0xab, 0xa1,
-      0x29, 0xf2, 0x7e, 0xa9, 0x99, 0x35, 0x0f, 0x95, 0x2e, 0x4e, 0xaa, 0x62,
-      0xe4, 0x89, 0xca, 0xd6, 0xd9, 0x69, 0x98, 0x48, 0x42, 0x94, 0x23, 0x38,
-      0x55, 0x4a, 0x69, 0xf9, 0xe4, 0x16, 0x59, 0xa6, 0xc8, 0x7e, 0x5b, 0x28,
-      0x4a, 0x81, 0x73, 0xe9, 0x70, 0x02, 0x19, 0xec, 0x29, 0x8f, 0x81, 0x2c,
-      0xb6, 0xe3, 0x50, 0xb6, 0xd3, 0x14, 0xa8, 0x30, 0x17, 0xde, 0xf1, 0x30,
-      0x0a, 0xe5, 0x7a, 0xda, 0x03, 0xaf, 0x9f, 0x76, 0x53, 0x4e, 0xb8, 0x2d,
-      0x8f, 0x4a, 0xbe, 0x9d, 0x10, 0xa2, 0x3f, 0x26, 0x56, 0xaa, 0x73, 0xca,
-      0xb3, 0x84, 0x97, 0x72, 0x5c, 0x40, 0x8b, 0xa0, 0x42, 0x9a, 0xa8, 0x5a,
-      0x37, 0x4b, 0x44, 0x96, 0x64, 0x28, 0x8e, 0xba, 0xb7, 0x9c, 0xb3, 0xcc,
-      0x4d, 0xe1, 0x5d, 0xdc, 0xe0, 0x48, 0x2b, 0x12, 0x12, 0x7e, 0xd1, 0x41,
-      0x06, 0x87, 0x2c, 0x2e, 0xf9, 0x3c, 0xec, 0xe9, 0x80, 0xf9, 0xac, 0x23,
-      0x27, 0xf8, 0xc3, 0xae, 0xc7, 0x85, 0x8e, 0x89, 0xc9, 0x95, 0x7b, 0x5c,
-      0x15, 0xcc, 0xad, 0x71, 0x29, 0x04, 0x19, 0x84, 0x40, 0xfa, 0xab, 0x53,
-      0x5c, 0xdb, 0x2b, 0xb8, 0x56, 0x40, 0xa6, 0x9b, 0xb0, 0x46, 0x7c, 0x77,
-      0xe8, 0x57, 0x5b, 0xde, 0x41, 0x8d, 0xb3, 0xa1, 0x36, 0x4b, 0x7b, 0x41,
-      0xb6, 0xd6, 0x7d, 0xbc, 0x61, 0x27, 0x4c, 0xd4, 0x7a, 0x4b, 0x00, 0xc7,
-      0x4b, 0x34, 0x7e, 0x87, 0x4a, 0x76, 0xb5, 0x82, 0x56, 0x21, 0x16, 0x48,
-      0x07, 0x2b, 0x44, 0xdd, 0x06, 0x22, 0x5f, 0xd9, 0x29, 0xf5, 0x86, 0x3f,
-      0x3d, 0x32, 0x80, 0xe9, 0x37, 0x87, 0xd3, 0x76, 0x20, 0xc3, 0x33, 0x50,
-      0xfe, 0x26, 0x59, 0x68, 0x05, 0xb3, 0x3e, 0x79, 0x3e, 0x6f, 0xa8, 0x86,
-      0xf4, 0x92, 0x5d, 0x04, 0x75, 0x08, 0x9d, 0xe9, 0x1d, 0xe7, 0x51, 0x5a,
-      0xfa, 0x2b, 0x0e, 0x40, 0xe5, 0x92, 0xf0, 0x96, 0x7d, 0x0f, 0x20, 0xbf,
-      0x24, 0x43, 0x58, 0xa8, 0x57, 0x48, 0x4c, 0x68, 0x55, 0xe1, 0x07, 0x9c,
-      0xed, 0x66, 0x36, 0x08, 0x06, 0x73, 0xf7, 0x21, 0x9d, 0x5e, 0x59, 0xaf,
-      0xa1, 0x05, 0x5e, 0xd2, 0xe4, 0x78, 0xb8, 0x32, 0x01, 0xc5, 0x91, 0x28,
-      0x4b, 0xcb, 0x1f, 0x50, 0x32, 0x56, 0x6e, 0xba, 0xba, 0xd3, 0xbc, 0xce,
-      0x47, 0x1a, 0xc4, 0x05, 0x37, 0xa1, 0xa0, 0x8c, 0xb4, 0x3e, 0x3a, 0xaa,
-      0x70, 0x05, 0xab, 0x39, 0x23, 0x75, 0xa1, 0xf7, 0x70, 0xdd, 0xe1, 0x92,
-      0x3f, 0x07, 0x1c, 0x88, 0xc3, 0x3e, 0x06, 0xbc, 0x13, 0x49, 0xd3, 0xce,
-      0xfc, 0xc9, 0x04, 0xb0, 0x4b, 0x31, 0x0c, 0x4c, 0xa5, 0x18, 0x49, 0xa3,
-      0x10, 0x5a, 0x99, 0xc7, 0xf9, 0x0e, 0x89, 0x73, 0x21, 0x36, 0x48, 0x8a,
-      0xef, 0xf7, 0xb7, 0x1e, 0xa1, 0xc0, 0x19, 0x40, 0x7e, 0xed, 0x34, 0x40,
-      0xc5, 0x03, 0xbe, 0x3f, 0xbb, 0x9b, 0xf5, 0x87, 0x11, 0x3d, 0x11, 0x04,
-      0x73, 0xc6, 0xaa, 0x3f, 0xc0, 0x7a, 0x91, 0x0b, 0x78, 0x97, 0x19, 0x94,
-      0xd0, 0x87, 0xa1, 0x7a, 0xbb, 0x80, 0x59, 0x47, 0x7b, 0xa3, 0xc0, 0xb0,
-      0x4b, 0xb3, 0x09, 0x29, 0xd9, 0x8b, 0xe0, 0xd4, 0x3c, 0x08, 0xfb, 0x16,
-      0x15, 0x60, 0x9c, 0x5a, 0x7b, 0x80, 0xa4, 0x7a, 0xb8, 0xda, 0x97, 0xa1,
-      0x39, 0xc1, 0xc7, 0x26, 0x12, 0xb6, 0xdb, 0xd8, 0xab, 0x21, 0x5b, 0x71,
-      0x88, 0x03, 0xbe, 0xac, 0x4c, 0xc7, 0x86, 0x50, 0x07, 0xf3, 0x98, 0x3c,
-      0x59, 0x0c, 0x68, 0x01, 0x2c, 0x27, 0xd8, 0x23, 0x0a, 0x6a, 0x27, 0x92,
-      0x21, 0xc2, 0x9e, 0x70, 0xb0, 0x17, 0xb9, 0xa6, 0xbe, 0x99, 0xe0, 0x88,
-      0xe1, 0x69, 0x6d, 0xe4, 0x62, 0x46, 0xbd, 0x58, 0x6b, 0x16, 0x82, 0xc7,
-      0xb4, 0xd5, 0xa2, 0x0f, 0x72, 0xcc, 0xca, 0xf9, 0x69, 0x5b, 0x41, 0xb1,
-      0x31, 0xf7, 0x1a, 0x6d, 0xb6, 0xa5, 0x48, 0x99, 0xcc, 0xf8, 0xd6, 0xca,
-      0xb8, 0xc0, 0x1f, 0x37, 0x28, 0x8b, 0x3c, 0xa3, 0xc2, 0x9c, 0x68, 0x5e,
-      0x99, 0xf7, 0x67, 0x0b, 0x45, 0xa1, 0x1e, 0xab, 0xb6, 0xd6, 0x4b, 0x35,
-      0x30, 0x5b, 0xa0, 0xaf, 0x34, 0x7d, 0x6c, 0x4a, 0xc1, 0x4c, 0x75, 0x3d,
-      0x91, 0xd4, 0xcc, 0x2f, 0xe9, 0x03, 0x38, 0x97, 0xa8, 0x13, 0xba, 0x33,
-      0x10, 0x97, 0x56, 0x48, 0x10, 0x09, 0xe7, 0x30, 0x41, 0x08, 0x67, 0x8e,
-      0xd3, 0x38, 0xa6, 0x6b, 0x6c, 0x68, 0xc9, 0x23, 0x14, 0x6e, 0xd3, 0x1a,
-      0x57, 0xc0, 0x66, 0xc3, 0x82, 0xb5, 0x4b, 0x04, 0x07, 0x2c, 0x17, 0xa3,
-      0x3d, 0x87, 0xc8, 0x2f, 0x4c, 0x86, 0xe1, 0x37, 0x21, 0xa3, 0x9a, 0x18,
-      0xd7, 0xd5, 0x1e, 0x6e, 0x1b, 0xa2, 0xe9, 0x05, 0x08, 0x3e, 0x81, 0x30,
-      0x93, 0xf5, 0x22, 0xf6, 0x90, 0x94, 0xf0, 0xe8, 0x5c, 0xad, 0x85, 0x62,
-      0x3d, 0xc9, 0x75, 0x98, 0x9a, 0xc4, 0xe3, 0xc4, 0x72, 0xfb, 0x95, 0x5a,
-      0xb2, 0xf3, 0x16, 0x76, 0xc8, 0x2d, 0x4d, 0x8c, 0x5a, 0x2e, 0xab, 0x4f,
-      0x5d, 0xf6, 0xb2, 0x88, 0x53, 0x5a, 0x88, 0x58, 0xbe, 0x84, 0xab, 0x1b,
-      0xda, 0x88, 0xbe, 0xb8, 0xca, 0x8f, 0x37, 0x2b, 0xc2, 0x0c, 0x16, 0x81,
-      0x0e, 0x23, 0xc5, 0xe7, 0xf2, 0xad, 0xdb, 0xc0, 0x63, 0x24, 0xd5, 0x3c,
-      0x02, 0xb7, 0xa6, 0x3a, 0xa1, 0x96, 0xb1, 0x18, 0x5d, 0xb0, 0x42, 0x5f,
-      0x2c, 0xe3, 0xb4, 0x8d, 0xec, 0x9b, 0x85, 0x43, 0x97, 0xfa, 0xd6, 0x03,
-      0x6e, 0x22, 0xaf, 0x77, 0x2a, 0xb7, 0x74, 0x7c, 0x93, 0x1c, 0xf8, 0x28,
-      0x66, 0xd9, 0x09, 0x58, 0xa9, 0xa6, 0x20, 0x01, 0x94, 0x77, 0xf3, 0xa0,
-      0xc3, 0x48, 0xa2, 0x61, 0x81, 0x9a, 0x65, 0x4c, 0x1f, 0xb4, 0x9c, 0x2a,
-      0x81, 0x85, 0x11, 0x42, 0x32, 0x25, 0xf8, 0x98, 0x04, 0xcc, 0x5c, 0x90,
-      0x16, 0x08, 0x6b, 0x72, 0x45, 0x13, 0x3a, 0x85, 0x07, 0xcb, 0xf6, 0x08,
-      0xc2, 0x55, 0x3b, 0xd0, 0x6c, 0x49, 0x27, 0x31, 0x2d, 0x1c, 0x86, 0x8c,
-      0x3b, 0x31, 0x2a, 0x6a, 0x9a, 0xc9, 0xaa, 0xd4, 0xa7, 0x7b, 0x6c, 0x98,
-      0x1c, 0x44, 0x57, 0xc4, 0xab, 0x23, 0x90, 0x28, 0x77, 0xc9, 0x73, 0x46,
-      0xce, 0x82, 0x57, 0x90, 0xa8, 0x86, 0xeb, 0xe3, 0xac, 0x8d, 0xd3, 0xa7,
-      0xe3, 0x91, 0xac, 0x17, 0xa4, 0x99, 0x36, 0x6a, 0x14, 0x4b, 0x6a, 0x1f,
-      0xac, 0xf0, 0xa4, 0x83, 0x51, 0x21, 0x12, 0xb9, 0x14, 0x80, 0xb4, 0x29,
-      0xef, 0xf3, 0x67, 0x73, 0xa0, 0x3d, 0x0b, 0x91, 0xa6, 0x03, 0xa9, 0xca,
-      0xbe, 0x79, 0xa8, 0x25, 0x1b, 0x02, 0xa5, 0xb4, 0x84, 0xd2, 0x6a, 0x63,
-      0xb0, 0x16, 0x43, 0x9d, 0xfb, 0xb2, 0x25, 0xab, 0xbd, 0x43, 0x49, 0x10,
-      0x5a, 0xc4, 0xb8, 0x61, 0xe4, 0x89, 0x99, 0xdc, 0x6e, 0xa9, 0x08, 0x96,
-      0xc1, 0xea, 0x2f, 0xb8, 0x7c, 0x93, 0xad, 0xd0, 0xad, 0xe2, 0x09, 0x55,
-      0x57, 0x43, 0x82, 0x03, 0x62, 0x54, 0xc8, 0xf5, 0x00, 0xa0, 0x15, 0x6a,
-      0x2f, 0xdc, 0xcc, 0x41, 0x58, 0xb8, 0xe6, 0xe3, 0x16, 0x0d, 0x50, 0x85,
-      0x59, 0x1b, 0x11, 0xc2, 0x05, 0xb7, 0x42, 0xac, 0x8a, 0xc0, 0xd9, 0x33,
-      0xf2, 0x26, 0xc2, 0x1e, 0x8c, 0x84, 0x6b, 0x47, 0x85, 0x3a, 0xa4, 0xb8,
-      0xcf, 0xa5, 0xa9, 0x9c, 0x41, 0x00, 0x27, 0x8a, 0xc2, 0xf8, 0xc0, 0xc0,
-      0xb4, 0x17, 0xca, 0x2b, 0xe7, 0xb2, 0xbc, 0xac, 0x62, 0x9e, 0x49, 0x6a,
-      0x64, 0x27, 0x33, 0x11, 0x8c, 0x12, 0xde, 0xba, 0x8a, 0xaa, 0x62, 0x32,
-      0x53, 0x11, 0x88, 0x7e, 0x71, 0x16, 0x2b, 0x29, 0x98, 0xfa, 0x4b, 0x68,
-      0x95, 0x05, 0xc1, 0x08, 0xa5, 0x0a, 0xa0, 0x15, 0x8c, 0xc9, 0xf2, 0x2a,
-      0x07, 0x89, 0x40, 0xe1, 0x18, 0x7c, 0xc1, 0x92, 0x56, 0x3a, 0xf2, 0x80,
-      0xd6, 0x11, 0x9e, 0x51, 0x55, 0xa5, 0x43, 0x43, 0x29, 0x23, 0x6a, 0x43,
-      0x20, 0x07, 0xa7, 0x7d, 0xf8, 0x6a, 0xc5, 0xc1, 0x70, 0xce, 0x39, 0x43,
-      0xd7, 0xc8, 0x6e, 0xea, 0x20, 0xcc, 0x28, 0xcc, 0x9e, 0xf4, 0x3b, 0xbc,
-      0xca, 0x43, 0x8e, 0x3d, 0xa4, 0x5a, 0xed, 0x51, 0x46, 0x55, 0xe6, 0x65,
-      0xf1, 0x0c, 0x91, 0xff, 0x7b, 0x06, 0x31, 0x6a, 0xa8, 0xe0, 0xf6, 0x95,
-      0x2f, 0x8a, 0x88, 0xbb, 0x39, 0x30, 0x27, 0x56, 0x53, 0x60, 0x32, 0x6d,
-      0x5b, 0x63, 0xaf, 0x79, 0xe4, 0x30, 0x6a, 0xa9, 0x9f, 0x45, 0x7c, 0xc1,
-      0x4e, 0xe5, 0x13, 0xcc, 0x9b, 0x38, 0x1a, 0x33, 0x2a, 0x3c, 0xb2, 0xbc,
-      0x2f, 0x5b, 0x8f, 0xb1, 0x10, 0x2e, 0x6b, 0x97, 0x4a, 0xb9, 0x81, 0x65,
-      0x5a, 0xd9, 0x2d, 0xa8, 0x89, 0x9c, 0xde, 0xd9, 0x0b, 0xab, 0x72, 0x40,
-      0x08, 0x3c, 0xa4, 0x26, 0x6b, 0xa4, 0x04, 0xb6, 0x17, 0x3a, 0xb7, 0x77,
-      0x2c, 0x88, 0xc8, 0x34, 0x26, 0x52, 0xc3, 0x4a, 0x36, 0x6c, 0x84, 0x68,
-      0x68, 0xf1, 0x06, 0x6e, 0x95, 0x39, 0xf3, 0x87, 0x2b, 0x88, 0xa3, 0xb3,
-      0xf4, 0x95, 0x4f, 0x75, 0xda, 0xb2, 0x0b, 0xd0, 0x5b, 0x4f, 0x4c, 0x66,
-      0x0f, 0xec, 0x9e, 0xd3, 0x97, 0x06, 0xc8, 0xb9, 0x44, 0xd9, 0x54, 0x51,
-      0x5f, 0x1c, 0xa2, 0x13, 0xfa, 0x83, 0x53, 0xac, 0xc1, 0x55, 0x53, 0x02,
-      0xb8, 0x14, 0x16, 0xbc, 0xc9, 0x4c, 0x76, 0x2c, 0x1a, 0xa1, 0x0a, 0x8d,
-      0x77, 0x7a, 0x0e, 0x66, 0x13, 0x53, 0xfe, 0x5c, 0x49, 0xd6, 0xb3, 0x5b,
-      0x78, 0xf6, 0x4d, 0x93, 0xf7, 0x59, 0xce, 0x0b, 0x99, 0xc2, 0xca, 0xbf,
-      0xf0, 0x57, 0xb0, 0xd1, 0x88, 0x34, 0x0e, 0x77, 0x95, 0x63, 0x05, 0x0d,
-      0xfa, 0x23, 0x24, 0x18, 0xc4, 0x70, 0xf6, 0x37, 0x4e, 0xac, 0xb4, 0x80,
-      0xad, 0xb2, 0xa6, 0x91, 0xb0, 0x85, 0x82, 0x39, 0x03, 0x46, 0xa2, 0x38,
-      0x0b, 0xf1, 0x6f, 0xfa, 0xc7, 0x07, 0x5a, 0xb5, 0x07, 0xea, 0xc7, 0x79,
-      0xd5, 0x93, 0x4a, 0x3c, 0x14, 0x7e, 0x08, 0x12, 0x2f, 0x05, 0xfa, 0x8f,
-      0xf2, 0xe3, 0x5c, 0x83, 0x40, 0x47, 0x4d, 0xaa, 0x95, 0xeb, 0x59, 0x49,
-      0xe2, 0x55, 0x52, 0x73, 0x3a, 0x28, 0xe4, 0x50, 0xa5, 0x9a, 0x00, 0xb7,
-      0xcd, 0x04, 0x68, 0xa4, 0x0c, 0x55, 0xd4, 0x79, 0x8d, 0xaa, 0x19, 0x43,
-      0xa8, 0xc8, 0xa0, 0x3f, 0x6b, 0x0b, 0x65, 0x0a, 0x43, 0x28, 0xe9, 0x2e,
-      0x26, 0x45, 0x9b, 0x8f, 0x47, 0x10, 0x09, 0xf1, 0x8f, 0x94, 0x6a, 0x7c,
-      0xd6, 0x7c, 0x0a, 0xf9, 0x36, 0x2d, 0x1f, 0x42, 0x45, 0xae, 0x8b, 0x8d,
-      0xb6, 0xe6, 0x2e, 0x02, 0xe1, 0x4d, 0x20, 0x30, 0x72, 0x36, 0xc9, 0x3c,
-      0xae, 0x25, 0x9a, 0x71, 0xd1, 0x04, 0x8d, 0x0c, 0x36, 0xd6, 0xe3, 0x6f,
-      0x35, 0xb6, 0x12, 0x78, 0x62, 0x49, 0x56, 0x3c, 0x39, 0x00, 0xa1, 0xcb,
-      0xc5, 0x5c, 0x10, 0x83, 0x39, 0x86, 0xaa, 0xd3, 0x66, 0xd1, 0x24, 0x61,
-      0xfc, 0x81, 0x89, 0x51, 0x40, 0x9c, 0xb6, 0xa0, 0x05, 0x9d, 0xa5, 0x03,
-      0x51, 0xc0, 0x20, 0xf8, 0x48, 0x60, 0x04, 0xe5, 0x5c, 0x81, 0xb4, 0x8d,
-      0x16, 0xf6, 0x67, 0x8e, 0xbc, 0x86, 0x1d, 0x1b, 0x85, 0x31, 0x70, 0x08,
-      0xaa, 0x5a, 0x32, 0x28, 0x66, 0x15, 0x8e, 0x32, 0x55, 0x0e, 0x41, 0x09,
-      0xed, 0x4a, 0xb2, 0xef, 0xac, 0x2b, 0xb1, 0xdb, 0x8f, 0xb3, 0x3a, 0x1d,
-      0x4a, 0x1c, 0x3d, 0x0f, 0x79, 0x80, 0x95, 0x06, 0x4d, 0xb8, 0xb4, 0x2f,
-      0x14, 0x06, 0x7a, 0xb1, 0xc9, 0x12, 0xb7, 0xf2, 0x81, 0x89, 0x66, 0x3f,
-      0x41, 0xb7, 0x32, 0xe8, 0x29, 0x87, 0x6f, 0x3b, 0xcb, 0x1e, 0x4c, 0x48,
-      0xbf, 0x70, 0x8f, 0xd2, 0xf6, 0x2e, 0x66, 0x34, 0x28, 0xdf, 0xe6, 0x0f,
-      0x48, 0xa2, 0xca, 0x6b, 0xcc, 0xa4, 0xe8, 0xb6, 0xa8, 0x93, 0x94, 0x3a,
-      0xd7, 0xb7, 0x33, 0xe1, 0x59, 0x13, 0xc7, 0xf5, 0xaa, 0x4e, 0xd7, 0x8b,
-      0xf8, 0x50, 0x34, 0x0c, 0x79, 0x5a, 0xb5, 0x06, 0x04, 0x43, 0x84, 0x67,
-      0x79, 0x50, 0xc2, 0x06, 0xa6, 0x9c, 0x7f, 0xc8, 0x87, 0xa1, 0x8a, 0x43,
-      0x8c, 0xa4, 0x19, 0x96, 0xe7, 0x54, 0xbf, 0x27, 0x59, 0x8f, 0xf4, 0x1c,
-      0xf5, 0xaa, 0xa9, 0x2c, 0x41, 0x52, 0x00, 0x8c, 0x05, 0x5c, 0x06, 0xb3,
-      0x5c, 0x1a, 0x6c, 0xbc, 0x5b, 0x83, 0xae, 0xbb, 0xc1, 0x4f, 0xe2, 0x66,
-      0xb9, 0xb8, 0xaf, 0x6a, 0x55, 0xc3, 0x7d, 0xf0, 0x66, 0xac, 0x37, 0x8a,
-      0xba, 0x91, 0x0c, 0xd7, 0x60, 0x5c, 0x17, 0x8c, 0x93, 0x6f, 0x87, 0x2d,
-      0x65, 0x8c, 0xb6, 0x1b, 0x3b, 0xb3, 0xe5, 0x49, 0x6f, 0xdc, 0xe9, 0x2a,
-      0xa4, 0xac, 0xbe, 0xc5, 0x53, 0x36, 0x9c, 0x58, 0xb9, 0x00, 0x72, 0x6c,
-      0x54, 0x88, 0x0b, 0xc9, 0x7c, 0x36, 0x61, 0xa6, 0x9e, 0x86, 0x46, 0x53,
-      0xcc, 0x07, 0x67, 0x60, 0xa2, 0x4f, 0xe9, 0x80, 0x5a, 0x54, 0xd7, 0x02,
-      0x6f, 0x08, 0x22, 0x43, 0xa2, 0x4f, 0x1f, 0x15, 0xcc, 0xf3, 0xc7, 0x24,
-      0x1e, 0xc1, 0xb9, 0x3d, 0x20, 0x35, 0x79, 0x31, 0x3b, 0xf8, 0x98, 0x2a,
-      0xb4, 0xa1, 0x45, 0xb7, 0x41, 0xc4, 0xf2, 0xe7, 0x45, 0x23, 0x7a, 0xbc,
-      0x8f, 0xa9, 0x46, 0x76, 0x92, 0xb2, 0x92, 0xb1, 0x20, 0xef, 0x93, 0x75,
-      0x15, 0x5a, 0x8b, 0xf9, 0xf7, 0x98, 0xb4, 0xe7, 0x48, 0x25, 0x2c, 0x91,
-      0x11, 0x89, 0x6f, 0x1b, 0xc4, 0x81, 0x00, 0x72, 0x8e, 0xa2, 0x14, 0xbd,
-      0x98, 0xd9, 0xb5, 0x27, 0x13, 0x32, 0xd6, 0x8b, 0x85, 0xe0, 0x95, 0xa6,
-      0x3e, 0x22, 0x13, 0x08, 0x54, 0x09, 0x3f, 0x90, 0x17, 0xd4, 0x61, 0x72,
-      0xfc, 0x23, 0x70, 0x8f, 0x19, 0x8b, 0xcf, 0x81, 0x0c, 0x5b, 0xa3, 0x58,
-      0xf0, 0x51, 0x74, 0x90, 0xf7, 0x00, 0x9c, 0xca, 0x8a, 0xc8, 0x94, 0x15,
-      0x9b, 0x42, 0xa1, 0x0f, 0xb1, 0xa2, 0x44, 0x90, 0x6e, 0xe6, 0x7c, 0x65,
-      0x00, 0x9d, 0xbd, 0x6f, 0x15, 0x4c, 0x13, 0x6a, 0xb0, 0x50, 0x9c, 0xca,
-      0xdf, 0x90, 0x16, 0x5c, 0x61, 0x09, 0x82, 0xd7, 0x4f, 0x52, 0xe4, 0x66,
-      0x3a, 0x87, 0x3f, 0x68, 0x71, 0xaa, 0xd4, 0xd1, 0xa5, 0x28, 0x23, 0x13,
-      0x9b, 0xd7, 0x6f, 0xb4, 0xd0, 0x16, 0x1e, 0xa5, 0x2a, 0x07, 0x62, 0x3b,
-      0x33, 0x67, 0x36, 0x4b, 0xb6, 0xcf, 0x04, 0x87, 0x11, 0xa9, 0x50, 0x45,
-      0x14, 0x53, 0x2e, 0xd7, 0x71, 0x53, 0x62, 0x11, 0xca, 0x5a, 0xa2, 0x5f,
-      0x76, 0x84, 0xc2, 0xd7, 0x06, 0x07, 0x44, 0xd3, 0x73, 0x04, 0xd0, 0x5c,
-      0x85, 0x68, 0x1f, 0xac, 0xf3, 0x94, 0xbf, 0x70, 0x43, 0x4e, 0x40, 0x7b,
-      0x0f, 0x43, 0x3d, 0x38, 0x21, 0x51, 0xb2, 0x0b, 0xc8, 0x8f, 0x09, 0x83,
-      0xf7, 0xa3, 0x45, 0x41, 0x41, 0x4f, 0x49, 0xd5, 0xa5, 0x3f, 0xe7, 0x27,
-      0xb8, 0xba, 0x69, 0x60, 0x91, 0x74, 0xcd, 0x90, 0xb4, 0x42, 0xc3, 0xb0,
-      0x2f, 0x31, 0xa9, 0xf0, 0x80, 0x0a, 0xe4, 0x01, 0x1d, 0xc2, 0xd0, 0x18,
-      0x08, 0xb7, 0xb1, 0x97, 0x85, 0x95, 0xa7, 0x31, 0x5b, 0xae, 0x07, 0x2e,
-      0xc4, 0xd6, 0x07, 0x14, 0x49, 0x2c, 0xbf, 0xa7, 0x67, 0x14, 0x69, 0x16,
-      0xcd, 0x8b, 0x30, 0x64, 0x17, 0xc0, 0x3b, 0x2b, 0x1c, 0x06, 0x3b, 0xb2,
-      0xad, 0x56, 0xc3, 0x5c, 0xab, 0x50, 0x63, 0xb9, 0xe7, 0xea, 0x56, 0x83,
-      0x14, 0xec, 0x81, 0xc4, 0x0b, 0xa5, 0x77, 0xaa, 0xe6, 0x30, 0xde, 0x90,
-      0x20, 0x04, 0x00, 0x9e, 0x88, 0xf1, 0x8d, 0xa5, 0x47, 0x57, 0xd4, 0x6b,
-      0x43, 0xa3, 0xa7, 0x05, 0xea, 0xa8, 0xa5, 0x55, 0xb4, 0xe5, 0x9f, 0xca,
-      0x04, 0xb7, 0x34, 0xb5, 0xe9, 0x3c, 0x33, 0xab, 0x54, 0xe5, 0xb2, 0x21,
-      0x94, 0x33, 0xc0, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    },
-
-    .exp = {
-      0x0c, 0x7e, 0x6c, 0x48, 0x16, 0x29, 0xad, 0xaa,
-      0x43, 0x58, 0x8b, 0x90, 0x01, 0x05, 0xb5, 0xe3,
-      0x93, 0xa3, 0xdb, 0xc3, 0xc9, 0x26, 0x58, 0x8f,
-      0x3e, 0x2a, 0xb3, 0x6a, 0x08, 0x06, 0x67, 0x66,
-    },
-  }};
-
-  for (size_t i = 0; i < sizeof(TESTS)/sizeof(TESTS[0]); i++) {
-    // decapsulate shared key from ciphertext `ct` using KEM768
-    // decapsulation key `dk`, then store result in buffer `got`.
-    uint8_t got[32] = { 0 };
-    fips203ipd_kem1024_decaps(got, TESTS[i].ct, TESTS[i].dk);
-
-    // check for expected value
-    if (memcmp(got, TESTS[i].exp, sizeof(got))) {
-      fail_test(__func__, TESTS[i].name, got, sizeof(got), TESTS[i].exp, sizeof(got));
-    }
-  }
-}
-
-static void test_fips203ipd_kem1024_roundtrip(void) {
-  uint8_t buf[96] = { 0 };
-
-  for (size_t i = 0; i < NUM_ROUNDTRIP_TIMES; i++) {
-    rand_bytes(buf, sizeof(buf));
-    const uint8_t * const keygen_seed = buf; // 64 bytes
-    const uint8_t * const encaps_seed = buf + 64; // 32 bytes
-
-    // generate encapsulation and decapsulation keys
-    uint8_t ek[FIPS203IPD_KEM1024_EK_SIZE] = { 0 };
-    uint8_t dk[FIPS203IPD_KEM1024_DK_SIZE] = { 0 };
-    fips203ipd_kem1024_keygen(ek, dk, keygen_seed);
-
-    // encapsulate, get key and ciphertext
-    uint8_t k0[32] = { 0 };
-    uint8_t ct[FIPS203IPD_KEM1024_CT_SIZE] = { 0 };
-    fips203ipd_kem1024_encaps(k0, ct, ek, encaps_seed);
-
-    // decapsulate key from ciphertext
-    uint8_t k1[32] = { 0 };
-    fips203ipd_kem1024_decaps(k1, ct, dk);
-
-    // verify that k0 == k1
-    compare_keys(__func__, k0, k1, keygen_seed, encaps_seed);
-  }
-}
-
-// generate check_pkeX_{keygen_encrypt}_sample_result() functions, which
-// use the given seed to generate the expected polynomials and then
-// checks the given polynomials against the expected polynomials
-#define DEF_CHECK_SAMPLE_FNS(ID, K, ETA1, ETA2) \
-  static void check_pke ## ID ## _keygen_sample_result(const char *func, const size_t t, const uint8_t seed[static 64], const poly_t got[static K*(K+2)]) { \
-    /* populate expected polynomials */ \
-    poly_t exp[K*(K+2)] = { 0 }; \
-    { \
-      /* populate expected Ahat elements */ \
-      for (size_t i = 0; i < K; i++) { \
-        for (size_t j = 0; j < K; j++) { \
-          poly_sample_ntt(exp + (K * i + j), seed, j, i); \
-        } \
-      } \
-      \
-      /* populate expected s and e elements */ \
-      for (size_t i = 0; i < 2 * K; i++) { \
-        poly_sample_cbd ## ETA1 (exp + (K * K) + i, seed + 32, i); \
-      } \
-    } \
-    \
-    /* check for expected value */ \
-    for (size_t i = 0; i < K*(K + 2); i++) { \
-      if (memcmp(got + i, exp + i, sizeof(poly_t))) { \
-        /* build test name */ \
-        char name[32] = { 0 }; \
-        snprintf(name, sizeof(name), "test %zu, poly %zu", t, i); \
-    \
-        /* fail test */ \
-        fail_poly_test(func, name, got + i, exp + i); \
-      } \
-    } \
-  } \
-  \
-  static void check_pke ## ID ## _encrypt_sample_result(const char *func, const size_t t, const uint8_t seed[static 64], const poly_t got[static K*(K+2)+1]) { \
-    /* populate expected polynomials */ \
-    poly_t exp[K*(K+2)+1] = { 0 }; \
-    { \
-      /* populate expected Ahat elements */ \
-      for (size_t i = 0; i < K; i++) { \
-        for (size_t j = 0; j < K; j++) { \
-          poly_sample_ntt(exp + (K * i + j), seed, i, j); \
-        } \
-      } \
-      \
-      /* populate expected r elements */ \
-      for (size_t i = 0; i < K; i++) { \
-        poly_sample_cbd ## ETA1 (exp + (K * K) + i, seed + 32, i); \
-      } \
-      \
-      /* populate expected e1 elements */ \
-      for (size_t i = 0; i < K; i++) { \
-        poly_sample_cbd ## ETA2 (exp + (K*K + 1*K) + i, seed + 32, K + i); \
-      } \
-      \
-      /* populate expected e2 */ \
-      poly_sample_cbd ## ETA2 (exp + (K*K + 2*K), seed + 32, 2*K); \
-    } \
-    \
-    /* check for expected value */ \
-    for (size_t i = 0; i < K*(K + 2) + 1; i++) { \
-      if (memcmp(got + i, exp + i, sizeof(poly_t))) { \
-        /* build test name */ \
-        char name[32] = { 0 }; \
-        snprintf(name, sizeof(name), "test %zu, poly %zu", t, i); \
-    \
-        /* fail test */ \
-        fail_poly_test(func, name, got + i, exp + i); \
-      } \
-    } \
-  }
-
-DEF_CHECK_SAMPLE_FNS(512, 2, 3, 2)
-DEF_CHECK_SAMPLE_FNS(768, 3, 2, 2)
-DEF_CHECK_SAMPLE_FNS(1024, 4, 2, 2)
-
-static const struct {
-  const uint8_t seed[64];
-} SAMPLE_TESTS[] = {
-  { .seed = { 0 } },
-  { .seed = { 1, 2, 3, 4, 5 } },
-  { .seed = {
-      0x54, 0x0b, 0xd9, 0xb2, 0x1c, 0xd3, 0x37, 0xd5, 0xc6, 0x33, 0x22, 0x39, 0x03, 0x54, 0xe2, 0xfb,
-      0x81, 0x3a, 0x36, 0xaa, 0xce, 0xcf, 0x3c, 0x57, 0xbf, 0xb2, 0x3a, 0x9b, 0x7b, 0x64, 0x14, 0xce,
-      0xec, 0xf5, 0x93, 0xcd, 0x5f, 0x76, 0x3f, 0x45, 0xef, 0xad, 0xf7, 0x73, 0xab, 0x5a, 0x65, 0x50,
-      0xce, 0xed, 0x15, 0xf8, 0xb7, 0x36, 0x6e, 0x29, 0x6b, 0x4d, 0xcc, 0xbf, 0xde, 0xf0, 0x82, 0x7f,
-  } },
-  { .seed = {
-    0x40, 0xe8, 0x0d, 0x72, 0xe1, 0x22, 0x15, 0x00, 0x70, 0x3b, 0x00, 0x91, 0xd9, 0xbb, 0x99, 0xeb,
-    0xda, 0x1a, 0x80, 0x9b, 0x77, 0xf5, 0x5d, 0xf3, 0x06, 0xe0, 0x77, 0x35, 0xd9, 0x07, 0x24, 0x78,
-    0xc3, 0x82, 0x94, 0x08, 0x9c, 0x8b, 0x50, 0x27, 0xe7, 0x08, 0x72, 0xf4, 0x02, 0x98, 0xc1, 0x24,
-    0x41, 0x03, 0xf2, 0x1f, 0x89, 0xd9, 0x99, 0x2f, 0x1e, 0x13, 0x91, 0xd1, 0x35, 0x15, 0xea, 0xb9,
-  } },
-};
-
-static void test_pke512_keygen_sample_scalar(void) {
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements in parallel
-    poly_t got[8] = { 0 };
-    pke512_keygen_sample_scalar(got, seed);
-
-    // check for expected value
-    check_pke512_keygen_sample_result(__func__, t, seed, got);
-  }
-}
-
-static void test_pke512_keygen_sample_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements in parallel
-    poly_t got[8] = { 0 };
-    pke512_keygen_sample_avx512(got, seed);
-
-    // check for expected value
-    check_pke512_keygen_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke512_keygen_sample_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements in parallel
-    poly_t got[8] = { 0 };
-    pke512_keygen_sample_neon(got, seed);
-
-    // check for expected value
-    check_pke512_keygen_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke512_encrypt_sample_scalar(void) {
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements in parallel
-    poly_t got[9] = { 0 };
-    pke512_encrypt_sample_scalar(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke512_encrypt_sample_result(__func__, t, seed, got);
-  }
-}
-
-static void test_pke512_encrypt_sample_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[9] = { 0 };
-    pke512_encrypt_sample_avx512(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke512_encrypt_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke512_encrypt_sample_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[9] = { 0 };
-    pke512_encrypt_sample_neon(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke512_encrypt_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static void test_pke768_keygen_sample_scalar(void) {
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements
-    poly_t got[15] = { 0 };
-    pke768_keygen_sample_scalar(got, seed);
-
-    // check for expected value
-    check_pke768_keygen_sample_result(__func__, t, seed, got);
-  }
-}
-
-static void test_pke768_keygen_sample_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements
-    poly_t got[15] = { 0 };
-    pke768_keygen_sample_avx512(got, seed);
-
-    // check for expected value
-    check_pke768_keygen_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke768_keygen_sample_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements
-    poly_t got[15] = { 0 };
-    pke768_keygen_sample_neon(got, seed);
-
-    // check for expected value
-    check_pke768_keygen_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static void test_pke768_encrypt_sample_scalar(void) {
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[16] = { 0 };
-    pke768_encrypt_sample_scalar(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke768_encrypt_sample_result(__func__, t, seed, got);
-  }
-}
-
-static void test_pke768_encrypt_sample_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[16] = { 0 };
-    pke768_encrypt_sample_avx512(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke768_encrypt_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke768_encrypt_sample_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[16] = { 0 };
-    pke768_encrypt_sample_neon(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke768_encrypt_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_NEON */
-}
-
-static void test_pke1024_keygen_sample_scalar(void) {
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements
-    poly_t got[24] = { 0 };
-    pke1024_keygen_sample_scalar(got, seed);
-
-    // check for expected value
-    check_pke1024_keygen_sample_result(__func__, t, seed, got);
-  }
-}
-
-static void test_pke1024_keygen_sample_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements
-    poly_t got[24] = { 0 };
-    pke1024_keygen_sample_avx512(got, seed);
-
-    // check for expected value
-    check_pke1024_keygen_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke1024_keygen_sample_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, s, and e elements
-    poly_t got[24] = { 0 };
-    pke1024_keygen_sample_neon(got, seed);
-
-    // check for expected value
-    check_pke1024_keygen_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke1024_encrypt_sample_scalar(void) {
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[25] = { 0 };
-    pke1024_encrypt_sample_scalar(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke1024_encrypt_sample_result(__func__, t, seed, got);
-  }
-}
-
-static void test_pke1024_encrypt_sample_avx512(void) {
-#if BACKEND == BACKEND_AVX512
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[25] = { 0 };
-    pke1024_encrypt_sample_avx512(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke1024_encrypt_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-static void test_pke1024_encrypt_sample_neon(void) {
-#if BACKEND == BACKEND_NEON
-  for (size_t t = 0; t < sizeof(SAMPLE_TESTS)/sizeof(SAMPLE_TESTS[0]); t++) {
-    // get seed
-    const uint8_t * const seed = SAMPLE_TESTS[t].seed;
-
-    // generate A, r, e1, and e2 elements
-    poly_t got[25] = { 0 };
-    pke1024_encrypt_sample_neon(got, seed, seed + 32);
-
-    // check for expected value
-    check_pke1024_encrypt_sample_result(__func__, t, seed, got);
-  }
-#endif /* BACKEND == BACKEND_AVX512 */
-}
-
-int main(void) {
-  // note: sha3 and shake tests copied from sha3.c.  a much more
-  // extensive set of tests from CAVP is available there.
-  test_sha3_256();
-  test_sha3_512();
-  test_shake128_ctx();
-  test_shake256();
-
-  test_poly_ntt_scalar_roundtrip();
-  test_poly_ntt_avx512_roundtrip();
-  test_poly_ntt_neon_roundtrip();
-  test_poly_sample_ntt();
-  test_poly_add_scalar();
-  test_poly_add_avx512();
-  test_poly_add_neon();
-  test_poly_add2_scalar();
-  test_poly_add2_avx512();
-  test_poly_add2_neon();
-  test_poly_sub_scalar();
-  test_poly_sub_avx512();
-  test_poly_sub_neon();
-  test_poly_mul_scalar();
-  test_poly_mul_avx512();
-  test_poly_mul_neon();
-  test_prf();
-  test_poly_sample_cbd3();
-  test_poly_sample_cbd2();
-  test_poly_encode_scalar();
-  test_poly_encode_avx512();
-  test_poly_encode_neon();
-  test_poly_encode_11bit_scalar();
-  test_poly_encode_11bit_avx512();
-  test_poly_encode_11bit_neon();
-  test_poly_encode_10bit_scalar();
-  test_poly_encode_10bit_avx512();
-  test_poly_encode_10bit_neon();
-  test_poly_encode_5bit_scalar();
-  test_poly_encode_5bit_avx512();
-  test_poly_encode_5bit_neon();
-  test_poly_encode_4bit_scalar();
-  test_poly_encode_4bit_avx512();
-  test_poly_encode_4bit_neon();
-  test_poly_encode_1bit_scalar();
-  test_poly_encode_1bit_avx512();
-  test_poly_encode_1bit_neon();
-  test_poly_decode_11bit_scalar();
-  test_poly_decode_11bit_avx512();
-  test_poly_decode_11bit_neon();
-  test_poly_decode_10bit_scalar();
-  test_poly_decode_10bit_avx512();
-  test_poly_decode_10bit_neon();
-  test_poly_decode_5bit_scalar();
-  test_poly_decode_5bit_avx512();
-  test_poly_decode_5bit_neon();
-  test_poly_decode_4bit_scalar();
-  test_poly_decode_4bit_avx512();
-  test_poly_decode_4bit_neon();
-  test_poly_decode_1bit_scalar();
-  test_poly_decode_1bit_avx512();
-  test_poly_decode_1bit_neon();
-  test_mat2_mul();
-  test_vec2_add();
-  test_vec2_dot();
-  test_vec2_ntt();
-  test_vec2_encode();
-  test_vec2_decode();
-  test_vec2_encode_10bit();
-  test_vec2_decode_10bit();
-  test_pke512_keygen();
-  test_pke512_encrypt();
-  test_pke512_decrypt();
-  test_fips203ipd_kem512_keygen();
-  test_fips203ipd_kem512_encaps();
-  test_fips203ipd_kem512_decaps();
-  test_fips203ipd_kem512_roundtrip();
-  test_mat3_mul();
-  test_vec3_add();
-  test_vec3_dot();
-  test_vec3_ntt();
-  test_vec3_encode();
-  test_vec3_decode();
-  test_vec3_encode_10bit();
-  test_vec3_decode_10bit();
-  test_pke768_keygen();
-  test_pke768_encrypt();
-  test_pke768_decrypt();
-  test_fips203ipd_kem768_keygen();
-  test_fips203ipd_kem768_encaps();
-  test_fips203ipd_kem768_decaps();
-  test_fips203ipd_kem768_roundtrip();
-  test_mat4_mul();
-  test_vec4_add();
-  test_vec4_dot();
-  test_vec4_ntt();
-  test_vec4_encode();
-  test_vec4_decode();
-  test_vec4_encode_11bit();
-  test_vec4_decode_11bit();
-  test_pke1024_keygen();
-  test_pke1024_encrypt();
-  test_pke1024_decrypt();
-  test_fips203ipd_kem1024_keygen();
-  test_fips203ipd_kem1024_encaps();
-  test_fips203ipd_kem1024_decaps();
-  test_fips203ipd_kem1024_roundtrip();
-  test_pke512_keygen_sample_scalar();
-  test_pke512_keygen_sample_avx512();
-  test_pke512_keygen_sample_neon();
-  test_pke512_encrypt_sample_scalar();
-  test_pke512_encrypt_sample_avx512();
-  test_pke512_encrypt_sample_neon();
-  test_pke768_keygen_sample_scalar();
-  test_pke768_keygen_sample_avx512();
-  test_pke768_keygen_sample_neon();
-  test_pke768_encrypt_sample_scalar();
-  test_pke768_encrypt_sample_avx512();
-  test_pke768_encrypt_sample_neon();
-  test_pke1024_keygen_sample_scalar();
-  test_pke1024_keygen_sample_avx512();
-  test_pke1024_keygen_sample_neon();
-  test_pke1024_encrypt_sample_scalar();
-  test_pke1024_encrypt_sample_avx512();
-  test_pke1024_encrypt_sample_neon();
-}
-#endif // TEST_FIPS203IPD
-
-/** @endcond INTERNAL */
diff --git a/library/fips203ipd.h b/library/fips203ipd.h
deleted file mode 100644
index 10ecba782b2b..000000000000
--- a/library/fips203ipd.h
+++ /dev/null
@@ -1,397 +0,0 @@
-/**
- * @file fips203ipd.h
- * @author Paul Duncan
- * @copyright 2023-2024 Paul Duncan
- * @brief C11 implementation of ML-KEM from the FIPS 203 initial public draft.
- *
- * fips203ipd
- * https://pablotron.org/fips203ipd
- *
- * Copyright (c) 2023-2024 Paul Duncan
- * SPDX-License-Identifier: MIT-0
- *
- * C11 implementation of ML-KEM from the FIPS 203 initial public draft.
- */
-#ifndef FIPS203IPD_H
-#define FIPS203IPD_H
-
-#include <stdint.h> // uint8_t
-
-/**
- * @defgroup sizes Sizes
- * @brief Seed and key sizes.
- */
-
-/**
- * @brief Size of random seed value for `keygen()`, in bytes.
- * @ingroup sizes
- *
- * @warning **Must** be 64 random bytes generated by a [cryptographically
- * secure pseudorandom number generator (CSPRNG)][csprng]. Specifically,
- * section 3.3 of the [FIPS 203 initial public draft][fips203ipd]
- * requires that source is an **approved** random bit generator (RBG).
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-#define FIPS203IPD_KEYGEN_SEED_SIZE 64
-
-/**
- * @brief Size of random seed value for `encaps()`, in bytes.
- * @ingroup sizes
- *
- * @warning **Must** be 64 random bytes generated by a [cryptographically
- * secure pseudorandom number generator (CSPRNG)][csprng]. Specifically,
- * section 3.3 of the [FIPS 203 initial public draft][fips203ipd]
- * requires that source is an **approved** random bit generator (RBG).
- *
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-#define FIPS203IPD_ENCAPS_SEED_SIZE 32
-
-/**
- * @brief Size of shared secret key returned by `encaps()` and `decaps()`, in bytes.
- * @ingroup sizes
- */
-#define FIPS203IPD_KEY_SIZE 32
-
-/**
- * @defgroup kem512 KEM512
- * @brief KEM512 constants and functions.
- */
-
-/**
- * @brief Size of KEM512 encapsulation key, in bytes (384 * K + 32).
- * @ingroup kem512
- */
-#define FIPS203IPD_KEM512_EK_SIZE 800
-
-/**
- * @brief Size of KEM512 decapsulation key, in bytes (768 * K + 96).
- * @ingroup kem512
- */
-#define FIPS203IPD_KEM512_DK_SIZE 1632
-
-/**
- * @brief Size of KEM512 ciphertext, in bytes (32 * (DU * K + DV)).
- * @ingroup kem512
- */
-#define FIPS203IPD_KEM512_CT_SIZE 768
-
-/**
- * @brief Generate KEM512 encapsulation key `ek` and decapsulation key
- * `dk` from 64 byte random seed `seed`.
- * @ingroup kem512
- *
- * @warning `seed` **must** be 64 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 128 bits of strength.
- *
- * @param[out] ek KEM512 encapsulation key (800 bytes).
- * @param[out] dk KEM512 decapsulation key (1632 bytes).
- * @param[in] seed Random seed (64 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem512-keygen
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem512_keygen(uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]);
-
-/**
- * @brief Generate KEM512 shared key `key` and ciphertext `ct` from given
- * encapsulation key `ek` and randomness `seed`.
- * @ingroup kem512
- *
- * @warning `seed` **must** be 32 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 128 bits of strength.
- *
- * @note Encapsulation key polynomial coefficients are reduced modulo Q
- * during deserialization, as per [option #2 in this `pqc-forum`
- * discussion][poly-decode].
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (768 bytes).
- * @param[in] ek KEM512 encapsulation key (800 bytes).
- * @param[in] seed Random seed (32 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem512-encaps
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- * [poly-decode]: https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
- */
-void fips203ipd_kem512_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM512_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]);
-
-/**
- * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM512
- * decapsulation key `dk` with implicit rejection.
- * @ingroup kem512
- *
- * @note Implicit rejection means that when this function is given an
- * invalid ciphertext, it will return a key which is unpredictable to
- * the attacker rather than an error.  This is intended to provide
- * [IND-CCA2][] security, as discussed in section 3.2 of the [FIPS 203
- * initial public draft][fips203ipd].
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (768 bytes).
- * @param[in] dk KEM512 decapsulation key (1632 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem512-decaps
- *
- * [IND-CCA2]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability#IND-CCA2
- *   "indistinguishable under adaptive chosen ciphertext attack (IND-CCA2)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem512_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM512_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM512_DK_SIZE]);
-
-/**
- * @defgroup kem768 KEM768
- * @brief KEM768 constants and functions.
- */
-
-/**
- * @brief Size of KEM768 encapsulation key, in bytes (384 * K + 32).
- * @ingroup kem768
- */
-#define FIPS203IPD_KEM768_EK_SIZE 1184
-
-/**
- * @brief Size of KEM768 decapsulation key, in bytes (768 * K + 96).
- * @ingroup kem768
- */
-#define FIPS203IPD_KEM768_DK_SIZE 2400
-
-/**
- * @brief Size of KEM768 ciphertext, in bytes (32 * (DU * K + DV)).
- * @ingroup kem768
- */
-#define FIPS203IPD_KEM768_CT_SIZE 1088
-
-/**
- * @brief Generate KEM768 encapsulation key `ek` and decapsulation key
- * `dk` from 64 byte random seed `seed`.
- * @ingroup kem768
- *
- * @warning `seed` **must** be 64 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 192 bits of strength.
- *
- * @param[out] ek KEM768 encapsulation key (1184 bytes).
- * @param[out] dk KEM768 decapsulation key (2400 bytes).
- * @param[in] seed Random seed (64 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem768-keygen
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem768_keygen(uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]);
-
-/**
- * @brief Generate KEM768 shared key `key` and ciphertext `ct` from given
- * encapsulation key `ek` and randomness `seed`.
- * @ingroup kem768
- *
- * @warning `seed` **must** be 32 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 192 bits of strength.
- *
- * @note Encapsulation key polynomial coefficients are reduced modulo Q
- * during deserialization, as per [option #2 in this `pqc-forum`
- * discussion][poly-decode].
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1088 bytes).
- * @param[in] ek KEM768 encapsulation key (1184 bytes).
- * @param[in] seed Random seed (32 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem768-encaps
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- * [poly-decode]: https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
- */
-void fips203ipd_kem768_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM768_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]);
-
-/**
- * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM768
- * decapsulation key `dk` with implicit rejection.
- * @ingroup kem768
- *
- * @note Implicit rejection means that when this function is given an
- * invalid ciphertext, it will return a key which is unpredictable to
- * the attacker rather than an error.  This is intended to provide
- * [IND-CCA2][] security, as discussed in section 3.2 of the [FIPS 203
- * initial public draft][fips203ipd].
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1088 bytes).
- * @param[in] dk KEM768 decapsulation key (2400 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem768-decaps
- *
- * [IND-CCA2]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability#IND-CCA2
- *   "indistinguishable under adaptive chosen ciphertext attack (IND-CCA2)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem768_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM768_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM768_DK_SIZE]);
-
-/**
- * @defgroup kem1024 KEM1024
- * @brief KEM1024 constants and functions.
- */
-
-/**
- * @brief Size of KEM1024 encapsulation key, in bytes (384 * K + 32).
- * @ingroup kem1024
- */
-#define FIPS203IPD_KEM1024_EK_SIZE 1568
-
-/**
- * @brief Size of KEM1024 decapsulation key, in bytes (768 * K + 96).
- * @ingroup kem1024
- */
-#define FIPS203IPD_KEM1024_DK_SIZE 3168
-
-/**
- * @brief Size of KEM1024 ciphertext, in bytes (32 * (DU * K + DV)).
- * @ingroup kem1024
- */
-#define FIPS203IPD_KEM1024_CT_SIZE 1568
-
-/**
- * @brief Generate KEM1024 encapsulation key `ek` and decapsulation key
- * `dk` from 64 byte random seed `seed`.
- * @ingroup kem1024
- *
- * @warning `seed` **must** be 64 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 256 bits of strength.
- *
- * @param[out] ek KEM1024 encapsulation key (1568 bytes).
- * @param[out] dk KEM1024 decapsulation key (3168 bytes).
- * @param[in] seed Random seed (64 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem1024-keygen
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem1024_keygen(uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE], const uint8_t seed[static FIPS203IPD_KEYGEN_SEED_SIZE]);
-
-/**
- * @brief Generate KEM1024 shared key `key` and ciphertext `ct` from given
- * encapsulation key `ek` and randomness `seed`.
- * @ingroup kem1024
- *
- * @warning `seed` **must** be 32 random bytes generated by a
- * [cryptographically secure pseudorandom number generator
- * (CSPRNG)][csprng].   Specifically, section 3.3 of the [FIPS 203
- * initial public draft][fips203ipd] requires an **approved** random bit
- * generator (RBG) with at least 256 bits of strength.
- *
- * @note Encapsulation key polynomial coefficients are reduced modulo Q
- * during deserialization, as per [option #2 in this `pqc-forum`
- * discussion][poly-decode].
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1568 bytes).
- * @param[in] ek KEM1024 encapsulation key (1568 bytes).
- * @param[in] seed Random seed (32 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem1024-encaps
- *
- * [csprng]: https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator
- *   "Cryptographically Secure Pseudorandom Number Generator (CSPRNG)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- * [poly-decode]: https://groups.google.com/a/list.nist.gov/d/msgid/pqc-forum/ZRQvPT7kQ51NIRyJ%40disp3269
- */
-void fips203ipd_kem1024_encaps(uint8_t key[static FIPS203IPD_KEY_SIZE], uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t ek[static FIPS203IPD_KEM1024_EK_SIZE], const uint8_t seed[static FIPS203IPD_ENCAPS_SEED_SIZE]);
-
-/**
- * @brief Decapsulate shared key `key` from ciphertext `ct` using KEM1024
- * decapsulation key `dk` with implicit rejection.
- * @ingroup kem1024
- *
- * @note Implicit rejection means that when this function is given an
- * invalid ciphertext, it will return a key which is unpredictable to
- * the attacker rather than an error.  This is intended to provide
- * [IND-CCA2][] security, as discussed in section 3.2 of the [FIPS 203
- * initial public draft][fips203ipd].
- *
- * @param[out] key Shared key (32 bytes).
- * @param[out] ct Ciphertext (1568 bytes).
- * @param[in] dk KEM1024 decapsulation key (3168 bytes).
- *
- * Example:
- * @snippet{trimleft} 1-all-three/all-three.c kem1024-decaps
- *
- * [IND-CCA2]: https://en.wikipedia.org/wiki/Ciphertext_indistinguishability#IND-CCA2
- *   "indistinguishable under adaptive chosen ciphertext attack (IND-CCA2)"
- * [fips203ipd]: https://csrc.nist.gov/pubs/fips/203/ipd
- *   "FIPS 203 (Initial Public Draft): Module-Lattice-Based Key-Encapsulation Mechanism Standard"
- */
-void fips203ipd_kem1024_decaps(uint8_t key[static FIPS203IPD_KEY_SIZE], const uint8_t ct[static FIPS203IPD_KEM1024_CT_SIZE], const uint8_t dk[static FIPS203IPD_KEM1024_DK_SIZE]);
-
-/**
- * @defgroup misc Miscellaneous
- * @brief Miscellaneous functions.
- */
-
-/**
- * @brief Get name of backend.
- * @ingroup misc
- *
- * @note Returns a read-only string which must not be freed by the
- * caller.
- */
-const char *fips203ipd_backend(void);
-
-struct X25519Kyber768_ctx
-{
-	uint8_t fips203ipd_ss[32];
-	uint8_t fips203ipd_ek[FIPS203IPD_KEM768_EK_SIZE]; // encapsulation key
-	uint8_t fips203ipd_dk[FIPS203IPD_KEM768_DK_SIZE]; // decapsulation key
-};
-
-#endif /* FIPS203IPD_H */
diff --git a/library/indcpa.c b/library/indcpa.c
new file mode 100644
index 000000000000..3b03a70d2fa4
--- /dev/null
+++ b/library/indcpa.c
@@ -0,0 +1,327 @@
+#include "indcpa.h"
+#include "ntt.h"
+#include "params.h"
+#include "poly.h"
+#include "polyvec.h"
+#include "randombytes.h"
+#include "symmetric.h"
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+
+/*************************************************
+* Name:        pack_pk
+*
+* Description: Serialize the public key as concatenation of the
+*              serialized vector of polynomials pk
+*              and the public seed used to generate the matrix A.
+*
+* Arguments:   uint8_t *r: pointer to the output serialized public key
+*              polyvec *pk: pointer to the input public-key polyvec
+*              const uint8_t *seed: pointer to the input public seed
+**************************************************/
+static void pack_pk(uint8_t r[KYBER_INDCPA_PUBLICKEYBYTES],
+                    polyvec *pk,
+                    const uint8_t seed[KYBER_SYMBYTES]) {
+    PQCLEAN_MLKEM768_CLEAN_polyvec_tobytes(r, pk);
+    memcpy(r + KYBER_POLYVECBYTES, seed, KYBER_SYMBYTES);
+}
+
+/*************************************************
+* Name:        unpack_pk
+*
+* Description: De-serialize public key from a byte array;
+*              approximate inverse of pack_pk
+*
+* Arguments:   - polyvec *pk: pointer to output public-key polynomial vector
+*              - uint8_t *seed: pointer to output seed to generate matrix A
+*              - const uint8_t *packedpk: pointer to input serialized public key
+**************************************************/
+static void unpack_pk(polyvec *pk,
+                      uint8_t seed[KYBER_SYMBYTES],
+                      const uint8_t packedpk[KYBER_INDCPA_PUBLICKEYBYTES]) {
+    PQCLEAN_MLKEM768_CLEAN_polyvec_frombytes(pk, packedpk);
+    memcpy(seed, packedpk + KYBER_POLYVECBYTES, KYBER_SYMBYTES);
+}
+
+/*************************************************
+* Name:        pack_sk
+*
+* Description: Serialize the secret key
+*
+* Arguments:   - uint8_t *r: pointer to output serialized secret key
+*              - polyvec *sk: pointer to input vector of polynomials (secret key)
+**************************************************/
+static void pack_sk(uint8_t r[KYBER_INDCPA_SECRETKEYBYTES], polyvec *sk) {
+    PQCLEAN_MLKEM768_CLEAN_polyvec_tobytes(r, sk);
+}
+
+/*************************************************
+* Name:        unpack_sk
+*
+* Description: De-serialize the secret key; inverse of pack_sk
+*
+* Arguments:   - polyvec *sk: pointer to output vector of polynomials (secret key)
+*              - const uint8_t *packedsk: pointer to input serialized secret key
+**************************************************/
+static void unpack_sk(polyvec *sk, const uint8_t packedsk[KYBER_INDCPA_SECRETKEYBYTES]) {
+    PQCLEAN_MLKEM768_CLEAN_polyvec_frombytes(sk, packedsk);
+}
+
+/*************************************************
+* Name:        pack_ciphertext
+*
+* Description: Serialize the ciphertext as concatenation of the
+*              compressed and serialized vector of polynomials b
+*              and the compressed and serialized polynomial v
+*
+* Arguments:   uint8_t *r: pointer to the output serialized ciphertext
+*              poly *pk: pointer to the input vector of polynomials b
+*              poly *v: pointer to the input polynomial v
+**************************************************/
+static void pack_ciphertext(uint8_t r[KYBER_INDCPA_BYTES], polyvec *b, poly *v) {
+    PQCLEAN_MLKEM768_CLEAN_polyvec_compress(r, b);
+    PQCLEAN_MLKEM768_CLEAN_poly_compress(r + KYBER_POLYVECCOMPRESSEDBYTES, v);
+}
+
+/*************************************************
+* Name:        unpack_ciphertext
+*
+* Description: De-serialize and decompress ciphertext from a byte array;
+*              approximate inverse of pack_ciphertext
+*
+* Arguments:   - polyvec *b: pointer to the output vector of polynomials b
+*              - poly *v: pointer to the output polynomial v
+*              - const uint8_t *c: pointer to the input serialized ciphertext
+**************************************************/
+static void unpack_ciphertext(polyvec *b, poly *v, const uint8_t c[KYBER_INDCPA_BYTES]) {
+    PQCLEAN_MLKEM768_CLEAN_polyvec_decompress(b, c);
+    PQCLEAN_MLKEM768_CLEAN_poly_decompress(v, c + KYBER_POLYVECCOMPRESSEDBYTES);
+}
+
+/*************************************************
+* Name:        rej_uniform
+*
+* Description: Run rejection sampling on uniform random bytes to generate
+*              uniform random integers mod q
+*
+* Arguments:   - int16_t *r: pointer to output buffer
+*              - unsigned int len: requested number of 16-bit integers (uniform mod q)
+*              - const uint8_t *buf: pointer to input buffer (assumed to be uniformly random bytes)
+*              - unsigned int buflen: length of input buffer in bytes
+*
+* Returns number of sampled 16-bit integers (at most len)
+**************************************************/
+static unsigned int rej_uniform(int16_t *r,
+                                unsigned int len,
+                                const uint8_t *buf,
+                                unsigned int buflen) {
+    unsigned int ctr, pos;
+    uint16_t val0, val1;
+
+    ctr = pos = 0;
+    while (ctr < len && pos + 3 <= buflen) {
+        val0 = ((buf[pos + 0] >> 0) | ((uint16_t)buf[pos + 1] << 8)) & 0xFFF;
+        val1 = ((buf[pos + 1] >> 4) | ((uint16_t)buf[pos + 2] << 4)) & 0xFFF;
+        pos += 3;
+
+        if (val0 < KYBER_Q) {
+            r[ctr++] = val0;
+        }
+        if (ctr < len && val1 < KYBER_Q) {
+            r[ctr++] = val1;
+        }
+    }
+
+    return ctr;
+}
+
+#define gen_a(A,B)  PQCLEAN_MLKEM768_CLEAN_gen_matrix(A,B,0)
+#define gen_at(A,B) PQCLEAN_MLKEM768_CLEAN_gen_matrix(A,B,1)
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_gen_matrix
+*
+* Description: Deterministically generate matrix A (or the transpose of A)
+*              from a seed. Entries of the matrix are polynomials that look
+*              uniformly random. Performs rejection sampling on output of
+*              a XOF
+*
+* Arguments:   - polyvec *a: pointer to ouptput matrix A
+*              - const uint8_t *seed: pointer to input seed
+*              - int transposed: boolean deciding whether A or A^T is generated
+**************************************************/
+
+#define GEN_MATRIX_NBLOCKS ((12*KYBER_N/8*(1 << 12)/KYBER_Q + XOF_BLOCKBYTES)/XOF_BLOCKBYTES)
+// Not static for benchmarking
+void PQCLEAN_MLKEM768_CLEAN_gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed) {
+    unsigned int ctr, i, j;
+    unsigned int buflen;
+    uint8_t buf[GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES];
+    xof_state state;
+
+    for (i = 0; i < KYBER_K; i++) {
+        for (j = 0; j < KYBER_K; j++) {
+            if (transposed) {
+                xof_absorb(&state, seed, (uint8_t)i, (uint8_t)j);
+            } else {
+                xof_absorb(&state, seed, (uint8_t)j, (uint8_t)i);
+            }
+
+            xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
+            buflen = GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES;
+            ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
+
+            while (ctr < KYBER_N) {
+                xof_squeezeblocks(buf, 1, &state);
+                buflen = XOF_BLOCKBYTES;
+                ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
+            }
+            xof_ctx_release(&state);
+        }
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_indcpa_keypair_derand
+*
+* Description: Generates public and private key for the CPA-secure
+*              public-key encryption scheme underlying Kyber
+*
+* Arguments:   - uint8_t *pk: pointer to output public key
+*                             (of length KYBER_INDCPA_PUBLICKEYBYTES bytes)
+*              - uint8_t *sk: pointer to output private key
+*                             (of length KYBER_INDCPA_SECRETKEYBYTES bytes)
+*              - const uint8_t *coins: pointer to input randomness
+*                             (of length KYBER_SYMBYTES bytes)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_indcpa_keypair_derand(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
+        uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES],
+        const uint8_t coins[KYBER_SYMBYTES]) {
+    unsigned int i;
+    uint8_t buf[2 * KYBER_SYMBYTES];
+    const uint8_t *publicseed = buf;
+    const uint8_t *noiseseed = buf + KYBER_SYMBYTES;
+    uint8_t nonce = 0;
+    polyvec a[KYBER_K], e, pkpv, skpv;
+
+    memcpy(buf, coins, KYBER_SYMBYTES);
+    buf[KYBER_SYMBYTES] = KYBER_K;
+    hash_g(buf, buf, KYBER_SYMBYTES + 1);
+
+    gen_a(a, publicseed);
+
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
+    }
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
+    }
+
+    PQCLEAN_MLKEM768_CLEAN_polyvec_ntt(&skpv);
+    PQCLEAN_MLKEM768_CLEAN_polyvec_ntt(&e);
+
+    // matrix-vector multiplication
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
+        PQCLEAN_MLKEM768_CLEAN_poly_tomont(&pkpv.vec[i]);
+    }
+
+    PQCLEAN_MLKEM768_CLEAN_polyvec_add(&pkpv, &pkpv, &e);
+    PQCLEAN_MLKEM768_CLEAN_polyvec_reduce(&pkpv);
+
+    pack_sk(sk, &skpv);
+    pack_pk(pk, &pkpv, publicseed);
+}
+
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_indcpa_enc
+*
+* Description: Encryption function of the CPA-secure
+*              public-key encryption scheme underlying Kyber.
+*
+* Arguments:   - uint8_t *c: pointer to output ciphertext
+*                            (of length KYBER_INDCPA_BYTES bytes)
+*              - const uint8_t *m: pointer to input message
+*                                  (of length KYBER_INDCPA_MSGBYTES bytes)
+*              - const uint8_t *pk: pointer to input public key
+*                                   (of length KYBER_INDCPA_PUBLICKEYBYTES)
+*              - const uint8_t *coins: pointer to input random coins used as seed
+*                                      (of length KYBER_SYMBYTES) to deterministically
+*                                      generate all randomness
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES],
+                                       const uint8_t m[KYBER_INDCPA_MSGBYTES],
+                                       const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
+                                       const uint8_t coins[KYBER_SYMBYTES]) {
+    unsigned int i;
+    uint8_t seed[KYBER_SYMBYTES];
+    uint8_t nonce = 0;
+    polyvec sp, pkpv, ep, at[KYBER_K], b;
+    poly v, k, epp;
+
+    unpack_pk(&pkpv, seed, pk);
+    PQCLEAN_MLKEM768_CLEAN_poly_frommsg(&k, m);
+    gen_at(at, seed);
+
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta1(sp.vec + i, coins, nonce++);
+    }
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta2(ep.vec + i, coins, nonce++);
+    }
+    PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta2(&epp, coins, nonce++);
+
+    PQCLEAN_MLKEM768_CLEAN_polyvec_ntt(&sp);
+
+    // matrix-vector multiplication
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_polyvec_basemul_acc_montgomery(&b.vec[i], &at[i], &sp);
+    }
+
+    PQCLEAN_MLKEM768_CLEAN_polyvec_basemul_acc_montgomery(&v, &pkpv, &sp);
+
+    PQCLEAN_MLKEM768_CLEAN_polyvec_invntt_tomont(&b);
+    PQCLEAN_MLKEM768_CLEAN_poly_invntt_tomont(&v);
+
+    PQCLEAN_MLKEM768_CLEAN_polyvec_add(&b, &b, &ep);
+    PQCLEAN_MLKEM768_CLEAN_poly_add(&v, &v, &epp);
+    PQCLEAN_MLKEM768_CLEAN_poly_add(&v, &v, &k);
+    PQCLEAN_MLKEM768_CLEAN_polyvec_reduce(&b);
+    PQCLEAN_MLKEM768_CLEAN_poly_reduce(&v);
+
+    pack_ciphertext(c, &b, &v);
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_indcpa_dec
+*
+* Description: Decryption function of the CPA-secure
+*              public-key encryption scheme underlying Kyber.
+*
+* Arguments:   - uint8_t *m: pointer to output decrypted message
+*                            (of length KYBER_INDCPA_MSGBYTES)
+*              - const uint8_t *c: pointer to input ciphertext
+*                                  (of length KYBER_INDCPA_BYTES)
+*              - const uint8_t *sk: pointer to input secret key
+*                                   (of length KYBER_INDCPA_SECRETKEYBYTES)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
+                                       const uint8_t c[KYBER_INDCPA_BYTES],
+                                       const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES]) {
+    polyvec b, skpv;
+    poly v, mp;
+
+    unpack_ciphertext(&b, &v, c);
+    unpack_sk(&skpv, sk);
+
+    PQCLEAN_MLKEM768_CLEAN_polyvec_ntt(&b);
+    PQCLEAN_MLKEM768_CLEAN_polyvec_basemul_acc_montgomery(&mp, &skpv, &b);
+    PQCLEAN_MLKEM768_CLEAN_poly_invntt_tomont(&mp);
+
+    PQCLEAN_MLKEM768_CLEAN_poly_sub(&mp, &v, &mp);
+    PQCLEAN_MLKEM768_CLEAN_poly_reduce(&mp);
+
+    PQCLEAN_MLKEM768_CLEAN_poly_tomsg(m, &mp);
+}
diff --git a/library/indcpa.h b/library/indcpa.h
new file mode 100644
index 000000000000..17d338e08d0e
--- /dev/null
+++ b/library/indcpa.h
@@ -0,0 +1,22 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_INDCPA_H
+#define PQCLEAN_MLKEM768_CLEAN_INDCPA_H
+#include "params.h"
+#include "polyvec.h"
+#include <stdint.h>
+
+void PQCLEAN_MLKEM768_CLEAN_gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed);
+
+void PQCLEAN_MLKEM768_CLEAN_indcpa_keypair_derand(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
+        uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES],
+        const uint8_t coins[KYBER_SYMBYTES]);
+
+void PQCLEAN_MLKEM768_CLEAN_indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES],
+                                       const uint8_t m[KYBER_INDCPA_MSGBYTES],
+                                       const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
+                                       const uint8_t coins[KYBER_SYMBYTES]);
+
+void PQCLEAN_MLKEM768_CLEAN_indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
+                                       const uint8_t c[KYBER_INDCPA_BYTES],
+                                       const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES]);
+
+#endif
diff --git a/library/kem.c b/library/kem.c
new file mode 100644
index 000000000000..50bf36d7f87d
--- /dev/null
+++ b/library/kem.c
@@ -0,0 +1,164 @@
+#include "indcpa.h"
+#include "kem.h"
+#include "params.h"
+#include "randombytes.h"
+#include "symmetric.h"
+#include "verify.h"
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair_derand
+*
+* Description: Generates public and private key
+*              for CCA-secure Kyber key encapsulation mechanism
+*
+* Arguments:   - uint8_t *pk: pointer to output public key
+*                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
+*              - uint8_t *sk: pointer to output private key
+*                (an already allocated array of KYBER_SECRETKEYBYTES bytes)
+*              - uint8_t *coins: pointer to input randomness
+*                (an already allocated array filled with 2*KYBER_SYMBYTES random bytes)
+**
+* Returns 0 (success)
+**************************************************/
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair_derand(uint8_t *pk,
+        uint8_t *sk,
+        const uint8_t *coins) {
+    PQCLEAN_MLKEM768_CLEAN_indcpa_keypair_derand(pk, sk, coins);
+    memcpy(sk + KYBER_INDCPA_SECRETKEYBYTES, pk, KYBER_PUBLICKEYBYTES);
+    hash_h(sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
+    /* Value z for pseudo-random output on reject */
+    memcpy(sk + KYBER_SECRETKEYBYTES - KYBER_SYMBYTES, coins + KYBER_SYMBYTES, KYBER_SYMBYTES);
+    return 0;
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair
+*
+* Description: Generates public and private key
+*              for CCA-secure Kyber key encapsulation mechanism
+*
+* Arguments:   - uint8_t *pk: pointer to output public key
+*                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
+*              - uint8_t *sk: pointer to output private key
+*                (an already allocated array of KYBER_SECRETKEYBYTES bytes)
+*
+* Returns 0 (success)
+**************************************************/
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair(uint8_t *pk,
+        uint8_t *sk) {
+    uint8_t coins[2 * KYBER_SYMBYTES];
+    randombytes(coins, 2 * KYBER_SYMBYTES);
+    PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair_derand(pk, sk, coins);
+    return 0;
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc_derand
+*
+* Description: Generates cipher text and shared
+*              secret for given public key
+*
+* Arguments:   - uint8_t *ct: pointer to output cipher text
+*                (an already allocated array of KYBER_CIPHERTEXTBYTES bytes)
+*              - uint8_t *ss: pointer to output shared secret
+*                (an already allocated array of KYBER_SSBYTES bytes)
+*              - const uint8_t *pk: pointer to input public key
+*                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
+*              - const uint8_t *coins: pointer to input randomness
+*                (an already allocated array filled with KYBER_SYMBYTES random bytes)
+**
+* Returns 0 (success)
+**************************************************/
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc_derand(uint8_t *ct,
+        uint8_t *ss,
+        const uint8_t *pk,
+        const uint8_t *coins) {
+    uint8_t buf[2 * KYBER_SYMBYTES];
+    /* Will contain key, coins */
+    uint8_t kr[2 * KYBER_SYMBYTES];
+
+    memcpy(buf, coins, KYBER_SYMBYTES);
+
+    /* Multitarget countermeasure for coins + contributory KEM */
+    hash_h(buf + KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
+    hash_g(kr, buf, 2 * KYBER_SYMBYTES);
+
+    /* coins are in kr+KYBER_SYMBYTES */
+    PQCLEAN_MLKEM768_CLEAN_indcpa_enc(ct, buf, pk, kr + KYBER_SYMBYTES);
+
+    memcpy(ss, kr, KYBER_SYMBYTES);
+    return 0;
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc
+*
+* Description: Generates cipher text and shared
+*              secret for given public key
+*
+* Arguments:   - uint8_t *ct: pointer to output cipher text
+*                (an already allocated array of KYBER_CIPHERTEXTBYTES bytes)
+*              - uint8_t *ss: pointer to output shared secret
+*                (an already allocated array of KYBER_SSBYTES bytes)
+*              - const uint8_t *pk: pointer to input public key
+*                (an already allocated array of KYBER_PUBLICKEYBYTES bytes)
+*
+* Returns 0 (success)
+**************************************************/
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc(uint8_t *ct,
+        uint8_t *ss,
+        const uint8_t *pk) {
+    uint8_t coins[KYBER_SYMBYTES];
+    randombytes(coins, KYBER_SYMBYTES);
+    PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc_derand(ct, ss, pk, coins);
+    return 0;
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec
+*
+* Description: Generates shared secret for given
+*              cipher text and private key
+*
+* Arguments:   - uint8_t *ss: pointer to output shared secret
+*                (an already allocated array of KYBER_SSBYTES bytes)
+*              - const uint8_t *ct: pointer to input cipher text
+*                (an already allocated array of KYBER_CIPHERTEXTBYTES bytes)
+*              - const uint8_t *sk: pointer to input private key
+*                (an already allocated array of KYBER_SECRETKEYBYTES bytes)
+*
+* Returns 0.
+*
+* On failure, ss will contain a pseudo-random value.
+**************************************************/
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(uint8_t *ss,
+        const uint8_t *ct,
+        const uint8_t *sk) {
+    int fail;
+    uint8_t buf[2 * KYBER_SYMBYTES];
+    /* Will contain key, coins */
+    uint8_t kr[2 * KYBER_SYMBYTES];
+    uint8_t cmp[KYBER_CIPHERTEXTBYTES + KYBER_SYMBYTES];
+    const uint8_t *pk = sk + KYBER_INDCPA_SECRETKEYBYTES;
+
+    PQCLEAN_MLKEM768_CLEAN_indcpa_dec(buf, ct, sk);
+
+    /* Multitarget countermeasure for coins + contributory KEM */
+    memcpy(buf + KYBER_SYMBYTES, sk + KYBER_SECRETKEYBYTES - 2 * KYBER_SYMBYTES, KYBER_SYMBYTES);
+    hash_g(kr, buf, 2 * KYBER_SYMBYTES);
+
+    /* coins are in kr+KYBER_SYMBYTES */
+    PQCLEAN_MLKEM768_CLEAN_indcpa_enc(cmp, buf, pk, kr + KYBER_SYMBYTES);
+
+    fail = PQCLEAN_MLKEM768_CLEAN_verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
+
+    /* Compute rejection key */
+    rkprf(ss, sk + KYBER_SECRETKEYBYTES - KYBER_SYMBYTES, ct);
+
+    /* Copy true key to return buffer if fail is false */
+    PQCLEAN_MLKEM768_CLEAN_cmov(ss, kr, KYBER_SYMBYTES, (uint8_t) (1 - fail));
+
+    return 0;
+}
diff --git a/library/kem.h b/library/kem.h
new file mode 100644
index 000000000000..a78b9fc1e297
--- /dev/null
+++ b/library/kem.h
@@ -0,0 +1,30 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_KEM_H
+#define PQCLEAN_MLKEM768_CLEAN_KEM_H
+#include "params.h"
+#include <stdint.h>
+
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_SECRETKEYBYTES  KYBER_SECRETKEYBYTES
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_PUBLICKEYBYTES  KYBER_PUBLICKEYBYTES
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_CIPHERTEXTBYTES KYBER_CIPHERTEXTBYTES
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_BYTES           KYBER_SSBYTES
+
+#define PQCLEAN_MLKEM768_CLEAN_CRYPTO_ALGNAME "ML-KEM-768"
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair_derand(uint8_t *pk, uint8_t *sk, const uint8_t *coins);
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair(uint8_t *pk, uint8_t *sk);
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc_derand(uint8_t *ct, uint8_t *ss, const uint8_t *pk, const uint8_t *coins);
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_enc(uint8_t *ct, uint8_t *ss, const uint8_t *pk);
+
+int PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const uint8_t *sk);
+
+struct X25519Kyber768_ctx
+{
+	uint8_t _ss[KYBER_SSBYTES];
+	uint8_t _ek[KYBER_PUBLICKEYBYTES]; // encapsulation key
+	uint8_t _dk[KYBER_SECRETKEYBYTES]; // decapsulation key
+};
+
+#endif
diff --git a/library/ntt.c b/library/ntt.c
new file mode 100644
index 000000000000..57942833d7be
--- /dev/null
+++ b/library/ntt.c
@@ -0,0 +1,146 @@
+#include "ntt.h"
+#include "params.h"
+#include "reduce.h"
+#include <stdint.h>
+
+/* Code to generate PQCLEAN_MLKEM768_CLEAN_zetas and zetas_inv used in the number-theoretic transform:
+
+#define KYBER_ROOT_OF_UNITY 17
+
+static const uint8_t tree[128] = {
+  0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120,
+  4, 68, 36, 100, 20, 84, 52, 116, 12, 76, 44, 108, 28, 92, 60, 124,
+  2, 66, 34, 98, 18, 82, 50, 114, 10, 74, 42, 106, 26, 90, 58, 122,
+  6, 70, 38, 102, 22, 86, 54, 118, 14, 78, 46, 110, 30, 94, 62, 126,
+  1, 65, 33, 97, 17, 81, 49, 113, 9, 73, 41, 105, 25, 89, 57, 121,
+  5, 69, 37, 101, 21, 85, 53, 117, 13, 77, 45, 109, 29, 93, 61, 125,
+  3, 67, 35, 99, 19, 83, 51, 115, 11, 75, 43, 107, 27, 91, 59, 123,
+  7, 71, 39, 103, 23, 87, 55, 119, 15, 79, 47, 111, 31, 95, 63, 127
+};
+
+void init_ntt() {
+  unsigned int i;
+  int16_t tmp[128];
+
+  tmp[0] = MONT;
+  for(i=1;i<128;i++)
+    tmp[i] = fqmul(tmp[i-1],MONT*KYBER_ROOT_OF_UNITY % KYBER_Q);
+
+  for(i=0;i<128;i++) {
+    PQCLEAN_MLKEM768_CLEAN_zetas[i] = tmp[tree[i]];
+    if(PQCLEAN_MLKEM768_CLEAN_zetas[i] > KYBER_Q/2)
+      PQCLEAN_MLKEM768_CLEAN_zetas[i] -= KYBER_Q;
+    if(PQCLEAN_MLKEM768_CLEAN_zetas[i] < -KYBER_Q/2)
+      PQCLEAN_MLKEM768_CLEAN_zetas[i] += KYBER_Q;
+  }
+}
+*/
+
+const int16_t PQCLEAN_MLKEM768_CLEAN_zetas[128] = {
+    -1044,  -758,  -359, -1517,  1493,  1422,   287,   202,
+    -171,   622,  1577,   182,   962, -1202, -1474,  1468,
+    573, -1325,   264,   383,  -829,  1458, -1602,  -130,
+    -681,  1017,   732,   608, -1542,   411,  -205, -1571,
+    1223,   652,  -552,  1015, -1293,  1491,  -282, -1544,
+    516,    -8,  -320,  -666, -1618, -1162,   126,  1469,
+    -853,   -90,  -271,   830,   107, -1421,  -247,  -951,
+    -398,   961, -1508,  -725,   448, -1065,   677, -1275,
+    -1103,   430,   555,   843, -1251,   871,  1550,   105,
+    422,   587,   177,  -235,  -291,  -460,  1574,  1653,
+    -246,   778,  1159,  -147,  -777,  1483,  -602,  1119,
+    -1590,   644,  -872,   349,   418,   329,  -156,   -75,
+    817,  1097,   603,   610,  1322, -1285, -1465,   384,
+    -1215,  -136,  1218, -1335,  -874,   220, -1187, -1659,
+    -1185, -1530, -1278,   794, -1510,  -854,  -870,   478,
+    -108,  -308,   996,   991,   958, -1460,  1522,  1628
+};
+
+/*************************************************
+* Name:        fqmul
+*
+* Description: Multiplication followed by Montgomery reduction
+*
+* Arguments:   - int16_t a: first factor
+*              - int16_t b: second factor
+*
+* Returns 16-bit integer congruent to a*b*R^{-1} mod q
+**************************************************/
+static int16_t fqmul(int16_t a, int16_t b) {
+    return PQCLEAN_MLKEM768_CLEAN_montgomery_reduce((int32_t)a * b);
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_ntt
+*
+* Description: Inplace number-theoretic transform (NTT) in Rq.
+*              input is in standard order, output is in bitreversed order
+*
+* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_ntt(int16_t r[256]) {
+    unsigned int len, start, j, k;
+    int16_t t, zeta;
+
+    k = 1;
+    for (len = 128; len >= 2; len >>= 1) {
+        for (start = 0; start < 256; start = j + len) {
+            zeta = PQCLEAN_MLKEM768_CLEAN_zetas[k++];
+            for (j = start; j < start + len; j++) {
+                t = fqmul(zeta, r[j + len]);
+                r[j + len] = r[j] - t;
+                r[j] = r[j] + t;
+            }
+        }
+    }
+}
+
+/*************************************************
+* Name:        invntt_tomont
+*
+* Description: Inplace inverse number-theoretic transform in Rq and
+*              multiplication by Montgomery factor 2^16.
+*              Input is in bitreversed order, output is in standard order
+*
+* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_invntt(int16_t r[256]) {
+    unsigned int start, len, j, k;
+    int16_t t, zeta;
+    const int16_t f = 1441; // mont^2/128
+
+    k = 127;
+    for (len = 2; len <= 128; len <<= 1) {
+        for (start = 0; start < 256; start = j + len) {
+            zeta = PQCLEAN_MLKEM768_CLEAN_zetas[k--];
+            for (j = start; j < start + len; j++) {
+                t = r[j];
+                r[j] = PQCLEAN_MLKEM768_CLEAN_barrett_reduce(t + r[j + len]);
+                r[j + len] = r[j + len] - t;
+                r[j + len] = fqmul(zeta, r[j + len]);
+            }
+        }
+    }
+
+    for (j = 0; j < 256; j++) {
+        r[j] = fqmul(r[j], f);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_basemul
+*
+* Description: Multiplication of polynomials in Zq[X]/(X^2-zeta)
+*              used for multiplication of elements in Rq in NTT domain
+*
+* Arguments:   - int16_t r[2]: pointer to the output polynomial
+*              - const int16_t a[2]: pointer to the first factor
+*              - const int16_t b[2]: pointer to the second factor
+*              - int16_t zeta: integer defining the reduction polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta) {
+    r[0]  = fqmul(a[1], b[1]);
+    r[0]  = fqmul(r[0], zeta);
+    r[0] += fqmul(a[0], b[0]);
+    r[1]  = fqmul(a[0], b[1]);
+    r[1] += fqmul(a[1], b[0]);
+}
diff --git a/library/ntt.h b/library/ntt.h
new file mode 100644
index 000000000000..bb9d7129a797
--- /dev/null
+++ b/library/ntt.h
@@ -0,0 +1,14 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_NTT_H
+#define PQCLEAN_MLKEM768_CLEAN_NTT_H
+#include "params.h"
+#include <stdint.h>
+
+extern const int16_t PQCLEAN_MLKEM768_CLEAN_zetas[128];
+
+void PQCLEAN_MLKEM768_CLEAN_ntt(int16_t r[256]);
+
+void PQCLEAN_MLKEM768_CLEAN_invntt(int16_t r[256]);
+
+void PQCLEAN_MLKEM768_CLEAN_basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta);
+
+#endif
diff --git a/library/params.h b/library/params.h
new file mode 100644
index 000000000000..6bd88e35dabf
--- /dev/null
+++ b/library/params.h
@@ -0,0 +1,36 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_PARAMS_H
+#define PQCLEAN_MLKEM768_CLEAN_PARAMS_H
+
+
+
+
+
+/* Don't change parameters below this line */
+
+#define KYBER_N 256
+#define KYBER_Q 3329
+
+#define KYBER_SYMBYTES 32   /* size in bytes of hashes, and seeds */
+#define KYBER_SSBYTES  32   /* size in bytes of shared key */
+
+#define KYBER_POLYBYTES     384
+#define KYBER_POLYVECBYTES  (KYBER_K * KYBER_POLYBYTES)
+
+#define KYBER_K 3
+#define KYBER_ETA1 2
+#define KYBER_POLYCOMPRESSEDBYTES    128
+#define KYBER_POLYVECCOMPRESSEDBYTES (KYBER_K * 320)
+
+#define KYBER_ETA2 2
+
+#define KYBER_INDCPA_MSGBYTES       (KYBER_SYMBYTES)
+#define KYBER_INDCPA_PUBLICKEYBYTES (KYBER_POLYVECBYTES + KYBER_SYMBYTES)
+#define KYBER_INDCPA_SECRETKEYBYTES (KYBER_POLYVECBYTES)
+#define KYBER_INDCPA_BYTES          (KYBER_POLYVECCOMPRESSEDBYTES + KYBER_POLYCOMPRESSEDBYTES)
+
+#define KYBER_PUBLICKEYBYTES  (KYBER_INDCPA_PUBLICKEYBYTES)
+/* 32 bytes of additional space to save H(pk) */
+#define KYBER_SECRETKEYBYTES  (KYBER_INDCPA_SECRETKEYBYTES + KYBER_INDCPA_PUBLICKEYBYTES + 2*KYBER_SYMBYTES)
+#define KYBER_CIPHERTEXTBYTES (KYBER_INDCPA_BYTES)
+
+#endif
diff --git a/library/poly.c b/library/poly.c
new file mode 100644
index 000000000000..cf0199085056
--- /dev/null
+++ b/library/poly.c
@@ -0,0 +1,299 @@
+#include "cbd.h"
+#include "ntt.h"
+#include "params.h"
+#include "poly.h"
+#include "reduce.h"
+#include "symmetric.h"
+#include "verify.h"
+#include <stdint.h>
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_compress
+*
+* Description: Compression and subsequent serialization of a polynomial
+*
+* Arguments:   - uint8_t *r: pointer to output byte array
+*                            (of length KYBER_POLYCOMPRESSEDBYTES)
+*              - const poly *a: pointer to input polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a) {
+    unsigned int i, j;
+    int16_t u;
+    uint32_t d0;
+    uint8_t t[8];
+
+
+    for (i = 0; i < KYBER_N / 8; i++) {
+        for (j = 0; j < 8; j++) {
+            // map to positive standard representatives
+            u  = a->coeffs[8 * i + j];
+            u += (u >> 15) & KYBER_Q;
+            /*    t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15; */
+            d0 = u << 4;
+            d0 += 1665;
+            d0 *= 80635;
+            d0 >>= 28;
+            t[j] = d0 & 0xf;
+        }
+
+        r[0] = t[0] | (t[1] << 4);
+        r[1] = t[2] | (t[3] << 4);
+        r[2] = t[4] | (t[5] << 4);
+        r[3] = t[6] | (t[7] << 4);
+        r += 4;
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_decompress
+*
+* Description: De-serialization and subsequent decompression of a polynomial;
+*              approximate inverse of PQCLEAN_MLKEM768_CLEAN_poly_compress
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const uint8_t *a: pointer to input byte array
+*                                  (of length KYBER_POLYCOMPRESSEDBYTES bytes)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES]) {
+    size_t i;
+
+    for (i = 0; i < KYBER_N / 2; i++) {
+        r->coeffs[2 * i + 0] = (((uint16_t)(a[0] & 15) * KYBER_Q) + 8) >> 4;
+        r->coeffs[2 * i + 1] = (((uint16_t)(a[0] >> 4) * KYBER_Q) + 8) >> 4;
+        a += 1;
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_tobytes
+*
+* Description: Serialization of a polynomial
+*
+* Arguments:   - uint8_t *r: pointer to output byte array
+*                            (needs space for KYBER_POLYBYTES bytes)
+*              - const poly *a: pointer to input polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a) {
+    size_t i;
+    uint16_t t0, t1;
+
+    for (i = 0; i < KYBER_N / 2; i++) {
+        // map to positive standard representatives
+        t0  = a->coeffs[2 * i];
+        t0 += ((int16_t)t0 >> 15) & KYBER_Q;
+        t1 = a->coeffs[2 * i + 1];
+        t1 += ((int16_t)t1 >> 15) & KYBER_Q;
+        r[3 * i + 0] = (uint8_t)(t0 >> 0);
+        r[3 * i + 1] = (uint8_t)((t0 >> 8) | (t1 << 4));
+        r[3 * i + 2] = (uint8_t)(t1 >> 4);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_frombytes
+*
+* Description: De-serialization of a polynomial;
+*              inverse of PQCLEAN_MLKEM768_CLEAN_poly_tobytes
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const uint8_t *a: pointer to input byte array
+*                                  (of KYBER_POLYBYTES bytes)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES]) {
+    size_t i;
+    for (i = 0; i < KYBER_N / 2; i++) {
+        r->coeffs[2 * i]   = ((a[3 * i + 0] >> 0) | ((uint16_t)a[3 * i + 1] << 8)) & 0xFFF;
+        r->coeffs[2 * i + 1] = ((a[3 * i + 1] >> 4) | ((uint16_t)a[3 * i + 2] << 4)) & 0xFFF;
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_frommsg
+*
+* Description: Convert 32-byte message to polynomial
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const uint8_t *msg: pointer to input message
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES]) {
+    size_t i, j;
+
+    for (i = 0; i < KYBER_N / 8; i++) {
+        for (j = 0; j < 8; j++) {
+            r->coeffs[8 * i + j] = 0;
+            PQCLEAN_MLKEM768_CLEAN_cmov_int16(r->coeffs + 8 * i + j, ((KYBER_Q + 1) / 2), (msg[i] >> j) & 1);
+        }
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_tomsg
+*
+* Description: Convert polynomial to 32-byte message
+*
+* Arguments:   - uint8_t *msg: pointer to output message
+*              - const poly *a: pointer to input polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a) {
+    unsigned int i, j;
+    uint32_t t;
+
+    for (i = 0; i < KYBER_N / 8; i++) {
+        msg[i] = 0;
+        for (j = 0; j < 8; j++) {
+            t  = a->coeffs[8 * i + j];
+            // t += ((int16_t)t >> 15) & KYBER_Q;
+            // t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
+            t <<= 1;
+            t += 1665;
+            t *= 80635;
+            t >>= 28;
+            t &= 1;
+            msg[i] |= t << j;
+        }
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta1
+*
+* Description: Sample a polynomial deterministically from a seed and a nonce,
+*              with output polynomial close to centered binomial distribution
+*              with parameter KYBER_ETA1
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const uint8_t *seed: pointer to input seed
+*                                     (of length KYBER_SYMBYTES bytes)
+*              - uint8_t nonce: one-byte input nonce
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce) {
+    uint8_t buf[KYBER_ETA1 * KYBER_N / 4];
+    prf(buf, sizeof(buf), seed, nonce);
+    PQCLEAN_MLKEM768_CLEAN_poly_cbd_eta1(r, buf);
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta2
+*
+* Description: Sample a polynomial deterministically from a seed and a nonce,
+*              with output polynomial close to centered binomial distribution
+*              with parameter KYBER_ETA2
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const uint8_t *seed: pointer to input seed
+*                                     (of length KYBER_SYMBYTES bytes)
+*              - uint8_t nonce: one-byte input nonce
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce) {
+    uint8_t buf[KYBER_ETA2 * KYBER_N / 4];
+    prf(buf, sizeof(buf), seed, nonce);
+    PQCLEAN_MLKEM768_CLEAN_poly_cbd_eta2(r, buf);
+}
+
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_ntt
+*
+* Description: Computes negacyclic number-theoretic transform (NTT) of
+*              a polynomial in place;
+*              inputs assumed to be in normal order, output in bitreversed order
+*
+* Arguments:   - uint16_t *r: pointer to in/output polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_ntt(poly *r) {
+    PQCLEAN_MLKEM768_CLEAN_ntt(r->coeffs);
+    PQCLEAN_MLKEM768_CLEAN_poly_reduce(r);
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_invntt_tomont
+*
+* Description: Computes inverse of negacyclic number-theoretic transform (NTT)
+*              of a polynomial in place;
+*              inputs assumed to be in bitreversed order, output in normal order
+*
+* Arguments:   - uint16_t *a: pointer to in/output polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_invntt_tomont(poly *r) {
+    PQCLEAN_MLKEM768_CLEAN_invntt(r->coeffs);
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_basemul_montgomery
+*
+* Description: Multiplication of two polynomials in NTT domain
+*
+* Arguments:   - poly *r: pointer to output polynomial
+*              - const poly *a: pointer to first input polynomial
+*              - const poly *b: pointer to second input polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_basemul_montgomery(poly *r, const poly *a, const poly *b) {
+    size_t i;
+    for (i = 0; i < KYBER_N / 4; i++) {
+        PQCLEAN_MLKEM768_CLEAN_basemul(&r->coeffs[4 * i], &a->coeffs[4 * i], &b->coeffs[4 * i], PQCLEAN_MLKEM768_CLEAN_zetas[64 + i]);
+        PQCLEAN_MLKEM768_CLEAN_basemul(&r->coeffs[4 * i + 2], &a->coeffs[4 * i + 2], &b->coeffs[4 * i + 2], -PQCLEAN_MLKEM768_CLEAN_zetas[64 + i]);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_tomont
+*
+* Description: Inplace conversion of all coefficients of a polynomial
+*              from normal domain to Montgomery domain
+*
+* Arguments:   - poly *r: pointer to input/output polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_tomont(poly *r) {
+    size_t i;
+    const int16_t f = (1ULL << 32) % KYBER_Q;
+    for (i = 0; i < KYBER_N; i++) {
+        r->coeffs[i] = PQCLEAN_MLKEM768_CLEAN_montgomery_reduce((int32_t)r->coeffs[i] * f);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_reduce
+*
+* Description: Applies Barrett reduction to all coefficients of a polynomial
+*              for details of the Barrett reduction see comments in reduce.c
+*
+* Arguments:   - poly *r: pointer to input/output polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_reduce(poly *r) {
+    size_t i;
+    for (i = 0; i < KYBER_N; i++) {
+        r->coeffs[i] = PQCLEAN_MLKEM768_CLEAN_barrett_reduce(r->coeffs[i]);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_add
+*
+* Description: Add two polynomials; no modular reduction is performed
+*
+* Arguments: - poly *r: pointer to output polynomial
+*            - const poly *a: pointer to first input polynomial
+*            - const poly *b: pointer to second input polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_add(poly *r, const poly *a, const poly *b) {
+    size_t i;
+    for (i = 0; i < KYBER_N; i++) {
+        r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_poly_sub
+*
+* Description: Subtract two polynomials; no modular reduction is performed
+*
+* Arguments: - poly *r:       pointer to output polynomial
+*            - const poly *a: pointer to first input polynomial
+*            - const poly *b: pointer to second input polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_poly_sub(poly *r, const poly *a, const poly *b) {
+    size_t i;
+    for (i = 0; i < KYBER_N; i++) {
+        r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
+    }
+}
diff --git a/library/poly.h b/library/poly.h
new file mode 100644
index 000000000000..d286a39a174c
--- /dev/null
+++ b/library/poly.h
@@ -0,0 +1,37 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_POLY_H
+#define PQCLEAN_MLKEM768_CLEAN_POLY_H
+#include "params.h"
+#include <stdint.h>
+
+/*
+ * Elements of R_q = Z_q[X]/(X^n + 1). Represents polynomial
+ * coeffs[0] + X*coeffs[1] + X^2*coeffs[2] + ... + X^{n-1}*coeffs[n-1]
+ */
+typedef struct {
+    int16_t coeffs[KYBER_N];
+} poly;
+
+void PQCLEAN_MLKEM768_CLEAN_poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a);
+void PQCLEAN_MLKEM768_CLEAN_poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES]);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a);
+void PQCLEAN_MLKEM768_CLEAN_poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES]);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES]);
+void PQCLEAN_MLKEM768_CLEAN_poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_ntt(poly *r);
+void PQCLEAN_MLKEM768_CLEAN_poly_invntt_tomont(poly *r);
+void PQCLEAN_MLKEM768_CLEAN_poly_basemul_montgomery(poly *r, const poly *a, const poly *b);
+void PQCLEAN_MLKEM768_CLEAN_poly_tomont(poly *r);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_reduce(poly *r);
+
+void PQCLEAN_MLKEM768_CLEAN_poly_add(poly *r, const poly *a, const poly *b);
+void PQCLEAN_MLKEM768_CLEAN_poly_sub(poly *r, const poly *a, const poly *b);
+
+#endif
diff --git a/library/polyvec.c b/library/polyvec.c
new file mode 100644
index 000000000000..bb17d2da5c9a
--- /dev/null
+++ b/library/polyvec.c
@@ -0,0 +1,188 @@
+#include "params.h"
+#include "poly.h"
+#include "polyvec.h"
+#include <stdint.h>
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_compress
+*
+* Description: Compress and serialize vector of polynomials
+*
+* Arguments:   - uint8_t *r: pointer to output byte array
+*                            (needs space for KYBER_POLYVECCOMPRESSEDBYTES)
+*              - const polyvec *a: pointer to input vector of polynomials
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a) {
+    unsigned int i, j, k;
+    uint64_t d0;
+
+    uint16_t t[4];
+    for (i = 0; i < KYBER_K; i++) {
+        for (j = 0; j < KYBER_N / 4; j++) {
+            for (k = 0; k < 4; k++) {
+                t[k]  = a->vec[i].coeffs[4 * j + k];
+                t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
+                /*      t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff; */
+                d0 = t[k];
+                d0 <<= 10;
+                d0 += 1665;
+                d0 *= 1290167;
+                d0 >>= 32;
+                t[k] = d0 & 0x3ff;
+            }
+
+            r[0] = (uint8_t)(t[0] >> 0);
+            r[1] = (uint8_t)((t[0] >> 8) | (t[1] << 2));
+            r[2] = (uint8_t)((t[1] >> 6) | (t[2] << 4));
+            r[3] = (uint8_t)((t[2] >> 4) | (t[3] << 6));
+            r[4] = (uint8_t)(t[3] >> 2);
+            r += 5;
+        }
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_decompress
+*
+* Description: De-serialize and decompress vector of polynomials;
+*              approximate inverse of PQCLEAN_MLKEM768_CLEAN_polyvec_compress
+*
+* Arguments:   - polyvec *r:       pointer to output vector of polynomials
+*              - const uint8_t *a: pointer to input byte array
+*                                  (of length KYBER_POLYVECCOMPRESSEDBYTES)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES]) {
+    unsigned int i, j, k;
+
+    uint16_t t[4];
+    for (i = 0; i < KYBER_K; i++) {
+        for (j = 0; j < KYBER_N / 4; j++) {
+            t[0] = (a[0] >> 0) | ((uint16_t)a[1] << 8);
+            t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
+            t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
+            t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
+            a += 5;
+
+            for (k = 0; k < 4; k++) {
+                r->vec[i].coeffs[4 * j + k] = ((uint32_t)(t[k] & 0x3FF) * KYBER_Q + 512) >> 10;
+            }
+        }
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_tobytes
+*
+* Description: Serialize vector of polynomials
+*
+* Arguments:   - uint8_t *r: pointer to output byte array
+*                            (needs space for KYBER_POLYVECBYTES)
+*              - const polyvec *a: pointer to input vector of polynomials
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_tobytes(r + i * KYBER_POLYBYTES, &a->vec[i]);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_frombytes
+*
+* Description: De-serialize vector of polynomials;
+*              inverse of PQCLEAN_MLKEM768_CLEAN_polyvec_tobytes
+*
+* Arguments:   - uint8_t *r:       pointer to output byte array
+*              - const polyvec *a: pointer to input vector of polynomials
+*                                  (of length KYBER_POLYVECBYTES)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES]) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_frombytes(&r->vec[i], a + i * KYBER_POLYBYTES);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_ntt
+*
+* Description: Apply forward NTT to all elements of a vector of polynomials
+*
+* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_ntt(polyvec *r) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_ntt(&r->vec[i]);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_invntt_tomont
+*
+* Description: Apply inverse NTT to all elements of a vector of polynomials
+*              and multiply by Montgomery factor 2^16
+*
+* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_invntt_tomont(polyvec *r) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_invntt_tomont(&r->vec[i]);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_basemul_acc_montgomery
+*
+* Description: Multiply elements of a and b in NTT domain, accumulate into r,
+*              and multiply by 2^-16.
+*
+* Arguments: - poly *r: pointer to output polynomial
+*            - const polyvec *a: pointer to first input vector of polynomials
+*            - const polyvec *b: pointer to second input vector of polynomials
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b) {
+    unsigned int i;
+    poly t;
+
+    PQCLEAN_MLKEM768_CLEAN_poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
+    for (i = 1; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
+        PQCLEAN_MLKEM768_CLEAN_poly_add(r, r, &t);
+    }
+
+    PQCLEAN_MLKEM768_CLEAN_poly_reduce(r);
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_reduce
+*
+* Description: Applies Barrett reduction to each coefficient
+*              of each element of a vector of polynomials;
+*              for details of the Barrett reduction see comments in reduce.c
+*
+* Arguments:   - polyvec *r: pointer to input/output polynomial
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_reduce(polyvec *r) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_reduce(&r->vec[i]);
+    }
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_polyvec_add
+*
+* Description: Add vectors of polynomials
+*
+* Arguments: - polyvec *r: pointer to output vector of polynomials
+*            - const polyvec *a: pointer to first input vector of polynomials
+*            - const polyvec *b: pointer to second input vector of polynomials
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_polyvec_add(polyvec *r, const polyvec *a, const polyvec *b) {
+    unsigned int i;
+    for (i = 0; i < KYBER_K; i++) {
+        PQCLEAN_MLKEM768_CLEAN_poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
+    }
+}
diff --git a/library/polyvec.h b/library/polyvec.h
new file mode 100644
index 000000000000..9f8da5dc635e
--- /dev/null
+++ b/library/polyvec.h
@@ -0,0 +1,26 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_POLYVEC_H
+#define PQCLEAN_MLKEM768_CLEAN_POLYVEC_H
+#include "params.h"
+#include "poly.h"
+#include <stdint.h>
+
+typedef struct {
+    poly vec[KYBER_K];
+} polyvec;
+
+void PQCLEAN_MLKEM768_CLEAN_polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a);
+void PQCLEAN_MLKEM768_CLEAN_polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES]);
+
+void PQCLEAN_MLKEM768_CLEAN_polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a);
+void PQCLEAN_MLKEM768_CLEAN_polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES]);
+
+void PQCLEAN_MLKEM768_CLEAN_polyvec_ntt(polyvec *r);
+void PQCLEAN_MLKEM768_CLEAN_polyvec_invntt_tomont(polyvec *r);
+
+void PQCLEAN_MLKEM768_CLEAN_polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b);
+
+void PQCLEAN_MLKEM768_CLEAN_polyvec_reduce(polyvec *r);
+
+void PQCLEAN_MLKEM768_CLEAN_polyvec_add(polyvec *r, const polyvec *a, const polyvec *b);
+
+#endif
diff --git a/library/rand-bytes.h b/library/rand-bytes.h
deleted file mode 100644
index 4000b4ca8f22..000000000000
--- a/library/rand-bytes.h
+++ /dev/null
@@ -1,21 +0,0 @@
-#ifndef RAND_BYTES_H
-#define RAND_BYTES_H
-
-#include <stddef.h> // size_t
-#include <sys/random.h> // getentropy()
-#include "esp_random.h"
-//#include <err.h> // errx()
-
-// Fill `buf` with `len` random bytes using `getentropy()`.
-//
-// Prints an error message to standard error and exits with a non-zero
-// error code if `len` random bytes could not be read.
-static void rand_bytes(void * const buf, size_t len) {
-  uint8_t *u8 = (uint8_t*) buf;
-    //int i;
-    //for(i=0; i<len; i++) u8[i] = (uint8_t)i;
-    esp_fill_random(u8, len);
-    return;
-}
-
-#endif /* RAND_BYTES_H */
diff --git a/library/randombytes.c b/library/randombytes.c
new file mode 100644
index 000000000000..5d649b4d489d
--- /dev/null
+++ b/library/randombytes.c
@@ -0,0 +1,357 @@
+/*
+The MIT License
+
+Copyright (c) 2017 Daan Sprenkels <hello@dsprenkels.com>
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+*/
+// In the case that are compiling on linux, we need to define _GNU_SOURCE
+// *before* randombytes.h is included. Otherwise SYS_getrandom will not be
+// declared.
+#if defined(__linux__)
+# define _GNU_SOURCE
+#endif /* defined(__linux__) */
+
+#include "randombytes.h"
+
+#if defined(_WIN32)
+/* Windows */
+# include <windows.h>
+# include <wincrypt.h> /* CryptAcquireContext, CryptGenRandom */
+#endif /* defined(_WIN32) */
+
+/* wasi */
+#if defined(__wasi__)
+#include <stdlib.h>
+#endif
+
+#if defined(__linux__)
+/* Linux */
+// We would need to include <linux/random.h>, but not every target has access
+// to the linux headers. We only need RNDGETENTCNT, so we instead inline it.
+// RNDGETENTCNT is originally defined in `include/uapi/linux/random.h` in the
+// linux repo.
+# define RNDGETENTCNT 0x80045200
+
+# include <assert.h>
+# include <errno.h>
+# include <fcntl.h>
+# include <poll.h>
+# include <stdint.h>
+# include <stdio.h>
+# include <sys/ioctl.h>
+# if defined(__linux__) && defined(__GLIBC__) && ((__GLIBC__ > 2) || (__GLIBC_MINOR__ > 24))
+#  define USE_GLIBC
+#  include <sys/random.h>
+# endif /* defined(__linux__) && defined(__GLIBC__) && ((__GLIBC__ > 2) || (__GLIBC_MINOR__ > 24)) */
+# include <sys/stat.h>
+# include <sys/syscall.h>
+# include <sys/types.h>
+# include <unistd.h>
+
+// We need SSIZE_MAX as the maximum read len from /dev/urandom
+# if !defined(SSIZE_MAX)
+#  define SSIZE_MAX (SIZE_MAX / 2 - 1)
+# endif /* defined(SSIZE_MAX) */
+
+#endif /* defined(__linux__) */
+
+#if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
+/* Dragonfly, FreeBSD, NetBSD, OpenBSD (has arc4random) */
+# include <sys/param.h>
+# if defined(BSD)
+#  include <stdlib.h>
+# endif
+#endif
+
+#if defined(__EMSCRIPTEN__)
+# include <assert.h>
+# include <emscripten.h>
+# include <errno.h>
+# include <stdbool.h>
+#endif /* defined(__EMSCRIPTEN__) */
+
+#if defined(_WIN32)
+static int randombytes_win32_randombytes(void *buf, const size_t n) {
+    HCRYPTPROV ctx;
+    BOOL tmp;
+
+    tmp = CryptAcquireContext(&ctx, NULL, NULL, PROV_RSA_FULL,
+                              CRYPT_VERIFYCONTEXT);
+    if (tmp == FALSE) {
+        return -1;
+    }
+
+    tmp = CryptGenRandom(ctx, (unsigned long)n, (BYTE *) buf);
+    if (tmp == FALSE) {
+        return -1;
+    }
+
+    tmp = CryptReleaseContext(ctx, 0);
+    if (tmp == FALSE) {
+        return -1;
+    }
+
+    return 0;
+}
+#endif /* defined(_WIN32) */
+
+#if defined(__wasi__)
+static int randombytes_wasi_randombytes(void *buf, size_t n) {
+    arc4random_buf(buf, n);
+    return 0;
+}
+#endif /* defined(__wasi__) */
+
+#if defined(__linux__) && (defined(USE_GLIBC) || defined(SYS_getrandom))
+# if defined(USE_GLIBC)
+// getrandom is declared in glibc.
+# elif defined(SYS_getrandom)
+static ssize_t getrandom(void *buf, size_t buflen, unsigned int flags) {
+    return syscall(SYS_getrandom, buf, buflen, flags);
+}
+# endif
+
+static int randombytes_linux_randombytes_getrandom(void *buf, size_t n) {
+    /* I have thought about using a separate PRF, seeded by getrandom, but
+     * it turns out that the performance of getrandom is good enough
+     * (250 MB/s on my laptop).
+     */
+    size_t offset = 0, chunk;
+    int ret;
+    while (n > 0) {
+        /* getrandom does not allow chunks larger than 33554431 */
+        chunk = n <= 33554431 ? n : 33554431;
+        do {
+            ret = getrandom((char *)buf + offset, chunk, 0);
+        } while (ret == -1 && errno == EINTR);
+        if (ret < 0) {
+            return ret;
+        }
+        offset += ret;
+        n -= ret;
+    }
+    assert(n == 0);
+    return 0;
+}
+#endif // defined(__linux__) && (defined(USE_GLIBC) || defined(SYS_getrandom))
+
+#if defined(__linux__) && !defined(SYS_getrandom)
+static int randombytes_linux_read_entropy_ioctl(int device, int *entropy) {
+    return ioctl(device, RNDGETENTCNT, entropy);
+}
+
+static int randombytes_linux_read_entropy_proc(FILE *stream, int *entropy) {
+    int retcode;
+    do {
+        rewind(stream);
+        retcode = fscanf(stream, "%d", entropy);
+    } while (retcode != 1 && errno == EINTR);
+    if (retcode != 1) {
+        return -1;
+    }
+    return 0;
+}
+
+static int randombytes_linux_wait_for_entropy(int device) {
+    /* We will block on /dev/random, because any increase in the OS' entropy
+     * level will unblock the request. I use poll here (as does libsodium),
+     * because we don't *actually* want to read from the device. */
+    enum { IOCTL, PROC } strategy = IOCTL;
+    const int bits = 128;
+    struct pollfd pfd;
+    int fd;
+    FILE *proc_file;
+    int retcode, retcode_error = 0; // Used as return codes throughout this function
+    int entropy = 0;
+
+    /* If the device has enough entropy already, we will want to return early */
+    retcode = randombytes_linux_read_entropy_ioctl(device, &entropy);
+    // printf("errno: %d (%s)\n", errno, strerror(errno));
+    if (retcode != 0 && (errno == ENOTTY || errno == ENOSYS)) {
+        // The ioctl call on /dev/urandom has failed due to a
+        //   - ENOTTY (unsupported action), or
+        //   - ENOSYS (invalid ioctl; this happens on MIPS, see #22).
+        //
+        // We will fall back to reading from
+        // `/proc/sys/kernel/random/entropy_avail`.  This less ideal,
+        // because it allocates a file descriptor, and it may not work
+        // in a chroot.  But at this point it seems we have no better
+        // options left.
+        strategy = PROC;
+        // Open the entropy count file
+        proc_file = fopen("/proc/sys/kernel/random/entropy_avail", "r");
+    } else if (retcode != 0) {
+        // Unrecoverable ioctl error
+        return -1;
+    }
+    if (entropy >= bits) {
+        return 0;
+    }
+
+    do {
+        fd = open("/dev/random", O_RDONLY);
+    } while (fd == -1 && errno == EINTR); /* EAGAIN will not occur */
+    if (fd == -1) {
+        /* Unrecoverable IO error */
+        return -1;
+    }
+
+    pfd.fd = fd;
+    pfd.events = POLLIN;
+    for (;;) {
+        retcode = poll(&pfd, 1, -1);
+        if (retcode == -1 && (errno == EINTR || errno == EAGAIN)) {
+            continue;
+        } else if (retcode == 1) {
+            if (strategy == IOCTL) {
+                retcode = randombytes_linux_read_entropy_ioctl(device, &entropy);
+            } else if (strategy == PROC) {
+                retcode = randombytes_linux_read_entropy_proc(proc_file, &entropy);
+            } else {
+                return -1; // Unreachable
+            }
+
+            if (retcode != 0) {
+                // Unrecoverable I/O error
+                retcode_error = retcode;
+                break;
+            }
+            if (entropy >= bits) {
+                break;
+            }
+        } else {
+            // Unreachable: poll() should only return -1 or 1
+            retcode_error = -1;
+            break;
+        }
+    }
+    do {
+        retcode = close(fd);
+    } while (retcode == -1 && errno == EINTR);
+    if (strategy == PROC) {
+        do {
+            retcode = fclose(proc_file);
+        } while (retcode == -1 && errno == EINTR);
+    }
+    if (retcode_error != 0) {
+        return retcode_error;
+    }
+    return retcode;
+}
+
+static int randombytes_linux_randombytes_urandom(void *buf, size_t n) {
+    int fd;
+    size_t offset = 0, count;
+    ssize_t tmp;
+    do {
+        fd = open("/dev/urandom", O_RDONLY);
+    } while (fd == -1 && errno == EINTR);
+    if (fd == -1) {
+        return -1;
+    }
+    if (randombytes_linux_wait_for_entropy(fd) == -1) {
+        return -1;
+    }
+
+    while (n > 0) {
+        count = n <= SSIZE_MAX ? n : SSIZE_MAX;
+        tmp = read(fd, (char *)buf + offset, count);
+        if (tmp == -1 && (errno == EAGAIN || errno == EINTR)) {
+            continue;
+        }
+        if (tmp == -1) {
+            return -1;    /* Unrecoverable IO error */
+        }
+        offset += tmp;
+        n -= tmp;
+    }
+    close(fd);
+    assert(n == 0);
+    return 0;
+}
+#endif /* defined(__linux__) && !defined(SYS_getrandom) */
+
+#if defined(BSD)
+static int randombytes_bsd_randombytes(void *buf, size_t n) {
+    arc4random_buf(buf, n);
+    return 0;
+}
+#endif /* defined(BSD) */
+
+#if defined(__EMSCRIPTEN__)
+static int randombytes_js_randombytes_nodejs(void *buf, size_t n) {
+    const int ret = EM_ASM_INT({
+        var crypto;
+        try {
+            crypto = require('crypto');
+        } catch (error) {
+            return -2;
+        }
+        try {
+            writeArrayToMemory(crypto.randomBytes($1), $0);
+            return 0;
+        } catch (error) {
+            return -1;
+        }
+    }, buf, n);
+    switch (ret) {
+    case 0:
+        return 0;
+    case -1:
+        errno = EINVAL;
+        return -1;
+    case -2:
+        errno = ENOSYS;
+        return -1;
+    }
+    assert(false); // Unreachable
+}
+#endif /* defined(__EMSCRIPTEN__) */
+#include "psa/crypto.h"
+int randombytes(uint8_t *output, size_t n) {
+    void *buf = (void *)output;
+    #if defined(__EMSCRIPTEN__)
+    return randombytes_js_randombytes_nodejs(buf, n);
+    #elif defined(__linux__)
+    # if defined(USE_GLIBC)
+    /* Use getrandom system call */
+    return randombytes_linux_randombytes_getrandom(buf, n);
+    # elif defined(SYS_getrandom)
+    /* Use getrandom system call */
+    return randombytes_linux_randombytes_getrandom(buf, n);
+    # else
+    /* When we have enough entropy, we can read from /dev/urandom */
+    return randombytes_linux_randombytes_urandom(buf, n);
+    # endif
+    #elif defined(BSD)
+    /* Use arc4random system call */
+    return randombytes_bsd_randombytes(buf, n);
+    #elif defined(_WIN32)
+    /* Use windows API */
+    return randombytes_win32_randombytes(buf, n);
+    #elif defined(__wasi__)
+    /* Use WASI */
+    return randombytes_wasi_randombytes(buf, n);
+    #else
+    psa_generate_random(buf, n);
+    return 0;
+//# error "randombytes(...) is not supported on this platform"
+    #endif
+}
diff --git a/library/randombytes.h b/library/randombytes.h
new file mode 100644
index 000000000000..b98761cfaecd
--- /dev/null
+++ b/library/randombytes.h
@@ -0,0 +1,27 @@
+#ifndef PQCLEAN_RANDOMBYTES_H
+#define PQCLEAN_RANDOMBYTES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stdint.h>
+
+#ifdef _WIN32
+/* Load size_t on windows */
+#include <crtdefs.h>
+#else
+#include <unistd.h>
+#endif /* _WIN32 */
+
+/*
+ * Write `n` bytes of high quality random bytes to `buf`
+ */
+#define randombytes     PQCLEAN_randombytes
+int randombytes(uint8_t *output, size_t n);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* PQCLEAN_RANDOMBYTES_H */
diff --git a/library/reduce.c b/library/reduce.c
new file mode 100644
index 000000000000..a2ecba6aaf21
--- /dev/null
+++ b/library/reduce.c
@@ -0,0 +1,41 @@
+#include "params.h"
+#include "reduce.h"
+#include <stdint.h>
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_montgomery_reduce
+*
+* Description: Montgomery reduction; given a 32-bit integer a, computes
+*              16-bit integer congruent to a * R^-1 mod q, where R=2^16
+*
+* Arguments:   - int32_t a: input integer to be reduced;
+*                           has to be in {-q2^15,...,q2^15-1}
+*
+* Returns:     integer in {-q+1,...,q-1} congruent to a * R^-1 modulo q.
+**************************************************/
+int16_t PQCLEAN_MLKEM768_CLEAN_montgomery_reduce(int32_t a) {
+    int16_t t;
+
+    t = (int16_t)a * QINV;
+    t = (a - (int32_t)t * KYBER_Q) >> 16;
+    return t;
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_barrett_reduce
+*
+* Description: Barrett reduction; given a 16-bit integer a, computes
+*              centered representative congruent to a mod q in {-(q-1)/2,...,(q-1)/2}
+*
+* Arguments:   - int16_t a: input integer to be reduced
+*
+* Returns:     integer in {-(q-1)/2,...,(q-1)/2} congruent to a modulo q.
+**************************************************/
+int16_t PQCLEAN_MLKEM768_CLEAN_barrett_reduce(int16_t a) {
+    int16_t t;
+    const int16_t v = ((1 << 26) + KYBER_Q / 2) / KYBER_Q;
+
+    t  = ((int32_t)v * a + (1 << 25)) >> 26;
+    t *= KYBER_Q;
+    return a - t;
+}
diff --git a/library/reduce.h b/library/reduce.h
new file mode 100644
index 000000000000..1b2a09e48692
--- /dev/null
+++ b/library/reduce.h
@@ -0,0 +1,13 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_REDUCE_H
+#define PQCLEAN_MLKEM768_CLEAN_REDUCE_H
+#include "params.h"
+#include <stdint.h>
+
+#define MONT (-1044) // 2^16 mod q
+#define QINV (-3327) // q^-1 mod 2^16
+
+int16_t PQCLEAN_MLKEM768_CLEAN_montgomery_reduce(int32_t a);
+
+int16_t PQCLEAN_MLKEM768_CLEAN_barrett_reduce(int16_t a);
+
+#endif
diff --git a/library/ssl_tls13_client.c b/library/ssl_tls13_client.c
index fe187e8c4e0f..b8acb98697c3 100644
--- a/library/ssl_tls13_client.c
+++ b/library/ssl_tls13_client.c
@@ -465,9 +465,10 @@ static int ssl_tls13_parse_hrr_key_share_ext(mbedtls_ssl_context *ssl,
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
 }
 
-#include "fips203ipd.h"
 #include "fips202.h"
-extern struct X25519Kyber768_ctx *fips203ipd_kem;
+#include "kem.h"
+
+extern struct X25519Kyber768_ctx *ml_kem768;
 /*
  * ssl_tls13_parse_key_share_ext()
  *      Parse key_share extension in Server Hello
@@ -530,11 +531,13 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
         const unsigned char *x25519key = p;
         p += 32;//KEM public key start position
 
-        fips203ipd_kem768_decaps(fips203ipd_kem->fips203ipd_ss, p, fips203ipd_kem->fips203ipd_dk);
+		ret = PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(ml_kem768->_ss, p, ml_kem768->_dk);
+		if(ret != 0) 
+            return ret;
 
         uint8_t k_and_cthash[64];
         uint8_t kem_ss[32];
-        memcpy(k_and_cthash, fips203ipd_kem->fips203ipd_ss, 32);
+        memcpy(k_and_cthash, ml_kem768->_ss, 32);
 
         ret = mbedtls_sha3(MBEDTLS_SHA3_256, p, end-p, &k_and_cthash[32], 32);
         if(ret != 0) 
@@ -546,7 +549,7 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
         memcpy(handshake->xxdh_psa_peerkey, x25519key, 32);
         memcpy(&handshake->xxdh_psa_peerkey[32], kem_ss, 32);
         handshake->xxdh_psa_peerkey_len = 64;
-        mbedtls_zeroize_and_free(fips203ipd_kem, sizeof(struct X25519Kyber768_ctx));//free(fips203ipd_kem);
+        mbedtls_zeroize_and_free(ml_kem768, sizeof(struct X25519Kyber768_ctx));
 
         return 0;
 
diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index 998d45c229f9..8d627169575c 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1532,22 +1532,21 @@ static psa_status_t  mbedtls_ssl_get_psa_ffdh_info_from_tls_id(
 }
 #endif /* PSA_WANT_ALG_FFDH */
 
-#include "fips203ipd.h"
+#include "kem.h"
 #define X25519_KEY_SIZE_BYTES 32
-struct X25519Kyber768_ctx *fips203ipd_kem;
-static int fips203ipd_genkemkey(void)
+struct X25519Kyber768_ctx *ml_kem768;
+static int ml_kem768_genkemkey(void)
 {
     uint8_t keygen_seed[64] = { 0 };
     int ret;
-    fips203ipd_kem = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));
-    if(fips203ipd_kem != NULL)
+    ml_kem768 = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));
+    if(ml_kem768 != NULL)
     {
         ret = psa_generate_random(keygen_seed, sizeof(keygen_seed));
         if(ret != 0)
             return ret;
         else
-            fips203ipd_kem768_keygen(fips203ipd_kem->fips203ipd_ek, fips203ipd_kem->fips203ipd_dk, keygen_seed);
-        return 0;
+            return PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair(ml_kem768->_ek, ml_kem768->_dk);
     }
     else{
         return PSA_ERROR_INSUFFICIENT_MEMORY;
@@ -1573,7 +1572,7 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
     unsigned char x25519_pubkey[X25519_KEY_SIZE_BYTES];
 
     //ML-KEM768 bytes
-    if(buf_size < FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES) 
+    if(buf_size < KYBER_PUBLICKEYBYTES+X25519_KEY_SIZE_BYTES) 
     {
         MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: Not enough memory for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
         return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
@@ -1581,7 +1580,7 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
     else 
     {
         //X25519KYBER768Dreaft00 key
-        ret = fips203ipd_genkemkey();	
+        ret = ml_kem768_genkemkey();	
         if(ret != 0)
             return ret;
         //ECDSA public key
@@ -1628,10 +1627,10 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
             return ret;
         }
 
-        *out_len = FIPS203IPD_KEM768_EK_SIZE+X25519_KEY_SIZE_BYTES;
+        *out_len = KYBER_PUBLICKEYBYTES+X25519_KEY_SIZE_BYTES;
 
         memcpy(buf, x25519_pubkey, X25519_KEY_SIZE_BYTES);
-        memcpy(&buf[X25519_KEY_SIZE_BYTES], fips203ipd_kem->fips203ipd_ek, FIPS203IPD_KEM768_EK_SIZE);
+        memcpy(&buf[X25519_KEY_SIZE_BYTES], ml_kem768->_ek, KYBER_PUBLICKEYBYTES);
     }
     return 0;	
 }
diff --git a/library/symmetric-shake.c b/library/symmetric-shake.c
new file mode 100644
index 000000000000..09ccdabf984b
--- /dev/null
+++ b/library/symmetric-shake.c
@@ -0,0 +1,71 @@
+#include "fips202.h"
+#include "params.h"
+#include "symmetric.h"
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_kyber_shake128_absorb
+*
+* Description: Absorb step of the SHAKE128 specialized for the Kyber context.
+*
+* Arguments:   - xof_state *state: pointer to (uninitialized) output Keccak state
+*              - const uint8_t *seed: pointer to KYBER_SYMBYTES input to be absorbed into state
+*              - uint8_t i: additional byte of input
+*              - uint8_t j: additional byte of input
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_kyber_shake128_absorb(xof_state *state,
+        const uint8_t seed[KYBER_SYMBYTES],
+        uint8_t x,
+        uint8_t y) {
+    uint8_t extseed[KYBER_SYMBYTES + 2];
+
+    memcpy(extseed, seed, KYBER_SYMBYTES);
+    extseed[KYBER_SYMBYTES + 0] = x;
+    extseed[KYBER_SYMBYTES + 1] = y;
+
+    shake128_absorb(state, extseed, sizeof(extseed));
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_kyber_shake256_prf
+*
+* Description: Usage of SHAKE256 as a PRF, concatenates secret and public input
+*              and then generates outlen bytes of SHAKE256 output
+*
+* Arguments:   - uint8_t *out: pointer to output
+*              - size_t outlen: number of requested output bytes
+*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
+*              - uint8_t nonce: single-byte nonce (public PRF input)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce) {
+    uint8_t extkey[KYBER_SYMBYTES + 1];
+
+    memcpy(extkey, key, KYBER_SYMBYTES);
+    extkey[KYBER_SYMBYTES] = nonce;
+
+    shake256(out, outlen, extkey, sizeof(extkey));
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_kyber_shake256_prf
+*
+* Description: Usage of SHAKE256 as a PRF, concatenates secret and public input
+*              and then generates outlen bytes of SHAKE256 output
+*
+* Arguments:   - uint8_t *out: pointer to output
+*              - size_t outlen: number of requested output bytes
+*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
+*              - uint8_t nonce: single-byte nonce (public PRF input)
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_kyber_shake256_rkprf(uint8_t out[KYBER_SSBYTES], const uint8_t key[KYBER_SYMBYTES], const uint8_t input[KYBER_CIPHERTEXTBYTES]) {
+    shake256incctx s;
+
+    shake256_inc_init(&s);
+    shake256_inc_absorb(&s, key, KYBER_SYMBYTES);
+    shake256_inc_absorb(&s, input, KYBER_CIPHERTEXTBYTES);
+    shake256_inc_finalize(&s);
+    shake256_inc_squeeze(out, KYBER_SSBYTES, &s);
+    shake256_inc_ctx_release(&s);
+}
diff --git a/library/symmetric.h b/library/symmetric.h
new file mode 100644
index 000000000000..1ce26a6cf5c0
--- /dev/null
+++ b/library/symmetric.h
@@ -0,0 +1,30 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_SYMMETRIC_H
+#define PQCLEAN_MLKEM768_CLEAN_SYMMETRIC_H
+#include "fips202.h"
+#include "params.h"
+#include <stddef.h>
+#include <stdint.h>
+
+
+typedef shake128ctx xof_state;
+
+void PQCLEAN_MLKEM768_CLEAN_kyber_shake128_absorb(xof_state *s,
+        const uint8_t seed[KYBER_SYMBYTES],
+        uint8_t x,
+        uint8_t y);
+
+void PQCLEAN_MLKEM768_CLEAN_kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce);
+
+void PQCLEAN_MLKEM768_CLEAN_kyber_shake256_rkprf(uint8_t out[KYBER_SSBYTES], const uint8_t key[KYBER_SYMBYTES], const uint8_t input[KYBER_CIPHERTEXTBYTES]);
+
+#define XOF_BLOCKBYTES SHAKE128_RATE
+
+#define hash_h(OUT, IN, INBYTES) sha3_256(OUT, IN, INBYTES)
+#define hash_g(OUT, IN, INBYTES) sha3_512(OUT, IN, INBYTES)
+#define xof_absorb(STATE, SEED, X, Y) PQCLEAN_MLKEM768_CLEAN_kyber_shake128_absorb(STATE, SEED, X, Y)
+#define xof_squeezeblocks(OUT, OUTBLOCKS, STATE) shake128_squeezeblocks(OUT, OUTBLOCKS, STATE)
+#define xof_ctx_release(STATE) shake128_ctx_release(STATE)
+#define prf(OUT, OUTBYTES, KEY, NONCE) PQCLEAN_MLKEM768_CLEAN_kyber_shake256_prf(OUT, OUTBYTES, KEY, NONCE)
+#define rkprf(OUT, KEY, INPUT) PQCLEAN_MLKEM768_CLEAN_kyber_shake256_rkprf(OUT, KEY, INPUT)
+
+#endif /* SYMMETRIC_H */
diff --git a/library/verify.c b/library/verify.c
new file mode 100644
index 000000000000..c31a57f950c6
--- /dev/null
+++ b/library/verify.c
@@ -0,0 +1,66 @@
+//SM #include "compat.h"
+#include "verify.h"
+#include <stddef.h>
+#include <stdint.h>
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_verify
+*
+* Description: Compare two arrays for equality in constant time.
+*
+* Arguments:   const uint8_t *a: pointer to first byte array
+*              const uint8_t *b: pointer to second byte array
+*              size_t len:       length of the byte arrays
+*
+* Returns 0 if the byte arrays are equal, 1 otherwise
+**************************************************/
+int PQCLEAN_MLKEM768_CLEAN_verify(const uint8_t *a, const uint8_t *b, size_t len) {
+    size_t i;
+    uint8_t r = 0;
+
+    for (i = 0; i < len; i++) {
+        r |= a[i] ^ b[i];
+    }
+
+    return (-(uint64_t)r) >> 63;
+}
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_cmov
+*
+* Description: Copy len bytes from x to r if b is 1;
+*              don't modify x if b is 0. Requires b to be in {0,1};
+*              assumes two's complement representation of negative integers.
+*              Runs in constant time.
+*
+* Arguments:   uint8_t *r:       pointer to output byte array
+*              const uint8_t *x: pointer to input byte array
+*              size_t len:       Amount of bytes to be copied
+*              uint8_t b:        Condition bit; has to be in {0,1}
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b) {
+    size_t i;
+
+    //SM PQCLEAN_PREVENT_BRANCH_HACK(b);
+
+    b = -b;
+    for (i = 0; i < len; i++) {
+        r[i] ^= b & (r[i] ^ x[i]);
+    }
+}
+
+
+/*************************************************
+* Name:        PQCLEAN_MLKEM768_CLEAN_cmov_int16
+*
+* Description: Copy input v to *r if b is 1, don't modify *r if b is 0.
+*              Requires b to be in {0,1};
+*              Runs in constant time.
+*
+* Arguments:   int16_t *r:       pointer to output int16_t
+*              int16_t v:        input int16_t
+*              uint8_t b:        Condition bit; has to be in {0,1}
+**************************************************/
+void PQCLEAN_MLKEM768_CLEAN_cmov_int16(int16_t *r, int16_t v, uint16_t b) {
+    b = -b;
+    *r ^= b & ((*r) ^ v);
+}
diff --git a/library/verify.h b/library/verify.h
new file mode 100644
index 000000000000..64d8203b9efb
--- /dev/null
+++ b/library/verify.h
@@ -0,0 +1,13 @@
+#ifndef PQCLEAN_MLKEM768_CLEAN_VERIFY_H
+#define PQCLEAN_MLKEM768_CLEAN_VERIFY_H
+#include "params.h"
+#include <stddef.h>
+#include <stdint.h>
+
+int PQCLEAN_MLKEM768_CLEAN_verify(const uint8_t *a, const uint8_t *b, size_t len);
+
+void PQCLEAN_MLKEM768_CLEAN_cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b);
+
+void PQCLEAN_MLKEM768_CLEAN_cmov_int16(int16_t *r, int16_t v, uint16_t b);
+
+#endif

From 9063a094ba22eb82b46b0763a32d9285b592fce0 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Tue, 22 Oct 2024 15:32:48 +0100
Subject: [PATCH 09/10] psa modification

---
 include/psa/crypto.h        |  3 +++
 library/kem.h               |  1 -
 library/psa_crypto.c        | 40 +++++++++++++++++++++++++++++++++++++
 library/ssl_tls13_client.c  |  9 ++-------
 library/ssl_tls13_generic.c | 23 +++------------------
 5 files changed, 48 insertions(+), 28 deletions(-)

diff --git a/include/psa/crypto.h b/include/psa/crypto.h
index 2bbcea3ee0f7..ef734c5395e8 100644
--- a/include/psa/crypto.h
+++ b/include/psa/crypto.h
@@ -4213,6 +4213,9 @@ psa_status_t psa_generate_random(uint8_t *output,
  */
 psa_status_t psa_generate_key(const psa_key_attributes_t *attributes,
                               mbedtls_svc_key_id_t *key);
+psa_status_t psa_generate_X25519KYBER768Draft00_key(void);    
+psa_status_t psa_decapsulate_X25519KYBER768Draft00(const unsigned char *cipher_text, unsigned char *shared_secret);
+psa_status_t psa_export_X25519KYBER768Draft00_public_key(unsigned char *public_key);                          
 
 /**
  * \brief Generate a key or key pair using custom production parameters.
diff --git a/library/kem.h b/library/kem.h
index a78b9fc1e297..d4e58b36d097 100644
--- a/library/kem.h
+++ b/library/kem.h
@@ -22,7 +22,6 @@ int PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const
 
 struct X25519Kyber768_ctx
 {
-	uint8_t _ss[KYBER_SSBYTES];
 	uint8_t _ek[KYBER_PUBLICKEYBYTES]; // encapsulation key
 	uint8_t _dk[KYBER_SECRETKEYBYTES]; // decapsulation key
 };
diff --git a/library/psa_crypto.c b/library/psa_crypto.c
index c4f41db10b60..8739ccfdcd29 100644
--- a/library/psa_crypto.c
+++ b/library/psa_crypto.c
@@ -8080,6 +8080,46 @@ psa_status_t psa_generate_key(const psa_key_attributes_t *attributes,
                                    key);
 }
 
+#include "kem.h"
+static struct X25519Kyber768_ctx *ml_kem768;
+psa_status_t psa_generate_X25519KYBER768Draft00_key(void)
+{
+    uint8_t keygen_seed[64] = { 0 };
+    ml_kem768 = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));
+    if(ml_kem768 != NULL)
+    {
+        int ret;
+        ret = psa_generate_random(keygen_seed, sizeof(keygen_seed));
+        if(ret != 0)
+            return ret;
+        else
+        {
+            ret = PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair(ml_kem768->_ek, ml_kem768->_dk);
+        	if(ret == 0) return PSA_SUCCESS;
+            else return PSA_ERROR_GENERIC_ERROR;
+        }
+    }
+    else{
+        return PSA_ERROR_INSUFFICIENT_MEMORY;
+    }
+}
+
+psa_status_t psa_decapsulate_X25519KYBER768Draft00(const unsigned char *cipher_text, unsigned char *shared_secret)
+{
+	int ret = PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(shared_secret, cipher_text, ml_kem768->_dk);    
+	mbedtls_zeroize_and_free(ml_kem768, sizeof(struct X25519Kyber768_ctx));
+	if(ret == 0)
+		return PSA_SUCCESS;
+	else
+		return PSA_ERROR_GENERIC_ERROR;
+}
+
+psa_status_t psa_export_X25519KYBER768Draft00_public_key(unsigned char *public_key)
+{
+    memcpy(public_key, ml_kem768->_ek, KYBER_PUBLICKEYBYTES);
+    return PSA_SUCCESS;
+}
+
 /****************************************************************/
 /* Module setup */
 /****************************************************************/
diff --git a/library/ssl_tls13_client.c b/library/ssl_tls13_client.c
index b8acb98697c3..05cfbbfc9f10 100644
--- a/library/ssl_tls13_client.c
+++ b/library/ssl_tls13_client.c
@@ -467,8 +467,6 @@ static int ssl_tls13_parse_hrr_key_share_ext(mbedtls_ssl_context *ssl,
 
 #include "fips202.h"
 #include "kem.h"
-
-extern struct X25519Kyber768_ctx *ml_kem768;
 /*
  * ssl_tls13_parse_key_share_ext()
  *      Parse key_share extension in Server Hello
@@ -531,13 +529,11 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
         const unsigned char *x25519key = p;
         p += 32;//KEM public key start position
 
-		ret = PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(ml_kem768->_ss, p, ml_kem768->_dk);
+		uint8_t k_and_cthash[64];
+		ret = psa_decapsulate_X25519KYBER768Draft00(p, k_and_cthash);
 		if(ret != 0) 
             return ret;
-
-        uint8_t k_and_cthash[64];
         uint8_t kem_ss[32];
-        memcpy(k_and_cthash, ml_kem768->_ss, 32);
 
         ret = mbedtls_sha3(MBEDTLS_SHA3_256, p, end-p, &k_and_cthash[32], 32);
         if(ret != 0) 
@@ -549,7 +545,6 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
         memcpy(handshake->xxdh_psa_peerkey, x25519key, 32);
         memcpy(&handshake->xxdh_psa_peerkey[32], kem_ss, 32);
         handshake->xxdh_psa_peerkey_len = 64;
-        mbedtls_zeroize_and_free(ml_kem768, sizeof(struct X25519Kyber768_ctx));
 
         return 0;
 
diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index 8d627169575c..cbca428df62c 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1534,24 +1534,7 @@ static psa_status_t  mbedtls_ssl_get_psa_ffdh_info_from_tls_id(
 
 #include "kem.h"
 #define X25519_KEY_SIZE_BYTES 32
-struct X25519Kyber768_ctx *ml_kem768;
-static int ml_kem768_genkemkey(void)
-{
-    uint8_t keygen_seed[64] = { 0 };
-    int ret;
-    ml_kem768 = mbedtls_calloc(1, sizeof(struct X25519Kyber768_ctx));
-    if(ml_kem768 != NULL)
-    {
-        ret = psa_generate_random(keygen_seed, sizeof(keygen_seed));
-        if(ret != 0)
-            return ret;
-        else
-            return PQCLEAN_MLKEM768_CLEAN_crypto_kem_keypair(ml_kem768->_ek, ml_kem768->_dk);
-    }
-    else{
-        return PSA_ERROR_INSUFFICIENT_MEMORY;
-    }
-}
+
 
 int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
     mbedtls_ssl_context *ssl,
@@ -1580,7 +1563,7 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
     else 
     {
         //X25519KYBER768Dreaft00 key
-        ret = ml_kem768_genkemkey();	
+        ret = psa_generate_X25519KYBER768Draft00_key();
         if(ret != 0)
             return ret;
         //ECDSA public key
@@ -1630,7 +1613,7 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
         *out_len = KYBER_PUBLICKEYBYTES+X25519_KEY_SIZE_BYTES;
 
         memcpy(buf, x25519_pubkey, X25519_KEY_SIZE_BYTES);
-        memcpy(&buf[X25519_KEY_SIZE_BYTES], ml_kem768->_ek, KYBER_PUBLICKEYBYTES);
+		psa_export_X25519KYBER768Draft00_public_key(&buf[X25519_KEY_SIZE_BYTES]);
     }
     return 0;	
 }

From 7239a9942bb00219322e9ddec3fe3ec7bef612a0 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Thu, 7 Nov 2024 14:29:30 +0000
Subject: [PATCH 10/10] support key share extension

---
 include/psa/crypto.h        |  2 +-
 library/psa_crypto.c        | 22 +++++++++++--
 library/ssl_tls13_client.c  | 64 +++++++++++++++++++++----------------
 library/ssl_tls13_generic.c | 34 ++------------------
 library/ssl_tls13_keys.c    |  1 +
 5 files changed, 60 insertions(+), 63 deletions(-)

diff --git a/include/psa/crypto.h b/include/psa/crypto.h
index ef734c5395e8..98bdda27ffe8 100644
--- a/include/psa/crypto.h
+++ b/include/psa/crypto.h
@@ -4214,7 +4214,7 @@ psa_status_t psa_generate_random(uint8_t *output,
 psa_status_t psa_generate_key(const psa_key_attributes_t *attributes,
                               mbedtls_svc_key_id_t *key);
 psa_status_t psa_generate_X25519KYBER768Draft00_key(void);    
-psa_status_t psa_decapsulate_X25519KYBER768Draft00(const unsigned char *cipher_text, unsigned char *shared_secret);
+psa_status_t psa_decapsulate_X25519KYBER768Draft00(const unsigned char *cipher_text_start, const unsigned char *cipher_text_end, uint8_t *kem_ss);
 psa_status_t psa_export_X25519KYBER768Draft00_public_key(unsigned char *public_key);                          
 
 /**
diff --git a/library/psa_crypto.c b/library/psa_crypto.c
index 8739ccfdcd29..365484f67c27 100644
--- a/library/psa_crypto.c
+++ b/library/psa_crypto.c
@@ -8081,6 +8081,7 @@ psa_status_t psa_generate_key(const psa_key_attributes_t *attributes,
 }
 
 #include "kem.h"
+#include "fips202.h"
 static struct X25519Kyber768_ctx *ml_kem768;
 psa_status_t psa_generate_X25519KYBER768Draft00_key(void)
 {
@@ -8104,14 +8105,29 @@ psa_status_t psa_generate_X25519KYBER768Draft00_key(void)
     }
 }
 
-psa_status_t psa_decapsulate_X25519KYBER768Draft00(const unsigned char *cipher_text, unsigned char *shared_secret)
+psa_status_t psa_decapsulate_X25519KYBER768Draft00(const unsigned char *cipher_text_start, const unsigned char *cipher_text_end, uint8_t *kem_ss)
 {
-	int ret = PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(shared_secret, cipher_text, ml_kem768->_dk);    
+	uint8_t k_and_cthash[64];
+	
+	int ret = PQCLEAN_MLKEM768_CLEAN_crypto_kem_dec(k_and_cthash, cipher_text_start, ml_kem768->_dk);
 	mbedtls_zeroize_and_free(ml_kem768, sizeof(struct X25519Kyber768_ctx));
 	if(ret == 0)
-		return PSA_SUCCESS;
+	{
+		ret = mbedtls_sha3(MBEDTLS_SHA3_256, cipher_text_start, cipher_text_end - cipher_text_start, &k_and_cthash[32], 32);
+        if(ret == 0)
+		{
+            shake256(kem_ss, 32, k_and_cthash, 64);
+			return PSA_SUCCESS;
+		}
+		else
+		{
+			return ret;
+		}
+	}
 	else
+	{
 		return PSA_ERROR_GENERIC_ERROR;
+	}
 }
 
 psa_status_t psa_export_X25519KYBER768Draft00_public_key(unsigned char *public_key)
diff --git a/library/ssl_tls13_client.c b/library/ssl_tls13_client.c
index 05cfbbfc9f10..0838822fdae5 100644
--- a/library/ssl_tls13_client.c
+++ b/library/ssl_tls13_client.c
@@ -182,7 +182,8 @@ static int ssl_tls13_reset_key_share(mbedtls_ssl_context *ssl)
 
 #if defined(MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_SOME_EPHEMERAL_ENABLED)
     if (mbedtls_ssl_tls13_named_group_is_ecdhe(group_id) ||
-        mbedtls_ssl_tls13_named_group_is_ffdh(group_id)) {
+        mbedtls_ssl_tls13_named_group_is_ffdh(group_id) ||
+		(group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)) {
         int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
         psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 
@@ -193,7 +194,8 @@ static int ssl_tls13_reset_key_share(mbedtls_ssl_context *ssl)
             MBEDTLS_SSL_DEBUG_RET(1, "psa_destroy_key", ret);
             return ret;
         }
-
+		ssl->handshake->offered_group_id = 0;
+		psa_crypto_init();
         ssl->handshake->xxdh_psa_privkey = MBEDTLS_SVC_KEY_ID_INIT;
         return 0;
     } else
@@ -291,7 +293,6 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
         MBEDTLS_SSL_PROC_CHK(ssl_tls13_get_default_group_id(ssl,
                                                             &group_id));
     }
-    group_id = MBEDTLS_SSL_TLS_GROUP_X25519KYBER768;//SM I have forced it to use this X25519KYBER76Draft00
 
     /*
      * Dispatch to type-specific key generation function.
@@ -323,21 +324,6 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
             return ret;
         }
 
-        /* Write group */
-        MBEDTLS_PUT_UINT16_BE(group_id, group, 0);
-        /* Write key_exchange_length */
-        MBEDTLS_PUT_UINT16_BE(key_exchange_len, group, 2);
-    }  
-    else if((group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768))
-    {
-        MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: adding key share extension for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
-        unsigned char *group = p;
-        size_t key_exchange_len = 0;
-        MBEDTLS_SSL_CHK_BUF_PTR(p, end, 4);
-        p += 4;
-        mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
-            ssl, group_id, p, end, &key_exchange_len);
-        p += key_exchange_len;
         /* Write group */
         MBEDTLS_PUT_UINT16_BE(group_id, group, 0);
         /* Write key_exchange_length */
@@ -349,6 +335,25 @@ static int ssl_tls13_write_key_share_ext(mbedtls_ssl_context *ssl,
     } else {
         return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
     }
+	
+	/* 
+		2nd keyshare extension for X25519KYBER76Draft00
+		SM: It is forced to set the group_id as MBEDTLS_SSL_TLS_GROUP_X25519KYBER768
+			Based on the sever hello negotiation logic will be .
+	*/
+	group_id = MBEDTLS_SSL_TLS_GROUP_X25519KYBER768;
+	MBEDTLS_SSL_DEBUG_MSG(2, ("client hello: adding key share extension for MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
+	unsigned char *group = p;
+	size_t key_exchange_len = 0;
+	MBEDTLS_SSL_CHK_BUF_PTR(p, end, 4);
+	p += 4;
+	mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
+		ssl, group_id, p, end, &key_exchange_len);
+	p += key_exchange_len;
+	/* Write group */
+	MBEDTLS_PUT_UINT16_BE(group_id, group, 0);
+	/* Write key_exchange_length */
+	MBEDTLS_PUT_UINT16_BE(key_exchange_len, group, 2);
 
     /* Length of client_shares */
     client_shares_len = p - client_shares;
@@ -465,8 +470,6 @@ static int ssl_tls13_parse_hrr_key_share_ext(mbedtls_ssl_context *ssl,
 #endif /* PSA_WANT_ALG_ECDH || PSA_WANT_ALG_FFDH */
 }
 
-#include "fips202.h"
-#include "kem.h"
 /*
  * ssl_tls13_parse_key_share_ext()
  *      Parse key_share extension in Server Hello
@@ -498,6 +501,15 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
 
     /* Check that the chosen group matches the one we offered. */
     offered_group = ssl->handshake->offered_group_id;
+	
+	/*SM: If server doesnt support hybrid Kyber we reset all our setting */
+	if((offered_group == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768) && (offered_group != group))
+	{
+		if(mbedtls_ssl_tls13_named_group_is_ecdhe(group) ||
+		 mbedtls_ssl_tls13_named_group_is_ffdh(group))
+			offered_group = ssl->handshake->offered_group_id = group;
+	}
+	
     if (offered_group != group) {
         MBEDTLS_SSL_DEBUG_MSG(
             1, ("Invalid server key share, our group %u, their group %u",
@@ -524,21 +536,17 @@ static int ssl_tls13_parse_key_share_ext(mbedtls_ssl_context *ssl,
     else if(group == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
     {
         ret = MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER;
+		
+		MBEDTLS_SSL_DEBUG_MSG(2,("Group name: MBEDTLS_SSL_TLS_GROUP_X25519KYBER768"));
 
         p += 2;//length
         const unsigned char *x25519key = p;
         p += 32;//KEM public key start position
 
-		uint8_t k_and_cthash[64];
-		ret = psa_decapsulate_X25519KYBER768Draft00(p, k_and_cthash);
+		uint8_t kem_ss[32];
+		ret = psa_decapsulate_X25519KYBER768Draft00(p, end, kem_ss);
 		if(ret != 0) 
             return ret;
-        uint8_t kem_ss[32];
-
-        ret = mbedtls_sha3(MBEDTLS_SHA3_256, p, end-p, &k_and_cthash[32], 32);
-        if(ret != 0) 
-            return ret;
-        shake256(kem_ss, 32, k_and_cthash, 64);
 
         mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 
diff --git a/library/ssl_tls13_generic.c b/library/ssl_tls13_generic.c
index cbca428df62c..cbcadfae478c 100644
--- a/library/ssl_tls13_generic.c
+++ b/library/ssl_tls13_generic.c
@@ -1567,37 +1567,9 @@ int mbedtls_ssl_tls13_generate_and_write_X25519Kyber768_key_exchange(
         if(ret != 0)
             return ret;
         //ECDSA public key
-        if (mbedtls_ssl_get_psa_curve_info_from_tls_id(
-                MBEDTLS_SSL_IANA_TLS_GROUP_X25519, &key_type, &bits) == PSA_SUCCESS)
-        {
-            alg = PSA_ALG_ECDH;
-        }
-        if (key_type == PSA_KEY_TYPE_NONE) {
-            return MBEDTLS_ERR_SSL_HANDSHAKE_FAILURE;
-        }
-
-        if (buf_size < PSA_BITS_TO_BYTES(bits)) {
-            return MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
-        }
-
-        handshake->xxdh_psa_type = key_type;
-        ssl->handshake->xxdh_psa_bits = bits;
-
-        key_attributes = psa_key_attributes_init();
-        psa_set_key_usage_flags(&key_attributes, PSA_KEY_USAGE_DERIVE);
-        psa_set_key_algorithm(&key_attributes, alg);
-        psa_set_key_type(&key_attributes, handshake->xxdh_psa_type);
-        psa_set_key_bits(&key_attributes, handshake->xxdh_psa_bits);
-
-        //Generate ECDH private key.
-        status = psa_generate_key(&key_attributes,
-                                    &handshake->xxdh_psa_privkey);
-        if (status != PSA_SUCCESS) {
-            ret = PSA_TO_MBEDTLS_ERR(status);
-            MBEDTLS_SSL_DEBUG_RET(1, "psa_generate_key", ret);
-            return ret;
-
-        }
+		/*
+			The X25519 keypair generated earlier is re-used here. 
+		*/
 
         //Export the public part of the ECDH private key from PSA.
         status = psa_export_public_key(handshake->xxdh_psa_privkey,
diff --git a/library/ssl_tls13_keys.c b/library/ssl_tls13_keys.c
index 077480a01b80..df037b63e4d4 100644
--- a/library/ssl_tls13_keys.c
+++ b/library/ssl_tls13_keys.c
@@ -1525,6 +1525,7 @@ static int ssl_tls13_key_schedule_stage_handshake(mbedtls_ssl_context *ssl)
         } 
         else if(handshake->offered_group_id == MBEDTLS_SSL_TLS_GROUP_X25519KYBER768)
         {
+			MBEDTLS_SSL_DEBUG_MSG(2, ("\nMBEDTLS_SSL_TLS_GROUP_X25519KYBER768 is in use\n"));
             psa_algorithm_t alg = PSA_ALG_ECDH;
             psa_status_t status = PSA_ERROR_GENERIC_ERROR;
             psa_key_attributes_t key_attributes = PSA_KEY_ATTRIBUTES_INIT;

