From 254b64ca2193231d3599ab86fe6f613809d89823 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Wed, 11 Dec 2024 12:14:49 +0000
Subject: [PATCH 1/3] basic changes

---
 components/esp-tls/esp_tls_mbedtls.c          |  10 +
 .../mbedtls/port/esp_ds/esp_rsa_sign_alt.c    | 233 +++++++++++++++++-
 2 files changed, 242 insertions(+), 1 deletion(-)

diff --git a/components/esp-tls/esp_tls_mbedtls.c b/components/esp-tls/esp_tls_mbedtls.c
index 40898314a1d6..de20a56a728f 100644
--- a/components/esp-tls/esp_tls_mbedtls.c
+++ b/components/esp-tls/esp_tls_mbedtls.c
@@ -1149,6 +1149,15 @@ static esp_err_t esp_mbedtls_init_pk_ctx_for_ds(const void *pki)
     /* initialize the mbedtls pk context with rsa context */
     mbedtls_rsa_context rsakey;
     mbedtls_rsa_init(&rsakey);
+#ifdef	CONFIG_MBEDTLS_SSL_PROTO_TLS1_3
+    if ((ret = mbedtls_pk_setup_rsa_pss(((const esp_tls_pki_t*)pki)->pk_key, &rsakey, NULL, esp_ds_rsa_sign,
+                                        esp_ds_get_keylen )) != 0) {
+        ESP_LOGE(TAG, "Error in mbedtls_pk_setup_rsa_pss, returned -0x%04X", -ret);
+        mbedtls_print_error_msg(ret);
+        ret = ESP_FAIL;
+        goto exit;
+    }
+#else
     if ((ret = mbedtls_pk_setup_rsa_alt(((const esp_tls_pki_t*)pki)->pk_key, &rsakey, NULL, esp_ds_rsa_sign,
                                         esp_ds_get_keylen )) != 0) {
         ESP_LOGE(TAG, "Error in mbedtls_pk_setup_rsa_alt, returned -0x%04X", -ret);
@@ -1156,6 +1165,7 @@ static esp_err_t esp_mbedtls_init_pk_ctx_for_ds(const void *pki)
         ret = ESP_FAIL;
         goto exit;
     }
+#endif
     ret = esp_ds_init_data_ctx(((const esp_tls_pki_t*)pki)->esp_ds_data);
     if (ret != ESP_OK) {
         ESP_LOGE(TAG, "Failed to initialize DS parameters from nvs");
diff --git a/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c b/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c
index 6b9f8e36b6a8..80ec5a852a14 100644
--- a/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c
+++ b/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c
@@ -223,6 +223,230 @@ static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
     return ( 0 );
 }
 
+static int mgf_mask(unsigned char *dst, size_t dlen, unsigned char *src,
+                    size_t slen, mbedtls_md_type_t md_alg)
+{
+    unsigned char counter[4];
+    unsigned char *p;
+    unsigned int hlen;
+    size_t i, use_len;
+    unsigned char mask[MBEDTLS_MD_MAX_SIZE];
+    int ret = 0;
+    const mbedtls_md_info_t *md_info;
+    mbedtls_md_context_t md_ctx;
+
+    mbedtls_md_init(&md_ctx);
+    md_info = mbedtls_md_info_from_type(md_alg);
+    if (md_info == NULL) {
+        return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+    }
+
+    mbedtls_md_init(&md_ctx);
+    if ((ret = mbedtls_md_setup(&md_ctx, md_info, 0)) != 0) {
+        goto exit;
+    }
+
+    hlen = mbedtls_md_get_size(md_info);
+
+    memset(mask, 0, sizeof(mask));
+    memset(counter, 0, 4);
+
+    /* Generate and apply dbMask */
+    p = dst;
+
+    while (dlen > 0) {
+        use_len = hlen;
+        if (dlen < hlen) {
+            use_len = dlen;
+        }
+
+        if ((ret = mbedtls_md_starts(&md_ctx)) != 0) {
+            goto exit;
+        }
+        if ((ret = mbedtls_md_update(&md_ctx, src, slen)) != 0) {
+            goto exit;
+        }
+        if ((ret = mbedtls_md_update(&md_ctx, counter, 4)) != 0) {
+            goto exit;
+        }
+        if ((ret = mbedtls_md_finish(&md_ctx, mask)) != 0) {
+            goto exit;
+        }
+
+        for (i = 0; i < use_len; ++i) {
+            *p++ ^= mask[i];
+        }
+
+        counter[3]++;
+
+        dlen -= use_len;
+    }
+
+exit:
+    mbedtls_platform_zeroize(mask, sizeof(mask));
+    mbedtls_md_free(&md_ctx);
+
+    return ret;
+}
+
+static int hash_mprime(const unsigned char *hash, size_t hlen,
+                       const unsigned char *salt, size_t slen,
+                       unsigned char *out, mbedtls_md_type_t md_alg)
+{
+    const unsigned char zeros[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
+
+    mbedtls_md_context_t md_ctx;
+    int ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+
+    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type(md_alg);
+    if (md_info == NULL) {
+        return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+    }
+
+    mbedtls_md_init(&md_ctx);
+    if ((ret = mbedtls_md_setup(&md_ctx, md_info, 0)) != 0) {
+        goto exit;
+    }
+    if ((ret = mbedtls_md_starts(&md_ctx)) != 0) {
+        goto exit;
+    }
+    if ((ret = mbedtls_md_update(&md_ctx, zeros, sizeof(zeros))) != 0) {
+        goto exit;
+    }
+    if ((ret = mbedtls_md_update(&md_ctx, hash, hlen)) != 0) {
+        goto exit;
+    }
+    if ((ret = mbedtls_md_update(&md_ctx, salt, slen)) != 0) {
+        goto exit;
+    }
+    if ((ret = mbedtls_md_finish(&md_ctx, out)) != 0) {
+        goto exit;
+    }
+
+exit:
+    mbedtls_md_free(&md_ctx);
+
+    return ret;
+}
+
+static int rsa_rsassa_pss_pkcs1_v21_encode(mbedtls_rsa_context *ctx,
+                                             int (*f_rng)(void *, unsigned char *, size_t),
+                                             void *p_rng,
+                                             mbedtls_md_type_t md_alg,
+                                             unsigned int hashlen,
+                                             const unsigned char *hash,
+                                             int saltlen,
+                                             unsigned char *sig, size_t dst_len)
+{
+    size_t olen;
+    unsigned char *p = sig;
+    unsigned char *salt = NULL;
+    size_t slen, min_slen, hlen, offset = 0;
+    int ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+    size_t msb;
+    mbedtls_md_type_t hash_id;
+
+    if ((md_alg != MBEDTLS_MD_NONE || hashlen != 0) && hash == NULL) {
+        return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+    }
+
+    if (f_rng == NULL) {
+        return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+    }
+
+    olen = dst_len;
+
+    if (md_alg != MBEDTLS_MD_NONE) {
+        /* Gather length of hash to sign */
+        size_t exp_hashlen = mbedtls_md_get_size_from_type(md_alg);
+        if (exp_hashlen == 0) {
+            return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+        }
+
+        if (hashlen != exp_hashlen) {
+            return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+        }
+    }
+
+	hash_id = md_alg;
+    hlen = mbedtls_md_get_size_from_type(hash_id);
+    if (hlen == 0) {
+        return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+    }
+
+    if (saltlen == MBEDTLS_RSA_SALT_LEN_ANY) {
+        /* Calculate the largest possible salt length, up to the hash size.
+         * Normally this is the hash length, which is the maximum salt length
+         * according to FIPS 185-4 �5.5 (e) and common practice. If there is not
+         * enough room, use the maximum salt length that fits. The constraint is
+         * that the hash length plus the salt length plus 2 bytes must be at most
+         * the key length. This complies with FIPS 186-4 �5.5 (e) and RFC 8017
+         * (PKCS#1 v2.2) �9.1.1 step 3. */
+        min_slen = hlen - 2;
+        if (olen < hlen + min_slen + 2) {
+            return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+        } else if (olen >= hlen + hlen + 2) {
+            slen = hlen;
+        } else {
+            slen = olen - hlen - 2;
+        }
+    } else if ((saltlen < 0) || (saltlen + hlen + 2 > olen)) {
+        return MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
+    } else {
+        slen = (size_t) saltlen;
+    }
+
+    memset(sig, 0, olen);
+
+    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
+	msb = dst_len*8 -1;
+    p += olen - hlen - slen - 2;
+    *p++ = 0x01;
+
+
+
+    /* Generate salt of length slen in place in the encoded message */
+    salt = p;
+    if ((ret = f_rng(p_rng, salt, slen)) != 0) {
+        return MBEDTLS_ERR_RSA_RNG_FAILED;
+    }
+    p += slen;
+
+    /* Generate H = Hash( M' ) */
+    ret = hash_mprime(hash, hashlen, salt, slen, p, hash_id);
+    if (ret != 0) {
+        return ret;
+    }
+
+    /* Compensate for boundary condition when applying mask */
+    if (msb % 8 == 0) {
+        offset = 1;
+    }
+
+    /* maskedDB: Apply dbMask to DB */
+    ret = mgf_mask(sig + offset, olen - hlen - 1 - offset, p, hlen, hash_id);
+    if (ret != 0) {
+        return ret;
+    }
+
+    msb = 3071;//mbedtls_mpi_bitlen(&ctx->N) - 1;
+    sig[0] &= 0xFF >> (olen * 8 - msb);
+
+    p += hlen;
+    *p++ = 0xBC;
+	return ret;
+}
+
+static int rsa_rsassa_pkcs1_v21_encode( mbedtls_rsa_context *ctx,
+										int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
+										mbedtls_md_type_t md_alg,
+                                        unsigned int hashlen,
+                                        const unsigned char *hash,
+                                        size_t dst_len,
+                                        unsigned char *dst )
+{
+	return rsa_rsassa_pss_pkcs1_v21_encode(ctx,f_rng ,p_rng,md_alg, hashlen, hash,MBEDTLS_RSA_SALT_LEN_ANY,dst, dst_len);
+}
 
 int esp_ds_rsa_sign( void *ctx,
                      int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
@@ -237,12 +461,19 @@ int esp_ds_rsa_sign( void *ctx,
         ESP_LOGE(TAG, "Could not allocate memory for internal DS operations");
         return -1;
     }
-
+#ifdef CONFIG_MBEDTLS_SSL_PROTO_TLS1_3
+    if ((ret = (rsa_rsassa_pkcs1_v21_encode( ctx,f_rng ,p_rng, md_alg, hashlen, hash, ((s_ds_data->rsa_length + 1) * FACTOR_KEYLEN_IN_BYTES), sig ))) != 0) {
+		ESP_LOGE(TAG, "Error in pkcs1_v21 encoding, returned %d", ret);
+        heap_caps_free(signature);
+        return -1;
+    }
+#else	
     if ((ret = (rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, ((s_ds_data->rsa_length + 1) * FACTOR_KEYLEN_IN_BYTES), sig ))) != 0) {
         ESP_LOGE(TAG, "Error in pkcs1_v15 encoding, returned %d", ret);
         heap_caps_free(signature);
         return -1;
     }
+#endif
 
     for (unsigned int i = 0; i < (s_ds_data->rsa_length + 1); i++) {
         signature[i] = SWAP_INT32(((uint32_t *)sig)[(s_ds_data->rsa_length + 1) - (i + 1)]);

From 1f65a9793dde09b59a81a3a0d1f2ff915cebac68 Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Thu, 12 Dec 2024 10:11:52 +0000
Subject: [PATCH 2/3] code cleanup

---
 components/esp-tls/esp_tls_mbedtls.c | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/components/esp-tls/esp_tls_mbedtls.c b/components/esp-tls/esp_tls_mbedtls.c
index de20a56a728f..40898314a1d6 100644
--- a/components/esp-tls/esp_tls_mbedtls.c
+++ b/components/esp-tls/esp_tls_mbedtls.c
@@ -1149,15 +1149,6 @@ static esp_err_t esp_mbedtls_init_pk_ctx_for_ds(const void *pki)
     /* initialize the mbedtls pk context with rsa context */
     mbedtls_rsa_context rsakey;
     mbedtls_rsa_init(&rsakey);
-#ifdef	CONFIG_MBEDTLS_SSL_PROTO_TLS1_3
-    if ((ret = mbedtls_pk_setup_rsa_pss(((const esp_tls_pki_t*)pki)->pk_key, &rsakey, NULL, esp_ds_rsa_sign,
-                                        esp_ds_get_keylen )) != 0) {
-        ESP_LOGE(TAG, "Error in mbedtls_pk_setup_rsa_pss, returned -0x%04X", -ret);
-        mbedtls_print_error_msg(ret);
-        ret = ESP_FAIL;
-        goto exit;
-    }
-#else
     if ((ret = mbedtls_pk_setup_rsa_alt(((const esp_tls_pki_t*)pki)->pk_key, &rsakey, NULL, esp_ds_rsa_sign,
                                         esp_ds_get_keylen )) != 0) {
         ESP_LOGE(TAG, "Error in mbedtls_pk_setup_rsa_alt, returned -0x%04X", -ret);
@@ -1165,7 +1156,6 @@ static esp_err_t esp_mbedtls_init_pk_ctx_for_ds(const void *pki)
         ret = ESP_FAIL;
         goto exit;
     }
-#endif
     ret = esp_ds_init_data_ctx(((const esp_tls_pki_t*)pki)->esp_ds_data);
     if (ret != ESP_OK) {
         ESP_LOGE(TAG, "Failed to initialize DS parameters from nvs");

From b351451a28310ec3c1bd8cc37b892ba1356178ac Mon Sep 17 00:00:00 2001
From: Mayuran Sivanesan <MSivanesan@cryptoquantique.com>
Date: Thu, 12 Dec 2024 10:52:48 +0000
Subject: [PATCH 3/3] code cleanup

---
 components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c b/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c
index 80ec5a852a14..be768c15d9cb 100644
--- a/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c
+++ b/components/mbedtls/port/esp_ds/esp_rsa_sign_alt.c
@@ -429,7 +429,7 @@ static int rsa_rsassa_pss_pkcs1_v21_encode(mbedtls_rsa_context *ctx,
         return ret;
     }
 
-    msb = 3071;//mbedtls_mpi_bitlen(&ctx->N) - 1;
+    msb = dst_len*8 -1;//mbedtls_mpi_bitlen(&ctx->N) - 1;
     sig[0] &= 0xFF >> (olen * 8 - msb);
 
     p += hlen;

